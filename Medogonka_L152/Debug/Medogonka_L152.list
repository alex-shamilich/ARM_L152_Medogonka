
Medogonka_L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001981c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cfc  08019960  08019960  00029960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e65c  0801e65c  00030318  2**0
                  CONTENTS
  4 .ARM          00000008  0801e65c  0801e65c  0002e65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e664  0801e664  00030318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e664  0801e664  0002e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e668  0801e668  0002e668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0801e66c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009aec  20000318  0801e984  00030318  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009e04  0801e984  00039e04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 12 .debug_info   000731bd  00000000  00000000  00030341  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a4bc  00000000  00000000  000a34fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002b18  00000000  00000000  000ad9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002678  00000000  00000000  000b04d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d73e  00000000  00000000  000b2b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00040331  00000000  00000000  000e028e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b7287  00000000  00000000  001205bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d7846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c028  00000000  00000000  001d78c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000318 	.word	0x20000318
 800015c:	00000000 	.word	0x00000000
 8000160:	08019944 	.word	0x08019944

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000031c 	.word	0x2000031c
 800017c:	08019944 	.word	0x08019944

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002e2:	f1a4 0401 	sub.w	r4, r4, #1
 80002e6:	d1e9      	bne.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	468c      	mov	ip, r1
 8000be2:	4604      	mov	r4, r0
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0c03 	orr.w	ip, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	fbbc f7fe 	udiv	r7, ip, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e c317 	mls	r3, lr, r7, ip
 8000c1a:	fb07 f908 	mul.w	r9, r7, r8
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c24:	4599      	cmp	r9, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 31ff 	add.w	r1, r7, #4294967295
 8000c2e:	f080 811c 	bcs.w	8000e6a <__udivmoddi4+0x28e>
 8000c32:	4599      	cmp	r9, r3
 8000c34:	f240 8119 	bls.w	8000e6a <__udivmoddi4+0x28e>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	eba3 0309 	sub.w	r3, r3, r9
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	fb00 f108 	mul.w	r1, r0, r8
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c52:	42a1      	cmp	r1, r4
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	192c      	adds	r4, r5, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 8107 	bcs.w	8000e6e <__udivmoddi4+0x292>
 8000c60:	42a1      	cmp	r1, r4
 8000c62:	f240 8104 	bls.w	8000e6e <__udivmoddi4+0x292>
 8000c66:	3802      	subs	r0, #2
 8000c68:	442c      	add	r4, r5
 8000c6a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6e:	2700      	movs	r7, #0
 8000c70:	1a64      	subs	r4, r4, r1
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	2300      	movs	r3, #0
 8000c76:	40d4      	lsrs	r4, r2
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ec 	beq.w	8000e64 <__udivmoddi4+0x288>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d148      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fb 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4c00 	strd	r4, ip, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	2701      	movs	r7, #1
 8000cd0:	1b49      	subs	r1, r1, r5
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fa1f f985 	uxth.w	r9, r5
 8000cda:	fbb1 fef8 	udiv	lr, r1, r8
 8000cde:	fb08 111e 	mls	r1, r8, lr, r1
 8000ce2:	fb09 f00e 	mul.w	r0, r9, lr
 8000ce6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000cea:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x126>
 8000cf2:	18eb      	adds	r3, r5, r3
 8000cf4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x124>
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	f200 80cd 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000d00:	468e      	mov	lr, r1
 8000d02:	1a1b      	subs	r3, r3, r0
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	fb09 f900 	mul.w	r9, r9, r0
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d1a:	192c      	adds	r4, r5, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f200 80b6 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d32:	e79e      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d34:	f1c7 0520 	rsb	r5, r7, #32
 8000d38:	40bb      	lsls	r3, r7
 8000d3a:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa21 f405 	lsr.w	r4, r1, r5
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d4e:	fa1f f88c 	uxth.w	r8, ip
 8000d52:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d56:	fa20 f305 	lsr.w	r3, r0, r5
 8000d5a:	40b9      	lsls	r1, r7
 8000d5c:	fb09 fa08 	mul.w	sl, r9, r8
 8000d60:	4319      	orrs	r1, r3
 8000d62:	0c0b      	lsrs	r3, r1, #16
 8000d64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f307 	lsl.w	r3, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	eba4 040a 	sub.w	r4, r4, sl
 8000d90:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d94:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d98:	fb00 fa08 	mul.w	sl, r0, r8
 8000d9c:	b289      	uxth	r1, r1
 8000d9e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x1dc>
 8000da6:	eb1c 0404 	adds.w	r4, ip, r4
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbc:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc0:	eba4 040a 	sub.w	r4, r4, sl
 8000dc4:	454c      	cmp	r4, r9
 8000dc6:	4641      	mov	r1, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	d354      	bcc.n	8000e76 <__udivmoddi4+0x29a>
 8000dcc:	d051      	beq.n	8000e72 <__udivmoddi4+0x296>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d069      	beq.n	8000ea6 <__udivmoddi4+0x2ca>
 8000dd2:	1a5a      	subs	r2, r3, r1
 8000dd4:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd8:	fa04 f505 	lsl.w	r5, r4, r5
 8000ddc:	fa22 f307 	lsr.w	r3, r2, r7
 8000de0:	40fc      	lsrs	r4, r7
 8000de2:	431d      	orrs	r5, r3
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	4095      	lsls	r5, r2
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	fa21 f003 	lsr.w	r0, r1, r3
 8000df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000dfa:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dfe:	fa1f f985 	uxth.w	r9, r5
 8000e02:	fb08 0017 	mls	r0, r8, r7, r0
 8000e06:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	fb07 fc09 	mul.w	ip, r7, r9
 8000e10:	430b      	orrs	r3, r1
 8000e12:	0c19      	lsrs	r1, r3, #16
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	458c      	cmp	ip, r1
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x254>
 8000e20:	1869      	adds	r1, r5, r1
 8000e22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000e26:	d231      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e28:	458c      	cmp	ip, r1
 8000e2a:	d92f      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	3f02      	subs	r7, #2
 8000e2e:	4429      	add	r1, r5
 8000e30:	eba1 010c 	sub.w	r1, r1, ip
 8000e34:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e38:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e3c:	fb00 fe09 	mul.w	lr, r0, r9
 8000e40:	b299      	uxth	r1, r3
 8000e42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e46:	458e      	cmp	lr, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e50:	d218      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d916      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	eba1 010e 	sub.w	r1, r1, lr
 8000e5e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e62:	e73a      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e64:	4637      	mov	r7, r6
 8000e66:	4630      	mov	r0, r6
 8000e68:	e708      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e6a:	460f      	mov	r7, r1
 8000e6c:	e6e6      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	e6fb      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e72:	4543      	cmp	r3, r8
 8000e74:	d2ab      	bcs.n	8000dce <__udivmoddi4+0x1f2>
 8000e76:	ebb8 0102 	subs.w	r1, r8, r2
 8000e7a:	eb69 020c 	sbc.w	r2, r9, ip
 8000e7e:	3801      	subs	r0, #1
 8000e80:	4696      	mov	lr, r2
 8000e82:	e7a4      	b.n	8000dce <__udivmoddi4+0x1f2>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e7e8      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1dc>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e7cf      	b.n	8000e30 <__udivmoddi4+0x254>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3802      	subs	r0, #2
 8000e96:	442c      	add	r4, r5
 8000e98:	e747      	b.n	8000d2a <__udivmoddi4+0x14e>
 8000e9a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9e:	442b      	add	r3, r5
 8000ea0:	e72f      	b.n	8000d02 <__udivmoddi4+0x126>
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	e707      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea6:	4637      	mov	r7, r6
 8000ea8:	e6e8      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

//======================================================================================
void MX_ADC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <MX_ADC_Init+0xb0>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC_Init+0xac>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_ADC_Init+0xac>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f22:	f005 fd9f 	bl	8006a64 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <MX_ADC_Init+0x82>
  {
    Error_Handler(2);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f002 fcaf 	bl	8003890 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f32:	2310      	movs	r3, #16
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f44:	f006 f910 	bl	8007168 <HAL_ADC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <MX_ADC_Init+0xa4>
  {
    Error_Handler(2);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f002 fc9e 	bl	8003890 <Error_Handler>
  }

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20008a3c 	.word	0x20008a3c
 8000f60:	40012400 	.word	0x40012400

08000f64 <HAL_ADC_MspInit>:
//======================================================================================
void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <HAL_ADC_MspInit+0xe4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d15c      	bne.n	8001040 <HAL_ADC_MspInit+0xdc>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a24      	ldr	r2, [pc, #144]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    PE8     ------> ADC_IN23
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = ADC_V_MOTOR_Pin|ADC_V_IN_12V_Pin;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <HAL_ADC_MspInit+0xec>)
 8000ffa:	f006 fde9 	bl	8007bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SPEED_Pin;
 8000ffe:	2320      	movs	r3, #32
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_SPEED_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <HAL_ADC_MspInit+0xf0>)
 8001012:	f006 fddd 	bl	8007bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_I_IN_12V_Pin|ADC_I_MOTOR_Pin;
 8001016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_ADC_MspInit+0xf4>)
 800102c:	f006 fdd0 	bl	8007bd0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2012      	movs	r0, #18
 8001036:	f006 fb52 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800103a:	2012      	movs	r0, #18
 800103c:	f006 fb6b 	bl	8007716 <HAL_NVIC_EnableIRQ>

  }
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40012400 	.word	0x40012400
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020800 	.word	0x40020800
 8001058:	40021000 	.word	0x40021000

0800105c <ADC_GetRAWData>:
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
  }
}
//======================================================================================
uint32_t ADC_GetRAWData(uint32_t Channel)												// Получить сырые данные для обрботки по указанному каналу
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]

	sConfig.Rank         = ADC_REGULAR_RANK_1;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]

	sConfig.Channel      = Channel;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <ADC_GetRAWData+0x64>)
 8001084:	f006 f870 	bl	8007168 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <ADC_GetRAWData+0x38>
	{
		Error_Handler(2);
 800108e:	2002      	movs	r0, #2
 8001090:	f002 fbfe 	bl	8003890 <Error_Handler>
	}

	// Замер из АЦП
	HAL_ADC_Start(&hadc);
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <ADC_GetRAWData+0x64>)
 8001096:	f005 fe2b 	bl	8006cf0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 800109a:	210a      	movs	r1, #10
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <ADC_GetRAWData+0x64>)
 800109e:	f005 feb3 	bl	8006e08 <HAL_ADC_PollForConversion>
	ADC_State.ADC_RAW = HAL_ADC_GetValue(&hadc);
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <ADC_GetRAWData+0x64>)
 80010a4:	f005 ff39 	bl	8006f1a <HAL_ADC_GetValue>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <ADC_GetRAWData+0x68>)
 80010ac:	605a      	str	r2, [r3, #4]
	HAL_ADC_Stop(&hadc);
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <ADC_GetRAWData+0x64>)
 80010b0:	f005 fe7e 	bl	8006db0 <HAL_ADC_Stop>

	return ADC_State.ADC_RAW;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <ADC_GetRAWData+0x68>)
 80010b6:	685b      	ldr	r3, [r3, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20008a3c 	.word	0x20008a3c
 80010c4:	20008a98 	.word	0x20008a98

080010c8 <ADC_ScanState>:
//======================================================================================
void ADC_ScanState(void)																// Замер из АЦП по всем каналам сразу
{
 80010c8:	b598      	push	{r3, r4, r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	// ADC Channel: IN23						- ADC_I_IN_12V
	// ADC Channel: IN24						- ADC_I_MOTOR
	// ADC Channel: Temperature Sensor Channel 	- температура кристалла процессора
	// ADC Channel: Vrefint Channel				- Напряжение питания, для рассчетов опоры

	ADC_State.DataReady = 0;
 80010cc:	4ba8      	ldr	r3, [pc, #672]	; (8001370 <ADC_ScanState+0x2a8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]


	ADC_GetRAWData(ADC_CHANNEL_VREFINT);												// Канал АЦП - опорное напряжение для рассчета напряжения питания процессора
 80010d2:	2011      	movs	r0, #17
 80010d4:	f7ff ffc2 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <ADC_ScanState+0x2a8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e0:	d222      	bcs.n	8001128 <ADC_ScanState+0x60>
	{
		// Реальное напряжение питания процессора, точнее питание аналоговой части
		ADC_State.ADC_Ref_Voltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_State.ADC_RAW, hadc.Init.Resolution) / 1000.0; // калибровка батареи - опорное напряжение АЦП
 80010e2:	4ba4      	ldr	r3, [pc, #656]	; (8001374 <ADC_ScanState+0x2ac>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010ec:	fb03 f202 	mul.w	r2, r3, r2
 80010f0:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <ADC_ScanState+0x2a8>)
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	4ba0      	ldr	r3, [pc, #640]	; (8001378 <ADC_ScanState+0x2b0>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	0ddb      	lsrs	r3, r3, #23
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f990 	bl	8000428 <__aeabi_ui2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b9b      	ldr	r3, [pc, #620]	; (800137c <ADC_ScanState+0x2b4>)
 800110e:	f7ff fb2f 	bl	8000770 <__aeabi_ddiv>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	4a96      	ldr	r2, [pc, #600]	; (8001370 <ADC_ScanState+0x2a8>)
 8001118:	e9c2 3402 	strd	r3, r4, [r2, #8]
		ADC_State.DataReady++;
 800111c:	4b94      	ldr	r3, [pc, #592]	; (8001370 <ADC_ScanState+0x2a8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <ADC_ScanState+0x2a8>)
 8001126:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(ADC_CHANNEL_TEMPSENSOR);												// Канал АЦП - температура внутри процессора
 8001128:	2010      	movs	r0, #16
 800112a:	f7ff ff97 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800112e:	4b90      	ldr	r3, [pc, #576]	; (8001370 <ADC_ScanState+0x2a8>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001136:	d229      	bcs.n	800118c <ADC_ScanState+0xc4>
	{
		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, без учета реального напряжения питания
		ADC_State.CPU_Temperature 	= COMPUTATION_TEMPERATURE_TEMP30_TEMP110(ADC_State.ADC_RAW) - 2;
 8001138:	4b8d      	ldr	r3, [pc, #564]	; (8001370 <ADC_ScanState+0x2a8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4a8e      	ldr	r2, [pc, #568]	; (8001380 <ADC_ScanState+0x2b8>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	099b      	lsrs	r3, r3, #6
 800114c:	461a      	mov	r2, r3
 800114e:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <ADC_ScanState+0x2bc>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	461a      	mov	r2, r3
 800115e:	4b8a      	ldr	r3, [pc, #552]	; (8001388 <ADC_ScanState+0x2c0>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4b87      	ldr	r3, [pc, #540]	; (8001384 <ADC_ScanState+0x2bc>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1acb      	subs	r3, r1, r3
 800116a:	fb92 f3f3 	sdiv	r3, r2, r3
 800116e:	331c      	adds	r3, #28
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f969 	bl	8000448 <__aeabi_i2d>
 8001176:	4603      	mov	r3, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4a7d      	ldr	r2, [pc, #500]	; (8001370 <ADC_ScanState+0x2a8>)
 800117c:	e9c2 3404 	strd	r3, r4, [r2, #16]

//		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, с учетом реального опопрного напряжения питания
//		ADC_State.CPU_Temperature_raw 	= __LL_ADC_CALC_DATA_TO_VOLTAGE(ADC_State.ADC_Ref_Voltage, ADC_State.ADC_RAW, hadc.Init.Resolution);  // пересчет из сырых данных АЦП в напряжение в вольтах с учетом разрядности
//		ADC_State.CPU_TemperatureRef    = __LL_ADC_CALC_TEMPERATURE((uint32_t)(1000*ADC_State.ADC_Ref_Voltage), ADC_State.ADC_RAW , hadc.Init.Resolution) - 2;

		ADC_State.DataReady++;
 8001180:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <ADC_ScanState+0x2a8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b79      	ldr	r3, [pc, #484]	; (8001370 <ADC_ScanState+0x2a8>)
 800118a:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_SPEED);													// Канал АЦП - регулятор скорости мотора (пременный резистор 0..3.3V)
 800118c:	200f      	movs	r0, #15
 800118e:	f7ff ff65 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 8001192:	4b77      	ldr	r3, [pc, #476]	; (8001370 <ADC_ScanState+0x2a8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800119a:	d235      	bcs.n	8001208 <ADC_ScanState+0x140>
	{
		ADC_State.Speed_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_SPEED;
 800119c:	4b74      	ldr	r3, [pc, #464]	; (8001370 <ADC_ScanState+0x2a8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f941 	bl	8000428 <__aeabi_ui2d>
 80011a6:	a366      	add	r3, pc, #408	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff f9b6 	bl	800051c <__aeabi_dmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	4a6e      	ldr	r2, [pc, #440]	; (8001370 <ADC_ScanState+0x2a8>)
 80011b6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		ADC_State.Speed_value_percent	= (uint8_t)( (ADC_State.Speed_value_volts/ADC_REF_VOLTAGE_DEFAULT)*(double)100 );
 80011ba:	4b6d      	ldr	r3, [pc, #436]	; (8001370 <ADC_ScanState+0x2a8>)
 80011bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011c0:	a361      	add	r3, pc, #388	; (adr r3, 8001348 <ADC_ScanState+0x280>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fad3 	bl	8000770 <__aeabi_ddiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <ADC_ScanState+0x2c4>)
 80011d8:	f7ff f9a0 	bl	800051c <__aeabi_dmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4618      	mov	r0, r3
 80011e2:	4621      	mov	r1, r4
 80011e4:	f7ff fc72 	bl	8000acc <__aeabi_d2uiz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b60      	ldr	r3, [pc, #384]	; (8001370 <ADC_ScanState+0x2a8>)
 80011ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		Speed_value_percent = ADC_State.Speed_value_percent;
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <ADC_ScanState+0x2a8>)
 80011f4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80011f8:	4b65      	ldr	r3, [pc, #404]	; (8001390 <ADC_ScanState+0x2c8>)
 80011fa:	701a      	strb	r2, [r3, #0]

		ADC_State.DataReady++;
 80011fc:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <ADC_ScanState+0x2a8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b5a      	ldr	r3, [pc, #360]	; (8001370 <ADC_ScanState+0x2a8>)
 8001206:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_IN_12V);												// Канал АЦП - напряжение питания на входе
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ff27 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800120e:	4b58      	ldr	r3, [pc, #352]	; (8001370 <ADC_ScanState+0x2a8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001216:	d21d      	bcs.n	8001254 <ADC_ScanState+0x18c>
	{
		ADC_State.V_IN_12V_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_IN_12V;
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <ADC_ScanState+0x2a8>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f903 	bl	8000428 <__aeabi_ui2d>
 8001222:	a347      	add	r3, pc, #284	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff f978 	bl	800051c <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	a346      	add	r3, pc, #280	; (adr r3, 8001350 <ADC_ScanState+0x288>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f96f 	bl	800051c <__aeabi_dmul>
 800123e:	4603      	mov	r3, r0
 8001240:	460c      	mov	r4, r1
 8001242:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <ADC_ScanState+0x2a8>)
 8001244:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

		ADC_State.DataReady++;
 8001248:	4b49      	ldr	r3, [pc, #292]	; (8001370 <ADC_ScanState+0x2a8>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <ADC_ScanState+0x2a8>)
 8001252:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_MOTOR);												// Канал АЦП - напряжение питания мотора (среднее)
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff01 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <ADC_ScanState+0x2a8>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001262:	d21d      	bcs.n	80012a0 <ADC_ScanState+0x1d8>
	{
		ADC_State.V_IN_MOTOR_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_MOTOR;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <ADC_ScanState+0x2a8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_ui2d>
 800126e:	a334      	add	r3, pc, #208	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f952 	bl	800051c <__aeabi_dmul>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	a335      	add	r3, pc, #212	; (adr r3, 8001358 <ADC_ScanState+0x290>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f949 	bl	800051c <__aeabi_dmul>
 800128a:	4603      	mov	r3, r0
 800128c:	460c      	mov	r4, r1
 800128e:	4a38      	ldr	r2, [pc, #224]	; (8001370 <ADC_ScanState+0x2a8>)
 8001290:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

		ADC_State.DataReady++;
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <ADC_ScanState+0x2a8>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <ADC_ScanState+0x2a8>)
 800129e:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_IN_12V);												// Канал АЦП - общий входной ток
 80012a0:	2017      	movs	r0, #23
 80012a2:	f7ff fedb 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <ADC_ScanState+0x2a8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ae:	d21d      	bcs.n	80012ec <ADC_ScanState+0x224>
	{
		ADC_State.I_IN_12V_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_IN_12V;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <ADC_ScanState+0x2a8>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8b7 	bl	8000428 <__aeabi_ui2d>
 80012ba:	a321      	add	r3, pc, #132	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f92c 	bl	800051c <__aeabi_dmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	a324      	add	r3, pc, #144	; (adr r3, 8001360 <ADC_ScanState+0x298>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f923 	bl	800051c <__aeabi_dmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <ADC_ScanState+0x2a8>)
 80012dc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

		ADC_State.DataReady++;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <ADC_ScanState+0x2a8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <ADC_ScanState+0x2a8>)
 80012ea:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_MOTOR);												// Канал АЦП - ток мотора
 80012ec:	2018      	movs	r0, #24
 80012ee:	f7ff feb5 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <ADC_ScanState+0x2a8>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fa:	d21d      	bcs.n	8001338 <ADC_ScanState+0x270>
	{
		ADC_State.I_IN_MOTOR_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_MOTOR;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <ADC_ScanState+0x2a8>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f891 	bl	8000428 <__aeabi_ui2d>
 8001306:	a30e      	add	r3, pc, #56	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f906 	bl	800051c <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	a313      	add	r3, pc, #76	; (adr r3, 8001368 <ADC_ScanState+0x2a0>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f8fd 	bl	800051c <__aeabi_dmul>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <ADC_ScanState+0x2a8>)
 8001328:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

		ADC_State.DataReady++;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <ADC_ScanState+0x2a8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <ADC_ScanState+0x2a8>)
 8001336:	701a      	strb	r2, [r3, #0]
	}

}
 8001338:	bf00      	nop
 800133a:	bd98      	pop	{r3, r4, r7, pc}
 800133c:	f3af 8000 	nop.w
 8001340:	66666666 	.word	0x66666666
 8001344:	3f4a6666 	.word	0x3f4a6666
 8001348:	66666666 	.word	0x66666666
 800134c:	400a6666 	.word	0x400a6666
 8001350:	70a3d70a 	.word	0x70a3d70a
 8001354:	40180a3d 	.word	0x40180a3d
 8001358:	51eb851f 	.word	0x51eb851f
 800135c:	40181eb8 	.word	0x40181eb8
 8001360:	cccccccd 	.word	0xcccccccd
 8001364:	4010cccc 	.word	0x4010cccc
 8001368:	9999999a 	.word	0x9999999a
 800136c:	40099999 	.word	0x40099999
 8001370:	20008a98 	.word	0x20008a98
 8001374:	1ff800f8 	.word	0x1ff800f8
 8001378:	20008a3c 	.word	0x20008a3c
 800137c:	408f4000 	.word	0x408f4000
 8001380:	057619f1 	.word	0x057619f1
 8001384:	1ff800fa 	.word	0x1ff800fa
 8001388:	1ff800fe 	.word	0x1ff800fe
 800138c:	40590000 	.word	0x40590000
 8001390:	20008858 	.word	0x20008858

08001394 <BUZZER_Init>:

uint8_t			BUZZER_BuzzerState;														// состояние баззера (включен/выключен)

//======================================================================================
void BUZZER_Init(uint8_t state)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	; 0x40
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <BUZZER_Init+0x144>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <BUZZER_Init+0x144>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <BUZZER_Init+0x144>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <BUZZER_Init+0x144>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <BUZZER_Init+0x144>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <BUZZER_Init+0x144>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <BUZZER_Init+0x144>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <BUZZER_Init+0x144>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <BUZZER_Init+0x144>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <BUZZER_Init+0x144>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <BUZZER_Init+0x144>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <BUZZER_Init+0x144>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <BUZZER_Init+0x144>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a35      	ldr	r2, [pc, #212]	; (80014d8 <BUZZER_Init+0x144>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <BUZZER_Init+0x144>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <BUZZER_Init+0x144>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <BUZZER_Init+0x144>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <BUZZER_Init+0x144>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2120      	movs	r1, #32
 8001432:	482a      	ldr	r0, [pc, #168]	; (80014dc <BUZZER_Init+0x148>)
 8001434:	f006 fd71 	bl	8007f1a <HAL_GPIO_WritePin>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <BUZZER_Init+0x144>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <BUZZER_Init+0x144>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	61d3      	str	r3, [r2, #28]
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <BUZZER_Init+0x144>)
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin 		= BUZZER_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8001458:	2302      	movs	r3, #2
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38


	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001464:	4619      	mov	r1, r3
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <BUZZER_Init+0x148>)
 8001468:	f006 fbb2 	bl	8007bd0 <HAL_GPIO_Init>
	BUZZER_BuzzerState = state;
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <BUZZER_Init+0x14c>)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	7013      	strb	r3, [r2, #0]


	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance 				= TIM6;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <BUZZER_Init+0x150>)
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <BUZZER_Init+0x154>)
 8001476:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler 		= 32;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <BUZZER_Init+0x150>)
 800147a:	2220      	movs	r2, #32
 800147c:	605a      	str	r2, [r3, #4]
	htim6.Init.Period 			= BUZZER_HALF_PERIOD_TIM;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <BUZZER_Init+0x150>)
 8001480:	2279      	movs	r2, #121	; 0x79
 8001482:	60da      	str	r2, [r3, #12]
	htim6.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <BUZZER_Init+0x150>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <BUZZER_Init+0x150>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001490:	4814      	ldr	r0, [pc, #80]	; (80014e4 <BUZZER_Init+0x150>)
 8001492:	f009 fa71 	bl	800a978 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <BUZZER_Init+0x10e>
	{
		Error_Handler(4);
 800149c:	2004      	movs	r0, #4
 800149e:	f002 f9f7 	bl	8003890 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger 	= TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
	sMasterConfig.MasterSlaveMode 		= TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <BUZZER_Init+0x150>)
 80014b2:	f00a fc43 	bl	800bd3c <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <BUZZER_Init+0x12e>
	{
		Error_Handler(4);
 80014bc:	2004      	movs	r0, #4
 80014be:	f002 f9e7 	bl	8003890 <Error_Handler>
	}

	HAL_TIM_Base_MspInit(&htim6);														// Настройка прерываний для таймера
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <BUZZER_Init+0x150>)
 80014c4:	f001 fd4c 	bl	8002f60 <HAL_TIM_Base_MspInit>

	HAL_TIM_MspPostInit(&htim6);
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <BUZZER_Init+0x150>)
 80014ca:	f001 fdeb 	bl	80030a4 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3740      	adds	r7, #64	; 0x40
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400
 80014e0:	20008ae8 	.word	0x20008ae8
 80014e4:	20008de0 	.word	0x20008de0
 80014e8:	40001000 	.word	0x40001000

080014ec <BUZZER_Beep>:
//======================================================================================
void BUZZER_Beep(void) 																	// Generates one short beep in RealMode with stupid waiting
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
//	htim6.Init.Period = 100;
//	HAL_TIM_Base_Init(&htim6);
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <BUZZER_Beep+0x40>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d113      	bne.n	8001522 <BUZZER_Beep+0x36>
	{
		uint16_t len = BUZZER_NUM_HALF_PERIOD_NORM;
 80014fa:	2346      	movs	r3, #70	; 0x46
 80014fc:	80fb      	strh	r3, [r7, #6]
		while (len--)
 80014fe:	e006      	b.n	800150e <BUZZER_Beep+0x22>
		{
			BUZZER_INV;
 8001500:	2120      	movs	r1, #32
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <BUZZER_Beep+0x44>)
 8001504:	f006 fd21 	bl	8007f4a <HAL_GPIO_TogglePin>
			HAL_Delay(BUZZER_HALF_PERIOD);
 8001508:	2001      	movs	r0, #1
 800150a:	f005 fa89 	bl	8006a20 <HAL_Delay>
		while (len--)
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	80fa      	strh	r2, [r7, #6]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f3      	bne.n	8001500 <BUZZER_Beep+0x14>
		}
		BUZZER_OFF;
 8001518:	2200      	movs	r2, #0
 800151a:	2120      	movs	r1, #32
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <BUZZER_Beep+0x44>)
 800151e:	f006 fcfc 	bl	8007f1a <HAL_GPIO_WritePin>
	}
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20008ae8 	.word	0x20008ae8
 8001530:	40020400 	.word	0x40020400

08001534 <BUZZER_BeepTIM>:
//======================================================================================
void BUZZER_BeepTIM(void) 																// Generates one short beep under RTOS
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <BUZZER_BeepTIM+0x2c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10d      	bne.n	800155c <BUZZER_BeepTIM+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim6);													// Запуск тааймера, на обработчике состояния таймера - смена состояния пина баззера
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <BUZZER_BeepTIM+0x30>)
 8001542:	f009 fac1 	bl	800aac8 <HAL_TIM_Base_Start_IT>
		osDelay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через планировщик RTOS (минимум 1мс)
 8001546:	2046      	movs	r0, #70	; 0x46
 8001548:	f00f fd7c 	bl	8011044 <osDelay>
	//	HAL_Delay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через HAL (минимум 1мс)
		HAL_TIM_Base_Stop_IT(&htim6);
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <BUZZER_BeepTIM+0x30>)
 800154e:	f009 fb0d 	bl	800ab6c <HAL_TIM_Base_Stop_IT>
		BUZZER_OFF;
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <BUZZER_BeepTIM+0x34>)
 8001558:	f006 fcdf 	bl	8007f1a <HAL_GPIO_WritePin>
	}
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20008ae8 	.word	0x20008ae8
 8001564:	20008de0 	.word	0x20008de0
 8001568:	40020400 	.word	0x40020400

0800156c <MX_DAC_Init>:

DAC_HandleTypeDef DacHandle;

//======================================================================================
void MX_DAC_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  DacHandle.Instance = DAC;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_DAC_Init+0x50>)
 800157c:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <MX_DAC_Init+0x54>)
 800157e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&DacHandle) != HAL_OK)
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <MX_DAC_Init+0x50>)
 8001582:	f006 f8d6 	bl	8007732 <HAL_DAC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <MX_DAC_Init+0x26>
  {
    Error_Handler(3);
 800158c:	2003      	movs	r0, #3
 800158e:	f002 f97f 	bl	8003890 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACx_CHANNEL) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_DAC_Init+0x50>)
 80015a2:	f006 f95b 	bl	800785c <HAL_DAC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <MX_DAC_Init+0x46>
  {
    Error_Handler(3);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f002 f96f 	bl	8003890 <Error_Handler>
  }

}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20008aec 	.word	0x20008aec
 80015c0:	40007400 	.word	0x40007400

080015c4 <HAL_DAC_MspInit>:
//======================================================================================
void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a15      	ldr	r2, [pc, #84]	; (8001638 <HAL_DAC_MspInit+0x74>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d123      	bne.n	800162e <HAL_DAC_MspInit+0x6a>
  {
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_DAC_MspInit+0x78>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_DAC_MspInit+0x78>)
 80015ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015f0:	6253      	str	r3, [r2, #36]	; 0x24
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_DAC_MspInit+0x78>)
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_DAC_MspInit+0x78>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_DAC_MspInit+0x78>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_DAC_MspInit+0x78>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC1__MOTOR_SPEED_Pin;
 8001616:	2310      	movs	r3, #16
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161a:	2303      	movs	r3, #3
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1__MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_DAC_MspInit+0x7c>)
 800162a:	f006 fad1 	bl	8007bd0 <HAL_GPIO_Init>

  }
}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40007400 	.word	0x40007400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000

08001644 <DAC_SetValue>:
    HAL_GPIO_DeInit(DAC1__MOTOR_SPEED_GPIO_Port, DAC1__MOTOR_SPEED_Pin);
  }
}
//======================================================================================
void DAC_SetValue(uint8_t AValue)														// Установка значения в ЦАП
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	if (HAL_DAC_SetValue(&DacHandle, DACx_CHANNEL, DAC_ALIGN_8B_R, (uint32_t)AValue) != HAL_OK)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2208      	movs	r2, #8
 8001652:	2100      	movs	r1, #0
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <DAC_SetValue+0x40>)
 8001656:	f006 f8dd 	bl	8007814 <HAL_DAC_SetValue>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <DAC_SetValue+0x22>
	{
	  Error_Handler(21);//Setting value Error
 8001660:	2015      	movs	r0, #21
 8001662:	f002 f915 	bl	8003890 <Error_Handler>
	}

	if (HAL_DAC_Start(&DacHandle, DACx_CHANNEL) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <DAC_SetValue+0x40>)
 800166a:	f006 f884 	bl	8007776 <HAL_DAC_Start>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <DAC_SetValue+0x36>
	{
	  Error_Handler(21);//Start Error
 8001674:	2015      	movs	r0, #21
 8001676:	f002 f90b 	bl	8003890 <Error_Handler>
	}

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20008aec 	.word	0x20008aec

08001688 <MX_DMA_Init>:
#include <DMA.h>

//======================================================================================
void MX_DMA_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_DMA_Init+0x38>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <MX_DMA_Init+0x38>)
 8001694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_DMA_Init+0x38>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	200f      	movs	r0, #15
 80016ac:	f006 f817 	bl	80076de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016b0:	200f      	movs	r0, #15
 80016b2:	f006 f830 	bl	8007716 <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <DS18B20_Init>:

#include "main.h"
#include "cmsis_os.h" 																	// для osDelay(();
//=======================================================================================
void  DS18B20_Init(void)																// Инициализация термодатчиков
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <DS18B20_Init+0x120>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a41      	ldr	r2, [pc, #260]	; (80017e4 <DS18B20_Init+0x120>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <DS18B20_Init+0x120>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <DS18B20_Init+0x120>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <DS18B20_Init+0x120>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <DS18B20_Init+0x120>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <DS18B20_Init+0x120>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a35      	ldr	r2, [pc, #212]	; (80017e4 <DS18B20_Init+0x120>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <DS18B20_Init+0x120>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <DS18B20_Init+0x120>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a2f      	ldr	r2, [pc, #188]	; (80017e4 <DS18B20_Init+0x120>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <DS18B20_Init+0x120>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <DS18B20_Init+0x120>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <DS18B20_Init+0x120>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <DS18B20_Init+0x120>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <DS18B20_Init+0x120>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a23      	ldr	r2, [pc, #140]	; (80017e4 <DS18B20_Init+0x120>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <DS18B20_Init+0x120>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin, 		GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2101      	movs	r1, #1
 800176e:	481e      	ldr	r0, [pc, #120]	; (80017e8 <DS18B20_Init+0x124>)
 8001770:	f006 fbd3 	bl	8007f1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_MOTOR_1W_GPIO_Port, 		TEMP_MOTOR_1W_Pin, 		GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	2102      	movs	r1, #2
 8001778:	481b      	ldr	r0, [pc, #108]	; (80017e8 <DS18B20_Init+0x124>)
 800177a:	f006 fbce 	bl	8007f1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin, 	GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2104      	movs	r1, #4
 8001782:	4819      	ldr	r0, [pc, #100]	; (80017e8 <DS18B20_Init+0x124>)
 8001784:	f006 fbc9 	bl	8007f1a <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = TEMP_AIR_1W_Pin;
 8001788:	2301      	movs	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_AIR_1W_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <DS18B20_Init+0x124>)
 80017a0:	f006 fa16 	bl	8007bd0 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_MOTOR_1W_Pin;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_MOTOR_1W_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <DS18B20_Init+0x124>)
 80017bc:	f006 fa08 	bl	8007bd0 <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_DRIVER_1W_Pin;
 80017c0:	2304      	movs	r3, #4
 80017c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_DRIVER_1W_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <DS18B20_Init+0x124>)
 80017d8:	f006 f9fa 	bl	8007bd0 <HAL_GPIO_Init>
}
 80017dc:	bf00      	nop
 80017de:	3730      	adds	r7, #48	; 0x30
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400

080017ec <DS18B20_ConfigPinToRead>:
//=======================================================================================
void  DS18B20_ConfigPinToRead(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как вход на чтение
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f006 f9da 	bl	8007bd0 <HAL_GPIO_Init>
}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <DS18B20_ConfigPinToWrite>:
//=======================================================================================
void  DS18B20_ConfigPinToWrite(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как выход на запись
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f006 f9be 	bl	8007bd0 <HAL_GPIO_Init>
}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <DS18B20_ResetN>:

//=======================================================================================
// Транспортный уровень 1-Wire уровень программно:
//=======================================================================================
uint8_t DS18B20_ResetN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)							// Сделать RESET на 1-Wire линии
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 1;																	// Код возврата (0=Ок, 1=Ошибка)
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4619      	mov	r1, r3
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffd7 	bl	8001824 <DS18B20_ConfigPinToWrite>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001876:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 480 мкс
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f006 fb4b 	bl	8007f1a <HAL_GPIO_WritePin>
	Delay_us(480);
 8001884:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001888:	f001 fc6a 	bl	8003160 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ и ждем 60 мкс
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	2201      	movs	r2, #1
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f006 fb41 	bl	8007f1a <HAL_GPIO_WritePin>
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffa5 	bl	80017ec <DS18B20_ConfigPinToRead>
	Delay_us(60);
 80018a2:	203c      	movs	r0, #60	; 0x3c
 80018a4:	f001 fc5c 	bl	8003160 <Delay_us>
	ret = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии и ждем завершения 420 мкс
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f006 fb1d 	bl	8007eec <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80018b6:	b662      	cpsie	i
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(420);
 80018b8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80018bc:	f001 fc50 	bl	8003160 <Delay_us>
	return ret;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <DS18B20_Write_BitN>:
//=======================================================================================
void DS18B20_Write_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) // Отправка 1 бита в 1-Wire
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	2200      	movs	r2, #0
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f006 fb1a 	bl	8007f1a <HAL_GPIO_WritePin>
	Delay_us(1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f001 fc3a 	bl	8003160 <Delay_us>
	if (PinState == GPIO_PIN_SET)														// Если нужно записать 1
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <DS18B20_Write_BitN+0x34>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);								// 		отпускаем линию ВВЕРХ
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f006 fb0e 	bl	8007f1a <HAL_GPIO_WritePin>
	else																				// 		продолжаем держать линию ВНИЗу и ждем  60 мкс
	{
	}
	Delay_us(60);
 80018fe:	203c      	movs	r0, #60	; 0x3c
 8001900:	f001 fc2e 	bl	8003160 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// 		отпускаем линию ВВЕРХ
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	2201      	movs	r2, #1
 8001908:	4619      	mov	r1, r3
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f006 fb05 	bl	8007f1a <HAL_GPIO_WritePin>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <DS18B20_Write_ByteN>:
//=======================================================================================
void DS18B20_Write_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t byte) 			// Отправка 1 байта в 1-Wire
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
	uint8_t i = 8;
 8001928:	2308      	movs	r3, #8
 800192a:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	73bb      	strb	r3, [r7, #14]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	4619      	mov	r1, r3
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff75 	bl	8001824 <DS18B20_ConfigPinToWrite>
  __ASM volatile ("cpsid i" : : : "memory");
 800193a:	b672      	cpsid	i
	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 800193c:	e00c      	b.n	8001958 <DS18B20_Write_ByteN+0x40>
	{
		bit = byte & 1;
 800193e:	787b      	ldrb	r3, [r7, #1]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	73bb      	strb	r3, [r7, #14]
		DS18B20_Write_BitN(GPIOx, GPIO_Pin, bit);										// Пишем текущий бит
 8001946:	7bba      	ldrb	r2, [r7, #14]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffbc 	bl	80018ca <DS18B20_Write_BitN>
		byte >>= 1;																		// и сдвигаем на 1 позицию вправо для записи следующего бита
 8001952:	787b      	ldrb	r3, [r7, #1]
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	707b      	strb	r3, [r7, #1]
	while (i--)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	73fa      	strb	r2, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ed      	bne.n	800193e <DS18B20_Write_ByteN+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 8001962:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <DS18B20_Read_BitN>:
//=======================================================================================
uint8_t DS18B20_Read_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 бита из 1-Wire
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
	uint8_t bit = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	737b      	strb	r3, [r7, #13]
	uint16_t wait = 5;
 800197c:	2305      	movs	r3, #5
 800197e:	81fb      	strh	r3, [r7, #14]

	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff4d 	bl	8001824 <DS18B20_ConfigPinToWrite>

	// запрос приема бита
//	__disable_irq(); 																	// Глобально запретить все прерывания здесь важна времянка и чтобы никто не отвлекал!!!
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	2200      	movs	r2, #0
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f006 fac2 	bl	8007f1a <HAL_GPIO_WritePin>
//	Delay_us(1);
	while (wait--);																		// делаем так, т.к. вверхед на Delay_us(1); сильно больше необходимого интервала
 8001996:	bf00      	nop
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	81fa      	strh	r2, [r7, #14]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1fa      	bne.n	8001998 <DS18B20_Read_BitN+0x2c>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f006 fab6 	bl	8007f1a <HAL_GPIO_WritePin>

	// читаем ответа бита
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 80019ae:	887b      	ldrh	r3, [r7, #2]
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ff1a 	bl	80017ec <DS18B20_ConfigPinToRead>
	//Delay_us(14);																		// и ждем 14 мкс
	//Delay_us(2);																		// Delay_us - не точно работает за счет оверхеда на HAL на таких задержках (при 14мкс пролетает мимо)

//	LED_LIGHT_SET;
	bit = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f006 fa95 	bl	8007eec <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	737b      	strb	r3, [r7, #13]
//	LED_LIGHT_RESE  T;

//	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(50);																		// Ждем 45 мкс до конца, и возвращаем считанное значение
 80019c6:	2032      	movs	r0, #50	; 0x32
 80019c8:	f001 fbca 	bl	8003160 <Delay_us>

	return bit;
 80019cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <DS18B20_Read_ByteN>:
//=======================================================================================
uint8_t DS18B20_Read_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 байта из 1-Wire
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]
	uint8_t i = 8;
 80019e2:	2308      	movs	r3, #8
 80019e4:	73fb      	strb	r3, [r7, #15]
	uint8_t n = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ea:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 80019ec:	e00f      	b.n	8001a0e <DS18B20_Read_ByteN+0x38>
	{
		n >>= 1;																		// сдвигаем на 1 позицию вправо
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	73bb      	strb	r3, [r7, #14]
		n |= (DS18B20_Read_BitN(GPIOx, GPIO_Pin) << 7);									// и сохраняем считанное значение
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffb7 	bl	800196c <DS18B20_Read_BitN>
 80019fe:	4603      	mov	r3, r0
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	73bb      	strb	r3, [r7, #14]
	while (i--)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	73fa      	strb	r2, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ea      	bne.n	80019ee <DS18B20_Read_ByteN+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a18:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	return n;
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <DS18B20_Measure_Async_Start>:

//=======================================================================================
// High-level functions
//=======================================================================================
void DS18B20_Measure_Async_Start(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{	// Асинхронный старт измерения температуры чтобы в процессе можно было чем-то еще заняться.
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]

	// Установка битности преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff11 	bl	800185c <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	22cc      	movs	r2, #204	; 0xcc
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff69 	bl	8001918 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_WSCRATCHPAD);						// пошлем команду о том что мы будем сейчас писать данные в ScratchPad (3 байта)
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	224e      	movs	r2, #78	; 0x4e
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff63 	bl	8001918 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Th (верхний порог аларма, здесь нам не нужен)
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff5d 	bl	8001918 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Tl (нижний порог аларма, здесь нам не нужен)
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff57 	bl	8001918 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_RES_12BIT);							// запись регистра конфигурации (разрядность преобразования температуры)
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	227f      	movs	r2, #127	; 0x7f
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff51 	bl	8001918 <DS18B20_Write_ByteN>

	// Запуск преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff feee 	bl	800185c <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	22cc      	movs	r2, #204	; 0xcc
 8001a84:	4619      	mov	r1, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff46 	bl	8001918 <DS18B20_Write_ByteN>

	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_CONVERTTEMP);						// пошлем команду о том что нужно запусить процесс измерения
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	2244      	movs	r2, #68	; 0x44
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff40 	bl	8001918 <DS18B20_Write_ByteN>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <DS18B20_Measure_Async_FinishN>:
//=======================================================================================
uint16_t DS18B20_Measure_Async_FinishN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
	int16_t Temp_FULL = DS18B20_ERR;													// такого кода на бывает у этих датчиков (5 старших разрядов должны быть одинаково 0 или 1, там знак температуры пишется)
 8001aac:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001ab0:	83fb      	strh	r3, [r7, #30]
	int16_t Temp_LSByte;
	int16_t Temp_MSByte;
	uint8_t ScratchPad[DS18X20_SP_SIZE];
//	uint8_t CRC_Result = DS18X20_ERROR_CRC;

	if (DS18B20_ResetN(GPIOx, GPIO_Pin) == 0)											// Если на RESET пришел правильный ответ PRESENSE
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fed0 	bl	800185c <DS18B20_ResetN>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d13e      	bne.n	8001b40 <DS18B20_Measure_Async_FinishN+0xa0>
	{
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	22cc      	movs	r2, #204	; 0xcc
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff25 	bl	8001918 <DS18B20_Write_ByteN>
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_RSCRATCHPAD);					// Запрос на чтение ScratchPad
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	22be      	movs	r2, #190	; 0xbe
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff1f 	bl	8001918 <DS18B20_Write_ByteN>

		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e00f      	b.n	8001b00 <DS18B20_Measure_Async_FinishN+0x60>
			ScratchPad[i] = DS18B20_Read_ByteN(GPIOx, GPIO_Pin);
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff76 	bl	80019d6 <DS18B20_Read_ByteN>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	f107 0208 	add.w	r2, r7, #8
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4413      	add	r3, r2
 8001af6:	460a      	mov	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	ddec      	ble.n	8001ae0 <DS18B20_Measure_Async_FinishN+0x40>

		DS18B20_ResetN(GPIOx, GPIO_Pin);												// Сброс по окончании чтения ScratchPad
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fea6 	bl	800185c <DS18B20_ResetN>


		// После вычисления контрольной суммы мастер должен сравнить получившееся значение с переданной CRC.
		// Если эти значения совпадают, значит прием данных прошел без ошибок.
		// Можно также вычислить контрольную сумму для всех 64 принятых бит, тогда результат должен быть равен нулю. (Из статьи Ридико Л.И.)
		if ( DS18B20_CRC8( &ScratchPad[0], DS18X20_SP_SIZE ) == 0 )								// если CRC проверен, возвращаем 2 байта температуры (потом декодировать)
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	2109      	movs	r1, #9
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f8ec 	bl	8001cf4 <DS18B20_CRC8>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10b      	bne.n	8001b3a <DS18B20_Measure_Async_FinishN+0x9a>
		{
			Temp_LSByte = ScratchPad[0];							// temp LSByte младший
 8001b22:	7a3b      	ldrb	r3, [r7, #8]
 8001b24:	82fb      	strh	r3, [r7, #22]
			Temp_MSByte = ScratchPad[1];							// temp MSByte старший
 8001b26:	7a7b      	ldrb	r3, [r7, #9]
 8001b28:	82bb      	strh	r3, [r7, #20]
			Temp_FULL   = ((Temp_MSByte << 8) + (Temp_LSByte));
 8001b2a:	8abb      	ldrh	r3, [r7, #20]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	8afb      	ldrh	r3, [r7, #22]
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	83fb      	strh	r3, [r7, #30]
 8001b38:	e002      	b.n	8001b40 <DS18B20_Measure_Async_FinishN+0xa0>
//			CRC_Result = DS18X20_ERROR_CRC;
		}
		else
		{
			// Если передача прошла с ошибкой - передаем ошибку
			Temp_FULL = DS18B20_ERR;
 8001b3a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001b3e:	83fb      	strh	r3, [r7, #30]
		}

	}
	return Temp_FULL;
 8001b40:	8bfb      	ldrh	r3, [r7, #30]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <DS18B20_Temperature_Double>:
	}
	return (int8_t)((TempWord & 0b0000011111110000) >> 4);								// целая часть
}
//=======================================================================================
double DS18B20_Temperature_Double(uint16_t TempWord)									// Получить температуру полностью со знаком и в double
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
	double temp_c = -56.0;
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	4c62      	ldr	r4, [pc, #392]	; (8001ce4 <DS18B20_Temperature_Double+0x198>)
 8001b5c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (TempWord >= 0x800) 																// Ортицательная температура
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b66:	d363      	bcc.n	8001c30 <DS18B20_Temperature_Double+0xe4>
	{
		temp_c = 0;
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f04f 0400 	mov.w	r4, #0
 8001b70:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c += 0.06250;
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <DS18B20_Temperature_Double+0x48>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <DS18B20_Temperature_Double+0x19c>)
 8001b84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b88:	f7fe fb12 	bl	80001b0 <__adddf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c += 0.12500;
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <DS18B20_Temperature_Double+0x6a>
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001baa:	f7fe fb01 	bl	80001b0 <__adddf3>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c += 0.25000;
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00a      	beq.n	8001bd6 <DS18B20_Temperature_Double+0x8a>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b49      	ldr	r3, [pc, #292]	; (8001cec <DS18B20_Temperature_Double+0x1a0>)
 8001bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bca:	f7fe faf1 	bl	80001b0 <__adddf3>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c += 0.50000;
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <DS18B20_Temperature_Double+0xaa>
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <DS18B20_Temperature_Double+0x1a4>)
 8001be6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bea:	f7fe fae1 	bl	80001b0 <__adddf3>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	e9c7 3402 	strd	r3, r4, [r7, #8]

		// целая часть
		TempWord = (TempWord >> 4) & 0x00FF;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	80fb      	strh	r3, [r7, #6]
		TempWord = TempWord - 0x0001; //subtract 1
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	80fb      	strh	r3, [r7, #6]
		TempWord = ~TempWord; //ones compliment
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	80fb      	strh	r3, [r7, #6]
		temp_c = temp_c - (double)(TempWord & 0xFF);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc19 	bl	8000448 <__aeabi_i2d>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c22:	f7fe fac3 	bl	80001ac <__aeabi_dsub>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001c2e:	e051      	b.n	8001cd4 <DS18B20_Temperature_Double+0x188>
	}
	else 																				// Положительная температура
	{
		temp_c = 0;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	f04f 0400 	mov.w	r4, #0
 8001c38:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// целая часть
		temp_c = (TempWord >> 4) & 0x00FF;
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fbff 	bl	8000448 <__aeabi_i2d>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c = temp_c + 0.06250;
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00a      	beq.n	8001c72 <DS18B20_Temperature_Double+0x126>
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <DS18B20_Temperature_Double+0x19c>)
 8001c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c66:	f7fe faa3 	bl	80001b0 <__adddf3>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c = temp_c + 0.12500;
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <DS18B20_Temperature_Double+0x148>
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001c84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c88:	f7fe fa92 	bl	80001b0 <__adddf3>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c = temp_c + 0.25000;
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <DS18B20_Temperature_Double+0x168>
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <DS18B20_Temperature_Double+0x1a0>)
 8001ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ca8:	f7fe fa82 	bl	80001b0 <__adddf3>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c = temp_c + 0.50000;
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <DS18B20_Temperature_Double+0x188>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <DS18B20_Temperature_Double+0x1a4>)
 8001cc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cc8:	f7fe fa72 	bl	80001b0 <__adddf3>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	460c      	mov	r4, r1
 8001cd0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}
	return temp_c;
 8001cd4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	4621      	mov	r1, r4
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	c04c0000 	.word	0xc04c0000
 8001ce8:	3fb00000 	.word	0x3fb00000
 8001cec:	3fd00000 	.word	0x3fd00000
 8001cf0:	3fe00000 	.word	0x3fe00000

08001cf4 <DS18B20_CRC8>:
//=======================================================================================
#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0
////=======================================================================================
uint8_t DS18B20_CRC8( uint8_t *data, uint16_t number_of_bytes_in_data )					// Рассчет CRC
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;

	crc = CRC8INIT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	81bb      	strh	r3, [r7, #12]
 8001d08:	e02a      	b.n	8001d60 <DS18B20_CRC8+0x6c>
	{
		b = data[loop_count];
 8001d0a:	89bb      	ldrh	r3, [r7, #12]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	72bb      	strb	r3, [r7, #10]

		bit_counter = 8;
 8001d14:	2308      	movs	r3, #8
 8001d16:	72fb      	strb	r3, [r7, #11]
		do {
			feedback_bit = (crc ^ b) & 0x01;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	4053      	eors	r3, r2
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	727b      	strb	r3, [r7, #9]

			if ( feedback_bit == 0x01 ) {
 8001d26:	7a7b      	ldrb	r3, [r7, #9]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d103      	bne.n	8001d34 <DS18B20_CRC8+0x40>
				crc = crc ^ CRC8POLY;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	f083 0318 	eor.w	r3, r3, #24
 8001d32:	73fb      	strb	r3, [r7, #15]
			}
			crc = (crc >> 1) & 0x7F;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
			if ( feedback_bit == 0x01 ) {
 8001d3a:	7a7b      	ldrb	r3, [r7, #9]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d103      	bne.n	8001d48 <DS18B20_CRC8+0x54>
				crc = crc | 0x80;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d46:	73fb      	strb	r3, [r7, #15]
			}

			b = b >> 1;
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	72bb      	strb	r3, [r7, #10]
			bit_counter--;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	72fb      	strb	r3, [r7, #11]

		} while (bit_counter > 0);
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1de      	bne.n	8001d18 <DS18B20_CRC8+0x24>
	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001d5a:	89bb      	ldrh	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	81bb      	strh	r3, [r7, #12]
 8001d60:	89ba      	ldrh	r2, [r7, #12]
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1d0      	bne.n	8001d0a <DS18B20_CRC8+0x16>
	}

	return crc;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <Display_Test>:

char str[18];																			// Для печати строк через sprintf

//======================================================================================
void Display_Test(uint16_t pos_x, uint16_t pos_y)										// Для тестов
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80bb      	strh	r3, [r7, #4]
//	sprintf(str, "%04.3f", ADC_State.Speed_value_volts);
//	LCD9488_GUI_Draw_StringColor(10, 230, str, (unsigned char*)LCD55Mono37x48, RED, CYAN, DRAW_NO_OVERLYING);

	sprintf(str, "%02d", Speed_value_percent);
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <Display_Test+0x44>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <Display_Test+0x48>)
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <Display_Test+0x4c>)
 8001d8e:	f013 fe09 	bl	80159a4 <siprintf>
//	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Digital7Mono32x48, RED, CYAN, DRAW_NO_OVERLYING);
	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Unispace32x48_Digits, RED, CYAN, DRAW_NO_OVERLYING);
 8001d92:	2300      	movs	r3, #0
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <Display_Test+0x50>)
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <Display_Test+0x4c>)
 8001da6:	21e6      	movs	r1, #230	; 0xe6
 8001da8:	20c8      	movs	r0, #200	; 0xc8
 8001daa:	f002 fd91 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>


}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20008858 	.word	0x20008858
 8001dbc:	08019960 	.word	0x08019960
 8001dc0:	200090c8 	.word	0x200090c8
 8001dc4:	0801db58 	.word	0x0801db58

08001dc8 <Display_SystemVoltage>:
//======================================================================================
void Display_SystemVoltage(uint16_t pos_x, uint16_t pos_y)								// Показать напряжение питания процессора
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	80fb      	strh	r3, [r7, #6]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80bb      	strh	r3, [r7, #4]
	unsigned char* Font = (unsigned char*)Arial_9;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <Display_SystemVoltage+0x8c>)
 8001dda:	60fb      	str	r3, [r7, #12]

	sprintf(str, "Vcc = %3.2fv", ADC_State.ADC_Ref_Voltage);
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <Display_SystemVoltage+0x90>)
 8001dde:	f103 0408 	add.w	r4, r3, #8
 8001de2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4623      	mov	r3, r4
 8001dea:	491c      	ldr	r1, [pc, #112]	; (8001e5c <Display_SystemVoltage+0x94>)
 8001dec:	481c      	ldr	r0, [pc, #112]	; (8001e60 <Display_SystemVoltage+0x98>)
 8001dee:	f013 fdd9 	bl	80159a4 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001df2:	88b9      	ldrh	r1, [r7, #4]
 8001df4:	88f8      	ldrh	r0, [r7, #6]
 8001df6:	2300      	movs	r3, #0
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <Display_SystemVoltage+0x98>)
 8001e0a:	f002 fd61 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>

	sprintf(str, "Tmp = %+2dC", (int)ADC_State.CPU_Temperature);
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <Display_SystemVoltage+0x90>)
 8001e10:	f103 0410 	add.w	r4, r3, #16
 8001e14:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	f7fe fe2e 	bl	8000a7c <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	490f      	ldr	r1, [pc, #60]	; (8001e64 <Display_SystemVoltage+0x9c>)
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <Display_SystemVoltage+0x98>)
 8001e28:	f013 fdbc 	bl	80159a4 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y + 10, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	330a      	adds	r3, #10
 8001e30:	b299      	uxth	r1, r3
 8001e32:	88f8      	ldrh	r0, [r7, #6]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <Display_SystemVoltage+0x98>)
 8001e48:	f002 fd42 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>

}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	0801d2b0 	.word	0x0801d2b0
 8001e58:	20008a98 	.word	0x20008a98
 8001e5c:	08019968 	.word	0x08019968
 8001e60:	200090c8 	.word	0x200090c8
 8001e64:	08019978 	.word	0x08019978

08001e68 <Display_MotorDirection>:
//======================================================================================
void Display_MotorDirection(uint16_t pos_x, uint16_t pos_y, TMotorDirection AMotorDirection) // Показать направление вращения мотора
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	460b      	mov	r3, r1
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	70fb      	strb	r3, [r7, #3]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <Display_MotorDirection+0x88>)
 8001e7c:	60fb      	str	r3, [r7, #12]
	switch (AMotorDirection)
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d013      	beq.n	8001eac <Display_MotorDirection+0x44>
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d020      	beq.n	8001eca <Display_MotorDirection+0x62>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d000      	beq.n	8001e8e <Display_MotorDirection+0x26>
			break;
		case MD_REV:
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
			break;
	}
}
 8001e8c:	e02c      	b.n	8001ee8 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, " STOP  ", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001e8e:	88b9      	ldrh	r1, [r7, #4]
 8001e90:	88f8      	ldrh	r0, [r7, #6]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <Display_MotorDirection+0x8c>)
 8001ea6:	f002 fd13 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>
			break;
 8001eaa:	e01d      	b.n	8001ee8 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "FORWARD", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001eac:	88b9      	ldrh	r1, [r7, #4]
 8001eae:	88f8      	ldrh	r0, [r7, #6]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <Display_MotorDirection+0x90>)
 8001ec4:	f002 fd04 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>
			break;
 8001ec8:	e00e      	b.n	8001ee8 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001eca:	88b9      	ldrh	r1, [r7, #4]
 8001ecc:	88f8      	ldrh	r0, [r7, #6]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <Display_MotorDirection+0x94>)
 8001ee2:	f002 fcf5 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>
			break;
 8001ee6:	bf00      	nop
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	0801a848 	.word	0x0801a848
 8001ef4:	08019984 	.word	0x08019984
 8001ef8:	0801998c 	.word	0x0801998c
 8001efc:	08019994 	.word	0x08019994

08001f00 <Display_MotorSpeed>:
//======================================================================================
void Display_MotorSpeed(uint16_t pos_x, uint16_t pos_y, uint16_t ASpeed) 					// Показать скорость вращения мотора
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	80bb      	strh	r3, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	807b      	strh	r3, [r7, #2]
	unsigned char* Font = (unsigned char*)Unispace32x48_Digits;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <Display_MotorSpeed+0x44>)
 8001f14:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%04d", (uint16_t)ASpeed);
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	490b      	ldr	r1, [pc, #44]	; (8001f48 <Display_MotorSpeed+0x48>)
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <Display_MotorSpeed+0x4c>)
 8001f1e:	f013 fd41 	bl	80159a4 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001f22:	88b9      	ldrh	r1, [r7, #4]
 8001f24:	88f8      	ldrh	r0, [r7, #6]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	231f      	movs	r3, #31
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <Display_MotorSpeed+0x4c>)
 8001f38:	f002 fcca 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0801db58 	.word	0x0801db58
 8001f48:	0801999c 	.word	0x0801999c
 8001f4c:	200090c8 	.word	0x200090c8

08001f50 <Display_Temperature>:
//======================================================================================
void Display_Temperature(uint16_t pos_x, uint16_t pos_y, double ATemp) 						// Показать температуру
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af04      	add	r7, sp, #16
 8001f56:	e9c7 2300 	strd	r2, r3, [r7]
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	81fb      	strh	r3, [r7, #14]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	81bb      	strh	r3, [r7, #12]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <Display_Temperature+0x44>)
 8001f64:	617b      	str	r3, [r7, #20]

	sprintf(str, "Temp = %+2.1f C", ATemp );
 8001f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f6a:	490b      	ldr	r1, [pc, #44]	; (8001f98 <Display_Temperature+0x48>)
 8001f6c:	480b      	ldr	r0, [pc, #44]	; (8001f9c <Display_Temperature+0x4c>)
 8001f6e:	f013 fd19 	bl	80159a4 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001f72:	89b9      	ldrh	r1, [r7, #12]
 8001f74:	89f8      	ldrh	r0, [r7, #14]
 8001f76:	2300      	movs	r3, #0
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	231f      	movs	r3, #31
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <Display_Temperature+0x4c>)
 8001f88:	f002 fca2 	bl	80048d0 <LCD9488_GUI_Draw_StringColor>
}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	0801a848 	.word	0x0801a848
 8001f98:	080199a4 	.word	0x080199a4
 8001f9c:	200090c8 	.word	0x200090c8

08001fa0 <EEPROM_OptionsLoadDefault>:



//=======================================================================================
void EEPROM_OptionsLoadDefault(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
// MP_Power_Set_5V0(POWERSTATE_DISABLE);
// MP_Power_Set_10V(POWERSTATE_DISABLE);
// MP_Power_Set_EOP(POWERSTATE_DISABLE);
// MP_Power_Set_Encoder(POWERSTATE_DISABLE);
//
	ExchangeStruct.TerminalFormat = TERMINALFORMAT_HUMAN;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <EEPROM_OptionsLoadDefault+0x14>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	725a      	strb	r2, [r3, #9]
//	ExchangeStruct.TerminalFormat = TERMINALFORMAT_MACHINE;
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20008910 	.word	0x20008910

08001fb8 <EEPROM_OptionsLoad>:
//=======================================================================================
void EEPROM_OptionsLoad(void)															// Загрузить настройки из энергонезависимой памяти
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	EEPROM_OptionsLoadDefault();
 8001fbc:	f7ff fff0 	bl	8001fa0 <EEPROM_OptionsLoadDefault>
// ExchangeStruct.DeviceSerialNumber[8] = '\0';
//
//
// MP_BUZZER_BuzzerState = (((uint8_t)( *(__IO uint32_t*)(EEPROM_ADDR_BASE + EEPROM_ADDR_SETTINGS_BUZZER) ) == 0)?(BUZZER_STSTE_OFF):(BUZZER_STSTE_ON)) ;
//
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <EEPROM_OptionsSave>:
//=======================================================================================
void EEPROM_OptionsSave(void)															// Сохранить настройки в энергонезависимой памяти
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
//	 // MP_ExchangeStruct.TerminalMode = TERMINALMODE_COMMAND;
//	 //	double ref_3v3 = 3.4596459;
//	 //	double ref_12v = 14.00116007;
//	 //	EEPROM_WriteObject(EEPROM_ADDR_SETTINGS_ADCREF3V3, &ref_3v3, sizeof(ref_3v3) );
//	 //	EEPROM_WriteObject(EEPROM_ADDR_SETTINGS_ADCREF12V, &ref_12v, sizeof(ref_12v) );
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <Encoder_Init>:

#include <Encoder.h>

//=======================================================================================
void  Encoder_Init(void)																	// Настройка GPIO портов для энкодера
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <Encoder_Init+0xfc>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <Encoder_Init+0xfc>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <Encoder_Init+0xfc>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <Encoder_Init+0xfc>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a36      	ldr	r2, [pc, #216]	; (80020cc <Encoder_Init+0xfc>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	61d3      	str	r3, [r2, #28]
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <Encoder_Init+0xfc>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <Encoder_Init+0xfc>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a30      	ldr	r2, [pc, #192]	; (80020cc <Encoder_Init+0xfc>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <Encoder_Init+0xfc>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <Encoder_Init+0xfc>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <Encoder_Init+0xfc>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <Encoder_Init+0xfc>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <Encoder_Init+0xfc>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <Encoder_Init+0xfc>)
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <Encoder_Init+0xfc>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <Encoder_Init+0xfc>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <Encoder_Init+0xfc>)
 8002054:	f043 0320 	orr.w	r3, r3, #32
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <Encoder_Init+0xfc>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]


	GPIO_InitTypeDef GPIO_InitStruct;

	// ENC_BTN
	GPIO_InitStruct.Pin 		= ENC_BTN_Pin;
 8002066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <Encoder_Init+0x100>)
 800206e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002074:	2301      	movs	r3, #1
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4815      	ldr	r0, [pc, #84]	; (80020d4 <Encoder_Init+0x104>)
 8002080:	f005 fda6 	bl	8007bd0 <HAL_GPIO_Init>

	// ENC_A
    GPIO_InitStruct.Pin 		= ENC_A_Pin;
 8002084:	2308      	movs	r3, #8
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate 	= GPIO_AF2_TIM3;
 8002094:	2302      	movs	r3, #2
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	480e      	ldr	r0, [pc, #56]	; (80020d8 <Encoder_Init+0x108>)
 80020a0:	f005 fd96 	bl	8007bd0 <HAL_GPIO_Init>

	// ENC_B
    GPIO_InitStruct.Pin 		= ENC_B_Pin;
 80020a4:	2310      	movs	r3, #16
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b4:	2302      	movs	r3, #2
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <Encoder_Init+0x108>)
 80020c0:	f005 fd86 	bl	8007bd0 <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	; 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	10210000 	.word	0x10210000
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40021000 	.word	0x40021000

080020dc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
//__weak void configureTimerForRunTimeStats(void)
void configureTimerForRunTimeStats(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim9);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <configureTimerForRunTimeStats+0x10>)
 80020e2:	f008 fc89 	bl	800a9f8 <HAL_TIM_Base_Start>
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20008e20 	.word	0x20008e20

080020f0 <getRunTimeCounterValue>:

//__weak unsigned long getRunTimeCounterValue(void)
unsigned long getRunTimeCounterValue(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
    static unsigned long counter = 0;

     counter += __HAL_TIM_GET_COUNTER(&htim9);
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <getRunTimeCounterValue+0x28>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <getRunTimeCounterValue+0x2c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <getRunTimeCounterValue+0x2c>)
 8002102:	6013      	str	r3, [r2, #0]
     __HAL_TIM_SET_COUNTER(&htim9, 0);
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <getRunTimeCounterValue+0x28>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	; 0x24

     return counter;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <getRunTimeCounterValue+0x2c>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	20008e20 	.word	0x20008e20
 800211c:	20000334 	.word	0x20000334

08002120 <MX_FREERTOS_Init>:

//======================================================================================
void MX_FREERTOS_Init(void)																// FreeRTOS initialization
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  // Create the mutex(es)
  myMutex_I2C1Handle 		= osMutexNew(&myMutex_I2C1_attributes);						// creation of myMutex_I2C1
 8002124:	4838      	ldr	r0, [pc, #224]	; (8002208 <MX_FREERTOS_Init+0xe8>)
 8002126:	f00e ffbb 	bl	80110a0 <osMutexNew>
 800212a:	4602      	mov	r2, r0
 800212c:	4b37      	ldr	r3, [pc, #220]	; (800220c <MX_FREERTOS_Init+0xec>)
 800212e:	601a      	str	r2, [r3, #0]
  MircoRL_Tx_MutexHandle 	= osMutexNew(&MutexMircoRL_Tx_attributes);					// creation of MutexMircoRL_Tx
 8002130:	4837      	ldr	r0, [pc, #220]	; (8002210 <MX_FREERTOS_Init+0xf0>)
 8002132:	f00e ffb5 	bl	80110a0 <osMutexNew>
 8002136:	4602      	mov	r2, r0
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <MX_FREERTOS_Init+0xf4>)
 800213a:	601a      	str	r2, [r3, #0]
  MircoRL_TxCMD_MutexHandle	= osMutexNew(&MutexMircoRL_TxCMD_attributes);				// creation of MutexMircoRL_TxCMD
 800213c:	4836      	ldr	r0, [pc, #216]	; (8002218 <MX_FREERTOS_Init+0xf8>)
 800213e:	f00e ffaf 	bl	80110a0 <osMutexNew>
 8002142:	4602      	mov	r2, r0
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <MX_FREERTOS_Init+0xfc>)
 8002146:	601a      	str	r2, [r3, #0]

  MicroRL_xRxSemaphore = xSemaphoreCreateCounting(10,0);
 8002148:	2100      	movs	r1, #0
 800214a:	200a      	movs	r0, #10
 800214c:	f00f fc47 	bl	80119de <xQueueCreateCountingSemaphore>
 8002150:	4602      	mov	r2, r0
 8002152:	4b33      	ldr	r3, [pc, #204]	; (8002220 <MX_FREERTOS_Init+0x100>)
 8002154:	601a      	str	r2, [r3, #0]
  MicroRL_xTxSemaphore = xSemaphoreCreateBinary();
 8002156:	2203      	movs	r2, #3
 8002158:	2100      	movs	r1, #0
 800215a:	2001      	movs	r0, #1
 800215c:	f00f fb2a 	bl	80117b4 <xQueueGenericCreate>
 8002160:	4602      	mov	r2, r0
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <MX_FREERTOS_Init+0x104>)
 8002164:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(MicroRL_xTxSemaphore);
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <MX_FREERTOS_Init+0x104>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	f00f fc66 	bl	8011a40 <xQueueGenericSend>

  // Create the queue(s)
  myQueue_UART_RxHandle 	= osMessageQueueNew (32, sizeof(uint8_t), &myQueue_UART_Rx_attributes);	// creation of myQueue_UART_Rx
 8002174:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <MX_FREERTOS_Init+0x108>)
 8002176:	2101      	movs	r1, #1
 8002178:	2020      	movs	r0, #32
 800217a:	f00f f8d9 	bl	8011330 <osMessageQueueNew>
 800217e:	4602      	mov	r2, r0
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <MX_FREERTOS_Init+0x10c>)
 8002182:	601a      	str	r2, [r3, #0]

  // Create the thread(s)
  defaultTaskHandle 		= osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002184:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <MX_FREERTOS_Init+0x110>)
 8002186:	2100      	movs	r1, #0
 8002188:	482a      	ldr	r0, [pc, #168]	; (8002234 <MX_FREERTOS_Init+0x114>)
 800218a:	f00e feb1 	bl	8010ef0 <osThreadNew>
 800218e:	4602      	mov	r2, r0
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <MX_FREERTOS_Init+0x118>)
 8002192:	601a      	str	r2, [r3, #0]
  myTask_IMUHandle 			= osThreadNew(StartTask_IMU, NULL, &myTask_IMU_attributes);
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <MX_FREERTOS_Init+0x11c>)
 8002196:	2100      	movs	r1, #0
 8002198:	4829      	ldr	r0, [pc, #164]	; (8002240 <MX_FREERTOS_Init+0x120>)
 800219a:	f00e fea9 	bl	8010ef0 <osThreadNew>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <MX_FREERTOS_Init+0x124>)
 80021a2:	601a      	str	r2, [r3, #0]
  myTask_LCDHandle 			= osThreadNew(StartTask_LCD, NULL, &myTask_LCD_attributes);
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <MX_FREERTOS_Init+0x128>)
 80021a6:	2100      	movs	r1, #0
 80021a8:	4828      	ldr	r0, [pc, #160]	; (800224c <MX_FREERTOS_Init+0x12c>)
 80021aa:	f00e fea1 	bl	8010ef0 <osThreadNew>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <MX_FREERTOS_Init+0x130>)
 80021b2:	601a      	str	r2, [r3, #0]
  myTask_ADCHandle 			= osThreadNew(StartTask_ADC, NULL, &myTask_ADC_attributes);
 80021b4:	4a27      	ldr	r2, [pc, #156]	; (8002254 <MX_FREERTOS_Init+0x134>)
 80021b6:	2100      	movs	r1, #0
 80021b8:	4827      	ldr	r0, [pc, #156]	; (8002258 <MX_FREERTOS_Init+0x138>)
 80021ba:	f00e fe99 	bl	8010ef0 <osThreadNew>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <MX_FREERTOS_Init+0x13c>)
 80021c2:	601a      	str	r2, [r3, #0]
  myTask_ScanCTRLHandle 	= osThreadNew(StartTask_ScanControls, NULL, &myTask_ScanCTRL_attributes);
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <MX_FREERTOS_Init+0x140>)
 80021c6:	2100      	movs	r1, #0
 80021c8:	4826      	ldr	r0, [pc, #152]	; (8002264 <MX_FREERTOS_Init+0x144>)
 80021ca:	f00e fe91 	bl	8010ef0 <osThreadNew>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <MX_FREERTOS_Init+0x148>)
 80021d2:	601a      	str	r2, [r3, #0]
  myTask_ScanTempHandle 	= osThreadNew(StartTask_ScanTemperature, NULL, &myTask_ScanTemp_attributes);
 80021d4:	4a25      	ldr	r2, [pc, #148]	; (800226c <MX_FREERTOS_Init+0x14c>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4825      	ldr	r0, [pc, #148]	; (8002270 <MX_FREERTOS_Init+0x150>)
 80021da:	f00e fe89 	bl	8010ef0 <osThreadNew>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <MX_FREERTOS_Init+0x154>)
 80021e2:	601a      	str	r2, [r3, #0]
  myTask_SetStateHandle 	= osThreadNew(StartTask_SetState, NULL, &myTask_SetState_attributes);
 80021e4:	4a24      	ldr	r2, [pc, #144]	; (8002278 <MX_FREERTOS_Init+0x158>)
 80021e6:	2100      	movs	r1, #0
 80021e8:	4824      	ldr	r0, [pc, #144]	; (800227c <MX_FREERTOS_Init+0x15c>)
 80021ea:	f00e fe81 	bl	8010ef0 <osThreadNew>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <MX_FREERTOS_Init+0x160>)
 80021f2:	601a      	str	r2, [r3, #0]
  myTask_MicroRLHandle 		= osThreadNew(StartTask_MircoRL, NULL, &myTask_MicroRL_attributes);
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <MX_FREERTOS_Init+0x164>)
 80021f6:	2100      	movs	r1, #0
 80021f8:	4823      	ldr	r0, [pc, #140]	; (8002288 <MX_FREERTOS_Init+0x168>)
 80021fa:	f00e fe79 	bl	8010ef0 <osThreadNew>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <MX_FREERTOS_Init+0x16c>)
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	0801a7f4 	.word	0x0801a7f4
 800220c:	20008b88 	.word	0x20008b88
 8002210:	0801a804 	.word	0x0801a804
 8002214:	20008924 	.word	0x20008924
 8002218:	0801a814 	.word	0x0801a814
 800221c:	20008a90 	.word	0x20008a90
 8002220:	20008848 	.word	0x20008848
 8002224:	200088f8 	.word	0x200088f8
 8002228:	0801a7dc 	.word	0x0801a7dc
 800222c:	20008b0c 	.word	0x20008b0c
 8002230:	0801a6bc 	.word	0x0801a6bc
 8002234:	08002291 	.word	0x08002291
 8002238:	20008b00 	.word	0x20008b00
 800223c:	0801a6e0 	.word	0x0801a6e0
 8002240:	080022a9 	.word	0x080022a9
 8002244:	20008b04 	.word	0x20008b04
 8002248:	0801a704 	.word	0x0801a704
 800224c:	080022b9 	.word	0x080022b9
 8002250:	20008b94 	.word	0x20008b94
 8002254:	0801a728 	.word	0x0801a728
 8002258:	08002345 	.word	0x08002345
 800225c:	20008b8c 	.word	0x20008b8c
 8002260:	0801a74c 	.word	0x0801a74c
 8002264:	08002359 	.word	0x08002359
 8002268:	20008b60 	.word	0x20008b60
 800226c:	0801a770 	.word	0x0801a770
 8002270:	08002381 	.word	0x08002381
 8002274:	20008b08 	.word	0x20008b08
 8002278:	0801a794 	.word	0x0801a794
 800227c:	08002441 	.word	0x08002441
 8002280:	20008b90 	.word	0x20008b90
 8002284:	0801a7b8 	.word	0x0801a7b8
 8002288:	080024e9 	.word	0x080024e9
 800228c:	20008b64 	.word	0x20008b64

08002290 <StartDefaultTask>:
//======================================================================================
void StartDefaultTask(void *argument)													// Поток по-умолчанию
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  MX_USB_DEVICE_Init();																	// init code for USB_DEVICE
 8002298:	f012 f830 	bl	80142fc <MX_USB_DEVICE_Init>

  BUZZER_BeepTIM();																		// Квакнуть баззером при старте
 800229c:	f7ff f94a 	bl	8001534 <BUZZER_BeepTIM>

  for(;;)
  {
	//LED_LIGHT_INV;
	// LED_GREEN_INV;
    osDelay(100);
 80022a0:	2064      	movs	r0, #100	; 0x64
 80022a2:	f00e fecf 	bl	8011044 <osDelay>
 80022a6:	e7fb      	b.n	80022a0 <StartDefaultTask+0x10>

080022a8 <StartTask_IMU>:

  }
}
//======================================================================================
void StartTask_IMU(void *argument)														// Поток сканирования данных от МЕМС по вибрации
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 80022b0:	2001      	movs	r0, #1
 80022b2:	f00e fec7 	bl	8011044 <osDelay>
 80022b6:	e7fb      	b.n	80022b0 <StartTask_IMU+0x8>

080022b8 <StartTask_LCD>:
  }
}
//======================================================================================
void StartTask_LCD(void *argument)														// Поток вывода на LCD экран
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	Display_Test(0,0);
 80022c0:	2100      	movs	r1, #0
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff fd56 	bl	8001d74 <Display_Test>
	Display_MotorDirection(50, 50, MotorDirection);										// Показать направление вращения мотора
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <StartTask_LCD+0x74>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	2132      	movs	r1, #50	; 0x32
 80022d0:	2032      	movs	r0, #50	; 0x32
 80022d2:	f7ff fdc9 	bl	8001e68 <Display_MotorDirection>
	Display_MotorSpeed(250, 50, MotorSpeed);											// Показать скорость вращения мотора
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <StartTask_LCD+0x78>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	2132      	movs	r1, #50	; 0x32
 80022de:	20fa      	movs	r0, #250	; 0xfa
 80022e0:	f7ff fe0e 	bl	8001f00 <Display_MotorSpeed>

	Display_SystemVoltage(100, 5);
 80022e4:	2105      	movs	r1, #5
 80022e6:	2064      	movs	r0, #100	; 0x64
 80022e8:	f7ff fd6e 	bl	8001dc8 <Display_SystemVoltage>

	Display_Temperature(10, 100, Temperature_Motor);									// Темература от датчика мотора
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <StartTask_LCD+0x7c>)
 80022ee:	cb18      	ldmia	r3, {r3, r4}
 80022f0:	461a      	mov	r2, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	2164      	movs	r1, #100	; 0x64
 80022f6:	200a      	movs	r0, #10
 80022f8:	f7ff fe2a 	bl	8001f50 <Display_Temperature>
	Display_Temperature(10, 140, Temperature_Driver);									// Темература от датчика драйвера
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <StartTask_LCD+0x80>)
 80022fe:	cb18      	ldmia	r3, {r3, r4}
 8002300:	461a      	mov	r2, r3
 8002302:	4623      	mov	r3, r4
 8002304:	218c      	movs	r1, #140	; 0x8c
 8002306:	200a      	movs	r0, #10
 8002308:	f7ff fe22 	bl	8001f50 <Display_Temperature>
	Display_Temperature(10, 180, Temperature_Air);										// Темература от датчика воздуха
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <StartTask_LCD+0x84>)
 800230e:	cb18      	ldmia	r3, {r3, r4}
 8002310:	461a      	mov	r2, r3
 8002312:	4623      	mov	r3, r4
 8002314:	21b4      	movs	r1, #180	; 0xb4
 8002316:	200a      	movs	r0, #10
 8002318:	f7ff fe1a 	bl	8001f50 <Display_Temperature>

	LED_GREEN_INV;
 800231c:	2110      	movs	r1, #16
 800231e:	4808      	ldr	r0, [pc, #32]	; (8002340 <StartTask_LCD+0x88>)
 8002320:	f005 fe13 	bl	8007f4a <HAL_GPIO_TogglePin>

    osDelay(200);
 8002324:	20c8      	movs	r0, #200	; 0xc8
 8002326:	f00e fe8d 	bl	8011044 <osDelay>
	Display_Test(0,0);
 800232a:	e7c9      	b.n	80022c0 <StartTask_LCD+0x8>
 800232c:	20008a94 	.word	0x20008a94
 8002330:	200088fc 	.word	0x200088fc
 8002334:	20008850 	.word	0x20008850
 8002338:	20008908 	.word	0x20008908
 800233c:	20008860 	.word	0x20008860
 8002340:	40020800 	.word	0x40020800

08002344 <StartTask_ADC>:
  }
}
//======================================================================================
void StartTask_ADC(void *argument)														// Поток для сканирования АЦП (Напряжения питания и мотора, Тока питания и мотора, положения регулятора скорости)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 800234c:	f7fe febc 	bl	80010c8 <ADC_ScanState>
    osDelay(50);
 8002350:	2032      	movs	r0, #50	; 0x32
 8002352:	f00e fe77 	bl	8011044 <osDelay>
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 8002356:	e7f9      	b.n	800234c <StartTask_ADC+0x8>

08002358 <StartTask_ScanControls>:
  }
}
//======================================================================================
void StartTask_ScanControls(void *argument)												// Поток сканироваяни элементов управления
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim4);
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <StartTask_ScanControls+0x24>)
 8002362:	f008 fbb1 	bl	800aac8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);											// Запустить TIM4 для анализа оборотов бака
 8002366:	2100      	movs	r1, #0
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <StartTask_ScanControls+0x24>)
 800236a:	f008 fd4b 	bl	800ae04 <HAL_TIM_IC_Start_IT>

  for(;;)
  {
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 800236e:	f001 fac7 	bl	8003900 <Motor_Scan_DirectionState>
//	else
//		LED_LIGHT_SET;



    osDelay(10);
 8002372:	200a      	movs	r0, #10
 8002374:	f00e fe66 	bl	8011044 <osDelay>
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 8002378:	e7f9      	b.n	800236e <StartTask_ScanControls+0x16>
 800237a:	bf00      	nop
 800237c:	20008ce0 	.word	0x20008ce0

08002380 <StartTask_ScanTemperature>:
  }
}
//======================================================================================
void StartTask_ScanTemperature(void *argument)											// Поток сканирования температуры по 1-Wire от термодатчиков DS18B20
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  osDelay(200);
 8002388:	20c8      	movs	r0, #200	; 0xc8
 800238a:	f00e fe5b 	bl	8011044 <osDelay>

  for(;;)
  {
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 800238e:	2102      	movs	r1, #2
 8002390:	4824      	ldr	r0, [pc, #144]	; (8002424 <StartTask_ScanTemperature+0xa4>)
 8002392:	f7ff fb47 	bl	8001a24 <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_DRIVER_1W_GPIO_Port,	TEMP_DRIVER_1W_Pin);		// Запрос на старт замера температуры драйвера мотора
 8002396:	2104      	movs	r1, #4
 8002398:	4822      	ldr	r0, [pc, #136]	; (8002424 <StartTask_ScanTemperature+0xa4>)
 800239a:	f7ff fb43 	bl	8001a24 <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Запрос на старт замера температуры воздуха
 800239e:	2101      	movs	r1, #1
 80023a0:	4820      	ldr	r0, [pc, #128]	; (8002424 <StartTask_ScanTemperature+0xa4>)
 80023a2:	f7ff fb3f 	bl	8001a24 <DS18B20_Measure_Async_Start>
	osDelay(1000);																		// задержка для 12-битного преобразования
 80023a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023aa:	f00e fe4b 	bl	8011044 <osDelay>
	Temperature_Motor_RAW	= DS18B20_Measure_Async_FinishN(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры мотора
 80023ae:	2102      	movs	r1, #2
 80023b0:	481c      	ldr	r0, [pc, #112]	; (8002424 <StartTask_ScanTemperature+0xa4>)
 80023b2:	f7ff fb75 	bl	8001aa0 <DS18B20_Measure_Async_FinishN>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <StartTask_ScanTemperature+0xa8>)
 80023bc:	801a      	strh	r2, [r3, #0]
	Temperature_Driver_RAW	= DS18B20_Measure_Async_FinishN(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin);		// Возврат ответа от финальной фазы замера для температуры драйвера мотора
 80023be:	2104      	movs	r1, #4
 80023c0:	4818      	ldr	r0, [pc, #96]	; (8002424 <StartTask_ScanTemperature+0xa4>)
 80023c2:	f7ff fb6d 	bl	8001aa0 <DS18B20_Measure_Async_FinishN>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <StartTask_ScanTemperature+0xac>)
 80023cc:	801a      	strh	r2, [r3, #0]
	Temperature_Air_RAW		= DS18B20_Measure_Async_FinishN(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры воздуха
 80023ce:	2101      	movs	r1, #1
 80023d0:	4814      	ldr	r0, [pc, #80]	; (8002424 <StartTask_ScanTemperature+0xa4>)
 80023d2:	f7ff fb65 	bl	8001aa0 <DS18B20_Measure_Async_FinishN>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <StartTask_ScanTemperature+0xb0>)
 80023dc:	801a      	strh	r2, [r3, #0]

	Temperature_Motor		= DS18B20_Temperature_Double(Temperature_Motor_RAW);		// Пересчет в double
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <StartTask_ScanTemperature+0xa8>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fbb2 	bl	8001b4c <DS18B20_Temperature_Double>
 80023e8:	4603      	mov	r3, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <StartTask_ScanTemperature+0xb4>)
 80023ee:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Driver		= DS18B20_Temperature_Double(Temperature_Driver_RAW);		// Пересчет в double
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <StartTask_ScanTemperature+0xac>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fba8 	bl	8001b4c <DS18B20_Temperature_Double>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <StartTask_ScanTemperature+0xb8>)
 8002402:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Air			= DS18B20_Temperature_Double(Temperature_Air_RAW);			// Пересчет в double
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <StartTask_ScanTemperature+0xb0>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fb9e 	bl	8001b4c <DS18B20_Temperature_Double>
 8002410:	4603      	mov	r3, r0
 8002412:	460c      	mov	r4, r1
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <StartTask_ScanTemperature+0xbc>)
 8002416:	e9c2 3400 	strd	r3, r4, [r2]

    osDelay(15000);																		// Интервал сканирования температур - 10 сек
 800241a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800241e:	f00e fe11 	bl	8011044 <osDelay>
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 8002422:	e7b4      	b.n	800238e <StartTask_ScanTemperature+0xe>
 8002424:	40020400 	.word	0x40020400
 8002428:	20008a34 	.word	0x20008a34
 800242c:	200088fe 	.word	0x200088fe
 8002430:	20008a2c 	.word	0x20008a2c
 8002434:	20008850 	.word	0x20008850
 8002438:	20008908 	.word	0x20008908
 800243c:	20008860 	.word	0x20008860

08002440 <StartTask_SetState>:
  }
}
//======================================================================================
void StartTask_SetState(void *argument)													// Поток установки сотояний системы
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <StartTask_SetState+0x98>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f001 faa9 	bl	80039a4 <Motor_Set_DirectionState>

	//DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)2.55));				// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V]
	DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)1.58));					// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V] (1.58 - коэф чтобы получить на выходе 0..5V после ЦАП+ОУ)
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <StartTask_SetState+0x9c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fd ffe6 	bl	8000428 <__aeabi_ui2d>
 800245c:	a31a      	add	r3, pc, #104	; (adr r3, 80024c8 <StartTask_SetState+0x88>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f85b 	bl	800051c <__aeabi_dmul>
 8002466:	4603      	mov	r3, r0
 8002468:	460c      	mov	r4, r1
 800246a:	4618      	mov	r0, r3
 800246c:	4621      	mov	r1, r4
 800246e:	f7fe fb2d 	bl	8000acc <__aeabi_d2uiz>
 8002472:	4603      	mov	r3, r0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f8e4 	bl	8001644 <DAC_SetValue>

	MotorSpeed = ((MotorSpeed_Period > 0) ? ((uint16_t)((double)60000/(double)MotorSpeed_Period)) : (0) );			// Пересчет периода оборотов мотора от датчика Холла в скорость (стелано на таймере-4)
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <StartTask_SetState+0xa0>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d016      	beq.n	80024b2 <StartTask_SetState+0x72>
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <StartTask_SetState+0xa0>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd ffcd 	bl	8000428 <__aeabi_ui2d>
 800248e:	4603      	mov	r3, r0
 8002490:	460c      	mov	r4, r1
 8002492:	461a      	mov	r2, r3
 8002494:	4623      	mov	r3, r4
 8002496:	a10e      	add	r1, pc, #56	; (adr r1, 80024d0 <StartTask_SetState+0x90>)
 8002498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800249c:	f7fe f968 	bl	8000770 <__aeabi_ddiv>
 80024a0:	4603      	mov	r3, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	4618      	mov	r0, r3
 80024a6:	4621      	mov	r1, r4
 80024a8:	f7fe fb10 	bl	8000acc <__aeabi_d2uiz>
 80024ac:	4603      	mov	r3, r0
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	e000      	b.n	80024b4 <StartTask_SetState+0x74>
 80024b2:	2300      	movs	r3, #0
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <StartTask_SetState+0xa4>)
 80024b6:	8013      	strh	r3, [r2, #0]


	//FAN_Set_Speed(Speed_value_percent);													// Установить скорость мотора вентилятора охлаждения (ШИМ)
	FAN_Set_Speed(0);																	// Установить скорость мотора вентилятора охлаждения (ШИМ)
 80024b8:	2000      	movs	r0, #0
 80024ba:	f001 fabd 	bl	8003a38 <FAN_Set_Speed>



    osDelay(20);
 80024be:	2014      	movs	r0, #20
 80024c0:	f00e fdc0 	bl	8011044 <osDelay>
	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 80024c4:	e7c0      	b.n	8002448 <StartTask_SetState+0x8>
 80024c6:	bf00      	nop
 80024c8:	147ae148 	.word	0x147ae148
 80024cc:	3ff947ae 	.word	0x3ff947ae
 80024d0:	00000000 	.word	0x00000000
 80024d4:	40ed4c00 	.word	0x40ed4c00
 80024d8:	20008a94 	.word	0x20008a94
 80024dc:	20008858 	.word	0x20008858
 80024e0:	20008920 	.word	0x20008920
 80024e4:	200088fc 	.word	0x200088fc

080024e8 <StartTask_MircoRL>:
  }
}
//======================================================================================
void StartTask_MircoRL(void *argument)													// командный интерпретатор
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	microrl_terminalInit();																// нициализация командного интерпретатора
 80024f0:	f003 faf8 	bl	8005ae4 <microrl_terminalInit>

	HAL_UART_Receive_IT(&huart5, (uint8_t *)MainCPU_Rx_Buffer, 1);						// делаем начальный запрос на асинхронный прием обного байта - стартуем прием данных от UART на прерываниях
 80024f4:	2201      	movs	r2, #1
 80024f6:	4903      	ldr	r1, [pc, #12]	; (8002504 <StartTask_MircoRL+0x1c>)
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <StartTask_MircoRL+0x20>)
 80024fa:	f009 fd63 	bl	800bfc4 <HAL_UART_Receive_IT>

	while(1)
	{
		microrl_terminalProcess();														// Процесс просыпается от семафора MicroRL_xRxSemaphore
 80024fe:	f003 fb25 	bl	8005b4c <microrl_terminalProcess>
 8002502:	e7fc      	b.n	80024fe <StartTask_MircoRL+0x16>
 8002504:	20008a30 	.word	0x20008a30
 8002508:	20008ea0 	.word	0x20008ea0

0800250c <HAL_UART_RxCpltCallback>:
	}
}
//=======================================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
//			if( GPS_Rx_QueueHandle != 0 )
//				xQueueSendFromISR( GPS_Rx_QueueHandle,  ( void * )&MP_GPS_USART_RxBuffer[0], &xHigherPriorityTaskWoken  ); // записываем в очередь принятый байт от GPS
//			HAL_UART_Receive_IT(&huart3, (uint8_t *)MP_GPS_USART_RxBuffer, 1);			// делаем запрос на асинхронный прием обного байта
//		}
//
		if ( huart->Instance == UART5 ) 												// Если это колбэк по прерыванию от USART-5  - запрос в терминал командной строки от MainCPU
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_UART_RxCpltCallback+0x78>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12d      	bne.n	800257a <HAL_UART_RxCpltCallback+0x6e>
		{
//			USART2->DR = UART5->DR;
			//USART2->DR = MainCPU_Rx_Buffer[0];										// делаем эхо вывод в виртуальный COM-порта на PC (самый быстрый вариант)
			//UART4->DR = MainCPU_Rx_Buffer[0];											// делаем эхо вывод в свой же порт

			MircoRL_sRxRingBuf.data[MircoRL_sRxRingBuf.wrIdx++] = MainCPU_Rx_Buffer[0];	// складываем полученный байт в кольцевой буфер приема
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_UART_RxCpltCallback+0x7c>)
 8002520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	4918      	ldr	r1, [pc, #96]	; (8002588 <HAL_UART_RxCpltCallback+0x7c>)
 8002528:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800252c:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_UART_RxCpltCallback+0x80>)
 800252e:	7811      	ldrb	r1, [r2, #0]
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <HAL_UART_RxCpltCallback+0x7c>)
 8002532:	54d1      	strb	r1, [r2, r3]
			if (MircoRL_sRxRingBuf.wrIdx >= MICRORL_uartSIZE_OF_RING_BUFFER)			// переход через 0
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_UART_RxCpltCallback+0x7c>)
 8002536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800253a:	2b7f      	cmp	r3, #127	; 0x7f
 800253c:	dd03      	ble.n	8002546 <HAL_UART_RxCpltCallback+0x3a>
			{
				MircoRL_sRxRingBuf.wrIdx = 0;
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_UART_RxCpltCallback+0x7c>)
 8002540:	2200      	movs	r2, #0
 8002542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			}
			portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
			xSemaphoreGiveFromISR(MicroRL_xRxSemaphore, &xHigherPriorityTaskWoken);		// Семафорим в StartTask_MircoRL что прилетел байт из UART и что-то с ним нужно сделать
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_UART_RxCpltCallback+0x84>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f107 020c 	add.w	r2, r7, #12
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f00f fc01 	bl	8011d5c <xQueueGiveFromISR>
			if( xHigherPriorityTaskWoken != pdFALSE )
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_UART_RxCpltCallback+0x64>
			{
				portYIELD();
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_UART_RxCpltCallback+0x88>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
			}

			HAL_UART_Receive_IT(&huart5, (uint8_t *)MainCPU_Rx_Buffer, 1);				// делаем опять запрос на асинхронный прием обного байта
 8002570:	2201      	movs	r2, #1
 8002572:	4906      	ldr	r1, [pc, #24]	; (800258c <HAL_UART_RxCpltCallback+0x80>)
 8002574:	4808      	ldr	r0, [pc, #32]	; (8002598 <HAL_UART_RxCpltCallback+0x8c>)
 8002576:	f009 fd25 	bl	800bfc4 <HAL_UART_Receive_IT>
		}

}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40005000 	.word	0x40005000
 8002588:	2000886c 	.word	0x2000886c
 800258c:	20008a30 	.word	0x20008a30
 8002590:	20008848 	.word	0x20008848
 8002594:	e000ed04 	.word	0xe000ed04
 8002598:	20008ea0 	.word	0x20008ea0

0800259c <MX_GPIO_Init>:
//         EXTI
//     PA8 ------> RCC_MCO

//======================================================================================
void MX_GPIO_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <MX_GPIO_Init+0x160>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a51      	ldr	r2, [pc, #324]	; (80026fc <MX_GPIO_Init+0x160>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <MX_GPIO_Init+0x160>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <MX_GPIO_Init+0x160>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a4b      	ldr	r2, [pc, #300]	; (80026fc <MX_GPIO_Init+0x160>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <MX_GPIO_Init+0x160>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e2:	4b46      	ldr	r3, [pc, #280]	; (80026fc <MX_GPIO_Init+0x160>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a45      	ldr	r2, [pc, #276]	; (80026fc <MX_GPIO_Init+0x160>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <MX_GPIO_Init+0x160>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <MX_GPIO_Init+0x160>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a3f      	ldr	r2, [pc, #252]	; (80026fc <MX_GPIO_Init+0x160>)
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	61d3      	str	r3, [r2, #28]
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <MX_GPIO_Init+0x160>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002612:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <MX_GPIO_Init+0x160>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a39      	ldr	r2, [pc, #228]	; (80026fc <MX_GPIO_Init+0x160>)
 8002618:	f043 0310 	orr.w	r3, r3, #16
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <MX_GPIO_Init+0x160>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <MX_GPIO_Init+0x160>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a33      	ldr	r2, [pc, #204]	; (80026fc <MX_GPIO_Init+0x160>)
 8002630:	f043 0320 	orr.w	r3, r3, #32
 8002634:	61d3      	str	r3, [r2, #28]
 8002636:	4b31      	ldr	r3, [pc, #196]	; (80026fc <MX_GPIO_Init+0x160>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	21e0      	movs	r1, #224	; 0xe0
 8002646:	482e      	ldr	r0, [pc, #184]	; (8002700 <MX_GPIO_Init+0x164>)
 8002648:	f005 fc67 	bl	8007f1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 800264c:	2200      	movs	r2, #0
 800264e:	211f      	movs	r1, #31
 8002650:	482c      	ldr	r0, [pc, #176]	; (8002704 <MX_GPIO_Init+0x168>)
 8002652:	f005 fc62 	bl	8007f1a <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SD_CS_Pin, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800265c:	482a      	ldr	r0, [pc, #168]	; (8002708 <MX_GPIO_Init+0x16c>)
 800265e:	f005 fc5c 	bl	8007f1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin;
 8002662:	23e0      	movs	r3, #224	; 0xe0
 8002664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002666:	2301      	movs	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	4619      	mov	r1, r3
 8002678:	4821      	ldr	r0, [pc, #132]	; (8002700 <MX_GPIO_Init+0x164>)
 800267a:	f005 faa9 	bl	8007bd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 800267e:	231f      	movs	r3, #31
 8002680:	61fb      	str	r3, [r7, #28]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	481b      	ldr	r0, [pc, #108]	; (8002704 <MX_GPIO_Init+0x168>)
 8002696:	f005 fa9b 	bl	8007bd0 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SPI1_SD_CS_Pin;
 800269a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_SD_CS_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4815      	ldr	r0, [pc, #84]	; (8002708 <MX_GPIO_Init+0x16c>)
 80026b4:	f005 fa8c 	bl	8007bd0 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = INT_IMU_Pin;
 80026b8:	2301      	movs	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <MX_GPIO_Init+0x170>)
 80026be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4811      	ldr	r0, [pc, #68]	; (8002710 <MX_GPIO_Init+0x174>)
 80026cc:	f005 fa80 	bl	8007bd0 <HAL_GPIO_Init>

  // Выход тактовой частоты MCO
  GPIO_InitStruct.Pin = MCO_Pin;
 80026d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 031c 	add.w	r3, r7, #28
 80026ea:	4619      	mov	r1, r3
 80026ec:	4809      	ldr	r0, [pc, #36]	; (8002714 <MX_GPIO_Init+0x178>)
 80026ee:	f005 fa6f 	bl	8007bd0 <HAL_GPIO_Init>

}
 80026f2:	bf00      	nop
 80026f4:	3730      	adds	r7, #48	; 0x30
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40021000 	.word	0x40021000
 8002704:	40020800 	.word	0x40020800
 8002708:	40020400 	.word	0x40020400
 800270c:	10110000 	.word	0x10110000
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40020000 	.word	0x40020000

08002718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

//======================================================================================
void MX_I2C1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_I2C1_Init+0x54>)
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <MX_I2C1_Init+0x58>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <MX_I2C1_Init+0x54>)
 8002724:	4a13      	ldr	r2, [pc, #76]	; (8002774 <MX_I2C1_Init+0x5c>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <MX_I2C1_Init+0x54>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <MX_I2C1_Init+0x54>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <MX_I2C1_Init+0x54>)
 8002736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800273a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_I2C1_Init+0x54>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <MX_I2C1_Init+0x54>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <MX_I2C1_Init+0x54>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <MX_I2C1_Init+0x54>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_I2C1_Init+0x54>)
 8002756:	f005 fc11 	bl	8007f7c <HAL_I2C_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <MX_I2C1_Init+0x4e>
  {
    Error_Handler(7);
 8002760:	2007      	movs	r0, #7
 8002762:	f001 f895 	bl	8003890 <Error_Handler>
  }

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20008b98 	.word	0x20008b98
 8002770:	40005400 	.word	0x40005400
 8002774:	00061a80 	.word	0x00061a80

08002778 <HAL_I2C_MspInit>:
//======================================================================================
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_I2C_MspInit+0x7c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d128      	bne.n	80027ec <HAL_I2C_MspInit+0x74>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_I2C_MspInit+0x80>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_I2C_MspInit+0x80>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	61d3      	str	r3, [r2, #28]
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_I2C_MspInit+0x80>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80027b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b8:	2312      	movs	r3, #18
 80027ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027bc:	2301      	movs	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027c4:	2304      	movs	r3, #4
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	480b      	ldr	r0, [pc, #44]	; (80027fc <HAL_I2C_MspInit+0x84>)
 80027d0:	f005 f9fe 	bl	8007bd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_I2C_MspInit+0x80>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <HAL_I2C_MspInit+0x80>)
 80027da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027de:	6253      	str	r3, [r2, #36]	; 0x24
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_I2C_MspInit+0x80>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
  }
}
 80027ec:	bf00      	nop
 80027ee:	3728      	adds	r7, #40	; 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40005400 	.word	0x40005400
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020400 	.word	0x40020400

08002800 <Keys_Init>:
 */
#include "keys.h"

//=======================================================================================
void  Keys_Init(void)																	// Настройка GPIO портов для кнопок
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <Keys_Init+0x134>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <Keys_Init+0x134>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b48      	ldr	r3, [pc, #288]	; (8002934 <Keys_Init+0x134>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	4b45      	ldr	r3, [pc, #276]	; (8002934 <Keys_Init+0x134>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4a44      	ldr	r2, [pc, #272]	; (8002934 <Keys_Init+0x134>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	61d3      	str	r3, [r2, #28]
 800282a:	4b42      	ldr	r3, [pc, #264]	; (8002934 <Keys_Init+0x134>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <Keys_Init+0x134>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a3e      	ldr	r2, [pc, #248]	; (8002934 <Keys_Init+0x134>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	61d3      	str	r3, [r2, #28]
 8002842:	4b3c      	ldr	r3, [pc, #240]	; (8002934 <Keys_Init+0x134>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <Keys_Init+0x134>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a38      	ldr	r2, [pc, #224]	; (8002934 <Keys_Init+0x134>)
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b36      	ldr	r3, [pc, #216]	; (8002934 <Keys_Init+0x134>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002866:	4b33      	ldr	r3, [pc, #204]	; (8002934 <Keys_Init+0x134>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a32      	ldr	r2, [pc, #200]	; (8002934 <Keys_Init+0x134>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <Keys_Init+0x134>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <Keys_Init+0x134>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a2c      	ldr	r2, [pc, #176]	; (8002934 <Keys_Init+0x134>)
 8002884:	f043 0320 	orr.w	r3, r3, #32
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <Keys_Init+0x134>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;


	// BTN_START
	GPIO_InitStruct.Pin 		= BTN_START_Pin;
 8002896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <Keys_Init+0x138>)
 800289e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 80028a4:	2301      	movs	r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	4823      	ldr	r0, [pc, #140]	; (800293c <Keys_Init+0x13c>)
 80028b0:	f005 f98e 	bl	8007bd0 <HAL_GPIO_Init>


	// BTN_STOP
	GPIO_InitStruct.Pin 		= BTN_STOP_Pin;
 80028b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <Keys_Init+0x138>)
 80028bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 80028c2:	2301      	movs	r3, #1
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_STOP_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	481b      	ldr	r0, [pc, #108]	; (800293c <Keys_Init+0x13c>)
 80028ce:	f005 f97f 	bl	8007bd0 <HAL_GPIO_Init>

	// BTN_MOTOR
	GPIO_InitStruct.Pin 		= BTN_MOTOR_Pin;
 80028d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <Keys_Init+0x138>)
 80028da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 80028e0:	2301      	movs	r3, #1
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4814      	ldr	r0, [pc, #80]	; (800293c <Keys_Init+0x13c>)
 80028ec:	f005 f970 	bl	8007bd0 <HAL_GPIO_Init>

	// Вход переключателя МОТОР ВПЕРЕД
	GPIO_InitStruct.Pin 		= BTN_FWD_Pin;
 80028f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <Keys_Init+0x138>)
 80028f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 80028fe:	2301      	movs	r3, #1
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_FWD_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	4619      	mov	r1, r3
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <Keys_Init+0x13c>)
 800290a:	f005 f961 	bl	8007bd0 <HAL_GPIO_Init>

	// Вход переключателя МОТОР НАЗАД
	GPIO_InitStruct.Pin 		= BTN_BWD_Pin;
 800290e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002912:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <Keys_Init+0x138>)
 8002916:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_BWD_GPIO_Port, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <Keys_Init+0x13c>)
 8002928:	f005 f952 	bl	8007bd0 <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 800292c:	bf00      	nop
 800292e:	3730      	adds	r7, #48	; 0x30
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	10210000 	.word	0x10210000
 800293c:	40020c00 	.word	0x40020c00

08002940 <MX_SPI1_Init>:

DMA_HandleTypeDef hdma_spi2_tx;

//======================================================================================
void MX_SPI1_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002946:	4a19      	ldr	r2, [pc, #100]	; (80029ac <MX_SPI1_Init+0x6c>)
 8002948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_SPI1_Init+0x68>)
 800294c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <MX_SPI1_Init+0x68>)
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002966:	2200      	movs	r2, #0
 8002968:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <MX_SPI1_Init+0x68>)
 800296c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002970:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002974:	2200      	movs	r2, #0
 8002976:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <MX_SPI1_Init+0x68>)
 800297a:	2200      	movs	r2, #0
 800297c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002980:	2200      	movs	r2, #0
 8002982:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002986:	2200      	movs	r2, #0
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <MX_SPI1_Init+0x68>)
 800298c:	220a      	movs	r2, #10
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_SPI1_Init+0x68>)
 8002992:	f007 fd61 	bl	800a458 <HAL_SPI_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <MX_SPI1_Init+0x62>
  {
    Error_Handler(6);
 800299c:	2006      	movs	r0, #6
 800299e:	f000 ff77 	bl	8003890 <Error_Handler>
  }

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20008c44 	.word	0x20008c44
 80029ac:	40013000 	.word	0x40013000

080029b0 <MX_SPI2_Init>:
//======================================================================================
void MX_SPI2_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <MX_SPI2_Init+0x6c>)
 80029b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <MX_SPI2_Init+0x68>)
 80029fc:	220a      	movs	r2, #10
 80029fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_SPI2_Init+0x68>)
 8002a02:	f007 fd29 	bl	800a458 <HAL_SPI_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <MX_SPI2_Init+0x62>
  {
    Error_Handler(6);
 8002a0c:	2006      	movs	r0, #6
 8002a0e:	f000 ff3f 	bl	8003890 <Error_Handler>
  }

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20008bec 	.word	0x20008bec
 8002a1c:	40003800 	.word	0x40003800

08002a20 <HAL_SPI_MspInit>:
//======================================================================================
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	; 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	; (8002b48 <HAL_SPI_MspInit+0x128>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d128      	bne.n	8002a94 <HAL_SPI_MspInit+0x74>
  {
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a42:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a41      	ldr	r2, [pc, #260]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	61d3      	str	r3, [r2, #28]
 8002a66:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_SCK_Pin|SPI1_SD_MISO_Pin|SPI1_SD_MOSI_Pin;
 8002a72:	23e0      	movs	r3, #224	; 0xe0
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a82:	2305      	movs	r3, #5
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4830      	ldr	r0, [pc, #192]	; (8002b50 <HAL_SPI_MspInit+0x130>)
 8002a8e:	f005 f89f 	bl	8007bd0 <HAL_GPIO_Init>
      Error_Handler(6);
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
  }
}
 8002a92:	e055      	b.n	8002b40 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a2e      	ldr	r2, [pc, #184]	; (8002b54 <HAL_SPI_MspInit+0x134>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d150      	bne.n	8002b40 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa8:	6253      	str	r3, [r2, #36]	; 0x24
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_SPI_MspInit+0x12c>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8002ace:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	481b      	ldr	r0, [pc, #108]	; (8002b58 <HAL_SPI_MspInit+0x138>)
 8002aec:	f005 f870 	bl	8007bd0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002af2:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_SPI_MspInit+0x140>)
 8002af4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002af8:	2210      	movs	r2, #16
 8002afa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b22:	480e      	ldr	r0, [pc, #56]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b24:	f004 fef0 	bl	8007908 <HAL_DMA_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_SPI_MspInit+0x114>
      Error_Handler(6);
 8002b2e:	2006      	movs	r0, #6
 8002b30:	f000 feae 	bl	8003890 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b38:	649a      	str	r2, [r3, #72]	; 0x48
 8002b3a:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_SPI_MspInit+0x13c>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002b40:	bf00      	nop
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013000 	.word	0x40013000
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40003800 	.word	0x40003800
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	20008c9c 	.word	0x20008c9c
 8002b60:	40026058 	.word	0x40026058

08002b64 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

//======================================================================================
void MX_TIM3_Init(void)																	// обслуживание энкодера для меню
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f012 f85e 	bl	8014c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002b82:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <MX_TIM3_Init+0xa8>)
 8002b84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002b94:	2264      	movs	r2, #100	; 0x64
 8002b96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bac:	2301      	movs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480e      	ldr	r0, [pc, #56]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002bd0:	f008 f9e2 	bl	800af98 <HAL_TIM_Encoder_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler(4);
 8002bda:	2004      	movs	r0, #4
 8002bdc:	f000 fe58 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4806      	ldr	r0, [pc, #24]	; (8002c08 <MX_TIM3_Init+0xa4>)
 8002bee:	f009 f8a5 	bl	800bd3c <HAL_TIMEx_MasterConfigSynchronization>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <MX_TIM3_Init+0x9a>
  {
    Error_Handler(4);
 8002bf8:	2004      	movs	r0, #4
 8002bfa:	f000 fe49 	bl	8003890 <Error_Handler>
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3730      	adds	r7, #48	; 0x30
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20008d60 	.word	0x20008d60
 8002c0c:	40000400 	.word	0x40000400

08002c10 <MX_TIM4_Init>:
//======================================================================================
void MX_TIM4_Init(void)																	// Для рассчета периода сигнала от магнитного датчика оборотов бака (скорость оборотов)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c16:	f107 0318 	add.w	r3, r7, #24
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c2e:	463b      	mov	r3, r7
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]

	  htim4.Instance = TIM4;
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c3c:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <MX_TIM4_Init+0xec>)
 8002c3e:	601a      	str	r2, [r3, #0]
	  htim4.Init.Prescaler = 32000 - 1;													// точность счета по 100мкс
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c42:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002c46:	605a      	str	r2, [r3, #4]
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
	  htim4.Init.Period = 3000; 														// переполнение за 3 сек (до 20 оборотов в минуту считаем нулевой скоростью)
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c50:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c54:	60da      	str	r2, [r3, #12]
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5c:	611a      	str	r2, [r3, #16]
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c64:	4824      	ldr	r0, [pc, #144]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c66:	f007 fe87 	bl	800a978 <HAL_TIM_Base_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <MX_TIM4_Init+0x66>
	  {
	    Error_Handler(4);
 8002c70:	2004      	movs	r0, #4
 8002c72:	f000 fe0d 	bl	8003890 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c7c:	f107 0318 	add.w	r3, r7, #24
 8002c80:	4619      	mov	r1, r3
 8002c82:	481d      	ldr	r0, [pc, #116]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c84:	f008 fc54 	bl	800b530 <HAL_TIM_ConfigClockSource>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <MX_TIM4_Init+0x84>
	  {
	    Error_Handler(4);
 8002c8e:	2004      	movs	r0, #4
 8002c90:	f000 fdfe 	bl	8003890 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c94:	4818      	ldr	r0, [pc, #96]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002c96:	f008 f86d 	bl	800ad74 <HAL_TIM_IC_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <MX_TIM4_Init+0x96>
	  {
	    Error_Handler(4);
 8002ca0:	2004      	movs	r0, #4
 8002ca2:	f000 fdf5 	bl	8003890 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002cb6:	f009 f841 	bl	800bd3c <HAL_TIMEx_MasterConfigSynchronization>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <MX_TIM4_Init+0xb6>
	  {
	    Error_Handler(4);
 8002cc0:	2004      	movs	r0, #4
 8002cc2:	f000 fde5 	bl	8003890 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	603b      	str	r3, [r7, #0]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICFilter = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <MX_TIM4_Init+0xe8>)
 8002cde:	f008 fad5 	bl	800b28c <HAL_TIM_IC_ConfigChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <MX_TIM4_Init+0xde>
	  {
	    Error_Handler(4);
 8002ce8:	2004      	movs	r0, #4
 8002cea:	f000 fdd1 	bl	8003890 <Error_Handler>
//  {
//    Error_Handler(4);
//  }
//  HAL_TIM_MspPostInit(&htim4);

}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20008ce0 	.word	0x20008ce0
 8002cfc:	40000800 	.word	0x40000800

08002d00 <MX_TIM6_Init>:
//======================================================================================
void MX_TIM6_Init(void)																	// Для генерации звука на динамике (чтобы не хрипел от прерываний и RtOS)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler(4);
//  }
//
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <MX_TIM9_Init>:
//======================================================================================
void MX_TIM9_Init(void)																	// источник микросекундных тиков (для отладки FreeRTOS)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d20:	463b      	mov	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]

  htim9.Instance = TIM9;
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	; (8002da8 <MX_TIM9_Init+0x9c>)
 8002d2c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32;
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d30:	2220      	movs	r2, #32
 8002d32:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d40:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002d4e:	4815      	ldr	r0, [pc, #84]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d50:	f007 fe12 	bl	800a978 <HAL_TIM_Base_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <MX_TIM9_Init+0x54>
  {
    Error_Handler(4);
 8002d5a:	2004      	movs	r0, #4
 8002d5c:	f000 fd98 	bl	8003890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480d      	ldr	r0, [pc, #52]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d6e:	f008 fbdf 	bl	800b530 <HAL_TIM_ConfigClockSource>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <MX_TIM9_Init+0x72>
  {
    Error_Handler(4);
 8002d78:	2004      	movs	r0, #4
 8002d7a:	f000 fd89 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002d86:	463b      	mov	r3, r7
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4806      	ldr	r0, [pc, #24]	; (8002da4 <MX_TIM9_Init+0x98>)
 8002d8c:	f008 ffd6 	bl	800bd3c <HAL_TIMEx_MasterConfigSynchronization>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <MX_TIM9_Init+0x90>
  {
    Error_Handler(4);
 8002d96:	2004      	movs	r0, #4
 8002d98:	f000 fd7a 	bl	8003890 <Error_Handler>
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20008e20 	.word	0x20008e20
 8002da8:	40010800 	.word	0x40010800

08002dac <MX_TIM10_Init>:
//======================================================================================
void MX_TIM10_Init(void)																	// источник микросекундных тиков (для DelayUS() )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]

  htim10.Instance = TIM10;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <MX_TIM10_Init+0x9c>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 32;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002dee:	4815      	ldr	r0, [pc, #84]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002df0:	f007 fdc2 	bl	800a978 <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <MX_TIM10_Init+0x54>
  {
    Error_Handler(4);
 8002dfa:	2004      	movs	r0, #4
 8002dfc:	f000 fd48 	bl	8003890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	480d      	ldr	r0, [pc, #52]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002e0e:	f008 fb8f 	bl	800b530 <HAL_TIM_ConfigClockSource>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <MX_TIM10_Init+0x72>
  {
    Error_Handler(4);
 8002e18:	2004      	movs	r0, #4
 8002e1a:	f000 fd39 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8002e26:	463b      	mov	r3, r7
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <MX_TIM10_Init+0x98>)
 8002e2c:	f008 ff86 	bl	800bd3c <HAL_TIMEx_MasterConfigSynchronization>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <MX_TIM10_Init+0x90>
  {
    Error_Handler(4);
 8002e36:	2004      	movs	r0, #4
 8002e38:	f000 fd2a 	bl	8003890 <Error_Handler>
  }

}
 8002e3c:	bf00      	nop
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20008d20 	.word	0x20008d20
 8002e48:	40010c00 	.word	0x40010c00

08002e4c <MX_TIM11_Init>:
//======================================================================================

void MX_TIM11_Init(void)																// ШИМ управление оборотами мотора вентилятора охлаждения контроллера двигателя
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e60:	463b      	mov	r3, r7
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]

  htim11.Instance = TIM11;
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002e6e:	4a28      	ldr	r2, [pc, #160]	; (8002f10 <MX_TIM11_Init+0xc4>)
 8002e70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 32000;  														// Делим с тактовой процессора 32000000/32000 = 1000Гц на вход счетчика (1мс на 1 тик)
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002e74:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002e78:	605a      	str	r2, [r3, #4]
  htim11.Init.Period = 100;																// 100 тиков полный цикл = 100мс = 10Гц период ШИМ. В TIM11->CCR1 записывается сравнение 0..100 - получаем нужную скважность
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002e7c:	2264      	movs	r2, #100	; 0x64
 8002e7e:	60da      	str	r2, [r3, #12]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e80:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e86:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e92:	481e      	ldr	r0, [pc, #120]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002e94:	f007 fd70 	bl	800a978 <HAL_TIM_Base_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <MX_TIM11_Init+0x58>
  {
    Error_Handler(4);
 8002e9e:	2004      	movs	r0, #4
 8002ea0:	f000 fcf6 	bl	8003890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4816      	ldr	r0, [pc, #88]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002eb2:	f008 fb3d 	bl	800b530 <HAL_TIM_ConfigClockSource>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <MX_TIM11_Init+0x76>
  {
    Error_Handler(4);
 8002ebc:	2004      	movs	r0, #4
 8002ebe:	f000 fce7 	bl	8003890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002ec2:	4812      	ldr	r0, [pc, #72]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002ec4:	f007 fe78 	bl	800abb8 <HAL_TIM_PWM_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <MX_TIM11_Init+0x88>
  {
    Error_Handler(4);
 8002ece:	2004      	movs	r0, #4
 8002ed0:	f000 fcde 	bl	8003890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed4:	2360      	movs	r3, #96	; 0x60
 8002ed6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4808      	ldr	r0, [pc, #32]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002eec:	f008 fa62 	bl	800b3b4 <HAL_TIM_PWM_ConfigChannel>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <MX_TIM11_Init+0xb0>
  {
    Error_Handler(4);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f000 fcca 	bl	8003890 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002efc:	4803      	ldr	r0, [pc, #12]	; (8002f0c <MX_TIM11_Init+0xc0>)
 8002efe:	f000 f8d1 	bl	80030a4 <HAL_TIM_MspPostInit>

}
 8002f02:	bf00      	nop
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20008da0 	.word	0x20008da0
 8002f10:	40011000 	.word	0x40011000

08002f14 <HAL_TIM_Encoder_MspInit>:
//======================================================================================
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

//  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_encoderHandle->Instance==TIM3)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <HAL_TIM_Encoder_MspInit+0x44>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d113      	bne.n	8002f4e <HAL_TIM_Encoder_MspInit+0x3a>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x48>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x48>)
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	6253      	str	r3, [r2, #36]	; 0x24
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x48>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
//    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	201d      	movs	r0, #29
 8002f44:	f004 fbcb 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f48:	201d      	movs	r0, #29
 8002f4a:	f004 fbe4 	bl	8007716 <HAL_NVIC_EnableIRQ>
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_TIM_Base_MspInit>:
//======================================================================================
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_TIM_Base_MspInit+0x128>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12f      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x82>
  {
	/* TIM4 clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 8002f82:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	4a41      	ldr	r2, [pc, #260]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6253      	str	r3, [r2, #36]	; 0x24
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	6a3b      	ldr	r3, [r7, #32]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	4b3c      	ldr	r3, [pc, #240]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a3b      	ldr	r2, [pc, #236]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
	/**TIM4 GPIO Configuration
	PB6     ------> TIM4_CH1
	*/
	GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 8002fb2:	2340      	movs	r3, #64	; 0x40
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 8002fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4830      	ldr	r0, [pc, #192]	; (8003090 <HAL_TIM_Base_MspInit+0x130>)
 8002fce:	f004 fdff 	bl	8007bd0 <HAL_GPIO_Init>

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	201e      	movs	r0, #30
 8002fd8:	f004 fb81 	bl	80076de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fdc:	201e      	movs	r0, #30
 8002fde:	f004 fb9a 	bl	8007716 <HAL_NVIC_EnableIRQ>
  }
  if(tim_baseHandle->Instance==TIM6)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2b      	ldr	r2, [pc, #172]	; (8003094 <HAL_TIM_Base_MspInit+0x134>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d114      	bne.n	8003016 <HAL_TIM_Base_MspInit+0xb6>
  {
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002ff2:	f043 0310 	orr.w	r3, r3, #16
 8002ff6:	6253      	str	r3, [r2, #36]	; 0x24
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	202b      	movs	r0, #43	; 0x2b
 800300a:	f004 fb68 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800300e:	202b      	movs	r0, #43	; 0x2b
 8003010:	f004 fb81 	bl	8007716 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM11)
  {
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
  }
}
 8003014:	e034      	b.n	8003080 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM9)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_TIM_Base_MspInit+0x138>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10c      	bne.n	800303a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
}
 8003038:	e022      	b.n	8003080 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM10)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <HAL_TIM_Base_MspInit+0x13c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10c      	bne.n	800305e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 800304a:	f043 0308 	orr.w	r3, r3, #8
 800304e:	6213      	str	r3, [r2, #32]
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]
}
 800305c:	e010      	b.n	8003080 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM11)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <HAL_TIM_Base_MspInit+0x140>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10b      	bne.n	8003080 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 800306e:	f043 0310 	orr.w	r3, r3, #16
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_TIM_Base_MspInit+0x12c>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	bf00      	nop
 8003082:	3738      	adds	r7, #56	; 0x38
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40000800 	.word	0x40000800
 800308c:	40023800 	.word	0x40023800
 8003090:	40020400 	.word	0x40020400
 8003094:	40001000 	.word	0x40001000
 8003098:	40010800 	.word	0x40010800
 800309c:	40010c00 	.word	0x40010c00
 80030a0:	40011000 	.word	0x40011000

080030a4 <HAL_TIM_MspPostInit>:
//======================================================================================
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_TIM_MspPostInit+0xa8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d11c      	bne.n	8003100 <HAL_TIM_MspPostInit+0x5c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c6:	4b22      	ldr	r3, [pc, #136]	; (8003150 <HAL_TIM_MspPostInit+0xac>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_TIM_MspPostInit+0xac>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	61d3      	str	r3, [r2, #28]
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_TIM_MspPostInit+0xac>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 80030de:	2340      	movs	r3, #64	; 0x40
 80030e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030ee:	2302      	movs	r3, #2
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4619      	mov	r1, r3
 80030f8:	4816      	ldr	r0, [pc, #88]	; (8003154 <HAL_TIM_MspPostInit+0xb0>)
 80030fa:	f004 fd69 	bl	8007bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
  }

}
 80030fe:	e020      	b.n	8003142 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM11)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a14      	ldr	r2, [pc, #80]	; (8003158 <HAL_TIM_MspPostInit+0xb4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d11b      	bne.n	8003142 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_TIM_MspPostInit+0xac>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_TIM_MspPostInit+0xac>)
 8003110:	f043 0310 	orr.w	r3, r3, #16
 8003114:	61d3      	str	r3, [r2, #28]
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_TIM_MspPostInit+0xac>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_COOLING_Pin;
 8003122:	2302      	movs	r3, #2
 8003124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003132:	2303      	movs	r3, #3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	4807      	ldr	r0, [pc, #28]	; (800315c <HAL_TIM_MspPostInit+0xb8>)
 800313e:	f004 fd47 	bl	8007bd0 <HAL_GPIO_Init>
}
 8003142:	bf00      	nop
 8003144:	3728      	adds	r7, #40	; 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40000800 	.word	0x40000800
 8003150:	40023800 	.word	0x40023800
 8003154:	40020400 	.word	0x40020400
 8003158:	40011000 	.word	0x40011000
 800315c:	40021000 	.word	0x40021000

08003160 <Delay_us>:
    __HAL_RCC_TIM11_CLK_DISABLE();
  }
}
//======================================================================================
void Delay_us(uint16_t us)																// Микросекундные задержки 0 .. 65535 мкс
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
	// Таймер TIM10 настроен на тики равные 1 мкс
    __HAL_TIM_SET_COUNTER(&htim10, 0);													// обнуляем счётчик
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <Delay_us+0x34>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim10);
 8003172:	4808      	ldr	r0, [pc, #32]	; (8003194 <Delay_us+0x34>)
 8003174:	f007 fc40 	bl	800a9f8 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim10) <= us)								// ждем пока не натикает до
 8003178:	bf00      	nop
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <Delay_us+0x34>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	429a      	cmp	r2, r3
 8003184:	d9f9      	bls.n	800317a <Delay_us+0x1a>
    {
    }
    HAL_TIM_Base_Stop(&htim10);
 8003186:	4803      	ldr	r0, [pc, #12]	; (8003194 <Delay_us+0x34>)
 8003188:	f007 fc80 	bl	800aa8c <HAL_TIM_Base_Stop>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20008d20 	.word	0x20008d20

08003198 <__io_putchar>:
/**
  * @brief	Переопределение функции вывода симвода для того чтобы printf из стандартной C библиотеки выводил данные в виртуальный COM-порт через USART2
  * 		Retargets the C library printf function to the USART.
  */
PUTCHAR_PROTOTYPE
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* USART implementation of fputc  */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);		// вывод для отладки в виртуальный порт ПК		[115200bps 8N1]
 80031a0:	1d39      	adds	r1, r7, #4
 80031a2:	2364      	movs	r3, #100	; 0x64
 80031a4:	2201      	movs	r2, #1
 80031a6:	4804      	ldr	r0, [pc, #16]	; (80031b8 <__io_putchar+0x20>)
 80031a8:	f008 fe73 	bl	800be92 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 100);		// вывод для ПК									[115200bps 8N1]
//    huart2.Instance->DR = (uint8_t *)ch;
  return ch;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20008f60 	.word	0x20008f60

080031bc <MX_USART1_UART_Init>:
//=======================================================================================

//======================================================================================
void MX_USART1_UART_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <MX_USART1_UART_Init+0x50>)
 80031c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031e2:	220c      	movs	r2, #12
 80031e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031f2:	4805      	ldr	r0, [pc, #20]	; (8003208 <MX_USART1_UART_Init+0x4c>)
 80031f4:	f008 fe00 	bl	800bdf8 <HAL_UART_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler(5);
 80031fe:	2005      	movs	r0, #5
 8003200:	f000 fb46 	bl	8003890 <Error_Handler>
  }

}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20008ee0 	.word	0x20008ee0
 800320c:	40013800 	.word	0x40013800

08003210 <MX_USART2_UART_Init>:
//======================================================================================
void MX_USART2_UART_Init(void)															// Virtual COM-Port возможность вывода сообщений с помощью простого printf (переопределен putc и заглушки к stdlib)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <MX_USART2_UART_Init+0x4c>)
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <MX_USART2_UART_Init+0x50>)
 8003218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <MX_USART2_UART_Init+0x4c>)
 800321c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <MX_USART2_UART_Init+0x4c>)
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <MX_USART2_UART_Init+0x4c>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <MX_USART2_UART_Init+0x4c>)
 8003230:	2200      	movs	r2, #0
 8003232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <MX_USART2_UART_Init+0x4c>)
 8003236:	220c      	movs	r2, #12
 8003238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <MX_USART2_UART_Init+0x4c>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <MX_USART2_UART_Init+0x4c>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <MX_USART2_UART_Init+0x4c>)
 8003248:	f008 fdd6 	bl	800bdf8 <HAL_UART_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(5);
 8003252:	2005      	movs	r0, #5
 8003254:	f000 fb1c 	bl	8003890 <Error_Handler>
  }

}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20008f60 	.word	0x20008f60
 8003260:	40004400 	.word	0x40004400

08003264 <MX_USART3_UART_Init>:
//======================================================================================
void MX_USART3_UART_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <MX_USART3_UART_Init+0x50>)
 800326c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <MX_USART3_UART_Init+0x4c>)
 800329c:	f008 fdac 	bl	800bdf8 <HAL_UART_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <MX_USART3_UART_Init+0x48>
  {
    Error_Handler(5);
 80032a6:	2005      	movs	r0, #5
 80032a8:	f000 faf2 	bl	8003890 <Error_Handler>
  }

}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20008e60 	.word	0x20008e60
 80032b4:	40004800 	.word	0x40004800

080032b8 <MX_UART4_Init>:
//======================================================================================
void MX_UART4_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_UART4_Init+0x4c>)
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <MX_UART4_Init+0x50>)
 80032c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <MX_UART4_Init+0x4c>)
 80032c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_UART4_Init+0x4c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_UART4_Init+0x4c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <MX_UART4_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_UART4_Init+0x4c>)
 80032de:	220c      	movs	r2, #12
 80032e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <MX_UART4_Init+0x4c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_UART4_Init+0x4c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80032ee:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_UART4_Init+0x4c>)
 80032f0:	f008 fd82 	bl	800bdf8 <HAL_UART_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <MX_UART4_Init+0x48>
  {
    Error_Handler(5);
 80032fa:	2005      	movs	r0, #5
 80032fc:	f000 fac8 	bl	8003890 <Error_Handler>
  }

}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20008f20 	.word	0x20008f20
 8003308:	40004c00 	.word	0x40004c00

0800330c <MX_UART5_Init>:
//======================================================================================
void MX_UART5_Init(void)																// Консоль MicroRL
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_UART5_Init+0x4c>)
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <MX_UART5_Init+0x50>)
 8003314:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <MX_UART5_Init+0x4c>)
 8003318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800331c:	605a      	str	r2, [r3, #4]
//  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <MX_UART5_Init+0x4c>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <MX_UART5_Init+0x4c>)
 8003326:	2200      	movs	r2, #0
 8003328:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <MX_UART5_Init+0x4c>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <MX_UART5_Init+0x4c>)
 8003332:	220c      	movs	r2, #12
 8003334:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <MX_UART5_Init+0x4c>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <MX_UART5_Init+0x4c>)
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_UART5_Init+0x4c>)
 8003344:	f008 fd58 	bl	800bdf8 <HAL_UART_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <MX_UART5_Init+0x48>
  {
    Error_Handler(5);
 800334e:	2005      	movs	r0, #5
 8003350:	f000 fa9e 	bl	8003890 <Error_Handler>
  }

}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20008ea0 	.word	0x20008ea0
 800335c:	40005000 	.word	0x40005000

08003360 <HAL_UART_MspInit>:
//======================================================================================
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b092      	sub	sp, #72	; 0x48
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]

  if(uartHandle->Instance==USART1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a97      	ldr	r2, [pc, #604]	; (80035dc <HAL_UART_MspInit+0x27c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d131      	bne.n	80033e6 <HAL_UART_MspInit+0x86>
  {
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003382:	4b97      	ldr	r3, [pc, #604]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a96      	ldr	r2, [pc, #600]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6213      	str	r3, [r2, #32]
 800338e:	4b94      	ldr	r3, [pc, #592]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339a:	4b91      	ldr	r3, [pc, #580]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b8e      	ldr	r3, [pc, #568]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80033b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033c4:	2307      	movs	r3, #7
 80033c6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033cc:	4619      	mov	r1, r3
 80033ce:	4885      	ldr	r0, [pc, #532]	; (80035e4 <HAL_UART_MspInit+0x284>)
 80033d0:	f004 fbfe 	bl	8007bd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, PRIORITY_ISR_USART1, 0);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2109      	movs	r1, #9
 80033d8:	2025      	movs	r0, #37	; 0x25
 80033da:	f004 f980 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033de:	2025      	movs	r0, #37	; 0x25
 80033e0:	f004 f999 	bl	8007716 <HAL_NVIC_EnableIRQ>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, PRIORITY_ISR_USART5_MainCPU, 0);
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  }
}
 80033e4:	e0f5      	b.n	80035d2 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a7f      	ldr	r2, [pc, #508]	; (80035e8 <HAL_UART_MspInit+0x288>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d130      	bne.n	8003452 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f0:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	4a7a      	ldr	r2, [pc, #488]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fa:	6253      	str	r3, [r2, #36]	; 0x24
 80033fc:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4a74      	ldr	r2, [pc, #464]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	61d3      	str	r3, [r2, #28]
 8003414:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003420:	230c      	movs	r3, #12
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342c:	2303      	movs	r3, #3
 800342e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003430:	2307      	movs	r3, #7
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003438:	4619      	mov	r1, r3
 800343a:	486a      	ldr	r0, [pc, #424]	; (80035e4 <HAL_UART_MspInit+0x284>)
 800343c:	f004 fbc8 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, PRIORITY_ISR_USART2, 0);
 8003440:	2200      	movs	r2, #0
 8003442:	2108      	movs	r1, #8
 8003444:	2026      	movs	r0, #38	; 0x26
 8003446:	f004 f94a 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800344a:	2026      	movs	r0, #38	; 0x26
 800344c:	f004 f963 	bl	8007716 <HAL_NVIC_EnableIRQ>
}
 8003450:	e0bf      	b.n	80035d2 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART3)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_UART_MspInit+0x28c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d131      	bne.n	80034c0 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 800345c:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	4a5f      	ldr	r2, [pc, #380]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003466:	6253      	str	r3, [r2, #36]	; 0x24
 8003468:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003474:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a59      	ldr	r2, [pc, #356]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800347a:	f043 0302 	orr.w	r3, r3, #2
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	4b57      	ldr	r3, [pc, #348]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 800348c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349a:	2303      	movs	r3, #3
 800349c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800349e:	2307      	movs	r3, #7
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034a6:	4619      	mov	r1, r3
 80034a8:	4851      	ldr	r0, [pc, #324]	; (80035f0 <HAL_UART_MspInit+0x290>)
 80034aa:	f004 fb91 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, PRIORITY_ISR_USART3, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2107      	movs	r1, #7
 80034b2:	2027      	movs	r0, #39	; 0x27
 80034b4:	f004 f913 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034b8:	2027      	movs	r0, #39	; 0x27
 80034ba:	f004 f92c 	bl	8007716 <HAL_NVIC_EnableIRQ>
}
 80034be:	e088      	b.n	80035d2 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART4)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_UART_MspInit+0x294>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d131      	bne.n	800352e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART4_CLK_ENABLE();
 80034ca:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	4a44      	ldr	r2, [pc, #272]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80034d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034d4:	6253      	str	r3, [r2, #36]	; 0x24
 80034d6:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e2:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a3e      	ldr	r2, [pc, #248]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	61d3      	str	r3, [r2, #28]
 80034ee:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_UART_MspInit+0x280>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 80034fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003504:	2301      	movs	r3, #1
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003508:	2303      	movs	r3, #3
 800350a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800350c:	2308      	movs	r3, #8
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003514:	4619      	mov	r1, r3
 8003516:	4838      	ldr	r0, [pc, #224]	; (80035f8 <HAL_UART_MspInit+0x298>)
 8003518:	f004 fb5a 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, PRIORITY_ISR_USART4, 0);
 800351c:	2200      	movs	r2, #0
 800351e:	2106      	movs	r1, #6
 8003520:	2030      	movs	r0, #48	; 0x30
 8003522:	f004 f8dc 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003526:	2030      	movs	r0, #48	; 0x30
 8003528:	f004 f8f5 	bl	8007716 <HAL_NVIC_EnableIRQ>
}
 800352c:	e051      	b.n	80035d2 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART5)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a32      	ldr	r2, [pc, #200]	; (80035fc <HAL_UART_MspInit+0x29c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d14c      	bne.n	80035d2 <HAL_UART_MspInit+0x272>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800353e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003542:	6253      	str	r3, [r2, #36]	; 0x24
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003550:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	61d3      	str	r3, [r2, #28]
 800355c:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_UART_MspInit+0x280>)
 800356e:	f043 0308 	orr.w	r3, r3, #8
 8003572:	61d3      	str	r3, [r2, #28]
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_UART_MspInit+0x280>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8003580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003586:	2302      	movs	r3, #2
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800358a:	2301      	movs	r3, #1
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358e:	2303      	movs	r3, #3
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003592:	2308      	movs	r3, #8
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8003596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800359a:	4619      	mov	r1, r3
 800359c:	4816      	ldr	r0, [pc, #88]	; (80035f8 <HAL_UART_MspInit+0x298>)
 800359e:	f004 fb17 	bl	8007bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80035a2:	2304      	movs	r3, #4
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035aa:	2301      	movs	r3, #1
 80035ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ae:	2303      	movs	r3, #3
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035b2:	2308      	movs	r3, #8
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80035b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035ba:	4619      	mov	r1, r3
 80035bc:	4810      	ldr	r0, [pc, #64]	; (8003600 <HAL_UART_MspInit+0x2a0>)
 80035be:	f004 fb07 	bl	8007bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, PRIORITY_ISR_USART5_MainCPU, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2105      	movs	r1, #5
 80035c6:	2031      	movs	r0, #49	; 0x31
 80035c8:	f004 f889 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035cc:	2031      	movs	r0, #49	; 0x31
 80035ce:	f004 f8a2 	bl	8007716 <HAL_NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3748      	adds	r7, #72	; 0x48
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40013800 	.word	0x40013800
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40020000 	.word	0x40020000
 80035e8:	40004400 	.word	0x40004400
 80035ec:	40004800 	.word	0x40004800
 80035f0:	40020400 	.word	0x40020400
 80035f4:	40004c00 	.word	0x40004c00
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40005000 	.word	0x40005000
 8003600:	40020c00 	.word	0x40020c00

08003604 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
//======================================================================================
int main(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	HAL_Init();																			// Настройка HAL
 8003608:	f003 f9d5 	bl	80069b6 <HAL_Init>
	SystemClock_Config();																// Настройка системы тактирования
 800360c:	f000 f880 	bl	8003710 <SystemClock_Config>

	MX_GPIO_Init();																		// Настройка пинов GPIO, не привязанных к блокам SPI, UART, I2C, keys, encoder, ADC, DAC
 8003610:	f7fe ffc4 	bl	800259c <MX_GPIO_Init>
	MX_DMA_Init();																		// Настройка DMA
 8003614:	f7fe f838 	bl	8001688 <MX_DMA_Init>
	MX_SPI1_Init();																		// Настройка SPI1 для работы с SD картой
 8003618:	f7ff f992 	bl	8002940 <MX_SPI1_Init>
	MX_SPI2_Init();																		// Настройка SPI2 для работы с LCD экраном ILI9488
 800361c:	f7ff f9c8 	bl	80029b0 <MX_SPI2_Init>
	MX_I2C1_Init();																		// Настройка I2C для работы с IMU
 8003620:	f7ff f87a 	bl	8002718 <MX_I2C1_Init>

	MX_USART1_UART_Init();																// Настройка USART1
 8003624:	f7ff fdca 	bl	80031bc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();																// Настройка USART2 для Virtual COM-Port
 8003628:	f7ff fdf2 	bl	8003210 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();																// Настройка USART3
 800362c:	f7ff fe1a 	bl	8003264 <MX_USART3_UART_Init>
	MX_UART4_Init();																	// Настройка UART4
 8003630:	f7ff fe42 	bl	80032b8 <MX_UART4_Init>
	MX_UART5_Init();																	// Настройка UART5 терминальной связи с ПК
 8003634:	f7ff fe6a 	bl	800330c <MX_UART5_Init>

	MX_DAC_Init();																		// Настройка ЦАП для управления скоростью мотора
 8003638:	f7fd ff98 	bl	800156c <MX_DAC_Init>
	MX_ADC_Init();																		// Настройка АЦП для измерения токов, напряжений, регулятора скорости
 800363c:	f7fd fc38 	bl	8000eb0 <MX_ADC_Init>
	MX_TIM3_Init();																		// Настройка для работы энкодера
 8003640:	f7ff fa90 	bl	8002b64 <MX_TIM3_Init>
	MX_TIM6_Init();																		// Настройка для работы динамика
 8003644:	f7ff fb5c 	bl	8002d00 <MX_TIM6_Init>
	MX_TIM4_Init();																		// Настройка для работы тахометра оборотов бака
 8003648:	f7ff fae2 	bl	8002c10 <MX_TIM4_Init>
	MX_TIM9_Init();																		// Настройка для отладки FreeRTOS
 800364c:	f7ff fb5e 	bl	8002d0c <MX_TIM9_Init>
	MX_TIM10_Init();																	// Настройка источника микросекундных тиков (для DelayUS() со сбросом ) нужен для 1-Wire DS18B20
 8003650:	f7ff fbac 	bl	8002dac <MX_TIM10_Init>
	MX_TIM11_Init();																	// Настройка для ШИМ управления оборотами мотора вентилятора охлаждения контроллера двигателя
 8003654:	f7ff fbfa 	bl	8002e4c <MX_TIM11_Init>

	DS18B20_Init();																		// Инициализация термодатчиков
 8003658:	f7fe f834 	bl	80016c4 <DS18B20_Init>

	MX_FATFS_Init();																	// Настройка для работы с файлами на SD Card
 800365c:	f00b f902 	bl	800e864 <MX_FATFS_Init>

	Keys_Init();																		// Настройка GPIO портов для кнопок
 8003660:	f7ff f8ce 	bl	8002800 <Keys_Init>
	Encoder_Init();																		// Настройка GPIO портов для энкодера
 8003664:	f7fe fcb4 	bl	8001fd0 <Encoder_Init>

	FAN_Init();																			// Настройка ШИМ-управления для двигателя вентилятора ихлажения
 8003668:	f000 f9d0 	bl	8003a0c <FAN_Init>


	BUZZER_Init(BUZZER_STSTE_ON);														// Инициализация и включение пъезодинамика (пищалки/баззера)
 800366c:	2001      	movs	r0, #1
 800366e:	f7fd fe91 	bl	8001394 <BUZZER_Init>

  //  // фейковый трансмит для настройки SPI
  //  uint8_t data = 0;
  //  HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);

	HAL_Delay(100);
 8003672:	2064      	movs	r0, #100	; 0x64
 8003674:	f003 f9d4 	bl	8006a20 <HAL_Delay>
	LCD9488_Init();	   																	// Инициализаци экрана LCD ILI9488
 8003678:	f000 fc08 	bl	8003e8c <LCD9488_Init>
	HAL_Delay(100);
 800367c:	2064      	movs	r0, #100	; 0x64
 800367e:	f003 f9cf 	bl	8006a20 <HAL_Delay>

	LCD9488_GUI_SetOrientation(1);														// Установка ориентации экрана
 8003682:	2001      	movs	r0, #1
 8003684:	f000 febc 	bl	8004400 <LCD9488_GUI_SetOrientation>
	HAL_Delay(100);
 8003688:	2064      	movs	r0, #100	; 0x64
 800368a:	f003 f9c9 	bl	8006a20 <HAL_Delay>

	EEPROM_OptionsLoad();																// чтение настроек по умолчанию и чтение сознаненных настроек из EEPROM
 800368e:	f7fe fc93 	bl	8001fb8 <EEPROM_OptionsLoad>

	BUZZER_Beep();
 8003692:	f7fd ff2b 	bl	80014ec <BUZZER_Beep>



	// Рисуем начальную заставку на UART2
	printf("\033[2J"); 																	// Очистка окна терминала.   //https://www.linux.org.ru/forum/development/628620
 8003696:	4812      	ldr	r0, [pc, #72]	; (80036e0 <main+0xdc>)
 8003698:	f012 f904 	bl	80158a4 <iprintf>
	printf("\033[0;0H"); 																// задает абсолютные координаты курсора (строка, столбец)  // https://www.opennet.ru/base/dev/console_ctl.txt.html
 800369c:	4811      	ldr	r0, [pc, #68]	; (80036e4 <main+0xe0>)
 800369e:	f012 f901 	bl	80158a4 <iprintf>
	printf("Medogonka. Alex Shamilich\n");												// Строка приветствия
 80036a2:	4811      	ldr	r0, [pc, #68]	; (80036e8 <main+0xe4>)
 80036a4:	f012 f972 	bl	801598c <puts>
	printf("Version: %s\n", FIRMWARE_VER);
 80036a8:	4910      	ldr	r1, [pc, #64]	; (80036ec <main+0xe8>)
 80036aa:	4811      	ldr	r0, [pc, #68]	; (80036f0 <main+0xec>)
 80036ac:	f012 f8fa 	bl	80158a4 <iprintf>
	printf("  Date: %s\n", __DATE__);
 80036b0:	4910      	ldr	r1, [pc, #64]	; (80036f4 <main+0xf0>)
 80036b2:	4811      	ldr	r0, [pc, #68]	; (80036f8 <main+0xf4>)
 80036b4:	f012 f8f6 	bl	80158a4 <iprintf>
	printf("  Time: %s\n", __TIME__);
 80036b8:	4910      	ldr	r1, [pc, #64]	; (80036fc <main+0xf8>)
 80036ba:	4811      	ldr	r0, [pc, #68]	; (8003700 <main+0xfc>)
 80036bc:	f012 f8f2 	bl	80158a4 <iprintf>
	printf("FreeRTOS. MircoRL. USART2->Virtual_COM, ADC, DAC\n");						// Строка приветствия
 80036c0:	4810      	ldr	r0, [pc, #64]	; (8003704 <main+0x100>)
 80036c2:	f012 f963 	bl	801598c <puts>
	printf("TIM4, TIM9, TIM10, TIM11 \n");												// Строка приветствия
 80036c6:	4810      	ldr	r0, [pc, #64]	; (8003708 <main+0x104>)
 80036c8:	f012 f960 	bl	801598c <puts>
	printf("18B20\n");
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <main+0x108>)
 80036ce:	f012 f95d 	bl	801598c <puts>

//	main_test();																		// Тесты LCD

	osKernelInitialize();  																// Настройка планировщика FreeRTOS
 80036d2:	f00d fba7 	bl	8010e24 <osKernelInitialize>
	MX_FREERTOS_Init();																	// Настройка объектов FreeRTOS
 80036d6:	f7fe fd23 	bl	8002120 <MX_FREERTOS_Init>
	osKernelStart();																	// Запуск планировщика FreeRTOS
 80036da:	f00d fbd5 	bl	8010e88 <osKernelStart>



	// После старта планировщика сюда мы никогда не должны зайти, поэтому бесконечный цикл.
	while (1)
 80036de:	e7fe      	b.n	80036de <main+0xda>
 80036e0:	08019a68 	.word	0x08019a68
 80036e4:	08019a70 	.word	0x08019a70
 80036e8:	08019a78 	.word	0x08019a78
 80036ec:	08019a94 	.word	0x08019a94
 80036f0:	08019a9c 	.word	0x08019a9c
 80036f4:	08019aac 	.word	0x08019aac
 80036f8:	08019ab8 	.word	0x08019ab8
 80036fc:	08019ac4 	.word	0x08019ac4
 8003700:	08019ad0 	.word	0x08019ad0
 8003704:	08019adc 	.word	0x08019adc
 8003708:	08019b10 	.word	0x08019b10
 800370c:	08019b2c 	.word	0x08019b2c

08003710 <SystemClock_Config>:
	{
	}
}
//======================================================================================
void SystemClock_Config(void)															// System Clock Configuration
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b092      	sub	sp, #72	; 0x48
 8003714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	2234      	movs	r2, #52	; 0x34
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f011 fa88 	bl	8014c34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003724:	463b      	mov	r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003732:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <SystemClock_Config+0xb0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800373a:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <SystemClock_Config+0xb0>)
 800373c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003740:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003742:	2303      	movs	r3, #3
 8003744:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800374a:	2301      	movs	r3, #1
 800374c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800374e:	2310      	movs	r3, #16
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003752:	2302      	movs	r3, #2
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800375c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003760:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8003762:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003766:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4618      	mov	r0, r3
 800376e:	f006 f84d 	bl	800980c <HAL_RCC_OscConfig>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <SystemClock_Config+0x6e>
	{
	Error_Handler(0);
 8003778:	2000      	movs	r0, #0
 800377a:	f000 f889 	bl	8003890 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800377e:	230f      	movs	r3, #15
 8003780:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003782:	2303      	movs	r3, #3
 8003784:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003792:	463b      	mov	r3, r7
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f006 fb68 	bl	8009e6c <HAL_RCC_ClockConfig>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <SystemClock_Config+0x98>
	{
	Error_Handler(0);
 80037a2:	2000      	movs	r0, #0
 80037a4:	f000 f874 	bl	8003890 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 80037a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ac:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80037b0:	2000      	movs	r0, #0
 80037b2:	f006 fc8f 	bl	800a0d4 <HAL_RCC_MCOConfig>
}
 80037b6:	bf00      	nop
 80037b8:	3748      	adds	r7, #72	; 0x48
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d102      	bne.n	80037dc <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	MotorSpeed_Period 	= 0;															// Если натикало больше чем период таймера (htim4.Init.Period), то считаем скорость мотора нулевой
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80037d8:	2200      	movs	r2, #0
 80037da:	801a      	strh	r2, [r3, #0]
  }

  if (htim->Instance == TIM7)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    HAL_IncTick();
 80037e6:	f003 f8ff 	bl	80069e8 <HAL_IncTick>
  }
  if (htim->Instance == TIM6)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a08      	ldr	r2, [pc, #32]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d103      	bne.n	80037fc <HAL_TIM_PeriodElapsedCallback+0x38>
  {
	BUZZER_INV;																			// меняем состояние пина баззера
 80037f4:	2120      	movs	r1, #32
 80037f6:	4807      	ldr	r0, [pc, #28]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80037f8:	f004 fba7 	bl	8007f4a <HAL_GPIO_TogglePin>
  }

}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40000800 	.word	0x40000800
 8003808:	20008920 	.word	0x20008920
 800380c:	40001400 	.word	0x40001400
 8003810:	40001000 	.word	0x40001000
 8003814:	40020400 	.word	0x40020400

08003818 <HAL_TIM_IC_CaptureCallback>:
//======================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)															// Считаем скорость по интервалу импульсов от датчика скорости
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <HAL_TIM_IC_CaptureCallback+0x30>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d109      	bne.n	800383e <HAL_TIM_IC_CaptureCallback+0x26>
	{
		MotorSpeed_Period = __HAL_TIM_GET_COUNTER(&htim4);
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_TIM_IC_CaptureCallback+0x34>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b29a      	uxth	r2, r3
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_TIM_IC_CaptureCallback+0x38>)
 8003834:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_TIM_IC_CaptureCallback+0x34>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40000800 	.word	0x40000800
 800384c:	20008ce0 	.word	0x20008ce0
 8003850:	20008920 	.word	0x20008920

08003854 <Delay_for_errror>:
//======================================================================================
void Delay_for_errror(uint32_t ms) 														// должна работать вне зависимости от прерываний. Когда все рухнуло и нужно диодом показать код ошибки
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    volatile uint32_t 	nCount;
    nCount = SystemCoreClock / 10000 * ms;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <Delay_for_errror+0x34>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <Delay_for_errror+0x38>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	0b5b      	lsrs	r3, r3, #13
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	60fb      	str	r3, [r7, #12]
    for (; nCount!=0; nCount--);
 8003870:	e002      	b.n	8003878 <Delay_for_errror+0x24>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3b01      	subs	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f9      	bne.n	8003872 <Delay_for_errror+0x1e>
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	20000000 	.word	0x20000000
 800388c:	d1b71759 	.word	0xd1b71759

08003890 <Error_Handler>:
//=======================================================================================
void Error_Handler(uint8_t err_num)														// Обработчик ошибок
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  //gl_err_num = err_num;
  while(1)
  {
	LED_GREEN_SET;
 800389a:	2201      	movs	r2, #1
 800389c:	2110      	movs	r1, #16
 800389e:	4817      	ldr	r0, [pc, #92]	; (80038fc <Error_Handler+0x6c>)
 80038a0:	f004 fb3b 	bl	8007f1a <HAL_GPIO_WritePin>
	Delay_for_errror(500);
 80038a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038a8:	f7ff ffd4 	bl	8003854 <Delay_for_errror>
	LED_GREEN_RESET;
 80038ac:	2200      	movs	r2, #0
 80038ae:	2110      	movs	r1, #16
 80038b0:	4812      	ldr	r0, [pc, #72]	; (80038fc <Error_Handler+0x6c>)
 80038b2:	f004 fb32 	bl	8007f1a <HAL_GPIO_WritePin>
    Delay_for_errror(500);
 80038b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038ba:	f7ff ffcb 	bl	8003854 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	e012      	b.n	80038ea <Error_Handler+0x5a>
    {
    	LED_GREEN_SET;
 80038c4:	2201      	movs	r2, #1
 80038c6:	2110      	movs	r1, #16
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <Error_Handler+0x6c>)
 80038ca:	f004 fb26 	bl	8007f1a <HAL_GPIO_WritePin>
    	Delay_for_errror(130);
 80038ce:	2082      	movs	r0, #130	; 0x82
 80038d0:	f7ff ffc0 	bl	8003854 <Delay_for_errror>
    	LED_GREEN_RESET;
 80038d4:	2200      	movs	r2, #0
 80038d6:	2110      	movs	r1, #16
 80038d8:	4808      	ldr	r0, [pc, #32]	; (80038fc <Error_Handler+0x6c>)
 80038da:	f004 fb1e 	bl	8007f1a <HAL_GPIO_WritePin>
        Delay_for_errror(130);
 80038de:	2082      	movs	r0, #130	; 0x82
 80038e0:	f7ff ffb8 	bl	8003854 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3e8      	bcc.n	80038c4 <Error_Handler+0x34>
    }
    Delay_for_errror(1000);
 80038f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038f6:	f7ff ffad 	bl	8003854 <Delay_for_errror>
	LED_GREEN_SET;
 80038fa:	e7ce      	b.n	800389a <Error_Handler+0xa>
 80038fc:	40020800 	.word	0x40020800

08003900 <Motor_Scan_DirectionState>:
	osDelay(100);
	MOTOR_BWD_SET;
}
//=======================================================================================
void  Motor_Scan_DirectionState(void)													// Просканировать состояние переключателя направления мотора
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
	GPIO_PinState FWD = HAL_GPIO_ReadPin(BTN_FWD_GPIO_Port,  BTN_FWD_Pin);
 8003906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800390a:	4824      	ldr	r0, [pc, #144]	; (800399c <Motor_Scan_DirectionState+0x9c>)
 800390c:	f004 faee 	bl	8007eec <HAL_GPIO_ReadPin>
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState BWD = HAL_GPIO_ReadPin(BTN_BWD_GPIO_Port,  BTN_BWD_Pin);
 8003914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003918:	4820      	ldr	r0, [pc, #128]	; (800399c <Motor_Scan_DirectionState+0x9c>)
 800391a:	f004 fae7 	bl	8007eec <HAL_GPIO_ReadPin>
 800391e:	4603      	mov	r3, r0
 8003920:	71bb      	strb	r3, [r7, #6]

	if ( (FWD == GPIO_PIN_SET) &
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2da      	uxtb	r2, r3
 800392e:	79bb      	ldrb	r3, [r7, #6]
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4013      	ands	r3, r2
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <Motor_Scan_DirectionState+0x48>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_STOP;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <Motor_Scan_DirectionState+0xa0>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_SET) &
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	2b01      	cmp	r3, #1
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2da      	uxtb	r2, r3
 8003954:	79bb      	ldrb	r3, [r7, #6]
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	4013      	ands	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <Motor_Scan_DirectionState+0x6e>
		 (BWD == GPIO_PIN_RESET) )
	{
		MotorDirection = MD_FWD;
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <Motor_Scan_DirectionState+0xa0>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_RESET) &
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2da      	uxtb	r2, r3
 800397a:	79bb      	ldrb	r3, [r7, #6]
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4013      	ands	r3, r2
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <Motor_Scan_DirectionState+0x94>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_REV;
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <Motor_Scan_DirectionState+0xa0>)
 8003990:	2202      	movs	r2, #2
 8003992:	701a      	strb	r2, [r3, #0]
	}

}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40020c00 	.word	0x40020c00
 80039a0:	20008a94 	.word	0x20008a94

080039a4 <Motor_Set_DirectionState>:
//=======================================================================================
void  Motor_Set_DirectionState(TMotorDirection ADir)									// Установить направление мотора
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
	switch (ADir)
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d00f      	beq.n	80039d4 <Motor_Set_DirectionState+0x30>
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d018      	beq.n	80039ea <Motor_Set_DirectionState+0x46>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d000      	beq.n	80039be <Motor_Set_DirectionState+0x1a>
			MOTOR_FWD_RESET;
			MOTOR_BWD_SET;
			break;
	}

}
 80039bc:	e020      	b.n	8003a00 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 80039be:	2200      	movs	r2, #0
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	4811      	ldr	r0, [pc, #68]	; (8003a08 <Motor_Set_DirectionState+0x64>)
 80039c4:	f004 faa9 	bl	8007f1a <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 80039c8:	2200      	movs	r2, #0
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	480e      	ldr	r0, [pc, #56]	; (8003a08 <Motor_Set_DirectionState+0x64>)
 80039ce:	f004 faa4 	bl	8007f1a <HAL_GPIO_WritePin>
			break;
 80039d2:	e015      	b.n	8003a00 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_SET;
 80039d4:	2201      	movs	r2, #1
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	480b      	ldr	r0, [pc, #44]	; (8003a08 <Motor_Set_DirectionState+0x64>)
 80039da:	f004 fa9e 	bl	8007f1a <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 80039de:	2200      	movs	r2, #0
 80039e0:	2180      	movs	r1, #128	; 0x80
 80039e2:	4809      	ldr	r0, [pc, #36]	; (8003a08 <Motor_Set_DirectionState+0x64>)
 80039e4:	f004 fa99 	bl	8007f1a <HAL_GPIO_WritePin>
			break;
 80039e8:	e00a      	b.n	8003a00 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 80039ea:	2200      	movs	r2, #0
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	4806      	ldr	r0, [pc, #24]	; (8003a08 <Motor_Set_DirectionState+0x64>)
 80039f0:	f004 fa93 	bl	8007f1a <HAL_GPIO_WritePin>
			MOTOR_BWD_SET;
 80039f4:	2201      	movs	r2, #1
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <Motor_Set_DirectionState+0x64>)
 80039fa:	f004 fa8e 	bl	8007f1a <HAL_GPIO_WritePin>
			break;
 80039fe:	bf00      	nop
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000

08003a0c <FAN_Init>:
//=======================================================================================
void  FAN_Init(void)																	// Инициализация управления мотором вентилятора охлажения
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
	MX_TIM11_Init();																	// Инициализация таймера для ШИМ
 8003a10:	f7ff fa1c 	bl	8002e4c <MX_TIM11_Init>

	FAN_Set_Start();																	// Включить мотор вентилятора охлажения
 8003a14:	f000 f806 	bl	8003a24 <FAN_Set_Start>
	FAN_Set_Speed(FAN_SPEED_DEFAULT);													// Установить скорость вентилятора по-умолчанию
 8003a18:	2064      	movs	r0, #100	; 0x64
 8003a1a:	f000 f80d 	bl	8003a38 <FAN_Set_Speed>
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <FAN_Set_Start>:
//=======================================================================================
void  FAN_Set_Start(void)																// Включить мотор вентилятора охлажения
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4802      	ldr	r0, [pc, #8]	; (8003a34 <FAN_Set_Start+0x10>)
 8003a2c:	f007 f90c 	bl	800ac48 <HAL_TIM_PWM_Start>
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20008da0 	.word	0x20008da0

08003a38 <FAN_Set_Speed>:
{
	HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
}
//=======================================================================================
void  FAN_Set_Speed(uint8_t APercent)													// Установить скорость мотора вентилятора охлажения
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, APercent);							// Т.к. период ШИМ таймера задан в (htim11.Init.Period = 100;),
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <FAN_Set_Speed+0x1c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	79fa      	ldrb	r2, [r7, #7]
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34
																						// скважность тут задаем от 0 до 100.
																						// Частота ШИМ определяется соотношением (htim11.Init.Prescaler = 32000;) с тактовой частотой
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	20008da0 	.word	0x20008da0

08003a58 <HAL_MspInit>:
  ******************************************************************************
  */
#include "main.h"

void HAL_MspInit(void)																	// Initializes the Global MSP.
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0

  __HAL_RCC_COMP_CLK_ENABLE();
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a68:	6253      	str	r3, [r2, #36]	; 0x24
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6253      	str	r3, [r2, #36]	; 0x24
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_MspInit+0x58>)
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]

}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	202c      	movs	r0, #44	; 0x2c
 8003aca:	f003 fe08 	bl	80076de <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ace:	202c      	movs	r0, #44	; 0x2c
 8003ad0:	f003 fe21 	bl	8007716 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <HAL_InitTick+0x9c>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <HAL_InitTick+0x9c>)
 8003ada:	f043 0320 	orr.w	r3, r3, #32
 8003ade:	6253      	str	r3, [r2, #36]	; 0x24
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_InitTick+0x9c>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aec:	f107 0210 	add.w	r2, r7, #16
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f006 fc1e 	bl	800a338 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003afc:	f006 fbf4 	bl	800a2e8 <HAL_RCC_GetPCLK1Freq>
 8003b00:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <HAL_InitTick+0xa0>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0c9b      	lsrs	r3, r3, #18
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_InitTick+0xa8>)
 8003b14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b1c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003b30:	4809      	ldr	r0, [pc, #36]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b32:	f006 ff21 	bl	800a978 <HAL_TIM_Base_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d104      	bne.n	8003b46 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003b3c:	4806      	ldr	r0, [pc, #24]	; (8003b58 <HAL_InitTick+0xa4>)
 8003b3e:	f006 ffc3 	bl	800aac8 <HAL_TIM_Base_Start_IT>
 8003b42:	4603      	mov	r3, r0
 8003b44:	e000      	b.n	8003b48 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3730      	adds	r7, #48	; 0x30
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	431bde83 	.word	0x431bde83
 8003b58:	20008fa0 	.word	0x20008fa0
 8003b5c:	40001400 	.word	0x40001400

08003b60 <NMI_Handler>:
//======================================================================================
/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void)																	// Non maskable interrupt.
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HardFault_Handler>:
//======================================================================================
void HardFault_Handler(void)															// Hard fault interrupt.
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <HardFault_Handler+0x4>

08003b72 <MemManage_Handler>:
  {
  }
}
//======================================================================================
void MemManage_Handler(void)															// Memory management fault.
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <MemManage_Handler+0x4>

08003b78 <BusFault_Handler>:
  {
  }
}
//======================================================================================
void BusFault_Handler(void)																// Pre-fetch fault, memory access fault.
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <BusFault_Handler+0x4>

08003b7e <UsageFault_Handler>:
  {
  }
}
//======================================================================================
void UsageFault_Handler(void)															// Undefined instruction or illegal state.
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <UsageFault_Handler+0x4>

08003b84 <DebugMon_Handler>:
//======================================================================================
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <DMA1_Channel5_IRQHandler>:
/* please refer to the startup file (startup_stm32l1xx.s).                    */
/******************************************************************************/

//======================================================================================
void DMA1_Channel5_IRQHandler(void)														// DMA1 channel5 global interrupt.
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA1_Channel5_IRQHandler+0x10>)
 8003b96:	f003 ff6c 	bl	8007a72 <HAL_DMA_IRQHandler>
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20008c9c 	.word	0x20008c9c

08003ba4 <ADC1_IRQHandler>:
//======================================================================================
void ADC1_IRQHandler(void)																// ADC global interrupt.
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <ADC1_IRQHandler+0x10>)
 8003baa:	f003 f9c2 	bl	8006f32 <HAL_ADC_IRQHandler>
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20008a3c 	.word	0x20008a3c

08003bb8 <USB_LP_IRQHandler>:
//======================================================================================
void USB_LP_IRQHandler(void)															// USB low priority interrupt.
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <USB_LP_IRQHandler+0x10>)
 8003bbe:	f004 fc19 	bl	80083f4 <HAL_PCD_IRQHandler>
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20009b14 	.word	0x20009b14

08003bcc <USART1_IRQHandler>:
//======================================================================================
void USART1_IRQHandler(void)															// USART1 global interrupt.
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <USART1_IRQHandler+0x10>)
 8003bd2:	f008 fa4b 	bl	800c06c <HAL_UART_IRQHandler>
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20008ee0 	.word	0x20008ee0

08003be0 <USART2_IRQHandler>:
//======================================================================================
void USART2_IRQHandler(void)															// USART2 global interrupt.
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <USART2_IRQHandler+0x10>)
 8003be6:	f008 fa41 	bl	800c06c <HAL_UART_IRQHandler>
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20008f60 	.word	0x20008f60

08003bf4 <USART3_IRQHandler>:
//======================================================================================
void USART3_IRQHandler(void)															// USART3 global interrupt.
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <USART3_IRQHandler+0x10>)
 8003bfa:	f008 fa37 	bl	800c06c <HAL_UART_IRQHandler>
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20008e60 	.word	0x20008e60

08003c08 <UART4_IRQHandler>:
//======================================================================================
void UART4_IRQHandler(void)																// UART4 global interrupt.
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <UART4_IRQHandler+0x10>)
 8003c0e:	f008 fa2d 	bl	800c06c <HAL_UART_IRQHandler>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20008f20 	.word	0x20008f20

08003c1c <UART5_IRQHandler>:
//======================================================================================
void UART5_IRQHandler(void)																// UART5 global interrupt.
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart5);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <UART5_IRQHandler+0x10>)
 8003c22:	f008 fa23 	bl	800c06c <HAL_UART_IRQHandler>
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20008ea0 	.word	0x20008ea0

08003c30 <TIM3_IRQHandler>:
//======================================================================================
void TIM3_IRQHandler(void)																// TIM3 global interrupt.
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <TIM3_IRQHandler+0x10>)
 8003c36:	f007 fa4d 	bl	800b0d4 <HAL_TIM_IRQHandler>
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20008d60 	.word	0x20008d60

08003c44 <TIM4_IRQHandler>:
//======================================================================================
void TIM4_IRQHandler(void)																// TIM4 global interrupt.
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <TIM4_IRQHandler+0x10>)
 8003c4a:	f007 fa43 	bl	800b0d4 <HAL_TIM_IRQHandler>
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20008ce0 	.word	0x20008ce0

08003c58 <TIM6_IRQHandler>:
//======================================================================================
void TIM6_IRQHandler(void)																// TIM6 global interrupt.
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <TIM6_IRQHandler+0x10>)
 8003c5e:	f007 fa39 	bl	800b0d4 <HAL_TIM_IRQHandler>
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20008de0 	.word	0x20008de0

08003c6c <TIM7_IRQHandler>:
//======================================================================================
void TIM7_IRQHandler(void)																// TIM7 global interrupt.
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <TIM7_IRQHandler+0x10>)
 8003c72:	f007 fa2f 	bl	800b0d4 <HAL_TIM_IRQHandler>
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20008fa0 	.word	0x20008fa0

08003c80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e00a      	b.n	8003ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c92:	f3af 8000 	nop.w
 8003c96:	4601      	mov	r1, r0
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	60ba      	str	r2, [r7, #8]
 8003c9e:	b2ca      	uxtb	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	dbf0      	blt.n	8003c92 <_read+0x12>
	}

return len;
 8003cb0:	687b      	ldr	r3, [r7, #4]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <_write>:

int _write(int file, char *ptr, int len)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e009      	b.n	8003ce0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fa5f 	bl	8003198 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	dbf1      	blt.n	8003ccc <_write+0x12>
	}
	return len;
 8003ce8:	687b      	ldr	r3, [r7, #4]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <_close>:
	return (caddr_t) prev_heap_end;
}
*/

int _close(int file)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	return -1;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d18:	605a      	str	r2, [r3, #4]
	return 0;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <_isatty>:

int _isatty(int file)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8003d2e:	2301      	movs	r3, #1
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
	return 0;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
	...

08003d54 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <SystemInit+0x14>)
 8003d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <LCD9488_Init_GPIO>:
uint16_t LCD9488_Point_Color = 0x0000;
uint16_t LCD9488_Back_Color  = 0xFFFF;
uint16_t LCD9488_DeviceCode;
//=======================================================================================
void LCD9488_Init_GPIO(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a3f      	ldr	r2, [pc, #252]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	61d3      	str	r3, [r2, #28]
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	4a39      	ldr	r2, [pc, #228]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	61d3      	str	r3, [r2, #28]
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003db2:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	61d3      	str	r3, [r2, #28]
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	61d3      	str	r3, [r2, #28]
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <LCD9488_Init_GPIO+0x118>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD9488_DC_RS_GPIO_Port, 		LCD9488_DC_RS_Pin, 	GPIO_PIN_RESET);
 8003de2:	2200      	movs	r2, #0
 8003de4:	2101      	movs	r1, #1
 8003de6:	4828      	ldr	r0, [pc, #160]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003de8:	f004 f897 	bl	8007f1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_CS_GPIO_Port, 		LCD9488_CS_Pin, 	GPIO_PIN_RESET);
 8003dec:	2200      	movs	r2, #0
 8003dee:	2104      	movs	r1, #4
 8003df0:	4825      	ldr	r0, [pc, #148]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003df2:	f004 f892 	bl	8007f1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_RST_GPIO_Port, 		LCD9488_RST_Pin, 	GPIO_PIN_RESET);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4823      	ldr	r0, [pc, #140]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003dfc:	f004 f88d 	bl	8007f1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_LED_GPIO_Port, 		LCD9488_LED_Pin, 	GPIO_PIN_RESET);
 8003e00:	2200      	movs	r2, #0
 8003e02:	2108      	movs	r1, #8
 8003e04:	4820      	ldr	r0, [pc, #128]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003e06:	f004 f888 	bl	8007f1a <HAL_GPIO_WritePin>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LCD9488_DC_RS_Pin;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e16:	2302      	movs	r3, #2
 8003e18:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_DC_RS_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4819      	ldr	r0, [pc, #100]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003e22:	f003 fed5 	bl	8007bd0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_CS_Pin;
 8003e26:	2304      	movs	r3, #4
 8003e28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e32:	2302      	movs	r3, #2
 8003e34:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_CS_GPIO_Port, &GPIO_InitStruct);
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4812      	ldr	r0, [pc, #72]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003e3e:	f003 fec7 	bl	8007bd0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_RST_Pin;
 8003e42:	2302      	movs	r3, #2
 8003e44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e46:	2301      	movs	r3, #1
 8003e48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_RST_GPIO_Port, &GPIO_InitStruct);
 8003e52:	f107 0314 	add.w	r3, r7, #20
 8003e56:	4619      	mov	r1, r3
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003e5a:	f003 feb9 	bl	8007bd0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_LED_Pin;
 8003e5e:	2308      	movs	r3, #8
 8003e60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_LED_GPIO_Port, &GPIO_InitStruct);
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4619      	mov	r1, r3
 8003e74:	4804      	ldr	r0, [pc, #16]	; (8003e88 <LCD9488_Init_GPIO+0x11c>)
 8003e76:	f003 feab 	bl	8007bd0 <HAL_GPIO_Init>
}
 8003e7a:	bf00      	nop
 8003e7c:	3728      	adds	r7, #40	; 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020800 	.word	0x40020800

08003e8c <LCD9488_Init>:
//=======================================================================================
void LCD9488_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 8003e90:	f7fe fd8e 	bl	80029b0 <MX_SPI2_Init>
	HAL_Delay(100);
 8003e94:	2064      	movs	r0, #100	; 0x64
 8003e96:	f002 fdc3 	bl	8006a20 <HAL_Delay>
	LCD9488_Init_GPIO();
 8003e9a:	f7ff ff67 	bl	8003d6c <LCD9488_Init_GPIO>

	LCD9488_LED_SET;//Включить подсветку
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	4870      	ldr	r0, [pc, #448]	; (8004064 <LCD9488_Init+0x1d8>)
 8003ea4:	f004 f839 	bl	8007f1a <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8003ea8:	2064      	movs	r0, #100	; 0x64
 8003eaa:	f002 fdb9 	bl	8006a20 <HAL_Delay>
 	LCD9488_RESET();
 8003eae:	f000 fa3d 	bl	800432c <LCD9488_RESET>
 	HAL_Delay(100);
 8003eb2:	2064      	movs	r0, #100	; 0x64
 8003eb4:	f002 fdb4 	bl	8006a20 <HAL_Delay>

	LCD9488_Transport_WR_REG(0XF7);
 8003eb8:	20f7      	movs	r0, #247	; 0xf7
 8003eba:	f000 f8ed 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xA9);
 8003ebe:	20a9      	movs	r0, #169	; 0xa9
 8003ec0:	f000 f910 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x51);
 8003ec4:	2051      	movs	r0, #81	; 0x51
 8003ec6:	f000 f90d 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2C);
 8003eca:	202c      	movs	r0, #44	; 0x2c
 8003ecc:	f000 f90a 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x82);
 8003ed0:	2082      	movs	r0, #130	; 0x82
 8003ed2:	f000 f907 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC0);
 8003ed6:	20c0      	movs	r0, #192	; 0xc0
 8003ed8:	f000 f8de 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x11);
 8003edc:	2011      	movs	r0, #17
 8003ede:	f000 f901 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8003ee2:	2009      	movs	r0, #9
 8003ee4:	f000 f8fe 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC1);
 8003ee8:	20c1      	movs	r0, #193	; 0xc1
 8003eea:	f000 f8d5 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x41);
 8003eee:	2041      	movs	r0, #65	; 0x41
 8003ef0:	f000 f8f8 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XC5);
 8003ef4:	20c5      	movs	r0, #197	; 0xc5
 8003ef6:	f000 f8cf 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003efa:	2000      	movs	r0, #0
 8003efc:	f000 f8f2 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8003f00:	200a      	movs	r0, #10
 8003f02:	f000 f8ef 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x80);
 8003f06:	2080      	movs	r0, #128	; 0x80
 8003f08:	f000 f8ec 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB1);
 8003f0c:	20b1      	movs	r0, #177	; 0xb1
 8003f0e:	f000 f8c3 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xB0);
 8003f12:	20b0      	movs	r0, #176	; 0xb0
 8003f14:	f000 f8e6 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x11);
 8003f18:	2011      	movs	r0, #17
 8003f1a:	f000 f8e3 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB4);
 8003f1e:	20b4      	movs	r0, #180	; 0xb4
 8003f20:	f000 f8ba 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 8003f24:	2002      	movs	r0, #2
 8003f26:	f000 f8dd 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB6);
 8003f2a:	20b6      	movs	r0, #182	; 0xb6
 8003f2c:	f000 f8b4 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 8003f30:	2002      	movs	r0, #2
 8003f32:	f000 f8d7 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x42);
 8003f36:	2042      	movs	r0, #66	; 0x42
 8003f38:	f000 f8d4 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB7);
 8003f3c:	20b7      	movs	r0, #183	; 0xb7
 8003f3e:	f000 f8ab 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xc6);
 8003f42:	20c6      	movs	r0, #198	; 0xc6
 8003f44:	f000 f8ce 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xBE);
 8003f48:	20be      	movs	r0, #190	; 0xbe
 8003f4a:	f000 f8a5 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003f4e:	2000      	movs	r0, #0
 8003f50:	f000 f8c8 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 8003f54:	2004      	movs	r0, #4
 8003f56:	f000 f8c5 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE9);
 8003f5a:	20e9      	movs	r0, #233	; 0xe9
 8003f5c:	f000 f89c 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003f60:	2000      	movs	r0, #0
 8003f62:	f000 f8bf 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x36);
 8003f66:	2036      	movs	r0, #54	; 0x36
 8003f68:	f000 f896 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA((1<<3)|(0<<7)|(1<<6)|(1<<5));
 8003f6c:	2068      	movs	r0, #104	; 0x68
 8003f6e:	f000 f8b9 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x3A);
 8003f72:	203a      	movs	r0, #58	; 0x3a
 8003f74:	f000 f890 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x66);
 8003f78:	2066      	movs	r0, #102	; 0x66
 8003f7a:	f000 f8b3 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE0);
 8003f7e:	20e0      	movs	r0, #224	; 0xe0
 8003f80:	f000 f88a 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f000 f8ad 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x07);
 8003f8a:	2007      	movs	r0, #7
 8003f8c:	f000 f8aa 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x10);
 8003f90:	2010      	movs	r0, #16
 8003f92:	f000 f8a7 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8003f96:	2009      	movs	r0, #9
 8003f98:	f000 f8a4 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8003f9c:	2017      	movs	r0, #23
 8003f9e:	f000 f8a1 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0B);
 8003fa2:	200b      	movs	r0, #11
 8003fa4:	f000 f89e 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x41);
 8003fa8:	2041      	movs	r0, #65	; 0x41
 8003faa:	f000 f89b 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x89);
 8003fae:	2089      	movs	r0, #137	; 0x89
 8003fb0:	f000 f898 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x4B);
 8003fb4:	204b      	movs	r0, #75	; 0x4b
 8003fb6:	f000 f895 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8003fba:	200a      	movs	r0, #10
 8003fbc:	f000 f892 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0C);
 8003fc0:	200c      	movs	r0, #12
 8003fc2:	f000 f88f 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 8003fc6:	200e      	movs	r0, #14
 8003fc8:	f000 f88c 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x18);
 8003fcc:	2018      	movs	r0, #24
 8003fce:	f000 f889 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1B);
 8003fd2:	201b      	movs	r0, #27
 8003fd4:	f000 f886 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 8003fd8:	200f      	movs	r0, #15
 8003fda:	f000 f883 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XE1);
 8003fde:	20e1      	movs	r0, #225	; 0xe1
 8003fe0:	f000 f85a 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f000 f87d 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8003fea:	2017      	movs	r0, #23
 8003fec:	f000 f87a 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1A);
 8003ff0:	201a      	movs	r0, #26
 8003ff2:	f000 f877 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 8003ff6:	2004      	movs	r0, #4
 8003ff8:	f000 f874 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 8003ffc:	200e      	movs	r0, #14
 8003ffe:	f000 f871 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x06);
 8004002:	2006      	movs	r0, #6
 8004004:	f000 f86e 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2F);
 8004008:	202f      	movs	r0, #47	; 0x2f
 800400a:	f000 f86b 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x45);
 800400e:	2045      	movs	r0, #69	; 0x45
 8004010:	f000 f868 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x43);
 8004014:	2043      	movs	r0, #67	; 0x43
 8004016:	f000 f865 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x02);
 800401a:	2002      	movs	r0, #2
 800401c:	f000 f862 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8004020:	200a      	movs	r0, #10
 8004022:	f000 f85f 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8004026:	2009      	movs	r0, #9
 8004028:	f000 f85c 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x32);
 800402c:	2032      	movs	r0, #50	; 0x32
 800402e:	f000 f859 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x36);
 8004032:	2036      	movs	r0, #54	; 0x36
 8004034:	f000 f856 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 8004038:	200f      	movs	r0, #15
 800403a:	f000 f853 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x11);
 800403e:	2011      	movs	r0, #17
 8004040:	f000 f82a 	bl	8004098 <LCD9488_Transport_WR_REG>
	HAL_Delay(120);
 8004044:	2078      	movs	r0, #120	; 0x78
 8004046:	f002 fceb 	bl	8006a20 <HAL_Delay>
	LCD9488_Transport_WR_REG(0x29);
 800404a:	2029      	movs	r0, #41	; 0x29
 800404c:	f000 f824 	bl	8004098 <LCD9488_Transport_WR_REG>

	LCD9488_GUI_SetOrientation(USE_HORIZONTAL);
 8004050:	2000      	movs	r0, #0
 8004052:	f000 f9d5 	bl	8004400 <LCD9488_GUI_SetOrientation>
	LCD9488_GUI_Clear(WHITE);
 8004056:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800405a:	f000 f8f7 	bl	800424c <LCD9488_GUI_Clear>

}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40020800 	.word	0x40020800

08004068 <LCD9488_Transport_SPI_WriteByte>:
//=======================================================================================
void LCD9488_Transport_SPI_WriteByte(uint8_t Byte)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004072:	bf00      	nop
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f8      	beq.n	8004074 <LCD9488_Transport_SPI_WriteByte+0xc>
		LCD_SPI.Instance->DR = Byte;
 8004082:	4b04      	ldr	r3, [pc, #16]	; (8004094 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	79fa      	ldrb	r2, [r7, #7]
 8004088:	60da      	str	r2, [r3, #12]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	20008bec 	.word	0x20008bec

08004098 <LCD9488_Transport_WR_REG>:
//=======================================================================================
void LCD9488_Transport_WR_REG(uint8_t data)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 80040a2:	2200      	movs	r2, #0
 80040a4:	2104      	movs	r1, #4
 80040a6:	480d      	ldr	r0, [pc, #52]	; (80040dc <LCD9488_Transport_WR_REG+0x44>)
 80040a8:	f003 ff37 	bl	8007f1a <HAL_GPIO_WritePin>
   LCD9488_RS_CLR;
 80040ac:	2200      	movs	r2, #0
 80040ae:	2101      	movs	r1, #1
 80040b0:	480a      	ldr	r0, [pc, #40]	; (80040dc <LCD9488_Transport_WR_REG+0x44>)
 80040b2:	f003 ff32 	bl	8007f1a <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ffd5 	bl	8004068 <LCD9488_Transport_SPI_WriteByte>
   HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);
 80040be:	1df9      	adds	r1, r7, #7
 80040c0:	230a      	movs	r3, #10
 80040c2:	2201      	movs	r2, #1
 80040c4:	4806      	ldr	r0, [pc, #24]	; (80040e0 <LCD9488_Transport_WR_REG+0x48>)
 80040c6:	f006 fa50 	bl	800a56a <HAL_SPI_Transmit>
   LCD9488_CS_SET;
 80040ca:	2201      	movs	r2, #1
 80040cc:	2104      	movs	r1, #4
 80040ce:	4803      	ldr	r0, [pc, #12]	; (80040dc <LCD9488_Transport_WR_REG+0x44>)
 80040d0:	f003 ff23 	bl	8007f1a <HAL_GPIO_WritePin>
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40020800 	.word	0x40020800
 80040e0:	20008bec 	.word	0x20008bec

080040e4 <LCD9488_Transport_WR_DATA>:
//=======================================================================================
void LCD9488_Transport_WR_DATA(uint8_t data)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 80040ee:	2200      	movs	r2, #0
 80040f0:	2104      	movs	r1, #4
 80040f2:	480a      	ldr	r0, [pc, #40]	; (800411c <LCD9488_Transport_WR_DATA+0x38>)
 80040f4:	f003 ff11 	bl	8007f1a <HAL_GPIO_WritePin>
   LCD9488_RS_SET;
 80040f8:	2201      	movs	r2, #1
 80040fa:	2101      	movs	r1, #1
 80040fc:	4807      	ldr	r0, [pc, #28]	; (800411c <LCD9488_Transport_WR_DATA+0x38>)
 80040fe:	f003 ff0c 	bl	8007f1a <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ffaf 	bl	8004068 <LCD9488_Transport_SPI_WriteByte>
   LCD9488_CS_SET;
 800410a:	2201      	movs	r2, #1
 800410c:	2104      	movs	r1, #4
 800410e:	4803      	ldr	r0, [pc, #12]	; (800411c <LCD9488_Transport_WR_DATA+0x38>)
 8004110:	f003 ff03 	bl	8007f1a <HAL_GPIO_WritePin>
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40020800 	.word	0x40020800

08004120 <LCD9488_WriteReg>:
//=======================================================================================
void LCD9488_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	460a      	mov	r2, r1
 800412a:	71fb      	strb	r3, [r7, #7]
 800412c:	4613      	mov	r3, r2
 800412e:	80bb      	strh	r3, [r7, #4]
	LCD9488_Transport_WR_REG(LCD_Reg);
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ffb0 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(LCD_RegValue);
 8004138:	88bb      	ldrh	r3, [r7, #4]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ffd1 	bl	80040e4 <LCD9488_Transport_WR_DATA>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <LCD9488_WriteRAM_Prepare>:
//=======================================================================================
void LCD9488_WriteRAM_Prepare(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
	LCD9488_Transport_WR_REG(LCD9488_DEV.WramCmd);
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <LCD9488_WriteRAM_Prepare+0x14>)
 8004152:	891b      	ldrh	r3, [r3, #8]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff9e 	bl	8004098 <LCD9488_Transport_WR_REG>
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20008fe4 	.word	0x20008fe4

08004164 <LCD9488_WriteData_16Bit>:
//=======================================================================================
void LCD9488_WriteData_16Bit(uint16_t Data)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	80fb      	strh	r3, [r7, #6]
	uint8_t r = (Data>>8)&0xF8; 	// RED Color
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	b29b      	uxth	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (Data>>3)&0xFC; 	// Green Color
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	08db      	lsrs	r3, r3, #3
 8004180:	b29b      	uxth	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	73bb      	strb	r3, [r7, #14]
	uint8_t b = Data<<3; 			// Blue Color
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	737b      	strb	r3, [r7, #13]

	LCD9488_CS_CLR;
 8004192:	2200      	movs	r2, #0
 8004194:	2104      	movs	r1, #4
 8004196:	481e      	ldr	r0, [pc, #120]	; (8004210 <LCD9488_WriteData_16Bit+0xac>)
 8004198:	f003 febf 	bl	8007f1a <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 800419c:	2201      	movs	r2, #1
 800419e:	2101      	movs	r1, #1
 80041a0:	481b      	ldr	r0, [pc, #108]	; (8004210 <LCD9488_WriteData_16Bit+0xac>)
 80041a2:	f003 feba 	bl	8007f1a <HAL_GPIO_WritePin>
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80041a6:	bf00      	nop
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <LCD9488_WriteData_16Bit+0xb0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f8      	beq.n	80041a8 <LCD9488_WriteData_16Bit+0x44>
		LCD_SPI.Instance->DR = r;
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <LCD9488_WriteData_16Bit+0xb0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80041be:	bf00      	nop
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <LCD9488_WriteData_16Bit+0xb0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f8      	beq.n	80041c0 <LCD9488_WriteData_16Bit+0x5c>
		LCD_SPI.Instance->DR = g;
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <LCD9488_WriteData_16Bit+0xb0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	7bba      	ldrb	r2, [r7, #14]
 80041d4:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80041d6:	bf00      	nop
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <LCD9488_WriteData_16Bit+0xb0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f8      	beq.n	80041d8 <LCD9488_WriteData_16Bit+0x74>
		LCD_SPI.Instance->DR = b;
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <LCD9488_WriteData_16Bit+0xb0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	7b7a      	ldrb	r2, [r7, #13]
 80041ec:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80041ee:	bf00      	nop
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <LCD9488_WriteData_16Bit+0xb0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f8      	beq.n	80041f0 <LCD9488_WriteData_16Bit+0x8c>

	LCD9488_CS_SET;
 80041fe:	2201      	movs	r2, #1
 8004200:	2104      	movs	r1, #4
 8004202:	4803      	ldr	r0, [pc, #12]	; (8004210 <LCD9488_WriteData_16Bit+0xac>)
 8004204:	f003 fe89 	bl	8007f1a <HAL_GPIO_WritePin>
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40020800 	.word	0x40020800
 8004214:	20008bec 	.word	0x20008bec

08004218 <LCD9488_GUI_Draw_Point>:
//=======================================================================================
void LCD9488_GUI_Draw_Point(uint16_t x,uint16_t y)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	460a      	mov	r2, r1
 8004222:	80fb      	strh	r3, [r7, #6]
 8004224:	4613      	mov	r3, r2
 8004226:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetCursor(x,y);
 8004228:	88ba      	ldrh	r2, [r7, #4]
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f93e 	bl	80044b0 <LCD9488_GUI_SetCursor>
	LCD9488_WriteData_16Bit(LCD9488_Point_Color);
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <LCD9488_GUI_Draw_Point+0x30>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff93 	bl	8004164 <LCD9488_WriteData_16Bit>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000338 	.word	0x20000338

0800424c <LCD9488_GUI_Clear>:
//=======================================================================================
void LCD9488_GUI_Clear(uint16_t Color)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
	LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 8004256:	4b32      	ldr	r3, [pc, #200]	; (8004320 <LCD9488_GUI_Clear+0xd4>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	4b30      	ldr	r3, [pc, #192]	; (8004320 <LCD9488_GUI_Clear+0xd4>)
 8004260:	885b      	ldrh	r3, [r3, #2]
 8004262:	3b01      	subs	r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	2100      	movs	r1, #0
 8004268:	2000      	movs	r0, #0
 800426a:	f000 f875 	bl	8004358 <LCD9488_GUI_SetWindows>
	LCD9488_CS_CLR;
 800426e:	2200      	movs	r2, #0
 8004270:	2104      	movs	r1, #4
 8004272:	482c      	ldr	r0, [pc, #176]	; (8004324 <LCD9488_GUI_Clear+0xd8>)
 8004274:	f003 fe51 	bl	8007f1a <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 8004278:	2201      	movs	r2, #1
 800427a:	2101      	movs	r1, #1
 800427c:	4829      	ldr	r0, [pc, #164]	; (8004324 <LCD9488_GUI_Clear+0xd8>)
 800427e:	f003 fe4c 	bl	8007f1a <HAL_GPIO_WritePin>
	uint32_t cnt = LCD9488_DEV.Height * LCD9488_DEV.Width;
 8004282:	4b27      	ldr	r3, [pc, #156]	; (8004320 <LCD9488_GUI_Clear+0xd4>)
 8004284:	885b      	ldrh	r3, [r3, #2]
 8004286:	461a      	mov	r2, r3
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <LCD9488_GUI_Clear+0xd4>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	fb03 f302 	mul.w	r3, r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
	uint8_t r = (Color>>8)&0xF8; 	// RED Color
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	b29b      	uxth	r3, r3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f023 0307 	bic.w	r3, r3, #7
 800429e:	72fb      	strb	r3, [r7, #11]
	uint8_t g = (Color>>3)&0xFC; 	// Green Color
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	08db      	lsrs	r3, r3, #3
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f023 0303 	bic.w	r3, r3, #3
 80042ac:	72bb      	strb	r3, [r7, #10]
	uint8_t b = Color<<3; 			// Blue Color
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	727b      	strb	r3, [r7, #9]

	while (cnt)
 80042b6:	e026      	b.n	8004306 <LCD9488_GUI_Clear+0xba>
	{
		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80042b8:	bf00      	nop
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <LCD9488_GUI_Clear+0xdc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f8      	beq.n	80042ba <LCD9488_GUI_Clear+0x6e>
			LCD_SPI.Instance->DR = r;//RED
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <LCD9488_GUI_Clear+0xdc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	7afa      	ldrb	r2, [r7, #11]
 80042ce:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80042d0:	bf00      	nop
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <LCD9488_GUI_Clear+0xdc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f8      	beq.n	80042d2 <LCD9488_GUI_Clear+0x86>
			LCD_SPI.Instance->DR = g;//GREEN
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <LCD9488_GUI_Clear+0xdc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	7aba      	ldrb	r2, [r7, #10]
 80042e6:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80042e8:	bf00      	nop
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <LCD9488_GUI_Clear+0xdc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f8      	beq.n	80042ea <LCD9488_GUI_Clear+0x9e>
			LCD_SPI.Instance->DR = b;//BLUE
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <LCD9488_GUI_Clear+0xdc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	7a7a      	ldrb	r2, [r7, #9]
 80042fe:	60da      	str	r2, [r3, #12]

		cnt--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3b01      	subs	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
	while (cnt)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1d5      	bne.n	80042b8 <LCD9488_GUI_Clear+0x6c>
	}
	LCD9488_CS_SET;
 800430c:	2201      	movs	r2, #1
 800430e:	2104      	movs	r1, #4
 8004310:	4804      	ldr	r0, [pc, #16]	; (8004324 <LCD9488_GUI_Clear+0xd8>)
 8004312:	f003 fe02 	bl	8007f1a <HAL_GPIO_WritePin>
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20008fe4 	.word	0x20008fe4
 8004324:	40020800 	.word	0x40020800
 8004328:	20008bec 	.word	0x20008bec

0800432c <LCD9488_RESET>:

//=======================================================================================
void LCD9488_RESET(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
	LCD9488_RST_CLR;
 8004330:	2200      	movs	r2, #0
 8004332:	2102      	movs	r1, #2
 8004334:	4807      	ldr	r0, [pc, #28]	; (8004354 <LCD9488_RESET+0x28>)
 8004336:	f003 fdf0 	bl	8007f1a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800433a:	2064      	movs	r0, #100	; 0x64
 800433c:	f002 fb70 	bl	8006a20 <HAL_Delay>
	LCD9488_RST_SET;
 8004340:	2201      	movs	r2, #1
 8004342:	2102      	movs	r1, #2
 8004344:	4803      	ldr	r0, [pc, #12]	; (8004354 <LCD9488_RESET+0x28>)
 8004346:	f003 fde8 	bl	8007f1a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800434a:	2032      	movs	r0, #50	; 0x32
 800434c:	f002 fb68 	bl	8006a20 <HAL_Delay>
}
 8004350:	bf00      	nop
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40020800 	.word	0x40020800

08004358 <LCD9488_GUI_SetWindows>:
//=======================================================================================
void LCD9488_GUI_SetWindows(uint16_t xStar, uint16_t yStar,uint16_t xEnd,uint16_t yEnd)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	461a      	mov	r2, r3
 8004366:	4623      	mov	r3, r4
 8004368:	80fb      	strh	r3, [r7, #6]
 800436a:	4603      	mov	r3, r0
 800436c:	80bb      	strh	r3, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	807b      	strh	r3, [r7, #2]
 8004372:	4613      	mov	r3, r2
 8004374:	803b      	strh	r3, [r7, #0]
	LCD9488_Transport_WR_REG(LCD9488_DEV.SetXcmd);
 8004376:	4b21      	ldr	r3, [pc, #132]	; (80043fc <LCD9488_GUI_SetWindows+0xa4>)
 8004378:	895b      	ldrh	r3, [r3, #10]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fe8b 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(xStar>>8);
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	b29b      	uxth	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff feaa 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xStar);
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fea5 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(xEnd>>8);
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	b29b      	uxth	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fe9e 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xEnd);
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fe99 	bl	80040e4 <LCD9488_Transport_WR_DATA>

	LCD9488_Transport_WR_REG(LCD9488_DEV.SetYcmd);
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <LCD9488_GUI_SetWindows+0xa4>)
 80043b4:	899b      	ldrh	r3, [r3, #12]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fe6d 	bl	8004098 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(yStar>>8);
 80043be:	88bb      	ldrh	r3, [r7, #4]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fe8c 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yStar);
 80043cc:	88bb      	ldrh	r3, [r7, #4]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fe87 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(yEnd>>8);
 80043d6:	883b      	ldrh	r3, [r7, #0]
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	b29b      	uxth	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fe80 	bl	80040e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yEnd);
 80043e4:	883b      	ldrh	r3, [r7, #0]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fe7b 	bl	80040e4 <LCD9488_Transport_WR_DATA>

	LCD9488_WriteRAM_Prepare();
 80043ee:	f7ff fead 	bl	800414c <LCD9488_WriteRAM_Prepare>
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd90      	pop	{r4, r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20008fe4 	.word	0x20008fe4

08004400 <LCD9488_GUI_SetOrientation>:
//=======================================================================================
void LCD9488_GUI_SetOrientation(uint8_t direction)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
			LCD9488_DEV.SetXcmd=0x2A;
 800440a:	4b28      	ldr	r3, [pc, #160]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 800440c:	222a      	movs	r2, #42	; 0x2a
 800440e:	815a      	strh	r2, [r3, #10]
			LCD9488_DEV.SetYcmd=0x2B;
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 8004412:	222b      	movs	r2, #43	; 0x2b
 8004414:	819a      	strh	r2, [r3, #12]
			LCD9488_DEV.WramCmd=0x2C;
 8004416:	4b25      	ldr	r3, [pc, #148]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 8004418:	222c      	movs	r2, #44	; 0x2c
 800441a:	811a      	strh	r2, [r3, #8]
	switch(direction){
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d83e      	bhi.n	80044a0 <LCD9488_GUI_SetOrientation+0xa0>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <LCD9488_GUI_SetOrientation+0x28>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004439 	.word	0x08004439
 800442c:	08004453 	.word	0x08004453
 8004430:	0800446d 	.word	0x0800446d
 8004434:	08004487 	.word	0x08004487
		case 0:										// 0 degree
			LCD9488_DEV.Width=LCD_W;
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 800443a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800443e:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 8004442:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004446:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8004448:	2108      	movs	r1, #8
 800444a:	2036      	movs	r0, #54	; 0x36
 800444c:	f7ff fe68 	bl	8004120 <LCD9488_WriteReg>
		break;
 8004450:	e027      	b.n	80044a2 <LCD9488_GUI_SetOrientation+0xa2>
		case 1:										// 90 degree
			LCD9488_DEV.Width=LCD_H;
 8004452:	4b16      	ldr	r3, [pc, #88]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 8004454:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004458:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 800445c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004460:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8004462:	2168      	movs	r1, #104	; 0x68
 8004464:	2036      	movs	r0, #54	; 0x36
 8004466:	f7ff fe5b 	bl	8004120 <LCD9488_WriteReg>
		break;
 800446a:	e01a      	b.n	80044a2 <LCD9488_GUI_SetOrientation+0xa2>
		case 2:										// 180 degree
			LCD9488_DEV.Width=LCD_W;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 800446e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004472:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 8004476:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800447a:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800447c:	21c8      	movs	r1, #200	; 0xc8
 800447e:	2036      	movs	r0, #54	; 0x36
 8004480:	f7ff fe4e 	bl	8004120 <LCD9488_WriteReg>
		break;
 8004484:	e00d      	b.n	80044a2 <LCD9488_GUI_SetOrientation+0xa2>
		case 3:										// 270 degree
			LCD9488_DEV.Width=LCD_H;
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 8004488:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800448c:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <LCD9488_GUI_SetOrientation+0xac>)
 8004490:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004494:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8004496:	21a8      	movs	r1, #168	; 0xa8
 8004498:	2036      	movs	r0, #54	; 0x36
 800449a:	f7ff fe41 	bl	8004120 <LCD9488_WriteReg>
		break;
 800449e:	e000      	b.n	80044a2 <LCD9488_GUI_SetOrientation+0xa2>
		default:break;
 80044a0:	bf00      	nop
	}
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20008fe4 	.word	0x20008fe4

080044b0 <LCD9488_GUI_SetCursor>:
//=======================================================================================
void LCD9488_GUI_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	460a      	mov	r2, r1
 80044ba:	80fb      	strh	r3, [r7, #6]
 80044bc:	4613      	mov	r3, r2
 80044be:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetWindows(Xpos,Ypos,Xpos,Ypos);										// Окно размером в 1 точку
 80044c0:	88bb      	ldrh	r3, [r7, #4]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	88b9      	ldrh	r1, [r7, #4]
 80044c6:	88f8      	ldrh	r0, [r7, #6]
 80044c8:	f7ff ff46 	bl	8004358 <LCD9488_GUI_SetWindows>
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <LCD9488_GUI_SetFont>:
		LCD9488_GUI_Fill(a,y,b,y,LCD9488_Point_Color);
	}
}
//=======================================================================================
void LCD9488_GUI_SetFont(unsigned char* AFont, uint16_t AFontColor, uint16_t ABackgroundColor) // Установить параметры для выбранного шрифта
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
 80044e0:	4613      	mov	r3, r2
 80044e2:	803b      	strh	r3, [r7, #0]
	LCD9488_CurrentFont = AFont;														// Указатель на массив с данными шрифта
 80044e4:	4a15      	ldr	r2, [pc, #84]	; (800453c <LCD9488_GUI_SetFont+0x68>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6013      	str	r3, [r2, #0]
	LCD9488_Point_Color = AFontColor;													// Цвет пикселей рисования
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <LCD9488_GUI_SetFont+0x6c>)
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	8013      	strh	r3, [r2, #0]
	LCD9488_Back_Color  = ABackgroundColor;												// Цвет фона
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <LCD9488_GUI_SetFont+0x70>)
 80044f2:	883b      	ldrh	r3, [r7, #0]
 80044f4:	8013      	strh	r3, [r2, #0]

	// Прочитать параметры шрифта
	LCD9488_CurrentFont_FirstChar		= LCD9488_CurrentFont[0];          				// Первый символ в наборе
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <LCD9488_GUI_SetFont+0x68>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <LCD9488_GUI_SetFont+0x74>)
 80044fe:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_LastChar		= LCD9488_CurrentFont[1];          				// Последний символ в наборе
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <LCD9488_GUI_SetFont+0x68>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	785a      	ldrb	r2, [r3, #1]
 8004506:	4b11      	ldr	r3, [pc, #68]	; (800454c <LCD9488_GUI_SetFont+0x78>)
 8004508:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_Offset			= LCD9488_CurrentFont[2];          				// Число байтов на 1 символ в массиве шрифта
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <LCD9488_GUI_SetFont+0x68>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	789a      	ldrb	r2, [r3, #2]
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <LCD9488_GUI_SetFont+0x7c>)
 8004512:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixHoriz 		= LCD9488_CurrentFont[3];           			// Размер символов по горизонтали
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <LCD9488_GUI_SetFont+0x68>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	78da      	ldrb	r2, [r3, #3]
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <LCD9488_GUI_SetFont+0x80>)
 800451c:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixVert 		= LCD9488_CurrentFont[4];                   	// Размер символов по вертикали
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <LCD9488_GUI_SetFont+0x68>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	791a      	ldrb	r2, [r3, #4]
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <LCD9488_GUI_SetFont+0x84>)
 8004526:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_BytesPerLine	= LCD9488_CurrentFont[5];                   	// Число байт на 1 горизонтальную линию в символе
 8004528:	4b04      	ldr	r3, [pc, #16]	; (800453c <LCD9488_GUI_SetFont+0x68>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	795a      	ldrb	r2, [r3, #5]
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <LCD9488_GUI_SetFont+0x88>)
 8004530:	701a      	strb	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	20008868 	.word	0x20008868
 8004540:	20000338 	.word	0x20000338
 8004544:	20000004 	.word	0x20000004
 8004548:	200089a0 	.word	0x200089a0
 800454c:	200088f4 	.word	0x200088f4
 8004550:	20008906 	.word	0x20008906
 8004554:	20008905 	.word	0x20008905
 8004558:	20008904 	.word	0x20008904
 800455c:	200089a1 	.word	0x200089a1

08004560 <LCD9488_GUI_GotoXY>:
//=======================================================================================
void LCD9488_GUI_GotoXY(uint16_t x1, uint16_t y1)										// Установить координаты начала для печати символа или строки
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	460a      	mov	r2, r1
 800456a:	80fb      	strh	r3, [r7, #6]
 800456c:	4613      	mov	r3, r2
 800456e:	80bb      	strh	r3, [r7, #4]
	char_x = x1;
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <LCD9488_GUI_GotoXY+0x28>)
 8004574:	6013      	str	r3, [r2, #0]
	char_y = y1;
 8004576:	88bb      	ldrh	r3, [r7, #4]
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <LCD9488_GUI_GotoXY+0x2c>)
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20008900 	.word	0x20008900
 800458c:	20008a38 	.word	0x20008a38

08004590 <LCD9488_GUI_Draw_Char>:
//=======================================================================================
void LCD9488_GUI_Draw_Char(uint16_t fc, uint16_t bc, uint8_t c, ADrawType Overlying)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b089      	sub	sp, #36	; 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	80fb      	strh	r3, [r7, #6]
 80045a2:	4603      	mov	r3, r0
 80045a4:	80bb      	strh	r3, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
 80045aa:	4613      	mov	r3, r2
 80045ac:	70bb      	strb	r3, [r7, #2]
    unsigned int b;
    unsigned char* CurCharBitmap;														// начало данных для текущего символа в массиве шрифта
    unsigned char z, cur_width;

    if ((c < LCD9488_CurrentFont_FirstChar) || (c > LCD9488_CurrentFont_LastChar))
 80045ae:	4b74      	ldr	r3, [pc, #464]	; (8004780 <LCD9488_GUI_Draw_Char+0x1f0>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	f0c0 817b 	bcc.w	80048b0 <LCD9488_GUI_Draw_Char+0x320>
 80045ba:	4b72      	ldr	r3, [pc, #456]	; (8004784 <LCD9488_GUI_Draw_Char+0x1f4>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	f200 8175 	bhi.w	80048b0 <LCD9488_GUI_Draw_Char+0x320>
    {
    	return;  																		// работаем только с символами, которые есть в шрифте
    }

	c = c - LCD9488_CurrentFont_FirstChar; 												// сдвигаем до 1го символа в наборе (см ASCII таблицу)
 80045c6:	4b6e      	ldr	r3, [pc, #440]	; (8004780 <LCD9488_GUI_Draw_Char+0x1f0>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	70fb      	strb	r3, [r7, #3]

    if (char_x + LCD9488_CurrentFont_PixHoriz > LCD9488_DEV.Width)
 80045d0:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <LCD9488_GUI_Draw_Char+0x1f8>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b6d      	ldr	r3, [pc, #436]	; (800478c <LCD9488_GUI_Draw_Char+0x1fc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4413      	add	r3, r2
 80045dc:	4a6c      	ldr	r2, [pc, #432]	; (8004790 <LCD9488_GUI_Draw_Char+0x200>)
 80045de:	8812      	ldrh	r2, [r2, #0]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d918      	bls.n	8004616 <LCD9488_GUI_Draw_Char+0x86>
     {
         char_x = 0;
 80045e4:	4b69      	ldr	r3, [pc, #420]	; (800478c <LCD9488_GUI_Draw_Char+0x1fc>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
         char_y = char_y + LCD9488_CurrentFont_PixVert;
 80045ea:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <LCD9488_GUI_Draw_Char+0x204>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b69      	ldr	r3, [pc, #420]	; (8004798 <LCD9488_GUI_Draw_Char+0x208>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4413      	add	r3, r2
 80045f6:	4a68      	ldr	r2, [pc, #416]	; (8004798 <LCD9488_GUI_Draw_Char+0x208>)
 80045f8:	6013      	str	r3, [r2, #0]
         if (char_y >= (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 80045fa:	4b65      	ldr	r3, [pc, #404]	; (8004790 <LCD9488_GUI_Draw_Char+0x200>)
 80045fc:	885b      	ldrh	r3, [r3, #2]
 80045fe:	461a      	mov	r2, r3
 8004600:	4b64      	ldr	r3, [pc, #400]	; (8004794 <LCD9488_GUI_Draw_Char+0x204>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	461a      	mov	r2, r3
 8004608:	4b63      	ldr	r3, [pc, #396]	; (8004798 <LCD9488_GUI_Draw_Char+0x208>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d802      	bhi.n	8004616 <LCD9488_GUI_Draw_Char+0x86>
         {
             char_y = 0;
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <LCD9488_GUI_Draw_Char+0x208>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
         }
     }

    CurCharBitmap = &LCD9488_CurrentFont[((c) * LCD9488_CurrentFont_Offset) + 6]; 		// начало массива текущего символа (с = номер символа; offset = сколько байтов на символ в шрифте; 6 = первые 6 байт во всем массиве - заголовок с параметрами шрифта)
 8004616:	4b61      	ldr	r3, [pc, #388]	; (800479c <LCD9488_GUI_Draw_Char+0x20c>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	4960      	ldr	r1, [pc, #384]	; (80047a0 <LCD9488_GUI_Draw_Char+0x210>)
 800461e:	7809      	ldrb	r1, [r1, #0]
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	3306      	adds	r3, #6
 8004626:	4413      	add	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

    cur_width = CurCharBitmap[0];                          								// ширина текущего символа - в начале каждого символа первый байт - его ширина
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	74fb      	strb	r3, [r7, #19]

    if (Overlying == DRAW_OVERLYING)													// Если режим наложения - рисуем только значащие точки символа поверх того что уже нарисовано (медленно)
 8004630:	78bb      	ldrb	r3, [r7, #2]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d150      	bne.n	80046d8 <LCD9488_GUI_Draw_Char+0x148>
    {
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8004636:	2300      	movs	r3, #0
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e03c      	b.n	80046b6 <LCD9488_GUI_Draw_Char+0x126>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 800463c:	2300      	movs	r3, #0
 800463e:	77bb      	strb	r3, [r7, #30]
 8004640:	e031      	b.n	80046a6 <LCD9488_GUI_Draw_Char+0x116>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3) + 1];
 8004642:	4b58      	ldr	r3, [pc, #352]	; (80047a4 <LCD9488_GUI_Draw_Char+0x214>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	7fbb      	ldrb	r3, [r7, #30]
 800464a:	fb03 f302 	mul.w	r3, r3, r2
 800464e:	7ffa      	ldrb	r2, [r7, #31]
 8004650:	08d2      	lsrs	r2, r2, #3
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	4413      	add	r3, r2
 8004656:	3301      	adds	r3, #1
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	74bb      	strb	r3, [r7, #18]

               b = 1 << (cur_y & 0x07);
 8004660:	7ffb      	ldrb	r3, [r7, #31]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2201      	movs	r2, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 800466e:	7cba      	ldrb	r2, [r7, #18]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <LCD9488_GUI_Draw_Char+0x110>
               {

               }
               else																		// точка изображения символа
               {
            	   LCD9488_Point_Color = fc;											// устанавливаем цвет точки
 8004678:	4a4b      	ldr	r2, [pc, #300]	; (80047a8 <LCD9488_GUI_Draw_Char+0x218>)
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	8013      	strh	r3, [r2, #0]
            	   LCD9488_GUI_Draw_Point(char_x + cur_x, char_y + cur_y);				// Рисуем точку по координатам
 800467e:	7fbb      	ldrb	r3, [r7, #30]
 8004680:	b29a      	uxth	r2, r3
 8004682:	4b42      	ldr	r3, [pc, #264]	; (800478c <LCD9488_GUI_Draw_Char+0x1fc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	4413      	add	r3, r2
 800468a:	b298      	uxth	r0, r3
 800468c:	7ffb      	ldrb	r3, [r7, #31]
 800468e:	b29a      	uxth	r2, r3
 8004690:	4b41      	ldr	r3, [pc, #260]	; (8004798 <LCD9488_GUI_Draw_Char+0x208>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	4413      	add	r3, r2
 8004698:	b29b      	uxth	r3, r3
 800469a:	4619      	mov	r1, r3
 800469c:	f7ff fdbc 	bl	8004218 <LCD9488_GUI_Draw_Point>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80046a0:	7fbb      	ldrb	r3, [r7, #30]
 80046a2:	3301      	adds	r3, #1
 80046a4:	77bb      	strb	r3, [r7, #30]
 80046a6:	4b38      	ldr	r3, [pc, #224]	; (8004788 <LCD9488_GUI_Draw_Char+0x1f8>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	7fba      	ldrb	r2, [r7, #30]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d3c8      	bcc.n	8004642 <LCD9488_GUI_Draw_Char+0xb2>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80046b0:	7ffb      	ldrb	r3, [r7, #31]
 80046b2:	3301      	adds	r3, #1
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	4b37      	ldr	r3, [pc, #220]	; (8004794 <LCD9488_GUI_Draw_Char+0x204>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	7ffa      	ldrb	r2, [r7, #31]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d3bd      	bcc.n	800463c <LCD9488_GUI_Draw_Char+0xac>
               }


           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 80046c0:	4b33      	ldr	r3, [pc, #204]	; (8004790 <LCD9488_GUI_Draw_Char+0x200>)
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	4b31      	ldr	r3, [pc, #196]	; (8004790 <LCD9488_GUI_Draw_Char+0x200>)
 80046ca:	885b      	ldrh	r3, [r3, #2]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2100      	movs	r1, #0
 80046d2:	2000      	movs	r0, #0
 80046d4:	f7ff fe40 	bl	8004358 <LCD9488_GUI_SetWindows>

    }
    if (Overlying == DRAW_NO_OVERLYING)													// Если НЕ режим наложения - рисуем символ цветом fc на фоне bc
 80046d8:	78bb      	ldrb	r3, [r7, #2]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f040 80d1 	bne.w	8004882 <LCD9488_GUI_Draw_Char+0x2f2>
    {
    	uint8_t red, green, blue;														// цветовые компопнеты точки

        LCD9488_GUI_SetWindows(char_x, char_y, char_x + LCD9488_CurrentFont_PixHoriz - 1, char_y + LCD9488_CurrentFont_PixVert);
 80046e0:	4b2a      	ldr	r3, [pc, #168]	; (800478c <LCD9488_GUI_Draw_Char+0x1fc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	b298      	uxth	r0, r3
 80046e6:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <LCD9488_GUI_Draw_Char+0x208>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	b299      	uxth	r1, r3
 80046ec:	4b26      	ldr	r3, [pc, #152]	; (8004788 <LCD9488_GUI_Draw_Char+0x1f8>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <LCD9488_GUI_Draw_Char+0x1fc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29c      	uxth	r4, r3
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <LCD9488_GUI_Draw_Char+0x204>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b29a      	uxth	r2, r3
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <LCD9488_GUI_Draw_Char+0x208>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	4413      	add	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	4622      	mov	r2, r4
 8004712:	f7ff fe21 	bl	8004358 <LCD9488_GUI_SetWindows>

        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8004716:	2300      	movs	r3, #0
 8004718:	76bb      	strb	r3, [r7, #26]
 800471a:	e0a0      	b.n	800485e <LCD9488_GUI_Draw_Char+0x2ce>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 800471c:	2300      	movs	r3, #0
 800471e:	767b      	strb	r3, [r7, #25]
 8004720:	e094      	b.n	800484c <LCD9488_GUI_Draw_Char+0x2bc>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3)+1];
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <LCD9488_GUI_Draw_Char+0x214>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	7e7b      	ldrb	r3, [r7, #25]
 800472a:	fb03 f302 	mul.w	r3, r3, r2
 800472e:	7eba      	ldrb	r2, [r7, #26]
 8004730:	08d2      	lsrs	r2, r2, #3
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	4413      	add	r3, r2
 8004736:	3301      	adds	r3, #1
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	74bb      	strb	r3, [r7, #18]
               b = 1 << (cur_y & 0x07);
 8004740:	7ebb      	ldrb	r3, [r7, #26]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	2201      	movs	r2, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 800474e:	7cba      	ldrb	r2, [r7, #18]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d129      	bne.n	80047ac <LCD9488_GUI_Draw_Char+0x21c>
               {
            	   red		= (bc>>8)&0xF8;
 8004758:	88bb      	ldrh	r3, [r7, #4]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b29b      	uxth	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f023 0307 	bic.w	r3, r3, #7
 8004764:	777b      	strb	r3, [r7, #29]
            	   green 	= (bc>>3)&0xFC;
 8004766:	88bb      	ldrh	r3, [r7, #4]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	b29b      	uxth	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	773b      	strb	r3, [r7, #28]
            	   blue	= bc<<3;
 8004774:	88bb      	ldrh	r3, [r7, #4]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e028      	b.n	80047d0 <LCD9488_GUI_Draw_Char+0x240>
 800477e:	bf00      	nop
 8004780:	200089a0 	.word	0x200089a0
 8004784:	200088f4 	.word	0x200088f4
 8004788:	20008905 	.word	0x20008905
 800478c:	20008900 	.word	0x20008900
 8004790:	20008fe4 	.word	0x20008fe4
 8004794:	20008904 	.word	0x20008904
 8004798:	20008a38 	.word	0x20008a38
 800479c:	20008868 	.word	0x20008868
 80047a0:	20008906 	.word	0x20008906
 80047a4:	200089a1 	.word	0x200089a1
 80047a8:	20000338 	.word	0x20000338
               }
               else																		// точка изображения символа
               {
                  	red		= (fc>>8)&0xF8;
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	777b      	strb	r3, [r7, #29]
                  	green 	= (fc>>3)&0xFC;
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	b29b      	uxth	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	773b      	strb	r3, [r7, #28]
                  	blue	= fc<<3;
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	76fb      	strb	r3, [r7, #27]
               }
               // Пишет компонеты цветов для текущей точик в символе
               LCD9488_CS_CLR;
 80047d0:	2200      	movs	r2, #0
 80047d2:	2104      	movs	r1, #4
 80047d4:	4838      	ldr	r0, [pc, #224]	; (80048b8 <LCD9488_GUI_Draw_Char+0x328>)
 80047d6:	f003 fba0 	bl	8007f1a <HAL_GPIO_WritePin>
               LCD9488_RS_SET;
 80047da:	2201      	movs	r2, #1
 80047dc:	2101      	movs	r1, #1
 80047de:	4836      	ldr	r0, [pc, #216]	; (80048b8 <LCD9488_GUI_Draw_Char+0x328>)
 80047e0:	f003 fb9b 	bl	8007f1a <HAL_GPIO_WritePin>
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80047e4:	bf00      	nop
 80047e6:	4b35      	ldr	r3, [pc, #212]	; (80048bc <LCD9488_GUI_Draw_Char+0x32c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f8      	beq.n	80047e6 <LCD9488_GUI_Draw_Char+0x256>
               	   LCD_SPI.Instance->DR = red;
 80047f4:	4b31      	ldr	r3, [pc, #196]	; (80048bc <LCD9488_GUI_Draw_Char+0x32c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	7f7a      	ldrb	r2, [r7, #29]
 80047fa:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80047fc:	bf00      	nop
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <LCD9488_GUI_Draw_Char+0x32c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f8      	beq.n	80047fe <LCD9488_GUI_Draw_Char+0x26e>
               	   LCD_SPI.Instance->DR = green;
 800480c:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <LCD9488_GUI_Draw_Char+0x32c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	7f3a      	ldrb	r2, [r7, #28]
 8004812:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004814:	bf00      	nop
 8004816:	4b29      	ldr	r3, [pc, #164]	; (80048bc <LCD9488_GUI_Draw_Char+0x32c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f8      	beq.n	8004816 <LCD9488_GUI_Draw_Char+0x286>
               	   LCD_SPI.Instance->DR = blue;
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <LCD9488_GUI_Draw_Char+0x32c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	7efa      	ldrb	r2, [r7, #27]
 800482a:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800482c:	bf00      	nop
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <LCD9488_GUI_Draw_Char+0x32c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f8      	beq.n	800482e <LCD9488_GUI_Draw_Char+0x29e>

               LCD9488_CS_SET;
 800483c:	2201      	movs	r2, #1
 800483e:	2104      	movs	r1, #4
 8004840:	481d      	ldr	r0, [pc, #116]	; (80048b8 <LCD9488_GUI_Draw_Char+0x328>)
 8004842:	f003 fb6a 	bl	8007f1a <HAL_GPIO_WritePin>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 8004846:	7e7b      	ldrb	r3, [r7, #25]
 8004848:	3301      	adds	r3, #1
 800484a:	767b      	strb	r3, [r7, #25]
 800484c:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <LCD9488_GUI_Draw_Char+0x330>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	7e7a      	ldrb	r2, [r7, #25]
 8004852:	429a      	cmp	r2, r3
 8004854:	f4ff af65 	bcc.w	8004722 <LCD9488_GUI_Draw_Char+0x192>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8004858:	7ebb      	ldrb	r3, [r7, #26]
 800485a:	3301      	adds	r3, #1
 800485c:	76bb      	strb	r3, [r7, #26]
 800485e:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <LCD9488_GUI_Draw_Char+0x334>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	7eba      	ldrb	r2, [r7, #26]
 8004864:	429a      	cmp	r2, r3
 8004866:	f4ff af59 	bcc.w	800471c <LCD9488_GUI_Draw_Char+0x18c>
           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 800486a:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <LCD9488_GUI_Draw_Char+0x338>)
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <LCD9488_GUI_Draw_Char+0x338>)
 8004874:	885b      	ldrh	r3, [r3, #2]
 8004876:	3b01      	subs	r3, #1
 8004878:	b29b      	uxth	r3, r3
 800487a:	2100      	movs	r1, #0
 800487c:	2000      	movs	r0, #0
 800487e:	f7ff fd6b 	bl	8004358 <LCD9488_GUI_SetWindows>
    }

    // Сдвигаем позицию (char_x, char_y) для печати следующего символа
    if ((cur_width + 2) < LCD9488_CurrentFont_PixHoriz)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	3302      	adds	r3, #2
 8004886:	4a0e      	ldr	r2, [pc, #56]	; (80048c0 <LCD9488_GUI_Draw_Char+0x330>)
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	4293      	cmp	r3, r2
 800488c:	da07      	bge.n	800489e <LCD9488_GUI_Draw_Char+0x30e>
    {
        char_x = char_x + cur_width + 2;
 800488e:	7cfa      	ldrb	r2, [r7, #19]
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <LCD9488_GUI_Draw_Char+0x33c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4413      	add	r3, r2
 8004896:	3302      	adds	r3, #2
 8004898:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <LCD9488_GUI_Draw_Char+0x33c>)
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e009      	b.n	80048b2 <LCD9488_GUI_Draw_Char+0x322>
    }
    else
    {
    	char_x = char_x + LCD9488_CurrentFont_PixHoriz;
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <LCD9488_GUI_Draw_Char+0x330>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <LCD9488_GUI_Draw_Char+0x33c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4413      	add	r3, r2
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <LCD9488_GUI_Draw_Char+0x33c>)
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e000      	b.n	80048b2 <LCD9488_GUI_Draw_Char+0x322>
    	return;  																		// работаем только с символами, которые есть в шрифте
 80048b0:	bf00      	nop
    }
}
 80048b2:	3724      	adds	r7, #36	; 0x24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd90      	pop	{r4, r7, pc}
 80048b8:	40020800 	.word	0x40020800
 80048bc:	20008bec 	.word	0x20008bec
 80048c0:	20008905 	.word	0x20008905
 80048c4:	20008904 	.word	0x20008904
 80048c8:	20008fe4 	.word	0x20008fe4
 80048cc:	20008900 	.word	0x20008900

080048d0 <LCD9488_GUI_Draw_StringColor>:
        p++;
    }
}
//=======================================================================================
void LCD9488_GUI_Draw_StringColor(uint16_t x, uint16_t y, char* str, unsigned char* font, uint16_t fontcolor, uint16_t bgcolor, ADrawType Overlying)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60ba      	str	r2, [r7, #8]
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	4603      	mov	r3, r0
 80048dc:	81fb      	strh	r3, [r7, #14]
 80048de:	460b      	mov	r3, r1
 80048e0:	81bb      	strh	r3, [r7, #12]
	uint16_t x0 = x;
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	82fb      	strh	r3, [r7, #22]

  	LCD9488_GUI_SetFont(font, fontcolor, bgcolor);
 80048e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048e8:	8c3b      	ldrh	r3, [r7, #32]
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fdf1 	bl	80044d4 <LCD9488_GUI_SetFont>
  	LCD9488_GUI_GotoXY(x, y);
 80048f2:	89ba      	ldrh	r2, [r7, #12]
 80048f4:	89fb      	ldrh	r3, [r7, #14]
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff fe31 	bl	8004560 <LCD9488_GUI_GotoXY>
    while(*str != 0)
 80048fe:	e030      	b.n	8004962 <LCD9488_GUI_Draw_StringColor+0x92>
    {
		if( x > (LCD9488_DEV.Width - LCD9488_CurrentFont_PixHoriz/2) || y > (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 8004900:	89fa      	ldrh	r2, [r7, #14]
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <LCD9488_GUI_Draw_StringColor+0xa4>)
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <LCD9488_GUI_Draw_StringColor+0xa8>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	1acb      	subs	r3, r1, r3
 8004912:	429a      	cmp	r2, r3
 8004914:	dc2a      	bgt.n	800496c <LCD9488_GUI_Draw_StringColor+0x9c>
 8004916:	89ba      	ldrh	r2, [r7, #12]
 8004918:	4b16      	ldr	r3, [pc, #88]	; (8004974 <LCD9488_GUI_Draw_StringColor+0xa4>)
 800491a:	885b      	ldrh	r3, [r3, #2]
 800491c:	4619      	mov	r1, r3
 800491e:	4b17      	ldr	r3, [pc, #92]	; (800497c <LCD9488_GUI_Draw_StringColor+0xac>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	1acb      	subs	r3, r1, r3
 8004924:	429a      	cmp	r2, r3
 8004926:	dc21      	bgt.n	800496c <LCD9488_GUI_Draw_StringColor+0x9c>
			return;

		if(*str == 0x0D)															// конец строки, перевод на новую строку
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b0d      	cmp	r3, #13
 800492e:	d10b      	bne.n	8004948 <LCD9488_GUI_Draw_StringColor+0x78>
        {
            y = y + LCD9488_CurrentFont_PixVert;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <LCD9488_GUI_Draw_StringColor+0xac>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b29a      	uxth	r2, r3
 8004936:	89bb      	ldrh	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	81bb      	strh	r3, [r7, #12]
			x = x0;
 800493c:	8afb      	ldrh	r3, [r7, #22]
 800493e:	81fb      	strh	r3, [r7, #14]
            str++;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3301      	adds	r3, #1
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	e009      	b.n	800495c <LCD9488_GUI_Draw_StringColor+0x8c>
        }
        else
		{
        	LCD9488_GUI_Draw_Char(LCD9488_Point_Color,LCD9488_Back_Color,*str, Overlying);
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <LCD9488_GUI_Draw_StringColor+0xb0>)
 800494a:	8818      	ldrh	r0, [r3, #0]
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <LCD9488_GUI_Draw_StringColor+0xb4>)
 800494e:	8819      	ldrh	r1, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781a      	ldrb	r2, [r3, #0]
 8004954:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004958:	f7ff fe1a 	bl	8004590 <LCD9488_GUI_Draw_Char>
		}
		str++;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3301      	adds	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
    while(*str != 0)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ca      	bne.n	8004900 <LCD9488_GUI_Draw_StringColor+0x30>
 800496a:	e000      	b.n	800496e <LCD9488_GUI_Draw_StringColor+0x9e>
			return;
 800496c:	bf00      	nop
    }
}
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20008fe4 	.word	0x20008fe4
 8004978:	20008905 	.word	0x20008905
 800497c:	20008904 	.word	0x20008904
 8004980:	20000338 	.word	0x20000338
 8004984:	20000004 	.word	0x20000004

08004988 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	5c8a      	ldrb	r2, [r1, r2]
 800499c:	4413      	add	r3, r2
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b3f      	cmp	r3, #63	; 0x3f
 80049a6:	dd02      	ble.n	80049ae <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3b40      	subs	r3, #64	; 0x40
 80049ac:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <hist_is_space_for_new+0x1a>
		return true;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e01e      	b.n	8004a16 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	429a      	cmp	r2, r3
 80049e2:	db0c      	blt.n	80049fe <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	4413      	add	r3, r2
 80049f2:	3b01      	subs	r3, #1
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	da0c      	bge.n	8004a14 <hist_is_space_for_new+0x56>
			return true;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e00b      	b.n	8004a16 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	da01      	bge.n	8004a14 <hist_is_space_for_new+0x56>
			return true;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <hist_is_space_for_new+0x58>
	}
	return false;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a30:	dc61      	bgt.n	8004af6 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8004a32:	e002      	b.n	8004a3a <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ffa7 	bl	8004988 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff ffbe 	bl	80049be <hist_is_space_for_new>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f5      	beq.n	8004a34 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	b2d1      	uxtb	r1, r2
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	da0a      	bge.n	8004a84 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	3301      	adds	r3, #1
 8004a76:	4413      	add	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f010 f8b5 	bl	8014bec <memcpy>
 8004a82:	e018      	b.n	8004ab6 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004a8c:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	3301      	adds	r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f010 f8a5 	bl	8014bec <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	18d1      	adds	r1, r2, r3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f010 f89b 	bl	8014bec <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	b2d1      	uxtb	r1, r2
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	2b3f      	cmp	r3, #63	; 0x3f
 8004ad6:	dd05      	ble.n	8004ae4 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	2100      	movs	r1, #0
 8004aec:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	649a      	str	r2, [r3, #72]	; 0x48
 8004af4:	e000      	b.n	8004af8 <hist_save_line+0xd8>
		return;
 8004af6:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08c      	sub	sp, #48	; 0x30
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8004b14:	e010      	b.n	8004b38 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	4413      	add	r3, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b22:	4413      	add	r3, r2
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	2b3f      	cmp	r3, #63	; 0x3f
 8004b2a:	dd02      	ble.n	8004b32 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	3b40      	subs	r3, #64	; 0x40
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	3301      	adds	r3, #1
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	4413      	add	r3, r2
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e8      	bne.n	8004b16 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d176      	bne.n	8004c38 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f2c0 80d6 	blt.w	8004d02 <hist_restore_line+0x204>
			int header = pThis->begin;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004b60:	e010      	b.n	8004b84 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	4413      	add	r3, r2
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	4413      	add	r3, r2
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	2b3f      	cmp	r3, #63	; 0x3f
 8004b76:	dd02      	ble.n	8004b7e <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	3b40      	subs	r3, #64	; 0x40
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	3301      	adds	r3, #1
 8004b82:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	4413      	add	r3, r2
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <hist_restore_line+0xa2>
 8004b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	1e5a      	subs	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d1e0      	bne.n	8004b62 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	4413      	add	r3, r2
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80aa 	beq.w	8004d02 <hist_restore_line+0x204>
					pThis->cur++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	4413      	add	r3, r2
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	4413      	add	r3, r2
 8004bc6:	2b3f      	cmp	r3, #63	; 0x3f
 8004bc8:	dc11      	bgt.n	8004bee <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8004bca:	2265      	movs	r2, #101	; 0x65
 8004bcc:	2100      	movs	r1, #0
 8004bce:	68b8      	ldr	r0, [r7, #8]
 8004bd0:	f010 f830 	bl	8014c34 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	3301      	adds	r3, #1
 8004bda:	18d1      	adds	r1, r2, r3
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	4413      	add	r3, r2
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f010 f800 	bl	8014bec <memcpy>
 8004bec:	e01f      	b.n	8004c2e <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004bf4:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8004bf6:	2265      	movs	r2, #101	; 0x65
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	68b8      	ldr	r0, [r7, #8]
 8004bfc:	f010 f81a 	bl	8014c34 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	3301      	adds	r3, #1
 8004c06:	4413      	add	r3, r2
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	68b8      	ldr	r0, [r7, #8]
 8004c0e:	f00f ffed 	bl	8014bec <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	18d0      	adds	r0, r2, r3
 8004c18:	68f9      	ldr	r1, [r7, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	4413      	add	r3, r2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f00f ffdf 	bl	8014bec <memcpy>
				}
				return pThis->ring_buf[header];
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	4413      	add	r3, r2
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	e066      	b.n	8004d06 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	dd5e      	ble.n	8004cfe <hist_restore_line+0x200>
				pThis->cur--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004c54:	e010      	b.n	8004c78 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b3f      	cmp	r3, #63	; 0x3f
 8004c6a:	dd02      	ble.n	8004c72 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3b40      	subs	r3, #64	; 0x40
 8004c70:	61fb      	str	r3, [r7, #28]
				j++;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	3301      	adds	r3, #1
 8004c76:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d006      	beq.n	8004c92 <hist_restore_line+0x194>
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	1ad2      	subs	r2, r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d1e1      	bne.n	8004c56 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8004ca2:	dc0c      	bgt.n	8004cbe <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	18d1      	adds	r1, r2, r3
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68b8      	ldr	r0, [r7, #8]
 8004cb8:	f00f ff98 	bl	8014bec <memcpy>
 8004cbc:	e01a      	b.n	8004cf4 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004cc4:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68b8      	ldr	r0, [r7, #8]
 8004cd4:	f00f ff8a 	bl	8014bec <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	18d0      	adds	r0, r2, r3
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f00f ff7c 	bl	8014bec <memcpy>
			}
			return pThis->ring_buf[header];
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	e003      	b.n	8004d06 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e001      	b.n	8004d06 <hist_restore_line+0x208>
		}
	}
	return -1;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3730      	adds	r7, #48	; 0x30
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
	int i = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004d22:	e002      	b.n	8004d2a <split+0x1c>
			ind++;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3301      	adds	r3, #1
 8004d28:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	3354      	adds	r3, #84	; 0x54
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <split+0x32>
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	dbf1      	blt.n	8004d24 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	db01      	blt.n	8004d4c <split+0x3e>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	e024      	b.n	8004d96 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1c58      	adds	r0, r3, #1
 8004d58:	6178      	str	r0, [r7, #20]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4403      	add	r3, r0
 8004d60:	440a      	add	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b07      	cmp	r3, #7
 8004d68:	dd05      	ble.n	8004d76 <split+0x68>
			return -1;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	e012      	b.n	8004d96 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3301      	adds	r3, #1
 8004d74:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3354      	adds	r3, #84	; 0x54
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <split+0x7e>
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	dbf1      	blt.n	8004d70 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	dbca      	blt.n	8004d2a <split+0x1c>
 8004d94:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004db2:	4610      	mov	r0, r2
 8004db4:	4798      	blx	r3
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <terminal_backspace+0x30>)
 8004dca:	7a5b      	ldrb	r3, [r3, #9]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <terminal_backspace+0x1c>
	{
		pThis->print (ENDL);    // new line
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004dd6:	4807      	ldr	r0, [pc, #28]	; (8004df4 <terminal_backspace+0x34>)
 8004dd8:	4798      	blx	r3
	else
	{
		pThis->print ("\033[D \033[D");
	}

}
 8004dda:	e004      	b.n	8004de6 <terminal_backspace+0x26>
		pThis->print ("\033[D \033[D");
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004de2:	4805      	ldr	r0, [pc, #20]	; (8004df8 <terminal_backspace+0x38>)
 8004de4:	4798      	blx	r3
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20008910 	.word	0x20008910
 8004df4:	08019b3c 	.word	0x08019b3c
 8004df8:	08019b40 	.word	0x08019b40

08004dfc <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004e0a:	4803      	ldr	r0, [pc, #12]	; (8004e18 <terminal_newline+0x1c>)
 8004e0c:	4798      	blx	r3
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	08019b3c 	.word	0x08019b3c

08004e1c <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	809a      	strh	r2, [r3, #4]
	int i = 0, j;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3a:	d235      	bcs.n	8004ea8 <u16bit_to_str+0x8c>
		while (nmb > 0) {
 8004e3c:	e01a      	b.n	8004e74 <u16bit_to_str+0x58>
			tmp_str[i++] = (nmb % 10) + '0';
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <u16bit_to_str+0xa0>)
 8004e42:	fba3 2301 	umull	r2, r3, r3, r1
 8004e46:	08da      	lsrs	r2, r3, #3
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	1aca      	subs	r2, r1, r3
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	6179      	str	r1, [r7, #20]
 8004e5a:	3230      	adds	r2, #48	; 0x30
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	f107 0118 	add.w	r1, r7, #24
 8004e62:	440b      	add	r3, r1
 8004e64:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <u16bit_to_str+0xa0>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e1      	bne.n	8004e3e <u16bit_to_str+0x22>
		}
		for (j = 0; j < i; ++j)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e00f      	b.n	8004ea0 <u16bit_to_str+0x84>
			*(buf++) = tmp_str [i-j-1];
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	1e5a      	subs	r2, r3, #1
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	6039      	str	r1, [r7, #0]
 8004e8e:	f107 0118 	add.w	r1, r7, #24
 8004e92:	440a      	add	r2, r1
 8004e94:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004e98:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	dbeb      	blt.n	8004e80 <u16bit_to_str+0x64>
	}
	*buf = '\0';
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
	return buf;
 8004eae:	683b      	ldr	r3, [r7, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	cccccccd 	.word	0xcccccccd

08004ec0 <terminal_move_cursor>:
#endif

//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8004eca:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <terminal_move_cursor+0xa4>)
 8004ecc:	7a5b      	ldrb	r3, [r3, #9]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <terminal_move_cursor+0x1e>
	{
		pThis->print (ENDL);    // new line
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004ed8:	4823      	ldr	r0, [pc, #140]	; (8004f68 <terminal_move_cursor+0xa8>)
 8004eda:	4798      	blx	r3
 8004edc:	e03f      	b.n	8004f5e <terminal_move_cursor+0x9e>
	}
	else
	{
		char str[16] = {0,};
 8004ede:	f107 030c 	add.w	r3, r7, #12
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	60da      	str	r2, [r3, #12]
			} else if (offset < 0) {
				snprintf (str, 16, "\033[%dD", -(offset));
			}
		#else
			char *endstr;
			strcpy (str, "\033[");
 8004eec:	f107 030c 	add.w	r3, r7, #12
 8004ef0:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <terminal_move_cursor+0xac>)
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	8019      	strh	r1, [r3, #0]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	0c12      	lsrs	r2, r2, #16
 8004efc:	701a      	strb	r2, [r3, #0]
			if (offset > 0) {
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	dd0f      	ble.n	8004f24 <terminal_move_cursor+0x64>
				endstr = u16bit_to_str (offset, str+2);
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	f107 030c 	add.w	r3, r7, #12
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7ff ff84 	bl	8004e1c <u16bit_to_str>
 8004f14:	61f8      	str	r0, [r7, #28]
				strcpy (endstr, "C");
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4915      	ldr	r1, [pc, #84]	; (8004f70 <terminal_move_cursor+0xb0>)
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	8013      	strh	r3, [r2, #0]
 8004f22:	e013      	b.n	8004f4c <terminal_move_cursor+0x8c>
			} else if (offset < 0) {
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	da18      	bge.n	8004f5c <terminal_move_cursor+0x9c>
				endstr = u16bit_to_str (-(offset), str+2);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	425b      	negs	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	3302      	adds	r3, #2
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7ff ff6f 	bl	8004e1c <u16bit_to_str>
 8004f3e:	61f8      	str	r0, [r7, #28]
				strcpy (endstr, "D");
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	490c      	ldr	r1, [pc, #48]	; (8004f74 <terminal_move_cursor+0xb4>)
 8004f44:	461a      	mov	r2, r3
 8004f46:	460b      	mov	r3, r1
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	8013      	strh	r3, [r2, #0]
			} else
				return;
		#endif
			pThis->print (str);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f52:	f107 020c 	add.w	r2, r7, #12
 8004f56:	4610      	mov	r0, r2
 8004f58:	4798      	blx	r3
 8004f5a:	e000      	b.n	8004f5e <terminal_move_cursor+0x9e>
				return;
 8004f5c:	bf00      	nop
	}
}
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20008910 	.word	0x20008910
 8004f68:	08019b3c 	.word	0x08019b3c
 8004f6c:	08019b48 	.word	0x08019b48
 8004f70:	08019b4c 	.word	0x08019b4c
 8004f74:	08019b50 	.word	0x08019b50

08004f78 <terminal_reset_cursor>:
//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	char str[16];
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <terminal_reset_cursor+0x78>)
 8004f82:	7a5b      	ldrb	r3, [r3, #9]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <terminal_reset_cursor+0x1c>
	{
		pThis->print (ENDL);    // new line
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f8e:	4819      	ldr	r0, [pc, #100]	; (8004ff4 <terminal_reset_cursor+0x7c>)
 8004f90:	4798      	blx	r3
			endstr = u16bit_to_str (_PROMPT_LEN, endstr);
			strcpy (endstr, "C");
		#endif
			pThis->print (str);
	}
}
 8004f92:	e029      	b.n	8004fe8 <terminal_reset_cursor+0x70>
			strcpy (str, "\033[");
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <terminal_reset_cursor+0x80>)
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	8019      	strh	r1, [r3, #0]
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	0c12      	lsrs	r2, r2, #16
 8004fa4:	701a      	strb	r2, [r3, #0]
			endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8004fa6:	f107 030c 	add.w	r3, r7, #12
 8004faa:	3302      	adds	r3, #2
 8004fac:	4619      	mov	r1, r3
 8004fae:	206c      	movs	r0, #108	; 0x6c
 8004fb0:	f7ff ff34 	bl	8004e1c <u16bit_to_str>
 8004fb4:	61f8      	str	r0, [r7, #28]
			strcpy (endstr, "D\033["); endstr += 3;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4a10      	ldr	r2, [pc, #64]	; (8004ffc <terminal_reset_cursor+0x84>)
 8004fba:	6810      	ldr	r0, [r2, #0]
 8004fbc:	6018      	str	r0, [r3, #0]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3303      	adds	r3, #3
 8004fc2:	61fb      	str	r3, [r7, #28]
			endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	2005      	movs	r0, #5
 8004fc8:	f7ff ff28 	bl	8004e1c <u16bit_to_str>
 8004fcc:	61f8      	str	r0, [r7, #28]
			strcpy (endstr, "C");
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	490b      	ldr	r1, [pc, #44]	; (8005000 <terminal_reset_cursor+0x88>)
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	8013      	strh	r3, [r2, #0]
			pThis->print (str);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004fe0:	f107 020c 	add.w	r2, r7, #12
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
}
 8004fe8:	bf00      	nop
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20008910 	.word	0x20008910
 8004ff4:	08019b3c 	.word	0x08019b3c
 8004ff8:	08019b48 	.word	0x08019b48
 8004ffc:	08019b54 	.word	0x08019b54
 8005000:	08019b4c 	.word	0x08019b4c

08005004 <terminal_print_line>:
//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <terminal_print_line+0x98>)
 8005012:	7a5b      	ldrb	r3, [r3, #9]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <terminal_print_line+0x20>
	{
		pThis->print (ENDL);    // new line
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800501e:	4820      	ldr	r0, [pc, #128]	; (80050a0 <terminal_print_line+0x9c>)
 8005020:	4798      	blx	r3
 8005022:	e004      	b.n	800502e <terminal_print_line+0x2a>
	}
	else
	{
		pThis->print ("\033[K");    // delete all from cursor to end
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800502a:	481e      	ldr	r0, [pc, #120]	; (80050a4 <terminal_print_line+0xa0>)
 800502c:	4798      	blx	r3
	}

	char nch [] = {0,0};
 800502e:	2300      	movs	r3, #0
 8005030:	743b      	strb	r3, [r7, #16]
 8005032:	2300      	movs	r3, #0
 8005034:	747b      	strb	r3, [r7, #17]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e014      	b.n	8005066 <terminal_print_line+0x62>
		nch [0] = pThis->cmdline [i];
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	3354      	adds	r3, #84	; 0x54
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8005048:	7c3b      	ldrb	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <terminal_print_line+0x4e>
			nch[0] = ' ';
 800504e:	2320      	movs	r3, #32
 8005050:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005058:	f107 0210 	add.w	r2, r7, #16
 800505c:	4610      	mov	r0, r2
 800505e:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3301      	adds	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	429a      	cmp	r2, r3
 8005070:	dbe4      	blt.n	800503c <terminal_print_line+0x38>
	}
	
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <terminal_print_line+0x98>)
 8005074:	7a5b      	ldrb	r3, [r3, #9]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <terminal_print_line+0x82>
	{
		pThis->print (ENDL);    // new line
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005080:	4807      	ldr	r0, [pc, #28]	; (80050a0 <terminal_print_line+0x9c>)
 8005082:	4798      	blx	r3
	else
	{
		terminal_reset_cursor (pThis);
		terminal_move_cursor (pThis, cursor);
	}
}
 8005084:	e006      	b.n	8005094 <terminal_print_line+0x90>
		terminal_reset_cursor (pThis);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff ff76 	bl	8004f78 <terminal_reset_cursor>
		terminal_move_cursor (pThis, cursor);
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ff16 	bl	8004ec0 <terminal_move_cursor>
}
 8005094:	bf00      	nop
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20008910 	.word	0x20008910
 80050a0:	08019b3c 	.word	0x08019b3c
 80050a4:	08019b58 	.word	0x08019b58

080050a8 <microrl_init>:
//	terminal_reset_cursor (pThis);
//	terminal_move_cursor (pThis, cursor);
//}

void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3354      	adds	r3, #84	; 0x54
 80050b6:	2265      	movs	r2, #101	; 0x65
 80050b8:	2100      	movs	r1, #0
 80050ba:	4618      	mov	r0, r3
 80050bc:	f00f fdba 	bl	8014c34 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	2240      	movs	r2, #64	; 0x40
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f00f fdb3 	bl	8014c34 <memset>
	pThis->ring_hist.begin = 0;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <microrl_init+0x88>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	pThis->print(ENDL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800511e:	4805      	ldr	r0, [pc, #20]	; (8005134 <microrl_init+0x8c>)
 8005120:	4798      	blx	r3
	print_prompt (pThis);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fe3c 	bl	8004da0 <print_prompt>
#endif
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000008 	.word	0x20000008
 8005134:	08019b3c 	.word	0x08019b3c

08005138 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <hist_search>:
#endif

#ifdef _USE_ESC_SEQ
static void hist_search (microrl_t * pThis, int dir)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1d18      	adds	r0, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3354      	adds	r3, #84	; 0x54
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	f7ff fcac 	bl	8004afe <hist_restore_line>
 80051a6:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db14      	blt.n	80051d8 <hist_search+0x4c>
		pThis->cursor = pThis->cmdlen = len;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fed8 	bl	8004f78 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051ce:	461a      	mov	r2, r3
 80051d0:	2100      	movs	r1, #0
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff ff16 	bl	8005004 <terminal_print_line>
	}
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <escape_process>:

//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	2b5b      	cmp	r3, #91	; 0x5b
 80051f0:	d104      	bne.n	80051fc <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
		return 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e07b      	b.n	80052f4 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d14f      	bne.n	80052a4 <escape_process+0xc4>
		if (ch == 'A') {
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	2b41      	cmp	r3, #65	; 0x41
 8005208:	d105      	bne.n	8005216 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 800520a:	2100      	movs	r1, #0
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ffbd 	bl	800518c <hist_search>
#endif
			return 1;
 8005212:	2301      	movs	r3, #1
 8005214:	e06e      	b.n	80052f4 <escape_process+0x114>
		} else if (ch == 'B') {
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	2b42      	cmp	r3, #66	; 0x42
 800521a:	d105      	bne.n	8005228 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 800521c:	2101      	movs	r1, #1
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ffb4 	bl	800518c <hist_search>
#endif
			return 1;
 8005224:	2301      	movs	r3, #1
 8005226:	e065      	b.n	80052f4 <escape_process+0x114>
		} else if (ch == 'C') {
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b43      	cmp	r3, #67	; 0x43
 800522c:	d114      	bne.n	8005258 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800523a:	429a      	cmp	r2, r3
 800523c:	da0a      	bge.n	8005254 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 800523e:	2101      	movs	r1, #1
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff fe3d 	bl	8004ec0 <terminal_move_cursor>
				pThis->cursor++;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8005254:	2301      	movs	r3, #1
 8005256:	e04d      	b.n	80052f4 <escape_process+0x114>
		} else if (ch == 'D') {
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	2b44      	cmp	r3, #68	; 0x44
 800525c:	d112      	bne.n	8005284 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005264:	2b00      	cmp	r3, #0
 8005266:	dd0b      	ble.n	8005280 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8005268:	f04f 31ff 	mov.w	r1, #4294967295
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff fe27 	bl	8004ec0 <terminal_move_cursor>
				pThis->cursor--;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8005280:	2301      	movs	r3, #1
 8005282:	e037      	b.n	80052f4 <escape_process+0x114>
		} else if (ch == '7') {
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	2b37      	cmp	r3, #55	; 0x37
 8005288:	d104      	bne.n	8005294 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	701a      	strb	r2, [r3, #0]
			return 0;
 8005290:	2300      	movs	r3, #0
 8005292:	e02f      	b.n	80052f4 <escape_process+0x114>
		} else if (ch == '8') {
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	2b38      	cmp	r3, #56	; 0x38
 8005298:	d12b      	bne.n	80052f2 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2203      	movs	r2, #3
 800529e:	701a      	strb	r2, [r3, #0]
			return 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e027      	b.n	80052f4 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	2b7e      	cmp	r3, #126	; 0x7e
 80052a8:	d123      	bne.n	80052f2 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d108      	bne.n	80052c4 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fe60 	bl	8004f78 <terminal_reset_cursor>
			pThis->cursor = 0;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e017      	b.n	80052f4 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d112      	bne.n	80052f2 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff fdef 	bl	8004ec0 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 80052f2:	2301      	movs	r3, #1
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	2b64      	cmp	r3, #100	; 0x64
 8005314:	dc60      	bgt.n	80053d8 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005322:	4619      	mov	r1, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	440b      	add	r3, r1
 8005328:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3354      	adds	r3, #84	; 0x54
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 8005334:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005342:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8005344:	461a      	mov	r2, r3
 8005346:	f00f fc5c 	bl	8014c02 <memmove>
		for (i = 0; i < len; i++) {
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	e025      	b.n	800539c <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	440b      	add	r3, r1
 8005360:	7811      	ldrb	r1, [r2, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	460a      	mov	r2, r1
 8005368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800537e:	2b20      	cmp	r3, #32
 8005380:	d109      	bne.n	8005396 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3301      	adds	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	dbd5      	blt.n	8005350 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	441a      	add	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <microrl_insert_text+0xde>
	}
	return false;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	dd31      	ble.n	8005458 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fce3 	bl	8004dc0 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005406:	3b01      	subs	r3, #1
 8005408:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3354      	adds	r3, #84	; 0x54
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8005414:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8005426:	461a      	mov	r2, r3
 8005428:	f00f fbeb 	bl	8014c02 <memmove>
		pThis->cursor--;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005432:	1e5a      	subs	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005450:	1e5a      	subs	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	int len = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
	int i = 1;
 800546c:	2301      	movs	r3, #1
 800546e:	60bb      	str	r3, [r7, #8]
	while (1) {
		while (arr[i]!=NULL) {
 8005470:	e030      	b.n	80054d4 <common_len+0x74>
			if ((arr[i][len] != arr[i-1][len]) || 
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005488:	3b01      	subs	r3, #1
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	440b      	add	r3, r1
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	440b      	add	r3, r1
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d116      	bne.n	80054ca <common_len+0x6a>
					(arr[i][len] == '\0') || 
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	781b      	ldrb	r3, [r3, #0]
			if ((arr[i][len] != arr[i-1][len]) || 
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <common_len+0x6a>
					(arr[i-1][len]=='\0')) 
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054b6:	3b01      	subs	r3, #1
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	781b      	ldrb	r3, [r3, #0]
					(arr[i][len] == '\0') || 
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <common_len+0x6e>
				return len;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	e00d      	b.n	80054ea <common_len+0x8a>
			len++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
		while (arr[i]!=NULL) {
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4413      	add	r3, r2
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1c7      	bne.n	8005472 <common_len+0x12>
		}
		i++;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60bb      	str	r3, [r7, #8]
		while (arr[i]!=NULL) {
 80054e8:	e7f4      	b.n	80054d4 <common_len+0x74>
	}
	return 0;
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 80054f4:	b5b0      	push	{r4, r5, r7, lr}
 80054f6:	b08e      	sub	sp, #56	; 0x38
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 809c 	beq.w	8005640 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800550e:	f107 0208 	add.w	r2, r7, #8
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fbfa 	bl	8004d0e <split>
 800551a:	6378      	str	r0, [r7, #52]	; 0x34
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005522:	3b01      	subs	r3, #1
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	4413      	add	r3, r2
 8005528:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800552c:	2b00      	cmp	r3, #0
 800552e:	d109      	bne.n	8005544 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	637a      	str	r2, [r7, #52]	; 0x34
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800553c:	4413      	add	r3, r2
 800553e:	4a42      	ldr	r2, [pc, #264]	; (8005648 <microrl_get_complite+0x154>)
 8005540:	f843 2c30 	str.w	r2, [r3, #-48]
	compl_token = pThis->get_completion (status, tkn_arr);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	4611      	mov	r1, r2
 8005550:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005552:	4798      	blx	r3
 8005554:	62b8      	str	r0, [r7, #40]	; 0x28
	if (compl_token[0] != NULL) {
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d071      	beq.n	8005642 <microrl_get_complite+0x14e>
		int i = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
		int len;

		if (compl_token[1] == NULL) {
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	3304      	adds	r3, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7fa fe0f 	bl	8000194 <strlen>
 8005576:	4603      	mov	r3, r0
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557a:	e026      	b.n	80055ca <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 800557c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800557e:	f7ff ff6f 	bl	8005460 <common_len>
 8005582:	62f8      	str	r0, [r7, #44]	; 0x2c
			terminal_newline (pThis);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fc39 	bl	8004dfc <terminal_newline>
			while (compl_token [i] != NULL) {
 800558a:	e011      	b.n	80055b0 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005598:	440a      	add	r2, r1
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	4610      	mov	r0, r2
 800559e:	4798      	blx	r3
				pThis->print (" ");
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80055a6:	4829      	ldr	r0, [pc, #164]	; (800564c <microrl_get_complite+0x158>)
 80055a8:	4798      	blx	r3
				i++;
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	3301      	adds	r3, #1
 80055ae:	633b      	str	r3, [r7, #48]	; 0x30
			while (compl_token [i] != NULL) {
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b6:	4413      	add	r3, r2
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e6      	bne.n	800558c <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff fc1c 	bl	8004dfc <terminal_newline>
			print_prompt (pThis);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fbeb 	bl	8004da0 <print_prompt>
		}
		
		if (len) {
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d02b      	beq.n	8005628 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	681c      	ldr	r4, [r3, #0]
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	3b01      	subs	r3, #1
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80055de:	4413      	add	r3, r2
 80055e0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fa fdd5 	bl	8000194 <strlen>
 80055ea:	4603      	mov	r3, r0
 80055ec:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 80055ee:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	3b01      	subs	r3, #1
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80055fa:	4413      	add	r3, r2
 80055fc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8005600:	4618      	mov	r0, r3
 8005602:	f7fa fdc7 	bl	8000194 <strlen>
 8005606:	4603      	mov	r3, r0
 8005608:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 800560a:	461a      	mov	r2, r3
 800560c:	4629      	mov	r1, r5
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff fe74 	bl	80052fc <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	3304      	adds	r3, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 800561e:	2201      	movs	r2, #1
 8005620:	490a      	ldr	r1, [pc, #40]	; (800564c <microrl_get_complite+0x158>)
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fe6a 	bl	80052fc <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fca5 	bl	8004f78 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005634:	461a      	mov	r2, r3
 8005636:	2100      	movs	r1, #0
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fce3 	bl	8005004 <terminal_print_line>
 800563e:	e000      	b.n	8005642 <microrl_get_complite+0x14e>
		return;
 8005640:	bf00      	nop
	} 
}
 8005642:	3738      	adds	r7, #56	; 0x38
 8005644:	46bd      	mov	sp, r7
 8005646:	bdb0      	pop	{r4, r5, r7, pc}
 8005648:	08019b5c 	.word	0x08019b5c
 800564c:	08019b60 	.word	0x08019b60

08005650 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8005650:	b580      	push	{r7, lr}
 8005652:	b08c      	sub	sp, #48	; 0x30
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff fbcf 	bl	8004dfc <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005664:	2b00      	cmp	r3, #0
 8005666:	dd0a      	ble.n	800567e <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	1d18      	adds	r0, r3, #4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005678:	461a      	mov	r2, r3
 800567a:	f7ff f9d1 	bl	8004a20 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005684:	f107 020c 	add.w	r2, r7, #12
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fb3f 	bl	8004d0e <split>
 8005690:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status == -1){
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d109      	bne.n	80056ae <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80056a0:	4817      	ldr	r0, [pc, #92]	; (8005700 <new_line_handler+0xb0>)
 80056a2:	4798      	blx	r3
		pThis->print (ENDL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80056aa:	4816      	ldr	r0, [pc, #88]	; (8005704 <new_line_handler+0xb4>)
 80056ac:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dd0c      	ble.n	80056ce <new_line_handler+0x7e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80056c4:	f107 020c 	add.w	r2, r7, #12
 80056c8:	4611      	mov	r1, r2
 80056ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056cc:	4798      	blx	r3
	print_prompt (pThis);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fb66 	bl	8004da0 <print_prompt>
	pThis->cmdlen = 0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3354      	adds	r3, #84	; 0x54
 80056e8:	2265      	movs	r2, #101	; 0x65
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f00f faa1 	bl	8014c34 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 80056f8:	bf00      	nop
 80056fa:	3730      	adds	r7, #48	; 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	08019b64 	.word	0x08019b64
 8005704:	08019b3c 	.word	0x08019b3c

08005708 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fd5d 	bl	80051e0 <escape_process>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 81c1 	beq.w	8005ab0 <microrl_insert_char+0x3a8>
			pThis->escape = 0;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8005734:	e1bc      	b.n	8005ab0 <microrl_insert_char+0x3a8>
		switch (ch) {
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	2b7e      	cmp	r3, #126	; 0x7e
 800573c:	f200 818d 	bhi.w	8005a5a <microrl_insert_char+0x352>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <microrl_insert_char+0x40>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	080059bb 	.word	0x080059bb
 800574c:	080059f3 	.word	0x080059f3
 8005750:	08005a47 	.word	0x08005a47
 8005754:	08005a5b 	.word	0x08005a5b
 8005758:	08005997 	.word	0x08005997
 800575c:	080059cb 	.word	0x080059cb
 8005760:	08005a5b 	.word	0x08005a5b
 8005764:	08005a2b 	.word	0x08005a2b
 8005768:	0800594d 	.word	0x0800594d
 800576c:	08005a9b 	.word	0x08005a9b
 8005770:	0800597f 	.word	0x0800597f
 8005774:	08005a5b 	.word	0x08005a5b
 8005778:	08005945 	.word	0x08005945
 800577c:	08005a21 	.word	0x08005a21
 8005780:	08005a5b 	.word	0x08005a5b
 8005784:	08005a17 	.word	0x08005a17
 8005788:	08005a5b 	.word	0x08005a5b
 800578c:	08005a5b 	.word	0x08005a5b
 8005790:	08005a5b 	.word	0x08005a5b
 8005794:	08005a5b 	.word	0x08005a5b
 8005798:	08005963 	.word	0x08005963
 800579c:	08005a5b 	.word	0x08005a5b
 80057a0:	08005a5b 	.word	0x08005a5b
 80057a4:	08005a5b 	.word	0x08005a5b
 80057a8:	08005a5b 	.word	0x08005a5b
 80057ac:	08005a5b 	.word	0x08005a5b
 80057b0:	08005955 	.word	0x08005955
 80057b4:	08005a5b 	.word	0x08005a5b
 80057b8:	08005a5b 	.word	0x08005a5b
 80057bc:	08005a5b 	.word	0x08005a5b
 80057c0:	08005a5b 	.word	0x08005a5b
 80057c4:	08005a5b 	.word	0x08005a5b
 80057c8:	08005a5b 	.word	0x08005a5b
 80057cc:	08005a5b 	.word	0x08005a5b
 80057d0:	08005a5b 	.word	0x08005a5b
 80057d4:	08005a5b 	.word	0x08005a5b
 80057d8:	08005a5b 	.word	0x08005a5b
 80057dc:	08005a5b 	.word	0x08005a5b
 80057e0:	08005a5b 	.word	0x08005a5b
 80057e4:	08005a5b 	.word	0x08005a5b
 80057e8:	08005a5b 	.word	0x08005a5b
 80057ec:	08005a5b 	.word	0x08005a5b
 80057f0:	08005a5b 	.word	0x08005a5b
 80057f4:	08005a5b 	.word	0x08005a5b
 80057f8:	08005a5b 	.word	0x08005a5b
 80057fc:	08005a5b 	.word	0x08005a5b
 8005800:	08005a5b 	.word	0x08005a5b
 8005804:	08005a5b 	.word	0x08005a5b
 8005808:	08005a5b 	.word	0x08005a5b
 800580c:	08005a5b 	.word	0x08005a5b
 8005810:	08005a5b 	.word	0x08005a5b
 8005814:	08005a5b 	.word	0x08005a5b
 8005818:	08005a5b 	.word	0x08005a5b
 800581c:	08005a5b 	.word	0x08005a5b
 8005820:	08005a5b 	.word	0x08005a5b
 8005824:	08005a5b 	.word	0x08005a5b
 8005828:	08005a5b 	.word	0x08005a5b
 800582c:	08005a5b 	.word	0x08005a5b
 8005830:	08005a5b 	.word	0x08005a5b
 8005834:	08005a5b 	.word	0x08005a5b
 8005838:	08005a5b 	.word	0x08005a5b
 800583c:	08005a5b 	.word	0x08005a5b
 8005840:	08005a5b 	.word	0x08005a5b
 8005844:	08005a5b 	.word	0x08005a5b
 8005848:	08005a5b 	.word	0x08005a5b
 800584c:	08005a5b 	.word	0x08005a5b
 8005850:	08005a5b 	.word	0x08005a5b
 8005854:	08005a5b 	.word	0x08005a5b
 8005858:	08005a5b 	.word	0x08005a5b
 800585c:	08005a5b 	.word	0x08005a5b
 8005860:	08005a5b 	.word	0x08005a5b
 8005864:	08005a5b 	.word	0x08005a5b
 8005868:	08005a5b 	.word	0x08005a5b
 800586c:	08005a5b 	.word	0x08005a5b
 8005870:	08005a5b 	.word	0x08005a5b
 8005874:	08005a5b 	.word	0x08005a5b
 8005878:	08005a5b 	.word	0x08005a5b
 800587c:	08005a5b 	.word	0x08005a5b
 8005880:	08005a5b 	.word	0x08005a5b
 8005884:	08005a5b 	.word	0x08005a5b
 8005888:	08005a5b 	.word	0x08005a5b
 800588c:	08005a5b 	.word	0x08005a5b
 8005890:	08005a5b 	.word	0x08005a5b
 8005894:	08005a5b 	.word	0x08005a5b
 8005898:	08005a5b 	.word	0x08005a5b
 800589c:	08005a5b 	.word	0x08005a5b
 80058a0:	08005a5b 	.word	0x08005a5b
 80058a4:	08005a5b 	.word	0x08005a5b
 80058a8:	08005a5b 	.word	0x08005a5b
 80058ac:	08005a5b 	.word	0x08005a5b
 80058b0:	08005a5b 	.word	0x08005a5b
 80058b4:	08005a5b 	.word	0x08005a5b
 80058b8:	08005a5b 	.word	0x08005a5b
 80058bc:	08005a5b 	.word	0x08005a5b
 80058c0:	08005a5b 	.word	0x08005a5b
 80058c4:	08005a5b 	.word	0x08005a5b
 80058c8:	08005a5b 	.word	0x08005a5b
 80058cc:	08005a5b 	.word	0x08005a5b
 80058d0:	08005a5b 	.word	0x08005a5b
 80058d4:	08005a5b 	.word	0x08005a5b
 80058d8:	08005a5b 	.word	0x08005a5b
 80058dc:	08005a5b 	.word	0x08005a5b
 80058e0:	08005a5b 	.word	0x08005a5b
 80058e4:	08005a5b 	.word	0x08005a5b
 80058e8:	08005a5b 	.word	0x08005a5b
 80058ec:	08005a5b 	.word	0x08005a5b
 80058f0:	08005a5b 	.word	0x08005a5b
 80058f4:	08005a5b 	.word	0x08005a5b
 80058f8:	08005a5b 	.word	0x08005a5b
 80058fc:	08005a5b 	.word	0x08005a5b
 8005900:	08005a5b 	.word	0x08005a5b
 8005904:	08005a5b 	.word	0x08005a5b
 8005908:	08005a5b 	.word	0x08005a5b
 800590c:	08005a5b 	.word	0x08005a5b
 8005910:	08005a5b 	.word	0x08005a5b
 8005914:	08005a5b 	.word	0x08005a5b
 8005918:	08005a5b 	.word	0x08005a5b
 800591c:	08005a5b 	.word	0x08005a5b
 8005920:	08005a5b 	.word	0x08005a5b
 8005924:	08005a5b 	.word	0x08005a5b
 8005928:	08005a5b 	.word	0x08005a5b
 800592c:	08005a5b 	.word	0x08005a5b
 8005930:	08005a5b 	.word	0x08005a5b
 8005934:	08005a5b 	.word	0x08005a5b
 8005938:	08005a5b 	.word	0x08005a5b
 800593c:	08005a5b 	.word	0x08005a5b
 8005940:	08005a2b 	.word	0x08005a2b
				new_line_handler(pThis);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fe83 	bl	8005650 <new_line_handler>
			break;
 800594a:	e0b1      	b.n	8005ab0 <microrl_insert_char+0x3a8>
				microrl_get_complite (pThis);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff fdd1 	bl	80054f4 <microrl_get_complite>
			break;
 8005952:	e0ad      	b.n	8005ab0 <microrl_insert_char+0x3a8>
				pThis->escape = 1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	705a      	strb	r2, [r3, #1]
			break;
 800595a:	e0a9      	b.n	8005ab0 <microrl_insert_char+0x3a8>
					microrl_backspace (pThis);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fd40 	bl	80053e2 <microrl_backspace>
					while (pThis->cursor > 0) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005968:	2b00      	cmp	r3, #0
 800596a:	dcf7      	bgt.n	800595c <microrl_insert_char+0x254>
				terminal_print_line (pThis, 0, pThis->cursor);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005972:	461a      	mov	r2, r3
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fb44 	bl	8005004 <terminal_print_line>
			break;
 800597c:	e098      	b.n	8005ab0 <microrl_insert_char+0x3a8>
				pThis->print ("\033[K");
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005984:	484c      	ldr	r0, [pc, #304]	; (8005ab8 <microrl_insert_char+0x3b0>)
 8005986:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8005994:	e08c      	b.n	8005ab0 <microrl_insert_char+0x3a8>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fa8a 	bl	8004ec0 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80059b8:	e07a      	b.n	8005ab0 <microrl_insert_char+0x3a8>
				terminal_reset_cursor (pThis);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fadc 	bl	8004f78 <terminal_reset_cursor>
				pThis->cursor = 0;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80059c8:	e072      	b.n	8005ab0 <microrl_insert_char+0x3a8>
			if (pThis->cursor < pThis->cmdlen) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059d6:	429a      	cmp	r2, r3
 80059d8:	da61      	bge.n	8005a9e <microrl_insert_char+0x396>
				terminal_move_cursor (pThis, 1);
 80059da:	2101      	movs	r1, #1
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff fa6f 	bl	8004ec0 <terminal_move_cursor>
				pThis->cursor++;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80059f0:	e055      	b.n	8005a9e <microrl_insert_char+0x396>
			if (pThis->cursor) {
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d052      	beq.n	8005aa2 <microrl_insert_char+0x39a>
				terminal_move_cursor (pThis, -1);
 80059fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fa5d 	bl	8004ec0 <terminal_move_cursor>
				pThis->cursor--;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a0c:	1e5a      	subs	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005a14:	e045      	b.n	8005aa2 <microrl_insert_char+0x39a>
			hist_search (pThis, _HIST_UP);
 8005a16:	2100      	movs	r1, #0
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fbb7 	bl	800518c <hist_search>
			break;
 8005a1e:	e047      	b.n	8005ab0 <microrl_insert_char+0x3a8>
			hist_search (pThis, _HIST_DOWN);
 8005a20:	2101      	movs	r1, #1
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fbb2 	bl	800518c <hist_search>
			break;
 8005a28:	e042      	b.n	8005ab0 <microrl_insert_char+0x3a8>
				microrl_backspace (pThis);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fcd9 	bl	80053e2 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fae0 	bl	8005004 <terminal_print_line>
			break;
 8005a44:	e034      	b.n	8005ab0 <microrl_insert_char+0x3a8>
			if (pThis->sigint != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d02a      	beq.n	8005aa6 <microrl_insert_char+0x39e>
				pThis->sigint();
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005a56:	4798      	blx	r3
			break;
 8005a58:	e025      	b.n	8005aa6 <microrl_insert_char+0x39e>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d104      	bne.n	8005a6a <microrl_insert_char+0x362>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01f      	beq.n	8005aaa <microrl_insert_char+0x3a2>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b1f      	cmp	r3, #31
 8005a6e:	dd1c      	ble.n	8005aaa <microrl_insert_char+0x3a2>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8005a70:	463b      	mov	r3, r7
 8005a72:	2201      	movs	r2, #1
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fc40 	bl	80052fc <microrl_insert_text>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d015      	beq.n	8005aae <microrl_insert_char+0x3a6>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a88:	1e59      	subs	r1, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a90:	461a      	mov	r2, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fab6 	bl	8005004 <terminal_print_line>
			break;
 8005a98:	e009      	b.n	8005aae <microrl_insert_char+0x3a6>
			break;
 8005a9a:	bf00      	nop
 8005a9c:	e008      	b.n	8005ab0 <microrl_insert_char+0x3a8>
			break;
 8005a9e:	bf00      	nop
 8005aa0:	e006      	b.n	8005ab0 <microrl_insert_char+0x3a8>
			break;
 8005aa2:	bf00      	nop
 8005aa4:	e004      	b.n	8005ab0 <microrl_insert_char+0x3a8>
			break;
 8005aa6:	bf00      	nop
 8005aa8:	e002      	b.n	8005ab0 <microrl_insert_char+0x3a8>
	}
 8005aaa:	bf00      	nop
 8005aac:	e000      	b.n	8005ab0 <microrl_insert_char+0x3a8>
			break;
 8005aae:	bf00      	nop
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	08019b58 	.word	0x08019b58

08005abc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ac0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <__NVIC_SystemReset+0x20>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005acc:	4903      	ldr	r1, [pc, #12]	; (8005adc <__NVIC_SystemReset+0x20>)
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <__NVIC_SystemReset+0x24>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60cb      	str	r3, [r1, #12]
 8005ad4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005ad8:	bf00      	nop
 8005ada:	e7fd      	b.n	8005ad8 <__NVIC_SystemReset+0x1c>
 8005adc:	e000ed00 	.word	0xe000ed00
 8005ae0:	05fa0004 	.word	0x05fa0004

08005ae4 <microrl_terminalInit>:
char str[255];																			//  буфер sprintf для вывода сообщений в терминал
int terminalFuncArrayIndex = 0;

//=======================================================================================
void microrl_terminalInit()
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
	prv_registerBasicTerminalFuncs();
 8005ae8:	f000 f89a 	bl	8005c20 <prv_registerBasicTerminalFuncs>

	if (ExchangeStruct.TerminalFormat == TERMINALFORMAT_HUMAN)
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <microrl_terminalInit+0x50>)
 8005aee:	7a5b      	ldrb	r3, [r3, #9]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <microrl_terminalInit+0x1c>
	{
		prv_TerminalFunc_about(0, NULL);												// вывести строку из "About..."
 8005af4:	2100      	movs	r1, #0
 8005af6:	2000      	movs	r0, #0
 8005af8:	f000 f9a2 	bl	8005e40 <prv_TerminalFunc_about>
		prv_printMainHelp();															// подсказку с помощью
 8005afc:	f000 fc18 	bl	8006330 <prv_printMainHelp>
	}

	microrl_init(prl, microrl_sendString);
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <microrl_terminalInit+0x54>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	490d      	ldr	r1, [pc, #52]	; (8005b3c <microrl_terminalInit+0x58>)
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff face 	bl	80050a8 <microrl_init>
	microrl_set_execute_callback (prl, prv_execute);
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <microrl_terminalInit+0x54>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	490b      	ldr	r1, [pc, #44]	; (8005b40 <microrl_terminalInit+0x5c>)
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fb1e 	bl	8005154 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
		microrl_set_complete_callback (prl, prv_complet);
 8005b18:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <microrl_terminalInit+0x54>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4909      	ldr	r1, [pc, #36]	; (8005b44 <microrl_terminalInit+0x60>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fb0a 	bl	8005138 <microrl_set_complete_callback>
	#endif

	#ifdef _USE_CTLR_C
		microrl_set_sigint_callback (prl, prv_sigint);
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <microrl_terminalInit+0x54>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4907      	ldr	r1, [pc, #28]	; (8005b48 <microrl_terminalInit+0x64>)
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fb20 	bl	8005170 <microrl_set_sigint_callback>
	#endif
}
 8005b30:	bf00      	nop
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20008910 	.word	0x20008910
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	08006891 	.word	0x08006891
 8005b40:	08005d2d 	.word	0x08005d2d
 8005b44:	08005d8d 	.word	0x08005d8d
 8005b48:	08005e39 	.word	0x08005e39

08005b4c <microrl_terminalProcess>:
//=======================================================================================
void microrl_terminalProcess()
{
 8005b4c:	b598      	push	{r3, r4, r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
	microrl_insert_char(prl, microrl_getChar());
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <microrl_terminalProcess+0x1c>)
 8005b52:	681c      	ldr	r4, [r3, #0]
 8005b54:	f000 fefa 	bl	800694c <MICRORL_UART_GetCharBlocking>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7ff fdd3 	bl	8005708 <microrl_insert_char>
}
 8005b62:	bf00      	nop
 8005b64:	bd98      	pop	{r3, r4, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c

08005b6c <microrl_registerExecuteFunc>:
//=======================================================================================
void microrl_registerExecuteFunc(int (*func)(int, const char* const*), const char* name, const char* help)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
	assert_param(terminalFuncArrayIndex < microrlNUM_OF_TERMINAL_FUNC);

	terminalFuncArray[terminalFuncArrayIndex].func = func;
 8005b78:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <microrl_registerExecuteFunc+0x60>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4914      	ldr	r1, [pc, #80]	; (8005bd0 <microrl_registerExecuteFunc+0x64>)
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3308      	adds	r3, #8
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	601a      	str	r2, [r3, #0]
	terminalFuncArray[terminalFuncArrayIndex].name = name;
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <microrl_registerExecuteFunc+0x60>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	490f      	ldr	r1, [pc, #60]	; (8005bd0 <microrl_registerExecuteFunc+0x64>)
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	601a      	str	r2, [r3, #0]
	terminalFuncArray[terminalFuncArrayIndex].help = help;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <microrl_registerExecuteFunc+0x60>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	490a      	ldr	r1, [pc, #40]	; (8005bd0 <microrl_registerExecuteFunc+0x64>)
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]

	terminalFuncArrayIndex++;
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <microrl_registerExecuteFunc+0x60>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4a03      	ldr	r2, [pc, #12]	; (8005bcc <microrl_registerExecuteFunc+0x60>)
 8005bc0:	6013      	str	r3, [r2, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	2000033c 	.word	0x2000033c
 8005bd0:	20008928 	.word	0x20008928

08005bd4 <microrl_printString>:
//=======================================================================================
void microrl_printString(const char *str)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	microrl_sendString(str);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fe57 	bl	8006890 <MICRORL_UART_SendString>
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <microrl_printStringWithEndl>:
//=======================================================================================
void microrl_printStringWithEndl(const char *str)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	microrl_sendString(str);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fe4b 	bl	8006890 <MICRORL_UART_SendString>
	microrl_sendString(ENDL);
 8005bfa:	4803      	ldr	r0, [pc, #12]	; (8005c08 <microrl_printStringWithEndl+0x1c>)
 8005bfc:	f000 fe48 	bl	8006890 <MICRORL_UART_SendString>
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	08019b7c 	.word	0x08019b7c

08005c0c <microrl_printEndl>:
//=======================================================================================
void microrl_printEndl()
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
	microrl_sendString(ENDL);
 8005c10:	4802      	ldr	r0, [pc, #8]	; (8005c1c <microrl_printEndl+0x10>)
 8005c12:	f000 fe3d 	bl	8006890 <MICRORL_UART_SendString>
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08019b7c 	.word	0x08019b7c

08005c20 <prv_registerBasicTerminalFuncs>:
//=======================================================================================
static void prv_registerBasicTerminalFuncs()
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
	microrl_registerExecuteFunc(prv_TerminalFunc_about, 	"about", 		"Version Info");
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <prv_registerBasicTerminalFuncs+0x58>)
 8005c26:	4915      	ldr	r1, [pc, #84]	; (8005c7c <prv_registerBasicTerminalFuncs+0x5c>)
 8005c28:	4815      	ldr	r0, [pc, #84]	; (8005c80 <prv_registerBasicTerminalFuncs+0x60>)
 8005c2a:	f7ff ff9f 	bl	8005b6c <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_help, 		"help", 		"View the available commands and their descriptions");
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <prv_registerBasicTerminalFuncs+0x64>)
 8005c30:	4915      	ldr	r1, [pc, #84]	; (8005c88 <prv_registerBasicTerminalFuncs+0x68>)
 8005c32:	4816      	ldr	r0, [pc, #88]	; (8005c8c <prv_registerBasicTerminalFuncs+0x6c>)
 8005c34:	f7ff ff9a 	bl	8005b6c <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_clear, 	"clear", 		"Clears the screen.");
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <prv_registerBasicTerminalFuncs+0x70>)
 8005c3a:	4916      	ldr	r1, [pc, #88]	; (8005c94 <prv_registerBasicTerminalFuncs+0x74>)
 8005c3c:	4816      	ldr	r0, [pc, #88]	; (8005c98 <prv_registerBasicTerminalFuncs+0x78>)
 8005c3e:	f7ff ff95 	bl	8005b6c <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_get, 		"get", 			"Type 'get' without parameters for help");
 8005c42:	4a16      	ldr	r2, [pc, #88]	; (8005c9c <prv_registerBasicTerminalFuncs+0x7c>)
 8005c44:	4916      	ldr	r1, [pc, #88]	; (8005ca0 <prv_registerBasicTerminalFuncs+0x80>)
 8005c46:	4817      	ldr	r0, [pc, #92]	; (8005ca4 <prv_registerBasicTerminalFuncs+0x84>)
 8005c48:	f7ff ff90 	bl	8005b6c <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_set, 		"set", 			"Type 'set' without parameters for help");
 8005c4c:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <prv_registerBasicTerminalFuncs+0x88>)
 8005c4e:	4917      	ldr	r1, [pc, #92]	; (8005cac <prv_registerBasicTerminalFuncs+0x8c>)
 8005c50:	4817      	ldr	r0, [pc, #92]	; (8005cb0 <prv_registerBasicTerminalFuncs+0x90>)
 8005c52:	f7ff ff8b 	bl	8005b6c <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_reset,		"reset", 		"Type 'reset' without parameters for help");
 8005c56:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <prv_registerBasicTerminalFuncs+0x94>)
 8005c58:	4917      	ldr	r1, [pc, #92]	; (8005cb8 <prv_registerBasicTerminalFuncs+0x98>)
 8005c5a:	4818      	ldr	r0, [pc, #96]	; (8005cbc <prv_registerBasicTerminalFuncs+0x9c>)
 8005c5c:	f7ff ff86 	bl	8005b6c <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_calibrate, "calibrate", 	"Calibrate compass");
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <prv_registerBasicTerminalFuncs+0xa0>)
 8005c62:	4918      	ldr	r1, [pc, #96]	; (8005cc4 <prv_registerBasicTerminalFuncs+0xa4>)
 8005c64:	4818      	ldr	r0, [pc, #96]	; (8005cc8 <prv_registerBasicTerminalFuncs+0xa8>)
 8005c66:	f7ff ff81 	bl	8005b6c <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_pwroff,    "pwroff", 		"Unlock main power switch to gracefull shutdown");
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <prv_registerBasicTerminalFuncs+0xac>)
 8005c6c:	4918      	ldr	r1, [pc, #96]	; (8005cd0 <prv_registerBasicTerminalFuncs+0xb0>)
 8005c6e:	4819      	ldr	r0, [pc, #100]	; (8005cd4 <prv_registerBasicTerminalFuncs+0xb4>)
 8005c70:	f7ff ff7c 	bl	8005b6c <microrl_registerExecuteFunc>
}
 8005c74:	bf00      	nop
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	08019b80 	.word	0x08019b80
 8005c7c:	08019b90 	.word	0x08019b90
 8005c80:	08005e41 	.word	0x08005e41
 8005c84:	08019b98 	.word	0x08019b98
 8005c88:	08019bcc 	.word	0x08019bcc
 8005c8c:	080062cd 	.word	0x080062cd
 8005c90:	08019bd4 	.word	0x08019bd4
 8005c94:	08019be8 	.word	0x08019be8
 8005c98:	08005ed9 	.word	0x08005ed9
 8005c9c:	08019bf0 	.word	0x08019bf0
 8005ca0:	08019c18 	.word	0x08019c18
 8005ca4:	08005f01 	.word	0x08005f01
 8005ca8:	08019c1c 	.word	0x08019c1c
 8005cac:	08019c44 	.word	0x08019c44
 8005cb0:	0800658d 	.word	0x0800658d
 8005cb4:	08019c48 	.word	0x08019c48
 8005cb8:	08019c74 	.word	0x08019c74
 8005cbc:	0800647d 	.word	0x0800647d
 8005cc0:	08019c7c 	.word	0x08019c7c
 8005cc4:	08019c90 	.word	0x08019c90
 8005cc8:	08005ec1 	.word	0x08005ec1
 8005ccc:	08019c9c 	.word	0x08019c9c
 8005cd0:	08019ccc 	.word	0x08019ccc
 8005cd4:	0800643d 	.word	0x0800643d

08005cd8 <prv_getFuncArrayIndex>:
//=======================================================================================
int prv_getFuncArrayIndex(const char * name)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e013      	b.n	8005d0e <prv_getFuncArrayIndex+0x36>
		if (strcmp(name, terminalFuncArray[i].name) == 0)	{
 8005ce6:	490f      	ldr	r1, [pc, #60]	; (8005d24 <prv_getFuncArrayIndex+0x4c>)
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4613      	mov	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fa fa41 	bl	8000180 <strcmp>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <prv_getFuncArrayIndex+0x30>
			return i;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	e009      	b.n	8005d1c <prv_getFuncArrayIndex+0x44>
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <prv_getFuncArrayIndex+0x50>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	dbe6      	blt.n	8005ce6 <prv_getFuncArrayIndex+0xe>
		}
	}
	return (-1);
 8005d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20008928 	.word	0x20008928
 8005d28:	2000033c 	.word	0x2000033c

08005d2c <prv_execute>:
//=======================================================================================
static int prv_execute(int argc, const char * const * argv)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	int funcIndex;

	funcIndex = prv_getFuncArrayIndex(argv[0]);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff ffcc 	bl	8005cd8 <prv_getFuncArrayIndex>
 8005d40:	60f8      	str	r0, [r7, #12]
	if (funcIndex == (-1))	{
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d105      	bne.n	8005d56 <prv_execute+0x2a>
		microrl_printStringWithEndl("Unknown command. Type \"help\" to see available commands");
 8005d4a:	480e      	ldr	r0, [pc, #56]	; (8005d84 <prv_execute+0x58>)
 8005d4c:	f7ff ff4e 	bl	8005bec <microrl_printStringWithEndl>
		return (-1);
 8005d50:	f04f 33ff 	mov.w	r3, #4294967295
 8005d54:	e012      	b.n	8005d7c <prv_execute+0x50>
	}
	return terminalFuncArray[funcIndex].func(--argc, ++argv);
 8005d56:	490c      	ldr	r1, [pc, #48]	; (8005d88 <prv_execute+0x5c>)
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3308      	adds	r3, #8
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	3a01      	subs	r2, #1
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	3204      	adds	r2, #4
 8005d72:	603a      	str	r2, [r7, #0]
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
 8005d7a:	4603      	mov	r3, r0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08019cd4 	.word	0x08019cd4
 8005d88:	20008928 	.word	0x20008928

08005d8c <prv_complet>:
//=======================================================================================
#ifdef _USE_COMPLETE
//TODO simplify this. Quite difficult.
static char ** prv_complet (int argc, const char * const * argv)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	static char * compl_world [microrlNUM_OF_TERMINAL_FUNC + 1];
	int j = 0, i;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
	compl_world[0] = NULL;
 8005d9a:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <prv_complet+0xa0>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
	if (argc == 1)	{
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d137      	bne.n	8005e16 <prv_complet+0x8a>
		char * bit = (char*)argv [argc-1];
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dac:	3b01      	subs	r3, #1
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	4413      	add	r3, r2
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < terminalFuncArrayIndex; i++) {
 8005db8:	2300      	movs	r3, #0
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	e026      	b.n	8005e0c <prv_complet+0x80>
			if (strstr(terminalFuncArray[i].name, bit) == terminalFuncArray[i].name) {
 8005dbe:	491c      	ldr	r1, [pc, #112]	; (8005e30 <prv_complet+0xa4>)
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f00f fe90 	bl	8015af6 <strstr>
 8005dd6:	4916      	ldr	r1, [pc, #88]	; (8005e30 <prv_complet+0xa4>)
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4298      	cmp	r0, r3
 8005de8:	d10d      	bne.n	8005e06 <prv_complet+0x7a>
				compl_world [j++] = (char*)(terminalFuncArray[i].name);
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	1c53      	adds	r3, r2, #1
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	480f      	ldr	r0, [pc, #60]	; (8005e30 <prv_complet+0xa4>)
 8005df2:	6939      	ldr	r1, [r7, #16]
 8005df4:	460b      	mov	r3, r1
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	440b      	add	r3, r1
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4403      	add	r3, r0
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	490a      	ldr	r1, [pc, #40]	; (8005e2c <prv_complet+0xa0>)
 8005e02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		for (i = 0; i < terminalFuncArrayIndex; i++) {
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <prv_complet+0xa8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	dbd3      	blt.n	8005dbe <prv_complet+0x32>
			}
		}
	}
	compl_world [j] = NULL;
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <prv_complet+0xa0>)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return compl_world;
 8005e20:	4b02      	ldr	r3, [pc, #8]	; (8005e2c <prv_complet+0xa0>)
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000340 	.word	0x20000340
 8005e30:	20008928 	.word	0x20008928
 8005e34:	2000033c 	.word	0x2000033c

08005e38 <prv_sigint>:
#endif
//=======================================================================================
#ifdef _USE_CTLR_C
static void prv_sigint (void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8005e3c:	f7ff fe3e 	bl	8005abc <__NVIC_SystemReset>

08005e40 <prv_TerminalFunc_about>:
//	microrl_printStringWithEndl(MICRORL_LIB_VER);
//	return 0;
//}
//=======================================================================================
int prv_TerminalFunc_about(int argc, const char * const * argv)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	UNUSED(argc);
	UNUSED(argv);
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);								// ждем пока не освободиться порт терминала на передачу
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <prv_TerminalFunc_about+0x60>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00b f9be 	bl	80111d4 <osMutexAcquire>
 8005e58:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d119      	bne.n	8005e94 <prv_TerminalFunc_about+0x54>
	{
		microrl_printString("Medogonka. Version: ");
 8005e60:	4810      	ldr	r0, [pc, #64]	; (8005ea4 <prv_TerminalFunc_about+0x64>)
 8005e62:	f7ff feb7 	bl	8005bd4 <microrl_printString>
		microrl_printString(FIRMWARE_VER);
 8005e66:	4810      	ldr	r0, [pc, #64]	; (8005ea8 <prv_TerminalFunc_about+0x68>)
 8005e68:	f7ff feb4 	bl	8005bd4 <microrl_printString>
		microrl_printString("  ( ");
 8005e6c:	480f      	ldr	r0, [pc, #60]	; (8005eac <prv_TerminalFunc_about+0x6c>)
 8005e6e:	f7ff feb1 	bl	8005bd4 <microrl_printString>
		microrl_printString(__DATE__);
 8005e72:	480f      	ldr	r0, [pc, #60]	; (8005eb0 <prv_TerminalFunc_about+0x70>)
 8005e74:	f7ff feae 	bl	8005bd4 <microrl_printString>
		microrl_printString("  ");
 8005e78:	480e      	ldr	r0, [pc, #56]	; (8005eb4 <prv_TerminalFunc_about+0x74>)
 8005e7a:	f7ff feab 	bl	8005bd4 <microrl_printString>
		microrl_printString(__TIME__);
 8005e7e:	480e      	ldr	r0, [pc, #56]	; (8005eb8 <prv_TerminalFunc_about+0x78>)
 8005e80:	f7ff fea8 	bl	8005bd4 <microrl_printString>
		microrl_printStringWithEndl(" )");
 8005e84:	480d      	ldr	r0, [pc, #52]	; (8005ebc <prv_TerminalFunc_about+0x7c>)
 8005e86:	f7ff feb1 	bl	8005bec <microrl_printStringWithEndl>
		osMutexRelease(MircoRL_Tx_MutexHandle);
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <prv_TerminalFunc_about+0x60>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f00b f9fe 	bl	8011290 <osMutexRelease>
	}

	return 0;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20008924 	.word	0x20008924
 8005ea4:	08019d0c 	.word	0x08019d0c
 8005ea8:	08019d24 	.word	0x08019d24
 8005eac:	08019d2c 	.word	0x08019d2c
 8005eb0:	08019d34 	.word	0x08019d34
 8005eb4:	08019d40 	.word	0x08019d40
 8005eb8:	08019d44 	.word	0x08019d44
 8005ebc:	08019d50 	.word	0x08019d50

08005ec0 <prv_TerminalFunc_calibrate>:
extern char str[255];

//=======================================================================================

int prv_TerminalFunc_calibrate(int argc, const char * const * argv)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
//			break;
//		}
//
//		osMutexRelease(MircoRL_Tx_MutexHandle);
//	}
	return 0;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
	...

08005ed8 <prv_TerminalFunc_clear>:
//=======================================================================================
#define UNUSED(x) ((void)(x))

//=======================================================================================
int prv_TerminalFunc_clear(int argc, const char * const * argv)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
	UNUSED(argc);
	UNUSED(argv);

	microrl_printString ("\033[2J");    // ESC seq for clear entire screen
 8005ee2:	4805      	ldr	r0, [pc, #20]	; (8005ef8 <prv_TerminalFunc_clear+0x20>)
 8005ee4:	f7ff fe76 	bl	8005bd4 <microrl_printString>
	microrl_printString ("\033[H");     // ESC seq for move cursor at left-top corner
 8005ee8:	4804      	ldr	r0, [pc, #16]	; (8005efc <prv_TerminalFunc_clear+0x24>)
 8005eea:	f7ff fe73 	bl	8005bd4 <microrl_printString>
	return 0;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	08019d54 	.word	0x08019d54
 8005efc:	08019d5c 	.word	0x08019d5c

08005f00 <prv_TerminalFunc_get>:

extern char str[255];

//=======================================================================================
int prv_TerminalFunc_get(int argc, const char * const * argv)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Get something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <prv_TerminalFunc_get+0x5c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f12:	4618      	mov	r0, r3
 8005f14:	f00b f95e 	bl	80111d4 <osMutexAcquire>
 8005f18:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d117      	bne.n	8005f50 <prv_TerminalFunc_get+0x50>
	{
		switch (argc)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <prv_TerminalFunc_get+0x2c>
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d003      	beq.n	8005f32 <prv_TerminalFunc_get+0x32>
 8005f2a:	e008      	b.n	8005f3e <prv_TerminalFunc_get+0x3e>
		{
		case 0:																				// если вызвали get без параметра - показать help
			prv_printHelpGet();
 8005f2c:	f000 f81a 	bl	8005f64 <prv_printHelpGet>
			break;
 8005f30:	e009      	b.n	8005f46 <prv_TerminalFunc_get+0x46>
		case 1:
			prv_TerminalFuncGetParams(argv[0]);												// реакция на параметры в get
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f866 	bl	8006008 <prv_TerminalFuncGetParams>

			break;
 8005f3c:	e003      	b.n	8005f46 <prv_TerminalFunc_get+0x46>
		default:																			// тройной уровень параметров не сделан (пока)
			microrl_printStringWithEndl("Get is available only for high-level commands, yet (Ex:  '>get gps'");
 8005f3e:	4808      	ldr	r0, [pc, #32]	; (8005f60 <prv_TerminalFunc_get+0x60>)
 8005f40:	f7ff fe54 	bl	8005bec <microrl_printStringWithEndl>
			break;
 8005f44:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <prv_TerminalFunc_get+0x5c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f00b f9a0 	bl	8011290 <osMutexRelease>
	}


	return 0;
 8005f50:	2300      	movs	r3, #0

}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20008924 	.word	0x20008924
 8005f60:	08019d60 	.word	0x08019d60

08005f64 <prv_printHelpGet>:
//=======================================================================================
void prv_printHelpGet(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у get
	microrl_printStringWithEndl("get <parameter>");
 8005f68:	4818      	ldr	r0, [pc, #96]	; (8005fcc <prv_printHelpGet+0x68>)
 8005f6a:	f7ff fe3f 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  all		- All info");
 8005f6e:	4818      	ldr	r0, [pc, #96]	; (8005fd0 <prv_printHelpGet+0x6c>)
 8005f70:	f7ff fe3c 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  bat		- Battery level");
 8005f74:	4817      	ldr	r0, [pc, #92]	; (8005fd4 <prv_printHelpGet+0x70>)
 8005f76:	f7ff fe39 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  buzzer	- Buzzer state (on|off)");
 8005f7a:	4817      	ldr	r0, [pc, #92]	; (8005fd8 <prv_printHelpGet+0x74>)
 8005f7c:	f7ff fe36 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  calbat	- Battery calibration constants");
 8005f80:	4816      	ldr	r0, [pc, #88]	; (8005fdc <prv_printHelpGet+0x78>)
 8005f82:	f7ff fe33 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  compass	- Compass (Heading, Roll, Pitch, Temperature)");
 8005f86:	4816      	ldr	r0, [pc, #88]	; (8005fe0 <prv_printHelpGet+0x7c>)
 8005f88:	f7ff fe30 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  fire		- Measure the renge by LRF & get target info");
 8005f8c:	4815      	ldr	r0, [pc, #84]	; (8005fe4 <prv_printHelpGet+0x80>)
 8005f8e:	f7ff fe2d 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  gps		- GPS/GLONASS info");
 8005f92:	4815      	ldr	r0, [pc, #84]	; (8005fe8 <prv_printHelpGet+0x84>)
 8005f94:	f7ff fe2a 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  keys		- Keyboard & encoder state");
 8005f98:	4814      	ldr	r0, [pc, #80]	; (8005fec <prv_printHelpGet+0x88>)
 8005f9a:	f7ff fe27 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  lrf		- Laser Range Finder state");
 8005f9e:	4814      	ldr	r0, [pc, #80]	; (8005ff0 <prv_printHelpGet+0x8c>)
 8005fa0:	f7ff fe24 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode		- AUTO or by requests");
 8005fa4:	4813      	ldr	r0, [pc, #76]	; (8005ff4 <prv_printHelpGet+0x90>)
 8005fa6:	f7ff fe21 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwr		- Power status");
 8005faa:	4813      	ldr	r0, [pc, #76]	; (8005ff8 <prv_printHelpGet+0x94>)
 8005fac:	f7ff fe1e 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  serial	- Device Serial Number");
 8005fb0:	4812      	ldr	r0, [pc, #72]	; (8005ffc <prv_printHelpGet+0x98>)
 8005fb2:	f7ff fe1b 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  target	- Target info (if GPS & LRF data available");
 8005fb6:	4812      	ldr	r0, [pc, #72]	; (8006000 <prv_printHelpGet+0x9c>)
 8005fb8:	f7ff fe18 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  time		- Date/Time from GPS/GLONASS [UTC]");
 8005fbc:	4811      	ldr	r0, [pc, #68]	; (8006004 <prv_printHelpGet+0xa0>)
 8005fbe:	f7ff fe15 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printEndl();
 8005fc2:	f7ff fe23 	bl	8005c0c <microrl_printEndl>
}
 8005fc6:	bf00      	nop
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	08019da4 	.word	0x08019da4
 8005fd0:	08019db4 	.word	0x08019db4
 8005fd4:	08019dc8 	.word	0x08019dc8
 8005fd8:	08019de0 	.word	0x08019de0
 8005fdc:	08019e04 	.word	0x08019e04
 8005fe0:	08019e30 	.word	0x08019e30
 8005fe4:	08019e68 	.word	0x08019e68
 8005fe8:	08019ea0 	.word	0x08019ea0
 8005fec:	08019ebc 	.word	0x08019ebc
 8005ff0:	08019ee0 	.word	0x08019ee0
 8005ff4:	08019f04 	.word	0x08019f04
 8005ff8:	08019f24 	.word	0x08019f24
 8005ffc:	08019f3c 	.word	0x08019f3c
 8006000:	08019f5c 	.word	0x08019f5c
 8006004:	08019f90 	.word	0x08019f90

08006008 <prv_TerminalFuncGetParams>:
//=======================================================================================

void prv_TerminalFuncGetParams(const char *name)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
//	microrl_printString("Command: ");
//	microrl_printStringWithEndl(name);

	if (strncmp(name, "all", 3) == 0)
 8006010:	2203      	movs	r2, #3
 8006012:	495f      	ldr	r1, [pc, #380]	; (8006190 <prv_TerminalFuncGetParams+0x188>)
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f00f fd5c 	bl	8015ad2 <strncmp>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d121      	bne.n	8006064 <prv_TerminalFuncGetParams+0x5c>
	{
		osStatus statusCMD = osMutexWait(MircoRL_TxCMD_MutexHandle, portMAX_DELAY);						// для защиты от вклинивкания в цельный блок "get all" сообщений от кнопок, энкодера и дальномера
 8006020:	4b5c      	ldr	r3, [pc, #368]	; (8006194 <prv_TerminalFuncGetParams+0x18c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f04f 31ff 	mov.w	r1, #4294967295
 8006028:	4618      	mov	r0, r3
 800602a:	f00b f8d3 	bl	80111d4 <osMutexAcquire>
 800602e:	60f8      	str	r0, [r7, #12]

	    if (statusCMD == osOK)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 80a8 	bne.w	8006188 <prv_TerminalFuncGetParams+0x180>
	    {
			TerminalPrintGet_GPS();
 8006038:	f000 f8dc 	bl	80061f4 <TerminalPrintGet_GPS>
	//		TerminalPrintGet_TIME();
			TerminalPrintGet_LRF();
 800603c:	f000 f8e6 	bl	800620c <TerminalPrintGet_LRF>
			TerminalPrintGet_TARGET();
 8006040:	f000 f8ea 	bl	8006218 <TerminalPrintGet_TARGET>
			TerminalPrintGet_COMPASS();
 8006044:	f000 f8ca 	bl	80061dc <TerminalPrintGet_COMPASS>
			TerminalPrintGet_KEYS();
 8006048:	f000 f8ce 	bl	80061e8 <TerminalPrintGet_KEYS>
			TerminalPrintGet_PWR();
 800604c:	f000 f8c0 	bl	80061d0 <TerminalPrintGet_PWR>
			TerminalPrintGet_BAT();
 8006050:	f000 f916 	bl	8006280 <TerminalPrintGet_BAT>
			TerminalPrintGet_MODE();
 8006054:	f000 f8ec 	bl	8006230 <TerminalPrintGet_MODE>

			osMutexRelease(MircoRL_TxCMD_MutexHandle);
 8006058:	4b4e      	ldr	r3, [pc, #312]	; (8006194 <prv_TerminalFuncGetParams+0x18c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f00b f917 	bl	8011290 <osMutexRelease>
//	}
//	else
//	{
//		microrl_printStringWithEndl("Help is not available for this command.");
//	}
}
 8006062:	e091      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "pwr", 3) == 0)
 8006064:	2203      	movs	r2, #3
 8006066:	494c      	ldr	r1, [pc, #304]	; (8006198 <prv_TerminalFuncGetParams+0x190>)
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f00f fd32 	bl	8015ad2 <strncmp>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <prv_TerminalFuncGetParams+0x72>
		TerminalPrintGet_PWR();
 8006074:	f000 f8ac 	bl	80061d0 <TerminalPrintGet_PWR>
}
 8006078:	e086      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "bat", 3) == 0)
 800607a:	2203      	movs	r2, #3
 800607c:	4947      	ldr	r1, [pc, #284]	; (800619c <prv_TerminalFuncGetParams+0x194>)
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f00f fd27 	bl	8015ad2 <strncmp>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <prv_TerminalFuncGetParams+0x88>
		TerminalPrintGet_BAT();
 800608a:	f000 f8f9 	bl	8006280 <TerminalPrintGet_BAT>
}
 800608e:	e07b      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "calbat", 6) == 0)
 8006090:	2206      	movs	r2, #6
 8006092:	4943      	ldr	r1, [pc, #268]	; (80061a0 <prv_TerminalFuncGetParams+0x198>)
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f00f fd1c 	bl	8015ad2 <strncmp>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <prv_TerminalFuncGetParams+0x9e>
		TerminalPrintGet_BATCatlibration();
 80060a0:	f000 f8f4 	bl	800628c <TerminalPrintGet_BATCatlibration>
}
 80060a4:	e070      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "compass", 3) == 0)
 80060a6:	2203      	movs	r2, #3
 80060a8:	493e      	ldr	r1, [pc, #248]	; (80061a4 <prv_TerminalFuncGetParams+0x19c>)
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f00f fd11 	bl	8015ad2 <strncmp>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <prv_TerminalFuncGetParams+0xb4>
		TerminalPrintGet_COMPASS();
 80060b6:	f000 f891 	bl	80061dc <TerminalPrintGet_COMPASS>
}
 80060ba:	e065      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "keys", 3) == 0)
 80060bc:	2203      	movs	r2, #3
 80060be:	493a      	ldr	r1, [pc, #232]	; (80061a8 <prv_TerminalFuncGetParams+0x1a0>)
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f00f fd06 	bl	8015ad2 <strncmp>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <prv_TerminalFuncGetParams+0xca>
		TerminalPrintGet_KEYS();
 80060cc:	f000 f88c 	bl	80061e8 <TerminalPrintGet_KEYS>
}
 80060d0:	e05a      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "gps", 3) == 0)
 80060d2:	2203      	movs	r2, #3
 80060d4:	4935      	ldr	r1, [pc, #212]	; (80061ac <prv_TerminalFuncGetParams+0x1a4>)
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f00f fcfb 	bl	8015ad2 <strncmp>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <prv_TerminalFuncGetParams+0xe0>
		TerminalPrintGet_GPS();
 80060e2:	f000 f887 	bl	80061f4 <TerminalPrintGet_GPS>
}
 80060e6:	e04f      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "time", 3) == 0)
 80060e8:	2203      	movs	r2, #3
 80060ea:	4931      	ldr	r1, [pc, #196]	; (80061b0 <prv_TerminalFuncGetParams+0x1a8>)
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f00f fcf0 	bl	8015ad2 <strncmp>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <prv_TerminalFuncGetParams+0xf6>
		TerminalPrintGet_TIME();
 80060f8:	f000 f882 	bl	8006200 <TerminalPrintGet_TIME>
}
 80060fc:	e044      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "lrf", 3) == 0)
 80060fe:	2203      	movs	r2, #3
 8006100:	492c      	ldr	r1, [pc, #176]	; (80061b4 <prv_TerminalFuncGetParams+0x1ac>)
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f00f fce5 	bl	8015ad2 <strncmp>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <prv_TerminalFuncGetParams+0x10c>
		TerminalPrintGet_LRF();
 800610e:	f000 f87d 	bl	800620c <TerminalPrintGet_LRF>
}
 8006112:	e039      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "fire", 3) == 0)
 8006114:	2203      	movs	r2, #3
 8006116:	4928      	ldr	r1, [pc, #160]	; (80061b8 <prv_TerminalFuncGetParams+0x1b0>)
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f00f fcda 	bl	8015ad2 <strncmp>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <prv_TerminalFuncGetParams+0x122>
		TerminalPrintGet_FIRE();
 8006124:	f000 f87e 	bl	8006224 <TerminalPrintGet_FIRE>
}
 8006128:	e02e      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "target", 3) == 0)
 800612a:	2203      	movs	r2, #3
 800612c:	4923      	ldr	r1, [pc, #140]	; (80061bc <prv_TerminalFuncGetParams+0x1b4>)
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f00f fccf 	bl	8015ad2 <strncmp>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d102      	bne.n	8006140 <prv_TerminalFuncGetParams+0x138>
		TerminalPrintGet_TARGET();
 800613a:	f000 f86d 	bl	8006218 <TerminalPrintGet_TARGET>
}
 800613e:	e023      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "mode", 3) == 0)
 8006140:	2203      	movs	r2, #3
 8006142:	491f      	ldr	r1, [pc, #124]	; (80061c0 <prv_TerminalFuncGetParams+0x1b8>)
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f00f fcc4 	bl	8015ad2 <strncmp>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <prv_TerminalFuncGetParams+0x14e>
		TerminalPrintGet_MODE();
 8006150:	f000 f86e 	bl	8006230 <TerminalPrintGet_MODE>
}
 8006154:	e018      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "serial", 3) == 0)
 8006156:	2203      	movs	r2, #3
 8006158:	491a      	ldr	r1, [pc, #104]	; (80061c4 <prv_TerminalFuncGetParams+0x1bc>)
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f00f fcb9 	bl	8015ad2 <strncmp>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <prv_TerminalFuncGetParams+0x164>
		TerminalPrintGet_SERIAL();
 8006166:	f000 f87d 	bl	8006264 <TerminalPrintGet_SERIAL>
}
 800616a:	e00d      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "buzzer", 3) == 0)
 800616c:	2203      	movs	r2, #3
 800616e:	4916      	ldr	r1, [pc, #88]	; (80061c8 <prv_TerminalFuncGetParams+0x1c0>)
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f00f fcae 	bl	8015ad2 <strncmp>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <prv_TerminalFuncGetParams+0x17a>
		TerminalPrintGet_BUZZER();
 800617c:	f000 f88c 	bl	8006298 <TerminalPrintGet_BUZZER>
}
 8006180:	e002      	b.n	8006188 <prv_TerminalFuncGetParams+0x180>
		microrl_printStringWithEndl("Unknown parameter for command 'GET'");
 8006182:	4812      	ldr	r0, [pc, #72]	; (80061cc <prv_TerminalFuncGetParams+0x1c4>)
 8006184:	f7ff fd32 	bl	8005bec <microrl_printStringWithEndl>
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	08019fbc 	.word	0x08019fbc
 8006194:	20008a90 	.word	0x20008a90
 8006198:	08019fc0 	.word	0x08019fc0
 800619c:	08019fc4 	.word	0x08019fc4
 80061a0:	08019fc8 	.word	0x08019fc8
 80061a4:	08019fd0 	.word	0x08019fd0
 80061a8:	08019fd8 	.word	0x08019fd8
 80061ac:	08019fe0 	.word	0x08019fe0
 80061b0:	08019fe4 	.word	0x08019fe4
 80061b4:	08019fec 	.word	0x08019fec
 80061b8:	08019ff0 	.word	0x08019ff0
 80061bc:	08019ff8 	.word	0x08019ff8
 80061c0:	0801a000 	.word	0x0801a000
 80061c4:	0801a008 	.word	0x0801a008
 80061c8:	0801a010 	.word	0x0801a010
 80061cc:	0801a018 	.word	0x0801a018

080061d0 <TerminalPrintGet_PWR>:
//=======================================================================================


//=======================================================================================
void TerminalPrintGet_PWR(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
//	sprintf(str, "PWR_EOP=%s\n", 		((ExchangeStruct.Power_State->EN_EOP 	 == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_ENCODER=%s\n", 	((ExchangeStruct.Power_State->EN_ENCODER  == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_CPU=%s\n", 	 	((ExchangeStruct.Power_State->EN_MAIN_CPU == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_CPLD=%s\n",	 	((ExchangeStruct.Power_State->EN_CPLD     == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	TerminalPrintGet_PWRSource();
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <TerminalPrintGet_COMPASS>:
//	}
}
//=======================================================================================

void TerminalPrintGet_COMPASS(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
//	sprintf(str, "COMPASS_HEADING=%+3.1f\n", 		ExchangeStruct.HMC6343_ResultAll->Heading );		microrl_printString(str);
//	sprintf(str, "COMPASS_ROLL=%+3.1f\n", 			ExchangeStruct.HMC6343_ResultAll->Roll );		microrl_printString(str);
//	sprintf(str, "COMPASS_PITCH=%+3.1f\n", 			ExchangeStruct.HMC6343_ResultAll->Pitch );		microrl_printString(str);
//	sprintf(str, "COMPASS_TEMPERATURE=%+3.1f\n", 	ExchangeStruct.HMC6343_ResultAll->Temperature );	microrl_printString(str);

}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <TerminalPrintGet_KEYS>:
//=======================================================================================
void TerminalPrintGet_KEYS(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
//	sprintf(str, "STATE=0x%04X\n", ExchangeStruct.Keys_State->Buttons);																microrl_printString(str);
//	//sprintf(str, "ENCODER_VAL=%d\n", 				(int8_t)(MP_ExchangeStruct.Encoder_State->MP_Encoder_Value - ENCODER_VAL_DEFAULT));	microrl_printString(str);
//	sprintf(str, "ENCODER_VAL=%u\n", 				(uint8_t)(ExchangeStruct.Encoder_State->MP_Encoder_Value));						microrl_printString(str);
//	sprintf(str, "ENCODER_DIR=%lu\n", 				ExchangeStruct.Encoder_State->MP_Encoder_Dir);									microrl_printString(str);
//	sprintf(str, "ENCODER_DELTA=%d\n", 				(int8_t)ExchangeStruct.Encoder_State->MP_Encoder_Delta);							microrl_printString(str);
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <TerminalPrintGet_GPS>:
//=======================================================================================
void TerminalPrintGet_GPS(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
//	// Количество спутников [используемых/всего]
//	sprintf(str, "GPS_SATS_ALL_INUSE=%02d\n", ExchangeStruct.GPS_info->satinuse);microrl_printString(str); //GPS+GLONASS - будет показывать больше чем 12
//	sprintf(str, "GPS_SATS_ALL_INVIEW=%02d\n", ExchangeStruct.GPS_info->satinfo.inview);microrl_printString(str);
//	//sprintf(str, "GPS_SATS_ALL_INVIEW=%02d\n", 24);microrl_printString(str);
//
}
 80061f8:	bf00      	nop
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <TerminalPrintGet_TIME>:
//=======================================================================================
void TerminalPrintGet_TIME(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
//	microrl_printStringWithEndl("TIME by GPS/GLONASS:");
//	sprintf(str, "GPS_DATE = %04d-%02d-%02d\nGPS_TIME =   %02d:%02d:%02d\n", 1900 + ExchangeStruct.GPS_info->utc.year, GPS_info.utc.mon, ExchangeStruct.GPS_info->utc.day, ExchangeStruct.GPS_info->utc.hour + TIME_ZONE, ExchangeStruct.GPS_info->utc.min, ExchangeStruct.GPS_info->utc.sec);
//	microrl_printStringWithEndl(str);
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <TerminalPrintGet_LRF>:
//=======================================================================================
void TerminalPrintGet_LRF(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
//	sprintf(str, "LRF_TARGET_DIST_LAST=%d\n", ExchangeStruct.LRF1502_State->Target1Last);			microrl_printString(str);
//	sprintf(str, "LRF_TARGET_NUM=%d\n", ExchangeStruct.LRF1502_State->TargetsNum);					microrl_printString(str);
//	sprintf(str, "LRF_TARGET_DIST=%d\n", ExchangeStruct.LRF1502_State->Target1);						microrl_printString(str);
//	sprintf(str, "LRF_NEW_DATA=%d\n", ExchangeStruct.LRF1502_State->NewDataAvailable);				microrl_printString(str);
//	sprintf(str, "LRF_SHOTS_COUNT=%lu\n", ExchangeStruct.LRF1502_Maintenance->ShotCount);			microrl_printString(str);
}
 8006210:	bf00      	nop
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <TerminalPrintGet_TARGET>:
//=======================================================================================
void TerminalPrintGet_TARGET(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
//
////		sprintf(str, "POSN=%2.8fN %03.8fE\n", Degrees(pt1[0]), Degrees(pt1[1]));  						microrl_printString(str);		// Google, YandexMaps
////		sprintf(str, "TARG=%2.8fN %03.8fE\n", Degrees(pt2[0]), Degrees(pt2[1]));  						microrl_printString(str);		// Google, YandexMaps
//
//	}
}
 800621c:	bf00      	nop
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <TerminalPrintGet_FIRE>:
//=======================================================================================
void TerminalPrintGet_FIRE(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
//	osTimerStart(LRF_POWER_TimerHandle, TIMER_LRF_POWER_TIMEOUT);						// еще раз запускаем таймер обратного отсчета для времени работы основного источника, чтобы таймаут шел уже от измерения
//	osTimerStart(LRF_HVPS_TimerHandle,  TIMER_LRF_HVPS_TIMEOUT);						// еще раз запускаем таймер обратного отсчета для времени работы HVPS, чтобы таймаут шел уже от измерения
//
//
//	TerminalPrintGet_TARGET();
}
 8006228:	bf00      	nop
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <TerminalPrintGet_MODE>:
//=======================================================================================
void TerminalPrintGet_MODE(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
	microrl_printString("MODE=");
 8006234:	4807      	ldr	r0, [pc, #28]	; (8006254 <TerminalPrintGet_MODE+0x24>)
 8006236:	f7ff fccd 	bl	8005bd4 <microrl_printString>
	if (ExchangeStruct.TerminalMode)
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <TerminalPrintGet_MODE+0x28>)
 800623c:	7a9b      	ldrb	r3, [r3, #10]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <TerminalPrintGet_MODE+0x1a>
		microrl_printStringWithEndl("COMMAND");
 8006242:	4806      	ldr	r0, [pc, #24]	; (800625c <TerminalPrintGet_MODE+0x2c>)
 8006244:	f7ff fcd2 	bl	8005bec <microrl_printStringWithEndl>
	else
		microrl_printStringWithEndl("AUTO");
}
 8006248:	e002      	b.n	8006250 <TerminalPrintGet_MODE+0x20>
		microrl_printStringWithEndl("AUTO");
 800624a:	4805      	ldr	r0, [pc, #20]	; (8006260 <TerminalPrintGet_MODE+0x30>)
 800624c:	f7ff fcce 	bl	8005bec <microrl_printStringWithEndl>
}
 8006250:	bf00      	nop
 8006252:	bd80      	pop	{r7, pc}
 8006254:	0801a03c 	.word	0x0801a03c
 8006258:	20008910 	.word	0x20008910
 800625c:	0801a044 	.word	0x0801a044
 8006260:	0801a04c 	.word	0x0801a04c

08006264 <TerminalPrintGet_SERIAL>:
//=======================================================================================
void TerminalPrintGet_SERIAL(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
	microrl_printString("SERIAL_NUMBER=");
 8006268:	4803      	ldr	r0, [pc, #12]	; (8006278 <TerminalPrintGet_SERIAL+0x14>)
 800626a:	f7ff fcb3 	bl	8005bd4 <microrl_printString>
	microrl_printStringWithEndl(ExchangeStruct.DeviceSerialNumber);
 800626e:	4803      	ldr	r0, [pc, #12]	; (800627c <TerminalPrintGet_SERIAL+0x18>)
 8006270:	f7ff fcbc 	bl	8005bec <microrl_printStringWithEndl>
}
 8006274:	bf00      	nop
 8006276:	bd80      	pop	{r7, pc}
 8006278:	0801a054 	.word	0x0801a054
 800627c:	20008910 	.word	0x20008910

08006280 <TerminalPrintGet_BAT>:
//=======================================================================================
void TerminalPrintGet_BAT(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
////		sprintf(str, "PWR_BAT_RAW=0\n"); 		microrl_printString(str);
////		sprintf(str, "PWR_BAT_VOLT=0\n"); 		microrl_printString(str);
////		sprintf(str, "PWR_BAT_CHG=0\n"); 		microrl_printString(str);
////
////	}
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr

0800628c <TerminalPrintGet_BATCatlibration>:
//=======================================================================================
void TerminalPrintGet_BATCatlibration(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
//
//	sprintf(str, "Bat cal: 3V3 =  %02.4lf\n", ExchangeStruct.Battery_State->ADC_Ref_Voltage );		microrl_printString(str);
//	sprintf(str, "Bat cal: 12V = %02.4lf\n",  ExchangeStruct.Battery_State->ADC_12V_Voltage );		microrl_printString(str);
}
 8006290:	bf00      	nop
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <TerminalPrintGet_BUZZER>:
//=======================================================================================
void TerminalPrintGet_BUZZER(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
	microrl_printString("BUZZER=");
 800629c:	4807      	ldr	r0, [pc, #28]	; (80062bc <TerminalPrintGet_BUZZER+0x24>)
 800629e:	f7ff fc99 	bl	8005bd4 <microrl_printString>
	if (BUZZER_BuzzerState)
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <TerminalPrintGet_BUZZER+0x28>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <TerminalPrintGet_BUZZER+0x1a>
		microrl_printStringWithEndl("ON");
 80062aa:	4806      	ldr	r0, [pc, #24]	; (80062c4 <TerminalPrintGet_BUZZER+0x2c>)
 80062ac:	f7ff fc9e 	bl	8005bec <microrl_printStringWithEndl>
	else
		microrl_printStringWithEndl("OFF");

}
 80062b0:	e002      	b.n	80062b8 <TerminalPrintGet_BUZZER+0x20>
		microrl_printStringWithEndl("OFF");
 80062b2:	4805      	ldr	r0, [pc, #20]	; (80062c8 <TerminalPrintGet_BUZZER+0x30>)
 80062b4:	f7ff fc9a 	bl	8005bec <microrl_printStringWithEndl>
}
 80062b8:	bf00      	nop
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	0801a064 	.word	0x0801a064
 80062c0:	20008ae8 	.word	0x20008ae8
 80062c4:	0801a06c 	.word	0x0801a06c
 80062c8:	0801a070 	.word	0x0801a070

080062cc <prv_TerminalFunc_help>:
//=======================================================================================


//=======================================================================================
int prv_TerminalFunc_help(int argc, const char * const * argv)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);				// ждем пока не освободиться порт терминала на передачу
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <prv_TerminalFunc_help+0x5c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f04f 31ff 	mov.w	r1, #4294967295
 80062de:	4618      	mov	r0, r3
 80062e0:	f00a ff78 	bl	80111d4 <osMutexAcquire>
 80062e4:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d117      	bne.n	800631c <prv_TerminalFunc_help+0x50>
	{
		switch (argc)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <prv_TerminalFunc_help+0x2c>
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d003      	beq.n	80062fe <prv_TerminalFunc_help+0x32>
 80062f6:	e008      	b.n	800630a <prv_TerminalFunc_help+0x3e>
		{
		case 0:
			prv_printMainHelp();
 80062f8:	f000 f81a 	bl	8006330 <prv_printMainHelp>
			break;
 80062fc:	e009      	b.n	8006312 <prv_TerminalFunc_help+0x46>
		case 1:
			prv_printTerminalFuncHelp(argv[0]);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f866 	bl	80063d4 <prv_printTerminalFuncHelp>
			break;
 8006308:	e003      	b.n	8006312 <prv_TerminalFunc_help+0x46>
		default:
			microrl_printStringWithEndl("Help is available only for high-level commands. It isn't available for subcommands.");
 800630a:	4808      	ldr	r0, [pc, #32]	; (800632c <prv_TerminalFunc_help+0x60>)
 800630c:	f7ff fc6e 	bl	8005bec <microrl_printStringWithEndl>
			break;
 8006310:	bf00      	nop
		}
		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <prv_TerminalFunc_help+0x5c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f00a ffba 	bl	8011290 <osMutexRelease>
	}

	return 0;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20008924 	.word	0x20008924
 800632c:	0801a074 	.word	0x0801a074

08006330 <prv_printMainHelp>:
//=======================================================================================
void prv_printMainHelp()
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
	microrl_printStringWithEndl("Hint: Use <TAB> key for auto-completion");
 8006336:	481f      	ldr	r0, [pc, #124]	; (80063b4 <prv_printMainHelp+0x84>)
 8006338:	f7ff fc58 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("Hint: Use <Ctrl+C> keys to system reset");
 800633c:	481e      	ldr	r0, [pc, #120]	; (80063b8 <prv_printMainHelp+0x88>)
 800633e:	f7ff fc55 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("Type \"help\" <command> for more details.");
 8006342:	481e      	ldr	r0, [pc, #120]	; (80063bc <prv_printMainHelp+0x8c>)
 8006344:	f7ff fc52 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printEndl();
 8006348:	f7ff fc60 	bl	8005c0c <microrl_printEndl>
	microrl_printStringWithEndl("Available commands:");
 800634c:	481c      	ldr	r0, [pc, #112]	; (80063c0 <prv_printMainHelp+0x90>)
 800634e:	f7ff fc4d 	bl	8005bec <microrl_printStringWithEndl>
	int i;
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8006352:	2300      	movs	r3, #0
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	e021      	b.n	800639c <prv_printMainHelp+0x6c>
		microrl_printString("  ");
 8006358:	481a      	ldr	r0, [pc, #104]	; (80063c4 <prv_printMainHelp+0x94>)
 800635a:	f7ff fc3b 	bl	8005bd4 <microrl_printString>
		microrl_printString(terminalFuncArray[i].name);
 800635e:	491a      	ldr	r1, [pc, #104]	; (80063c8 <prv_printMainHelp+0x98>)
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fc30 	bl	8005bd4 <microrl_printString>
		microrl_printString("\033[20G");												//  подвинуть курсор в 20ю позицию текущей строки (https://www.opennet.ru/base/dev/console_ctl.txt.html)
 8006374:	4815      	ldr	r0, [pc, #84]	; (80063cc <prv_printMainHelp+0x9c>)
 8006376:	f7ff fc2d 	bl	8005bd4 <microrl_printString>
		microrl_printString(terminalFuncArray[i].help);
 800637a:	4913      	ldr	r1, [pc, #76]	; (80063c8 <prv_printMainHelp+0x98>)
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3304      	adds	r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fc21 	bl	8005bd4 <microrl_printString>
		microrl_printEndl();
 8006392:	f7ff fc3b 	bl	8005c0c <microrl_printEndl>
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3301      	adds	r3, #1
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <prv_printMainHelp+0xa0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	dbd8      	blt.n	8006358 <prv_printMainHelp+0x28>
		//microrl_printString(" ");
	}
	microrl_printEndl();
 80063a6:	f7ff fc31 	bl	8005c0c <microrl_printEndl>
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	0801a0c8 	.word	0x0801a0c8
 80063b8:	0801a0f0 	.word	0x0801a0f0
 80063bc:	0801a118 	.word	0x0801a118
 80063c0:	0801a140 	.word	0x0801a140
 80063c4:	0801a154 	.word	0x0801a154
 80063c8:	20008928 	.word	0x20008928
 80063cc:	0801a158 	.word	0x0801a158
 80063d0:	2000033c 	.word	0x2000033c

080063d4 <prv_printTerminalFuncHelp>:
//=======================================================================================
void prv_printTerminalFuncHelp(const char *name)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	int funcIndex = prv_getFuncArrayIndex(name);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fc7b 	bl	8005cd8 <prv_getFuncArrayIndex>
 80063e2:	60f8      	str	r0, [r7, #12]
	if (funcIndex == (-1))	{
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d103      	bne.n	80063f4 <prv_printTerminalFuncHelp+0x20>
		microrl_printStringWithEndl("Command not found.");
 80063ec:	4810      	ldr	r0, [pc, #64]	; (8006430 <prv_printTerminalFuncHelp+0x5c>)
 80063ee:	f7ff fbfd 	bl	8005bec <microrl_printStringWithEndl>
		return;
 80063f2:	e01a      	b.n	800642a <prv_printTerminalFuncHelp+0x56>
	}
	if (terminalFuncArray[funcIndex].help != NULL)	{
 80063f4:	490f      	ldr	r1, [pc, #60]	; (8006434 <prv_printTerminalFuncHelp+0x60>)
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	3304      	adds	r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00c      	beq.n	8006424 <prv_printTerminalFuncHelp+0x50>
		microrl_printStringWithEndl(terminalFuncArray[funcIndex].help);
 800640a:	490a      	ldr	r1, [pc, #40]	; (8006434 <prv_printTerminalFuncHelp+0x60>)
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4613      	mov	r3, r2
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3304      	adds	r3, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fbe5 	bl	8005bec <microrl_printStringWithEndl>
 8006422:	e002      	b.n	800642a <prv_printTerminalFuncHelp+0x56>
	}
	else	{
		microrl_printStringWithEndl("Help is not available for this command.");
 8006424:	4804      	ldr	r0, [pc, #16]	; (8006438 <prv_printTerminalFuncHelp+0x64>)
 8006426:	f7ff fbe1 	bl	8005bec <microrl_printStringWithEndl>
	}
}
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	0801a160 	.word	0x0801a160
 8006434:	20008928 	.word	0x20008928
 8006438:	0801a174 	.word	0x0801a174

0800643c <prv_TerminalFunc_pwroff>:
#include "FreeRTOSUser.h"
//#include "MP_Power.h"

//=======================================================================================
int prv_TerminalFunc_pwroff(int argc, const char * const * argv)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
//
//		osMutexRelease(MircoRL_Tx_MutexHandle);
//	}
//
//
	return 0;
 8006446:	2300      	movs	r3, #0

}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
	...

08006454 <__NVIC_SystemReset>:
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
 8006458:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <__NVIC_SystemReset+0x20>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006464:	4903      	ldr	r1, [pc, #12]	; (8006474 <__NVIC_SystemReset+0x20>)
 8006466:	4b04      	ldr	r3, [pc, #16]	; (8006478 <__NVIC_SystemReset+0x24>)
 8006468:	4313      	orrs	r3, r2
 800646a:	60cb      	str	r3, [r1, #12]
 800646c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006470:	bf00      	nop
 8006472:	e7fd      	b.n	8006470 <__NVIC_SystemReset+0x1c>
 8006474:	e000ed00 	.word	0xe000ed00
 8006478:	05fa0004 	.word	0x05fa0004

0800647c <prv_TerminalFunc_reset>:



//=======================================================================================
int prv_TerminalFunc_reset(int argc, const char * const * argv)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Set something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 8006486:	4b19      	ldr	r3, [pc, #100]	; (80064ec <prv_TerminalFunc_reset+0x70>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f04f 31ff 	mov.w	r1, #4294967295
 800648e:	4618      	mov	r0, r3
 8006490:	f00a fea0 	bl	80111d4 <osMutexAcquire>
 8006494:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d122      	bne.n	80064e2 <prv_TerminalFunc_reset+0x66>
	{
		switch (argc)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d006      	beq.n	80064b0 <prv_TerminalFunc_reset+0x34>
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d00a      	beq.n	80064bc <prv_TerminalFunc_reset+0x40>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d112      	bne.n	80064d0 <prv_TerminalFunc_reset+0x54>
		{
		case 0:																				// если вызвали reset без параметра - показать help
			prv_printHelpReset();
 80064aa:	f000 f823 	bl	80064f4 <prv_printHelpReset>
			break;
 80064ae:	e013      	b.n	80064d8 <prv_TerminalFunc_reset+0x5c>
		case 1:
			prv_TerminalFuncResetParams(argv[0]);											// реакция на параметры в reset
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f82d 	bl	8006514 <prv_TerminalFuncResetParams>
			break;
 80064ba:	e00d      	b.n	80064d8 <prv_TerminalFunc_reset+0x5c>
		case 2:
			prv_TerminalFuncResetParamsArg(argv[0], argv[1]);								// реакция на параметры с 1 аргументом в set
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	3304      	adds	r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f000 f855 	bl	8006578 <prv_TerminalFuncResetParamsArg>
			break;
 80064ce:	e003      	b.n	80064d8 <prv_TerminalFunc_reset+0x5c>
		default:																			// двойной уровень параметров не сделан
			microrl_printStringWithEndl("Reset is available only for 1-level commands, yet (Ex:  '>reset all', '>reset gps'");
 80064d0:	4807      	ldr	r0, [pc, #28]	; (80064f0 <prv_TerminalFunc_reset+0x74>)
 80064d2:	f7ff fb8b 	bl	8005bec <microrl_printStringWithEndl>
			break;
 80064d6:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 80064d8:	4b04      	ldr	r3, [pc, #16]	; (80064ec <prv_TerminalFunc_reset+0x70>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f00a fed7 	bl	8011290 <osMutexRelease>
	}


	return 0;
 80064e2:	2300      	movs	r3, #0

}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20008924 	.word	0x20008924
 80064f0:	0801a19c 	.word	0x0801a19c

080064f4 <prv_printHelpReset>:
//=======================================================================================
void prv_printHelpReset(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у set
	microrl_printStringWithEndl("reset <parameter>");
 80064f8:	4804      	ldr	r0, [pc, #16]	; (800650c <prv_printHelpReset+0x18>)
 80064fa:	f7ff fb77 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  all           - reset periferial cpu (STM)");
 80064fe:	4804      	ldr	r0, [pc, #16]	; (8006510 <prv_printHelpReset+0x1c>)
 8006500:	f7ff fb74 	bl	8005bec <microrl_printStringWithEndl>
//	microrl_printStringWithEndl("  cpu           - reset main CPU");
//	microrl_printStringWithEndl("  gps           - reset GPS receiver");
	microrl_printEndl();
 8006504:	f7ff fb82 	bl	8005c0c <microrl_printEndl>
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}
 800650c:	0801a1f0 	.word	0x0801a1f0
 8006510:	0801a204 	.word	0x0801a204

08006514 <prv_TerminalFuncResetParams>:
//=======================================================================================
void prv_TerminalFuncResetParams(const char *name)									// set для 1 параметра
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	UNUSED(name);
//	microrl_printString("Command: ");
//	microrl_printStringWithEndl(name);

	if (strncmp(name, "all", 3) == 0)
 800651c:	2203      	movs	r2, #3
 800651e:	4912      	ldr	r1, [pc, #72]	; (8006568 <prv_TerminalFuncResetParams+0x54>)
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f00f fad6 	bl	8015ad2 <strncmp>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <prv_TerminalFuncResetParams+0x1c>
	{
		NVIC_SystemReset();
 800652c:	f7ff ff92 	bl	8006454 <__NVIC_SystemReset>
	}
	else if (strncmp(name, "gps", 3) == 0)
 8006530:	2203      	movs	r2, #3
 8006532:	490e      	ldr	r1, [pc, #56]	; (800656c <prv_TerminalFuncResetParams+0x58>)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f00f facc 	bl	8015ad2 <strncmp>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d103      	bne.n	8006548 <prv_TerminalFuncResetParams+0x34>
	{
		microrl_printStringWithEndl("not realised yet");
 8006540:	480b      	ldr	r0, [pc, #44]	; (8006570 <prv_TerminalFuncResetParams+0x5c>)
 8006542:	f7ff fb53 	bl	8005bec <microrl_printStringWithEndl>
//	else if (strncmp(name, "serial", 3) == 0)
//		TerminalPrintGet_SERIAL();
//	else
//		microrl_printStringWithEndl("Unknown parameter for command 'GET'");

}
 8006546:	e00a      	b.n	800655e <prv_TerminalFuncResetParams+0x4a>
	else if (strncmp(name, "cpu", 3) == 0)
 8006548:	2203      	movs	r2, #3
 800654a:	490a      	ldr	r1, [pc, #40]	; (8006574 <prv_TerminalFuncResetParams+0x60>)
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f00f fac0 	bl	8015ad2 <strncmp>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <prv_TerminalFuncResetParams+0x4a>
		microrl_printStringWithEndl("not realised yet");
 8006558:	4805      	ldr	r0, [pc, #20]	; (8006570 <prv_TerminalFuncResetParams+0x5c>)
 800655a:	f7ff fb47 	bl	8005bec <microrl_printStringWithEndl>
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	0801a234 	.word	0x0801a234
 800656c:	0801a238 	.word	0x0801a238
 8006570:	0801a23c 	.word	0x0801a23c
 8006574:	0801a250 	.word	0x0801a250

08006578 <prv_TerminalFuncResetParamsArg>:
//=======================================================================================

void prv_TerminalFuncResetParamsArg(const char *name, const char *param)			// set для 2 параметров
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]





}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr

0800658c <prv_TerminalFunc_set>:
extern char str[255];


//=======================================================================================
int prv_TerminalFunc_set(int argc, const char * const * argv)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Set something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 8006596:	4b45      	ldr	r3, [pc, #276]	; (80066ac <prv_TerminalFunc_set+0x120>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f04f 31ff 	mov.w	r1, #4294967295
 800659e:	4618      	mov	r0, r3
 80065a0:	f00a fe18 	bl	80111d4 <osMutexAcquire>
 80065a4:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d17a      	bne.n	80066a2 <prv_TerminalFunc_set+0x116>
	{
		switch (argc)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d86d      	bhi.n	800668e <prv_TerminalFunc_set+0x102>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <prv_TerminalFunc_set+0x2c>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065cf 	.word	0x080065cf
 80065c0:	080065db 	.word	0x080065db
 80065c4:	080065ef 	.word	0x080065ef
		{
		case 0:																				// если вызвали get без параметра - показать help
			prv_printHelpSet();
 80065c8:	f000 f888 	bl	80066dc <prv_printHelpSet>
			break;
 80065cc:	e064      	b.n	8006698 <prv_TerminalFunc_set+0x10c>
		case 1:
			prv_TerminalFuncSetParams(argv[0]);												// реакция на параметры в set
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f8c0 	bl	8006758 <prv_TerminalFuncSetParams>
//			EEPROM_OptionsSave();
			break;
 80065d8:	e05e      	b.n	8006698 <prv_TerminalFunc_set+0x10c>
		case 2:
			prv_TerminalFuncSetParamsArg(argv[0], argv[1]);									// реакция на параметры с 1 аргументом в set
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	3304      	adds	r3, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f000 f8c0 	bl	800676c <prv_TerminalFuncSetParamsArg>
//			EEPROM_OptionsSave();
			break;
 80065ec:	e054      	b.n	8006698 <prv_TerminalFunc_set+0x10c>
		case 3:																				// реакция на параметры с 2 аргументами в set
			if ( (strncmp(argv[0], "pwroff", 5) == 0) && (strncmp(argv[1], "5v", 2) == 0))	// отложенное выключение питания +5V, чтобы raspberry успел завершить работу
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2205      	movs	r2, #5
 80065f4:	492e      	ldr	r1, [pc, #184]	; (80066b0 <prv_TerminalFunc_set+0x124>)
 80065f6:	4618      	mov	r0, r3
 80065f8:	f00f fa6b 	bl	8015ad2 <strncmp>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d107      	bne.n	8006612 <prv_TerminalFunc_set+0x86>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	3304      	adds	r3, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2202      	movs	r2, #2
 800660a:	492a      	ldr	r1, [pc, #168]	; (80066b4 <prv_TerminalFunc_set+0x128>)
 800660c:	4618      	mov	r0, r3
 800660e:	f00f fa60 	bl	8015ad2 <strncmp>
//				{
//					osDelay(Delay*1000);
//					MP_Power_Set_5V0(POWERSTATE_DISABLE);
//				}
			}
			if ( (strncmp(argv[0], "mode", 5) == 0) && (strncmp(argv[1], "auto", 2) == 0))	// время для интервала отсылки данных в автоматическом режиме (в миллисекундах)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2205      	movs	r2, #5
 8006618:	4927      	ldr	r1, [pc, #156]	; (80066b8 <prv_TerminalFunc_set+0x12c>)
 800661a:	4618      	mov	r0, r3
 800661c:	f00f fa59 	bl	8015ad2 <strncmp>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d137      	bne.n	8006696 <prv_TerminalFunc_set+0x10a>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	3304      	adds	r3, #4
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2202      	movs	r2, #2
 800662e:	4923      	ldr	r1, [pc, #140]	; (80066bc <prv_TerminalFunc_set+0x130>)
 8006630:	4618      	mov	r0, r3
 8006632:	f00f fa4e 	bl	8015ad2 <strncmp>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d12c      	bne.n	8006696 <prv_TerminalFunc_set+0x10a>
			{
				uint32_t  Interval = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	60bb      	str	r3, [r7, #8]
				if ( (sscanf(argv[2], "%lu", &Interval) == EOF) || (Interval <100 ) || (Interval > 100000) )
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f107 0208 	add.w	r2, r7, #8
 800664a:	491d      	ldr	r1, [pc, #116]	; (80066c0 <prv_TerminalFunc_set+0x134>)
 800664c:	4618      	mov	r0, r3
 800664e:	f00f f9c9 	bl	80159e4 <siscanf>
 8006652:	4603      	mov	r3, r0
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d006      	beq.n	8006668 <prv_TerminalFunc_set+0xdc>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b63      	cmp	r3, #99	; 0x63
 800665e:	d903      	bls.n	8006668 <prv_TerminalFunc_set+0xdc>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <prv_TerminalFunc_set+0x138>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d904      	bls.n	8006672 <prv_TerminalFunc_set+0xe6>
				{
					microrl_printStringWithEndl("Incorrect value for automode interval (100..100000 msec)");
 8006668:	4817      	ldr	r0, [pc, #92]	; (80066c8 <prv_TerminalFunc_set+0x13c>)
 800666a:	f7ff fabf 	bl	8005bec <microrl_printStringWithEndl>
					return 1;
 800666e:	2301      	movs	r3, #1
 8006670:	e018      	b.n	80066a4 <prv_TerminalFunc_set+0x118>
				}
				else
				{
					ExchangeStruct.TerminalModeAuto_interval = Interval;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4a15      	ldr	r2, [pc, #84]	; (80066cc <prv_TerminalFunc_set+0x140>)
 8006676:	60d3      	str	r3, [r2, #12]
					sprintf(str, "Auto mode interval = %lu msec.\n",	 	ExchangeStruct.TerminalModeAuto_interval );				microrl_printString(str);
 8006678:	4b14      	ldr	r3, [pc, #80]	; (80066cc <prv_TerminalFunc_set+0x140>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	461a      	mov	r2, r3
 800667e:	4914      	ldr	r1, [pc, #80]	; (80066d0 <prv_TerminalFunc_set+0x144>)
 8006680:	4814      	ldr	r0, [pc, #80]	; (80066d4 <prv_TerminalFunc_set+0x148>)
 8006682:	f00f f98f 	bl	80159a4 <siprintf>
 8006686:	4813      	ldr	r0, [pc, #76]	; (80066d4 <prv_TerminalFunc_set+0x148>)
 8006688:	f7ff faa4 	bl	8005bd4 <microrl_printString>
				}

			}
//			EEPROM_OptionsSave();
			break;
 800668c:	e003      	b.n	8006696 <prv_TerminalFunc_set+0x10a>
		default:																			// тройной уровень параметров не сделан (пока)
			microrl_printStringWithEndl("Set is available only for 1,2-level commands, yet (Ex:  '>set pwr', '>set pwr on'");
 800668e:	4812      	ldr	r0, [pc, #72]	; (80066d8 <prv_TerminalFunc_set+0x14c>)
 8006690:	f7ff faac 	bl	8005bec <microrl_printStringWithEndl>
			break;
 8006694:	e000      	b.n	8006698 <prv_TerminalFunc_set+0x10c>
			break;
 8006696:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <prv_TerminalFunc_set+0x120>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f00a fdf7 	bl	8011290 <osMutexRelease>
	}


	return 0;
 80066a2:	2300      	movs	r3, #0

}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20008924 	.word	0x20008924
 80066b0:	0801a254 	.word	0x0801a254
 80066b4:	0801a25c 	.word	0x0801a25c
 80066b8:	0801a260 	.word	0x0801a260
 80066bc:	0801a268 	.word	0x0801a268
 80066c0:	0801a270 	.word	0x0801a270
 80066c4:	000186a0 	.word	0x000186a0
 80066c8:	0801a274 	.word	0x0801a274
 80066cc:	20008910 	.word	0x20008910
 80066d0:	0801a2b0 	.word	0x0801a2b0
 80066d4:	200090c8 	.word	0x200090c8
 80066d8:	0801a2d0 	.word	0x0801a2d0

080066dc <prv_printHelpSet>:
//=======================================================================================
void prv_printHelpSet(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у set
	microrl_printStringWithEndl("set <parameter>");
 80066e0:	4812      	ldr	r0, [pc, #72]	; (800672c <prv_printHelpSet+0x50>)
 80066e2:	f7ff fa83 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  buzzer X      - Set buzzer state (on|off)");
 80066e6:	4812      	ldr	r0, [pc, #72]	; (8006730 <prv_printHelpSet+0x54>)
 80066e8:	f7ff fa80 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  defaults      - Set factory default settings");
 80066ec:	4811      	ldr	r0, [pc, #68]	; (8006734 <prv_printHelpSet+0x58>)
 80066ee:	f7ff fa7d 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode X        - AUTO or by requests (auto|cmd)");
 80066f2:	4811      	ldr	r0, [pc, #68]	; (8006738 <prv_printHelpSet+0x5c>)
 80066f4:	f7ff fa7a 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode auto X   - AUTO mode interval (100..100 000 msec)");
 80066f8:	4810      	ldr	r0, [pc, #64]	; (800673c <prv_printHelpSet+0x60>)
 80066fa:	f7ff fa77 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  options       - Manage options in EEPROM (format|defaults|load|save)");
 80066fe:	4810      	ldr	r0, [pc, #64]	; (8006740 <prv_printHelpSet+0x64>)
 8006700:	f7ff fa74 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwrcalref1 X  - Set ADC battery calibration: REF voltage  3.3V (0..10 volts)");
 8006704:	480f      	ldr	r0, [pc, #60]	; (8006744 <prv_printHelpSet+0x68>)
 8006706:	f7ff fa71 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwrcalref2 X  - Set ADC battery calibration: REF voltage 12.0V (0..20 volts)");
 800670a:	480f      	ldr	r0, [pc, #60]	; (8006748 <prv_printHelpSet+0x6c>)
 800670c:	f7ff fa6e 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwron X       - Set power state ON  (5v|10v|eop|encoder|hvps|cpu|cpld)");
 8006710:	480e      	ldr	r0, [pc, #56]	; (800674c <prv_printHelpSet+0x70>)
 8006712:	f7ff fa6b 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwroff X      - Set power state OFF (5v|10v|eop|encoder|hvps|cpu|cpld)");
 8006716:	480e      	ldr	r0, [pc, #56]	; (8006750 <prv_printHelpSet+0x74>)
 8006718:	f7ff fa68 	bl	8005bec <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwroff 5v X   - Set power OFF with timeout (1..1000 sec)");
 800671c:	480d      	ldr	r0, [pc, #52]	; (8006754 <prv_printHelpSet+0x78>)
 800671e:	f7ff fa65 	bl	8005bec <microrl_printStringWithEndl>

	//microrl_printStringWithEndl("  gps			- Set gps mode - (GPS/GLONASS)");
	//microrl_printStringWithEndl("  bat			- Battery calibration constants");

	//microrl_printStringWithEndl("  serial	- set serial number");	//undocumented command
	microrl_printEndl();
 8006722:	f7ff fa73 	bl	8005c0c <microrl_printEndl>
}
 8006726:	bf00      	nop
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	0801a324 	.word	0x0801a324
 8006730:	0801a334 	.word	0x0801a334
 8006734:	0801a360 	.word	0x0801a360
 8006738:	0801a390 	.word	0x0801a390
 800673c:	0801a3c4 	.word	0x0801a3c4
 8006740:	0801a400 	.word	0x0801a400
 8006744:	0801a448 	.word	0x0801a448
 8006748:	0801a498 	.word	0x0801a498
 800674c:	0801a4e8 	.word	0x0801a4e8
 8006750:	0801a534 	.word	0x0801a534
 8006754:	0801a580 	.word	0x0801a580

08006758 <prv_TerminalFuncSetParams>:
//=======================================================================================
void prv_TerminalFuncSetParams(const char *name)									// set для 1 параметра
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
//	else if (strncmp(name, "serial", 3) == 0)
//		TerminalPrintGet_SERIAL();
//	else
//		microrl_printStringWithEndl("Unknown parameter for command 'GET'");

}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
	...

0800676c <prv_TerminalFuncSetParamsArg>:
//=======================================================================================

void prv_TerminalFuncSetParamsArg(const char *name, const char *param)			// set для 2 параметров
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
//	microrl_printStringWithEndl(name);
//	microrl_printString("Param: ");
//	microrl_printStringWithEndl(param);


	if (strncmp(name, "mode", 3) == 0)
 8006776:	2203      	movs	r2, #3
 8006778:	4938      	ldr	r1, [pc, #224]	; (800685c <prv_TerminalFuncSetParamsArg+0xf0>)
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f00f f9a9 	bl	8015ad2 <strncmp>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d11e      	bne.n	80067c4 <prv_TerminalFuncSetParamsArg+0x58>
	{
		if (strncmp(param, "auto", 3) == 0)
 8006786:	2203      	movs	r2, #3
 8006788:	4935      	ldr	r1, [pc, #212]	; (8006860 <prv_TerminalFuncSetParamsArg+0xf4>)
 800678a:	6838      	ldr	r0, [r7, #0]
 800678c:	f00f f9a1 	bl	8015ad2 <strncmp>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <prv_TerminalFuncSetParamsArg+0x36>
		{
			ExchangeStruct.TerminalMode = TERMINALMODE_AUTO;
 8006796:	4b33      	ldr	r3, [pc, #204]	; (8006864 <prv_TerminalFuncSetParamsArg+0xf8>)
 8006798:	2200      	movs	r2, #0
 800679a:	729a      	strb	r2, [r3, #10]
			EEPROM_OptionsSave();
 800679c:	f7fb fc12 	bl	8001fc4 <EEPROM_OptionsSave>
 80067a0:	e010      	b.n	80067c4 <prv_TerminalFuncSetParamsArg+0x58>
		}
		else if (strncmp(param, "cmd", 3) == 0)
 80067a2:	2203      	movs	r2, #3
 80067a4:	4930      	ldr	r1, [pc, #192]	; (8006868 <prv_TerminalFuncSetParamsArg+0xfc>)
 80067a6:	6838      	ldr	r0, [r7, #0]
 80067a8:	f00f f993 	bl	8015ad2 <strncmp>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d105      	bne.n	80067be <prv_TerminalFuncSetParamsArg+0x52>
		{
			ExchangeStruct.TerminalMode = TERMINALMODE_COMMAND;
 80067b2:	4b2c      	ldr	r3, [pc, #176]	; (8006864 <prv_TerminalFuncSetParamsArg+0xf8>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	729a      	strb	r2, [r3, #10]
			EEPROM_OptionsSave();
 80067b8:	f7fb fc04 	bl	8001fc4 <EEPROM_OptionsSave>
 80067bc:	e002      	b.n	80067c4 <prv_TerminalFuncSetParamsArg+0x58>
		}
		else
			microrl_printStringWithEndl("Unknown argument for parameter: mode");
 80067be:	482b      	ldr	r0, [pc, #172]	; (800686c <prv_TerminalFuncSetParamsArg+0x100>)
 80067c0:	f7ff fa14 	bl	8005bec <microrl_printStringWithEndl>
	}
	if (strncmp(name, "buzzer", 3) == 0)
 80067c4:	2203      	movs	r2, #3
 80067c6:	492a      	ldr	r1, [pc, #168]	; (8006870 <prv_TerminalFuncSetParamsArg+0x104>)
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f00f f982 	bl	8015ad2 <strncmp>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d03f      	beq.n	8006854 <prv_TerminalFuncSetParamsArg+0xe8>
//			EEPROM_OptionsSave();
//		}
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: mode");
	}
	else if (strncmp(name, "pwron", 5) == 0)
 80067d4:	2205      	movs	r2, #5
 80067d6:	4927      	ldr	r1, [pc, #156]	; (8006874 <prv_TerminalFuncSetParamsArg+0x108>)
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f00f f97a 	bl	8015ad2 <strncmp>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d037      	beq.n	8006854 <prv_TerminalFuncSetParamsArg+0xe8>
//		else if (strncmp(param, "cpld", 4) == 0)
//			MP_Power_Set_CPLD(POWERSTATE_ENABLE);
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: pwron (5v|10V|eop|encoder|HVPS|cpu|cpld)");
	}
	else if (strncmp(name, "pwroff", 5) == 0)
 80067e4:	2205      	movs	r2, #5
 80067e6:	4924      	ldr	r1, [pc, #144]	; (8006878 <prv_TerminalFuncSetParamsArg+0x10c>)
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f00f f972 	bl	8015ad2 <strncmp>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02f      	beq.n	8006854 <prv_TerminalFuncSetParamsArg+0xe8>
//		else if (strncmp(param, "cpld", 4) == 0)
//			MP_Power_Set_CPLD(POWERSTATE_DISABLE);
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: pwroff (5v|10V|eop|encoder|HVPS|cpu|cpld)");
	}
	else if (strncmp(name, "serial", 3) == 0)
 80067f4:	2203      	movs	r2, #3
 80067f6:	4921      	ldr	r1, [pc, #132]	; (800687c <prv_TerminalFuncSetParamsArg+0x110>)
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f00f f96a 	bl	8015ad2 <strncmp>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d112      	bne.n	800682a <prv_TerminalFuncSetParamsArg+0xbe>
	{
		if (strlen(param) == 8)
 8006804:	6838      	ldr	r0, [r7, #0]
 8006806:	f7f9 fcc5 	bl	8000194 <strlen>
 800680a:	4603      	mov	r3, r0
 800680c:	2b08      	cmp	r3, #8
 800680e:	d108      	bne.n	8006822 <prv_TerminalFuncSetParamsArg+0xb6>
		{
			strcpy(ExchangeStruct.DeviceSerialNumber, param);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	4814      	ldr	r0, [pc, #80]	; (8006864 <prv_TerminalFuncSetParamsArg+0xf8>)
 8006814:	f00f f955 	bl	8015ac2 <strcpy>
			TerminalPrintGet_SERIAL();
 8006818:	f7ff fd24 	bl	8006264 <TerminalPrintGet_SERIAL>
			EEPROM_OptionsSave();
 800681c:	f7fb fbd2 	bl	8001fc4 <EEPROM_OptionsSave>
//			microrl_printStringWithEndl("Unknown argument for 'set options'");
	}



}
 8006820:	e018      	b.n	8006854 <prv_TerminalFuncSetParamsArg+0xe8>
			microrl_printStringWithEndl("Illegal format for serial number. (8 chars/digits)");
 8006822:	4817      	ldr	r0, [pc, #92]	; (8006880 <prv_TerminalFuncSetParamsArg+0x114>)
 8006824:	f7ff f9e2 	bl	8005bec <microrl_printStringWithEndl>
}
 8006828:	e014      	b.n	8006854 <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "pwrcalref1", 10) == 0)										// калибровка батареи - опорное напряжение АЦП 3.3V
 800682a:	220a      	movs	r2, #10
 800682c:	4915      	ldr	r1, [pc, #84]	; (8006884 <prv_TerminalFuncSetParamsArg+0x118>)
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f00f f94f 	bl	8015ad2 <strncmp>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00c      	beq.n	8006854 <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "pwrcalref2", 10) == 0)										// калибровка батареи - напряжение 12V
 800683a:	220a      	movs	r2, #10
 800683c:	4912      	ldr	r1, [pc, #72]	; (8006888 <prv_TerminalFuncSetParamsArg+0x11c>)
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f00f f947 	bl	8015ad2 <strncmp>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "optinos", 3) == 0)										// калибровка батареи - напряжение 12V
 800684a:	2203      	movs	r2, #3
 800684c:	490f      	ldr	r1, [pc, #60]	; (800688c <prv_TerminalFuncSetParamsArg+0x120>)
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f00f f93f 	bl	8015ad2 <strncmp>
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	0801a260 	.word	0x0801a260
 8006860:	0801a268 	.word	0x0801a268
 8006864:	20008910 	.word	0x20008910
 8006868:	0801a5bc 	.word	0x0801a5bc
 800686c:	0801a5c0 	.word	0x0801a5c0
 8006870:	0801a5e8 	.word	0x0801a5e8
 8006874:	0801a5f0 	.word	0x0801a5f0
 8006878:	0801a254 	.word	0x0801a254
 800687c:	0801a5f8 	.word	0x0801a5f8
 8006880:	0801a600 	.word	0x0801a600
 8006884:	0801a634 	.word	0x0801a634
 8006888:	0801a640 	.word	0x0801a640
 800688c:	0801a64c 	.word	0x0801a64c

08006890 <MICRORL_UART_SendString>:

	xSemaphoreGive(MicroRL_xTxSemaphore);
}
//=======================================================================================
void MICRORL_UART_SendString(const char *str)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(MicroRL_xTxSemaphore, portMAX_DELAY);
 8006898:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <MICRORL_UART_SendString+0x60>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f04f 31ff 	mov.w	r1, #4294967295
 80068a0:	4618      	mov	r0, r3
 80068a2:	f00b fbc1 	bl	8012028 <xQueueSemaphoreTake>
	int i = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
	while (str[i] != 0)
 80068aa:	e00f      	b.n	80068cc <MICRORL_UART_SendString+0x3c>
	{
//		prv_SendChar(str[i]);
		while(!(MICRORL_USART->SR & USART_SR_TC)); 										//Ждем установки флага TC - завершения передачи
 80068ac:	bf00      	nop
 80068ae:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <MICRORL_UART_SendString+0x64>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f9      	beq.n	80068ae <MICRORL_UART_SendString+0x1e>
		MICRORL_USART->DR = str[i];
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4413      	add	r3, r2
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <MICRORL_UART_SendString+0x64>)
 80068c4:	605a      	str	r2, [r3, #4]
		i++;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3301      	adds	r3, #1
 80068ca:	60fb      	str	r3, [r7, #12]
	while (str[i] != 0)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4413      	add	r3, r2
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e9      	bne.n	80068ac <MICRORL_UART_SendString+0x1c>
	}
	xSemaphoreGive(MicroRL_xTxSemaphore);
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <MICRORL_UART_SendString+0x60>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	2300      	movs	r3, #0
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	f00b f8ad 	bl	8011a40 <xQueueGenericSend>
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	200088f8 	.word	0x200088f8
 80068f4:	40005000 	.word	0x40005000

080068f8 <MICRORL_UART_GetChar>:
//=======================================================================================
int MICRORL_UART_GetChar()
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
	uint8_t data;
	if (MircoRL_sRxRingBuf.wrIdx != MircoRL_sRxRingBuf.rdIdx)
 80068fe:	4b12      	ldr	r3, [pc, #72]	; (8006948 <MICRORL_UART_GetChar+0x50>)
 8006900:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006904:	4b10      	ldr	r3, [pc, #64]	; (8006948 <MICRORL_UART_GetChar+0x50>)
 8006906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800690a:	429a      	cmp	r2, r3
 800690c:	d014      	beq.n	8006938 <MICRORL_UART_GetChar+0x40>
	{
		data = MircoRL_sRxRingBuf.data[MircoRL_sRxRingBuf.rdIdx++];
 800690e:	4b0e      	ldr	r3, [pc, #56]	; (8006948 <MICRORL_UART_GetChar+0x50>)
 8006910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	490c      	ldr	r1, [pc, #48]	; (8006948 <MICRORL_UART_GetChar+0x50>)
 8006918:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800691c:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <MICRORL_UART_GetChar+0x50>)
 800691e:	5cd3      	ldrb	r3, [r2, r3]
 8006920:	71fb      	strb	r3, [r7, #7]
		if (MircoRL_sRxRingBuf.rdIdx >= MICRORL_uartSIZE_OF_RING_BUFFER)
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <MICRORL_UART_GetChar+0x50>)
 8006924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006928:	2b7f      	cmp	r3, #127	; 0x7f
 800692a:	dd03      	ble.n	8006934 <MICRORL_UART_GetChar+0x3c>
		{
			MircoRL_sRxRingBuf.rdIdx = 0;
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <MICRORL_UART_GetChar+0x50>)
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}
		return (int)data;
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	e001      	b.n	800693c <MICRORL_UART_GetChar+0x44>
	}
	else
	{
		return (MICRORL_UART_NO_DATA);
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	2000886c 	.word	0x2000886c

0800694c <MICRORL_UART_GetCharBlocking>:
//=======================================================================================
int MICRORL_UART_GetCharBlocking()
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
	xSemaphoreTake(MicroRL_xRxSemaphore, portMAX_DELAY);
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <MICRORL_UART_GetCharBlocking+0x1c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f04f 31ff 	mov.w	r1, #4294967295
 8006958:	4618      	mov	r0, r3
 800695a:	f00b fb65 	bl	8012028 <xQueueSemaphoreTake>
	return MICRORL_UART_GetChar();
 800695e:	f7ff ffcb 	bl	80068f8 <MICRORL_UART_GetChar>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20008848 	.word	0x20008848

0800696c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800696c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800696e:	e003      	b.n	8006978 <LoopCopyDataInit>

08006970 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006972:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006974:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006976:	3104      	adds	r1, #4

08006978 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006978:	480a      	ldr	r0, [pc, #40]	; (80069a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800697c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800697e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006980:	d3f6      	bcc.n	8006970 <CopyDataInit>
  ldr r2, =_sbss
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006984:	e002      	b.n	800698c <LoopFillZerobss>

08006986 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006986:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006988:	f842 3b04 	str.w	r3, [r2], #4

0800698c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800698e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006990:	d3f9      	bcc.n	8006986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006992:	f7fd f9df 	bl	8003d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006996:	f00e f905 	bl	8014ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800699a:	f7fc fe33 	bl	8003604 <main>
  bx lr
 800699e:	4770      	bx	lr
  ldr r3, =_sidata
 80069a0:	0801e66c 	.word	0x0801e66c
  ldr r0, =_sdata
 80069a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80069a8:	20000318 	.word	0x20000318
  ldr r2, =_sbss
 80069ac:	20000318 	.word	0x20000318
  ldr r3, = _ebss
 80069b0:	20009e04 	.word	0x20009e04

080069b4 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069b4:	e7fe      	b.n	80069b4 <COMP_ACQ_IRQHandler>

080069b6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069c0:	2003      	movs	r0, #3
 80069c2:	f000 fe81 	bl	80076c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069c6:	2000      	movs	r0, #0
 80069c8:	f7fd f874 	bl	8003ab4 <HAL_InitTick>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	71fb      	strb	r3, [r7, #7]
 80069d6:	e001      	b.n	80069dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80069d8:	f7fd f83e 	bl	8003a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80069dc:	79fb      	ldrb	r3, [r7, #7]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <HAL_IncTick+0x1c>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <HAL_IncTick+0x20>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	4a03      	ldr	r2, [pc, #12]	; (8006a04 <HAL_IncTick+0x1c>)
 80069f8:	6013      	str	r3, [r2, #0]
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	200091c8 	.word	0x200091c8
 8006a08:	20000014 	.word	0x20000014

08006a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8006a10:	4b02      	ldr	r3, [pc, #8]	; (8006a1c <HAL_GetTick+0x10>)
 8006a12:	681b      	ldr	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr
 8006a1c:	200091c8 	.word	0x200091c8

08006a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a28:	f7ff fff0 	bl	8006a0c <HAL_GetTick>
 8006a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d004      	beq.n	8006a44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <HAL_Delay+0x40>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a44:	bf00      	nop
 8006a46:	f7ff ffe1 	bl	8006a0c <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d8f7      	bhi.n	8006a46 <HAL_Delay+0x26>
  {
  }
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000014 	.word	0x20000014

08006a64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08e      	sub	sp, #56	; 0x38
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e127      	b.n	8006cd4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d115      	bne.n	8006abe <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aa0:	4b8e      	ldr	r3, [pc, #568]	; (8006cdc <HAL_ADC_Init+0x278>)
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	4a8d      	ldr	r2, [pc, #564]	; (8006cdc <HAL_ADC_Init+0x278>)
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	6213      	str	r3, [r2, #32]
 8006aac:	4b8b      	ldr	r3, [pc, #556]	; (8006cdc <HAL_ADC_Init+0x278>)
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fa fa53 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f040 80ff 	bne.w	8006cca <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ad4:	f023 0302 	bic.w	r3, r3, #2
 8006ad8:	f043 0202 	orr.w	r2, r3, #2
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8006ae0:	4b7f      	ldr	r3, [pc, #508]	; (8006ce0 <HAL_ADC_Init+0x27c>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	497c      	ldr	r1, [pc, #496]	; (8006ce0 <HAL_ADC_Init+0x27c>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006afa:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b02:	4619      	mov	r1, r3
 8006b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b08:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	fa93 f3a3 	rbit	r3, r3
 8006b10:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	fab3 f383 	clz	r3, r3
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8006b1e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006b24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	2302      	movs	r3, #2
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	fa93 f3a3 	rbit	r3, r3
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	fab3 f383 	clz	r3, r3
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8006b46:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d007      	beq.n	8006b66 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b62:	4313      	orrs	r3, r2
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b40      	cmp	r3, #64	; 0x40
 8006b72:	d04f      	beq.n	8006c14 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006b86:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6912      	ldr	r2, [r2, #16]
 8006b8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006b90:	d003      	beq.n	8006b9a <HAL_ADC_Init+0x136>
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6912      	ldr	r2, [r2, #16]
 8006b96:	2a01      	cmp	r2, #1
 8006b98:	d102      	bne.n	8006ba0 <HAL_ADC_Init+0x13c>
 8006b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b9e:	e000      	b.n	8006ba2 <HAL_ADC_Init+0x13e>
 8006ba0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8006ba2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d125      	bne.n	8006c00 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d114      	bne.n	8006be8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	fa92 f2a2 	rbit	r2, r2
 8006bd0:	617a      	str	r2, [r7, #20]
  return result;
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	fab2 f282 	clz	r2, r2
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	4093      	lsls	r3, r2
 8006bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	4313      	orrs	r3, r2
 8006be4:	633b      	str	r3, [r7, #48]	; 0x30
 8006be6:	e00b      	b.n	8006c00 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bec:	f043 0220 	orr.w	r2, r3, #32
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf8:	f043 0201 	orr.w	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4b37      	ldr	r3, [pc, #220]	; (8006ce4 <HAL_ADC_Init+0x280>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	4b33      	ldr	r3, [pc, #204]	; (8006ce8 <HAL_ADC_Init+0x284>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c30:	d003      	beq.n	8006c3a <HAL_ADC_Init+0x1d6>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d119      	bne.n	8006c6e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8006c4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	fa92 f2a2 	rbit	r2, r2
 8006c56:	60fa      	str	r2, [r7, #12]
  return result;
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	fab2 f282 	clz	r2, r2
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	fa03 f202 	lsl.w	r2, r3, r2
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c6c:	e007      	b.n	8006c7e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	4b19      	ldr	r3, [pc, #100]	; (8006cec <HAL_ADC_Init+0x288>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d10b      	bne.n	8006ca6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c98:	f023 0303 	bic.w	r3, r3, #3
 8006c9c:	f043 0201 	orr.w	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ca4:	e014      	b.n	8006cd0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006caa:	f023 0312 	bic.w	r3, r3, #18
 8006cae:	f043 0210 	orr.w	r2, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006cc8:	e002      	b.n	8006cd0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3738      	adds	r7, #56	; 0x38
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	40012700 	.word	0x40012700
 8006ce4:	fcfc16ff 	.word	0xfcfc16ff
 8006ce8:	c0fff189 	.word	0xc0fff189
 8006cec:	bf80fffe 	.word	0xbf80fffe

08006cf0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_ADC_Start+0x1a>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e04e      	b.n	8006da8 <HAL_ADC_Start+0xb8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fb94 	bl	8007440 <ADC_Enable>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d141      	bne.n	8006da6 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d60:	d106      	bne.n	8006d70 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d66:	f023 0206 	bic.w	r2, r3, #6
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	651a      	str	r2, [r3, #80]	; 0x50
 8006d6e:	e002      	b.n	8006d76 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006d86:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d107      	bne.n	8006da6 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006da4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_ADC_Stop+0x1a>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e01a      	b.n	8006e00 <HAL_ADC_Stop+0x50>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fb8a 	bl	80074ec <ADC_ConversionStop_Disable>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	f043 0201 	orr.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e24:	d113      	bne.n	8006e4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e34:	d10b      	bne.n	8006e4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	f043 0220 	orr.w	r2, r3, #32
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e061      	b.n	8006f12 <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006e4e:	f7ff fddd 	bl	8006a0c <HAL_GetTick>
 8006e52:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006e54:	e01a      	b.n	8006e8c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d016      	beq.n	8006e8c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <HAL_ADC_PollForConversion+0x6c>
 8006e64:	f7ff fdd2 	bl	8006a0c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d20b      	bcs.n	8006e8c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e78:	f043 0204 	orr.w	r2, r3, #4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e042      	b.n	8006f12 <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0dd      	beq.n	8006e56 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f06f 0212 	mvn.w	r2, #18
 8006eaa:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d124      	bne.n	8006f10 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d11f      	bne.n	8006f10 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d111      	bne.n	8006f10 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d105      	bne.n	8006f10 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f08:	f043 0201 	orr.w	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr

08006f32 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d14e      	bne.n	8006fe6 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d147      	bne.n	8006fe6 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d105      	bne.n	8006f6e <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d12c      	bne.n	8006fd6 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d127      	bne.n	8006fd6 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d006      	beq.n	8006fa2 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d119      	bne.n	8006fd6 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0220 	bic.w	r2, r2, #32
 8006fb0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	f043 0201 	orr.w	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8ab 	bl	8007132 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0212 	mvn.w	r2, #18
 8006fe4:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d15c      	bne.n	80070ae <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d155      	bne.n	80070ae <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b00      	cmp	r3, #0
 800700c:	d105      	bne.n	800701a <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d13a      	bne.n	800709e <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007032:	2b00      	cmp	r3, #0
 8007034:	d006      	beq.n	8007044 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007040:	2b00      	cmp	r3, #0
 8007042:	d12c      	bne.n	800709e <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800704e:	2b00      	cmp	r3, #0
 8007050:	d125      	bne.n	800709e <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800705c:	2b00      	cmp	r3, #0
 800705e:	d11e      	bne.n	800709e <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007066:	2b00      	cmp	r3, #0
 8007068:	d119      	bne.n	800709e <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007078:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708e:	2b00      	cmp	r3, #0
 8007090:	d105      	bne.n	800709e <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	f043 0201 	orr.w	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa5e 	bl	8007560 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 020c 	mvn.w	r2, #12
 80070ac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	d114      	bne.n	80070e6 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d10d      	bne.n	80070e6 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f834 	bl	8007144 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0201 	mvn.w	r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070f4:	d119      	bne.n	800712a <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b20      	cmp	r3, #32
 8007102:	d112      	bne.n	800712a <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007108:	f043 0202 	orr.w	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0220 	mvn.w	r2, #32
 8007118:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f81b 	bl	8007156 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0220 	mvn.w	r2, #32
 8007128:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_ADC_ConfigChannel+0x20>
 8007184:	2302      	movs	r3, #2
 8007186:	e14f      	b.n	8007428 <HAL_ADC_ConfigChannel+0x2c0>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d81c      	bhi.n	80071d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	3b05      	subs	r3, #5
 80071aa:	221f      	movs	r2, #31
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	43db      	mvns	r3, r3
 80071b2:	4019      	ands	r1, r3
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	3b05      	subs	r3, #5
 80071c4:	fa00 f203 	lsl.w	r2, r0, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	641a      	str	r2, [r3, #64]	; 0x40
 80071d0:	e07e      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b0c      	cmp	r3, #12
 80071d8:	d81c      	bhi.n	8007214 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	3b23      	subs	r3, #35	; 0x23
 80071ec:	221f      	movs	r2, #31
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43db      	mvns	r3, r3
 80071f4:	4019      	ands	r1, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	3b23      	subs	r3, #35	; 0x23
 8007206:	fa00 f203 	lsl.w	r2, r0, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	63da      	str	r2, [r3, #60]	; 0x3c
 8007212:	e05d      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b12      	cmp	r3, #18
 800721a:	d81c      	bhi.n	8007256 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	3b41      	subs	r3, #65	; 0x41
 800722e:	221f      	movs	r2, #31
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	4019      	ands	r1, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	3b41      	subs	r3, #65	; 0x41
 8007248:	fa00 f203 	lsl.w	r2, r0, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
 8007254:	e03c      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b18      	cmp	r3, #24
 800725c:	d81c      	bhi.n	8007298 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	3b5f      	subs	r3, #95	; 0x5f
 8007270:	221f      	movs	r2, #31
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43db      	mvns	r3, r3
 8007278:	4019      	ands	r1, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	3b5f      	subs	r3, #95	; 0x5f
 800728a:	fa00 f203 	lsl.w	r2, r0, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	635a      	str	r2, [r3, #52]	; 0x34
 8007296:	e01b      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	3b7d      	subs	r3, #125	; 0x7d
 80072aa:	221f      	movs	r2, #31
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	43db      	mvns	r3, r3
 80072b2:	4019      	ands	r1, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	3b7d      	subs	r3, #125	; 0x7d
 80072c4:	fa00 f203 	lsl.w	r2, r0, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b09      	cmp	r3, #9
 80072d6:	d81a      	bhi.n	800730e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6959      	ldr	r1, [r3, #20]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4613      	mov	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4413      	add	r3, r2
 80072e8:	2207      	movs	r2, #7
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	43db      	mvns	r3, r3
 80072f0:	4019      	ands	r1, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6898      	ldr	r0, [r3, #8]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4613      	mov	r3, r2
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4413      	add	r3, r2
 8007300:	fa00 f203 	lsl.w	r2, r0, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	615a      	str	r2, [r3, #20]
 800730c:	e05d      	b.n	80073ca <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b13      	cmp	r3, #19
 8007314:	d81c      	bhi.n	8007350 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6919      	ldr	r1, [r3, #16]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4413      	add	r3, r2
 8007326:	3b1e      	subs	r3, #30
 8007328:	2207      	movs	r2, #7
 800732a:	fa02 f303 	lsl.w	r3, r2, r3
 800732e:	43db      	mvns	r3, r3
 8007330:	4019      	ands	r1, r3
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6898      	ldr	r0, [r3, #8]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4613      	mov	r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4413      	add	r3, r2
 8007340:	3b1e      	subs	r3, #30
 8007342:	fa00 f203 	lsl.w	r2, r0, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	611a      	str	r2, [r3, #16]
 800734e:	e03c      	b.n	80073ca <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b1d      	cmp	r3, #29
 8007356:	d81c      	bhi.n	8007392 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68d9      	ldr	r1, [r3, #12]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	3b3c      	subs	r3, #60	; 0x3c
 800736a:	2207      	movs	r2, #7
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	43db      	mvns	r3, r3
 8007372:	4019      	ands	r1, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6898      	ldr	r0, [r3, #8]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	4613      	mov	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4413      	add	r3, r2
 8007382:	3b3c      	subs	r3, #60	; 0x3c
 8007384:	fa00 f203 	lsl.w	r2, r0, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	60da      	str	r2, [r3, #12]
 8007390:	e01b      	b.n	80073ca <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	3b5a      	subs	r3, #90	; 0x5a
 80073a4:	2207      	movs	r2, #7
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	43db      	mvns	r3, r3
 80073ac:	4019      	ands	r1, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6898      	ldr	r0, [r3, #8]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4413      	add	r3, r2
 80073bc:	3b5a      	subs	r3, #90	; 0x5a
 80073be:	fa00 f203 	lsl.w	r2, r0, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b10      	cmp	r3, #16
 80073d0:	d003      	beq.n	80073da <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073d6:	2b11      	cmp	r3, #17
 80073d8:	d121      	bne.n	800741e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80073da:	4b16      	ldr	r3, [pc, #88]	; (8007434 <HAL_ADC_ConfigChannel+0x2cc>)
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d11b      	bne.n	800741e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80073e6:	4b13      	ldr	r3, [pc, #76]	; (8007434 <HAL_ADC_ConfigChannel+0x2cc>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4a12      	ldr	r2, [pc, #72]	; (8007434 <HAL_ADC_ConfigChannel+0x2cc>)
 80073ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073f0:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d111      	bne.n	800741e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80073fa:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <HAL_ADC_ConfigChannel+0x2d0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a0f      	ldr	r2, [pc, #60]	; (800743c <HAL_ADC_ConfigChannel+0x2d4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	0c9a      	lsrs	r2, r3, #18
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8007410:	e002      	b.n	8007418 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	3b01      	subs	r3, #1
 8007416:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f9      	bne.n	8007412 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40012700 	.word	0x40012700
 8007438:	20000000 	.word	0x20000000
 800743c:	431bde83 	.word	0x431bde83

08007440 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745a:	2b40      	cmp	r3, #64	; 0x40
 800745c:	d03c      	beq.n	80074d8 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800746e:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <ADC_Enable+0xa4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <ADC_Enable+0xa8>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	0c9a      	lsrs	r2, r3, #18
 800747a:	4613      	mov	r3, r2
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	4413      	add	r3, r2
 8007480:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8007482:	e002      	b.n	800748a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1f9      	bne.n	8007484 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8007490:	f7ff fabc 	bl	8006a0c <HAL_GetTick>
 8007494:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007496:	e018      	b.n	80074ca <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8007498:	f7ff fab8 	bl	8006a0c <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d911      	bls.n	80074ca <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074aa:	f043 0210 	orr.w	r2, r3, #16
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b6:	f043 0201 	orr.w	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e007      	b.n	80074da <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d1df      	bne.n	8007498 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000000 	.word	0x20000000
 80074e8:	431bde83 	.word	0x431bde83

080074ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d127      	bne.n	8007556 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007516:	f7ff fa79 	bl	8006a0c <HAL_GetTick>
 800751a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800751c:	e014      	b.n	8007548 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800751e:	f7ff fa75 	bl	8006a0c <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d90d      	bls.n	8007548 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007530:	f043 0210 	orr.w	r2, r3, #16
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753c:	f043 0201 	orr.w	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e007      	b.n	8007558 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007552:	2b40      	cmp	r3, #64	; 0x40
 8007554:	d0e3      	beq.n	800751e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr
	...

08007574 <__NVIC_SetPriorityGrouping>:
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007584:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <__NVIC_SetPriorityGrouping+0x44>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007590:	4013      	ands	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800759c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075a6:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <__NVIC_SetPriorityGrouping+0x44>)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	60d3      	str	r3, [r2, #12]
}
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	e000ed00 	.word	0xe000ed00

080075bc <__NVIC_GetPriorityGrouping>:
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <__NVIC_GetPriorityGrouping+0x18>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	f003 0307 	and.w	r3, r3, #7
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	e000ed00 	.word	0xe000ed00

080075d8 <__NVIC_EnableIRQ>:
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	db0b      	blt.n	8007602 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	f003 021f 	and.w	r2, r3, #31
 80075f0:	4906      	ldr	r1, [pc, #24]	; (800760c <__NVIC_EnableIRQ+0x34>)
 80075f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	2001      	movs	r0, #1
 80075fa:	fa00 f202 	lsl.w	r2, r0, r2
 80075fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr
 800760c:	e000e100 	.word	0xe000e100

08007610 <__NVIC_SetPriority>:
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800761c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007620:	2b00      	cmp	r3, #0
 8007622:	db0a      	blt.n	800763a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	b2da      	uxtb	r2, r3
 8007628:	490c      	ldr	r1, [pc, #48]	; (800765c <__NVIC_SetPriority+0x4c>)
 800762a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762e:	0112      	lsls	r2, r2, #4
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	440b      	add	r3, r1
 8007634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007638:	e00a      	b.n	8007650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	4908      	ldr	r1, [pc, #32]	; (8007660 <__NVIC_SetPriority+0x50>)
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	3b04      	subs	r3, #4
 8007648:	0112      	lsls	r2, r2, #4
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	440b      	add	r3, r1
 800764e:	761a      	strb	r2, [r3, #24]
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	bc80      	pop	{r7}
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	e000e100 	.word	0xe000e100
 8007660:	e000ed00 	.word	0xe000ed00

08007664 <NVIC_EncodePriority>:
{
 8007664:	b480      	push	{r7}
 8007666:	b089      	sub	sp, #36	; 0x24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f1c3 0307 	rsb	r3, r3, #7
 800767e:	2b04      	cmp	r3, #4
 8007680:	bf28      	it	cs
 8007682:	2304      	movcs	r3, #4
 8007684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	3304      	adds	r3, #4
 800768a:	2b06      	cmp	r3, #6
 800768c:	d902      	bls.n	8007694 <NVIC_EncodePriority+0x30>
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	3b03      	subs	r3, #3
 8007692:	e000      	b.n	8007696 <NVIC_EncodePriority+0x32>
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007698:	f04f 32ff 	mov.w	r2, #4294967295
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	43da      	mvns	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	401a      	ands	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076ac:	f04f 31ff 	mov.w	r1, #4294967295
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	fa01 f303 	lsl.w	r3, r1, r3
 80076b6:	43d9      	mvns	r1, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076bc:	4313      	orrs	r3, r2
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3724      	adds	r7, #36	; 0x24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff ff4f 	bl	8007574 <__NVIC_SetPriorityGrouping>
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	4603      	mov	r3, r0
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80076f0:	f7ff ff64 	bl	80075bc <__NVIC_GetPriorityGrouping>
 80076f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	6978      	ldr	r0, [r7, #20]
 80076fc:	f7ff ffb2 	bl	8007664 <NVIC_EncodePriority>
 8007700:	4602      	mov	r2, r0
 8007702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff ff81 	bl	8007610 <__NVIC_SetPriority>
}
 800770e:	bf00      	nop
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	4603      	mov	r3, r0
 800771e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff ff57 	bl	80075d8 <__NVIC_EnableIRQ>
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e014      	b.n	800776e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	791b      	ldrb	r3, [r3, #4]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d105      	bne.n	800775a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7f9 ff35 	bl	80015c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	795b      	ldrb	r3, [r3, #5]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_DAC_Start+0x16>
 8007788:	2302      	movs	r3, #2
 800778a:	e03e      	b.n	800780a <HAL_DAC_Start+0x94>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6819      	ldr	r1, [r3, #0]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2201      	movs	r2, #1
 80077a6:	409a      	lsls	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10f      	bne.n	80077d6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80077c0:	2b3c      	cmp	r3, #60	; 0x3c
 80077c2:	d11b      	bne.n	80077fc <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	e012      	b.n	80077fc <HAL_DAC_Start+0x86>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80077e0:	213c      	movs	r1, #60	; 0x3c
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	fa01 f303 	lsl.w	r3, r1, r3
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d107      	bne.n	80077fc <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0202 	orr.w	r2, r2, #2
 80077fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr

08007814 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d105      	bne.n	800783e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4413      	add	r3, r2
 8007838:	3308      	adds	r3, #8
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e004      	b.n	8007848 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	3314      	adds	r3, #20
 8007846:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	461a      	mov	r2, r3
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	bc80      	pop	{r7}
 800785a:	4770      	bx	lr

0800785c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	795b      	ldrb	r3, [r3, #5]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_DAC_ConfigChannel+0x18>
 8007870:	2302      	movs	r3, #2
 8007872:	e044      	b.n	80078fe <HAL_DAC_ConfigChannel+0xa2>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8007888:	f640 72fe 	movw	r2, #4094	; 0xffe
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	43db      	mvns	r3, r3
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4013      	ands	r3, r2
 8007898:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	22c0      	movs	r2, #192	; 0xc0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ca:	43da      	mvns	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	400a      	ands	r2, r1
 80078d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	22c0      	movs	r2, #192	; 0xc0
 80078e2:	fa02 f303 	lsl.w	r3, r2, r3
 80078e6:	43da      	mvns	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	400a      	ands	r2, r1
 80078ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr

08007908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e059      	b.n	80079ce <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	4b2d      	ldr	r3, [pc, #180]	; (80079d8 <HAL_DMA_Init+0xd0>)
 8007922:	429a      	cmp	r2, r3
 8007924:	d80f      	bhi.n	8007946 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	4b2b      	ldr	r3, [pc, #172]	; (80079dc <HAL_DMA_Init+0xd4>)
 800792e:	4413      	add	r3, r2
 8007930:	4a2b      	ldr	r2, [pc, #172]	; (80079e0 <HAL_DMA_Init+0xd8>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	091b      	lsrs	r3, r3, #4
 8007938:	009a      	lsls	r2, r3, #2
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a28      	ldr	r2, [pc, #160]	; (80079e4 <HAL_DMA_Init+0xdc>)
 8007942:	63da      	str	r2, [r3, #60]	; 0x3c
 8007944:	e00e      	b.n	8007964 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	4b26      	ldr	r3, [pc, #152]	; (80079e8 <HAL_DMA_Init+0xe0>)
 800794e:	4413      	add	r3, r2
 8007950:	4a23      	ldr	r2, [pc, #140]	; (80079e0 <HAL_DMA_Init+0xd8>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	091b      	lsrs	r3, r3, #4
 8007958:	009a      	lsls	r2, r3, #2
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a22      	ldr	r2, [pc, #136]	; (80079ec <HAL_DMA_Init+0xe4>)
 8007962:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800797a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr
 80079d8:	40026407 	.word	0x40026407
 80079dc:	bffd9ff8 	.word	0xbffd9ff8
 80079e0:	cccccccd 	.word	0xcccccccd
 80079e4:	40026000 	.word	0x40026000
 80079e8:	bffd9bf8 	.word	0xbffd9bf8
 80079ec:	40026400 	.word	0x40026400

080079f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d005      	beq.n	8007a14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
 8007a12:	e029      	b.n	8007a68 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 020e 	bic.w	r2, r2, #14
 8007a22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0201 	bic.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	f003 021c 	and.w	r2, r3, #28
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	2101      	movs	r1, #1
 8007a42:	fa01 f202 	lsl.w	r2, r1, r2
 8007a46:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
    }
  }
  return status;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f003 031c 	and.w	r3, r3, #28
 8007a92:	2204      	movs	r2, #4
 8007a94:	409a      	lsls	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d026      	beq.n	8007aec <HAL_DMA_IRQHandler+0x7a>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d021      	beq.n	8007aec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d107      	bne.n	8007ac6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0204 	bic.w	r2, r2, #4
 8007ac4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f003 021c 	and.w	r2, r3, #28
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	2104      	movs	r1, #4
 8007ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ad8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d071      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007aea:	e06c      	b.n	8007bc6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	f003 031c 	and.w	r3, r3, #28
 8007af4:	2202      	movs	r2, #2
 8007af6:	409a      	lsls	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d02e      	beq.n	8007b5e <HAL_DMA_IRQHandler+0xec>
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d029      	beq.n	8007b5e <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10b      	bne.n	8007b30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 020a 	bic.w	r2, r2, #10
 8007b26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	f003 021c 	and.w	r2, r3, #28
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	2102      	movs	r1, #2
 8007b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d038      	beq.n	8007bc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007b5c:	e033      	b.n	8007bc6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f003 031c 	and.w	r3, r3, #28
 8007b66:	2208      	movs	r2, #8
 8007b68:	409a      	lsls	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d02a      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0x156>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d025      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 020e 	bic.w	r2, r2, #14
 8007b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	f003 021c 	and.w	r2, r3, #28
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b98:	2101      	movs	r1, #1
 8007b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
}
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8007be2:	2300      	movs	r3, #0
 8007be4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007be6:	e160      	b.n	8007eaa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	2101      	movs	r1, #1
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8152 	beq.w	8007ea4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d00b      	beq.n	8007c20 <HAL_GPIO_Init+0x50>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d007      	beq.n	8007c20 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c14:	2b11      	cmp	r3, #17
 8007c16:	d003      	beq.n	8007c20 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2b12      	cmp	r3, #18
 8007c1e:	d130      	bne.n	8007c82 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c30:	43db      	mvns	r3, r3
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4013      	ands	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8007c56:	2201      	movs	r2, #1
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5e:	43db      	mvns	r3, r3
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4013      	ands	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	091b      	lsrs	r3, r3, #4
 8007c6c:	f003 0201 	and.w	r2, r3, #1
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	43db      	mvns	r3, r3
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4013      	ands	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d003      	beq.n	8007cc2 <HAL_GPIO_Init+0xf2>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b12      	cmp	r3, #18
 8007cc0:	d123      	bne.n	8007d0a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	08da      	lsrs	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3208      	adds	r2, #8
 8007cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	220f      	movs	r2, #15
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	08da      	lsrs	r2, r3, #3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3208      	adds	r2, #8
 8007d04:	6939      	ldr	r1, [r7, #16]
 8007d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	2203      	movs	r2, #3
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	43db      	mvns	r3, r3
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f003 0203 	and.w	r2, r3, #3
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80ac 	beq.w	8007ea4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d4c:	4b5d      	ldr	r3, [pc, #372]	; (8007ec4 <HAL_GPIO_Init+0x2f4>)
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	4a5c      	ldr	r2, [pc, #368]	; (8007ec4 <HAL_GPIO_Init+0x2f4>)
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	6213      	str	r3, [r2, #32]
 8007d58:	4b5a      	ldr	r3, [pc, #360]	; (8007ec4 <HAL_GPIO_Init+0x2f4>)
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8007d64:	4a58      	ldr	r2, [pc, #352]	; (8007ec8 <HAL_GPIO_Init+0x2f8>)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	089b      	lsrs	r3, r3, #2
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	220f      	movs	r2, #15
 8007d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d80:	43db      	mvns	r3, r3
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4013      	ands	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a50      	ldr	r2, [pc, #320]	; (8007ecc <HAL_GPIO_Init+0x2fc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d025      	beq.n	8007ddc <HAL_GPIO_Init+0x20c>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a4f      	ldr	r2, [pc, #316]	; (8007ed0 <HAL_GPIO_Init+0x300>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d01f      	beq.n	8007dd8 <HAL_GPIO_Init+0x208>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a4e      	ldr	r2, [pc, #312]	; (8007ed4 <HAL_GPIO_Init+0x304>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d019      	beq.n	8007dd4 <HAL_GPIO_Init+0x204>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a4d      	ldr	r2, [pc, #308]	; (8007ed8 <HAL_GPIO_Init+0x308>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <HAL_GPIO_Init+0x200>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a4c      	ldr	r2, [pc, #304]	; (8007edc <HAL_GPIO_Init+0x30c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00d      	beq.n	8007dcc <HAL_GPIO_Init+0x1fc>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a4b      	ldr	r2, [pc, #300]	; (8007ee0 <HAL_GPIO_Init+0x310>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d007      	beq.n	8007dc8 <HAL_GPIO_Init+0x1f8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a4a      	ldr	r2, [pc, #296]	; (8007ee4 <HAL_GPIO_Init+0x314>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d101      	bne.n	8007dc4 <HAL_GPIO_Init+0x1f4>
 8007dc0:	2306      	movs	r3, #6
 8007dc2:	e00c      	b.n	8007dde <HAL_GPIO_Init+0x20e>
 8007dc4:	2307      	movs	r3, #7
 8007dc6:	e00a      	b.n	8007dde <HAL_GPIO_Init+0x20e>
 8007dc8:	2305      	movs	r3, #5
 8007dca:	e008      	b.n	8007dde <HAL_GPIO_Init+0x20e>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	e006      	b.n	8007dde <HAL_GPIO_Init+0x20e>
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e004      	b.n	8007dde <HAL_GPIO_Init+0x20e>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e002      	b.n	8007dde <HAL_GPIO_Init+0x20e>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e000      	b.n	8007dde <HAL_GPIO_Init+0x20e>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	f002 0203 	and.w	r2, r2, #3
 8007de4:	0092      	lsls	r2, r2, #2
 8007de6:	4093      	lsls	r3, r2
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007dee:	4936      	ldr	r1, [pc, #216]	; (8007ec8 <HAL_GPIO_Init+0x2f8>)
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	089b      	lsrs	r3, r3, #2
 8007df4:	3302      	adds	r3, #2
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007dfc:	4b3a      	ldr	r3, [pc, #232]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	43db      	mvns	r3, r3
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007e20:	4a31      	ldr	r2, [pc, #196]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007e26:	4b30      	ldr	r3, [pc, #192]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	43db      	mvns	r3, r3
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	4013      	ands	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007e4a:	4a27      	ldr	r2, [pc, #156]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e50:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007e74:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	43db      	mvns	r3, r3
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4013      	ands	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007e9e:	4a12      	ldr	r2, [pc, #72]	; (8007ee8 <HAL_GPIO_Init+0x318>)
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f47f ae97 	bne.w	8007be8 <HAL_GPIO_Init+0x18>
  }
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr
 8007ec4:	40023800 	.word	0x40023800
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40020000 	.word	0x40020000
 8007ed0:	40020400 	.word	0x40020400
 8007ed4:	40020800 	.word	0x40020800
 8007ed8:	40020c00 	.word	0x40020c00
 8007edc:	40021000 	.word	0x40021000
 8007ee0:	40021400 	.word	0x40021400
 8007ee4:	40021800 	.word	0x40021800
 8007ee8:	40010400 	.word	0x40010400

08007eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	887b      	ldrh	r3, [r7, #2]
 8007efe:	4013      	ands	r3, r2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
 8007f08:	e001      	b.n	8007f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	807b      	strh	r3, [r7, #2]
 8007f26:	4613      	mov	r3, r2
 8007f28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f2a:	787b      	ldrb	r3, [r7, #1]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007f30:	887a      	ldrh	r2, [r7, #2]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8007f36:	e003      	b.n	8007f40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8007f38:	887b      	ldrh	r3, [r7, #2]
 8007f3a:	041a      	lsls	r2, r3, #16
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	619a      	str	r2, [r3, #24]
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr

08007f4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f5c:	887a      	ldrh	r2, [r7, #2]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4013      	ands	r3, r2
 8007f62:	041a      	lsls	r2, r3, #16
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	43d9      	mvns	r1, r3
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	400b      	ands	r3, r1
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	619a      	str	r2, [r3, #24]
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e11f      	b.n	80081ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fa fbe8 	bl	8002778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0201 	bic.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007fe0:	f002 f982 	bl	800a2e8 <HAL_RCC_GetPCLK1Freq>
 8007fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4a7b      	ldr	r2, [pc, #492]	; (80081d8 <HAL_I2C_Init+0x25c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d807      	bhi.n	8008000 <HAL_I2C_Init+0x84>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a7a      	ldr	r2, [pc, #488]	; (80081dc <HAL_I2C_Init+0x260>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	bf94      	ite	ls
 8007ff8:	2301      	movls	r3, #1
 8007ffa:	2300      	movhi	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	e006      	b.n	800800e <HAL_I2C_Init+0x92>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a77      	ldr	r2, [pc, #476]	; (80081e0 <HAL_I2C_Init+0x264>)
 8008004:	4293      	cmp	r3, r2
 8008006:	bf94      	ite	ls
 8008008:	2301      	movls	r3, #1
 800800a:	2300      	movhi	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e0db      	b.n	80081ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4a72      	ldr	r2, [pc, #456]	; (80081e4 <HAL_I2C_Init+0x268>)
 800801a:	fba2 2303 	umull	r2, r3, r2, r3
 800801e:	0c9b      	lsrs	r3, r3, #18
 8008020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	430a      	orrs	r2, r1
 8008034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	4a64      	ldr	r2, [pc, #400]	; (80081d8 <HAL_I2C_Init+0x25c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d802      	bhi.n	8008050 <HAL_I2C_Init+0xd4>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	3301      	adds	r3, #1
 800804e:	e009      	b.n	8008064 <HAL_I2C_Init+0xe8>
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	4a63      	ldr	r2, [pc, #396]	; (80081e8 <HAL_I2C_Init+0x26c>)
 800805c:	fba2 2303 	umull	r2, r3, r2, r3
 8008060:	099b      	lsrs	r3, r3, #6
 8008062:	3301      	adds	r3, #1
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	430b      	orrs	r3, r1
 800806a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4956      	ldr	r1, [pc, #344]	; (80081d8 <HAL_I2C_Init+0x25c>)
 8008080:	428b      	cmp	r3, r1
 8008082:	d80d      	bhi.n	80080a0 <HAL_I2C_Init+0x124>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	1e59      	subs	r1, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008092:	3301      	adds	r3, #1
 8008094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008098:	2b04      	cmp	r3, #4
 800809a:	bf38      	it	cc
 800809c:	2304      	movcc	r3, #4
 800809e:	e04f      	b.n	8008140 <HAL_I2C_Init+0x1c4>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d111      	bne.n	80080cc <HAL_I2C_Init+0x150>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	1e58      	subs	r0, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6859      	ldr	r1, [r3, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	440b      	add	r3, r1
 80080b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80080ba:	3301      	adds	r3, #1
 80080bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf0c      	ite	eq
 80080c4:	2301      	moveq	r3, #1
 80080c6:	2300      	movne	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	e012      	b.n	80080f2 <HAL_I2C_Init+0x176>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	1e58      	subs	r0, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6859      	ldr	r1, [r3, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	0099      	lsls	r1, r3, #2
 80080dc:	440b      	add	r3, r1
 80080de:	fbb0 f3f3 	udiv	r3, r0, r3
 80080e2:	3301      	adds	r3, #1
 80080e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bf0c      	ite	eq
 80080ec:	2301      	moveq	r3, #1
 80080ee:	2300      	movne	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <HAL_I2C_Init+0x17e>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e022      	b.n	8008140 <HAL_I2C_Init+0x1c4>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10e      	bne.n	8008120 <HAL_I2C_Init+0x1a4>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1e58      	subs	r0, r3, #1
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6859      	ldr	r1, [r3, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	440b      	add	r3, r1
 8008110:	fbb0 f3f3 	udiv	r3, r0, r3
 8008114:	3301      	adds	r3, #1
 8008116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800811a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811e:	e00f      	b.n	8008140 <HAL_I2C_Init+0x1c4>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	1e58      	subs	r0, r3, #1
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6859      	ldr	r1, [r3, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	0099      	lsls	r1, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	fbb0 f3f3 	udiv	r3, r0, r3
 8008136:	3301      	adds	r3, #1
 8008138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800813c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	6809      	ldr	r1, [r1, #0]
 8008144:	4313      	orrs	r3, r2
 8008146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69da      	ldr	r2, [r3, #28]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	431a      	orrs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800816e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6911      	ldr	r1, [r2, #16]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	68d2      	ldr	r2, [r2, #12]
 800817a:	4311      	orrs	r1, r2
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	430b      	orrs	r3, r1
 8008182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	000186a0 	.word	0x000186a0
 80081dc:	001e847f 	.word	0x001e847f
 80081e0:	003d08ff 	.word	0x003d08ff
 80081e4:	431bde83 	.word	0x431bde83
 80081e8:	10624dd3 	.word	0x10624dd3

080081ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ee:	b08b      	sub	sp, #44	; 0x2c
 80081f0:	af06      	add	r7, sp, #24
 80081f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e0d0      	b.n	80083a0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f00c fa10 	bl	8014638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2203      	movs	r2, #3
 800821c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4618      	mov	r0, r3
 8008226:	f004 fa97 	bl	800c758 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e04c      	b.n	80082ca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	440b      	add	r3, r1
 8008240:	3301      	adds	r3, #1
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	440b      	add	r3, r1
 8008256:	7bfa      	ldrb	r2, [r7, #15]
 8008258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800825a:	7bfa      	ldrb	r2, [r7, #15]
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	b298      	uxth	r0, r3
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	4613      	mov	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	440b      	add	r3, r1
 800826c:	3336      	adds	r3, #54	; 0x36
 800826e:	4602      	mov	r2, r0
 8008270:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	440b      	add	r3, r1
 8008282:	3303      	adds	r3, #3
 8008284:	2200      	movs	r2, #0
 8008286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	440b      	add	r3, r1
 8008296:	3338      	adds	r3, #56	; 0x38
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800829c:	7bfa      	ldrb	r2, [r7, #15]
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	440b      	add	r3, r1
 80082aa:	333c      	adds	r3, #60	; 0x3c
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082b0:	7bfa      	ldrb	r2, [r7, #15]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	440b      	add	r3, r1
 80082be:	3340      	adds	r3, #64	; 0x40
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	3301      	adds	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
 80082ca:	7bfa      	ldrb	r2, [r7, #15]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d3ad      	bcc.n	8008230 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
 80082d8:	e044      	b.n	8008364 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082da:	7bfa      	ldrb	r2, [r7, #15]
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	440b      	add	r3, r1
 80082e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082f0:	7bfa      	ldrb	r2, [r7, #15]
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	440b      	add	r3, r1
 80082fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008302:	7bfa      	ldrb	r2, [r7, #15]
 8008304:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008306:	7bfa      	ldrb	r2, [r7, #15]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	440b      	add	r3, r1
 8008314:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800831c:	7bfa      	ldrb	r2, [r7, #15]
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	440b      	add	r3, r1
 800832a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008332:	7bfa      	ldrb	r2, [r7, #15]
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	440b      	add	r3, r1
 8008340:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008348:	7bfa      	ldrb	r2, [r7, #15]
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	440b      	add	r3, r1
 8008356:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	3301      	adds	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
 8008364:	7bfa      	ldrb	r2, [r7, #15]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d3b5      	bcc.n	80082da <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	687e      	ldr	r6, [r7, #4]
 8008376:	466d      	mov	r5, sp
 8008378:	f106 0410 	add.w	r4, r6, #16
 800837c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800837e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	1d33      	adds	r3, r6, #4
 8008386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008388:	6838      	ldr	r0, [r7, #0]
 800838a:	f004 f9ff 	bl	800c78c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_PCD_Start+0x16>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e016      	b.n	80083ec <HAL_PCD_Start+0x44>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f004 f9ae 	bl	800c72c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80083d0:	2101      	movs	r1, #1
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fa0e 	bl	80097f4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f006 f98a 	bl	800e6f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4618      	mov	r0, r3
 8008402:	f006 f982 	bl	800e70a <USB_ReadInterrupts>
 8008406:	4603      	mov	r3, r0
 8008408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800840c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008410:	d102      	bne.n	8008418 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb0f 	bl	8008a36 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f006 f974 	bl	800e70a <USB_ReadInterrupts>
 8008422:	4603      	mov	r3, r0
 8008424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800842c:	d112      	bne.n	8008454 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008436:	b29a      	uxth	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008440:	b292      	uxth	r2, r2
 8008442:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f00c f971 	bl	801472e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800844c:	2100      	movs	r1, #0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f8c7 	bl	80085e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f006 f956 	bl	800e70a <USB_ReadInterrupts>
 800845e:	4603      	mov	r3, r0
 8008460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008468:	d10b      	bne.n	8008482 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800847c:	b292      	uxth	r2, r2
 800847e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f006 f93f 	bl	800e70a <USB_ReadInterrupts>
 800848c:	4603      	mov	r3, r0
 800848e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008496:	d10b      	bne.n	80084b0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084aa:	b292      	uxth	r2, r2
 80084ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f006 f928 	bl	800e70a <USB_ReadInterrupts>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c4:	d126      	bne.n	8008514 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0204 	bic.w	r2, r2, #4
 80084d8:	b292      	uxth	r2, r2
 80084da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0208 	bic.w	r2, r2, #8
 80084f0:	b292      	uxth	r2, r2
 80084f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f00c f952 	bl	80147a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008504:	b29a      	uxth	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800850e:	b292      	uxth	r2, r2
 8008510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f006 f8f6 	bl	800e70a <USB_ReadInterrupts>
 800851e:	4603      	mov	r3, r0
 8008520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008528:	d126      	bne.n	8008578 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008532:	b29a      	uxth	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0208 	orr.w	r2, r2, #8
 800853c:	b292      	uxth	r2, r2
 800853e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008554:	b292      	uxth	r2, r2
 8008556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008562:	b29a      	uxth	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0204 	orr.w	r2, r2, #4
 800856c:	b292      	uxth	r2, r2
 800856e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f00c f8fa 	bl	801476c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f006 f8c4 	bl	800e70a <USB_ReadInterrupts>
 8008582:	4603      	mov	r3, r0
 8008584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800858c:	d10e      	bne.n	80085ac <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008596:	b29a      	uxth	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80085a0:	b292      	uxth	r2, r2
 80085a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f00c f8b3 	bl	8014712 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f006 f8aa 	bl	800e70a <USB_ReadInterrupts>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c0:	d10b      	bne.n	80085da <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085d4:	b292      	uxth	r2, r2
 80085d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_PCD_SetAddress+0x1a>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e013      	b.n	8008624 <HAL_PCD_SetAddress+0x42>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	78fa      	ldrb	r2, [r7, #3]
 8008608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f006 f85b 	bl	800e6d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	4608      	mov	r0, r1
 8008636:	4611      	mov	r1, r2
 8008638:	461a      	mov	r2, r3
 800863a:	4603      	mov	r3, r0
 800863c:	70fb      	strb	r3, [r7, #3]
 800863e:	460b      	mov	r3, r1
 8008640:	803b      	strh	r3, [r7, #0]
 8008642:	4613      	mov	r3, r2
 8008644:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800864a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800864e:	2b00      	cmp	r3, #0
 8008650:	da0e      	bge.n	8008670 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	4413      	add	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	705a      	strb	r2, [r3, #1]
 800866e:	e00e      	b.n	800868e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	f003 0207 	and.w	r2, r3, #7
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	b2da      	uxtb	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800869a:	883a      	ldrh	r2, [r7, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	78ba      	ldrb	r2, [r7, #2]
 80086a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d004      	beq.n	80086b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80086b8:	78bb      	ldrb	r3, [r7, #2]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d102      	bne.n	80086c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <HAL_PCD_EP_Open+0xa6>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e00e      	b.n	80086f0 <HAL_PCD_EP_Open+0xc4>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f004 f873 	bl	800c7cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80086ee:	7afb      	ldrb	r3, [r7, #11]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008708:	2b00      	cmp	r3, #0
 800870a:	da0e      	bge.n	800872a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	705a      	strb	r2, [r3, #1]
 8008728:	e00e      	b.n	8008748 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	f003 0207 	and.w	r2, r3, #7
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	4413      	add	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	b2da      	uxtb	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_PCD_EP_Close+0x6a>
 800875e:	2302      	movs	r3, #2
 8008760:	e00e      	b.n	8008780 <HAL_PCD_EP_Close+0x88>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68f9      	ldr	r1, [r7, #12]
 8008770:	4618      	mov	r0, r3
 8008772:	f004 fb95 	bl	800cea0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	607a      	str	r2, [r7, #4]
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	460b      	mov	r3, r1
 8008796:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	f003 0207 	and.w	r2, r3, #7
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4413      	add	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2200      	movs	r2, #0
 80087c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d106      	bne.n	80087ec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6979      	ldr	r1, [r7, #20]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f004 fd47 	bl	800d278 <USB_EPStartXfer>
 80087ea:	e005      	b.n	80087f8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f004 fd40 	bl	800d278 <USB_EPStartXfer>
  }

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	460b      	mov	r3, r1
 800880c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	f003 0207 	and.w	r2, r3, #7
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	440b      	add	r3, r1
 8008820:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008824:	681b      	ldr	r3, [r3, #0]
}
 8008826:	4618      	mov	r0, r3
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr

08008830 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	607a      	str	r2, [r7, #4]
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	460b      	mov	r3, r1
 800883e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2200      	movs	r2, #0
 8008874:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2201      	movs	r2, #1
 800887a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	b2da      	uxtb	r2, r3
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6979      	ldr	r1, [r7, #20]
 8008898:	4618      	mov	r0, r3
 800889a:	f004 fced 	bl	800d278 <USB_EPStartXfer>
 800889e:	e005      	b.n	80088ac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6979      	ldr	r1, [r7, #20]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f004 fce6 	bl	800d278 <USB_EPStartXfer>
  }

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	f003 0207 	and.w	r2, r3, #7
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d901      	bls.n	80088d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e04c      	b.n	800896e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80088d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	da0e      	bge.n	80088fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	4413      	add	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	705a      	strb	r2, [r3, #1]
 80088f8:	e00c      	b.n	8008914 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80088fa:	78fa      	ldrb	r2, [r7, #3]
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	b2da      	uxtb	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_PCD_EP_SetStall+0x7e>
 8008930:	2302      	movs	r3, #2
 8008932:	e01c      	b.n	800896e <HAL_PCD_EP_SetStall+0xb8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68f9      	ldr	r1, [r7, #12]
 8008942:	4618      	mov	r0, r3
 8008944:	f005 fdc7 	bl	800e4d6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	2b00      	cmp	r3, #0
 8008950:	d108      	bne.n	8008964 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f005 fee2 	bl	800e728 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	429a      	cmp	r2, r3
 800898e:	d901      	bls.n	8008994 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e040      	b.n	8008a16 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da0e      	bge.n	80089ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	4613      	mov	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4413      	add	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	4413      	add	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	705a      	strb	r2, [r3, #1]
 80089b8:	e00e      	b.n	80089d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	f003 0207 	and.w	r2, r3, #7
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	4413      	add	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_PCD_EP_ClrStall+0x82>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e00e      	b.n	8008a16 <HAL_PCD_EP_ClrStall+0xa0>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68f9      	ldr	r1, [r7, #12]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f005 fdb5 	bl	800e576 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr

08008a36 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b08e      	sub	sp, #56	; 0x38
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008a3e:	e2df      	b.n	8009000 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a48:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008a4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8008a56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f040 8158 	bne.w	8008d10 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008a60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a62:	f003 0310 	and.w	r3, r3, #16
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d152      	bne.n	8008b10 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7a:	81fb      	strh	r3, [r7, #14]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	89fb      	ldrh	r3, [r7, #14]
 8008a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3328      	adds	r3, #40	; 0x28
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	695a      	ldr	r2, [r3, #20]
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	441a      	add	r2, r3
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008ace:	2100      	movs	r1, #0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f00b fe04 	bl	80146de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 828e 	beq.w	8009000 <PCD_EP_ISR_Handler+0x5ca>
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 8289 	bne.w	8009000 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	b292      	uxth	r2, r2
 8008b02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008b0e:	e277      	b.n	8009000 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008b20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d034      	beq.n	8008b94 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	461a      	mov	r2, r3
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	3306      	adds	r3, #6
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f005 fe2c 	bl	800e7c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	823b      	strh	r3, [r7, #16]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	8a3a      	ldrh	r2, [r7, #16]
 8008b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b88:	b292      	uxth	r2, r2
 8008b8a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f00b fd79 	bl	8014684 <HAL_PCD_SetupStageCallback>
 8008b92:	e235      	b.n	8009000 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008b94:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f280 8231 	bge.w	8009000 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008baa:	4013      	ands	r3, r2
 8008bac:	83bb      	strh	r3, [r7, #28]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	8bba      	ldrh	r2, [r7, #28]
 8008bb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bb8:	b292      	uxth	r2, r2
 8008bba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4413      	add	r3, r2
 8008bd0:	3306      	adds	r3, #6
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d019      	beq.n	8008c24 <PCD_EP_ISR_Handler+0x1ee>
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d015      	beq.n	8008c24 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	6959      	ldr	r1, [r3, #20]
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f005 fddc 	bl	800e7c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	441a      	add	r2, r3
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f00b fd42 	bl	80146a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	4413      	add	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d112      	bne.n	8008c72 <PCD_EP_ISR_Handler+0x23c>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	801a      	strh	r2, [r3, #0]
 8008c70:	e02f      	b.n	8008cd2 <PCD_EP_ISR_Handler+0x29c>
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b3e      	cmp	r3, #62	; 0x3e
 8008c78:	d813      	bhi.n	8008ca2 <PCD_EP_ISR_Handler+0x26c>
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	633b      	str	r3, [r7, #48]	; 0x30
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <PCD_EP_ISR_Handler+0x25e>
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	3301      	adds	r3, #1
 8008c92:	633b      	str	r3, [r7, #48]	; 0x30
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	029b      	lsls	r3, r3, #10
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	801a      	strh	r2, [r3, #0]
 8008ca0:	e017      	b.n	8008cd2 <PCD_EP_ISR_Handler+0x29c>
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f003 031f 	and.w	r3, r3, #31
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <PCD_EP_ISR_Handler+0x286>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	633b      	str	r3, [r7, #48]	; 0x30
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	029b      	lsls	r3, r3, #10
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce2:	827b      	strh	r3, [r7, #18]
 8008ce4:	8a7b      	ldrh	r3, [r7, #18]
 8008ce6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cea:	827b      	strh	r3, [r7, #18]
 8008cec:	8a7b      	ldrh	r3, [r7, #18]
 8008cee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cf2:	827b      	strh	r3, [r7, #18]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	8a7b      	ldrh	r3, [r7, #18]
 8008cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8013      	strh	r3, [r2, #0]
 8008d0e:	e177      	b.n	8009000 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008d22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f280 80ea 	bge.w	8008f00 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008d42:	4013      	ands	r3, r2
 8008d44:	853b      	strh	r3, [r7, #40]	; 0x28
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d5a:	b292      	uxth	r2, r2
 8008d5c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008d5e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	4413      	add	r3, r2
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	7b1b      	ldrb	r3, [r3, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d122      	bne.n	8008dc2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	461a      	mov	r2, r3
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	3306      	adds	r3, #6
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6812      	ldr	r2, [r2, #0]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008da4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8008da6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 8087 	beq.w	8008ebc <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	6959      	ldr	r1, [r3, #20]
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	88da      	ldrh	r2, [r3, #6]
 8008dba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008dbc:	f005 fd03 	bl	800e7c6 <USB_ReadPMA>
 8008dc0:	e07c      	b.n	8008ebc <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	78db      	ldrb	r3, [r3, #3]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d108      	bne.n	8008ddc <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f923 	bl	800901c <HAL_PCD_EP_DB_Receive>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008dda:	e06f      	b.n	8008ebc <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	461a      	mov	r2, r3
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	847b      	strh	r3, [r7, #34]	; 0x22
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	441a      	add	r2, r3
 8008e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d021      	beq.n	8008e7a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	461a      	mov	r2, r3
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	00db      	lsls	r3, r3, #3
 8008e48:	4413      	add	r3, r2
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e5e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8008e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d02a      	beq.n	8008ebc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	6959      	ldr	r1, [r3, #20]
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	891a      	ldrh	r2, [r3, #8]
 8008e72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008e74:	f005 fca7 	bl	800e7c6 <USB_ReadPMA>
 8008e78:	e020      	b.n	8008ebc <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	461a      	mov	r2, r3
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3306      	adds	r3, #6
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ea2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8008ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d008      	beq.n	8008ebc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	6959      	ldr	r1, [r3, #20]
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	895a      	ldrh	r2, [r3, #10]
 8008eb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008eb8:	f005 fc85 	bl	800e7c6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ec2:	441a      	add	r2, r3
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	695a      	ldr	r2, [r3, #20]
 8008ecc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ece:	441a      	add	r2, r3
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d004      	beq.n	8008ee6 <PCD_EP_ISR_Handler+0x4b0>
 8008edc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d206      	bcs.n	8008ef4 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f00b fbdb 	bl	80146a8 <HAL_PCD_DataOutStageCallback>
 8008ef2:	e005      	b.n	8008f00 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008efa:	4618      	mov	r0, r3
 8008efc:	f004 f9bc 	bl	800d278 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008f00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d07a      	beq.n	8009000 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8008f0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f38:	843b      	strh	r3, [r7, #32]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	8c3b      	ldrh	r3, [r7, #32]
 8008f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	78db      	ldrb	r3, [r3, #3]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d108      	bne.n	8008f70 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d146      	bne.n	8008ff4 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8008f66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d141      	bne.n	8008ff4 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	4413      	add	r3, r2
 8008f84:	3302      	adds	r3, #2
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6812      	ldr	r2, [r2, #0]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f98:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	699a      	ldr	r2, [r3, #24]
 8008f9e:	8bfb      	ldrh	r3, [r7, #30]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d906      	bls.n	8008fb2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	8bfb      	ldrh	r3, [r7, #30]
 8008faa:	1ad2      	subs	r2, r2, r3
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	619a      	str	r2, [r3, #24]
 8008fb0:	e002      	b.n	8008fb8 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d106      	bne.n	8008fce <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f00b fb89 	bl	80146de <HAL_PCD_DataInStageCallback>
 8008fcc:	e018      	b.n	8009000 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	695a      	ldr	r2, [r3, #20]
 8008fd2:	8bfb      	ldrh	r3, [r7, #30]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	69da      	ldr	r2, [r3, #28]
 8008fde:	8bfb      	ldrh	r3, [r7, #30]
 8008fe0:	441a      	add	r2, r3
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f004 f943 	bl	800d278 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8008ff2:	e005      	b.n	8009000 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008ff4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f91b 	bl	8009236 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009008:	b29b      	uxth	r3, r3
 800900a:	b21b      	sxth	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	f6ff ad17 	blt.w	8008a40 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3738      	adds	r7, #56	; 0x38
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	4613      	mov	r3, r2
 8009028:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d07e      	beq.n	8009132 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800903c:	b29b      	uxth	r3, r3
 800903e:	461a      	mov	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	4413      	add	r3, r2
 8009048:	3302      	adds	r3, #2
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	6812      	ldr	r2, [r2, #0]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800905c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	8b7b      	ldrh	r3, [r7, #26]
 8009064:	429a      	cmp	r2, r3
 8009066:	d306      	bcc.n	8009076 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	699a      	ldr	r2, [r3, #24]
 800906c:	8b7b      	ldrh	r3, [r7, #26]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	619a      	str	r2, [r3, #24]
 8009074:	e002      	b.n	800907c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2200      	movs	r2, #0
 800907a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d123      	bne.n	80090cc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	881b      	ldrh	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800909a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909e:	833b      	strh	r3, [r7, #24]
 80090a0:	8b3b      	ldrh	r3, [r7, #24]
 80090a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80090a6:	833b      	strh	r3, [r7, #24]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	441a      	add	r2, r3
 80090b6:	8b3b      	ldrh	r3, [r7, #24]
 80090b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80090cc:	88fb      	ldrh	r3, [r7, #6]
 80090ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d01f      	beq.n	8009116 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f0:	82fb      	strh	r3, [r7, #22]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	441a      	add	r2, r3
 8009100:	8afb      	ldrh	r3, [r7, #22]
 8009102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800910a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800910e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009112:	b29b      	uxth	r3, r3
 8009114:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009116:	8b7b      	ldrh	r3, [r7, #26]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8087 	beq.w	800922c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	6959      	ldr	r1, [r3, #20]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	891a      	ldrh	r2, [r3, #8]
 800912a:	8b7b      	ldrh	r3, [r7, #26]
 800912c:	f005 fb4b 	bl	800e7c6 <USB_ReadPMA>
 8009130:	e07c      	b.n	800922c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800913a:	b29b      	uxth	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	3306      	adds	r3, #6
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	6812      	ldr	r2, [r2, #0]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800915a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	699a      	ldr	r2, [r3, #24]
 8009160:	8b7b      	ldrh	r3, [r7, #26]
 8009162:	429a      	cmp	r2, r3
 8009164:	d306      	bcc.n	8009174 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	699a      	ldr	r2, [r3, #24]
 800916a:	8b7b      	ldrh	r3, [r7, #26]
 800916c:	1ad2      	subs	r2, r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	619a      	str	r2, [r3, #24]
 8009172:	e002      	b.n	800917a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2200      	movs	r2, #0
 8009178:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d123      	bne.n	80091ca <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	b29b      	uxth	r3, r3
 8009194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919c:	83fb      	strh	r3, [r7, #30]
 800919e:	8bfb      	ldrh	r3, [r7, #30]
 80091a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091a4:	83fb      	strh	r3, [r7, #30]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	441a      	add	r2, r3
 80091b4:	8bfb      	ldrh	r3, [r7, #30]
 80091b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d11f      	bne.n	8009214 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	83bb      	strh	r3, [r7, #28]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	441a      	add	r2, r3
 80091fe:	8bbb      	ldrh	r3, [r7, #28]
 8009200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009210:	b29b      	uxth	r3, r3
 8009212:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009214:	8b7b      	ldrh	r3, [r7, #26]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d008      	beq.n	800922c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6959      	ldr	r1, [r3, #20]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	895a      	ldrh	r2, [r3, #10]
 8009226:	8b7b      	ldrh	r3, [r7, #26]
 8009228:	f005 facd 	bl	800e7c6 <USB_ReadPMA>
    }
  }

  return count;
 800922c:	8b7b      	ldrh	r3, [r7, #26]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b092      	sub	sp, #72	; 0x48
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	4613      	mov	r3, r2
 8009242:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 8132 	beq.w	80094b4 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009258:	b29b      	uxth	r3, r3
 800925a:	461a      	mov	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	4413      	add	r3, r2
 8009264:	3302      	adds	r3, #2
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	6812      	ldr	r2, [r2, #0]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009278:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	699a      	ldr	r2, [r3, #24]
 800927e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009280:	429a      	cmp	r2, r3
 8009282:	d906      	bls.n	8009292 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	619a      	str	r2, [r3, #24]
 8009290:	e002      	b.n	8009298 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2200      	movs	r2, #0
 8009296:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d12c      	bne.n	80092fa <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f00b fa19 	bl	80146de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 822f 	beq.w	8009716 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d2:	827b      	strh	r3, [r7, #18]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	441a      	add	r2, r3
 80092e2:	8a7b      	ldrh	r3, [r7, #18]
 80092e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	8013      	strh	r3, [r2, #0]
 80092f8:	e20d      	b.n	8009716 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01f      	beq.n	8009344 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	b29b      	uxth	r3, r3
 8009316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800931a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	441a      	add	r2, r3
 800932e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800933c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009340:	b29b      	uxth	r3, r3
 8009342:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800934a:	2b01      	cmp	r3, #1
 800934c:	f040 81e3 	bne.w	8009716 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	695a      	ldr	r2, [r3, #20]
 8009354:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009356:	441a      	add	r2, r3
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009362:	441a      	add	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	6a1a      	ldr	r2, [r3, #32]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	429a      	cmp	r2, r3
 8009372:	d309      	bcc.n	8009388 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	6a1a      	ldr	r2, [r3, #32]
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	621a      	str	r2, [r3, #32]
 8009386:	e014      	b.n	80093b2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	6a1b      	ldr	r3, [r3, #32]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d106      	bne.n	800939e <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8009390:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009392:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800939c:	e009      	b.n	80093b2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2200      	movs	r2, #0
 80093b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	785b      	ldrb	r3, [r3, #1]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d155      	bne.n	8009466 <HAL_PCD_EP_DB_Transmit+0x230>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	461a      	mov	r2, r3
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	4413      	add	r3, r2
 80093d0:	61bb      	str	r3, [r7, #24]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	011a      	lsls	r2, r3, #4
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	4413      	add	r3, r2
 80093dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d112      	bne.n	800940e <HAL_PCD_EP_DB_Transmit+0x1d8>
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009406:	b29a      	uxth	r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	e047      	b.n	800949e <HAL_PCD_EP_DB_Transmit+0x268>
 800940e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009410:	2b3e      	cmp	r3, #62	; 0x3e
 8009412:	d811      	bhi.n	8009438 <HAL_PCD_EP_DB_Transmit+0x202>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <HAL_PCD_EP_DB_Transmit+0x1f4>
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	3301      	adds	r3, #1
 8009428:	62bb      	str	r3, [r7, #40]	; 0x28
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	b29b      	uxth	r3, r3
 800942e:	029b      	lsls	r3, r3, #10
 8009430:	b29a      	uxth	r2, r3
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	801a      	strh	r2, [r3, #0]
 8009436:	e032      	b.n	800949e <HAL_PCD_EP_DB_Transmit+0x268>
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	095b      	lsrs	r3, r3, #5
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	f003 031f 	and.w	r3, r3, #31
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <HAL_PCD_EP_DB_Transmit+0x218>
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	3b01      	subs	r3, #1
 800944c:	62bb      	str	r3, [r7, #40]	; 0x28
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	b29b      	uxth	r3, r3
 8009452:	029b      	lsls	r3, r3, #10
 8009454:	b29b      	uxth	r3, r3
 8009456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800945e:	b29a      	uxth	r2, r3
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	801a      	strh	r2, [r3, #0]
 8009464:	e01b      	b.n	800949e <HAL_PCD_EP_DB_Transmit+0x268>
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d117      	bne.n	800949e <HAL_PCD_EP_DB_Transmit+0x268>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	623b      	str	r3, [r7, #32]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800947c:	b29b      	uxth	r3, r3
 800947e:	461a      	mov	r2, r3
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	4413      	add	r3, r2
 8009484:	623b      	str	r3, [r7, #32]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	011a      	lsls	r2, r3, #4
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	4413      	add	r3, r2
 8009490:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	b29a      	uxth	r2, r3
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6959      	ldr	r1, [r3, #20]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	891a      	ldrh	r2, [r3, #8]
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f005 f946 	bl	800e73e <USB_WritePMA>
 80094b2:	e130      	b.n	8009716 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094bc:	b29b      	uxth	r3, r3
 80094be:	461a      	mov	r2, r3
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	4413      	add	r3, r2
 80094c8:	3306      	adds	r3, #6
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	6812      	ldr	r2, [r2, #0]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094dc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	699a      	ldr	r2, [r3, #24]
 80094e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d306      	bcc.n	80094f6 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	619a      	str	r2, [r3, #24]
 80094f4:	e002      	b.n	80094fc <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2200      	movs	r2, #0
 80094fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d12c      	bne.n	800955e <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	4619      	mov	r1, r3
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f00b f8e7 	bl	80146de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009516:	2b00      	cmp	r3, #0
 8009518:	f040 80fd 	bne.w	8009716 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29b      	uxth	r3, r3
 800952e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009536:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	441a      	add	r2, r3
 8009546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800954c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009558:	b29b      	uxth	r3, r3
 800955a:	8013      	strh	r3, [r2, #0]
 800955c:	e0db      	b.n	8009716 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11f      	bne.n	80095a8 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800957e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009582:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	441a      	add	r2, r3
 8009592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800959c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	f040 80b1 	bne.w	8009716 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	695a      	ldr	r2, [r3, #20]
 80095b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095ba:	441a      	add	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	69da      	ldr	r2, [r3, #28]
 80095c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095c6:	441a      	add	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	6a1a      	ldr	r2, [r3, #32]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d309      	bcc.n	80095ec <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	6a1a      	ldr	r2, [r3, #32]
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	1ad2      	subs	r2, r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	621a      	str	r2, [r3, #32]
 80095ea:	e014      	b.n	8009616 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80095f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095f6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009600:	e009      	b.n	8009616 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2200      	movs	r2, #0
 800960c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	637b      	str	r3, [r7, #52]	; 0x34
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d155      	bne.n	80096d0 <HAL_PCD_EP_DB_Transmit+0x49a>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	647b      	str	r3, [r7, #68]	; 0x44
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009632:	b29b      	uxth	r3, r3
 8009634:	461a      	mov	r2, r3
 8009636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009638:	4413      	add	r3, r2
 800963a:	647b      	str	r3, [r7, #68]	; 0x44
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	011a      	lsls	r2, r3, #4
 8009642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009644:	4413      	add	r3, r2
 8009646:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800964a:	643b      	str	r3, [r7, #64]	; 0x40
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	2b00      	cmp	r3, #0
 8009650:	d112      	bne.n	8009678 <HAL_PCD_EP_DB_Transmit+0x442>
 8009652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b29b      	uxth	r3, r3
 8009658:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800965c:	b29a      	uxth	r2, r3
 800965e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009660:	801a      	strh	r2, [r3, #0]
 8009662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	b29b      	uxth	r3, r3
 8009668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800966c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009670:	b29a      	uxth	r2, r3
 8009672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009674:	801a      	strh	r2, [r3, #0]
 8009676:	e044      	b.n	8009702 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	2b3e      	cmp	r3, #62	; 0x3e
 800967c:	d811      	bhi.n	80096a2 <HAL_PCD_EP_DB_Transmit+0x46c>
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <HAL_PCD_EP_DB_Transmit+0x45e>
 800968e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009690:	3301      	adds	r3, #1
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009696:	b29b      	uxth	r3, r3
 8009698:	029b      	lsls	r3, r3, #10
 800969a:	b29a      	uxth	r2, r3
 800969c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	e02f      	b.n	8009702 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	095b      	lsrs	r3, r3, #5
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	f003 031f 	and.w	r3, r3, #31
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d102      	bne.n	80096b8 <HAL_PCD_EP_DB_Transmit+0x482>
 80096b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b4:	3b01      	subs	r3, #1
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	029b      	lsls	r3, r3, #10
 80096be:	b29b      	uxth	r3, r3
 80096c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	e018      	b.n	8009702 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d114      	bne.n	8009702 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	461a      	mov	r2, r3
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	4413      	add	r3, r2
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	011a      	lsls	r2, r3, #4
 80096f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f2:	4413      	add	r3, r2
 80096f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096f8:	633b      	str	r3, [r7, #48]	; 0x30
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	6959      	ldr	r1, [r3, #20]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	895a      	ldrh	r2, [r3, #10]
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	b29b      	uxth	r3, r3
 8009712:	f005 f814 	bl	800e73e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29b      	uxth	r3, r3
 8009728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009730:	823b      	strh	r3, [r7, #16]
 8009732:	8a3b      	ldrh	r3, [r7, #16]
 8009734:	f083 0310 	eor.w	r3, r3, #16
 8009738:	823b      	strh	r3, [r7, #16]
 800973a:	8a3b      	ldrh	r3, [r7, #16]
 800973c:	f083 0320 	eor.w	r3, r3, #32
 8009740:	823b      	strh	r3, [r7, #16]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	441a      	add	r2, r3
 8009750:	8a3b      	ldrh	r3, [r7, #16]
 8009752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800975a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800975e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009762:	b29b      	uxth	r3, r3
 8009764:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3748      	adds	r7, #72	; 0x48
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	607b      	str	r3, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	817b      	strh	r3, [r7, #10]
 800977e:	4613      	mov	r3, r2
 8009780:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009782:	897b      	ldrh	r3, [r7, #10]
 8009784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009788:	b29b      	uxth	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800978e:	897b      	ldrh	r3, [r7, #10]
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	4413      	add	r3, r2
 80097a2:	617b      	str	r3, [r7, #20]
 80097a4:	e009      	b.n	80097ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80097a6:	897a      	ldrh	r2, [r7, #10]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80097ba:	893b      	ldrh	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d107      	bne.n	80097d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	80da      	strh	r2, [r3, #6]
 80097ce:	e00b      	b.n	80097e8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2201      	movs	r2, #1
 80097d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	b29a      	uxth	r2, r3
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	0c1b      	lsrs	r3, r3, #16
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bc80      	pop	{r7}
 80097f2:	4770      	bx	lr

080097f4 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	bc80      	pop	{r7}
 8009808:	4770      	bx	lr
	...

0800980c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e31d      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800981e:	4b94      	ldr	r3, [pc, #592]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 030c 	and.w	r3, r3, #12
 8009826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009828:	4b91      	ldr	r3, [pc, #580]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009830:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d07b      	beq.n	8009936 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b08      	cmp	r3, #8
 8009842:	d006      	beq.n	8009852 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2b0c      	cmp	r3, #12
 8009848:	d10f      	bne.n	800986a <HAL_RCC_OscConfig+0x5e>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009850:	d10b      	bne.n	800986a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009852:	4b87      	ldr	r3, [pc, #540]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d06a      	beq.n	8009934 <HAL_RCC_OscConfig+0x128>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d166      	bne.n	8009934 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e2f7      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d106      	bne.n	8009880 <HAL_RCC_OscConfig+0x74>
 8009872:	4b7f      	ldr	r3, [pc, #508]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a7e      	ldr	r2, [pc, #504]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	e02d      	b.n	80098dc <HAL_RCC_OscConfig+0xd0>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10c      	bne.n	80098a2 <HAL_RCC_OscConfig+0x96>
 8009888:	4b79      	ldr	r3, [pc, #484]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a78      	ldr	r2, [pc, #480]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 800988e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	4b76      	ldr	r3, [pc, #472]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a75      	ldr	r2, [pc, #468]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 800989a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	e01c      	b.n	80098dc <HAL_RCC_OscConfig+0xd0>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b05      	cmp	r3, #5
 80098a8:	d10c      	bne.n	80098c4 <HAL_RCC_OscConfig+0xb8>
 80098aa:	4b71      	ldr	r3, [pc, #452]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a70      	ldr	r2, [pc, #448]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4b6e      	ldr	r3, [pc, #440]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a6d      	ldr	r2, [pc, #436]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e00b      	b.n	80098dc <HAL_RCC_OscConfig+0xd0>
 80098c4:	4b6a      	ldr	r3, [pc, #424]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a69      	ldr	r2, [pc, #420]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	4b67      	ldr	r3, [pc, #412]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a66      	ldr	r2, [pc, #408]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80098d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d013      	beq.n	800990c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e4:	f7fd f892 	bl	8006a0c <HAL_GetTick>
 80098e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098ea:	e008      	b.n	80098fe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098ec:	f7fd f88e 	bl	8006a0c <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b64      	cmp	r3, #100	; 0x64
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e2ad      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098fe:	4b5c      	ldr	r3, [pc, #368]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0f0      	beq.n	80098ec <HAL_RCC_OscConfig+0xe0>
 800990a:	e014      	b.n	8009936 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800990c:	f7fd f87e 	bl	8006a0c <HAL_GetTick>
 8009910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009914:	f7fd f87a 	bl	8006a0c <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b64      	cmp	r3, #100	; 0x64
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e299      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009926:	4b52      	ldr	r3, [pc, #328]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f0      	bne.n	8009914 <HAL_RCC_OscConfig+0x108>
 8009932:	e000      	b.n	8009936 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0302 	and.w	r3, r3, #2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d05a      	beq.n	80099f8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b04      	cmp	r3, #4
 8009946:	d005      	beq.n	8009954 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b0c      	cmp	r3, #12
 800994c:	d119      	bne.n	8009982 <HAL_RCC_OscConfig+0x176>
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d116      	bne.n	8009982 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009954:	4b46      	ldr	r3, [pc, #280]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0302 	and.w	r3, r3, #2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <HAL_RCC_OscConfig+0x160>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d001      	beq.n	800996c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e276      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800996c:	4b40      	ldr	r3, [pc, #256]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	493d      	ldr	r1, [pc, #244]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 800997c:	4313      	orrs	r3, r2
 800997e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009980:	e03a      	b.n	80099f8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d020      	beq.n	80099cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800998a:	4b3a      	ldr	r3, [pc, #232]	; (8009a74 <HAL_RCC_OscConfig+0x268>)
 800998c:	2201      	movs	r2, #1
 800998e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009990:	f7fd f83c 	bl	8006a0c <HAL_GetTick>
 8009994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009996:	e008      	b.n	80099aa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009998:	f7fd f838 	bl	8006a0c <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e257      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099aa:	4b31      	ldr	r3, [pc, #196]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0f0      	beq.n	8009998 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099b6:	4b2e      	ldr	r3, [pc, #184]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	021b      	lsls	r3, r3, #8
 80099c4:	492a      	ldr	r1, [pc, #168]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	604b      	str	r3, [r1, #4]
 80099ca:	e015      	b.n	80099f8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099cc:	4b29      	ldr	r3, [pc, #164]	; (8009a74 <HAL_RCC_OscConfig+0x268>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099d2:	f7fd f81b 	bl	8006a0c <HAL_GetTick>
 80099d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099d8:	e008      	b.n	80099ec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099da:	f7fd f817 	bl	8006a0c <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d901      	bls.n	80099ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e236      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099ec:	4b20      	ldr	r3, [pc, #128]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1f0      	bne.n	80099da <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 80b8 	beq.w	8009b76 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d170      	bne.n	8009aee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009a0c:	4b18      	ldr	r3, [pc, #96]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <HAL_RCC_OscConfig+0x218>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e21a      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1a      	ldr	r2, [r3, #32]
 8009a28:	4b11      	ldr	r3, [pc, #68]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d921      	bls.n	8009a78 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fcad 	bl	800a398 <RCC_SetFlashLatencyFromMSIRange>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e208      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a48:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	4906      	ldr	r1, [pc, #24]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	061b      	lsls	r3, r3, #24
 8009a68:	4901      	ldr	r1, [pc, #4]	; (8009a70 <HAL_RCC_OscConfig+0x264>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	604b      	str	r3, [r1, #4]
 8009a6e:	e020      	b.n	8009ab2 <HAL_RCC_OscConfig+0x2a6>
 8009a70:	40023800 	.word	0x40023800
 8009a74:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a78:	4ba4      	ldr	r3, [pc, #656]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	49a1      	ldr	r1, [pc, #644]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a8a:	4ba0      	ldr	r3, [pc, #640]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	061b      	lsls	r3, r3, #24
 8009a98:	499c      	ldr	r1, [pc, #624]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 fc78 	bl	800a398 <RCC_SetFlashLatencyFromMSIRange>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e1d3      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	0b5b      	lsrs	r3, r3, #13
 8009ab8:	3301      	adds	r3, #1
 8009aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009abe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009ac2:	4a92      	ldr	r2, [pc, #584]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009ac4:	6892      	ldr	r2, [r2, #8]
 8009ac6:	0912      	lsrs	r2, r2, #4
 8009ac8:	f002 020f 	and.w	r2, r2, #15
 8009acc:	4990      	ldr	r1, [pc, #576]	; (8009d10 <HAL_RCC_OscConfig+0x504>)
 8009ace:	5c8a      	ldrb	r2, [r1, r2]
 8009ad0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009ad2:	4a90      	ldr	r2, [pc, #576]	; (8009d14 <HAL_RCC_OscConfig+0x508>)
 8009ad4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009ad6:	4b90      	ldr	r3, [pc, #576]	; (8009d18 <HAL_RCC_OscConfig+0x50c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7f9 ffea 	bl	8003ab4 <HAL_InitTick>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d045      	beq.n	8009b76 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	e1b5      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d029      	beq.n	8009b4a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009af6:	4b89      	ldr	r3, [pc, #548]	; (8009d1c <HAL_RCC_OscConfig+0x510>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009afc:	f7fc ff86 	bl	8006a0c <HAL_GetTick>
 8009b00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009b02:	e008      	b.n	8009b16 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b04:	f7fc ff82 	bl	8006a0c <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e1a1      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009b16:	4b7d      	ldr	r3, [pc, #500]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0f0      	beq.n	8009b04 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b22:	4b7a      	ldr	r3, [pc, #488]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	4977      	ldr	r1, [pc, #476]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b34:	4b75      	ldr	r3, [pc, #468]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	061b      	lsls	r3, r3, #24
 8009b42:	4972      	ldr	r1, [pc, #456]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	604b      	str	r3, [r1, #4]
 8009b48:	e015      	b.n	8009b76 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009b4a:	4b74      	ldr	r3, [pc, #464]	; (8009d1c <HAL_RCC_OscConfig+0x510>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b50:	f7fc ff5c 	bl	8006a0c <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b58:	f7fc ff58 	bl	8006a0c <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e177      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009b6a:	4b68      	ldr	r3, [pc, #416]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f0      	bne.n	8009b58 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0308 	and.w	r3, r3, #8
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d030      	beq.n	8009be4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d016      	beq.n	8009bb8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b8a:	4b65      	ldr	r3, [pc, #404]	; (8009d20 <HAL_RCC_OscConfig+0x514>)
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b90:	f7fc ff3c 	bl	8006a0c <HAL_GetTick>
 8009b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b96:	e008      	b.n	8009baa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b98:	f7fc ff38 	bl	8006a0c <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e157      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009baa:	4b58      	ldr	r3, [pc, #352]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0f0      	beq.n	8009b98 <HAL_RCC_OscConfig+0x38c>
 8009bb6:	e015      	b.n	8009be4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bb8:	4b59      	ldr	r3, [pc, #356]	; (8009d20 <HAL_RCC_OscConfig+0x514>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bbe:	f7fc ff25 	bl	8006a0c <HAL_GetTick>
 8009bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bc4:	e008      	b.n	8009bd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bc6:	f7fc ff21 	bl	8006a0c <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d901      	bls.n	8009bd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e140      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bd8:	4b4c      	ldr	r3, [pc, #304]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1f0      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 80b5 	beq.w	8009d5c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bf6:	4b45      	ldr	r3, [pc, #276]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10d      	bne.n	8009c1e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c02:	4b42      	ldr	r3, [pc, #264]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	4a41      	ldr	r2, [pc, #260]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c0c:	6253      	str	r3, [r2, #36]	; 0x24
 8009c0e:	4b3f      	ldr	r3, [pc, #252]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c16:	60bb      	str	r3, [r7, #8]
 8009c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c1e:	4b41      	ldr	r3, [pc, #260]	; (8009d24 <HAL_RCC_OscConfig+0x518>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d118      	bne.n	8009c5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c2a:	4b3e      	ldr	r3, [pc, #248]	; (8009d24 <HAL_RCC_OscConfig+0x518>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a3d      	ldr	r2, [pc, #244]	; (8009d24 <HAL_RCC_OscConfig+0x518>)
 8009c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c36:	f7fc fee9 	bl	8006a0c <HAL_GetTick>
 8009c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c3c:	e008      	b.n	8009c50 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c3e:	f7fc fee5 	bl	8006a0c <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b64      	cmp	r3, #100	; 0x64
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e104      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c50:	4b34      	ldr	r3, [pc, #208]	; (8009d24 <HAL_RCC_OscConfig+0x518>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0f0      	beq.n	8009c3e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d106      	bne.n	8009c72 <HAL_RCC_OscConfig+0x466>
 8009c64:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	4a28      	ldr	r2, [pc, #160]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c6e:	6353      	str	r3, [r2, #52]	; 0x34
 8009c70:	e02d      	b.n	8009cce <HAL_RCC_OscConfig+0x4c2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10c      	bne.n	8009c94 <HAL_RCC_OscConfig+0x488>
 8009c7a:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7e:	4a23      	ldr	r2, [pc, #140]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c84:	6353      	str	r3, [r2, #52]	; 0x34
 8009c86:	4b21      	ldr	r3, [pc, #132]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	4a20      	ldr	r2, [pc, #128]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c90:	6353      	str	r3, [r2, #52]	; 0x34
 8009c92:	e01c      	b.n	8009cce <HAL_RCC_OscConfig+0x4c2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	2b05      	cmp	r3, #5
 8009c9a:	d10c      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x4aa>
 8009c9c:	4b1b      	ldr	r3, [pc, #108]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca0:	4a1a      	ldr	r2, [pc, #104]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ca6:	6353      	str	r3, [r2, #52]	; 0x34
 8009ca8:	4b18      	ldr	r3, [pc, #96]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cac:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb2:	6353      	str	r3, [r2, #52]	; 0x34
 8009cb4:	e00b      	b.n	8009cce <HAL_RCC_OscConfig+0x4c2>
 8009cb6:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cba:	4a14      	ldr	r2, [pc, #80]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc0:	6353      	str	r3, [r2, #52]	; 0x34
 8009cc2:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc6:	4a11      	ldr	r2, [pc, #68]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ccc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d015      	beq.n	8009d02 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cd6:	f7fc fe99 	bl	8006a0c <HAL_GetTick>
 8009cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cdc:	e00a      	b.n	8009cf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cde:	f7fc fe95 	bl	8006a0c <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d901      	bls.n	8009cf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e0b2      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cf4:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <HAL_RCC_OscConfig+0x500>)
 8009cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0ee      	beq.n	8009cde <HAL_RCC_OscConfig+0x4d2>
 8009d00:	e023      	b.n	8009d4a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d02:	f7fc fe83 	bl	8006a0c <HAL_GetTick>
 8009d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d08:	e019      	b.n	8009d3e <HAL_RCC_OscConfig+0x532>
 8009d0a:	bf00      	nop
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	0801a830 	.word	0x0801a830
 8009d14:	20000000 	.word	0x20000000
 8009d18:	20000010 	.word	0x20000010
 8009d1c:	42470020 	.word	0x42470020
 8009d20:	42470680 	.word	0x42470680
 8009d24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d28:	f7fc fe70 	bl	8006a0c <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e08d      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d3e:	4b49      	ldr	r3, [pc, #292]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1ee      	bne.n	8009d28 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009d4a:	7ffb      	ldrb	r3, [r7, #31]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d105      	bne.n	8009d5c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d50:	4b44      	ldr	r3, [pc, #272]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	4a43      	ldr	r2, [pc, #268]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d5a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d079      	beq.n	8009e58 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2b0c      	cmp	r3, #12
 8009d68:	d056      	beq.n	8009e18 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d13b      	bne.n	8009dea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d72:	4b3d      	ldr	r3, [pc, #244]	; (8009e68 <HAL_RCC_OscConfig+0x65c>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d78:	f7fc fe48 	bl	8006a0c <HAL_GetTick>
 8009d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d80:	f7fc fe44 	bl	8006a0c <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e063      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d92:	4b34      	ldr	r3, [pc, #208]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1f0      	bne.n	8009d80 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d9e:	4b31      	ldr	r3, [pc, #196]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	4319      	orrs	r1, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db4:	430b      	orrs	r3, r1
 8009db6:	492b      	ldr	r1, [pc, #172]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dbc:	4b2a      	ldr	r3, [pc, #168]	; (8009e68 <HAL_RCC_OscConfig+0x65c>)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dc2:	f7fc fe23 	bl	8006a0c <HAL_GetTick>
 8009dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dc8:	e008      	b.n	8009ddc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dca:	f7fc fe1f 	bl	8006a0c <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d901      	bls.n	8009ddc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e03e      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ddc:	4b21      	ldr	r3, [pc, #132]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d0f0      	beq.n	8009dca <HAL_RCC_OscConfig+0x5be>
 8009de8:	e036      	b.n	8009e58 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dea:	4b1f      	ldr	r3, [pc, #124]	; (8009e68 <HAL_RCC_OscConfig+0x65c>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009df0:	f7fc fe0c 	bl	8006a0c <HAL_GetTick>
 8009df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009df6:	e008      	b.n	8009e0a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009df8:	f7fc fe08 	bl	8006a0c <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d901      	bls.n	8009e0a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e027      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e0a:	4b16      	ldr	r3, [pc, #88]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1f0      	bne.n	8009df8 <HAL_RCC_OscConfig+0x5ec>
 8009e16:	e01f      	b.n	8009e58 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e01a      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009e24:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <HAL_RCC_OscConfig+0x658>)
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d10d      	bne.n	8009e54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d106      	bne.n	8009e54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d001      	beq.n	8009e58 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e000      	b.n	8009e5a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3720      	adds	r7, #32
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	40023800 	.word	0x40023800
 8009e68:	42470060 	.word	0x42470060

08009e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e11a      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e80:	4b8f      	ldr	r3, [pc, #572]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d919      	bls.n	8009ec2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d105      	bne.n	8009ea0 <HAL_RCC_ClockConfig+0x34>
 8009e94:	4b8a      	ldr	r3, [pc, #552]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a89      	ldr	r2, [pc, #548]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 8009e9a:	f043 0304 	orr.w	r3, r3, #4
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	4b87      	ldr	r3, [pc, #540]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f023 0201 	bic.w	r2, r3, #1
 8009ea8:	4985      	ldr	r1, [pc, #532]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eb0:	4b83      	ldr	r3, [pc, #524]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d001      	beq.n	8009ec2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e0f9      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ece:	4b7d      	ldr	r3, [pc, #500]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	497a      	ldr	r1, [pc, #488]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009edc:	4313      	orrs	r3, r2
 8009ede:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 808e 	beq.w	800a00a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d107      	bne.n	8009f06 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ef6:	4b73      	ldr	r3, [pc, #460]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d121      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e0d7      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d107      	bne.n	8009f1e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f0e:	4b6d      	ldr	r3, [pc, #436]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d115      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e0cb      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d107      	bne.n	8009f36 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f26:	4b67      	ldr	r3, [pc, #412]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d109      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e0bf      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009f36:	4b63      	ldr	r3, [pc, #396]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e0b7      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f46:	4b5f      	ldr	r3, [pc, #380]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f023 0203 	bic.w	r2, r3, #3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	495c      	ldr	r1, [pc, #368]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f58:	f7fc fd58 	bl	8006a0c <HAL_GetTick>
 8009f5c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d112      	bne.n	8009f8c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f66:	e00a      	b.n	8009f7e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f68:	f7fc fd50 	bl	8006a0c <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d901      	bls.n	8009f7e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e09b      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f7e:	4b51      	ldr	r3, [pc, #324]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f003 030c 	and.w	r3, r3, #12
 8009f86:	2b08      	cmp	r3, #8
 8009f88:	d1ee      	bne.n	8009f68 <HAL_RCC_ClockConfig+0xfc>
 8009f8a:	e03e      	b.n	800a00a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d112      	bne.n	8009fba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f94:	e00a      	b.n	8009fac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f96:	f7fc fd39 	bl	8006a0c <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e084      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009fac:	4b45      	ldr	r3, [pc, #276]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f003 030c 	and.w	r3, r3, #12
 8009fb4:	2b0c      	cmp	r3, #12
 8009fb6:	d1ee      	bne.n	8009f96 <HAL_RCC_ClockConfig+0x12a>
 8009fb8:	e027      	b.n	800a00a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d11d      	bne.n	8009ffe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fc2:	e00a      	b.n	8009fda <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fc4:	f7fc fd22 	bl	8006a0c <HAL_GetTick>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d901      	bls.n	8009fda <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e06d      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fda:	4b3a      	ldr	r3, [pc, #232]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f003 030c 	and.w	r3, r3, #12
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d1ee      	bne.n	8009fc4 <HAL_RCC_ClockConfig+0x158>
 8009fe6:	e010      	b.n	800a00a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fe8:	f7fc fd10 	bl	8006a0c <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d901      	bls.n	8009ffe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e05b      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009ffe:	4b31      	ldr	r3, [pc, #196]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f003 030c 	and.w	r3, r3, #12
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1ee      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a00a:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d219      	bcs.n	800a04c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d105      	bne.n	800a02a <HAL_RCC_ClockConfig+0x1be>
 800a01e:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a27      	ldr	r2, [pc, #156]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 800a024:	f043 0304 	orr.w	r3, r3, #4
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	4b25      	ldr	r3, [pc, #148]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f023 0201 	bic.w	r2, r3, #1
 800a032:	4923      	ldr	r1, [pc, #140]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	4313      	orrs	r3, r2
 800a038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a03a:	4b21      	ldr	r3, [pc, #132]	; (800a0c0 <HAL_RCC_ClockConfig+0x254>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d001      	beq.n	800a04c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e034      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b00      	cmp	r3, #0
 800a056:	d008      	beq.n	800a06a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a058:	4b1a      	ldr	r3, [pc, #104]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	4917      	ldr	r1, [pc, #92]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 800a066:	4313      	orrs	r3, r2
 800a068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d009      	beq.n	800a08a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a076:	4b13      	ldr	r3, [pc, #76]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	490f      	ldr	r1, [pc, #60]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 800a086:	4313      	orrs	r3, r2
 800a088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a08a:	f000 f859 	bl	800a140 <HAL_RCC_GetSysClockFreq>
 800a08e:	4601      	mov	r1, r0
 800a090:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <HAL_RCC_ClockConfig+0x258>)
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	091b      	lsrs	r3, r3, #4
 800a096:	f003 030f 	and.w	r3, r3, #15
 800a09a:	4a0b      	ldr	r2, [pc, #44]	; (800a0c8 <HAL_RCC_ClockConfig+0x25c>)
 800a09c:	5cd3      	ldrb	r3, [r2, r3]
 800a09e:	fa21 f303 	lsr.w	r3, r1, r3
 800a0a2:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <HAL_RCC_ClockConfig+0x260>)
 800a0a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <HAL_RCC_ClockConfig+0x264>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7f9 fd02 	bl	8003ab4 <HAL_InitTick>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	72fb      	strb	r3, [r7, #11]

  return status;
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	40023c00 	.word	0x40023c00
 800a0c4:	40023800 	.word	0x40023800
 800a0c8:	0801a830 	.word	0x0801a830
 800a0cc:	20000000 	.word	0x20000000
 800a0d0:	20000010 	.word	0x20000010

0800a0d4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08a      	sub	sp, #40	; 0x28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800a0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0f0:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800a0f6:	4b10      	ldr	r3, [pc, #64]	; (800a138 <HAL_RCC_MCOConfig+0x64>)
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	4a0f      	ldr	r2, [pc, #60]	; (800a138 <HAL_RCC_MCOConfig+0x64>)
 800a0fc:	f043 0301 	orr.w	r3, r3, #1
 800a100:	61d3      	str	r3, [r2, #28]
 800a102:	4b0d      	ldr	r3, [pc, #52]	; (800a138 <HAL_RCC_MCOConfig+0x64>)
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800a10e:	f107 0314 	add.w	r3, r7, #20
 800a112:	4619      	mov	r1, r3
 800a114:	4809      	ldr	r0, [pc, #36]	; (800a13c <HAL_RCC_MCOConfig+0x68>)
 800a116:	f7fd fd5b 	bl	8007bd0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800a11a:	4b07      	ldr	r3, [pc, #28]	; (800a138 <HAL_RCC_MCOConfig+0x64>)
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	430b      	orrs	r3, r1
 800a128:	4903      	ldr	r1, [pc, #12]	; (800a138 <HAL_RCC_MCOConfig+0x64>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	608b      	str	r3, [r1, #8]
}
 800a12e:	bf00      	nop
 800a130:	3728      	adds	r7, #40	; 0x28
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	40023800 	.word	0x40023800
 800a13c:	40020000 	.word	0x40020000

0800a140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800a146:	4b5f      	ldr	r3, [pc, #380]	; (800a2c4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f003 030c 	and.w	r3, r3, #12
 800a152:	2b08      	cmp	r3, #8
 800a154:	d007      	beq.n	800a166 <HAL_RCC_GetSysClockFreq+0x26>
 800a156:	2b0c      	cmp	r3, #12
 800a158:	d008      	beq.n	800a16c <HAL_RCC_GetSysClockFreq+0x2c>
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	f040 809f 	bne.w	800a29e <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a160:	4b59      	ldr	r3, [pc, #356]	; (800a2c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a162:	613b      	str	r3, [r7, #16]
      break;
 800a164:	e0a9      	b.n	800a2ba <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a166:	4b59      	ldr	r3, [pc, #356]	; (800a2cc <HAL_RCC_GetSysClockFreq+0x18c>)
 800a168:	613b      	str	r3, [r7, #16]
      break;
 800a16a:	e0a6      	b.n	800a2ba <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	0c9b      	lsrs	r3, r3, #18
 800a170:	f003 030f 	and.w	r3, r3, #15
 800a174:	4a56      	ldr	r2, [pc, #344]	; (800a2d0 <HAL_RCC_GetSysClockFreq+0x190>)
 800a176:	5cd3      	ldrb	r3, [r2, r3]
 800a178:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	0d9b      	lsrs	r3, r3, #22
 800a17e:	f003 0303 	and.w	r3, r3, #3
 800a182:	3301      	adds	r3, #1
 800a184:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a186:	4b4f      	ldr	r3, [pc, #316]	; (800a2c4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d041      	beq.n	800a216 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	461d      	mov	r5, r3
 800a196:	f04f 0600 	mov.w	r6, #0
 800a19a:	4629      	mov	r1, r5
 800a19c:	4632      	mov	r2, r6
 800a19e:	f04f 0300 	mov.w	r3, #0
 800a1a2:	f04f 0400 	mov.w	r4, #0
 800a1a6:	0154      	lsls	r4, r2, #5
 800a1a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a1ac:	014b      	lsls	r3, r1, #5
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	1b49      	subs	r1, r1, r5
 800a1b4:	eb62 0206 	sbc.w	r2, r2, r6
 800a1b8:	f04f 0300 	mov.w	r3, #0
 800a1bc:	f04f 0400 	mov.w	r4, #0
 800a1c0:	0194      	lsls	r4, r2, #6
 800a1c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a1c6:	018b      	lsls	r3, r1, #6
 800a1c8:	1a5b      	subs	r3, r3, r1
 800a1ca:	eb64 0402 	sbc.w	r4, r4, r2
 800a1ce:	f04f 0100 	mov.w	r1, #0
 800a1d2:	f04f 0200 	mov.w	r2, #0
 800a1d6:	00e2      	lsls	r2, r4, #3
 800a1d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a1dc:	00d9      	lsls	r1, r3, #3
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	195b      	adds	r3, r3, r5
 800a1e4:	eb44 0406 	adc.w	r4, r4, r6
 800a1e8:	f04f 0100 	mov.w	r1, #0
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	0262      	lsls	r2, r4, #9
 800a1f2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a1f6:	0259      	lsls	r1, r3, #9
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4614      	mov	r4, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	4621      	mov	r1, r4
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f04f 0400 	mov.w	r4, #0
 800a206:	461a      	mov	r2, r3
 800a208:	4623      	mov	r3, r4
 800a20a:	f7f6 fccf 	bl	8000bac <__aeabi_uldivmod>
 800a20e:	4603      	mov	r3, r0
 800a210:	460c      	mov	r4, r1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	e040      	b.n	800a298 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	461d      	mov	r5, r3
 800a21a:	f04f 0600 	mov.w	r6, #0
 800a21e:	4629      	mov	r1, r5
 800a220:	4632      	mov	r2, r6
 800a222:	f04f 0300 	mov.w	r3, #0
 800a226:	f04f 0400 	mov.w	r4, #0
 800a22a:	0154      	lsls	r4, r2, #5
 800a22c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a230:	014b      	lsls	r3, r1, #5
 800a232:	4619      	mov	r1, r3
 800a234:	4622      	mov	r2, r4
 800a236:	1b49      	subs	r1, r1, r5
 800a238:	eb62 0206 	sbc.w	r2, r2, r6
 800a23c:	f04f 0300 	mov.w	r3, #0
 800a240:	f04f 0400 	mov.w	r4, #0
 800a244:	0194      	lsls	r4, r2, #6
 800a246:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a24a:	018b      	lsls	r3, r1, #6
 800a24c:	1a5b      	subs	r3, r3, r1
 800a24e:	eb64 0402 	sbc.w	r4, r4, r2
 800a252:	f04f 0100 	mov.w	r1, #0
 800a256:	f04f 0200 	mov.w	r2, #0
 800a25a:	00e2      	lsls	r2, r4, #3
 800a25c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a260:	00d9      	lsls	r1, r3, #3
 800a262:	460b      	mov	r3, r1
 800a264:	4614      	mov	r4, r2
 800a266:	195b      	adds	r3, r3, r5
 800a268:	eb44 0406 	adc.w	r4, r4, r6
 800a26c:	f04f 0100 	mov.w	r1, #0
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	02a2      	lsls	r2, r4, #10
 800a276:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a27a:	0299      	lsls	r1, r3, #10
 800a27c:	460b      	mov	r3, r1
 800a27e:	4614      	mov	r4, r2
 800a280:	4618      	mov	r0, r3
 800a282:	4621      	mov	r1, r4
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f04f 0400 	mov.w	r4, #0
 800a28a:	461a      	mov	r2, r3
 800a28c:	4623      	mov	r3, r4
 800a28e:	f7f6 fc8d 	bl	8000bac <__aeabi_uldivmod>
 800a292:	4603      	mov	r3, r0
 800a294:	460c      	mov	r4, r1
 800a296:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	613b      	str	r3, [r7, #16]
      break;
 800a29c:	e00d      	b.n	800a2ba <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a29e:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	0b5b      	lsrs	r3, r3, #13
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b6:	613b      	str	r3, [r7, #16]
      break;
 800a2b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2ba:	693b      	ldr	r3, [r7, #16]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	371c      	adds	r7, #28
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c4:	40023800 	.word	0x40023800
 800a2c8:	00f42400 	.word	0x00f42400
 800a2cc:	007a1200 	.word	0x007a1200
 800a2d0:	0801a824 	.word	0x0801a824

0800a2d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2d8:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a2da:	681b      	ldr	r3, [r3, #0]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr
 800a2e4:	20000000 	.word	0x20000000

0800a2e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a2ec:	f7ff fff2 	bl	800a2d4 <HAL_RCC_GetHCLKFreq>
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	f003 0307 	and.w	r3, r3, #7
 800a2fc:	4a03      	ldr	r2, [pc, #12]	; (800a30c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2fe:	5cd3      	ldrb	r3, [r2, r3]
 800a300:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a304:	4618      	mov	r0, r3
 800a306:	bd80      	pop	{r7, pc}
 800a308:	40023800 	.word	0x40023800
 800a30c:	0801a840 	.word	0x0801a840

0800a310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a314:	f7ff ffde 	bl	800a2d4 <HAL_RCC_GetHCLKFreq>
 800a318:	4601      	mov	r1, r0
 800a31a:	4b05      	ldr	r3, [pc, #20]	; (800a330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	0adb      	lsrs	r3, r3, #11
 800a320:	f003 0307 	and.w	r3, r3, #7
 800a324:	4a03      	ldr	r2, [pc, #12]	; (800a334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a326:	5cd3      	ldrb	r3, [r2, r3]
 800a328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	40023800 	.word	0x40023800
 800a334:	0801a840 	.word	0x0801a840

0800a338 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	220f      	movs	r2, #15
 800a346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a348:	4b11      	ldr	r3, [pc, #68]	; (800a390 <HAL_RCC_GetClockConfig+0x58>)
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f003 0203 	and.w	r2, r3, #3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a354:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <HAL_RCC_GetClockConfig+0x58>)
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <HAL_RCC_GetClockConfig+0x58>)
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a36c:	4b08      	ldr	r3, [pc, #32]	; (800a390 <HAL_RCC_GetClockConfig+0x58>)
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	08db      	lsrs	r3, r3, #3
 800a372:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a37a:	4b06      	ldr	r3, [pc, #24]	; (800a394 <HAL_RCC_GetClockConfig+0x5c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0201 	and.w	r2, r3, #1
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	601a      	str	r2, [r3, #0]
}
 800a386:	bf00      	nop
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bc80      	pop	{r7}
 800a38e:	4770      	bx	lr
 800a390:	40023800 	.word	0x40023800
 800a394:	40023c00 	.word	0x40023c00

0800a398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a3a4:	4b29      	ldr	r3, [pc, #164]	; (800a44c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d12c      	bne.n	800a40a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a3b0:	4b26      	ldr	r3, [pc, #152]	; (800a44c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d005      	beq.n	800a3c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a3bc:	4b24      	ldr	r3, [pc, #144]	; (800a450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800a3c4:	617b      	str	r3, [r7, #20]
 800a3c6:	e016      	b.n	800a3f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3c8:	4b20      	ldr	r3, [pc, #128]	; (800a44c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	4a1f      	ldr	r2, [pc, #124]	; (800a44c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a3ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3d2:	6253      	str	r3, [r2, #36]	; 0x24
 800a3d4:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a3e0:	4b1b      	ldr	r3, [pc, #108]	; (800a450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800a3e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3ea:	4b18      	ldr	r3, [pc, #96]	; (800a44c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	4a17      	ldr	r2, [pc, #92]	; (800a44c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a3f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3f4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800a3fc:	d105      	bne.n	800a40a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a404:	d101      	bne.n	800a40a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800a406:	2301      	movs	r3, #1
 800a408:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d105      	bne.n	800a41c <RCC_SetFlashLatencyFromMSIRange+0x84>
 800a410:	4b10      	ldr	r3, [pc, #64]	; (800a454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a0f      	ldr	r2, [pc, #60]	; (800a454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a416:	f043 0304 	orr.w	r3, r3, #4
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f023 0201 	bic.w	r2, r3, #1
 800a424:	490b      	ldr	r1, [pc, #44]	; (800a454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4313      	orrs	r3, r2
 800a42a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a42c:	4b09      	ldr	r3, [pc, #36]	; (800a454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	429a      	cmp	r2, r3
 800a438:	d001      	beq.n	800a43e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	40023800 	.word	0x40023800
 800a450:	40007000 	.word	0x40007000
 800a454:	40023c00 	.word	0x40023c00

0800a458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e07b      	b.n	800a562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d108      	bne.n	800a484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a47a:	d009      	beq.n	800a490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	61da      	str	r2, [r3, #28]
 800a482:	e005      	b.n	800a490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7f8 fab8 	bl	8002a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0302 	and.w	r3, r3, #2
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a500:	431a      	orrs	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a514:	ea42 0103 	orr.w	r1, r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	0c1b      	lsrs	r3, r3, #16
 800a52e:	f003 0104 	and.w	r1, r3, #4
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	f003 0210 	and.w	r2, r3, #16
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	430a      	orrs	r2, r1
 800a540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69da      	ldr	r2, [r3, #28]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b088      	sub	sp, #32
 800a56e:	af00      	add	r7, sp, #0
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	60b9      	str	r1, [r7, #8]
 800a574:	603b      	str	r3, [r7, #0]
 800a576:	4613      	mov	r3, r2
 800a578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_SPI_Transmit+0x22>
 800a588:	2302      	movs	r3, #2
 800a58a:	e126      	b.n	800a7da <HAL_SPI_Transmit+0x270>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a594:	f7fc fa3a 	bl	8006a0c <HAL_GetTick>
 800a598:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a59a:	88fb      	ldrh	r3, [r7, #6]
 800a59c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d002      	beq.n	800a5b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a5ae:	e10b      	b.n	800a7c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <HAL_SPI_Transmit+0x52>
 800a5b6:	88fb      	ldrh	r3, [r7, #6]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a5c0:	e102      	b.n	800a7c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2203      	movs	r2, #3
 800a5c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	88fa      	ldrh	r2, [r7, #6]
 800a5da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	88fa      	ldrh	r2, [r7, #6]
 800a5e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a608:	d10f      	bne.n	800a62a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a628:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a634:	2b40      	cmp	r3, #64	; 0x40
 800a636:	d007      	beq.n	800a648 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a650:	d14b      	bne.n	800a6ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <HAL_SPI_Transmit+0xf6>
 800a65a:	8afb      	ldrh	r3, [r7, #22]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d13e      	bne.n	800a6de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a664:	881a      	ldrh	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	1c9a      	adds	r2, r3, #2
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	3b01      	subs	r3, #1
 800a67e:	b29a      	uxth	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a684:	e02b      	b.n	800a6de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b02      	cmp	r3, #2
 800a692:	d112      	bne.n	800a6ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a698:	881a      	ldrh	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a4:	1c9a      	adds	r2, r3, #2
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	86da      	strh	r2, [r3, #54]	; 0x36
 800a6b8:	e011      	b.n	800a6de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6ba:	f7fc f9a7 	bl	8006a0c <HAL_GetTick>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d803      	bhi.n	800a6d2 <HAL_SPI_Transmit+0x168>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d0:	d102      	bne.n	800a6d8 <HAL_SPI_Transmit+0x16e>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a6dc:	e074      	b.n	800a7c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1ce      	bne.n	800a686 <HAL_SPI_Transmit+0x11c>
 800a6e8:	e04c      	b.n	800a784 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <HAL_SPI_Transmit+0x18e>
 800a6f2:	8afb      	ldrh	r3, [r7, #22]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d140      	bne.n	800a77a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	330c      	adds	r3, #12
 800a702:	7812      	ldrb	r2, [r2, #0]
 800a704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a71e:	e02c      	b.n	800a77a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d113      	bne.n	800a756 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	330c      	adds	r3, #12
 800a738:	7812      	ldrb	r2, [r2, #0]
 800a73a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	3b01      	subs	r3, #1
 800a74e:	b29a      	uxth	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	86da      	strh	r2, [r3, #54]	; 0x36
 800a754:	e011      	b.n	800a77a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a756:	f7fc f959 	bl	8006a0c <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d803      	bhi.n	800a76e <HAL_SPI_Transmit+0x204>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d102      	bne.n	800a774 <HAL_SPI_Transmit+0x20a>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d102      	bne.n	800a77a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a778:	e026      	b.n	800a7c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a77e:	b29b      	uxth	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1cd      	bne.n	800a720 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f8b3 	bl	800a8f4 <SPI_EndRxTxTransaction>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2220      	movs	r2, #32
 800a798:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	613b      	str	r3, [r7, #16]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	613b      	str	r3, [r7, #16]
 800a7b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	77fb      	strb	r3, [r7, #31]
 800a7c4:	e000      	b.n	800a7c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a7c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a7d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3720      	adds	r7, #32
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	603b      	str	r3, [r7, #0]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a7f4:	f7fc f90a 	bl	8006a0c <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	1a9b      	subs	r3, r3, r2
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	4413      	add	r3, r2
 800a802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a804:	f7fc f902 	bl	8006a0c <HAL_GetTick>
 800a808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a80a:	4b39      	ldr	r3, [pc, #228]	; (800a8f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	015b      	lsls	r3, r3, #5
 800a810:	0d1b      	lsrs	r3, r3, #20
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	fb02 f303 	mul.w	r3, r2, r3
 800a818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a81a:	e054      	b.n	800a8c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a822:	d050      	beq.n	800a8c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a824:	f7fc f8f2 	bl	8006a0c <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	69fa      	ldr	r2, [r7, #28]
 800a830:	429a      	cmp	r2, r3
 800a832:	d902      	bls.n	800a83a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d13d      	bne.n	800a8b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a852:	d111      	bne.n	800a878 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a85c:	d004      	beq.n	800a868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a866:	d107      	bne.n	800a878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a880:	d10f      	bne.n	800a8a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e017      	b.n	800a8e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	bf0c      	ite	eq
 800a8d6:	2301      	moveq	r3, #1
 800a8d8:	2300      	movne	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	461a      	mov	r2, r3
 800a8de:	79fb      	ldrb	r3, [r7, #7]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d19b      	bne.n	800a81c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3720      	adds	r7, #32
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000000 	.word	0x20000000

0800a8f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a900:	4b1b      	ldr	r3, [pc, #108]	; (800a970 <SPI_EndRxTxTransaction+0x7c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1b      	ldr	r2, [pc, #108]	; (800a974 <SPI_EndRxTxTransaction+0x80>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	0d5b      	lsrs	r3, r3, #21
 800a90c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a910:	fb02 f303 	mul.w	r3, r2, r3
 800a914:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a91e:	d112      	bne.n	800a946 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2200      	movs	r2, #0
 800a928:	2180      	movs	r1, #128	; 0x80
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff ff5a 	bl	800a7e4 <SPI_WaitFlagStateUntilTimeout>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d016      	beq.n	800a964 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a93a:	f043 0220 	orr.w	r2, r3, #32
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e00f      	b.n	800a966 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	3b01      	subs	r3, #1
 800a950:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a95c:	2b80      	cmp	r3, #128	; 0x80
 800a95e:	d0f2      	beq.n	800a946 <SPI_EndRxTxTransaction+0x52>
 800a960:	e000      	b.n	800a964 <SPI_EndRxTxTransaction+0x70>
        break;
 800a962:	bf00      	nop
  }

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20000000 	.word	0x20000000
 800a974:	165e9f81 	.word	0x165e9f81

0800a978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e031      	b.n	800a9ee <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7f8 fade 	bl	8002f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	f000 fe8c 	bl	800b6d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d001      	beq.n	800aa10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e032      	b.n	800aa76 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2202      	movs	r2, #2
 800aa14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa20:	d00e      	beq.n	800aa40 <HAL_TIM_Base_Start+0x48>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a16      	ldr	r2, [pc, #88]	; (800aa80 <HAL_TIM_Base_Start+0x88>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d009      	beq.n	800aa40 <HAL_TIM_Base_Start+0x48>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a14      	ldr	r2, [pc, #80]	; (800aa84 <HAL_TIM_Base_Start+0x8c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d004      	beq.n	800aa40 <HAL_TIM_Base_Start+0x48>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a13      	ldr	r2, [pc, #76]	; (800aa88 <HAL_TIM_Base_Start+0x90>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d111      	bne.n	800aa64 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b06      	cmp	r3, #6
 800aa50:	d010      	beq.n	800aa74 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f042 0201 	orr.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa62:	e007      	b.n	800aa74 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bc80      	pop	{r7}
 800aa7e:	4770      	bx	lr
 800aa80:	40000400 	.word	0x40000400
 800aa84:	40000800 	.word	0x40000800
 800aa88:	40010800 	.word	0x40010800

0800aa8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6a1a      	ldr	r2, [r3, #32]
 800aa9a:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d107      	bne.n	800aab4 <HAL_TIM_Base_Stop+0x28>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f022 0201 	bic.w	r2, r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bc80      	pop	{r7}
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d001      	beq.n	800aae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e03a      	b.n	800ab56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68da      	ldr	r2, [r3, #12]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0201 	orr.w	r2, r2, #1
 800aaf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab00:	d00e      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x58>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a16      	ldr	r2, [pc, #88]	; (800ab60 <HAL_TIM_Base_Start_IT+0x98>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d009      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x58>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a14      	ldr	r2, [pc, #80]	; (800ab64 <HAL_TIM_Base_Start_IT+0x9c>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d004      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x58>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a13      	ldr	r2, [pc, #76]	; (800ab68 <HAL_TIM_Base_Start_IT+0xa0>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d111      	bne.n	800ab44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f003 0307 	and.w	r3, r3, #7
 800ab2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b06      	cmp	r3, #6
 800ab30:	d010      	beq.n	800ab54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0201 	orr.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab42:	e007      	b.n	800ab54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bc80      	pop	{r7}
 800ab5e:	4770      	bx	lr
 800ab60:	40000400 	.word	0x40000400
 800ab64:	40000800 	.word	0x40000800
 800ab68:	40010800 	.word	0x40010800

0800ab6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 0201 	bic.w	r2, r2, #1
 800ab82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6a1a      	ldr	r2, [r3, #32]
 800ab8a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab8e:	4013      	ands	r3, r2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d107      	bne.n	800aba4 <HAL_TIM_Base_Stop_IT+0x38>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0201 	bic.w	r2, r2, #1
 800aba2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bc80      	pop	{r7}
 800abb6:	4770      	bx	lr

0800abb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e031      	b.n	800ac2e <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f829 	bl	800ac36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f000 fd6c 	bl	800b6d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bc80      	pop	{r7}
 800ac46:	4770      	bx	lr

0800ac48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d109      	bne.n	800ac6c <HAL_TIM_PWM_Start+0x24>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	bf14      	ite	ne
 800ac64:	2301      	movne	r3, #1
 800ac66:	2300      	moveq	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	e022      	b.n	800acb2 <HAL_TIM_PWM_Start+0x6a>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d109      	bne.n	800ac86 <HAL_TIM_PWM_Start+0x3e>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	bf14      	ite	ne
 800ac7e:	2301      	movne	r3, #1
 800ac80:	2300      	moveq	r3, #0
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	e015      	b.n	800acb2 <HAL_TIM_PWM_Start+0x6a>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d109      	bne.n	800aca0 <HAL_TIM_PWM_Start+0x58>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	bf14      	ite	ne
 800ac98:	2301      	movne	r3, #1
 800ac9a:	2300      	moveq	r3, #0
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	e008      	b.n	800acb2 <HAL_TIM_PWM_Start+0x6a>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	bf14      	ite	ne
 800acac:	2301      	movne	r3, #1
 800acae:	2300      	moveq	r3, #0
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e051      	b.n	800ad5e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d104      	bne.n	800acca <HAL_TIM_PWM_Start+0x82>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800acc8:	e013      	b.n	800acf2 <HAL_TIM_PWM_Start+0xaa>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b04      	cmp	r3, #4
 800acce:	d104      	bne.n	800acda <HAL_TIM_PWM_Start+0x92>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800acd8:	e00b      	b.n	800acf2 <HAL_TIM_PWM_Start+0xaa>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b08      	cmp	r3, #8
 800acde:	d104      	bne.n	800acea <HAL_TIM_PWM_Start+0xa2>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ace8:	e003      	b.n	800acf2 <HAL_TIM_PWM_Start+0xaa>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2202      	movs	r2, #2
 800acee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2201      	movs	r2, #1
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 fff9 	bl	800bcf2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad08:	d00e      	beq.n	800ad28 <HAL_TIM_PWM_Start+0xe0>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a16      	ldr	r2, [pc, #88]	; (800ad68 <HAL_TIM_PWM_Start+0x120>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d009      	beq.n	800ad28 <HAL_TIM_PWM_Start+0xe0>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a14      	ldr	r2, [pc, #80]	; (800ad6c <HAL_TIM_PWM_Start+0x124>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d004      	beq.n	800ad28 <HAL_TIM_PWM_Start+0xe0>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a13      	ldr	r2, [pc, #76]	; (800ad70 <HAL_TIM_PWM_Start+0x128>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d111      	bne.n	800ad4c <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f003 0307 	and.w	r3, r3, #7
 800ad32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b06      	cmp	r3, #6
 800ad38:	d010      	beq.n	800ad5c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f042 0201 	orr.w	r2, r2, #1
 800ad48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad4a:	e007      	b.n	800ad5c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f042 0201 	orr.w	r2, r2, #1
 800ad5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	40000400 	.word	0x40000400
 800ad6c:	40000800 	.word	0x40000800
 800ad70:	40010800 	.word	0x40010800

0800ad74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e031      	b.n	800adea <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f829 	bl	800adf2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3304      	adds	r3, #4
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f000 fc8e 	bl	800b6d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bc80      	pop	{r7}
 800ae02:	4770      	bx	lr

0800ae04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d104      	bne.n	800ae1e <HAL_TIM_IC_Start_IT+0x1a>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	e013      	b.n	800ae46 <HAL_TIM_IC_Start_IT+0x42>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	d104      	bne.n	800ae2e <HAL_TIM_IC_Start_IT+0x2a>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	e00b      	b.n	800ae46 <HAL_TIM_IC_Start_IT+0x42>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d104      	bne.n	800ae3e <HAL_TIM_IC_Start_IT+0x3a>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	e003      	b.n	800ae46 <HAL_TIM_IC_Start_IT+0x42>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d001      	beq.n	800ae52 <HAL_TIM_IC_Start_IT+0x4e>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e097      	b.n	800af82 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <HAL_TIM_IC_Start_IT+0x5e>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ae60:	e013      	b.n	800ae8a <HAL_TIM_IC_Start_IT+0x86>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	d104      	bne.n	800ae72 <HAL_TIM_IC_Start_IT+0x6e>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800ae70:	e00b      	b.n	800ae8a <HAL_TIM_IC_Start_IT+0x86>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b08      	cmp	r3, #8
 800ae76:	d104      	bne.n	800ae82 <HAL_TIM_IC_Start_IT+0x7e>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae80:	e003      	b.n	800ae8a <HAL_TIM_IC_Start_IT+0x86>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2202      	movs	r2, #2
 800ae86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b0c      	cmp	r3, #12
 800ae8e:	d841      	bhi.n	800af14 <HAL_TIM_IC_Start_IT+0x110>
 800ae90:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <HAL_TIM_IC_Start_IT+0x94>)
 800ae92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae96:	bf00      	nop
 800ae98:	0800aecd 	.word	0x0800aecd
 800ae9c:	0800af15 	.word	0x0800af15
 800aea0:	0800af15 	.word	0x0800af15
 800aea4:	0800af15 	.word	0x0800af15
 800aea8:	0800aedf 	.word	0x0800aedf
 800aeac:	0800af15 	.word	0x0800af15
 800aeb0:	0800af15 	.word	0x0800af15
 800aeb4:	0800af15 	.word	0x0800af15
 800aeb8:	0800aef1 	.word	0x0800aef1
 800aebc:	0800af15 	.word	0x0800af15
 800aec0:	0800af15 	.word	0x0800af15
 800aec4:	0800af15 	.word	0x0800af15
 800aec8:	0800af03 	.word	0x0800af03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f042 0202 	orr.w	r2, r2, #2
 800aeda:	60da      	str	r2, [r3, #12]
      break;
 800aedc:	e01b      	b.n	800af16 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68da      	ldr	r2, [r3, #12]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f042 0204 	orr.w	r2, r2, #4
 800aeec:	60da      	str	r2, [r3, #12]
      break;
 800aeee:	e012      	b.n	800af16 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68da      	ldr	r2, [r3, #12]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f042 0208 	orr.w	r2, r2, #8
 800aefe:	60da      	str	r2, [r3, #12]
      break;
 800af00:	e009      	b.n	800af16 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68da      	ldr	r2, [r3, #12]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0210 	orr.w	r2, r2, #16
 800af10:	60da      	str	r2, [r3, #12]
      break;
 800af12:	e000      	b.n	800af16 <HAL_TIM_IC_Start_IT+0x112>
    }

    default:
      break;
 800af14:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2201      	movs	r2, #1
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fee7 	bl	800bcf2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af2c:	d00e      	beq.n	800af4c <HAL_TIM_IC_Start_IT+0x148>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a16      	ldr	r2, [pc, #88]	; (800af8c <HAL_TIM_IC_Start_IT+0x188>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d009      	beq.n	800af4c <HAL_TIM_IC_Start_IT+0x148>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a14      	ldr	r2, [pc, #80]	; (800af90 <HAL_TIM_IC_Start_IT+0x18c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d004      	beq.n	800af4c <HAL_TIM_IC_Start_IT+0x148>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a13      	ldr	r2, [pc, #76]	; (800af94 <HAL_TIM_IC_Start_IT+0x190>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d111      	bne.n	800af70 <HAL_TIM_IC_Start_IT+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2b06      	cmp	r3, #6
 800af5c:	d010      	beq.n	800af80 <HAL_TIM_IC_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f042 0201 	orr.w	r2, r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af6e:	e007      	b.n	800af80 <HAL_TIM_IC_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f042 0201 	orr.w	r2, r2, #1
 800af7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	40000400 	.word	0x40000400
 800af90:	40000800 	.word	0x40000800
 800af94:	40010800 	.word	0x40010800

0800af98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e08f      	b.n	800b0cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d106      	bne.n	800afc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7f7 ffa7 	bl	8002f14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2202      	movs	r2, #2
 800afca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	6812      	ldr	r2, [r2, #0]
 800afd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afdc:	f023 0307 	bic.w	r3, r3, #7
 800afe0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3304      	adds	r3, #4
 800afea:	4619      	mov	r1, r3
 800afec:	4610      	mov	r0, r2
 800afee:	f000 fb71 	bl	800b6d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	4313      	orrs	r3, r2
 800b012:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b01a:	f023 0303 	bic.w	r3, r3, #3
 800b01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	689a      	ldr	r2, [r3, #8]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	021b      	lsls	r3, r3, #8
 800b02a:	4313      	orrs	r3, r2
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	4313      	orrs	r3, r2
 800b030:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b038:	f023 030c 	bic.w	r3, r3, #12
 800b03c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	68da      	ldr	r2, [r3, #12]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	021b      	lsls	r3, r3, #8
 800b054:	4313      	orrs	r3, r2
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	4313      	orrs	r3, r2
 800b05a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	011a      	lsls	r2, r3, #4
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	031b      	lsls	r3, r3, #12
 800b068:	4313      	orrs	r3, r2
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b076:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b07e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	685a      	ldr	r2, [r3, #4]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	4313      	orrs	r3, r2
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4313      	orrs	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d122      	bne.n	800b130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d11b      	bne.n	800b130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f06f 0202 	mvn.w	r2, #2
 800b100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	f003 0303 	and.w	r3, r3, #3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7f8 fb7e 	bl	8003818 <HAL_TIM_IC_CaptureCallback>
 800b11c:	e005      	b.n	800b12a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fabd 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fac3 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d122      	bne.n	800b184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b04      	cmp	r3, #4
 800b14a:	d11b      	bne.n	800b184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f06f 0204 	mvn.w	r2, #4
 800b154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2202      	movs	r2, #2
 800b15a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7f8 fb54 	bl	8003818 <HAL_TIM_IC_CaptureCallback>
 800b170:	e005      	b.n	800b17e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fa93 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fa99 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f003 0308 	and.w	r3, r3, #8
 800b18e:	2b08      	cmp	r3, #8
 800b190:	d122      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0308 	and.w	r3, r3, #8
 800b19c:	2b08      	cmp	r3, #8
 800b19e:	d11b      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f06f 0208 	mvn.w	r2, #8
 800b1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2204      	movs	r2, #4
 800b1ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7f8 fb2a 	bl	8003818 <HAL_TIM_IC_CaptureCallback>
 800b1c4:	e005      	b.n	800b1d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa69 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fa6f 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0310 	and.w	r3, r3, #16
 800b1e2:	2b10      	cmp	r3, #16
 800b1e4:	d122      	bne.n	800b22c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0310 	and.w	r3, r3, #16
 800b1f0:	2b10      	cmp	r3, #16
 800b1f2:	d11b      	bne.n	800b22c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0210 	mvn.w	r2, #16
 800b1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2208      	movs	r2, #8
 800b202:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7f8 fb00 	bl	8003818 <HAL_TIM_IC_CaptureCallback>
 800b218:	e005      	b.n	800b226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fa3f 	bl	800b69e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa45 	bl	800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b01      	cmp	r3, #1
 800b238:	d10e      	bne.n	800b258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	2b01      	cmp	r3, #1
 800b246:	d107      	bne.n	800b258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0201 	mvn.w	r2, #1
 800b250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7f8 fab6 	bl	80037c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b262:	2b40      	cmp	r3, #64	; 0x40
 800b264:	d10e      	bne.n	800b284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b270:	2b40      	cmp	r3, #64	; 0x40
 800b272:	d107      	bne.n	800b284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fa1f 	bl	800b6c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d101      	bne.n	800b2a6 <HAL_TIM_IC_ConfigChannel+0x1a>
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e082      	b.n	800b3ac <HAL_TIM_IC_ConfigChannel+0x120>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d11b      	bne.n	800b2ec <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6819      	ldr	r1, [r3, #0]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f000 fb6c 	bl	800b9a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	699a      	ldr	r2, [r3, #24]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f022 020c 	bic.w	r2, r2, #12
 800b2d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6999      	ldr	r1, [r3, #24]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	689a      	ldr	r2, [r3, #8]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	619a      	str	r2, [r3, #24]
 800b2ea:	e05a      	b.n	800b3a2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	d11c      	bne.n	800b32c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	6819      	ldr	r1, [r3, #0]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	f000 fbdb 	bl	800babc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	699a      	ldr	r2, [r3, #24]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b314:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6999      	ldr	r1, [r3, #24]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	021a      	lsls	r2, r3, #8
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	619a      	str	r2, [r3, #24]
 800b32a:	e03a      	b.n	800b3a2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b08      	cmp	r3, #8
 800b330:	d11b      	bne.n	800b36a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	6819      	ldr	r1, [r3, #0]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	f000 fc26 	bl	800bb92 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	69da      	ldr	r2, [r3, #28]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f022 020c 	bic.w	r2, r2, #12
 800b354:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	69d9      	ldr	r1, [r3, #28]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	61da      	str	r2, [r3, #28]
 800b368:	e01b      	b.n	800b3a2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	f000 fc45 	bl	800bc08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	69da      	ldr	r2, [r3, #28]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b38c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69d9      	ldr	r1, [r3, #28]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	021a      	lsls	r2, r3, #8
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d101      	bne.n	800b3ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	e0ac      	b.n	800b528 <HAL_TIM_PWM_ConfigChannel+0x174>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b0c      	cmp	r3, #12
 800b3da:	f200 809f 	bhi.w	800b51c <HAL_TIM_PWM_ConfigChannel+0x168>
 800b3de:	a201      	add	r2, pc, #4	; (adr r2, 800b3e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b419 	.word	0x0800b419
 800b3e8:	0800b51d 	.word	0x0800b51d
 800b3ec:	0800b51d 	.word	0x0800b51d
 800b3f0:	0800b51d 	.word	0x0800b51d
 800b3f4:	0800b459 	.word	0x0800b459
 800b3f8:	0800b51d 	.word	0x0800b51d
 800b3fc:	0800b51d 	.word	0x0800b51d
 800b400:	0800b51d 	.word	0x0800b51d
 800b404:	0800b49b 	.word	0x0800b49b
 800b408:	0800b51d 	.word	0x0800b51d
 800b40c:	0800b51d 	.word	0x0800b51d
 800b410:	0800b51d 	.word	0x0800b51d
 800b414:	0800b4db 	.word	0x0800b4db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68b9      	ldr	r1, [r7, #8]
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 f9c8 	bl	800b7b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	699a      	ldr	r2, [r3, #24]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f042 0208 	orr.w	r2, r2, #8
 800b432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699a      	ldr	r2, [r3, #24]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f022 0204 	bic.w	r2, r2, #4
 800b442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6999      	ldr	r1, [r3, #24]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	430a      	orrs	r2, r1
 800b454:	619a      	str	r2, [r3, #24]
      break;
 800b456:	e062      	b.n	800b51e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f9e4 	bl	800b82c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	699a      	ldr	r2, [r3, #24]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	699a      	ldr	r2, [r3, #24]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6999      	ldr	r1, [r3, #24]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	021a      	lsls	r2, r3, #8
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	619a      	str	r2, [r3, #24]
      break;
 800b498:	e041      	b.n	800b51e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68b9      	ldr	r1, [r7, #8]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fa01 	bl	800b8a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	69da      	ldr	r2, [r3, #28]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f042 0208 	orr.w	r2, r2, #8
 800b4b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69da      	ldr	r2, [r3, #28]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f022 0204 	bic.w	r2, r2, #4
 800b4c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	69d9      	ldr	r1, [r3, #28]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	61da      	str	r2, [r3, #28]
      break;
 800b4d8:	e021      	b.n	800b51e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 fa1e 	bl	800b922 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	69da      	ldr	r2, [r3, #28]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	69da      	ldr	r2, [r3, #28]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	69d9      	ldr	r1, [r3, #28]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	021a      	lsls	r2, r3, #8
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	430a      	orrs	r2, r1
 800b518:	61da      	str	r2, [r3, #28]
      break;
 800b51a:	e000      	b.n	800b51e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b51c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b540:	2b01      	cmp	r3, #1
 800b542:	d101      	bne.n	800b548 <HAL_TIM_ConfigClockSource+0x18>
 800b544:	2302      	movs	r3, #2
 800b546:	e0a6      	b.n	800b696 <HAL_TIM_ConfigClockSource+0x166>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b566:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b56e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b40      	cmp	r3, #64	; 0x40
 800b57e:	d067      	beq.n	800b650 <HAL_TIM_ConfigClockSource+0x120>
 800b580:	2b40      	cmp	r3, #64	; 0x40
 800b582:	d80b      	bhi.n	800b59c <HAL_TIM_ConfigClockSource+0x6c>
 800b584:	2b10      	cmp	r3, #16
 800b586:	d073      	beq.n	800b670 <HAL_TIM_ConfigClockSource+0x140>
 800b588:	2b10      	cmp	r3, #16
 800b58a:	d802      	bhi.n	800b592 <HAL_TIM_ConfigClockSource+0x62>
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d06f      	beq.n	800b670 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b590:	e078      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b592:	2b20      	cmp	r3, #32
 800b594:	d06c      	beq.n	800b670 <HAL_TIM_ConfigClockSource+0x140>
 800b596:	2b30      	cmp	r3, #48	; 0x30
 800b598:	d06a      	beq.n	800b670 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b59a:	e073      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b59c:	2b70      	cmp	r3, #112	; 0x70
 800b59e:	d00d      	beq.n	800b5bc <HAL_TIM_ConfigClockSource+0x8c>
 800b5a0:	2b70      	cmp	r3, #112	; 0x70
 800b5a2:	d804      	bhi.n	800b5ae <HAL_TIM_ConfigClockSource+0x7e>
 800b5a4:	2b50      	cmp	r3, #80	; 0x50
 800b5a6:	d033      	beq.n	800b610 <HAL_TIM_ConfigClockSource+0xe0>
 800b5a8:	2b60      	cmp	r3, #96	; 0x60
 800b5aa:	d041      	beq.n	800b630 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b5ac:	e06a      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b2:	d066      	beq.n	800b682 <HAL_TIM_ConfigClockSource+0x152>
 800b5b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b8:	d017      	beq.n	800b5ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b5ba:	e063      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	6899      	ldr	r1, [r3, #8]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f000 fb72 	bl	800bcb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	609a      	str	r2, [r3, #8]
      break;
 800b5e8:	e04c      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6818      	ldr	r0, [r3, #0]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	6899      	ldr	r1, [r3, #8]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	f000 fb5b 	bl	800bcb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	689a      	ldr	r2, [r3, #8]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b60c:	609a      	str	r2, [r3, #8]
      break;
 800b60e:	e039      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	6859      	ldr	r1, [r3, #4]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	461a      	mov	r2, r3
 800b61e:	f000 fa1f 	bl	800ba60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2150      	movs	r1, #80	; 0x50
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fb29 	bl	800bc80 <TIM_ITRx_SetConfig>
      break;
 800b62e:	e029      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	6859      	ldr	r1, [r3, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	461a      	mov	r2, r3
 800b63e:	f000 fa79 	bl	800bb34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2160      	movs	r1, #96	; 0x60
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 fb19 	bl	800bc80 <TIM_ITRx_SetConfig>
      break;
 800b64e:	e019      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	6859      	ldr	r1, [r3, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	461a      	mov	r2, r3
 800b65e:	f000 f9ff 	bl	800ba60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2140      	movs	r1, #64	; 0x40
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fb09 	bl	800bc80 <TIM_ITRx_SetConfig>
      break;
 800b66e:	e009      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4619      	mov	r1, r3
 800b67a:	4610      	mov	r0, r2
 800b67c:	f000 fb00 	bl	800bc80 <TIM_ITRx_SetConfig>
        break;
 800b680:	e000      	b.n	800b684 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b083      	sub	sp, #12
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bc80      	pop	{r7}
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr

0800b6c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6ca:	bf00      	nop
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bc80      	pop	{r7}
 800b6d2:	4770      	bx	lr

0800b6d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ea:	d00f      	beq.n	800b70c <TIM_Base_SetConfig+0x38>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a2b      	ldr	r2, [pc, #172]	; (800b79c <TIM_Base_SetConfig+0xc8>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d00b      	beq.n	800b70c <TIM_Base_SetConfig+0x38>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a2a      	ldr	r2, [pc, #168]	; (800b7a0 <TIM_Base_SetConfig+0xcc>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d007      	beq.n	800b70c <TIM_Base_SetConfig+0x38>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a29      	ldr	r2, [pc, #164]	; (800b7a4 <TIM_Base_SetConfig+0xd0>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d003      	beq.n	800b70c <TIM_Base_SetConfig+0x38>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a28      	ldr	r2, [pc, #160]	; (800b7a8 <TIM_Base_SetConfig+0xd4>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d108      	bne.n	800b71e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b724:	d017      	beq.n	800b756 <TIM_Base_SetConfig+0x82>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4a1c      	ldr	r2, [pc, #112]	; (800b79c <TIM_Base_SetConfig+0xc8>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d013      	beq.n	800b756 <TIM_Base_SetConfig+0x82>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a1b      	ldr	r2, [pc, #108]	; (800b7a0 <TIM_Base_SetConfig+0xcc>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d00f      	beq.n	800b756 <TIM_Base_SetConfig+0x82>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4a1a      	ldr	r2, [pc, #104]	; (800b7a4 <TIM_Base_SetConfig+0xd0>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d00b      	beq.n	800b756 <TIM_Base_SetConfig+0x82>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a19      	ldr	r2, [pc, #100]	; (800b7a8 <TIM_Base_SetConfig+0xd4>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d007      	beq.n	800b756 <TIM_Base_SetConfig+0x82>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a18      	ldr	r2, [pc, #96]	; (800b7ac <TIM_Base_SetConfig+0xd8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d003      	beq.n	800b756 <TIM_Base_SetConfig+0x82>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a17      	ldr	r2, [pc, #92]	; (800b7b0 <TIM_Base_SetConfig+0xdc>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d108      	bne.n	800b768 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b75c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	4313      	orrs	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	4313      	orrs	r3, r2
 800b774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	615a      	str	r2, [r3, #20]
}
 800b792:	bf00      	nop
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	bc80      	pop	{r7}
 800b79a:	4770      	bx	lr
 800b79c:	40000400 	.word	0x40000400
 800b7a0:	40000800 	.word	0x40000800
 800b7a4:	40000c00 	.word	0x40000c00
 800b7a8:	40010800 	.word	0x40010800
 800b7ac:	40010c00 	.word	0x40010c00
 800b7b0:	40011000 	.word	0x40011000

0800b7b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a1b      	ldr	r3, [r3, #32]
 800b7c2:	f023 0201 	bic.w	r2, r3, #1
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 0303 	bic.w	r3, r3, #3
 800b7ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	f023 0302 	bic.w	r3, r3, #2
 800b7fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	4313      	orrs	r3, r2
 800b806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	621a      	str	r2, [r3, #32]
}
 800b822:	bf00      	nop
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	bc80      	pop	{r7}
 800b82a:	4770      	bx	lr

0800b82c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	f023 0210 	bic.w	r2, r3, #16
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	021b      	lsls	r3, r3, #8
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f023 0320 	bic.w	r3, r3, #32
 800b876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	011b      	lsls	r3, r3, #4
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	4313      	orrs	r3, r2
 800b882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	621a      	str	r2, [r3, #32]
}
 800b89e:	bf00      	nop
 800b8a0:	371c      	adds	r7, #28
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bc80      	pop	{r7}
 800b8a6:	4770      	bx	lr

0800b8a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f023 0303 	bic.w	r3, r3, #3
 800b8de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	621a      	str	r2, [r3, #32]
}
 800b918:	bf00      	nop
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bc80      	pop	{r7}
 800b920:	4770      	bx	lr

0800b922 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b922:	b480      	push	{r7}
 800b924:	b087      	sub	sp, #28
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a1b      	ldr	r3, [r3, #32]
 800b930:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b950:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b958:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	021b      	lsls	r3, r3, #8
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4313      	orrs	r3, r2
 800b964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b96c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	031b      	lsls	r3, r3, #12
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	4313      	orrs	r3, r2
 800b978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	621a      	str	r2, [r3, #32]
}
 800b994:	bf00      	nop
 800b996:	371c      	adds	r7, #28
 800b998:	46bd      	mov	sp, r7
 800b99a:	bc80      	pop	{r7}
 800b99c:	4770      	bx	lr
	...

0800b9a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	f023 0201 	bic.w	r2, r3, #1
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a1b      	ldr	r3, [r3, #32]
 800b9c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9cc:	d00f      	beq.n	800b9ee <TIM_TI1_SetConfig+0x4e>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <TIM_TI1_SetConfig+0xb0>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00b      	beq.n	800b9ee <TIM_TI1_SetConfig+0x4e>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	4a1e      	ldr	r2, [pc, #120]	; (800ba54 <TIM_TI1_SetConfig+0xb4>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d007      	beq.n	800b9ee <TIM_TI1_SetConfig+0x4e>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4a1d      	ldr	r2, [pc, #116]	; (800ba58 <TIM_TI1_SetConfig+0xb8>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d003      	beq.n	800b9ee <TIM_TI1_SetConfig+0x4e>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	4a1c      	ldr	r2, [pc, #112]	; (800ba5c <TIM_TI1_SetConfig+0xbc>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d101      	bne.n	800b9f2 <TIM_TI1_SetConfig+0x52>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <TIM_TI1_SetConfig+0x54>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d008      	beq.n	800ba0a <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	e003      	b.n	800ba12 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f043 0301 	orr.w	r3, r3, #1
 800ba10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	011b      	lsls	r3, r3, #4
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	f023 030a 	bic.w	r3, r3, #10
 800ba2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	f003 030a 	and.w	r3, r3, #10
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	621a      	str	r2, [r3, #32]
}
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bc80      	pop	{r7}
 800ba4e:	4770      	bx	lr
 800ba50:	40000400 	.word	0x40000400
 800ba54:	40000800 	.word	0x40000800
 800ba58:	40000c00 	.word	0x40000c00
 800ba5c:	40010800 	.word	0x40010800

0800ba60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b087      	sub	sp, #28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	f023 0201 	bic.w	r2, r3, #1
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	011b      	lsls	r3, r3, #4
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f023 030a 	bic.w	r3, r3, #10
 800ba9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	621a      	str	r2, [r3, #32]
}
 800bab2:	bf00      	nop
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bc80      	pop	{r7}
 800baba:	4770      	bx	lr

0800babc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	f023 0210 	bic.w	r2, r3, #16
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	021b      	lsls	r3, r3, #8
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bafa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	031b      	lsls	r3, r3, #12
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	011b      	lsls	r3, r3, #4
 800bb14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	621a      	str	r2, [r3, #32]
}
 800bb2a:	bf00      	nop
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bc80      	pop	{r7}
 800bb32:	4770      	bx	lr

0800bb34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b087      	sub	sp, #28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6a1b      	ldr	r3, [r3, #32]
 800bb44:	f023 0210 	bic.w	r2, r3, #16
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	031b      	lsls	r3, r3, #12
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	011b      	lsls	r3, r3, #4
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	621a      	str	r2, [r3, #32]
}
 800bb88:	bf00      	nop
 800bb8a:	371c      	adds	r7, #28
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bc80      	pop	{r7}
 800bb90:	4770      	bx	lr

0800bb92 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb92:	b480      	push	{r7}
 800bb94:	b087      	sub	sp, #28
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	60f8      	str	r0, [r7, #12]
 800bb9a:	60b9      	str	r1, [r7, #8]
 800bb9c:	607a      	str	r2, [r7, #4]
 800bb9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	011b      	lsls	r3, r3, #4
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bbe2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	021b      	lsls	r3, r3, #8
 800bbe8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	621a      	str	r2, [r3, #32]
}
 800bbfe:	bf00      	nop
 800bc00:	371c      	adds	r7, #28
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bc80      	pop	{r7}
 800bc06:	4770      	bx	lr

0800bc08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6a1b      	ldr	r3, [r3, #32]
 800bc2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	021b      	lsls	r3, r3, #8
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	031b      	lsls	r3, r3, #12
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bc5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	031b      	lsls	r3, r3, #12
 800bc60:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	693a      	ldr	r2, [r7, #16]
 800bc74:	621a      	str	r2, [r3, #32]
}
 800bc76:	bf00      	nop
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bc80      	pop	{r7}
 800bc7e:	4770      	bx	lr

0800bc80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	f043 0307 	orr.w	r3, r3, #7
 800bca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	609a      	str	r2, [r3, #8]
}
 800bcaa:	bf00      	nop
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bc80      	pop	{r7}
 800bcb2:	4770      	bx	lr

0800bcb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	021a      	lsls	r2, r3, #8
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	609a      	str	r2, [r3, #8]
}
 800bce8:	bf00      	nop
 800bcea:	371c      	adds	r7, #28
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bc80      	pop	{r7}
 800bcf0:	4770      	bx	lr

0800bcf2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b087      	sub	sp, #28
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	60f8      	str	r0, [r7, #12]
 800bcfa:	60b9      	str	r1, [r7, #8]
 800bcfc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f003 031f 	and.w	r3, r3, #31
 800bd04:	2201      	movs	r2, #1
 800bd06:	fa02 f303 	lsl.w	r3, r2, r3
 800bd0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6a1a      	ldr	r2, [r3, #32]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	43db      	mvns	r3, r3
 800bd14:	401a      	ands	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6a1a      	ldr	r2, [r3, #32]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f003 031f 	and.w	r3, r3, #31
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	fa01 f303 	lsl.w	r3, r1, r3
 800bd2a:	431a      	orrs	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	621a      	str	r2, [r3, #32]
}
 800bd30:	bf00      	nop
 800bd32:	371c      	adds	r7, #28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr
	...

0800bd3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d101      	bne.n	800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd50:	2302      	movs	r3, #2
 800bd52:	e046      	b.n	800bde2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd96:	d00e      	beq.n	800bdb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a13      	ldr	r2, [pc, #76]	; (800bdec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d009      	beq.n	800bdb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a12      	ldr	r2, [pc, #72]	; (800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d004      	beq.n	800bdb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a10      	ldr	r2, [pc, #64]	; (800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d10c      	bne.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bc80      	pop	{r7}
 800bdea:	4770      	bx	lr
 800bdec:	40000400 	.word	0x40000400
 800bdf0:	40000800 	.word	0x40000800
 800bdf4:	40010800 	.word	0x40010800

0800bdf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e03f      	b.n	800be8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d106      	bne.n	800be24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7f7 fa9e 	bl	8003360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2224      	movs	r2, #36	; 0x24
 800be28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68da      	ldr	r2, [r3, #12]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fb91 	bl	800c564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	691a      	ldr	r2, [r3, #16]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	695a      	ldr	r2, [r3, #20]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68da      	ldr	r2, [r3, #12]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2220      	movs	r2, #32
 800be7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b088      	sub	sp, #32
 800be96:	af02      	add	r7, sp, #8
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	603b      	str	r3, [r7, #0]
 800be9e:	4613      	mov	r3, r2
 800bea0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800beac:	b2db      	uxtb	r3, r3
 800beae:	2b20      	cmp	r3, #32
 800beb0:	f040 8083 	bne.w	800bfba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <HAL_UART_Transmit+0x2e>
 800beba:	88fb      	ldrh	r3, [r7, #6]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e07b      	b.n	800bfbc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800beca:	2b01      	cmp	r3, #1
 800becc:	d101      	bne.n	800bed2 <HAL_UART_Transmit+0x40>
 800bece:	2302      	movs	r3, #2
 800bed0:	e074      	b.n	800bfbc <HAL_UART_Transmit+0x12a>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2221      	movs	r2, #33	; 0x21
 800bee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800bee8:	f7fa fd90 	bl	8006a0c <HAL_GetTick>
 800beec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	88fa      	ldrh	r2, [r7, #6]
 800bef2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	88fa      	ldrh	r2, [r7, #6]
 800bef8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800bf02:	e042      	b.n	800bf8a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1a:	d122      	bne.n	800bf62 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2200      	movs	r2, #0
 800bf24:	2180      	movs	r1, #128	; 0x80
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f9b2 	bl	800c290 <UART_WaitOnFlagUntilTimeout>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e042      	b.n	800bfbc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf48:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d103      	bne.n	800bf5a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	3302      	adds	r3, #2
 800bf56:	60bb      	str	r3, [r7, #8]
 800bf58:	e017      	b.n	800bf8a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	60bb      	str	r3, [r7, #8]
 800bf60:	e013      	b.n	800bf8a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2180      	movs	r1, #128	; 0x80
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f98f 	bl	800c290 <UART_WaitOnFlagUntilTimeout>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e01f      	b.n	800bfbc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	60ba      	str	r2, [r7, #8]
 800bf82:	781a      	ldrb	r2, [r3, #0]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1b7      	bne.n	800bf04 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2140      	movs	r1, #64	; 0x40
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f000 f976 	bl	800c290 <UART_WaitOnFlagUntilTimeout>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e006      	b.n	800bfbc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	e000      	b.n	800bfbc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800bfba:	2302      	movs	r3, #2
  }
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b20      	cmp	r3, #32
 800bfdc:	d140      	bne.n	800c060 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <HAL_UART_Receive_IT+0x26>
 800bfe4:	88fb      	ldrh	r3, [r7, #6]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e039      	b.n	800c062 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d101      	bne.n	800bffc <HAL_UART_Receive_IT+0x38>
 800bff8:	2302      	movs	r3, #2
 800bffa:	e032      	b.n	800c062 <HAL_UART_Receive_IT+0x9e>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	88fa      	ldrh	r2, [r7, #6]
 800c00e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	88fa      	ldrh	r2, [r7, #6]
 800c014:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2222      	movs	r2, #34	; 0x22
 800c020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68da      	ldr	r2, [r3, #12]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c03a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	695a      	ldr	r2, [r3, #20]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f042 0201 	orr.w	r2, r2, #1
 800c04a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f042 0220 	orr.w	r2, r2, #32
 800c05a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	e000      	b.n	800c062 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c060:	2302      	movs	r3, #2
  }
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	bc80      	pop	{r7}
 800c06a:	4770      	bx	lr

0800c06c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	f003 030f 	and.w	r3, r3, #15
 800c09a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10d      	bne.n	800c0be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	f003 0320 	and.w	r3, r3, #32
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d008      	beq.n	800c0be <HAL_UART_IRQHandler+0x52>
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	f003 0320 	and.w	r3, r3, #32
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f9d2 	bl	800c460 <UART_Receive_IT>
      return;
 800c0bc:	e0d1      	b.n	800c262 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 80b0 	beq.w	800c226 <HAL_UART_IRQHandler+0x1ba>
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d105      	bne.n	800c0dc <HAL_UART_IRQHandler+0x70>
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 80a5 	beq.w	800c226 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00a      	beq.n	800c0fc <HAL_UART_IRQHandler+0x90>
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d005      	beq.n	800c0fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f4:	f043 0201 	orr.w	r2, r3, #1
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	f003 0304 	and.w	r3, r3, #4
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00a      	beq.n	800c11c <HAL_UART_IRQHandler+0xb0>
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d005      	beq.n	800c11c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c114:	f043 0202 	orr.w	r2, r3, #2
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	f003 0302 	and.w	r3, r3, #2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00a      	beq.n	800c13c <HAL_UART_IRQHandler+0xd0>
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d005      	beq.n	800c13c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c134:	f043 0204 	orr.w	r2, r3, #4
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	f003 0308 	and.w	r3, r3, #8
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00f      	beq.n	800c166 <HAL_UART_IRQHandler+0xfa>
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	f003 0320 	and.w	r3, r3, #32
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d104      	bne.n	800c15a <HAL_UART_IRQHandler+0xee>
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	2b00      	cmp	r3, #0
 800c158:	d005      	beq.n	800c166 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15e:	f043 0208 	orr.w	r2, r3, #8
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d078      	beq.n	800c260 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	f003 0320 	and.w	r3, r3, #32
 800c174:	2b00      	cmp	r3, #0
 800c176:	d007      	beq.n	800c188 <HAL_UART_IRQHandler+0x11c>
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	f003 0320 	and.w	r3, r3, #32
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d002      	beq.n	800c188 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f96c 	bl	800c460 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c192:	2b40      	cmp	r3, #64	; 0x40
 800c194:	bf0c      	ite	eq
 800c196:	2301      	moveq	r3, #1
 800c198:	2300      	movne	r3, #0
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a2:	f003 0308 	and.w	r3, r3, #8
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d102      	bne.n	800c1b0 <HAL_UART_IRQHandler+0x144>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d031      	beq.n	800c214 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f8b7 	bl	800c324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c0:	2b40      	cmp	r3, #64	; 0x40
 800c1c2:	d123      	bne.n	800c20c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	695a      	ldr	r2, [r3, #20]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d013      	beq.n	800c204 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e0:	4a21      	ldr	r2, [pc, #132]	; (800c268 <HAL_UART_IRQHandler+0x1fc>)
 800c1e2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fb fc01 	bl	80079f0 <HAL_DMA_Abort_IT>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d016      	beq.n	800c222 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c1fe:	4610      	mov	r0, r2
 800c200:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c202:	e00e      	b.n	800c222 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f83a 	bl	800c27e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c20a:	e00a      	b.n	800c222 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f836 	bl	800c27e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c212:	e006      	b.n	800c222 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f832 	bl	800c27e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c220:	e01e      	b.n	800c260 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c222:	bf00      	nop
    return;
 800c224:	e01c      	b.n	800c260 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d008      	beq.n	800c242 <HAL_UART_IRQHandler+0x1d6>
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f8a3 	bl	800c386 <UART_Transmit_IT>
    return;
 800c240:	e00f      	b.n	800c262 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00a      	beq.n	800c262 <HAL_UART_IRQHandler+0x1f6>
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c252:	2b00      	cmp	r3, #0
 800c254:	d005      	beq.n	800c262 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f8ea 	bl	800c430 <UART_EndTransmit_IT>
    return;
 800c25c:	bf00      	nop
 800c25e:	e000      	b.n	800c262 <HAL_UART_IRQHandler+0x1f6>
    return;
 800c260:	bf00      	nop
  }
}
 800c262:	3720      	adds	r7, #32
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	0800c35f 	.word	0x0800c35f

0800c26c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	bc80      	pop	{r7}
 800c27c:	4770      	bx	lr

0800c27e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c27e:	b480      	push	{r7}
 800c280:	b083      	sub	sp, #12
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bc80      	pop	{r7}
 800c28e:	4770      	bx	lr

0800c290 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	603b      	str	r3, [r7, #0]
 800c29c:	4613      	mov	r3, r2
 800c29e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2a0:	e02c      	b.n	800c2fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a8:	d028      	beq.n	800c2fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d007      	beq.n	800c2c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2b0:	f7fa fbac 	bl	8006a0c <HAL_GetTick>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	69ba      	ldr	r2, [r7, #24]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d21d      	bcs.n	800c2fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	695a      	ldr	r2, [r3, #20]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f022 0201 	bic.w	r2, r2, #1
 800c2de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e00f      	b.n	800c31c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	4013      	ands	r3, r2
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	429a      	cmp	r2, r3
 800c30a:	bf0c      	ite	eq
 800c30c:	2301      	moveq	r3, #1
 800c30e:	2300      	movne	r3, #0
 800c310:	b2db      	uxtb	r3, r3
 800c312:	461a      	mov	r2, r3
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	429a      	cmp	r2, r3
 800c318:	d0c3      	beq.n	800c2a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c33a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	695a      	ldr	r2, [r3, #20]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f022 0201 	bic.w	r2, r2, #1
 800c34a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	bc80      	pop	{r7}
 800c35c:	4770      	bx	lr

0800c35e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff ff80 	bl	800c27e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c37e:	bf00      	nop
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c386:	b480      	push	{r7}
 800c388:	b085      	sub	sp, #20
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b21      	cmp	r3, #33	; 0x21
 800c398:	d144      	bne.n	800c424 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3a2:	d11a      	bne.n	800c3da <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3b8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d105      	bne.n	800c3ce <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	1c9a      	adds	r2, r3, #2
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	621a      	str	r2, [r3, #32]
 800c3cc:	e00e      	b.n	800c3ec <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	621a      	str	r2, [r3, #32]
 800c3d8:	e008      	b.n	800c3ec <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	1c59      	adds	r1, r3, #1
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	6211      	str	r1, [r2, #32]
 800c3e4:	781a      	ldrb	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10f      	bne.n	800c420 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68da      	ldr	r2, [r3, #12]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c40e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c41e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c420:	2300      	movs	r3, #0
 800c422:	e000      	b.n	800c426 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c424:	2302      	movs	r3, #2
  }
}
 800c426:	4618      	mov	r0, r3
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bc80      	pop	{r7}
 800c42e:	4770      	bx	lr

0800c430 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68da      	ldr	r2, [r3, #12]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c446:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff ff0b 	bl	800c26c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b22      	cmp	r3, #34	; 0x22
 800c472:	d171      	bne.n	800c558 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c47c:	d123      	bne.n	800c4c6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c482:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10e      	bne.n	800c4aa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	b29b      	uxth	r3, r3
 800c494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c498:	b29a      	uxth	r2, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a2:	1c9a      	adds	r2, r3, #2
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	629a      	str	r2, [r3, #40]	; 0x28
 800c4a8:	e029      	b.n	800c4fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	629a      	str	r2, [r3, #40]	; 0x28
 800c4c4:	e01b      	b.n	800c4fe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10a      	bne.n	800c4e4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	6858      	ldr	r0, [r3, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d8:	1c59      	adds	r1, r3, #1
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	6291      	str	r1, [r2, #40]	; 0x28
 800c4de:	b2c2      	uxtb	r2, r0
 800c4e0:	701a      	strb	r2, [r3, #0]
 800c4e2:	e00c      	b.n	800c4fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f0:	1c58      	adds	r0, r3, #1
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	6288      	str	r0, [r1, #40]	; 0x28
 800c4f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c4fa:	b2d2      	uxtb	r2, r2
 800c4fc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c502:	b29b      	uxth	r3, r3
 800c504:	3b01      	subs	r3, #1
 800c506:	b29b      	uxth	r3, r3
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	4619      	mov	r1, r3
 800c50c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d120      	bne.n	800c554 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68da      	ldr	r2, [r3, #12]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f022 0220 	bic.w	r2, r2, #32
 800c520:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68da      	ldr	r2, [r3, #12]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c530:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	695a      	ldr	r2, [r3, #20]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f022 0201 	bic.w	r2, r2, #1
 800c540:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2220      	movs	r2, #32
 800c546:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7f5 ffde 	bl	800250c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	e002      	b.n	800c55a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	e000      	b.n	800c55a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c558:	2302      	movs	r3, #2
  }
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68da      	ldr	r2, [r3, #12]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	430a      	orrs	r2, r1
 800c580:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	689a      	ldr	r2, [r3, #8]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	431a      	orrs	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	431a      	orrs	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	69db      	ldr	r3, [r3, #28]
 800c596:	4313      	orrs	r3, r2
 800c598:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c5a4:	f023 030c 	bic.w	r3, r3, #12
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	6812      	ldr	r2, [r2, #0]
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	430b      	orrs	r3, r1
 800c5b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	699a      	ldr	r2, [r3, #24]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	430a      	orrs	r2, r1
 800c5c6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a55      	ldr	r2, [pc, #340]	; (800c724 <UART_SetConfig+0x1c0>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d103      	bne.n	800c5da <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c5d2:	f7fd fe9d 	bl	800a310 <HAL_RCC_GetPCLK2Freq>
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	e002      	b.n	800c5e0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c5da:	f7fd fe85 	bl	800a2e8 <HAL_RCC_GetPCLK1Freq>
 800c5de:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	69db      	ldr	r3, [r3, #28]
 800c5e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e8:	d14c      	bne.n	800c684 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009a      	lsls	r2, r3, #2
 800c5f4:	441a      	add	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c600:	4a49      	ldr	r2, [pc, #292]	; (800c728 <UART_SetConfig+0x1c4>)
 800c602:	fba2 2303 	umull	r2, r3, r2, r3
 800c606:	095b      	lsrs	r3, r3, #5
 800c608:	0119      	lsls	r1, r3, #4
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	4613      	mov	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	009a      	lsls	r2, r3, #2
 800c614:	441a      	add	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	005b      	lsls	r3, r3, #1
 800c61c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c620:	4b41      	ldr	r3, [pc, #260]	; (800c728 <UART_SetConfig+0x1c4>)
 800c622:	fba3 0302 	umull	r0, r3, r3, r2
 800c626:	095b      	lsrs	r3, r3, #5
 800c628:	2064      	movs	r0, #100	; 0x64
 800c62a:	fb00 f303 	mul.w	r3, r0, r3
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	3332      	adds	r3, #50	; 0x32
 800c634:	4a3c      	ldr	r2, [pc, #240]	; (800c728 <UART_SetConfig+0x1c4>)
 800c636:	fba2 2303 	umull	r2, r3, r2, r3
 800c63a:	095b      	lsrs	r3, r3, #5
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c642:	4419      	add	r1, r3
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	4613      	mov	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	009a      	lsls	r2, r3, #2
 800c64e:	441a      	add	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	fbb2 f2f3 	udiv	r2, r2, r3
 800c65a:	4b33      	ldr	r3, [pc, #204]	; (800c728 <UART_SetConfig+0x1c4>)
 800c65c:	fba3 0302 	umull	r0, r3, r3, r2
 800c660:	095b      	lsrs	r3, r3, #5
 800c662:	2064      	movs	r0, #100	; 0x64
 800c664:	fb00 f303 	mul.w	r3, r0, r3
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	00db      	lsls	r3, r3, #3
 800c66c:	3332      	adds	r3, #50	; 0x32
 800c66e:	4a2e      	ldr	r2, [pc, #184]	; (800c728 <UART_SetConfig+0x1c4>)
 800c670:	fba2 2303 	umull	r2, r3, r2, r3
 800c674:	095b      	lsrs	r3, r3, #5
 800c676:	f003 0207 	and.w	r2, r3, #7
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	440a      	add	r2, r1
 800c680:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c682:	e04a      	b.n	800c71a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	009a      	lsls	r2, r3, #2
 800c68e:	441a      	add	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	fbb2 f3f3 	udiv	r3, r2, r3
 800c69a:	4a23      	ldr	r2, [pc, #140]	; (800c728 <UART_SetConfig+0x1c4>)
 800c69c:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a0:	095b      	lsrs	r3, r3, #5
 800c6a2:	0119      	lsls	r1, r3, #4
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4413      	add	r3, r2
 800c6ac:	009a      	lsls	r2, r3, #2
 800c6ae:	441a      	add	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6ba:	4b1b      	ldr	r3, [pc, #108]	; (800c728 <UART_SetConfig+0x1c4>)
 800c6bc:	fba3 0302 	umull	r0, r3, r3, r2
 800c6c0:	095b      	lsrs	r3, r3, #5
 800c6c2:	2064      	movs	r0, #100	; 0x64
 800c6c4:	fb00 f303 	mul.w	r3, r0, r3
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	011b      	lsls	r3, r3, #4
 800c6cc:	3332      	adds	r3, #50	; 0x32
 800c6ce:	4a16      	ldr	r2, [pc, #88]	; (800c728 <UART_SetConfig+0x1c4>)
 800c6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d4:	095b      	lsrs	r3, r3, #5
 800c6d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6da:	4419      	add	r1, r3
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009a      	lsls	r2, r3, #2
 800c6e6:	441a      	add	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6f2:	4b0d      	ldr	r3, [pc, #52]	; (800c728 <UART_SetConfig+0x1c4>)
 800c6f4:	fba3 0302 	umull	r0, r3, r3, r2
 800c6f8:	095b      	lsrs	r3, r3, #5
 800c6fa:	2064      	movs	r0, #100	; 0x64
 800c6fc:	fb00 f303 	mul.w	r3, r0, r3
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	011b      	lsls	r3, r3, #4
 800c704:	3332      	adds	r3, #50	; 0x32
 800c706:	4a08      	ldr	r2, [pc, #32]	; (800c728 <UART_SetConfig+0x1c4>)
 800c708:	fba2 2303 	umull	r2, r3, r2, r3
 800c70c:	095b      	lsrs	r3, r3, #5
 800c70e:	f003 020f 	and.w	r2, r3, #15
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	440a      	add	r2, r1
 800c718:	609a      	str	r2, [r3, #8]
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	40013800 	.word	0x40013800
 800c728:	51eb851f 	.word	0x51eb851f

0800c72c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c73c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c740:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	b29a      	uxth	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	bc80      	pop	{r7}
 800c756:	4770      	bx	lr

0800c758 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c760:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c764:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	b29b      	uxth	r3, r3
 800c772:	43db      	mvns	r3, r3
 800c774:	b29b      	uxth	r3, r3
 800c776:	4013      	ands	r3, r2
 800c778:	b29a      	uxth	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	bc80      	pop	{r7}
 800c78a:	4770      	bx	lr

0800c78c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c78c:	b084      	sub	sp, #16
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	f107 0014 	add.w	r0, r7, #20
 800c79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bc80      	pop	{r7}
 800c7c8:	b004      	add	sp, #16
 800c7ca:	4770      	bx	lr

0800c7cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b09b      	sub	sp, #108	; 0x6c
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	78db      	ldrb	r3, [r3, #3]
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d81f      	bhi.n	800c83e <USB_ActivateEndpoint+0x72>
 800c7fe:	a201      	add	r2, pc, #4	; (adr r2, 800c804 <USB_ActivateEndpoint+0x38>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c815 	.word	0x0800c815
 800c808:	0800c831 	.word	0x0800c831
 800c80c:	0800c847 	.word	0x0800c847
 800c810:	0800c823 	.word	0x0800c823
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c814:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c81c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800c820:	e012      	b.n	800c848 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c822:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c826:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c82a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800c82e:	e00b      	b.n	800c848 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c830:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c838:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800c83c:	e004      	b.n	800c848 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800c844:	e000      	b.n	800c848 <USB_ActivateEndpoint+0x7c>
      break;
 800c846:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	441a      	add	r2, r3
 800c852:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c85a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c85e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c866:	b29b      	uxth	r3, r3
 800c868:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	b29b      	uxth	r3, r3
 800c878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c87c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c880:	b29a      	uxth	r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	b29b      	uxth	r3, r3
 800c888:	4313      	orrs	r3, r2
 800c88a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	441a      	add	r2, r3
 800c898:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800c89c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	7b1b      	ldrb	r3, [r3, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f040 8149 	bne.w	800cb4c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	785b      	ldrb	r3, [r3, #1]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 8084 	beq.w	800c9cc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	617b      	str	r3, [r7, #20]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	011a      	lsls	r2, r3, #4
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8e6:	613b      	str	r3, [r7, #16]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	88db      	ldrh	r3, [r3, #6]
 800c8ec:	085b      	lsrs	r3, r3, #1
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	4413      	add	r3, r2
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	81fb      	strh	r3, [r7, #14]
 800c906:	89fb      	ldrh	r3, [r7, #14]
 800c908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d01b      	beq.n	800c948 <USB_ActivateEndpoint+0x17c>
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4413      	add	r3, r2
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c926:	81bb      	strh	r3, [r7, #12]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	441a      	add	r2, r3
 800c932:	89bb      	ldrh	r3, [r7, #12]
 800c934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c93c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c944:	b29b      	uxth	r3, r3
 800c946:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	78db      	ldrb	r3, [r3, #3]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d020      	beq.n	800c992 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c966:	813b      	strh	r3, [r7, #8]
 800c968:	893b      	ldrh	r3, [r7, #8]
 800c96a:	f083 0320 	eor.w	r3, r3, #32
 800c96e:	813b      	strh	r3, [r7, #8]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	441a      	add	r2, r3
 800c97a:	893b      	ldrh	r3, [r7, #8]
 800c97c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	8013      	strh	r3, [r2, #0]
 800c990:	e27f      	b.n	800ce92 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9a8:	817b      	strh	r3, [r7, #10]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	441a      	add	r2, r3
 800c9b4:	897b      	ldrh	r3, [r7, #10]
 800c9b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	8013      	strh	r3, [r2, #0]
 800c9ca:	e262      	b.n	800ce92 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	461a      	mov	r2, r3
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	4413      	add	r3, r2
 800c9de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	011a      	lsls	r2, r3, #4
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c9ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	88db      	ldrh	r3, [r3, #6]
 800c9f4:	085b      	lsrs	r3, r3, #1
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	627b      	str	r3, [r7, #36]	; 0x24
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	4413      	add	r3, r2
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	011a      	lsls	r2, r3, #4
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ca22:	623b      	str	r3, [r7, #32]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d112      	bne.n	800ca52 <USB_ActivateEndpoint+0x286>
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	801a      	strh	r2, [r3, #0]
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	801a      	strh	r2, [r3, #0]
 800ca50:	e02f      	b.n	800cab2 <USB_ActivateEndpoint+0x2e6>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	2b3e      	cmp	r3, #62	; 0x3e
 800ca58:	d813      	bhi.n	800ca82 <USB_ActivateEndpoint+0x2b6>
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	085b      	lsrs	r3, r3, #1
 800ca60:	663b      	str	r3, [r7, #96]	; 0x60
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <USB_ActivateEndpoint+0x2a8>
 800ca6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca70:	3301      	adds	r3, #1
 800ca72:	663b      	str	r3, [r7, #96]	; 0x60
 800ca74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	029b      	lsls	r3, r3, #10
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	801a      	strh	r2, [r3, #0]
 800ca80:	e017      	b.n	800cab2 <USB_ActivateEndpoint+0x2e6>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	095b      	lsrs	r3, r3, #5
 800ca88:	663b      	str	r3, [r7, #96]	; 0x60
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	f003 031f 	and.w	r3, r3, #31
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d102      	bne.n	800ca9c <USB_ActivateEndpoint+0x2d0>
 800ca96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	663b      	str	r3, [r7, #96]	; 0x60
 800ca9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	029b      	lsls	r3, r3, #10
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caac:	b29a      	uxth	r2, r3
 800caae:	6a3b      	ldr	r3, [r7, #32]
 800cab0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	83fb      	strh	r3, [r7, #30]
 800cac0:	8bfb      	ldrh	r3, [r7, #30]
 800cac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d01b      	beq.n	800cb02 <USB_ActivateEndpoint+0x336>
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cadc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae0:	83bb      	strh	r3, [r7, #28]
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	441a      	add	r2, r3
 800caec:	8bbb      	ldrh	r3, [r7, #28]
 800caee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb18:	837b      	strh	r3, [r7, #26]
 800cb1a:	8b7b      	ldrh	r3, [r7, #26]
 800cb1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb20:	837b      	strh	r3, [r7, #26]
 800cb22:	8b7b      	ldrh	r3, [r7, #26]
 800cb24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb28:	837b      	strh	r3, [r7, #26]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	441a      	add	r2, r3
 800cb34:	8b7b      	ldrh	r3, [r7, #26]
 800cb36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	8013      	strh	r3, [r2, #0]
 800cb4a:	e1a2      	b.n	800ce92 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	881b      	ldrh	r3, [r3, #0]
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb62:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	441a      	add	r2, r3
 800cb70:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800cb74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb7c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cb80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	461a      	mov	r2, r3
 800cb96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb98:	4413      	add	r3, r2
 800cb9a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	011a      	lsls	r2, r3, #4
 800cba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbaa:	657b      	str	r3, [r7, #84]	; 0x54
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	891b      	ldrh	r3, [r3, #8]
 800cbb0:	085b      	lsrs	r3, r3, #1
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbba:	801a      	strh	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	653b      	str	r3, [r7, #80]	; 0x50
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbcc:	4413      	add	r3, r2
 800cbce:	653b      	str	r3, [r7, #80]	; 0x50
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	011a      	lsls	r2, r3, #4
 800cbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd8:	4413      	add	r3, r2
 800cbda:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800cbde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	895b      	ldrh	r3, [r3, #10]
 800cbe4:	085b      	lsrs	r3, r3, #1
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f040 8091 	bne.w	800cd1c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4413      	add	r3, r2
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cc08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01b      	beq.n	800cc4a <USB_ActivateEndpoint+0x47e>
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc28:	877b      	strh	r3, [r7, #58]	; 0x3a
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	441a      	add	r2, r3
 800cc34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	873b      	strh	r3, [r7, #56]	; 0x38
 800cc58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cc5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d01b      	beq.n	800cc9a <USB_ActivateEndpoint+0x4ce>
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc78:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	441a      	add	r2, r3
 800cc84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4413      	add	r3, r2
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccb0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ccb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ccb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ccb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ccba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ccbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ccc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	441a      	add	r2, r3
 800cccc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ccce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccf8:	867b      	strh	r3, [r7, #50]	; 0x32
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	441a      	add	r2, r3
 800cd04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cd06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	8013      	strh	r3, [r2, #0]
 800cd1a:	e0ba      	b.n	800ce92 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	4413      	add	r3, r2
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800cd2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cd30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01d      	beq.n	800cd74 <USB_ActivateEndpoint+0x5a8>
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	441a      	add	r2, r3
 800cd5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cd60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cd84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01d      	beq.n	800cdcc <USB_ActivateEndpoint+0x600>
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cda2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cda6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	441a      	add	r2, r3
 800cdb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cdb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	78db      	ldrb	r3, [r3, #3]
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d024      	beq.n	800ce1e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	881b      	ldrh	r3, [r3, #0]
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cde6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800cdee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdf2:	f083 0320 	eor.w	r3, r3, #32
 800cdf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	441a      	add	r2, r3
 800ce04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ce08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	8013      	strh	r3, [r2, #0]
 800ce1c:	e01d      	b.n	800ce5a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	881b      	ldrh	r3, [r3, #0]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	441a      	add	r2, r3
 800ce42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce70:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	441a      	add	r2, r3
 800ce7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800ce92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	376c      	adds	r7, #108	; 0x6c
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bc80      	pop	{r7}
 800ce9e:	4770      	bx	lr

0800cea0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b08d      	sub	sp, #52	; 0x34
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	7b1b      	ldrb	r3, [r3, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f040 808e 	bne.w	800cfd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	785b      	ldrb	r3, [r3, #1]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d044      	beq.n	800cf46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	81bb      	strh	r3, [r7, #12]
 800ceca:	89bb      	ldrh	r3, [r7, #12]
 800cecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01b      	beq.n	800cf0c <USB_DeactivateEndpoint+0x6c>
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceea:	817b      	strh	r3, [r7, #10]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	441a      	add	r2, r3
 800cef6:	897b      	ldrh	r3, [r7, #10]
 800cef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cefc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4413      	add	r3, r2
 800cf16:	881b      	ldrh	r3, [r3, #0]
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf22:	813b      	strh	r3, [r7, #8]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	441a      	add	r2, r3
 800cf2e:	893b      	ldrh	r3, [r7, #8]
 800cf30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	8013      	strh	r3, [r2, #0]
 800cf44:	e192      	b.n	800d26c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	827b      	strh	r3, [r7, #18]
 800cf54:	8a7b      	ldrh	r3, [r7, #18]
 800cf56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d01b      	beq.n	800cf96 <USB_DeactivateEndpoint+0xf6>
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	881b      	ldrh	r3, [r3, #0]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf74:	823b      	strh	r3, [r7, #16]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	441a      	add	r2, r3
 800cf80:	8a3b      	ldrh	r3, [r7, #16]
 800cf82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfac:	81fb      	strh	r3, [r7, #14]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	441a      	add	r2, r3
 800cfb8:	89fb      	ldrh	r3, [r7, #14]
 800cfba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	8013      	strh	r3, [r2, #0]
 800cfce:	e14d      	b.n	800d26c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	785b      	ldrb	r3, [r3, #1]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f040 80a5 	bne.w	800d124 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	843b      	strh	r3, [r7, #32]
 800cfe8:	8c3b      	ldrh	r3, [r7, #32]
 800cfea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d01b      	beq.n	800d02a <USB_DeactivateEndpoint+0x18a>
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	4413      	add	r3, r2
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d008:	83fb      	strh	r3, [r7, #30]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	441a      	add	r2, r3
 800d014:	8bfb      	ldrh	r3, [r7, #30]
 800d016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d01a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d01e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d026:	b29b      	uxth	r3, r3
 800d028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	881b      	ldrh	r3, [r3, #0]
 800d036:	83bb      	strh	r3, [r7, #28]
 800d038:	8bbb      	ldrh	r3, [r7, #28]
 800d03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d01b      	beq.n	800d07a <USB_DeactivateEndpoint+0x1da>
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d058:	837b      	strh	r3, [r7, #26]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	441a      	add	r2, r3
 800d064:	8b7b      	ldrh	r3, [r7, #26]
 800d066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d06a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d06e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d072:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d076:	b29b      	uxth	r3, r3
 800d078:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	4413      	add	r3, r2
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	b29b      	uxth	r3, r3
 800d088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d08c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d090:	833b      	strh	r3, [r7, #24]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	441a      	add	r2, r3
 800d09c:	8b3b      	ldrh	r3, [r7, #24]
 800d09e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0c8:	82fb      	strh	r3, [r7, #22]
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	441a      	add	r2, r3
 800d0d4:	8afb      	ldrh	r3, [r7, #22]
 800d0d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4413      	add	r3, r2
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d100:	82bb      	strh	r3, [r7, #20]
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	441a      	add	r2, r3
 800d10c:	8abb      	ldrh	r3, [r7, #20]
 800d10e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d11e:	b29b      	uxth	r3, r3
 800d120:	8013      	strh	r3, [r2, #0]
 800d122:	e0a3      	b.n	800d26c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	881b      	ldrh	r3, [r3, #0]
 800d130:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d01b      	beq.n	800d174 <USB_DeactivateEndpoint+0x2d4>
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d152:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	441a      	add	r2, r3
 800d15e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d170:	b29b      	uxth	r3, r3
 800d172:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d182:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01b      	beq.n	800d1c4 <USB_DeactivateEndpoint+0x324>
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1a2:	853b      	strh	r3, [r7, #40]	; 0x28
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	441a      	add	r2, r3
 800d1ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d1b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	881b      	ldrh	r3, [r3, #0]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1da:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	441a      	add	r2, r3
 800d1e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	881b      	ldrh	r3, [r3, #0]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d20e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d212:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	441a      	add	r2, r3
 800d21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d230:	b29b      	uxth	r3, r3
 800d232:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	b29b      	uxth	r3, r3
 800d242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d24a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	441a      	add	r2, r3
 800d256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d25c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d268:	b29b      	uxth	r3, r3
 800d26a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3734      	adds	r7, #52	; 0x34
 800d272:	46bd      	mov	sp, r7
 800d274:	bc80      	pop	{r7}
 800d276:	4770      	bx	lr

0800d278 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b0c4      	sub	sp, #272	; 0x110
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	1d3b      	adds	r3, r7, #4
 800d280:	6018      	str	r0, [r3, #0]
 800d282:	463b      	mov	r3, r7
 800d284:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d286:	463b      	mov	r3, r7
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	785b      	ldrb	r3, [r3, #1]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	f040 8566 	bne.w	800dd5e <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d292:	463b      	mov	r3, r7
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	699a      	ldr	r2, [r3, #24]
 800d298:	463b      	mov	r3, r7
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d905      	bls.n	800d2ae <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800d2a2:	463b      	mov	r3, r7
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d2ac:	e004      	b.n	800d2b8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800d2ae:	463b      	mov	r3, r7
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d2b8:	463b      	mov	r3, r7
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	7b1b      	ldrb	r3, [r3, #12]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d12c      	bne.n	800d31c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d2c2:	463b      	mov	r3, r7
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	6959      	ldr	r1, [r3, #20]
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	88da      	ldrh	r2, [r3, #6]
 800d2ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	1d38      	adds	r0, r7, #4
 800d2d6:	6800      	ldr	r0, [r0, #0]
 800d2d8:	f001 fa31 	bl	800e73e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d2dc:	1d3b      	adds	r3, r7, #4
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	617b      	str	r3, [r7, #20]
 800d2e2:	1d3b      	adds	r3, r7, #4
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	617b      	str	r3, [r7, #20]
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	011a      	lsls	r2, r3, #4
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	4413      	add	r3, r2
 800d300:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800d304:	f107 0310 	add.w	r3, r7, #16
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d30e:	b29a      	uxth	r2, r3
 800d310:	f107 0310 	add.w	r3, r7, #16
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	801a      	strh	r2, [r3, #0]
 800d318:	f000 bcec 	b.w	800dcf4 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d31c:	463b      	mov	r3, r7
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	78db      	ldrb	r3, [r3, #3]
 800d322:	2b02      	cmp	r3, #2
 800d324:	f040 8356 	bne.w	800d9d4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d328:	463b      	mov	r3, r7
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6a1a      	ldr	r2, [r3, #32]
 800d32e:	463b      	mov	r3, r7
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	429a      	cmp	r2, r3
 800d336:	f240 82fa 	bls.w	800d92e <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800d33a:	1d3b      	adds	r3, r7, #4
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	463b      	mov	r3, r7
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d354:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800d358:	1d3b      	adds	r3, r7, #4
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	463b      	mov	r3, r7
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	441a      	add	r2, r3
 800d366:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d36a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d36e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d372:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800d37e:	463b      	mov	r3, r7
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d388:	463b      	mov	r3, r7
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6a1a      	ldr	r2, [r3, #32]
 800d38e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d392:	1ad2      	subs	r2, r2, r3
 800d394:	463b      	mov	r3, r7
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d39a:	1d3b      	adds	r3, r7, #4
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	463b      	mov	r3, r7
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 815e 	beq.w	800d672 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d3b6:	1d3b      	adds	r3, r7, #4
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d3bc:	463b      	mov	r3, r7
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	785b      	ldrb	r3, [r3, #1]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d164      	bne.n	800d490 <USB_EPStartXfer+0x218>
 800d3c6:	1d3b      	adds	r3, r7, #4
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3cc:	1d3b      	adds	r3, r7, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	4413      	add	r3, r2
 800d3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3de:	463b      	mov	r3, r7
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	011a      	lsls	r2, r3, #4
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d3ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d112      	bne.n	800d41e <USB_EPStartXfer+0x1a6>
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d402:	b29a      	uxth	r2, r3
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	801a      	strh	r2, [r3, #0]
 800d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d416:	b29a      	uxth	r2, r3
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41a:	801a      	strh	r2, [r3, #0]
 800d41c:	e054      	b.n	800d4c8 <USB_EPStartXfer+0x250>
 800d41e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d422:	2b3e      	cmp	r3, #62	; 0x3e
 800d424:	d817      	bhi.n	800d456 <USB_EPStartXfer+0x1de>
 800d426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d42a:	085b      	lsrs	r3, r3, #1
 800d42c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d430:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <USB_EPStartXfer+0x1ce>
 800d43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d440:	3301      	adds	r3, #1
 800d442:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	029b      	lsls	r3, r3, #10
 800d44e:	b29a      	uxth	r2, r3
 800d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d452:	801a      	strh	r2, [r3, #0]
 800d454:	e038      	b.n	800d4c8 <USB_EPStartXfer+0x250>
 800d456:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d45a:	095b      	lsrs	r3, r3, #5
 800d45c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d460:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d464:	f003 031f 	and.w	r3, r3, #31
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d104      	bne.n	800d476 <USB_EPStartXfer+0x1fe>
 800d46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d470:	3b01      	subs	r3, #1
 800d472:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	029b      	lsls	r3, r3, #10
 800d47e:	b29b      	uxth	r3, r3
 800d480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d488:	b29a      	uxth	r2, r3
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	801a      	strh	r2, [r3, #0]
 800d48e:	e01b      	b.n	800d4c8 <USB_EPStartXfer+0x250>
 800d490:	463b      	mov	r3, r7
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	785b      	ldrb	r3, [r3, #1]
 800d496:	2b01      	cmp	r3, #1
 800d498:	d116      	bne.n	800d4c8 <USB_EPStartXfer+0x250>
 800d49a:	1d3b      	adds	r3, r7, #4
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a8:	4413      	add	r3, r2
 800d4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ac:	463b      	mov	r3, r7
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	011a      	lsls	r2, r3, #4
 800d4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d4bc:	633b      	str	r3, [r7, #48]	; 0x30
 800d4be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d4c8:	463b      	mov	r3, r7
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	895b      	ldrh	r3, [r3, #10]
 800d4ce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4d2:	463b      	mov	r3, r7
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	6959      	ldr	r1, [r3, #20]
 800d4d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d4e2:	1d38      	adds	r0, r7, #4
 800d4e4:	6800      	ldr	r0, [r0, #0]
 800d4e6:	f001 f92a 	bl	800e73e <USB_WritePMA>
            ep->xfer_buff += len;
 800d4ea:	463b      	mov	r3, r7
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	695a      	ldr	r2, [r3, #20]
 800d4f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d4f4:	441a      	add	r2, r3
 800d4f6:	463b      	mov	r3, r7
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d4fc:	463b      	mov	r3, r7
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6a1a      	ldr	r2, [r3, #32]
 800d502:	463b      	mov	r3, r7
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d90e      	bls.n	800d52a <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800d50c:	463b      	mov	r3, r7
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800d516:	463b      	mov	r3, r7
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6a1a      	ldr	r2, [r3, #32]
 800d51c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d520:	1ad2      	subs	r2, r2, r3
 800d522:	463b      	mov	r3, r7
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	621a      	str	r2, [r3, #32]
 800d528:	e008      	b.n	800d53c <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d52a:	463b      	mov	r3, r7
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6a1b      	ldr	r3, [r3, #32]
 800d530:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800d534:	463b      	mov	r3, r7
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2200      	movs	r2, #0
 800d53a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d53c:	463b      	mov	r3, r7
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	785b      	ldrb	r3, [r3, #1]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d164      	bne.n	800d610 <USB_EPStartXfer+0x398>
 800d546:	1d3b      	adds	r3, r7, #4
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	61fb      	str	r3, [r7, #28]
 800d54c:	1d3b      	adds	r3, r7, #4
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d554:	b29b      	uxth	r3, r3
 800d556:	461a      	mov	r2, r3
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	4413      	add	r3, r2
 800d55c:	61fb      	str	r3, [r7, #28]
 800d55e:	463b      	mov	r3, r7
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	011a      	lsls	r2, r3, #4
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	4413      	add	r3, r2
 800d56a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d56e:	61bb      	str	r3, [r7, #24]
 800d570:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d574:	2b00      	cmp	r3, #0
 800d576:	d112      	bne.n	800d59e <USB_EPStartXfer+0x326>
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	881b      	ldrh	r3, [r3, #0]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d582:	b29a      	uxth	r2, r3
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	801a      	strh	r2, [r3, #0]
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d596:	b29a      	uxth	r2, r3
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	801a      	strh	r2, [r3, #0]
 800d59c:	e057      	b.n	800d64e <USB_EPStartXfer+0x3d6>
 800d59e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5a2:	2b3e      	cmp	r3, #62	; 0x3e
 800d5a4:	d817      	bhi.n	800d5d6 <USB_EPStartXfer+0x35e>
 800d5a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5aa:	085b      	lsrs	r3, r3, #1
 800d5ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d5b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <USB_EPStartXfer+0x34e>
 800d5bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d5c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	029b      	lsls	r3, r3, #10
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	801a      	strh	r2, [r3, #0]
 800d5d4:	e03b      	b.n	800d64e <USB_EPStartXfer+0x3d6>
 800d5d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5da:	095b      	lsrs	r3, r3, #5
 800d5dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d5e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5e4:	f003 031f 	and.w	r3, r3, #31
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d104      	bne.n	800d5f6 <USB_EPStartXfer+0x37e>
 800d5ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d5f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	029b      	lsls	r3, r3, #10
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d608:	b29a      	uxth	r2, r3
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	801a      	strh	r2, [r3, #0]
 800d60e:	e01e      	b.n	800d64e <USB_EPStartXfer+0x3d6>
 800d610:	463b      	mov	r3, r7
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	785b      	ldrb	r3, [r3, #1]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d119      	bne.n	800d64e <USB_EPStartXfer+0x3d6>
 800d61a:	1d3b      	adds	r3, r7, #4
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	627b      	str	r3, [r7, #36]	; 0x24
 800d620:	1d3b      	adds	r3, r7, #4
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d628:	b29b      	uxth	r3, r3
 800d62a:	461a      	mov	r2, r3
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	4413      	add	r3, r2
 800d630:	627b      	str	r3, [r7, #36]	; 0x24
 800d632:	463b      	mov	r3, r7
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	011a      	lsls	r2, r3, #4
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	4413      	add	r3, r2
 800d63e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d642:	623b      	str	r3, [r7, #32]
 800d644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d648:	b29a      	uxth	r2, r3
 800d64a:	6a3b      	ldr	r3, [r7, #32]
 800d64c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d64e:	463b      	mov	r3, r7
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	891b      	ldrh	r3, [r3, #8]
 800d654:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d658:	463b      	mov	r3, r7
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6959      	ldr	r1, [r3, #20]
 800d65e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d662:	b29b      	uxth	r3, r3
 800d664:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d668:	1d38      	adds	r0, r7, #4
 800d66a:	6800      	ldr	r0, [r0, #0]
 800d66c:	f001 f867 	bl	800e73e <USB_WritePMA>
 800d670:	e340      	b.n	800dcf4 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d672:	463b      	mov	r3, r7
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	785b      	ldrb	r3, [r3, #1]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d164      	bne.n	800d746 <USB_EPStartXfer+0x4ce>
 800d67c:	1d3b      	adds	r3, r7, #4
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d682:	1d3b      	adds	r3, r7, #4
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	461a      	mov	r2, r3
 800d68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d690:	4413      	add	r3, r2
 800d692:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d694:	463b      	mov	r3, r7
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	011a      	lsls	r2, r3, #4
 800d69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d69e:	4413      	add	r3, r2
 800d6a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d6a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d112      	bne.n	800d6d4 <USB_EPStartXfer+0x45c>
 800d6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6bc:	801a      	strh	r2, [r3, #0]
 800d6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6d0:	801a      	strh	r2, [r3, #0]
 800d6d2:	e057      	b.n	800d784 <USB_EPStartXfer+0x50c>
 800d6d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6d8:	2b3e      	cmp	r3, #62	; 0x3e
 800d6da:	d817      	bhi.n	800d70c <USB_EPStartXfer+0x494>
 800d6dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6e0:	085b      	lsrs	r3, r3, #1
 800d6e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d6e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d004      	beq.n	800d6fc <USB_EPStartXfer+0x484>
 800d6f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d6fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d700:	b29b      	uxth	r3, r3
 800d702:	029b      	lsls	r3, r3, #10
 800d704:	b29a      	uxth	r2, r3
 800d706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d708:	801a      	strh	r2, [r3, #0]
 800d70a:	e03b      	b.n	800d784 <USB_EPStartXfer+0x50c>
 800d70c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d710:	095b      	lsrs	r3, r3, #5
 800d712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d716:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d71a:	f003 031f 	and.w	r3, r3, #31
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d104      	bne.n	800d72c <USB_EPStartXfer+0x4b4>
 800d722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d726:	3b01      	subs	r3, #1
 800d728:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d72c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d730:	b29b      	uxth	r3, r3
 800d732:	029b      	lsls	r3, r3, #10
 800d734:	b29b      	uxth	r3, r3
 800d736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d73a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d73e:	b29a      	uxth	r2, r3
 800d740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d742:	801a      	strh	r2, [r3, #0]
 800d744:	e01e      	b.n	800d784 <USB_EPStartXfer+0x50c>
 800d746:	463b      	mov	r3, r7
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	785b      	ldrb	r3, [r3, #1]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d119      	bne.n	800d784 <USB_EPStartXfer+0x50c>
 800d750:	1d3b      	adds	r3, r7, #4
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	657b      	str	r3, [r7, #84]	; 0x54
 800d756:	1d3b      	adds	r3, r7, #4
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d75e:	b29b      	uxth	r3, r3
 800d760:	461a      	mov	r2, r3
 800d762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d764:	4413      	add	r3, r2
 800d766:	657b      	str	r3, [r7, #84]	; 0x54
 800d768:	463b      	mov	r3, r7
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	011a      	lsls	r2, r3, #4
 800d770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d772:	4413      	add	r3, r2
 800d774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d778:	653b      	str	r3, [r7, #80]	; 0x50
 800d77a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d77e:	b29a      	uxth	r2, r3
 800d780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d782:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d784:	463b      	mov	r3, r7
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	891b      	ldrh	r3, [r3, #8]
 800d78a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d78e:	463b      	mov	r3, r7
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6959      	ldr	r1, [r3, #20]
 800d794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d798:	b29b      	uxth	r3, r3
 800d79a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d79e:	1d38      	adds	r0, r7, #4
 800d7a0:	6800      	ldr	r0, [r0, #0]
 800d7a2:	f000 ffcc 	bl	800e73e <USB_WritePMA>
            ep->xfer_buff += len;
 800d7a6:	463b      	mov	r3, r7
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	695a      	ldr	r2, [r3, #20]
 800d7ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d7b0:	441a      	add	r2, r3
 800d7b2:	463b      	mov	r3, r7
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d7b8:	463b      	mov	r3, r7
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6a1a      	ldr	r2, [r3, #32]
 800d7be:	463b      	mov	r3, r7
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d90e      	bls.n	800d7e6 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800d7c8:	463b      	mov	r3, r7
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800d7d2:	463b      	mov	r3, r7
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6a1a      	ldr	r2, [r3, #32]
 800d7d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d7dc:	1ad2      	subs	r2, r2, r3
 800d7de:	463b      	mov	r3, r7
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	621a      	str	r2, [r3, #32]
 800d7e4:	e008      	b.n	800d7f8 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800d7e6:	463b      	mov	r3, r7
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d7f8:	1d3b      	adds	r3, r7, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800d7fe:	463b      	mov	r3, r7
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	785b      	ldrb	r3, [r3, #1]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d164      	bne.n	800d8d2 <USB_EPStartXfer+0x65a>
 800d808:	1d3b      	adds	r3, r7, #4
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d80e:	1d3b      	adds	r3, r7, #4
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d816:	b29b      	uxth	r3, r3
 800d818:	461a      	mov	r2, r3
 800d81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d81c:	4413      	add	r3, r2
 800d81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d820:	463b      	mov	r3, r7
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	011a      	lsls	r2, r3, #4
 800d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82a:	4413      	add	r3, r2
 800d82c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d830:	63bb      	str	r3, [r7, #56]	; 0x38
 800d832:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d836:	2b00      	cmp	r3, #0
 800d838:	d112      	bne.n	800d860 <USB_EPStartXfer+0x5e8>
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	881b      	ldrh	r3, [r3, #0]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d844:	b29a      	uxth	r2, r3
 800d846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d848:	801a      	strh	r2, [r3, #0]
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d858:	b29a      	uxth	r2, r3
 800d85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85c:	801a      	strh	r2, [r3, #0]
 800d85e:	e054      	b.n	800d90a <USB_EPStartXfer+0x692>
 800d860:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d864:	2b3e      	cmp	r3, #62	; 0x3e
 800d866:	d817      	bhi.n	800d898 <USB_EPStartXfer+0x620>
 800d868:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d86c:	085b      	lsrs	r3, r3, #1
 800d86e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d004      	beq.n	800d888 <USB_EPStartXfer+0x610>
 800d87e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d882:	3301      	adds	r3, #1
 800d884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d888:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	029b      	lsls	r3, r3, #10
 800d890:	b29a      	uxth	r2, r3
 800d892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d894:	801a      	strh	r2, [r3, #0]
 800d896:	e038      	b.n	800d90a <USB_EPStartXfer+0x692>
 800d898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d89c:	095b      	lsrs	r3, r3, #5
 800d89e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d8a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d8a6:	f003 031f 	and.w	r3, r3, #31
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d104      	bne.n	800d8b8 <USB_EPStartXfer+0x640>
 800d8ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d8b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	029b      	lsls	r3, r3, #10
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	801a      	strh	r2, [r3, #0]
 800d8d0:	e01b      	b.n	800d90a <USB_EPStartXfer+0x692>
 800d8d2:	463b      	mov	r3, r7
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	785b      	ldrb	r3, [r3, #1]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d116      	bne.n	800d90a <USB_EPStartXfer+0x692>
 800d8dc:	1d3b      	adds	r3, r7, #4
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ea:	4413      	add	r3, r2
 800d8ec:	647b      	str	r3, [r7, #68]	; 0x44
 800d8ee:	463b      	mov	r3, r7
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	011a      	lsls	r2, r3, #4
 800d8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800d900:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d904:	b29a      	uxth	r2, r3
 800d906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d908:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d90a:	463b      	mov	r3, r7
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	895b      	ldrh	r3, [r3, #10]
 800d910:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d914:	463b      	mov	r3, r7
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6959      	ldr	r1, [r3, #20]
 800d91a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d91e:	b29b      	uxth	r3, r3
 800d920:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d924:	1d38      	adds	r0, r7, #4
 800d926:	6800      	ldr	r0, [r0, #0]
 800d928:	f000 ff09 	bl	800e73e <USB_WritePMA>
 800d92c:	e1e2      	b.n	800dcf4 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800d92e:	463b      	mov	r3, r7
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6a1b      	ldr	r3, [r3, #32]
 800d934:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800d938:	1d3b      	adds	r3, r7, #4
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	463b      	mov	r3, r7
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	4413      	add	r3, r2
 800d946:	881b      	ldrh	r3, [r3, #0]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d94e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d952:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d956:	1d3b      	adds	r3, r7, #4
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	463b      	mov	r3, r7
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	441a      	add	r2, r3
 800d964:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d96c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d978:	b29b      	uxth	r3, r3
 800d97a:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d97c:	1d3b      	adds	r3, r7, #4
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	663b      	str	r3, [r7, #96]	; 0x60
 800d982:	1d3b      	adds	r3, r7, #4
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	461a      	mov	r2, r3
 800d98e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d990:	4413      	add	r3, r2
 800d992:	663b      	str	r3, [r7, #96]	; 0x60
 800d994:	463b      	mov	r3, r7
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	011a      	lsls	r2, r3, #4
 800d99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d99e:	4413      	add	r3, r2
 800d9a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d9a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d9b0:	463b      	mov	r3, r7
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	891b      	ldrh	r3, [r3, #8]
 800d9b6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9ba:	463b      	mov	r3, r7
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	6959      	ldr	r1, [r3, #20]
 800d9c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d9ca:	1d38      	adds	r0, r7, #4
 800d9cc:	6800      	ldr	r0, [r0, #0]
 800d9ce:	f000 feb6 	bl	800e73e <USB_WritePMA>
 800d9d2:	e18f      	b.n	800dcf4 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d9d4:	1d3b      	adds	r3, r7, #4
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	463b      	mov	r3, r7
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4413      	add	r3, r2
 800d9e2:	881b      	ldrh	r3, [r3, #0]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f000 808f 	beq.w	800db0e <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d9f0:	1d3b      	adds	r3, r7, #4
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d9f6:	463b      	mov	r3, r7
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	785b      	ldrb	r3, [r3, #1]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d164      	bne.n	800daca <USB_EPStartXfer+0x852>
 800da00:	1d3b      	adds	r3, r7, #4
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	673b      	str	r3, [r7, #112]	; 0x70
 800da06:	1d3b      	adds	r3, r7, #4
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da0e:	b29b      	uxth	r3, r3
 800da10:	461a      	mov	r2, r3
 800da12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da14:	4413      	add	r3, r2
 800da16:	673b      	str	r3, [r7, #112]	; 0x70
 800da18:	463b      	mov	r3, r7
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	011a      	lsls	r2, r3, #4
 800da20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da22:	4413      	add	r3, r2
 800da24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800da28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d112      	bne.n	800da58 <USB_EPStartXfer+0x7e0>
 800da32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	b29b      	uxth	r3, r3
 800da38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da40:	801a      	strh	r2, [r3, #0]
 800da42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	b29b      	uxth	r3, r3
 800da48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da50:	b29a      	uxth	r2, r3
 800da52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da54:	801a      	strh	r2, [r3, #0]
 800da56:	e054      	b.n	800db02 <USB_EPStartXfer+0x88a>
 800da58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da5c:	2b3e      	cmp	r3, #62	; 0x3e
 800da5e:	d817      	bhi.n	800da90 <USB_EPStartXfer+0x818>
 800da60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da64:	085b      	lsrs	r3, r3, #1
 800da66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800da6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	2b00      	cmp	r3, #0
 800da74:	d004      	beq.n	800da80 <USB_EPStartXfer+0x808>
 800da76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da7a:	3301      	adds	r3, #1
 800da7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800da80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da84:	b29b      	uxth	r3, r3
 800da86:	029b      	lsls	r3, r3, #10
 800da88:	b29a      	uxth	r2, r3
 800da8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da8c:	801a      	strh	r2, [r3, #0]
 800da8e:	e038      	b.n	800db02 <USB_EPStartXfer+0x88a>
 800da90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da94:	095b      	lsrs	r3, r3, #5
 800da96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800da9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da9e:	f003 031f 	and.w	r3, r3, #31
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d104      	bne.n	800dab0 <USB_EPStartXfer+0x838>
 800daa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daaa:	3b01      	subs	r3, #1
 800daac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	029b      	lsls	r3, r3, #10
 800dab8:	b29b      	uxth	r3, r3
 800daba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dabe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dac6:	801a      	strh	r2, [r3, #0]
 800dac8:	e01b      	b.n	800db02 <USB_EPStartXfer+0x88a>
 800daca:	463b      	mov	r3, r7
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	785b      	ldrb	r3, [r3, #1]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d116      	bne.n	800db02 <USB_EPStartXfer+0x88a>
 800dad4:	1d3b      	adds	r3, r7, #4
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dadc:	b29b      	uxth	r3, r3
 800dade:	461a      	mov	r2, r3
 800dae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dae2:	4413      	add	r3, r2
 800dae4:	67bb      	str	r3, [r7, #120]	; 0x78
 800dae6:	463b      	mov	r3, r7
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	011a      	lsls	r2, r3, #4
 800daee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daf0:	4413      	add	r3, r2
 800daf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800daf6:	677b      	str	r3, [r7, #116]	; 0x74
 800daf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800db02:	463b      	mov	r3, r7
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	895b      	ldrh	r3, [r3, #10]
 800db08:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800db0c:	e097      	b.n	800dc3e <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800db0e:	463b      	mov	r3, r7
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	785b      	ldrb	r3, [r3, #1]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d168      	bne.n	800dbea <USB_EPStartXfer+0x972>
 800db18:	1d3b      	adds	r3, r7, #4
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db20:	1d3b      	adds	r3, r7, #4
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db28:	b29b      	uxth	r3, r3
 800db2a:	461a      	mov	r2, r3
 800db2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db30:	4413      	add	r3, r2
 800db32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db36:	463b      	mov	r3, r7
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	011a      	lsls	r2, r3, #4
 800db3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db42:	4413      	add	r3, r2
 800db44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800db48:	67fb      	str	r3, [r7, #124]	; 0x7c
 800db4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d112      	bne.n	800db78 <USB_EPStartXfer+0x900>
 800db52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db54:	881b      	ldrh	r3, [r3, #0]
 800db56:	b29b      	uxth	r3, r3
 800db58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db60:	801a      	strh	r2, [r3, #0]
 800db62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	b29b      	uxth	r3, r3
 800db68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db70:	b29a      	uxth	r2, r3
 800db72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db74:	801a      	strh	r2, [r3, #0]
 800db76:	e05d      	b.n	800dc34 <USB_EPStartXfer+0x9bc>
 800db78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db7c:	2b3e      	cmp	r3, #62	; 0x3e
 800db7e:	d817      	bhi.n	800dbb0 <USB_EPStartXfer+0x938>
 800db80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db84:	085b      	lsrs	r3, r3, #1
 800db86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800db8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	2b00      	cmp	r3, #0
 800db94:	d004      	beq.n	800dba0 <USB_EPStartXfer+0x928>
 800db96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800db9a:	3301      	adds	r3, #1
 800db9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dba0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	029b      	lsls	r3, r3, #10
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbac:	801a      	strh	r2, [r3, #0]
 800dbae:	e041      	b.n	800dc34 <USB_EPStartXfer+0x9bc>
 800dbb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbb4:	095b      	lsrs	r3, r3, #5
 800dbb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dbba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbbe:	f003 031f 	and.w	r3, r3, #31
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d104      	bne.n	800dbd0 <USB_EPStartXfer+0x958>
 800dbc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dbd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	029b      	lsls	r3, r3, #10
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbe6:	801a      	strh	r2, [r3, #0]
 800dbe8:	e024      	b.n	800dc34 <USB_EPStartXfer+0x9bc>
 800dbea:	463b      	mov	r3, r7
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	785b      	ldrb	r3, [r3, #1]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d11f      	bne.n	800dc34 <USB_EPStartXfer+0x9bc>
 800dbf4:	1d3b      	adds	r3, r7, #4
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dbfc:	1d3b      	adds	r3, r7, #4
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	461a      	mov	r2, r3
 800dc08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc0c:	4413      	add	r3, r2
 800dc0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc12:	463b      	mov	r3, r7
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	011a      	lsls	r2, r3, #4
 800dc1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc1e:	4413      	add	r3, r2
 800dc20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dc24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dc34:	463b      	mov	r3, r7
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	891b      	ldrh	r3, [r3, #8]
 800dc3a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dc3e:	463b      	mov	r3, r7
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6959      	ldr	r1, [r3, #20]
 800dc44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800dc4e:	1d38      	adds	r0, r7, #4
 800dc50:	6800      	ldr	r0, [r0, #0]
 800dc52:	f000 fd74 	bl	800e73e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800dc56:	463b      	mov	r3, r7
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	785b      	ldrb	r3, [r3, #1]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d122      	bne.n	800dca6 <USB_EPStartXfer+0xa2e>
 800dc60:	1d3b      	adds	r3, r7, #4
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	463b      	mov	r3, r7
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc7a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800dc7e:	1d3b      	adds	r3, r7, #4
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	463b      	mov	r3, r7
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	441a      	add	r2, r3
 800dc8c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800dc90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	8013      	strh	r3, [r2, #0]
 800dca4:	e026      	b.n	800dcf4 <USB_EPStartXfer+0xa7c>
 800dca6:	463b      	mov	r3, r7
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	785b      	ldrb	r3, [r3, #1]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d121      	bne.n	800dcf4 <USB_EPStartXfer+0xa7c>
 800dcb0:	1d3b      	adds	r3, r7, #4
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	463b      	mov	r3, r7
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcca:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800dcce:	1d3b      	adds	r3, r7, #4
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	463b      	mov	r3, r7
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	441a      	add	r2, r3
 800dcdc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800dce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dcec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dcf4:	1d3b      	adds	r3, r7, #4
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	463b      	mov	r3, r7
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	f107 020e 	add.w	r2, r7, #14
 800dd0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd12:	8013      	strh	r3, [r2, #0]
 800dd14:	f107 030e 	add.w	r3, r7, #14
 800dd18:	f107 020e 	add.w	r2, r7, #14
 800dd1c:	8812      	ldrh	r2, [r2, #0]
 800dd1e:	f082 0210 	eor.w	r2, r2, #16
 800dd22:	801a      	strh	r2, [r3, #0]
 800dd24:	f107 030e 	add.w	r3, r7, #14
 800dd28:	f107 020e 	add.w	r2, r7, #14
 800dd2c:	8812      	ldrh	r2, [r2, #0]
 800dd2e:	f082 0220 	eor.w	r2, r2, #32
 800dd32:	801a      	strh	r2, [r3, #0]
 800dd34:	1d3b      	adds	r3, r7, #4
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	463b      	mov	r3, r7
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	441a      	add	r2, r3
 800dd42:	f107 030e 	add.w	r3, r7, #14
 800dd46:	881b      	ldrh	r3, [r3, #0]
 800dd48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	8013      	strh	r3, [r2, #0]
 800dd5c:	e3b5      	b.n	800e4ca <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dd5e:	463b      	mov	r3, r7
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	7b1b      	ldrb	r3, [r3, #12]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f040 8090 	bne.w	800de8a <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800dd6a:	463b      	mov	r3, r7
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	699a      	ldr	r2, [r3, #24]
 800dd70:	463b      	mov	r3, r7
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d90e      	bls.n	800dd98 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800dd7a:	463b      	mov	r3, r7
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800dd84:	463b      	mov	r3, r7
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	699a      	ldr	r2, [r3, #24]
 800dd8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd8e:	1ad2      	subs	r2, r2, r3
 800dd90:	463b      	mov	r3, r7
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	619a      	str	r2, [r3, #24]
 800dd96:	e008      	b.n	800ddaa <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800dd98:	463b      	mov	r3, r7
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800dda2:	463b      	mov	r3, r7
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2200      	movs	r2, #0
 800dda8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ddaa:	1d3b      	adds	r3, r7, #4
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ddb2:	1d3b      	adds	r3, r7, #4
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddc2:	4413      	add	r3, r2
 800ddc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ddc8:	463b      	mov	r3, r7
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	011a      	lsls	r2, r3, #4
 800ddd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddd4:	4413      	add	r3, r2
 800ddd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ddda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ddde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d116      	bne.n	800de14 <USB_EPStartXfer+0xb9c>
 800dde6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddf8:	801a      	strh	r2, [r3, #0]
 800ddfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddfe:	881b      	ldrh	r3, [r3, #0]
 800de00:	b29b      	uxth	r3, r3
 800de02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de10:	801a      	strh	r2, [r3, #0]
 800de12:	e32c      	b.n	800e46e <USB_EPStartXfer+0x11f6>
 800de14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de18:	2b3e      	cmp	r3, #62	; 0x3e
 800de1a:	d818      	bhi.n	800de4e <USB_EPStartXfer+0xbd6>
 800de1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de20:	085b      	lsrs	r3, r3, #1
 800de22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800de26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de2a:	f003 0301 	and.w	r3, r3, #1
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d004      	beq.n	800de3c <USB_EPStartXfer+0xbc4>
 800de32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800de36:	3301      	adds	r3, #1
 800de38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800de3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800de40:	b29b      	uxth	r3, r3
 800de42:	029b      	lsls	r3, r3, #10
 800de44:	b29a      	uxth	r2, r3
 800de46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de4a:	801a      	strh	r2, [r3, #0]
 800de4c:	e30f      	b.n	800e46e <USB_EPStartXfer+0x11f6>
 800de4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de52:	095b      	lsrs	r3, r3, #5
 800de54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800de58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de5c:	f003 031f 	and.w	r3, r3, #31
 800de60:	2b00      	cmp	r3, #0
 800de62:	d104      	bne.n	800de6e <USB_EPStartXfer+0xbf6>
 800de64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800de68:	3b01      	subs	r3, #1
 800de6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800de6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800de72:	b29b      	uxth	r3, r3
 800de74:	029b      	lsls	r3, r3, #10
 800de76:	b29b      	uxth	r3, r3
 800de78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de80:	b29a      	uxth	r2, r3
 800de82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de86:	801a      	strh	r2, [r3, #0]
 800de88:	e2f1      	b.n	800e46e <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800de8a:	463b      	mov	r3, r7
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	78db      	ldrb	r3, [r3, #3]
 800de90:	2b02      	cmp	r3, #2
 800de92:	f040 818f 	bne.w	800e1b4 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800de96:	463b      	mov	r3, r7
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d175      	bne.n	800df8c <USB_EPStartXfer+0xd14>
 800dea0:	1d3b      	adds	r3, r7, #4
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dea8:	1d3b      	adds	r3, r7, #4
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	461a      	mov	r2, r3
 800deb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800deb8:	4413      	add	r3, r2
 800deba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800debe:	463b      	mov	r3, r7
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	011a      	lsls	r2, r3, #4
 800dec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800deca:	4413      	add	r3, r2
 800decc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ded0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ded4:	463b      	mov	r3, r7
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d116      	bne.n	800df0c <USB_EPStartXfer+0xc94>
 800dede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800deea:	b29a      	uxth	r2, r3
 800deec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800def0:	801a      	strh	r2, [r3, #0]
 800def2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	b29b      	uxth	r3, r3
 800defa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800defe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df02:	b29a      	uxth	r2, r3
 800df04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df08:	801a      	strh	r2, [r3, #0]
 800df0a:	e065      	b.n	800dfd8 <USB_EPStartXfer+0xd60>
 800df0c:	463b      	mov	r3, r7
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	2b3e      	cmp	r3, #62	; 0x3e
 800df14:	d81a      	bhi.n	800df4c <USB_EPStartXfer+0xcd4>
 800df16:	463b      	mov	r3, r7
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	085b      	lsrs	r3, r3, #1
 800df1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800df22:	463b      	mov	r3, r7
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	691b      	ldr	r3, [r3, #16]
 800df28:	f003 0301 	and.w	r3, r3, #1
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <USB_EPStartXfer+0xcc2>
 800df30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800df34:	3301      	adds	r3, #1
 800df36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800df3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800df3e:	b29b      	uxth	r3, r3
 800df40:	029b      	lsls	r3, r3, #10
 800df42:	b29a      	uxth	r2, r3
 800df44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df48:	801a      	strh	r2, [r3, #0]
 800df4a:	e045      	b.n	800dfd8 <USB_EPStartXfer+0xd60>
 800df4c:	463b      	mov	r3, r7
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	095b      	lsrs	r3, r3, #5
 800df54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800df58:	463b      	mov	r3, r7
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	f003 031f 	and.w	r3, r3, #31
 800df62:	2b00      	cmp	r3, #0
 800df64:	d104      	bne.n	800df70 <USB_EPStartXfer+0xcf8>
 800df66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800df6a:	3b01      	subs	r3, #1
 800df6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800df70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800df74:	b29b      	uxth	r3, r3
 800df76:	029b      	lsls	r3, r3, #10
 800df78:	b29b      	uxth	r3, r3
 800df7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df82:	b29a      	uxth	r2, r3
 800df84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df88:	801a      	strh	r2, [r3, #0]
 800df8a:	e025      	b.n	800dfd8 <USB_EPStartXfer+0xd60>
 800df8c:	463b      	mov	r3, r7
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	785b      	ldrb	r3, [r3, #1]
 800df92:	2b01      	cmp	r3, #1
 800df94:	d120      	bne.n	800dfd8 <USB_EPStartXfer+0xd60>
 800df96:	1d3b      	adds	r3, r7, #4
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800df9e:	1d3b      	adds	r3, r7, #4
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfae:	4413      	add	r3, r2
 800dfb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dfb4:	463b      	mov	r3, r7
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	011a      	lsls	r2, r3, #4
 800dfbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfc0:	4413      	add	r3, r2
 800dfc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dfc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dfca:	463b      	mov	r3, r7
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfd6:	801a      	strh	r2, [r3, #0]
 800dfd8:	1d3b      	adds	r3, r7, #4
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dfe0:	463b      	mov	r3, r7
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	785b      	ldrb	r3, [r3, #1]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d175      	bne.n	800e0d6 <USB_EPStartXfer+0xe5e>
 800dfea:	1d3b      	adds	r3, r7, #4
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dff2:	1d3b      	adds	r3, r7, #4
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	461a      	mov	r2, r3
 800dffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e002:	4413      	add	r3, r2
 800e004:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e008:	463b      	mov	r3, r7
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	011a      	lsls	r2, r3, #4
 800e010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e014:	4413      	add	r3, r2
 800e016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e01a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e01e:	463b      	mov	r3, r7
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d116      	bne.n	800e056 <USB_EPStartXfer+0xdde>
 800e028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	b29b      	uxth	r3, r3
 800e030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e034:	b29a      	uxth	r2, r3
 800e036:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e03a:	801a      	strh	r2, [r3, #0]
 800e03c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	b29b      	uxth	r3, r3
 800e044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e052:	801a      	strh	r2, [r3, #0]
 800e054:	e061      	b.n	800e11a <USB_EPStartXfer+0xea2>
 800e056:	463b      	mov	r3, r7
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	2b3e      	cmp	r3, #62	; 0x3e
 800e05e:	d81a      	bhi.n	800e096 <USB_EPStartXfer+0xe1e>
 800e060:	463b      	mov	r3, r7
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	691b      	ldr	r3, [r3, #16]
 800e066:	085b      	lsrs	r3, r3, #1
 800e068:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e06c:	463b      	mov	r3, r7
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	2b00      	cmp	r3, #0
 800e078:	d004      	beq.n	800e084 <USB_EPStartXfer+0xe0c>
 800e07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e07e:	3301      	adds	r3, #1
 800e080:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e088:	b29b      	uxth	r3, r3
 800e08a:	029b      	lsls	r3, r3, #10
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e092:	801a      	strh	r2, [r3, #0]
 800e094:	e041      	b.n	800e11a <USB_EPStartXfer+0xea2>
 800e096:	463b      	mov	r3, r7
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	095b      	lsrs	r3, r3, #5
 800e09e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e0a2:	463b      	mov	r3, r7
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	f003 031f 	and.w	r3, r3, #31
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d104      	bne.n	800e0ba <USB_EPStartXfer+0xe42>
 800e0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	029b      	lsls	r3, r3, #10
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0d2:	801a      	strh	r2, [r3, #0]
 800e0d4:	e021      	b.n	800e11a <USB_EPStartXfer+0xea2>
 800e0d6:	463b      	mov	r3, r7
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d11c      	bne.n	800e11a <USB_EPStartXfer+0xea2>
 800e0e0:	1d3b      	adds	r3, r7, #4
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e0f0:	4413      	add	r3, r2
 800e0f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	011a      	lsls	r2, r3, #4
 800e0fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e102:	4413      	add	r3, r2
 800e104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e10c:	463b      	mov	r3, r7
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	b29a      	uxth	r2, r3
 800e114:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e118:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800e11a:	463b      	mov	r3, r7
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	69db      	ldr	r3, [r3, #28]
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 81a4 	beq.w	800e46e <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e126:	1d3b      	adds	r3, r7, #4
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	463b      	mov	r3, r7
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4413      	add	r3, r2
 800e134:	881b      	ldrh	r3, [r3, #0]
 800e136:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e13a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e13e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e142:	2b00      	cmp	r3, #0
 800e144:	d005      	beq.n	800e152 <USB_EPStartXfer+0xeda>
 800e146:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10d      	bne.n	800e16e <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e152:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f040 8187 	bne.w	800e46e <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e160:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f040 8180 	bne.w	800e46e <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800e16e:	1d3b      	adds	r3, r7, #4
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	463b      	mov	r3, r7
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e188:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800e18c:	1d3b      	adds	r3, r7, #4
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	463b      	mov	r3, r7
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	441a      	add	r2, r3
 800e19a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800e19e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	8013      	strh	r3, [r2, #0]
 800e1b2:	e15c      	b.n	800e46e <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e1b4:	463b      	mov	r3, r7
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	78db      	ldrb	r3, [r3, #3]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	f040 8155 	bne.w	800e46a <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800e1c0:	463b      	mov	r3, r7
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	463b      	mov	r3, r7
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d90e      	bls.n	800e1ee <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800e1d0:	463b      	mov	r3, r7
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800e1da:	463b      	mov	r3, r7
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	699a      	ldr	r2, [r3, #24]
 800e1e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e1e4:	1ad2      	subs	r2, r2, r3
 800e1e6:	463b      	mov	r3, r7
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	619a      	str	r2, [r3, #24]
 800e1ec:	e008      	b.n	800e200 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800e1ee:	463b      	mov	r3, r7
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800e1f8:	463b      	mov	r3, r7
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e200:	463b      	mov	r3, r7
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	785b      	ldrb	r3, [r3, #1]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d16f      	bne.n	800e2ea <USB_EPStartXfer+0x1072>
 800e20a:	1d3b      	adds	r3, r7, #4
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e212:	1d3b      	adds	r3, r7, #4
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	461a      	mov	r2, r3
 800e21e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e222:	4413      	add	r3, r2
 800e224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e228:	463b      	mov	r3, r7
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	011a      	lsls	r2, r3, #4
 800e230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e234:	4413      	add	r3, r2
 800e236:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e23a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e23e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e242:	2b00      	cmp	r3, #0
 800e244:	d116      	bne.n	800e274 <USB_EPStartXfer+0xffc>
 800e246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e252:	b29a      	uxth	r2, r3
 800e254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e258:	801a      	strh	r2, [r3, #0]
 800e25a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	b29b      	uxth	r3, r3
 800e262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e270:	801a      	strh	r2, [r3, #0]
 800e272:	e05f      	b.n	800e334 <USB_EPStartXfer+0x10bc>
 800e274:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e278:	2b3e      	cmp	r3, #62	; 0x3e
 800e27a:	d818      	bhi.n	800e2ae <USB_EPStartXfer+0x1036>
 800e27c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e280:	085b      	lsrs	r3, r3, #1
 800e282:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e286:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e28a:	f003 0301 	and.w	r3, r3, #1
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d004      	beq.n	800e29c <USB_EPStartXfer+0x1024>
 800e292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e296:	3301      	adds	r3, #1
 800e298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	029b      	lsls	r3, r3, #10
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e2aa:	801a      	strh	r2, [r3, #0]
 800e2ac:	e042      	b.n	800e334 <USB_EPStartXfer+0x10bc>
 800e2ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e2b2:	095b      	lsrs	r3, r3, #5
 800e2b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e2b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e2bc:	f003 031f 	and.w	r3, r3, #31
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d104      	bne.n	800e2ce <USB_EPStartXfer+0x1056>
 800e2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e2ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	029b      	lsls	r3, r3, #10
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e2e6:	801a      	strh	r2, [r3, #0]
 800e2e8:	e024      	b.n	800e334 <USB_EPStartXfer+0x10bc>
 800e2ea:	463b      	mov	r3, r7
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	785b      	ldrb	r3, [r3, #1]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d11f      	bne.n	800e334 <USB_EPStartXfer+0x10bc>
 800e2f4:	1d3b      	adds	r3, r7, #4
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e2fc:	1d3b      	adds	r3, r7, #4
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e304:	b29b      	uxth	r3, r3
 800e306:	461a      	mov	r2, r3
 800e308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e30c:	4413      	add	r3, r2
 800e30e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e312:	463b      	mov	r3, r7
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	011a      	lsls	r2, r3, #4
 800e31a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e31e:	4413      	add	r3, r2
 800e320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e328:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e332:	801a      	strh	r2, [r3, #0]
 800e334:	1d3b      	adds	r3, r7, #4
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e33c:	463b      	mov	r3, r7
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	785b      	ldrb	r3, [r3, #1]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d16f      	bne.n	800e426 <USB_EPStartXfer+0x11ae>
 800e346:	1d3b      	adds	r3, r7, #4
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e34e:	1d3b      	adds	r3, r7, #4
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e356:	b29b      	uxth	r3, r3
 800e358:	461a      	mov	r2, r3
 800e35a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e35e:	4413      	add	r3, r2
 800e360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e364:	463b      	mov	r3, r7
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	011a      	lsls	r2, r3, #4
 800e36c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e370:	4413      	add	r3, r2
 800e372:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e37a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d116      	bne.n	800e3b0 <USB_EPStartXfer+0x1138>
 800e382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	b29b      	uxth	r3, r3
 800e38a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e38e:	b29a      	uxth	r2, r3
 800e390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e394:	801a      	strh	r2, [r3, #0]
 800e396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3a6:	b29a      	uxth	r2, r3
 800e3a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e3ac:	801a      	strh	r2, [r3, #0]
 800e3ae:	e05e      	b.n	800e46e <USB_EPStartXfer+0x11f6>
 800e3b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e3b4:	2b3e      	cmp	r3, #62	; 0x3e
 800e3b6:	d818      	bhi.n	800e3ea <USB_EPStartXfer+0x1172>
 800e3b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e3bc:	085b      	lsrs	r3, r3, #1
 800e3be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e3c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d004      	beq.n	800e3d8 <USB_EPStartXfer+0x1160>
 800e3ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e3d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	029b      	lsls	r3, r3, #10
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e3e6:	801a      	strh	r2, [r3, #0]
 800e3e8:	e041      	b.n	800e46e <USB_EPStartXfer+0x11f6>
 800e3ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e3ee:	095b      	lsrs	r3, r3, #5
 800e3f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e3f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e3f8:	f003 031f 	and.w	r3, r3, #31
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d104      	bne.n	800e40a <USB_EPStartXfer+0x1192>
 800e400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e404:	3b01      	subs	r3, #1
 800e406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e40a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e40e:	b29b      	uxth	r3, r3
 800e410:	029b      	lsls	r3, r3, #10
 800e412:	b29b      	uxth	r3, r3
 800e414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e422:	801a      	strh	r2, [r3, #0]
 800e424:	e023      	b.n	800e46e <USB_EPStartXfer+0x11f6>
 800e426:	463b      	mov	r3, r7
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	785b      	ldrb	r3, [r3, #1]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d11e      	bne.n	800e46e <USB_EPStartXfer+0x11f6>
 800e430:	1d3b      	adds	r3, r7, #4
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e438:	b29b      	uxth	r3, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e440:	4413      	add	r3, r2
 800e442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e446:	463b      	mov	r3, r7
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	011a      	lsls	r2, r3, #4
 800e44e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e452:	4413      	add	r3, r2
 800e454:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e45c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e460:	b29a      	uxth	r2, r3
 800e462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e466:	801a      	strh	r2, [r3, #0]
 800e468:	e001      	b.n	800e46e <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800e46a:	2301      	movs	r3, #1
 800e46c:	e02e      	b.n	800e4cc <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e46e:	1d3b      	adds	r3, r7, #4
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	463b      	mov	r3, r7
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4413      	add	r3, r2
 800e47c:	881b      	ldrh	r3, [r3, #0]
 800e47e:	b29b      	uxth	r3, r3
 800e480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e488:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e48c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e494:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e498:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e49c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e4a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e4a4:	1d3b      	adds	r3, r7, #4
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	463b      	mov	r3, r7
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	441a      	add	r2, r3
 800e4b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e4b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b085      	sub	sp, #20
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	785b      	ldrb	r3, [r3, #1]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d020      	beq.n	800e52a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	881b      	ldrh	r3, [r3, #0]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4fe:	81bb      	strh	r3, [r7, #12]
 800e500:	89bb      	ldrh	r3, [r7, #12]
 800e502:	f083 0310 	eor.w	r3, r3, #16
 800e506:	81bb      	strh	r3, [r7, #12]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	441a      	add	r2, r3
 800e512:	89bb      	ldrh	r3, [r7, #12]
 800e514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e51c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e524:	b29b      	uxth	r3, r3
 800e526:	8013      	strh	r3, [r2, #0]
 800e528:	e01f      	b.n	800e56a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	b29b      	uxth	r3, r3
 800e538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e53c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e540:	81fb      	strh	r3, [r7, #14]
 800e542:	89fb      	ldrh	r3, [r7, #14]
 800e544:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e548:	81fb      	strh	r3, [r7, #14]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	441a      	add	r2, r3
 800e554:	89fb      	ldrh	r3, [r7, #14]
 800e556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e55a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e55e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e566:	b29b      	uxth	r3, r3
 800e568:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3714      	adds	r7, #20
 800e570:	46bd      	mov	sp, r7
 800e572:	bc80      	pop	{r7}
 800e574:	4770      	bx	lr

0800e576 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e576:	b480      	push	{r7}
 800e578:	b087      	sub	sp, #28
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	7b1b      	ldrb	r3, [r3, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	f040 809d 	bne.w	800e6c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d04c      	beq.n	800e62c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	881b      	ldrh	r3, [r3, #0]
 800e59e:	823b      	strh	r3, [r7, #16]
 800e5a0:	8a3b      	ldrh	r3, [r7, #16]
 800e5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d01b      	beq.n	800e5e2 <USB_EPClearStall+0x6c>
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5c0:	81fb      	strh	r3, [r7, #14]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	441a      	add	r2, r3
 800e5cc:	89fb      	ldrh	r3, [r7, #14]
 800e5ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	78db      	ldrb	r3, [r3, #3]
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d06c      	beq.n	800e6c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	881b      	ldrh	r3, [r3, #0]
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e600:	81bb      	strh	r3, [r7, #12]
 800e602:	89bb      	ldrh	r3, [r7, #12]
 800e604:	f083 0320 	eor.w	r3, r3, #32
 800e608:	81bb      	strh	r3, [r7, #12]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	441a      	add	r2, r3
 800e614:	89bb      	ldrh	r3, [r7, #12]
 800e616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e61a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e626:	b29b      	uxth	r3, r3
 800e628:	8013      	strh	r3, [r2, #0]
 800e62a:	e04b      	b.n	800e6c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	82fb      	strh	r3, [r7, #22]
 800e63a:	8afb      	ldrh	r3, [r7, #22]
 800e63c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d01b      	beq.n	800e67c <USB_EPClearStall+0x106>
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4413      	add	r3, r2
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	b29b      	uxth	r3, r3
 800e652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e65a:	82bb      	strh	r3, [r7, #20]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	441a      	add	r2, r3
 800e666:	8abb      	ldrh	r3, [r7, #20]
 800e668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e66c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e678:	b29b      	uxth	r3, r3
 800e67a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4413      	add	r3, r2
 800e686:	881b      	ldrh	r3, [r3, #0]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e692:	827b      	strh	r3, [r7, #18]
 800e694:	8a7b      	ldrh	r3, [r7, #18]
 800e696:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e69a:	827b      	strh	r3, [r7, #18]
 800e69c:	8a7b      	ldrh	r3, [r7, #18]
 800e69e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e6a2:	827b      	strh	r3, [r7, #18]
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	441a      	add	r2, r3
 800e6ae:	8a7b      	ldrh	r3, [r7, #18]
 800e6b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	371c      	adds	r7, #28
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bc80      	pop	{r7}
 800e6ce:	4770      	bx	lr

0800e6d0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e6dc:	78fb      	ldrb	r3, [r7, #3]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d103      	bne.n	800e6ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2280      	movs	r2, #128	; 0x80
 800e6e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	370c      	adds	r7, #12
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bc80      	pop	{r7}
 800e6f4:	4770      	bx	lr

0800e6f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e6f6:	b480      	push	{r7}
 800e6f8:	b083      	sub	sp, #12
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	bc80      	pop	{r7}
 800e708:	4770      	bx	lr

0800e70a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800e70a:	b480      	push	{r7}
 800e70c:	b085      	sub	sp, #20
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e718:	b29b      	uxth	r3, r3
 800e71a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e71c:	68fb      	ldr	r3, [r7, #12]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3714      	adds	r7, #20
 800e722:	46bd      	mov	sp, r7
 800e724:	bc80      	pop	{r7}
 800e726:	4770      	bx	lr

0800e728 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	bc80      	pop	{r7}
 800e73c:	4770      	bx	lr

0800e73e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e73e:	b480      	push	{r7}
 800e740:	b08d      	sub	sp, #52	; 0x34
 800e742:	af00      	add	r7, sp, #0
 800e744:	60f8      	str	r0, [r7, #12]
 800e746:	60b9      	str	r1, [r7, #8]
 800e748:	4611      	mov	r1, r2
 800e74a:	461a      	mov	r2, r3
 800e74c:	460b      	mov	r3, r1
 800e74e:	80fb      	strh	r3, [r7, #6]
 800e750:	4613      	mov	r3, r2
 800e752:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e754:	88bb      	ldrh	r3, [r7, #4]
 800e756:	3301      	adds	r3, #1
 800e758:	085b      	lsrs	r3, r3, #1
 800e75a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e764:	88fb      	ldrh	r3, [r7, #6]
 800e766:	005a      	lsls	r2, r3, #1
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e770:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e776:	e01e      	b.n	800e7b6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	3301      	adds	r3, #1
 800e782:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	021b      	lsls	r3, r3, #8
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	461a      	mov	r2, r3
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	4313      	orrs	r3, r2
 800e794:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	b29a      	uxth	r2, r3
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	3302      	adds	r3, #2
 800e7a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	3302      	adds	r3, #2
 800e7a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1dd      	bne.n	800e778 <USB_WritePMA+0x3a>
  }
}
 800e7bc:	bf00      	nop
 800e7be:	3734      	adds	r7, #52	; 0x34
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bc80      	pop	{r7}
 800e7c4:	4770      	bx	lr

0800e7c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b08b      	sub	sp, #44	; 0x2c
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	80fb      	strh	r3, [r7, #6]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e7dc:	88bb      	ldrh	r3, [r7, #4]
 800e7de:	085b      	lsrs	r3, r3, #1
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e7ec:	88fb      	ldrh	r3, [r7, #6]
 800e7ee:	005a      	lsls	r2, r3, #1
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e7f8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e7fe:	e01b      	b.n	800e838 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	b29b      	uxth	r3, r3
 800e806:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	3302      	adds	r3, #2
 800e80c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	b2da      	uxtb	r2, r3
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	3301      	adds	r3, #1
 800e81a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	0a1b      	lsrs	r3, r3, #8
 800e820:	b2da      	uxtb	r2, r3
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	3301      	adds	r3, #1
 800e82a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800e82c:	6a3b      	ldr	r3, [r7, #32]
 800e82e:	3302      	adds	r3, #2
 800e830:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800e832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e834:	3b01      	subs	r3, #1
 800e836:	627b      	str	r3, [r7, #36]	; 0x24
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1e0      	bne.n	800e800 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800e83e:	88bb      	ldrh	r3, [r7, #4]
 800e840:	f003 0301 	and.w	r3, r3, #1
 800e844:	b29b      	uxth	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d007      	beq.n	800e85a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	b29b      	uxth	r3, r3
 800e850:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	b2da      	uxtb	r2, r3
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	701a      	strb	r2, [r3, #0]
  }
}
 800e85a:	bf00      	nop
 800e85c:	372c      	adds	r7, #44	; 0x2c
 800e85e:	46bd      	mov	sp, r7
 800e860:	bc80      	pop	{r7}
 800e862:	4770      	bx	lr

0800e864 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e868:	4904      	ldr	r1, [pc, #16]	; (800e87c <MX_FATFS_Init+0x18>)
 800e86a:	4805      	ldr	r0, [pc, #20]	; (800e880 <MX_FATFS_Init+0x1c>)
 800e86c:	f002 faca 	bl	8010e04 <FATFS_LinkDriver>
 800e870:	4603      	mov	r3, r0
 800e872:	461a      	mov	r2, r3
 800e874:	4b03      	ldr	r3, [pc, #12]	; (800e884 <MX_FATFS_Init+0x20>)
 800e876:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e878:	bf00      	nop
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	200091cc 	.word	0x200091cc
 800e880:	2000001c 	.word	0x2000001c
 800e884:	200091d0 	.word	0x200091d0

0800e888 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	4603      	mov	r3, r0
 800e890:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <USER_initialize+0x20>)
 800e894:	2201      	movs	r2, #1
 800e896:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e898:	4b03      	ldr	r3, [pc, #12]	; (800e8a8 <USER_initialize+0x20>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bc80      	pop	{r7}
 800e8a6:	4770      	bx	lr
 800e8a8:	20000018 	.word	0x20000018

0800e8ac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800e8b6:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <USER_status+0x20>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e8bc:	4b03      	ldr	r3, [pc, #12]	; (800e8cc <USER_status+0x20>)
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bc80      	pop	{r7}
 800e8ca:	4770      	bx	lr
 800e8cc:	20000018 	.word	0x20000018

0800e8d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60b9      	str	r1, [r7, #8]
 800e8d8:	607a      	str	r2, [r7, #4]
 800e8da:	603b      	str	r3, [r7, #0]
 800e8dc:	4603      	mov	r3, r0
 800e8de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800e8e0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3714      	adds	r7, #20
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bc80      	pop	{r7}
 800e8ea:	4770      	bx	lr

0800e8ec <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b085      	sub	sp, #20
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60b9      	str	r1, [r7, #8]
 800e8f4:	607a      	str	r2, [r7, #4]
 800e8f6:	603b      	str	r3, [r7, #0]
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800e8fc:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3714      	adds	r7, #20
 800e902:	46bd      	mov	sp, r7
 800e904:	bc80      	pop	{r7}
 800e906:	4770      	bx	lr

0800e908 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	4603      	mov	r3, r0
 800e910:	603a      	str	r2, [r7, #0]
 800e912:	71fb      	strb	r3, [r7, #7]
 800e914:	460b      	mov	r3, r1
 800e916:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	73fb      	strb	r3, [r7, #15]
    return res;
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	bc80      	pop	{r7}
 800e926:	4770      	bx	lr

0800e928 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	460b      	mov	r3, r1
 800e932:	70fb      	strb	r3, [r7, #3]
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	7c1b      	ldrb	r3, [r3, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d115      	bne.n	800e968 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e93c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e940:	2202      	movs	r2, #2
 800e942:	2101      	movs	r1, #1
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f005 ffa4 	bl	8014892 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800e952:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e956:	2202      	movs	r2, #2
 800e958:	2181      	movs	r1, #129	; 0x81
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f005 ff99 	bl	8014892 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	62da      	str	r2, [r3, #44]	; 0x2c
 800e966:	e012      	b.n	800e98e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e968:	2340      	movs	r3, #64	; 0x40
 800e96a:	2202      	movs	r2, #2
 800e96c:	2101      	movs	r1, #1
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f005 ff8f 	bl	8014892 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800e97c:	2340      	movs	r3, #64	; 0x40
 800e97e:	2202      	movs	r2, #2
 800e980:	2181      	movs	r1, #129	; 0x81
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f005 ff85 	bl	8014892 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800e98e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800e992:	f006 f8c5 	bl	8014b20 <USBD_static_malloc>
 800e996:	4602      	mov	r2, r0
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	e003      	b.n	800e9b4 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 f9d9 	bl	800ed64 <MSC_BOT_Init>

  return USBD_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800e9c8:	2101      	movs	r1, #1
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f005 ff87 	bl	80148de <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800e9d8:	2181      	movs	r1, #129	; 0x81
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f005 ff7f 	bl	80148de <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 fa06 	bl	800edf8 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d009      	beq.n	800ea0a <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f006 f89b 	bl	8014b38 <USBD_static_free>
    pdev->pClassData  = NULL;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ea24:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d04d      	beq.n	800ead6 <USBD_MSC_Setup+0xc2>
 800ea3a:	2b20      	cmp	r3, #32
 800ea3c:	f040 8113 	bne.w	800ec66 <USBD_MSC_Setup+0x252>
  {

    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	785b      	ldrb	r3, [r3, #1]
 800ea44:	2bfe      	cmp	r3, #254	; 0xfe
 800ea46:	d002      	beq.n	800ea4e <USBD_MSC_Setup+0x3a>
 800ea48:	2bff      	cmp	r3, #255	; 0xff
 800ea4a:	d024      	beq.n	800ea96 <USBD_MSC_Setup+0x82>
 800ea4c:	e03b      	b.n	800eac6 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	885b      	ldrh	r3, [r3, #2]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d118      	bne.n	800ea88 <USBD_MSC_Setup+0x74>
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	88db      	ldrh	r3, [r3, #6]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d114      	bne.n	800ea88 <USBD_MSC_Setup+0x74>
         ((req->bmRequest & 0x80U) == 0x80U))
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	da0f      	bge.n	800ea88 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea6e:	699b      	ldr	r3, [r3, #24]
 800ea70:	4798      	blx	r3
 800ea72:	4603      	mov	r3, r0
 800ea74:	461a      	mov	r2, r3
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	4619      	mov	r1, r3
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f002 f90f 	bl	8010ca4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ea86:	e025      	b.n	800ead4 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800ea88:	6839      	ldr	r1, [r7, #0]
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f002 f8a0 	bl	8010bd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800ea90:	2302      	movs	r3, #2
 800ea92:	75fb      	strb	r3, [r7, #23]
      break;
 800ea94:	e01e      	b.n	800ead4 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	885b      	ldrh	r3, [r3, #2]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10c      	bne.n	800eab8 <USBD_MSC_Setup+0xa4>
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	88db      	ldrh	r3, [r3, #6]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d108      	bne.n	800eab8 <USBD_MSC_Setup+0xa4>
         ((req->bmRequest & 0x80U) != 0x80U))
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	db03      	blt.n	800eab8 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f987 	bl	800edc4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev , req);
        ret = USBD_FAIL;
      }
      break;
 800eab6:	e00d      	b.n	800ead4 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev , req);
 800eab8:	6839      	ldr	r1, [r7, #0]
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f002 f888 	bl	8010bd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800eac0:	2302      	movs	r3, #2
 800eac2:	75fb      	strb	r3, [r7, #23]
      break;
 800eac4:	e006      	b.n	800ead4 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev , req);
 800eac6:	6839      	ldr	r1, [r7, #0]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f002 f881 	bl	8010bd0 <USBD_CtlError>
      ret = USBD_FAIL;
 800eace:	2302      	movs	r3, #2
 800ead0:	75fb      	strb	r3, [r7, #23]
      break;
 800ead2:	bf00      	nop
    }
    break;
 800ead4:	e0ce      	b.n	800ec74 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	785b      	ldrb	r3, [r3, #1]
 800eada:	2b0b      	cmp	r3, #11
 800eadc:	f200 80bb 	bhi.w	800ec56 <USBD_MSC_Setup+0x242>
 800eae0:	a201      	add	r2, pc, #4	; (adr r2, 800eae8 <USBD_MSC_Setup+0xd4>)
 800eae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae6:	bf00      	nop
 800eae8:	0800eb19 	.word	0x0800eb19
 800eaec:	0800eb8f 	.word	0x0800eb8f
 800eaf0:	0800ec57 	.word	0x0800ec57
 800eaf4:	0800ec57 	.word	0x0800ec57
 800eaf8:	0800ec57 	.word	0x0800ec57
 800eafc:	0800ec57 	.word	0x0800ec57
 800eb00:	0800ec57 	.word	0x0800ec57
 800eb04:	0800ec57 	.word	0x0800ec57
 800eb08:	0800ec57 	.word	0x0800ec57
 800eb0c:	0800ec57 	.word	0x0800ec57
 800eb10:	0800eb41 	.word	0x0800eb41
 800eb14:	0800eb69 	.word	0x0800eb69
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eb1e:	2b03      	cmp	r3, #3
 800eb20:	d107      	bne.n	800eb32 <USBD_MSC_Setup+0x11e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800eb22:	f107 030e 	add.w	r3, r7, #14
 800eb26:	2202      	movs	r2, #2
 800eb28:	4619      	mov	r1, r3
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f002 f8ba 	bl	8010ca4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800eb30:	e098      	b.n	800ec64 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800eb32:	6839      	ldr	r1, [r7, #0]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f002 f84b 	bl	8010bd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	75fb      	strb	r3, [r7, #23]
      break;
 800eb3e:	e091      	b.n	800ec64 <USBD_MSC_Setup+0x250>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	d107      	bne.n	800eb5a <USBD_MSC_Setup+0x146>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	2201      	movs	r2, #1
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f002 f8a6 	bl	8010ca4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800eb58:	e084      	b.n	800ec64 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f002 f837 	bl	8010bd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800eb62:	2302      	movs	r3, #2
 800eb64:	75fb      	strb	r3, [r7, #23]
      break;
 800eb66:	e07d      	b.n	800ec64 <USBD_MSC_Setup+0x250>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eb6e:	2b03      	cmp	r3, #3
 800eb70:	d106      	bne.n	800eb80 <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	885b      	ldrh	r3, [r3, #2]
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	461a      	mov	r2, r3
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800eb7e:	e071      	b.n	800ec64 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800eb80:	6839      	ldr	r1, [r7, #0]
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f002 f824 	bl	8010bd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800eb88:	2302      	movs	r3, #2
 800eb8a:	75fb      	strb	r3, [r7, #23]
      break;
 800eb8c:	e06a      	b.n	800ec64 <USBD_MSC_Setup+0x250>

    case USB_REQ_CLEAR_FEATURE:

      /* Flush the FIFO and Clear the stall status */
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	889b      	ldrh	r3, [r3, #4]
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f005 fec0 	bl	801491c <USBD_LL_FlushEP>

      /* Reactivate the EP */
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	889b      	ldrh	r3, [r3, #4]
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f005 fe9a 	bl	80148de <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	889b      	ldrh	r3, [r3, #4]
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	da23      	bge.n	800ebfc <USBD_MSC_Setup+0x1e8>
      {
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	889b      	ldrh	r3, [r3, #4]
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	f003 020f 	and.w	r2, r3, #15
 800ebbe:	6879      	ldr	r1, [r7, #4]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	4413      	add	r3, r2
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	440b      	add	r3, r1
 800ebca:	3318      	adds	r3, #24
 800ebcc:	2200      	movs	r2, #0
 800ebce:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	7c1b      	ldrb	r3, [r3, #16]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d107      	bne.n	800ebe8 <USBD_MSC_Setup+0x1d4>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ebd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebdc:	2202      	movs	r2, #2
 800ebde:	2181      	movs	r1, #129	; 0x81
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f005 fe56 	bl	8014892 <USBD_LL_OpenEP>
 800ebe6:	e005      	b.n	800ebf4 <USBD_MSC_Setup+0x1e0>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ebe8:	2340      	movs	r3, #64	; 0x40
 800ebea:	2202      	movs	r2, #2
 800ebec:	2181      	movs	r1, #129	; 0x81
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f005 fe4f 	bl	8014892 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	62da      	str	r2, [r3, #44]	; 0x2c
 800ebfa:	e024      	b.n	800ec46 <USBD_MSC_Setup+0x232>
      }
      else
      {
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	889b      	ldrh	r3, [r3, #4]
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	f003 020f 	and.w	r2, r3, #15
 800ec06:	6879      	ldr	r1, [r7, #4]
 800ec08:	4613      	mov	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4413      	add	r3, r2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	440b      	add	r3, r1
 800ec12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ec16:	2200      	movs	r2, #0
 800ec18:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	7c1b      	ldrb	r3, [r3, #16]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d107      	bne.n	800ec32 <USBD_MSC_Setup+0x21e>
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800ec22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec26:	2202      	movs	r2, #2
 800ec28:	2101      	movs	r1, #1
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f005 fe31 	bl	8014892 <USBD_LL_OpenEP>
 800ec30:	e005      	b.n	800ec3e <USBD_MSC_Setup+0x22a>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800ec32:	2340      	movs	r3, #64	; 0x40
 800ec34:	2202      	movs	r2, #2
 800ec36:	2101      	movs	r1, #1
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f005 fe2a 	bl	8014892 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      }

      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	889b      	ldrh	r3, [r3, #4]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 fa50 	bl	800f0f4 <MSC_BOT_CplClrFeature>
      break;
 800ec54:	e006      	b.n	800ec64 <USBD_MSC_Setup+0x250>

    default:
      USBD_CtlError (pdev, req);
 800ec56:	6839      	ldr	r1, [r7, #0]
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f001 ffb9 	bl	8010bd0 <USBD_CtlError>
      ret = USBD_FAIL;
 800ec5e:	2302      	movs	r3, #2
 800ec60:	75fb      	strb	r3, [r7, #23]
      break;
 800ec62:	bf00      	nop
    }
    break;
 800ec64:	e006      	b.n	800ec74 <USBD_MSC_Setup+0x260>

  default:
    USBD_CtlError (pdev, req);
 800ec66:	6839      	ldr	r1, [r7, #0]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f001 ffb1 	bl	8010bd0 <USBD_CtlError>
    ret = USBD_FAIL;
 800ec6e:	2302      	movs	r3, #2
 800ec70:	75fb      	strb	r3, [r7, #23]
    break;
 800ec72:	bf00      	nop
  }

  return ret;
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3718      	adds	r7, #24
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop

0800ec80 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800ec8c:	78fb      	ldrb	r3, [r7, #3]
 800ec8e:	4619      	mov	r1, r3
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 f8c1 	bl	800ee18 <MSC_BOT_DataIn>
  return USBD_OK;
 800ec96:	2300      	movs	r3, #0
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3708      	adds	r7, #8
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	460b      	mov	r3, r1
 800ecaa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800ecac:	78fb      	ldrb	r3, [r7, #3]
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f8e2 	bl	800ee7a <MSC_BOT_DataOut>
  return USBD_OK;
 800ecb6:	2300      	movs	r3, #0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2220      	movs	r2, #32
 800eccc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800ecce:	4b03      	ldr	r3, [pc, #12]	; (800ecdc <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bc80      	pop	{r7}
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	20000068 	.word	0x20000068

0800ece0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2220      	movs	r2, #32
 800ecec:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800ecee:	4b03      	ldr	r3, [pc, #12]	; (800ecfc <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bc80      	pop	{r7}
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	20000088 	.word	0x20000088

0800ed00 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2220      	movs	r2, #32
 800ed0c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800ed0e:	4b03      	ldr	r3, [pc, #12]	; (800ed1c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bc80      	pop	{r7}
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	200000a8 	.word	0x200000a8

0800ed20 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	220a      	movs	r2, #10
 800ed2c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800ed2e:	4b03      	ldr	r3, [pc, #12]	; (800ed3c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bc80      	pop	{r7}
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	200000c8 	.word	0x200000c8

0800ed40 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bc80      	pop	{r7}
 800ed62:	4770      	bx	lr

0800ed64 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ed72:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2000      	movs	r0, #0
 800ed9a:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800ed9c:	2101      	movs	r1, #1
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f005 fdbc 	bl	801491c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800eda4:	2181      	movs	r1, #129	; 0x81
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f005 fdb8 	bl	801491c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800edb2:	231f      	movs	r3, #31
 800edb4:	2101      	movs	r1, #1
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f005 fe7b 	bl	8014ab2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800edbc:	bf00      	nop
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800edd2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2200      	movs	r2, #0
 800edd8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2201      	movs	r2, #1
 800edde:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800ede6:	231f      	movs	r3, #31
 800ede8:	2101      	movs	r1, #1
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f005 fe61 	bl	8014ab2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800edf0:	bf00      	nop
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ee06:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	721a      	strb	r2, [r3, #8]
}
 800ee0e:	bf00      	nop
 800ee10:	3714      	adds	r7, #20
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bc80      	pop	{r7}
 800ee16:	4770      	bx	lr

0800ee18 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	460b      	mov	r3, r1
 800ee22:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ee2a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	7a1b      	ldrb	r3, [r3, #8]
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d004      	beq.n	800ee3e <MSC_BOT_DataIn+0x26>
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	db19      	blt.n	800ee6c <MSC_BOT_DataIn+0x54>
 800ee38:	2b04      	cmp	r3, #4
 800ee3a:	dc17      	bgt.n	800ee6c <MSC_BOT_DataIn+0x54>
 800ee3c:	e011      	b.n	800ee62 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f979 	bl	800f144 <SCSI_ProcessCmd>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	da0b      	bge.n	800ee70 <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800ee58:	2101      	movs	r1, #1
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f8f0 	bl	800f040 <MSC_BOT_SendCSW>
    }
    break;
 800ee60:	e006      	b.n	800ee70 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800ee62:	2100      	movs	r1, #0
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f8eb 	bl	800f040 <MSC_BOT_SendCSW>

    break;
 800ee6a:	e002      	b.n	800ee72 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800ee6c:	bf00      	nop
 800ee6e:	e000      	b.n	800ee72 <MSC_BOT_DataIn+0x5a>
    break;
 800ee70:	bf00      	nop
  }
}
 800ee72:	bf00      	nop
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev,
                      uint8_t epnum)
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b084      	sub	sp, #16
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	460b      	mov	r3, r1
 800ee84:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ee8c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	7a1b      	ldrb	r3, [r3, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d002      	beq.n	800ee9c <MSC_BOT_DataOut+0x22>
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d004      	beq.n	800eea4 <MSC_BOT_DataOut+0x2a>
    }

    break;

  default:
    break;
 800ee9a:	e015      	b.n	800eec8 <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f817 	bl	800eed0 <MSC_BOT_CBW_Decode>
    break;
 800eea2:	e011      	b.n	800eec8 <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f946 	bl	800f144 <SCSI_ProcessCmd>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	da03      	bge.n	800eec6 <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800eebe:	2101      	movs	r1, #1
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 f8bd 	bl	800f040 <MSC_BOT_SendCSW>
    break;
 800eec6:	bf00      	nop
  }
}
 800eec8:	bf00      	nop
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eede:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800eef8:	2101      	movs	r1, #1
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f005 fdfc 	bl	8014af8 <USBD_LL_GetRxDataSize>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b1f      	cmp	r3, #31
 800ef04:	d114      	bne.n	800ef30 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ef0c:	4a32      	ldr	r2, [pc, #200]	; (800efd8 <MSC_BOT_CBW_Decode+0x108>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d10e      	bne.n	800ef30 <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1U) ||
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d809      	bhi.n	800ef30 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1U) ||
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d004      	beq.n	800ef30 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800ef2c:	2b10      	cmp	r3, #16
 800ef2e:	d90e      	bls.n	800ef4e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800ef36:	2320      	movs	r3, #32
 800ef38:	2205      	movs	r2, #5
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 fc48 	bl	800f7d0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2202      	movs	r2, #2
 800ef44:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 f8a6 	bl	800f098 <MSC_BOT_Abort>
 800ef4c:	e041      	b.n	800efd2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 f8f1 	bl	800f144 <SCSI_ProcessCmd>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	da0c      	bge.n	800ef82 <MSC_BOT_CBW_Decode+0xb2>
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	7a1b      	ldrb	r3, [r3, #8]
 800ef6c:	2b05      	cmp	r3, #5
 800ef6e:	d104      	bne.n	800ef7a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800ef70:	2101      	movs	r1, #1
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f864 	bl	800f040 <MSC_BOT_SendCSW>
 800ef78:	e02b      	b.n	800efd2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f88c 	bl	800f098 <MSC_BOT_Abort>
 800ef80:	e027      	b.n	800efd2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	7a1b      	ldrb	r3, [r3, #8]
 800ef86:	2b02      	cmp	r3, #2
 800ef88:	d022      	beq.n	800efd0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d01e      	beq.n	800efd0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ef96:	2b03      	cmp	r3, #3
 800ef98:	d01a      	beq.n	800efd0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	895b      	ldrh	r3, [r3, #10]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d009      	beq.n	800efb6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f103 010c 	add.w	r1, r3, #12
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	895b      	ldrh	r3, [r3, #10]
 800efac:	461a      	mov	r2, r3
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 f814 	bl	800efdc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800efb4:	e00d      	b.n	800efd2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	895b      	ldrh	r3, [r3, #10]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d104      	bne.n	800efc8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800efbe:	2100      	movs	r1, #0
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 f83d 	bl	800f040 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800efc6:	e004      	b.n	800efd2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f000 f865 	bl	800f098 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800efce:	e000      	b.n	800efd2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800efd0:	bf00      	nop
    }
  }
}
 800efd2:	3710      	adds	r7, #16
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	43425355 	.word	0x43425355

0800efdc <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t* pbuf,
                              uint16_t len)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	4613      	mov	r3, r2
 800efe8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eff0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800eff8:	88fb      	ldrh	r3, [r7, #6]
 800effa:	429a      	cmp	r2, r3
 800effc:	d204      	bcs.n	800f008 <MSC_BOT_SendData+0x2c>
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f004:	b29b      	uxth	r3, r3
 800f006:	e000      	b.n	800f00a <MSC_BOT_SendData+0x2e>
 800f008:	88fb      	ldrh	r3, [r7, #6]
 800f00a:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800f012:	88fb      	ldrh	r3, [r7, #6]
 800f014:	1ad2      	subs	r2, r2, r3
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	2200      	movs	r2, #0
 800f020:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	2204      	movs	r2, #4
 800f028:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800f02a:	8a7b      	ldrh	r3, [r7, #18]
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	2181      	movs	r1, #129	; 0x81
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f005 fd1b 	bl	8014a6c <USBD_LL_Transmit>
}
 800f036:	bf00      	nop
 800f038:	3718      	adds	r7, #24
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
	...

0800f040 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f052:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	4a0f      	ldr	r2, [pc, #60]	; (800f094 <MSC_BOT_SendCSW+0x54>)
 800f058:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	78fa      	ldrb	r2, [r7, #3]
 800f060:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800f070:	230d      	movs	r3, #13
 800f072:	2181      	movs	r1, #129	; 0x81
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f005 fcf9 	bl	8014a6c <USBD_LL_Transmit>
                    USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f080:	231f      	movs	r3, #31
 800f082:	2101      	movs	r1, #1
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f005 fd14 	bl	8014ab2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800f08a:	bf00      	nop
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	53425355 	.word	0x53425355

0800f098 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f0a6:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10c      	bne.n	800f0cc <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d007      	beq.n	800f0cc <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d103      	bne.n	800f0cc <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800f0c4:	2101      	movs	r1, #1
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f005 fc47 	bl	801495a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f0cc:	2181      	movs	r1, #129	; 0x81
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f005 fc43 	bl	801495a <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	7a5b      	ldrb	r3, [r3, #9]
 800f0d8:	2b02      	cmp	r3, #2
 800f0da:	d107      	bne.n	800f0ec <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f0e2:	231f      	movs	r3, #31
 800f0e4:	2101      	movs	r1, #1
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f005 fce3 	bl	8014ab2 <USBD_LL_PrepareReceive>
                            USBD_BOT_CBW_LENGTH);
  }
}
 800f0ec:	bf00      	nop
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f106:	60fb      	str	r3, [r7, #12]

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	7a5b      	ldrb	r3, [r3, #9]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d107      	bne.n	800f120 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f110:	2181      	movs	r1, #129	; 0x81
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f005 fc21 	bl	801495a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2200      	movs	r2, #0
 800f11c:	725a      	strb	r2, [r3, #9]
 800f11e:	e00d      	b.n	800f13c <MSC_BOT_CplClrFeature+0x48>
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800f120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f124:	2b00      	cmp	r3, #0
 800f126:	da08      	bge.n	800f13a <MSC_BOT_CplClrFeature+0x46>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	7a5b      	ldrb	r3, [r3, #9]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d004      	beq.n	800f13a <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f130:	2101      	movs	r1, #1
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7ff ff84 	bl	800f040 <MSC_BOT_SendCSW>
 800f138:	e000      	b.n	800f13c <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800f13a:	bf00      	nop
  }
}
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
	...

0800f144 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	460b      	mov	r3, r1
 800f14e:	607a      	str	r2, [r7, #4]
 800f150:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	2b5a      	cmp	r3, #90	; 0x5a
 800f158:	f200 810e 	bhi.w	800f378 <SCSI_ProcessCmd+0x234>
 800f15c:	a201      	add	r2, pc, #4	; (adr r2, 800f164 <SCSI_ProcessCmd+0x20>)
 800f15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f162:	bf00      	nop
 800f164:	0800f2d1 	.word	0x0800f2d1
 800f168:	0800f379 	.word	0x0800f379
 800f16c:	0800f379 	.word	0x0800f379
 800f170:	0800f2df 	.word	0x0800f2df
 800f174:	0800f379 	.word	0x0800f379
 800f178:	0800f379 	.word	0x0800f379
 800f17c:	0800f379 	.word	0x0800f379
 800f180:	0800f379 	.word	0x0800f379
 800f184:	0800f379 	.word	0x0800f379
 800f188:	0800f379 	.word	0x0800f379
 800f18c:	0800f379 	.word	0x0800f379
 800f190:	0800f379 	.word	0x0800f379
 800f194:	0800f379 	.word	0x0800f379
 800f198:	0800f379 	.word	0x0800f379
 800f19c:	0800f379 	.word	0x0800f379
 800f1a0:	0800f379 	.word	0x0800f379
 800f1a4:	0800f379 	.word	0x0800f379
 800f1a8:	0800f379 	.word	0x0800f379
 800f1ac:	0800f2ed 	.word	0x0800f2ed
 800f1b0:	0800f379 	.word	0x0800f379
 800f1b4:	0800f379 	.word	0x0800f379
 800f1b8:	0800f379 	.word	0x0800f379
 800f1bc:	0800f379 	.word	0x0800f379
 800f1c0:	0800f379 	.word	0x0800f379
 800f1c4:	0800f379 	.word	0x0800f379
 800f1c8:	0800f379 	.word	0x0800f379
 800f1cc:	0800f317 	.word	0x0800f317
 800f1d0:	0800f2fb 	.word	0x0800f2fb
 800f1d4:	0800f379 	.word	0x0800f379
 800f1d8:	0800f379 	.word	0x0800f379
 800f1dc:	0800f309 	.word	0x0800f309
 800f1e0:	0800f379 	.word	0x0800f379
 800f1e4:	0800f379 	.word	0x0800f379
 800f1e8:	0800f379 	.word	0x0800f379
 800f1ec:	0800f379 	.word	0x0800f379
 800f1f0:	0800f333 	.word	0x0800f333
 800f1f4:	0800f379 	.word	0x0800f379
 800f1f8:	0800f341 	.word	0x0800f341
 800f1fc:	0800f379 	.word	0x0800f379
 800f200:	0800f379 	.word	0x0800f379
 800f204:	0800f34f 	.word	0x0800f34f
 800f208:	0800f379 	.word	0x0800f379
 800f20c:	0800f35d 	.word	0x0800f35d
 800f210:	0800f379 	.word	0x0800f379
 800f214:	0800f379 	.word	0x0800f379
 800f218:	0800f379 	.word	0x0800f379
 800f21c:	0800f379 	.word	0x0800f379
 800f220:	0800f36b 	.word	0x0800f36b
 800f224:	0800f379 	.word	0x0800f379
 800f228:	0800f379 	.word	0x0800f379
 800f22c:	0800f379 	.word	0x0800f379
 800f230:	0800f379 	.word	0x0800f379
 800f234:	0800f379 	.word	0x0800f379
 800f238:	0800f379 	.word	0x0800f379
 800f23c:	0800f379 	.word	0x0800f379
 800f240:	0800f379 	.word	0x0800f379
 800f244:	0800f379 	.word	0x0800f379
 800f248:	0800f379 	.word	0x0800f379
 800f24c:	0800f379 	.word	0x0800f379
 800f250:	0800f379 	.word	0x0800f379
 800f254:	0800f379 	.word	0x0800f379
 800f258:	0800f379 	.word	0x0800f379
 800f25c:	0800f379 	.word	0x0800f379
 800f260:	0800f379 	.word	0x0800f379
 800f264:	0800f379 	.word	0x0800f379
 800f268:	0800f379 	.word	0x0800f379
 800f26c:	0800f379 	.word	0x0800f379
 800f270:	0800f379 	.word	0x0800f379
 800f274:	0800f379 	.word	0x0800f379
 800f278:	0800f379 	.word	0x0800f379
 800f27c:	0800f379 	.word	0x0800f379
 800f280:	0800f379 	.word	0x0800f379
 800f284:	0800f379 	.word	0x0800f379
 800f288:	0800f379 	.word	0x0800f379
 800f28c:	0800f379 	.word	0x0800f379
 800f290:	0800f379 	.word	0x0800f379
 800f294:	0800f379 	.word	0x0800f379
 800f298:	0800f379 	.word	0x0800f379
 800f29c:	0800f379 	.word	0x0800f379
 800f2a0:	0800f379 	.word	0x0800f379
 800f2a4:	0800f379 	.word	0x0800f379
 800f2a8:	0800f379 	.word	0x0800f379
 800f2ac:	0800f379 	.word	0x0800f379
 800f2b0:	0800f379 	.word	0x0800f379
 800f2b4:	0800f379 	.word	0x0800f379
 800f2b8:	0800f379 	.word	0x0800f379
 800f2bc:	0800f379 	.word	0x0800f379
 800f2c0:	0800f379 	.word	0x0800f379
 800f2c4:	0800f379 	.word	0x0800f379
 800f2c8:	0800f379 	.word	0x0800f379
 800f2cc:	0800f325 	.word	0x0800f325
  {
  case SCSI_TEST_UNIT_READY:
    SCSI_TestUnitReady(pdev, lun, cmd);
 800f2d0:	7afb      	ldrb	r3, [r7, #11]
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f000 f85c 	bl	800f394 <SCSI_TestUnitReady>
    break;
 800f2dc:	e055      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_REQUEST_SENSE:
    SCSI_RequestSense (pdev, lun, cmd);
 800f2de:	7afb      	ldrb	r3, [r7, #11]
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f000 fa09 	bl	800f6fc <SCSI_RequestSense>
    break;
 800f2ea:	e04e      	b.n	800f38a <SCSI_ProcessCmd+0x246>
  case SCSI_INQUIRY:
    SCSI_Inquiry(pdev, lun, cmd);
 800f2ec:	7afb      	ldrb	r3, [r7, #11]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f000 f888 	bl	800f408 <SCSI_Inquiry>
    break;
 800f2f8:	e047      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_START_STOP_UNIT:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800f2fa:	7afb      	ldrb	r3, [r7, #11]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	4619      	mov	r1, r3
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f000 fa9e 	bl	800f842 <SCSI_StartStopUnit>
    break;
 800f306:	e040      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800f308:	7afb      	ldrb	r3, [r7, #11]
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	4619      	mov	r1, r3
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 fa97 	bl	800f842 <SCSI_StartStopUnit>
    break;
 800f314:	e039      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE6:
    SCSI_ModeSense6 (pdev, lun, cmd);
 800f316:	7afb      	ldrb	r3, [r7, #11]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	4619      	mov	r1, r3
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f000 f99d 	bl	800f65c <SCSI_ModeSense6>
    break;
 800f322:	e032      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE10:
    SCSI_ModeSense10 (pdev, lun, cmd);
 800f324:	7afb      	ldrb	r3, [r7, #11]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	4619      	mov	r1, r3
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f000 f9be 	bl	800f6ac <SCSI_ModeSense10>
    break;
 800f330:	e02b      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_READ_FORMAT_CAPACITIES:
    SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800f332:	7afb      	ldrb	r3, [r7, #11]
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	4619      	mov	r1, r3
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 f92a 	bl	800f592 <SCSI_ReadFormatCapacity>
    break;
 800f33e:	e024      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_READ_CAPACITY10:
    SCSI_ReadCapacity10(pdev, lun, cmd);
 800f340:	7afb      	ldrb	r3, [r7, #11]
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	4619      	mov	r1, r3
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f000 f8bc 	bl	800f4c4 <SCSI_ReadCapacity10>
    break;
 800f34c:	e01d      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_READ10:
    SCSI_Read10(pdev, lun, cmd);
 800f34e:	7afb      	ldrb	r3, [r7, #11]
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	4619      	mov	r1, r3
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f000 fa88 	bl	800f86a <SCSI_Read10>
    break;
 800f35a:	e016      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_WRITE10:
    SCSI_Write10(pdev, lun, cmd);
 800f35c:	7afb      	ldrb	r3, [r7, #11]
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	4619      	mov	r1, r3
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f000 fb0d 	bl	800f982 <SCSI_Write10>
    break;
 800f368:	e00f      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  case SCSI_VERIFY10:
    SCSI_Verify10(pdev, lun, cmd);
 800f36a:	7afb      	ldrb	r3, [r7, #11]
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	4619      	mov	r1, r3
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f000 fbb6 	bl	800fae2 <SCSI_Verify10>
    break;
 800f376:	e008      	b.n	800f38a <SCSI_ProcessCmd+0x246>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800f378:	7af9      	ldrb	r1, [r7, #11]
 800f37a:	2320      	movs	r3, #32
 800f37c:	2205      	movs	r2, #5
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f000 fa26 	bl	800f7d0 <SCSI_SenseCode>
    return -1;
 800f384:	f04f 33ff 	mov.w	r3, #4294967295
 800f388:	e000      	b.n	800f38c <SCSI_ProcessCmd+0x248>
  }
  return 0;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b086      	sub	sp, #24
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	460b      	mov	r3, r1
 800f39e:	607a      	str	r2, [r7, #4]
 800f3a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f3a8:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00a      	beq.n	800f3ca <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f3ba:	2320      	movs	r3, #32
 800f3bc:	2205      	movs	r2, #5
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f000 fa06 	bl	800f7d0 <SCSI_SenseCode>

    return -1;
 800f3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c8:	e019      	b.n	800f3fe <SCSI_TestUnitReady+0x6a>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	7afa      	ldrb	r2, [r7, #11]
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	4798      	blx	r3
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00b      	beq.n	800f3f6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f3de:	7af9      	ldrb	r1, [r7, #11]
 800f3e0:	233a      	movs	r3, #58	; 0x3a
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 f9f3 	bl	800f7d0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	2205      	movs	r2, #5
 800f3ee:	721a      	strb	r2, [r3, #8]

    return -1;
 800f3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f4:	e003      	b.n	800f3fe <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	815a      	strh	r2, [r3, #10]

  return 0;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3718      	adds	r7, #24
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f408:	b480      	push	{r7}
 800f40a:	b089      	sub	sp, #36	; 0x24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	460b      	mov	r3, r1
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f41c:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3301      	adds	r3, #1
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	f003 0301 	and.w	r3, r3, #1
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d014      	beq.n	800f456 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800f42c:	2307      	movs	r3, #7
 800f42e:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	8bfa      	ldrh	r2, [r7, #30]
 800f434:	815a      	strh	r2, [r3, #10]

    while (len)
 800f436:	e00a      	b.n	800f44e <SCSI_Inquiry+0x46>
    {
      len--;
 800f438:	8bfb      	ldrh	r3, [r7, #30]
 800f43a:	3b01      	subs	r3, #1
 800f43c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800f43e:	8bfa      	ldrh	r2, [r7, #30]
 800f440:	8bfb      	ldrh	r3, [r7, #30]
 800f442:	491f      	ldr	r1, [pc, #124]	; (800f4c0 <SCSI_Inquiry+0xb8>)
 800f444:	5c89      	ldrb	r1, [r1, r2]
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	4413      	add	r3, r2
 800f44a:	460a      	mov	r2, r1
 800f44c:	731a      	strb	r2, [r3, #12]
    while (len)
 800f44e:	8bfb      	ldrh	r3, [r7, #30]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1f1      	bne.n	800f438 <SCSI_Inquiry+0x30>
 800f454:	e02e      	b.n	800f4b4 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f45c:	69d9      	ldr	r1, [r3, #28]
 800f45e:	7afa      	ldrb	r2, [r7, #11]
 800f460:	4613      	mov	r3, r2
 800f462:	00db      	lsls	r3, r3, #3
 800f464:	4413      	add	r3, r2
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	440b      	add	r3, r1
 800f46a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	3304      	adds	r3, #4
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	b29b      	uxth	r3, r3
 800f474:	3305      	adds	r3, #5
 800f476:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	3304      	adds	r3, #4
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	b29b      	uxth	r3, r3
 800f480:	8bfa      	ldrh	r2, [r7, #30]
 800f482:	429a      	cmp	r2, r3
 800f484:	d303      	bcc.n	800f48e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	3304      	adds	r3, #4
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	8bfa      	ldrh	r2, [r7, #30]
 800f492:	815a      	strh	r2, [r3, #10]

    while (len)
 800f494:	e00b      	b.n	800f4ae <SCSI_Inquiry+0xa6>
    {
      len--;
 800f496:	8bfb      	ldrh	r3, [r7, #30]
 800f498:	3b01      	subs	r3, #1
 800f49a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800f49c:	8bfb      	ldrh	r3, [r7, #30]
 800f49e:	697a      	ldr	r2, [r7, #20]
 800f4a0:	441a      	add	r2, r3
 800f4a2:	8bfb      	ldrh	r3, [r7, #30]
 800f4a4:	7811      	ldrb	r1, [r2, #0]
 800f4a6:	69ba      	ldr	r2, [r7, #24]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	460a      	mov	r2, r1
 800f4ac:	731a      	strb	r2, [r3, #12]
    while (len)
 800f4ae:	8bfb      	ldrh	r3, [r7, #30]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1f0      	bne.n	800f496 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800f4b4:	2300      	movs	r3, #0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3724      	adds	r7, #36	; 0x24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bc80      	pop	{r7}
 800f4be:	4770      	bx	lr
 800f4c0:	0801e2e8 	.word	0x0801e2e8

0800f4c4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	607a      	str	r2, [r7, #4]
 800f4d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f4d8:	617b      	str	r3, [r7, #20]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800f4e8:	697a      	ldr	r2, [r7, #20]
 800f4ea:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800f4ee:	7af8      	ldrb	r0, [r7, #11]
 800f4f0:	4798      	blx	r3
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d008      	beq.n	800f50a <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f4f8:	7af9      	ldrb	r1, [r7, #11]
 800f4fa:	233a      	movs	r3, #58	; 0x3a
 800f4fc:	2202      	movs	r2, #2
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	f000 f966 	bl	800f7d0 <SCSI_SenseCode>
    return -1;
 800f504:	f04f 33ff 	mov.w	r3, #4294967295
 800f508:	e03f      	b.n	800f58a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f510:	3b01      	subs	r3, #1
 800f512:	0e1b      	lsrs	r3, r3, #24
 800f514:	b2da      	uxtb	r2, r3
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f520:	3b01      	subs	r3, #1
 800f522:	0c1b      	lsrs	r3, r3, #16
 800f524:	b2da      	uxtb	r2, r3
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f530:	3b01      	subs	r3, #1
 800f532:	0a1b      	lsrs	r3, r3, #8
 800f534:	b2da      	uxtb	r2, r3
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f540:	b2db      	uxtb	r3, r3
 800f542:	3b01      	subs	r3, #1
 800f544:	b2da      	uxtb	r2, r3
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f550:	161b      	asrs	r3, r3, #24
 800f552:	b2da      	uxtb	r2, r3
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f55e:	141b      	asrs	r3, r3, #16
 800f560:	b2da      	uxtb	r2, r3
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f56c:	0a1b      	lsrs	r3, r3, #8
 800f56e:	b29b      	uxth	r3, r3
 800f570:	b2da      	uxtb	r2, r3
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	2208      	movs	r2, #8
 800f586:	815a      	strh	r2, [r3, #10]
    return 0;
 800f588:	2300      	movs	r3, #0
  }
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3718      	adds	r7, #24
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b088      	sub	sp, #32
 800f596:	af00      	add	r7, sp, #0
 800f598:	60f8      	str	r0, [r7, #12]
 800f59a:	460b      	mov	r3, r1
 800f59c:	607a      	str	r2, [r7, #4]
 800f59e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f5a6:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for(i = 0U; i < 12U ; i++)
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	83fb      	strh	r3, [r7, #30]
 800f5ac:	e007      	b.n	800f5be <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f5ae:	8bfb      	ldrh	r3, [r7, #30]
 800f5b0:	69ba      	ldr	r2, [r7, #24]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	731a      	strb	r2, [r3, #12]
  for(i = 0U; i < 12U ; i++)
 800f5b8:	8bfb      	ldrh	r3, [r7, #30]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	83fb      	strh	r3, [r7, #30]
 800f5be:	8bfb      	ldrh	r3, [r7, #30]
 800f5c0:	2b0b      	cmp	r3, #11
 800f5c2:	d9f4      	bls.n	800f5ae <SCSI_ReadFormatCapacity+0x1c>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	f107 0216 	add.w	r2, r7, #22
 800f5d0:	f107 0110 	add.w	r1, r7, #16
 800f5d4:	7af8      	ldrb	r0, [r7, #11]
 800f5d6:	4798      	blx	r3
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d008      	beq.n	800f5f0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f5de:	7af9      	ldrb	r1, [r7, #11]
 800f5e0:	233a      	movs	r3, #58	; 0x3a
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 f8f3 	bl	800f7d0 <SCSI_SenseCode>
    return -1;
 800f5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ee:	e030      	b.n	800f652 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	2208      	movs	r2, #8
 800f5f4:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	0e1b      	lsrs	r3, r3, #24
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	3b01      	subs	r3, #1
 800f606:	0c1b      	lsrs	r3, r3, #16
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	3b01      	subs	r3, #1
 800f612:	0a1b      	lsrs	r3, r3, #8
 800f614:	b2da      	uxtb	r2, r3
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	3b01      	subs	r3, #1
 800f620:	b2da      	uxtb	r2, r3
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	2202      	movs	r2, #2
 800f62a:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800f62c:	8afb      	ldrh	r3, [r7, #22]
 800f62e:	141b      	asrs	r3, r3, #16
 800f630:	b2da      	uxtb	r2, r3
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800f636:	8afb      	ldrh	r3, [r7, #22]
 800f638:	0a1b      	lsrs	r3, r3, #8
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800f642:	8afb      	ldrh	r3, [r7, #22]
 800f644:	b2da      	uxtb	r2, r3
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	220c      	movs	r2, #12
 800f64e:	815a      	strh	r2, [r3, #10]
    return 0;
 800f650:	2300      	movs	r3, #0
  }
}
 800f652:	4618      	mov	r0, r3
 800f654:	3720      	adds	r7, #32
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
	...

0800f65c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b087      	sub	sp, #28
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	460b      	mov	r3, r1
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f670:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800f672:	2308      	movs	r3, #8
 800f674:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	8afa      	ldrh	r2, [r7, #22]
 800f67a:	815a      	strh	r2, [r3, #10]

  while (len)
 800f67c:	e00a      	b.n	800f694 <SCSI_ModeSense6+0x38>
  {
    len--;
 800f67e:	8afb      	ldrh	r3, [r7, #22]
 800f680:	3b01      	subs	r3, #1
 800f682:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800f684:	8afa      	ldrh	r2, [r7, #22]
 800f686:	8afb      	ldrh	r3, [r7, #22]
 800f688:	4907      	ldr	r1, [pc, #28]	; (800f6a8 <SCSI_ModeSense6+0x4c>)
 800f68a:	5c89      	ldrb	r1, [r1, r2]
 800f68c:	693a      	ldr	r2, [r7, #16]
 800f68e:	4413      	add	r3, r2
 800f690:	460a      	mov	r2, r1
 800f692:	731a      	strb	r2, [r3, #12]
  while (len)
 800f694:	8afb      	ldrh	r3, [r7, #22]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1f1      	bne.n	800f67e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	371c      	adds	r7, #28
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bc80      	pop	{r7}
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	0801e2f0 	.word	0x0801e2f0

0800f6ac <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b087      	sub	sp, #28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	607a      	str	r2, [r7, #4]
 800f6b8:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800f6ba:	2308      	movs	r3, #8
 800f6bc:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f6c4:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	8afa      	ldrh	r2, [r7, #22]
 800f6ca:	815a      	strh	r2, [r3, #10]

  while (len)
 800f6cc:	e00a      	b.n	800f6e4 <SCSI_ModeSense10+0x38>
  {
    len--;
 800f6ce:	8afb      	ldrh	r3, [r7, #22]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800f6d4:	8afa      	ldrh	r2, [r7, #22]
 800f6d6:	8afb      	ldrh	r3, [r7, #22]
 800f6d8:	4907      	ldr	r1, [pc, #28]	; (800f6f8 <SCSI_ModeSense10+0x4c>)
 800f6da:	5c89      	ldrb	r1, [r1, r2]
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	4413      	add	r3, r2
 800f6e0:	460a      	mov	r2, r1
 800f6e2:	731a      	strb	r2, [r3, #12]
  while (len)
 800f6e4:	8afb      	ldrh	r3, [r7, #22]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1f1      	bne.n	800f6ce <SCSI_ModeSense10+0x22>
  }

  return 0;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	371c      	adds	r7, #28
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bc80      	pop	{r7}
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	0801e2f8 	.word	0x0801e2f8

0800f6fc <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	460b      	mov	r3, r1
 800f706:	607a      	str	r2, [r7, #4]
 800f708:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f710:	613b      	str	r3, [r7, #16]

  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800f712:	2300      	movs	r3, #0
 800f714:	75fb      	strb	r3, [r7, #23]
 800f716:	e007      	b.n	800f728 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f718:	7dfb      	ldrb	r3, [r7, #23]
 800f71a:	693a      	ldr	r2, [r7, #16]
 800f71c:	4413      	add	r3, r2
 800f71e:	2200      	movs	r2, #0
 800f720:	731a      	strb	r2, [r3, #12]
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800f722:	7dfb      	ldrb	r3, [r7, #23]
 800f724:	3301      	adds	r3, #1
 800f726:	75fb      	strb	r3, [r7, #23]
 800f728:	7dfb      	ldrb	r3, [r7, #23]
 800f72a:	2b11      	cmp	r3, #17
 800f72c:	d9f4      	bls.n	800f718 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0]	= 0x70U;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	2270      	movs	r2, #112	; 0x70
 800f732:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	220c      	movs	r2, #12
 800f738:	74da      	strb	r2, [r3, #19]

  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f746:	429a      	cmp	r2, r3
 800f748:	d02e      	beq.n	800f7a8 <SCSI_RequestSense+0xac>

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	3347      	adds	r3, #71	; 0x47
 800f754:	00db      	lsls	r3, r3, #3
 800f756:	4413      	add	r3, r2
 800f758:	791a      	ldrb	r2, [r3, #4]
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f764:	693a      	ldr	r2, [r7, #16]
 800f766:	3347      	adds	r3, #71	; 0x47
 800f768:	00db      	lsls	r3, r3, #3
 800f76a:	4413      	add	r3, r2
 800f76c:	7a5a      	ldrb	r2, [r3, #9]
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	3347      	adds	r3, #71	; 0x47
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	4413      	add	r3, r2
 800f780:	7a1a      	ldrb	r2, [r3, #8]
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f78c:	3301      	adds	r3, #1
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f79c:	2b04      	cmp	r3, #4
 800f79e:	d103      	bne.n	800f7a8 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	2212      	movs	r2, #18
 800f7ac:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	2b12      	cmp	r3, #18
 800f7b6:	d805      	bhi.n	800f7c4 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	3304      	adds	r3, #4
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	371c      	adds	r7, #28
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bc80      	pop	{r7}
 800f7ce:	4770      	bx	lr

0800f7d0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	4608      	mov	r0, r1
 800f7da:	4611      	mov	r1, r2
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4603      	mov	r3, r0
 800f7e0:	70fb      	strb	r3, [r7, #3]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	70bb      	strb	r3, [r7, #2]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f7f0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	3347      	adds	r3, #71	; 0x47
 800f7fc:	00db      	lsls	r3, r3, #3
 800f7fe:	4413      	add	r3, r2
 800f800:	78ba      	ldrb	r2, [r7, #2]
 800f802:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	3347      	adds	r3, #71	; 0x47
 800f80e:	00db      	lsls	r3, r3, #3
 800f810:	4413      	add	r3, r2
 800f812:	2200      	movs	r2, #0
 800f814:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f81c:	3301      	adds	r3, #1
 800f81e:	b2da      	uxtb	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f82c:	2b04      	cmp	r3, #4
 800f82e:	d103      	bne.n	800f838 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800f838:	bf00      	nop
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bc80      	pop	{r7}
 800f840:	4770      	bx	lr

0800f842 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f842:	b480      	push	{r7}
 800f844:	b087      	sub	sp, #28
 800f846:	af00      	add	r7, sp, #0
 800f848:	60f8      	str	r0, [r7, #12]
 800f84a:	460b      	mov	r3, r1
 800f84c:	607a      	str	r2, [r7, #4]
 800f84e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f856:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	2200      	movs	r2, #0
 800f85c:	815a      	strh	r2, [r3, #10]
  return 0;
 800f85e:	2300      	movs	r3, #0
}
 800f860:	4618      	mov	r0, r3
 800f862:	371c      	adds	r7, #28
 800f864:	46bd      	mov	sp, r7
 800f866:	bc80      	pop	{r7}
 800f868:	4770      	bx	lr

0800f86a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b086      	sub	sp, #24
 800f86e:	af00      	add	r7, sp, #0
 800f870:	60f8      	str	r0, [r7, #12]
 800f872:	460b      	mov	r3, r1
 800f874:	607a      	str	r2, [r7, #4]
 800f876:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f87e:	617b      	str	r3, [r7, #20]

  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	7a1b      	ldrb	r3, [r3, #8]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d16e      	bne.n	800f966 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f88e:	b25b      	sxtb	r3, r3
 800f890:	2b00      	cmp	r3, #0
 800f892:	db0a      	blt.n	800f8aa <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f89a:	2320      	movs	r3, #32
 800f89c:	2205      	movs	r2, #5
 800f89e:	68f8      	ldr	r0, [r7, #12]
 800f8a0:	f7ff ff96 	bl	800f7d0 <SCSI_SenseCode>
      return -1;
 800f8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a8:	e067      	b.n	800f97a <SCSI_Read10+0x110>
    }

    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	7afa      	ldrb	r2, [r7, #11]
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	4798      	blx	r3
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d008      	beq.n	800f8d0 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f8be:	7af9      	ldrb	r1, [r7, #11]
 800f8c0:	233a      	movs	r3, #58	; 0x3a
 800f8c2:	2202      	movs	r2, #2
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7ff ff83 	bl	800f7d0 <SCSI_SenseCode>
      return -1;
 800f8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ce:	e054      	b.n	800f97a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3302      	adds	r3, #2
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	3303      	adds	r3, #3
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f8e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f8ea:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	3205      	adds	r2, #5
 800f8f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800f8f2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	3307      	adds	r3, #7
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	021b      	lsls	r3, r3, #8
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	3208      	adds	r2, #8
 800f906:	7812      	ldrb	r2, [r2, #0]
 800f908:	431a      	orrs	r2, r3
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f91c:	7af9      	ldrb	r1, [r7, #11]
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f000 f912 	bl	800fb48 <SCSI_CheckAddressRange>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	da02      	bge.n	800f930 <SCSI_Read10+0xc6>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f92a:	f04f 33ff 	mov.w	r3, #4294967295
 800f92e:	e024      	b.n	800f97a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	2202      	movs	r2, #2
 800f934:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f942:	6979      	ldr	r1, [r7, #20]
 800f944:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800f948:	fb01 f303 	mul.w	r3, r1, r3
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d00a      	beq.n	800f966 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f956:	2320      	movs	r3, #32
 800f958:	2205      	movs	r2, #5
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7ff ff38 	bl	800f7d0 <SCSI_SenseCode>
      return -1;
 800f960:	f04f 33ff 	mov.w	r3, #4294967295
 800f964:	e009      	b.n	800f97a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f96c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800f96e:	7afb      	ldrb	r3, [r7, #11]
 800f970:	4619      	mov	r1, r3
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f000 f90a 	bl	800fb8c <SCSI_ProcessRead>
 800f978:	4603      	mov	r3, r0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3718      	adds	r7, #24
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b086      	sub	sp, #24
 800f986:	af00      	add	r7, sp, #0
 800f988:	60f8      	str	r0, [r7, #12]
 800f98a:	460b      	mov	r3, r1
 800f98c:	607a      	str	r2, [r7, #4]
 800f98e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f996:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	7a1b      	ldrb	r3, [r3, #8]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f040 8096 	bne.w	800face <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f9a8:	b25b      	sxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	da0a      	bge.n	800f9c4 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f9b4:	2320      	movs	r3, #32
 800f9b6:	2205      	movs	r2, #5
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f7ff ff09 	bl	800f7d0 <SCSI_SenseCode>
      return -1;
 800f9be:	f04f 33ff 	mov.w	r3, #4294967295
 800f9c2:	e08a      	b.n	800fada <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	7afa      	ldrb	r2, [r7, #11]
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	4798      	blx	r3
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d008      	beq.n	800f9ea <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f9d8:	7af9      	ldrb	r1, [r7, #11]
 800f9da:	233a      	movs	r3, #58	; 0x3a
 800f9dc:	2202      	movs	r2, #2
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f7ff fef6 	bl	800f7d0 <SCSI_SenseCode>
      return -1;
 800f9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e8:	e077      	b.n	800fada <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	7afa      	ldrb	r2, [r7, #11]
 800f9f4:	4610      	mov	r0, r2
 800f9f6:	4798      	blx	r3
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d008      	beq.n	800fa10 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f9fe:	7af9      	ldrb	r1, [r7, #11]
 800fa00:	2327      	movs	r3, #39	; 0x27
 800fa02:	2202      	movs	r2, #2
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f7ff fee3 	bl	800f7d0 <SCSI_SenseCode>
      return -1;
 800fa0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa0e:	e064      	b.n	800fada <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	3302      	adds	r3, #2
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	3303      	adds	r3, #3
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa20:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3304      	adds	r3, #4
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fa2a:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	3205      	adds	r2, #5
 800fa30:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800fa32:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3307      	adds	r3, #7
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	021b      	lsls	r3, r3, #8
                          (uint32_t)params[8];
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	3208      	adds	r2, #8
 800fa46:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fa48:	431a      	orrs	r2, r3
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fa5c:	7af9      	ldrb	r1, [r7, #11]
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f000 f872 	bl	800fb48 <SCSI_CheckAddressRange>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	da02      	bge.n	800fa70 <SCSI_Write10+0xee>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fa6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa6e:	e034      	b.n	800fada <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fa76:	697a      	ldr	r2, [r7, #20]
 800fa78:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fa7c:	fb02 f303 	mul.w	r3, r2, r3
 800fa80:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d00a      	beq.n	800faa4 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fa94:	2320      	movs	r3, #32
 800fa96:	2205      	movs	r2, #5
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f7ff fe99 	bl	800f7d0 <SCSI_SenseCode>
      return -1;
 800fa9e:	f04f 33ff 	mov.w	r3, #4294967295
 800faa2:	e01a      	b.n	800fada <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faaa:	bf28      	it	cs
 800faac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fab0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2201      	movs	r2, #1
 800fab6:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	f103 020c 	add.w	r2, r3, #12
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	2101      	movs	r1, #1
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f004 fff4 	bl	8014ab2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800faca:	2300      	movs	r3, #0
 800facc:	e005      	b.n	800fada <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800face:	7afb      	ldrb	r3, [r7, #11]
 800fad0:	4619      	mov	r1, r3
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f000 f8ce 	bl	800fc74 <SCSI_ProcessWrite>
 800fad8:	4603      	mov	r3, r0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b086      	sub	sp, #24
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	460b      	mov	r3, r1
 800faec:	607a      	str	r2, [r7, #4]
 800faee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800faf6:	617b      	str	r3, [r7, #20]

  if ((params[1]& 0x02U) == 0x02U)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	3301      	adds	r3, #1
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	f003 0302 	and.w	r3, r3, #2
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d008      	beq.n	800fb18 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800fb06:	7af9      	ldrb	r1, [r7, #11]
 800fb08:	2324      	movs	r3, #36	; 0x24
 800fb0a:	2205      	movs	r2, #5
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7ff fe5f 	bl	800f7d0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800fb12:	f04f 33ff 	mov.w	r3, #4294967295
 800fb16:	e013      	b.n	800fb40 <SCSI_Verify10+0x5e>
  }

  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fb24:	7af9      	ldrb	r1, [r7, #11]
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f000 f80e 	bl	800fb48 <SCSI_CheckAddressRange>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	da02      	bge.n	800fb38 <SCSI_Verify10+0x56>
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800fb32:	f04f 33ff 	mov.w	r3, #4294967295
 800fb36:	e003      	b.n	800fb40 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	815a      	strh	r2, [r3, #10]
  return 0;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3718      	adds	r7, #24
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	607a      	str	r2, [r7, #4]
 800fb52:	603b      	str	r3, [r7, #0]
 800fb54:	460b      	mov	r3, r1
 800fb56:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fb5e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	441a      	add	r2, r3
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d908      	bls.n	800fb82 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800fb70:	7af9      	ldrb	r1, [r7, #11]
 800fb72:	2321      	movs	r3, #33	; 0x21
 800fb74:	2205      	movs	r2, #5
 800fb76:	68f8      	ldr	r0, [r7, #12]
 800fb78:	f7ff fe2a 	bl	800f7d0 <SCSI_SenseCode>
    return -1;
 800fb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb80:	e000      	b.n	800fb84 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3718      	adds	r7, #24
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800fb8c:	b590      	push	{r4, r7, lr}
 800fb8e:	b085      	sub	sp, #20
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	460b      	mov	r3, r1
 800fb96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fb9e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fbac:	fb02 f303 	mul.w	r3, r2, r3
 800fbb0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbb8:	bf28      	it	cs
 800fbba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fbbe:	60bb      	str	r3, [r7, #8]

  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fbc6:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data,
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f103 010c 	add.w	r1, r3, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fbda:	4618      	mov	r0, r3
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	78f8      	ldrb	r0, [r7, #3]
 800fbe6:	47a0      	blx	r4
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	da08      	bge.n	800fc00 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800fbee:	78f9      	ldrb	r1, [r7, #3]
 800fbf0:	2311      	movs	r3, #17
 800fbf2:	2204      	movs	r2, #4
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7ff fdeb 	bl	800f7d0 <SCSI_SenseCode>
    return -1;
 800fbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800fbfe:	e035      	b.n	800fc6c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f103 020c 	add.w	r2, r3, #12
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	2181      	movs	r1, #129	; 0x81
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f004 ff2d 	bl	8014a6c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fc1e:	4619      	mov	r1, r3
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc26:	441a      	add	r2, r3
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc42:	1ad2      	subs	r2, r2, r3
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	1ad2      	subs	r2, r2, r3
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2203      	movs	r2, #3
 800fc68:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3714      	adds	r7, #20
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd90      	pop	{r4, r7, pc}

0800fc74 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800fc74:	b590      	push	{r4, r7, lr}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fc86:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fc94:	fb02 f303 	mul.w	r3, r2, r3
 800fc98:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fca0:	bf28      	it	cs
 800fca2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fca6:	60bb      	str	r3, [r7, #8]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcae:	695c      	ldr	r4, [r3, #20]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f103 010c 	add.w	r1, r3, #12
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	78f8      	ldrb	r0, [r7, #3]
 800fcce:	47a0      	blx	r4
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	da08      	bge.n	800fce8 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800fcd6:	78f9      	ldrb	r1, [r7, #3]
 800fcd8:	2303      	movs	r3, #3
 800fcda:	2204      	movs	r2, #4
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7ff fd77 	bl	800f7d0 <SCSI_SenseCode>

    return -1;
 800fce2:	f04f 33ff 	mov.w	r3, #4294967295
 800fce6:	e045      	b.n	800fd74 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcfc:	441a      	add	r2, r3
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fd10:	4619      	mov	r1, r3
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd18:	1ad2      	subs	r2, r2, r3
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	1ad2      	subs	r2, r2, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d104      	bne.n	800fd44 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff f97f 	bl	800f040 <MSC_BOT_SendCSW>
 800fd42:	e016      	b.n	800fd72 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fd50:	fb02 f303 	mul.w	r3, r2, r3
 800fd54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd58:	bf28      	it	cs
 800fd5a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fd5e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f103 020c 	add.w	r2, r3, #12
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f004 fea0 	bl	8014ab2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd90      	pop	{r4, r7, pc}

0800fd7c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	4613      	mov	r3, r2
 800fd88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fd90:	2302      	movs	r3, #2
 800fd92:	e01a      	b.n	800fdca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2200      	movs	r2, #0
 800fda2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d003      	beq.n	800fdb4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	68ba      	ldr	r2, [r7, #8]
 800fdb0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	79fa      	ldrb	r2, [r7, #7]
 800fdc0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f004 fcfa 	bl	80147bc <USBD_LL_Init>

  return USBD_OK;
 800fdc8:	2300      	movs	r3, #0
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fdd2:	b480      	push	{r7}
 800fdd4:	b085      	sub	sp, #20
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800fddc:	2300      	movs	r3, #0
 800fdde:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d006      	beq.n	800fdf4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	683a      	ldr	r2, [r7, #0]
 800fdea:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73fb      	strb	r3, [r7, #15]
 800fdf2:	e001      	b.n	800fdf8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800fdf4:	2302      	movs	r3, #2
 800fdf6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3714      	adds	r7, #20
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bc80      	pop	{r7}
 800fe02:	4770      	bx	lr

0800fe04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f004 fd25 	bl	801485c <USBD_LL_Start>

  return USBD_OK;
 800fe12:	2300      	movs	r3, #0
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bc80      	pop	{r7}
 800fe2e:	4770      	bx	lr

0800fe30 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800fe3c:	2302      	movs	r3, #2
 800fe3e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00c      	beq.n	800fe64 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	78fa      	ldrb	r2, [r7, #3]
 800fe54:	4611      	mov	r1, r2
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	4798      	blx	r3
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d101      	bne.n	800fe64 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3710      	adds	r7, #16
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b082      	sub	sp, #8
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	460b      	mov	r3, r1
 800fe78:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	78fa      	ldrb	r2, [r7, #3]
 800fe84:	4611      	mov	r1, r2
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	4798      	blx	r3
  return USBD_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fea4:	6839      	ldr	r1, [r7, #0]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f000 fe56 	bl	8010b58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800feba:	461a      	mov	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800fec8:	f003 031f 	and.w	r3, r3, #31
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d00c      	beq.n	800feea <USBD_LL_SetupStage+0x56>
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d302      	bcc.n	800feda <USBD_LL_SetupStage+0x46>
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	d010      	beq.n	800fefa <USBD_LL_SetupStage+0x66>
 800fed8:	e017      	b.n	800ff0a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f9c6 	bl	8010274 <USBD_StdDevReq>
    break;
 800fee8:	e01a      	b.n	800ff20 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fef0:	4619      	mov	r1, r3
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 fa28 	bl	8010348 <USBD_StdItfReq>
    break;
 800fef8:	e012      	b.n	800ff20 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ff00:	4619      	mov	r1, r3
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fa66 	bl	80103d4 <USBD_StdEPReq>
    break;
 800ff08:	e00a      	b.n	800ff20 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ff10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	4619      	mov	r1, r3
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f004 fd1e 	bl	801495a <USBD_LL_StallEP>
    break;
 800ff1e:	bf00      	nop
  }

  return USBD_OK;
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b086      	sub	sp, #24
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	60f8      	str	r0, [r7, #12]
 800ff32:	460b      	mov	r3, r1
 800ff34:	607a      	str	r2, [r7, #4]
 800ff36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800ff38:	7afb      	ldrb	r3, [r7, #11]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d14b      	bne.n	800ffd6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ff44:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ff4c:	2b03      	cmp	r3, #3
 800ff4e:	d134      	bne.n	800ffba <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	68da      	ldr	r2, [r3, #12]
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	691b      	ldr	r3, [r3, #16]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d919      	bls.n	800ff90 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	68da      	ldr	r2, [r3, #12]
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	691b      	ldr	r3, [r3, #16]
 800ff64:	1ad2      	subs	r2, r2, r3
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	68da      	ldr	r2, [r3, #12]
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d203      	bcs.n	800ff7e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	e002      	b.n	800ff84 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	461a      	mov	r2, r3
 800ff86:	6879      	ldr	r1, [r7, #4]
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 feb9 	bl	8010d00 <USBD_CtlContinueRx>
 800ff8e:	e038      	b.n	8010002 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ff96:	691b      	ldr	r3, [r3, #16]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00a      	beq.n	800ffb2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ffa2:	2b03      	cmp	r3, #3
 800ffa4:	d105      	bne.n	800ffb2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f000 feb6 	bl	8010d24 <USBD_CtlSendStatus>
 800ffb8:	e023      	b.n	8010002 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ffc0:	2b05      	cmp	r3, #5
 800ffc2:	d11e      	bne.n	8010002 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800ffcc:	2100      	movs	r1, #0
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f004 fcc3 	bl	801495a <USBD_LL_StallEP>
 800ffd4:	e015      	b.n	8010002 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ffdc:	699b      	ldr	r3, [r3, #24]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00d      	beq.n	800fffe <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800ffe8:	2b03      	cmp	r3, #3
 800ffea:	d108      	bne.n	800fffe <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fff2:	699b      	ldr	r3, [r3, #24]
 800fff4:	7afa      	ldrb	r2, [r7, #11]
 800fff6:	4611      	mov	r1, r2
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	4798      	blx	r3
 800fffc:	e001      	b.n	8010002 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fffe:	2302      	movs	r3, #2
 8010000:	e000      	b.n	8010004 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3718      	adds	r7, #24
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	460b      	mov	r3, r1
 8010016:	607a      	str	r2, [r7, #4]
 8010018:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 801001a:	7afb      	ldrb	r3, [r7, #11]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d17f      	bne.n	8010120 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	3314      	adds	r3, #20
 8010024:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 801002c:	2b02      	cmp	r3, #2
 801002e:	d15c      	bne.n	80100ea <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	68da      	ldr	r2, [r3, #12]
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	691b      	ldr	r3, [r3, #16]
 8010038:	429a      	cmp	r2, r3
 801003a:	d915      	bls.n	8010068 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	68da      	ldr	r2, [r3, #12]
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	1ad2      	subs	r2, r2, r3
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	b29b      	uxth	r3, r3
 8010050:	461a      	mov	r2, r3
 8010052:	6879      	ldr	r1, [r7, #4]
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f000 fe41 	bl	8010cdc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801005a:	2300      	movs	r3, #0
 801005c:	2200      	movs	r2, #0
 801005e:	2100      	movs	r1, #0
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f004 fd26 	bl	8014ab2 <USBD_LL_PrepareReceive>
 8010066:	e04e      	b.n	8010106 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	697a      	ldr	r2, [r7, #20]
 801006e:	6912      	ldr	r2, [r2, #16]
 8010070:	fbb3 f1f2 	udiv	r1, r3, r2
 8010074:	fb02 f201 	mul.w	r2, r2, r1
 8010078:	1a9b      	subs	r3, r3, r2
 801007a:	2b00      	cmp	r3, #0
 801007c:	d11c      	bne.n	80100b8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	689a      	ldr	r2, [r3, #8]
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010086:	429a      	cmp	r2, r3
 8010088:	d316      	bcc.n	80100b8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	689a      	ldr	r2, [r3, #8]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010094:	429a      	cmp	r2, r3
 8010096:	d20f      	bcs.n	80100b8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010098:	2200      	movs	r2, #0
 801009a:	2100      	movs	r1, #0
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f000 fe1d 	bl	8010cdc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2200      	movs	r2, #0
 80100a6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80100aa:	2300      	movs	r3, #0
 80100ac:	2200      	movs	r2, #0
 80100ae:	2100      	movs	r1, #0
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f004 fcfe 	bl	8014ab2 <USBD_LL_PrepareReceive>
 80100b6:	e026      	b.n	8010106 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00a      	beq.n	80100da <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d105      	bne.n	80100da <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80100da:	2180      	movs	r1, #128	; 0x80
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f004 fc3c 	bl	801495a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	f000 fe31 	bl	8010d4a <USBD_CtlReceiveStatus>
 80100e8:	e00d      	b.n	8010106 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80100f0:	2b04      	cmp	r3, #4
 80100f2:	d004      	beq.n	80100fe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d103      	bne.n	8010106 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80100fe:	2180      	movs	r1, #128	; 0x80
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f004 fc2a 	bl	801495a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801010c:	2b01      	cmp	r3, #1
 801010e:	d11d      	bne.n	801014c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f7ff fe83 	bl	800fe1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2200      	movs	r2, #0
 801011a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 801011e:	e015      	b.n	801014c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010126:	695b      	ldr	r3, [r3, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00d      	beq.n	8010148 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010132:	2b03      	cmp	r3, #3
 8010134:	d108      	bne.n	8010148 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801013c:	695b      	ldr	r3, [r3, #20]
 801013e:	7afa      	ldrb	r2, [r7, #11]
 8010140:	4611      	mov	r1, r2
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	4798      	blx	r3
 8010146:	e001      	b.n	801014c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010148:	2302      	movs	r3, #2
 801014a:	e000      	b.n	801014e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3718      	adds	r7, #24
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b082      	sub	sp, #8
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801015e:	2340      	movs	r3, #64	; 0x40
 8010160:	2200      	movs	r2, #0
 8010162:	2100      	movs	r1, #0
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f004 fb94 	bl	8014892 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2201      	movs	r2, #1
 801016e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2240      	movs	r2, #64	; 0x40
 8010176:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801017a:	2340      	movs	r3, #64	; 0x40
 801017c:	2200      	movs	r2, #0
 801017e:	2180      	movs	r1, #128	; 0x80
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f004 fb86 	bl	8014892 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2201      	movs	r2, #1
 801018a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2240      	movs	r2, #64	; 0x40
 8010190:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2201      	movs	r2, #1
 8010196:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d009      	beq.n	80101ce <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	6852      	ldr	r2, [r2, #4]
 80101c6:	b2d2      	uxtb	r2, r2
 80101c8:	4611      	mov	r1, r2
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	4798      	blx	r3
  }

  return USBD_OK;
 80101ce:	2300      	movs	r3, #0
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	460b      	mov	r3, r1
 80101e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	78fa      	ldrb	r2, [r7, #3]
 80101e8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80101ea:	2300      	movs	r3, #0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bc80      	pop	{r7}
 80101f4:	4770      	bx	lr

080101f6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80101f6:	b480      	push	{r7}
 80101f8:	b083      	sub	sp, #12
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2204      	movs	r2, #4
 801020e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	370c      	adds	r7, #12
 8010218:	46bd      	mov	sp, r7
 801021a:	bc80      	pop	{r7}
 801021c:	4770      	bx	lr

0801021e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 801021e:	b480      	push	{r7}
 8010220:	b083      	sub	sp, #12
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	370c      	adds	r7, #12
 8010238:	46bd      	mov	sp, r7
 801023a:	bc80      	pop	{r7}
 801023c:	4770      	bx	lr

0801023e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b082      	sub	sp, #8
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801024c:	2b03      	cmp	r3, #3
 801024e:	d10b      	bne.n	8010268 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d005      	beq.n	8010268 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
	...

08010274 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801027e:	2300      	movs	r3, #0
 8010280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801028a:	2b20      	cmp	r3, #32
 801028c:	d004      	beq.n	8010298 <USBD_StdDevReq+0x24>
 801028e:	2b40      	cmp	r3, #64	; 0x40
 8010290:	d002      	beq.n	8010298 <USBD_StdDevReq+0x24>
 8010292:	2b00      	cmp	r3, #0
 8010294:	d008      	beq.n	80102a8 <USBD_StdDevReq+0x34>
 8010296:	e04c      	b.n	8010332 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	6839      	ldr	r1, [r7, #0]
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	4798      	blx	r3
    break;
 80102a6:	e049      	b.n	801033c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	785b      	ldrb	r3, [r3, #1]
 80102ac:	2b09      	cmp	r3, #9
 80102ae:	d83a      	bhi.n	8010326 <USBD_StdDevReq+0xb2>
 80102b0:	a201      	add	r2, pc, #4	; (adr r2, 80102b8 <USBD_StdDevReq+0x44>)
 80102b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102b6:	bf00      	nop
 80102b8:	08010309 	.word	0x08010309
 80102bc:	0801031d 	.word	0x0801031d
 80102c0:	08010327 	.word	0x08010327
 80102c4:	08010313 	.word	0x08010313
 80102c8:	08010327 	.word	0x08010327
 80102cc:	080102eb 	.word	0x080102eb
 80102d0:	080102e1 	.word	0x080102e1
 80102d4:	08010327 	.word	0x08010327
 80102d8:	080102ff 	.word	0x080102ff
 80102dc:	080102f5 	.word	0x080102f5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80102e0:	6839      	ldr	r1, [r7, #0]
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f9d2 	bl	801068c <USBD_GetDescriptor>
      break;
 80102e8:	e022      	b.n	8010330 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80102ea:	6839      	ldr	r1, [r7, #0]
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 fac7 	bl	8010880 <USBD_SetAddress>
      break;
 80102f2:	e01d      	b.n	8010330 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80102f4:	6839      	ldr	r1, [r7, #0]
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 fb04 	bl	8010904 <USBD_SetConfig>
      break;
 80102fc:	e018      	b.n	8010330 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80102fe:	6839      	ldr	r1, [r7, #0]
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 fb8d 	bl	8010a20 <USBD_GetConfig>
      break;
 8010306:	e013      	b.n	8010330 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8010308:	6839      	ldr	r1, [r7, #0]
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 fbbc 	bl	8010a88 <USBD_GetStatus>
      break;
 8010310:	e00e      	b.n	8010330 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8010312:	6839      	ldr	r1, [r7, #0]
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fbea 	bl	8010aee <USBD_SetFeature>
      break;
 801031a:	e009      	b.n	8010330 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 fbf9 	bl	8010b16 <USBD_ClrFeature>
      break;
 8010324:	e004      	b.n	8010330 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010326:	6839      	ldr	r1, [r7, #0]
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 fc51 	bl	8010bd0 <USBD_CtlError>
      break;
 801032e:	bf00      	nop
    }
    break;
 8010330:	e004      	b.n	801033c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010332:	6839      	ldr	r1, [r7, #0]
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fc4b 	bl	8010bd0 <USBD_CtlError>
    break;
 801033a:	bf00      	nop
  }

  return ret;
 801033c:	7bfb      	ldrb	r3, [r7, #15]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3710      	adds	r7, #16
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop

08010348 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010352:	2300      	movs	r3, #0
 8010354:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801035e:	2b20      	cmp	r3, #32
 8010360:	d003      	beq.n	801036a <USBD_StdItfReq+0x22>
 8010362:	2b40      	cmp	r3, #64	; 0x40
 8010364:	d001      	beq.n	801036a <USBD_StdItfReq+0x22>
 8010366:	2b00      	cmp	r3, #0
 8010368:	d12a      	bne.n	80103c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010370:	3b01      	subs	r3, #1
 8010372:	2b02      	cmp	r3, #2
 8010374:	d81d      	bhi.n	80103b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	889b      	ldrh	r3, [r3, #4]
 801037a:	b2db      	uxtb	r3, r3
 801037c:	2b01      	cmp	r3, #1
 801037e:	d813      	bhi.n	80103a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	6839      	ldr	r1, [r7, #0]
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	4798      	blx	r3
 801038e:	4603      	mov	r3, r0
 8010390:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	88db      	ldrh	r3, [r3, #6]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d110      	bne.n	80103bc <USBD_StdItfReq+0x74>
 801039a:	7bfb      	ldrb	r3, [r7, #15]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d10d      	bne.n	80103bc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 fcbf 	bl	8010d24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80103a6:	e009      	b.n	80103bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80103a8:	6839      	ldr	r1, [r7, #0]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 fc10 	bl	8010bd0 <USBD_CtlError>
      break;
 80103b0:	e004      	b.n	80103bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 fc0b 	bl	8010bd0 <USBD_CtlError>
      break;
 80103ba:	e000      	b.n	80103be <USBD_StdItfReq+0x76>
      break;
 80103bc:	bf00      	nop
    }
    break;
 80103be:	e004      	b.n	80103ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80103c0:	6839      	ldr	r1, [r7, #0]
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 fc04 	bl	8010bd0 <USBD_CtlError>
    break;
 80103c8:	bf00      	nop
  }

  return USBD_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	889b      	ldrh	r3, [r3, #4]
 80103e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80103f0:	2b20      	cmp	r3, #32
 80103f2:	d004      	beq.n	80103fe <USBD_StdEPReq+0x2a>
 80103f4:	2b40      	cmp	r3, #64	; 0x40
 80103f6:	d002      	beq.n	80103fe <USBD_StdEPReq+0x2a>
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d008      	beq.n	801040e <USBD_StdEPReq+0x3a>
 80103fc:	e13b      	b.n	8010676 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	6839      	ldr	r1, [r7, #0]
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	4798      	blx	r3
    break;
 801040c:	e138      	b.n	8010680 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010416:	2b20      	cmp	r3, #32
 8010418:	d10a      	bne.n	8010430 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	6839      	ldr	r1, [r7, #0]
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	4798      	blx	r3
 8010428:	4603      	mov	r3, r0
 801042a:	73fb      	strb	r3, [r7, #15]

      return ret;
 801042c:	7bfb      	ldrb	r3, [r7, #15]
 801042e:	e128      	b.n	8010682 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	785b      	ldrb	r3, [r3, #1]
 8010434:	2b01      	cmp	r3, #1
 8010436:	d03e      	beq.n	80104b6 <USBD_StdEPReq+0xe2>
 8010438:	2b03      	cmp	r3, #3
 801043a:	d002      	beq.n	8010442 <USBD_StdEPReq+0x6e>
 801043c:	2b00      	cmp	r3, #0
 801043e:	d070      	beq.n	8010522 <USBD_StdEPReq+0x14e>
 8010440:	e113      	b.n	801066a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010448:	2b02      	cmp	r3, #2
 801044a:	d002      	beq.n	8010452 <USBD_StdEPReq+0x7e>
 801044c:	2b03      	cmp	r3, #3
 801044e:	d015      	beq.n	801047c <USBD_StdEPReq+0xa8>
 8010450:	e02b      	b.n	80104aa <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010452:	7bbb      	ldrb	r3, [r7, #14]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00c      	beq.n	8010472 <USBD_StdEPReq+0x9e>
 8010458:	7bbb      	ldrb	r3, [r7, #14]
 801045a:	2b80      	cmp	r3, #128	; 0x80
 801045c:	d009      	beq.n	8010472 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 801045e:	7bbb      	ldrb	r3, [r7, #14]
 8010460:	4619      	mov	r1, r3
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f004 fa79 	bl	801495a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010468:	2180      	movs	r1, #128	; 0x80
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f004 fa75 	bl	801495a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010470:	e020      	b.n	80104b4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fbab 	bl	8010bd0 <USBD_CtlError>
        break;
 801047a:	e01b      	b.n	80104b4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	885b      	ldrh	r3, [r3, #2]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10e      	bne.n	80104a2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010484:	7bbb      	ldrb	r3, [r7, #14]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00b      	beq.n	80104a2 <USBD_StdEPReq+0xce>
 801048a:	7bbb      	ldrb	r3, [r7, #14]
 801048c:	2b80      	cmp	r3, #128	; 0x80
 801048e:	d008      	beq.n	80104a2 <USBD_StdEPReq+0xce>
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	88db      	ldrh	r3, [r3, #6]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d104      	bne.n	80104a2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010498:	7bbb      	ldrb	r3, [r7, #14]
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f004 fa5c 	bl	801495a <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 fc3e 	bl	8010d24 <USBD_CtlSendStatus>

        break;
 80104a8:	e004      	b.n	80104b4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80104aa:	6839      	ldr	r1, [r7, #0]
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 fb8f 	bl	8010bd0 <USBD_CtlError>
        break;
 80104b2:	bf00      	nop
      }
      break;
 80104b4:	e0de      	b.n	8010674 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80104bc:	2b02      	cmp	r3, #2
 80104be:	d002      	beq.n	80104c6 <USBD_StdEPReq+0xf2>
 80104c0:	2b03      	cmp	r3, #3
 80104c2:	d015      	beq.n	80104f0 <USBD_StdEPReq+0x11c>
 80104c4:	e026      	b.n	8010514 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104c6:	7bbb      	ldrb	r3, [r7, #14]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00c      	beq.n	80104e6 <USBD_StdEPReq+0x112>
 80104cc:	7bbb      	ldrb	r3, [r7, #14]
 80104ce:	2b80      	cmp	r3, #128	; 0x80
 80104d0:	d009      	beq.n	80104e6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80104d2:	7bbb      	ldrb	r3, [r7, #14]
 80104d4:	4619      	mov	r1, r3
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f004 fa3f 	bl	801495a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80104dc:	2180      	movs	r1, #128	; 0x80
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f004 fa3b 	bl	801495a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80104e4:	e01c      	b.n	8010520 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 fb71 	bl	8010bd0 <USBD_CtlError>
        break;
 80104ee:	e017      	b.n	8010520 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	885b      	ldrh	r3, [r3, #2]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d112      	bne.n	801051e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d004      	beq.n	801050c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010502:	7bbb      	ldrb	r3, [r7, #14]
 8010504:	4619      	mov	r1, r3
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f004 fa46 	bl	8014998 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 fc09 	bl	8010d24 <USBD_CtlSendStatus>
        }
        break;
 8010512:	e004      	b.n	801051e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8010514:	6839      	ldr	r1, [r7, #0]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 fb5a 	bl	8010bd0 <USBD_CtlError>
        break;
 801051c:	e000      	b.n	8010520 <USBD_StdEPReq+0x14c>
        break;
 801051e:	bf00      	nop
      }
      break;
 8010520:	e0a8      	b.n	8010674 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010528:	2b02      	cmp	r3, #2
 801052a:	d002      	beq.n	8010532 <USBD_StdEPReq+0x15e>
 801052c:	2b03      	cmp	r3, #3
 801052e:	d031      	beq.n	8010594 <USBD_StdEPReq+0x1c0>
 8010530:	e095      	b.n	801065e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010532:	7bbb      	ldrb	r3, [r7, #14]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d007      	beq.n	8010548 <USBD_StdEPReq+0x174>
 8010538:	7bbb      	ldrb	r3, [r7, #14]
 801053a:	2b80      	cmp	r3, #128	; 0x80
 801053c:	d004      	beq.n	8010548 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 fb45 	bl	8010bd0 <USBD_CtlError>
          break;
 8010546:	e08f      	b.n	8010668 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801054c:	2b00      	cmp	r3, #0
 801054e:	da0b      	bge.n	8010568 <USBD_StdEPReq+0x194>
 8010550:	7bbb      	ldrb	r3, [r7, #14]
 8010552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010556:	4613      	mov	r3, r2
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	4413      	add	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	3310      	adds	r3, #16
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	4413      	add	r3, r2
 8010564:	3304      	adds	r3, #4
 8010566:	e00a      	b.n	801057e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010568:	7bbb      	ldrb	r3, [r7, #14]
 801056a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801056e:	4613      	mov	r3, r2
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	4413      	add	r3, r2
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	4413      	add	r3, r2
 801057e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	2200      	movs	r2, #0
 8010584:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2202      	movs	r2, #2
 801058a:	4619      	mov	r1, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 fb89 	bl	8010ca4 <USBD_CtlSendData>
          break;
 8010592:	e069      	b.n	8010668 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010598:	2b00      	cmp	r3, #0
 801059a:	da11      	bge.n	80105c0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801059c:	7bbb      	ldrb	r3, [r7, #14]
 801059e:	f003 020f 	and.w	r2, r3, #15
 80105a2:	6879      	ldr	r1, [r7, #4]
 80105a4:	4613      	mov	r3, r2
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	4413      	add	r3, r2
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	440b      	add	r3, r1
 80105ae:	3318      	adds	r3, #24
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d117      	bne.n	80105e6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 fb09 	bl	8010bd0 <USBD_CtlError>
            break;
 80105be:	e053      	b.n	8010668 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80105c0:	7bbb      	ldrb	r3, [r7, #14]
 80105c2:	f003 020f 	and.w	r2, r3, #15
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	4613      	mov	r3, r2
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	4413      	add	r3, r2
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	440b      	add	r3, r1
 80105d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d104      	bne.n	80105e6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80105dc:	6839      	ldr	r1, [r7, #0]
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f000 faf6 	bl	8010bd0 <USBD_CtlError>
            break;
 80105e4:	e040      	b.n	8010668 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80105e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	da0b      	bge.n	8010606 <USBD_StdEPReq+0x232>
 80105ee:	7bbb      	ldrb	r3, [r7, #14]
 80105f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105f4:	4613      	mov	r3, r2
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	4413      	add	r3, r2
 80105fa:	009b      	lsls	r3, r3, #2
 80105fc:	3310      	adds	r3, #16
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	4413      	add	r3, r2
 8010602:	3304      	adds	r3, #4
 8010604:	e00a      	b.n	801061c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010606:	7bbb      	ldrb	r3, [r7, #14]
 8010608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801060c:	4613      	mov	r3, r2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	4413      	add	r3, r2
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	4413      	add	r3, r2
 801061c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801061e:	7bbb      	ldrb	r3, [r7, #14]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <USBD_StdEPReq+0x256>
 8010624:	7bbb      	ldrb	r3, [r7, #14]
 8010626:	2b80      	cmp	r3, #128	; 0x80
 8010628:	d103      	bne.n	8010632 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	2200      	movs	r2, #0
 801062e:	601a      	str	r2, [r3, #0]
 8010630:	e00e      	b.n	8010650 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8010632:	7bbb      	ldrb	r3, [r7, #14]
 8010634:	4619      	mov	r1, r3
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f004 f9cd 	bl	80149d6 <USBD_LL_IsStallEP>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d003      	beq.n	801064a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	2201      	movs	r2, #1
 8010646:	601a      	str	r2, [r3, #0]
 8010648:	e002      	b.n	8010650 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	2200      	movs	r2, #0
 801064e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	2202      	movs	r2, #2
 8010654:	4619      	mov	r1, r3
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 fb24 	bl	8010ca4 <USBD_CtlSendData>
          break;
 801065c:	e004      	b.n	8010668 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 801065e:	6839      	ldr	r1, [r7, #0]
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 fab5 	bl	8010bd0 <USBD_CtlError>
        break;
 8010666:	bf00      	nop
      }
      break;
 8010668:	e004      	b.n	8010674 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 801066a:	6839      	ldr	r1, [r7, #0]
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 faaf 	bl	8010bd0 <USBD_CtlError>
      break;
 8010672:	bf00      	nop
    }
    break;
 8010674:	e004      	b.n	8010680 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010676:	6839      	ldr	r1, [r7, #0]
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 faa9 	bl	8010bd0 <USBD_CtlError>
    break;
 801067e:	bf00      	nop
  }

  return ret;
 8010680:	7bfb      	ldrb	r3, [r7, #15]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3710      	adds	r7, #16
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
	...

0801068c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	885b      	ldrh	r3, [r3, #2]
 801069a:	0a1b      	lsrs	r3, r3, #8
 801069c:	b29b      	uxth	r3, r3
 801069e:	3b01      	subs	r3, #1
 80106a0:	2b06      	cmp	r3, #6
 80106a2:	f200 80c9 	bhi.w	8010838 <USBD_GetDescriptor+0x1ac>
 80106a6:	a201      	add	r2, pc, #4	; (adr r2, 80106ac <USBD_GetDescriptor+0x20>)
 80106a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ac:	080106c9 	.word	0x080106c9
 80106b0:	080106e1 	.word	0x080106e1
 80106b4:	08010721 	.word	0x08010721
 80106b8:	08010839 	.word	0x08010839
 80106bc:	08010839 	.word	0x08010839
 80106c0:	080107e5 	.word	0x080107e5
 80106c4:	0801080b 	.word	0x0801080b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	7c12      	ldrb	r2, [r2, #16]
 80106d4:	f107 010a 	add.w	r1, r7, #10
 80106d8:	4610      	mov	r0, r2
 80106da:	4798      	blx	r3
 80106dc:	60f8      	str	r0, [r7, #12]
    break;
 80106de:	e0b0      	b.n	8010842 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	7c1b      	ldrb	r3, [r3, #16]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10d      	bne.n	8010704 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106f0:	f107 020a 	add.w	r2, r7, #10
 80106f4:	4610      	mov	r0, r2
 80106f6:	4798      	blx	r3
 80106f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	3301      	adds	r3, #1
 80106fe:	2202      	movs	r2, #2
 8010700:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010702:	e09e      	b.n	8010842 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801070a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801070c:	f107 020a 	add.w	r2, r7, #10
 8010710:	4610      	mov	r0, r2
 8010712:	4798      	blx	r3
 8010714:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	3301      	adds	r3, #1
 801071a:	2202      	movs	r2, #2
 801071c:	701a      	strb	r2, [r3, #0]
    break;
 801071e:	e090      	b.n	8010842 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	885b      	ldrh	r3, [r3, #2]
 8010724:	b2db      	uxtb	r3, r3
 8010726:	2b05      	cmp	r3, #5
 8010728:	d856      	bhi.n	80107d8 <USBD_GetDescriptor+0x14c>
 801072a:	a201      	add	r2, pc, #4	; (adr r2, 8010730 <USBD_GetDescriptor+0xa4>)
 801072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010730:	08010749 	.word	0x08010749
 8010734:	08010761 	.word	0x08010761
 8010738:	08010779 	.word	0x08010779
 801073c:	08010791 	.word	0x08010791
 8010740:	080107a9 	.word	0x080107a9
 8010744:	080107c1 	.word	0x080107c1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	7c12      	ldrb	r2, [r2, #16]
 8010754:	f107 010a 	add.w	r1, r7, #10
 8010758:	4610      	mov	r0, r2
 801075a:	4798      	blx	r3
 801075c:	60f8      	str	r0, [r7, #12]
      break;
 801075e:	e040      	b.n	80107e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010766:	689b      	ldr	r3, [r3, #8]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	7c12      	ldrb	r2, [r2, #16]
 801076c:	f107 010a 	add.w	r1, r7, #10
 8010770:	4610      	mov	r0, r2
 8010772:	4798      	blx	r3
 8010774:	60f8      	str	r0, [r7, #12]
      break;
 8010776:	e034      	b.n	80107e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	7c12      	ldrb	r2, [r2, #16]
 8010784:	f107 010a 	add.w	r1, r7, #10
 8010788:	4610      	mov	r0, r2
 801078a:	4798      	blx	r3
 801078c:	60f8      	str	r0, [r7, #12]
      break;
 801078e:	e028      	b.n	80107e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	687a      	ldr	r2, [r7, #4]
 801079a:	7c12      	ldrb	r2, [r2, #16]
 801079c:	f107 010a 	add.w	r1, r7, #10
 80107a0:	4610      	mov	r0, r2
 80107a2:	4798      	blx	r3
 80107a4:	60f8      	str	r0, [r7, #12]
      break;
 80107a6:	e01c      	b.n	80107e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80107ae:	695b      	ldr	r3, [r3, #20]
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	7c12      	ldrb	r2, [r2, #16]
 80107b4:	f107 010a 	add.w	r1, r7, #10
 80107b8:	4610      	mov	r0, r2
 80107ba:	4798      	blx	r3
 80107bc:	60f8      	str	r0, [r7, #12]
      break;
 80107be:	e010      	b.n	80107e2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80107c6:	699b      	ldr	r3, [r3, #24]
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	7c12      	ldrb	r2, [r2, #16]
 80107cc:	f107 010a 	add.w	r1, r7, #10
 80107d0:	4610      	mov	r0, r2
 80107d2:	4798      	blx	r3
 80107d4:	60f8      	str	r0, [r7, #12]
      break;
 80107d6:	e004      	b.n	80107e2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80107d8:	6839      	ldr	r1, [r7, #0]
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f000 f9f8 	bl	8010bd0 <USBD_CtlError>
      return;
 80107e0:	e04b      	b.n	801087a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80107e2:	e02e      	b.n	8010842 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	7c1b      	ldrb	r3, [r3, #16]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d109      	bne.n	8010800 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80107f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f4:	f107 020a 	add.w	r2, r7, #10
 80107f8:	4610      	mov	r0, r2
 80107fa:	4798      	blx	r3
 80107fc:	60f8      	str	r0, [r7, #12]
      break;
 80107fe:	e020      	b.n	8010842 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010800:	6839      	ldr	r1, [r7, #0]
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 f9e4 	bl	8010bd0 <USBD_CtlError>
      return;
 8010808:	e037      	b.n	801087a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	7c1b      	ldrb	r3, [r3, #16]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d10d      	bne.n	801082e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081a:	f107 020a 	add.w	r2, r7, #10
 801081e:	4610      	mov	r0, r2
 8010820:	4798      	blx	r3
 8010822:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	3301      	adds	r3, #1
 8010828:	2207      	movs	r2, #7
 801082a:	701a      	strb	r2, [r3, #0]
      break;
 801082c:	e009      	b.n	8010842 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 f9cd 	bl	8010bd0 <USBD_CtlError>
      return;
 8010836:	e020      	b.n	801087a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010838:	6839      	ldr	r1, [r7, #0]
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 f9c8 	bl	8010bd0 <USBD_CtlError>
    return;
 8010840:	e01b      	b.n	801087a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010842:	897b      	ldrh	r3, [r7, #10]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d011      	beq.n	801086c <USBD_GetDescriptor+0x1e0>
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	88db      	ldrh	r3, [r3, #6]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00d      	beq.n	801086c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	88da      	ldrh	r2, [r3, #6]
 8010854:	897b      	ldrh	r3, [r7, #10]
 8010856:	4293      	cmp	r3, r2
 8010858:	bf28      	it	cs
 801085a:	4613      	movcs	r3, r2
 801085c:	b29b      	uxth	r3, r3
 801085e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010860:	897b      	ldrh	r3, [r7, #10]
 8010862:	461a      	mov	r2, r3
 8010864:	68f9      	ldr	r1, [r7, #12]
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 fa1c 	bl	8010ca4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	88db      	ldrh	r3, [r3, #6]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fa55 	bl	8010d24 <USBD_CtlSendStatus>
  }
}
 801087a:	3710      	adds	r7, #16
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	889b      	ldrh	r3, [r3, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d130      	bne.n	80108f4 <USBD_SetAddress+0x74>
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	88db      	ldrh	r3, [r3, #6]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d12c      	bne.n	80108f4 <USBD_SetAddress+0x74>
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	885b      	ldrh	r3, [r3, #2]
 801089e:	2b7f      	cmp	r3, #127	; 0x7f
 80108a0:	d828      	bhi.n	80108f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	885b      	ldrh	r3, [r3, #2]
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108b4:	2b03      	cmp	r3, #3
 80108b6:	d104      	bne.n	80108c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80108b8:	6839      	ldr	r1, [r7, #0]
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f988 	bl	8010bd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108c0:	e01c      	b.n	80108fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	7bfa      	ldrb	r2, [r7, #15]
 80108c6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80108ca:	7bfb      	ldrb	r3, [r7, #15]
 80108cc:	4619      	mov	r1, r3
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f004 f8ad 	bl	8014a2e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f000 fa25 	bl	8010d24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80108da:	7bfb      	ldrb	r3, [r7, #15]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d004      	beq.n	80108ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2202      	movs	r2, #2
 80108e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108e8:	e008      	b.n	80108fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2201      	movs	r2, #1
 80108ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108f2:	e003      	b.n	80108fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80108f4:	6839      	ldr	r1, [r7, #0]
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 f96a 	bl	8010bd0 <USBD_CtlError>
  }
}
 80108fc:	bf00      	nop
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	885b      	ldrh	r3, [r3, #2]
 8010912:	b2da      	uxtb	r2, r3
 8010914:	4b41      	ldr	r3, [pc, #260]	; (8010a1c <USBD_SetConfig+0x118>)
 8010916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010918:	4b40      	ldr	r3, [pc, #256]	; (8010a1c <USBD_SetConfig+0x118>)
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d904      	bls.n	801092a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 f954 	bl	8010bd0 <USBD_CtlError>
 8010928:	e075      	b.n	8010a16 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010930:	2b02      	cmp	r3, #2
 8010932:	d002      	beq.n	801093a <USBD_SetConfig+0x36>
 8010934:	2b03      	cmp	r3, #3
 8010936:	d023      	beq.n	8010980 <USBD_SetConfig+0x7c>
 8010938:	e062      	b.n	8010a00 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 801093a:	4b38      	ldr	r3, [pc, #224]	; (8010a1c <USBD_SetConfig+0x118>)
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d01a      	beq.n	8010978 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8010942:	4b36      	ldr	r3, [pc, #216]	; (8010a1c <USBD_SetConfig+0x118>)
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2203      	movs	r2, #3
 8010950:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010954:	4b31      	ldr	r3, [pc, #196]	; (8010a1c <USBD_SetConfig+0x118>)
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	4619      	mov	r1, r3
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7ff fa68 	bl	800fe30 <USBD_SetClassConfig>
 8010960:	4603      	mov	r3, r0
 8010962:	2b02      	cmp	r3, #2
 8010964:	d104      	bne.n	8010970 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8010966:	6839      	ldr	r1, [r7, #0]
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f000 f931 	bl	8010bd0 <USBD_CtlError>
          return;
 801096e:	e052      	b.n	8010a16 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 f9d7 	bl	8010d24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010976:	e04e      	b.n	8010a16 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 f9d3 	bl	8010d24 <USBD_CtlSendStatus>
      break;
 801097e:	e04a      	b.n	8010a16 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010980:	4b26      	ldr	r3, [pc, #152]	; (8010a1c <USBD_SetConfig+0x118>)
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d112      	bne.n	80109ae <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2202      	movs	r2, #2
 801098c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8010990:	4b22      	ldr	r3, [pc, #136]	; (8010a1c <USBD_SetConfig+0x118>)
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	461a      	mov	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 801099a:	4b20      	ldr	r3, [pc, #128]	; (8010a1c <USBD_SetConfig+0x118>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	4619      	mov	r1, r3
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f7ff fa64 	bl	800fe6e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 f9bc 	bl	8010d24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80109ac:	e033      	b.n	8010a16 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80109ae:	4b1b      	ldr	r3, [pc, #108]	; (8010a1c <USBD_SetConfig+0x118>)
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	461a      	mov	r2, r3
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d01d      	beq.n	80109f8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	4619      	mov	r1, r3
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7ff fa52 	bl	800fe6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80109ca:	4b14      	ldr	r3, [pc, #80]	; (8010a1c <USBD_SetConfig+0x118>)
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	461a      	mov	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80109d4:	4b11      	ldr	r3, [pc, #68]	; (8010a1c <USBD_SetConfig+0x118>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff fa28 	bl	800fe30 <USBD_SetClassConfig>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b02      	cmp	r3, #2
 80109e4:	d104      	bne.n	80109f0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80109e6:	6839      	ldr	r1, [r7, #0]
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f8f1 	bl	8010bd0 <USBD_CtlError>
          return;
 80109ee:	e012      	b.n	8010a16 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f000 f997 	bl	8010d24 <USBD_CtlSendStatus>
      break;
 80109f6:	e00e      	b.n	8010a16 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f000 f993 	bl	8010d24 <USBD_CtlSendStatus>
      break;
 80109fe:	e00a      	b.n	8010a16 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8010a00:	6839      	ldr	r1, [r7, #0]
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 f8e4 	bl	8010bd0 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010a08:	4b04      	ldr	r3, [pc, #16]	; (8010a1c <USBD_SetConfig+0x118>)
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7ff fa2d 	bl	800fe6e <USBD_ClrClassConfig>
      break;
 8010a14:	bf00      	nop
    }
  }
}
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	2000036c 	.word	0x2000036c

08010a20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	88db      	ldrh	r3, [r3, #6]
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d004      	beq.n	8010a3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8010a32:	6839      	ldr	r1, [r7, #0]
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 f8cb 	bl	8010bd0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8010a3a:	e021      	b.n	8010a80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	db17      	blt.n	8010a76 <USBD_GetConfig+0x56>
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	dd02      	ble.n	8010a50 <USBD_GetConfig+0x30>
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d00b      	beq.n	8010a66 <USBD_GetConfig+0x46>
 8010a4e:	e012      	b.n	8010a76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	3308      	adds	r3, #8
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 f920 	bl	8010ca4 <USBD_CtlSendData>
      break;
 8010a64:	e00c      	b.n	8010a80 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	3304      	adds	r3, #4
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f918 	bl	8010ca4 <USBD_CtlSendData>
      break;
 8010a74:	e004      	b.n	8010a80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f8a9 	bl	8010bd0 <USBD_CtlError>
      break;
 8010a7e:	bf00      	nop
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d81e      	bhi.n	8010adc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	88db      	ldrh	r3, [r3, #6]
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d004      	beq.n	8010ab0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010aa6:	6839      	ldr	r1, [r7, #0]
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f000 f891 	bl	8010bd0 <USBD_CtlError>
      break;
 8010aae:	e01a      	b.n	8010ae6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d005      	beq.n	8010acc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	f043 0202 	orr.w	r2, r3, #2
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	330c      	adds	r3, #12
 8010ad0:	2202      	movs	r2, #2
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 f8e5 	bl	8010ca4 <USBD_CtlSendData>
    break;
 8010ada:	e004      	b.n	8010ae6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8010adc:	6839      	ldr	r1, [r7, #0]
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f876 	bl	8010bd0 <USBD_CtlError>
    break;
 8010ae4:	bf00      	nop
  }
}
 8010ae6:	bf00      	nop
 8010ae8:	3708      	adds	r7, #8
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b082      	sub	sp, #8
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
 8010af6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	885b      	ldrh	r3, [r3, #2]
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d106      	bne.n	8010b0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 f90b 	bl	8010d24 <USBD_CtlSendStatus>
  }

}
 8010b0e:	bf00      	nop
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b082      	sub	sp, #8
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b26:	3b01      	subs	r3, #1
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d80b      	bhi.n	8010b44 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	885b      	ldrh	r3, [r3, #2]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d10c      	bne.n	8010b4e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f000 f8f1 	bl	8010d24 <USBD_CtlSendStatus>
    }
    break;
 8010b42:	e004      	b.n	8010b4e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8010b44:	6839      	ldr	r1, [r7, #0]
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 f842 	bl	8010bd0 <USBD_CtlError>
    break;
 8010b4c:	e000      	b.n	8010b50 <USBD_ClrFeature+0x3a>
    break;
 8010b4e:	bf00      	nop
  }
}
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	781a      	ldrb	r2, [r3, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	785a      	ldrb	r2, [r3, #1]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	3302      	adds	r3, #2
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	3303      	adds	r3, #3
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	021b      	lsls	r3, r3, #8
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	4413      	add	r3, r2
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	3304      	adds	r3, #4
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	3305      	adds	r3, #5
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	021b      	lsls	r3, r3, #8
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	4413      	add	r3, r2
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	3306      	adds	r3, #6
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	3307      	adds	r3, #7
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	021b      	lsls	r3, r3, #8
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	4413      	add	r3, r2
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	80da      	strh	r2, [r3, #6]

}
 8010bc6:	bf00      	nop
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bc80      	pop	{r7}
 8010bce:	4770      	bx	lr

08010bd0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8010bda:	2180      	movs	r1, #128	; 0x80
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f003 febc 	bl	801495a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8010be2:	2100      	movs	r1, #0
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f003 feb8 	bl	801495a <USBD_LL_StallEP>
}
 8010bea:	bf00      	nop
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}

08010bf2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010bf2:	b580      	push	{r7, lr}
 8010bf4:	b086      	sub	sp, #24
 8010bf6:	af00      	add	r7, sp, #0
 8010bf8:	60f8      	str	r0, [r7, #12]
 8010bfa:	60b9      	str	r1, [r7, #8]
 8010bfc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d032      	beq.n	8010c6e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	f000 f834 	bl	8010c76 <USBD_GetLen>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	3301      	adds	r3, #1
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010c1c:	7dfb      	ldrb	r3, [r7, #23]
 8010c1e:	1c5a      	adds	r2, r3, #1
 8010c20:	75fa      	strb	r2, [r7, #23]
 8010c22:	461a      	mov	r2, r3
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	4413      	add	r3, r2
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	7812      	ldrb	r2, [r2, #0]
 8010c2c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010c2e:	7dfb      	ldrb	r3, [r7, #23]
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	75fa      	strb	r2, [r7, #23]
 8010c34:	461a      	mov	r2, r3
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	4413      	add	r3, r2
 8010c3a:	2203      	movs	r2, #3
 8010c3c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010c3e:	e012      	b.n	8010c66 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	1c5a      	adds	r2, r3, #1
 8010c44:	60fa      	str	r2, [r7, #12]
 8010c46:	7dfa      	ldrb	r2, [r7, #23]
 8010c48:	1c51      	adds	r1, r2, #1
 8010c4a:	75f9      	strb	r1, [r7, #23]
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	68ba      	ldr	r2, [r7, #8]
 8010c50:	440a      	add	r2, r1
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010c56:	7dfb      	ldrb	r3, [r7, #23]
 8010c58:	1c5a      	adds	r2, r3, #1
 8010c5a:	75fa      	strb	r2, [r7, #23]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	4413      	add	r3, r2
 8010c62:	2200      	movs	r2, #0
 8010c64:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d1e8      	bne.n	8010c40 <USBD_GetString+0x4e>
    }
  }
}
 8010c6e:	bf00      	nop
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010c76:	b480      	push	{r7}
 8010c78:	b085      	sub	sp, #20
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8010c82:	e005      	b.n	8010c90 <USBD_GetLen+0x1a>
    {
        len++;
 8010c84:	7bfb      	ldrb	r3, [r7, #15]
 8010c86:	3301      	adds	r3, #1
 8010c88:	73fb      	strb	r3, [r7, #15]
        buf++;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1f5      	bne.n	8010c84 <USBD_GetLen+0xe>
    }

    return len;
 8010c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3714      	adds	r7, #20
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bc80      	pop	{r7}
 8010ca2:	4770      	bx	lr

08010ca4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	4613      	mov	r3, r2
 8010cb0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8010cba:	88fa      	ldrh	r2, [r7, #6]
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010cc0:	88fa      	ldrh	r2, [r7, #6]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010cc6:	88fb      	ldrh	r3, [r7, #6]
 8010cc8:	68ba      	ldr	r2, [r7, #8]
 8010cca:	2100      	movs	r1, #0
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f003 fecd 	bl	8014a6c <USBD_LL_Transmit>

  return USBD_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010cea:	88fb      	ldrh	r3, [r7, #6]
 8010cec:	68ba      	ldr	r2, [r7, #8]
 8010cee:	2100      	movs	r1, #0
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f003 febb 	bl	8014a6c <USBD_LL_Transmit>

  return USBD_OK;
 8010cf6:	2300      	movs	r3, #0
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3710      	adds	r7, #16
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010d0e:	88fb      	ldrh	r3, [r7, #6]
 8010d10:	68ba      	ldr	r2, [r7, #8]
 8010d12:	2100      	movs	r1, #0
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	f003 fecc 	bl	8014ab2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010d1a:	2300      	movs	r3, #0
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2204      	movs	r2, #4
 8010d30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010d34:	2300      	movs	r3, #0
 8010d36:	2200      	movs	r2, #0
 8010d38:	2100      	movs	r1, #0
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f003 fe96 	bl	8014a6c <USBD_LL_Transmit>

  return USBD_OK;
 8010d40:	2300      	movs	r3, #0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8010d4a:	b580      	push	{r7, lr}
 8010d4c:	b082      	sub	sp, #8
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2205      	movs	r2, #5
 8010d56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	2100      	movs	r1, #0
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f003 fea6 	bl	8014ab2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b087      	sub	sp, #28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010d82:	2300      	movs	r3, #0
 8010d84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010d86:	4b1e      	ldr	r3, [pc, #120]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010d88:	7a5b      	ldrb	r3, [r3, #9]
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d131      	bne.n	8010df4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010d90:	4b1b      	ldr	r3, [pc, #108]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010d92:	7a5b      	ldrb	r3, [r3, #9]
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	461a      	mov	r2, r3
 8010d98:	4b19      	ldr	r3, [pc, #100]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010d9a:	2100      	movs	r1, #0
 8010d9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010d9e:	4b18      	ldr	r3, [pc, #96]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010da0:	7a5b      	ldrb	r3, [r3, #9]
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	4a16      	ldr	r2, [pc, #88]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010dae:	4b14      	ldr	r3, [pc, #80]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010db0:	7a5b      	ldrb	r3, [r3, #9]
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	461a      	mov	r2, r3
 8010db6:	4b12      	ldr	r3, [pc, #72]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010db8:	4413      	add	r3, r2
 8010dba:	79fa      	ldrb	r2, [r7, #7]
 8010dbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010dbe:	4b10      	ldr	r3, [pc, #64]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010dc0:	7a5b      	ldrb	r3, [r3, #9]
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	1c5a      	adds	r2, r3, #1
 8010dc6:	b2d1      	uxtb	r1, r2
 8010dc8:	4a0d      	ldr	r2, [pc, #52]	; (8010e00 <FATFS_LinkDriverEx+0x90>)
 8010dca:	7251      	strb	r1, [r2, #9]
 8010dcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010dce:	7dbb      	ldrb	r3, [r7, #22]
 8010dd0:	3330      	adds	r3, #48	; 0x30
 8010dd2:	b2da      	uxtb	r2, r3
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	3301      	adds	r3, #1
 8010ddc:	223a      	movs	r2, #58	; 0x3a
 8010dde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	3302      	adds	r3, #2
 8010de4:	222f      	movs	r2, #47	; 0x2f
 8010de6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	3303      	adds	r3, #3
 8010dec:	2200      	movs	r2, #0
 8010dee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010df0:	2300      	movs	r3, #0
 8010df2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	371c      	adds	r7, #28
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bc80      	pop	{r7}
 8010dfe:	4770      	bx	lr
 8010e00:	20000370 	.word	0x20000370

08010e04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010e0e:	2200      	movs	r2, #0
 8010e10:	6839      	ldr	r1, [r7, #0]
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff ffac 	bl	8010d70 <FATFS_LinkDriverEx>
 8010e18:	4603      	mov	r3, r0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
	...

08010e24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e2a:	f3ef 8305 	mrs	r3, IPSR
 8010e2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d10f      	bne.n	8010e56 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e36:	f3ef 8310 	mrs	r3, PRIMASK
 8010e3a:	607b      	str	r3, [r7, #4]
  return(result);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d109      	bne.n	8010e56 <osKernelInitialize+0x32>
 8010e42:	4b10      	ldr	r3, [pc, #64]	; (8010e84 <osKernelInitialize+0x60>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b02      	cmp	r3, #2
 8010e48:	d109      	bne.n	8010e5e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8010e4e:	603b      	str	r3, [r7, #0]
  return(result);
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d003      	beq.n	8010e5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010e56:	f06f 0305 	mvn.w	r3, #5
 8010e5a:	60fb      	str	r3, [r7, #12]
 8010e5c:	e00c      	b.n	8010e78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010e5e:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <osKernelInitialize+0x60>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d105      	bne.n	8010e72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8010e66:	4b07      	ldr	r3, [pc, #28]	; (8010e84 <osKernelInitialize+0x60>)
 8010e68:	2201      	movs	r2, #1
 8010e6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	60fb      	str	r3, [r7, #12]
 8010e70:	e002      	b.n	8010e78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010e72:	f04f 33ff 	mov.w	r3, #4294967295
 8010e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010e78:	68fb      	ldr	r3, [r7, #12]
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3714      	adds	r7, #20
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bc80      	pop	{r7}
 8010e82:	4770      	bx	lr
 8010e84:	2000037c 	.word	0x2000037c

08010e88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e8e:	f3ef 8305 	mrs	r3, IPSR
 8010e92:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d10f      	bne.n	8010eba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8010e9e:	607b      	str	r3, [r7, #4]
  return(result);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d109      	bne.n	8010eba <osKernelStart+0x32>
 8010ea6:	4b11      	ldr	r3, [pc, #68]	; (8010eec <osKernelStart+0x64>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d109      	bne.n	8010ec2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010eae:	f3ef 8311 	mrs	r3, BASEPRI
 8010eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d003      	beq.n	8010ec2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8010eba:	f06f 0305 	mvn.w	r3, #5
 8010ebe:	60fb      	str	r3, [r7, #12]
 8010ec0:	e00e      	b.n	8010ee0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8010ec2:	4b0a      	ldr	r3, [pc, #40]	; (8010eec <osKernelStart+0x64>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d107      	bne.n	8010eda <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8010eca:	4b08      	ldr	r3, [pc, #32]	; (8010eec <osKernelStart+0x64>)
 8010ecc:	2202      	movs	r2, #2
 8010ece:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8010ed0:	f001 fd04 	bl	80128dc <vTaskStartScheduler>
      stat = osOK;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	60fb      	str	r3, [r7, #12]
 8010ed8:	e002      	b.n	8010ee0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8010eda:	f04f 33ff 	mov.w	r3, #4294967295
 8010ede:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010ee0:	68fb      	ldr	r3, [r7, #12]
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3710      	adds	r7, #16
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	2000037c 	.word	0x2000037c

08010ef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b092      	sub	sp, #72	; 0x48
 8010ef4:	af04      	add	r7, sp, #16
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010efc:	2300      	movs	r3, #0
 8010efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f00:	f3ef 8305 	mrs	r3, IPSR
 8010f04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8010f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f040 8094 	bne.w	8011036 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8010f12:	623b      	str	r3, [r7, #32]
  return(result);
 8010f14:	6a3b      	ldr	r3, [r7, #32]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f040 808d 	bne.w	8011036 <osThreadNew+0x146>
 8010f1c:	4b48      	ldr	r3, [pc, #288]	; (8011040 <osThreadNew+0x150>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b02      	cmp	r3, #2
 8010f22:	d106      	bne.n	8010f32 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f24:	f3ef 8311 	mrs	r3, BASEPRI
 8010f28:	61fb      	str	r3, [r7, #28]
  return(result);
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f040 8082 	bne.w	8011036 <osThreadNew+0x146>
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d07e      	beq.n	8011036 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8010f38:	2380      	movs	r3, #128	; 0x80
 8010f3a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8010f3c:	2318      	movs	r3, #24
 8010f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8010f40:	2300      	movs	r3, #0
 8010f42:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8010f44:	f107 031b 	add.w	r3, r7, #27
 8010f48:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8010f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f4e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d045      	beq.n	8010fe2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d002      	beq.n	8010f64 <osThreadNew+0x74>
        name = attr->name;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	699b      	ldr	r3, [r3, #24]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	699b      	ldr	r3, [r3, #24]
 8010f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d008      	beq.n	8010f8a <osThreadNew+0x9a>
 8010f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7a:	2b38      	cmp	r3, #56	; 0x38
 8010f7c:	d805      	bhi.n	8010f8a <osThreadNew+0x9a>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	f003 0301 	and.w	r3, r3, #1
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d001      	beq.n	8010f8e <osThreadNew+0x9e>
        return (NULL);
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e054      	b.n	8011038 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	695b      	ldr	r3, [r3, #20]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d003      	beq.n	8010f9e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	695b      	ldr	r3, [r3, #20]
 8010f9a:	089b      	lsrs	r3, r3, #2
 8010f9c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d00e      	beq.n	8010fc4 <osThreadNew+0xd4>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	2b63      	cmp	r3, #99	; 0x63
 8010fac:	d90a      	bls.n	8010fc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d006      	beq.n	8010fc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d002      	beq.n	8010fc4 <osThreadNew+0xd4>
        mem = 1;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fc2:	e010      	b.n	8010fe6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10c      	bne.n	8010fe6 <osThreadNew+0xf6>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d108      	bne.n	8010fe6 <osThreadNew+0xf6>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d104      	bne.n	8010fe6 <osThreadNew+0xf6>
          mem = 0;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fe0:	e001      	b.n	8010fe6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8010fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d110      	bne.n	801100e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010ff4:	9202      	str	r2, [sp, #8]
 8010ff6:	9301      	str	r3, [sp, #4]
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f001 fa9c 	bl	8012540 <xTaskCreateStatic>
 8011008:	4603      	mov	r3, r0
 801100a:	617b      	str	r3, [r7, #20]
 801100c:	e013      	b.n	8011036 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 801100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011010:	2b00      	cmp	r3, #0
 8011012:	d110      	bne.n	8011036 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011016:	b29a      	uxth	r2, r3
 8011018:	f107 0314 	add.w	r3, r7, #20
 801101c:	9301      	str	r3, [sp, #4]
 801101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f001 fae3 	bl	80125f2 <xTaskCreate>
 801102c:	4603      	mov	r3, r0
 801102e:	2b01      	cmp	r3, #1
 8011030:	d001      	beq.n	8011036 <osThreadNew+0x146>
          hTask = NULL;
 8011032:	2300      	movs	r3, #0
 8011034:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011036:	697b      	ldr	r3, [r7, #20]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3738      	adds	r7, #56	; 0x38
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	2000037c 	.word	0x2000037c

08011044 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801104c:	f3ef 8305 	mrs	r3, IPSR
 8011050:	613b      	str	r3, [r7, #16]
  return(result);
 8011052:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011054:	2b00      	cmp	r3, #0
 8011056:	d10f      	bne.n	8011078 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011058:	f3ef 8310 	mrs	r3, PRIMASK
 801105c:	60fb      	str	r3, [r7, #12]
  return(result);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d109      	bne.n	8011078 <osDelay+0x34>
 8011064:	4b0d      	ldr	r3, [pc, #52]	; (801109c <osDelay+0x58>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b02      	cmp	r3, #2
 801106a:	d109      	bne.n	8011080 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801106c:	f3ef 8311 	mrs	r3, BASEPRI
 8011070:	60bb      	str	r3, [r7, #8]
  return(result);
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d003      	beq.n	8011080 <osDelay+0x3c>
    stat = osErrorISR;
 8011078:	f06f 0305 	mvn.w	r3, #5
 801107c:	617b      	str	r3, [r7, #20]
 801107e:	e007      	b.n	8011090 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011080:	2300      	movs	r3, #0
 8011082:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d002      	beq.n	8011090 <osDelay+0x4c>
      vTaskDelay(ticks);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f001 fbf2 	bl	8012874 <vTaskDelay>
    }
  }

  return (stat);
 8011090:	697b      	ldr	r3, [r7, #20]
}
 8011092:	4618      	mov	r0, r3
 8011094:	3718      	adds	r7, #24
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	2000037c 	.word	0x2000037c

080110a0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b08a      	sub	sp, #40	; 0x28
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80110a8:	2300      	movs	r3, #0
 80110aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110ac:	f3ef 8305 	mrs	r3, IPSR
 80110b0:	613b      	str	r3, [r7, #16]
  return(result);
 80110b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	f040 8085 	bne.w	80111c4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110ba:	f3ef 8310 	mrs	r3, PRIMASK
 80110be:	60fb      	str	r3, [r7, #12]
  return(result);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d17e      	bne.n	80111c4 <osMutexNew+0x124>
 80110c6:	4b42      	ldr	r3, [pc, #264]	; (80111d0 <osMutexNew+0x130>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b02      	cmp	r3, #2
 80110cc:	d105      	bne.n	80110da <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80110ce:	f3ef 8311 	mrs	r3, BASEPRI
 80110d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d174      	bne.n	80111c4 <osMutexNew+0x124>
    if (attr != NULL) {
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d003      	beq.n	80110e8 <osMutexNew+0x48>
      type = attr->attr_bits;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	623b      	str	r3, [r7, #32]
 80110e6:	e001      	b.n	80110ec <osMutexNew+0x4c>
    } else {
      type = 0U;
 80110e8:	2300      	movs	r3, #0
 80110ea:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80110ec:	6a3b      	ldr	r3, [r7, #32]
 80110ee:	f003 0301 	and.w	r3, r3, #1
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d002      	beq.n	80110fc <osMutexNew+0x5c>
      rmtx = 1U;
 80110f6:	2301      	movs	r3, #1
 80110f8:	61fb      	str	r3, [r7, #28]
 80110fa:	e001      	b.n	8011100 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80110fc:	2300      	movs	r3, #0
 80110fe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011100:	6a3b      	ldr	r3, [r7, #32]
 8011102:	f003 0308 	and.w	r3, r3, #8
 8011106:	2b00      	cmp	r3, #0
 8011108:	d15c      	bne.n	80111c4 <osMutexNew+0x124>
      mem = -1;
 801110a:	f04f 33ff 	mov.w	r3, #4294967295
 801110e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d015      	beq.n	8011142 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d006      	beq.n	801112c <osMutexNew+0x8c>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	68db      	ldr	r3, [r3, #12]
 8011122:	2b4f      	cmp	r3, #79	; 0x4f
 8011124:	d902      	bls.n	801112c <osMutexNew+0x8c>
          mem = 1;
 8011126:	2301      	movs	r3, #1
 8011128:	61bb      	str	r3, [r7, #24]
 801112a:	e00c      	b.n	8011146 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	689b      	ldr	r3, [r3, #8]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d108      	bne.n	8011146 <osMutexNew+0xa6>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d104      	bne.n	8011146 <osMutexNew+0xa6>
            mem = 0;
 801113c:	2300      	movs	r3, #0
 801113e:	61bb      	str	r3, [r7, #24]
 8011140:	e001      	b.n	8011146 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8011142:	2300      	movs	r3, #0
 8011144:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	2b01      	cmp	r3, #1
 801114a:	d112      	bne.n	8011172 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d007      	beq.n	8011162 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	689b      	ldr	r3, [r3, #8]
 8011156:	4619      	mov	r1, r3
 8011158:	2004      	movs	r0, #4
 801115a:	f000 fbbd 	bl	80118d8 <xQueueCreateMutexStatic>
 801115e:	6278      	str	r0, [r7, #36]	; 0x24
 8011160:	e016      	b.n	8011190 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	4619      	mov	r1, r3
 8011168:	2001      	movs	r0, #1
 801116a:	f000 fbb5 	bl	80118d8 <xQueueCreateMutexStatic>
 801116e:	6278      	str	r0, [r7, #36]	; 0x24
 8011170:	e00e      	b.n	8011190 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8011172:	69bb      	ldr	r3, [r7, #24]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d10b      	bne.n	8011190 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d004      	beq.n	8011188 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801117e:	2004      	movs	r0, #4
 8011180:	f000 fb92 	bl	80118a8 <xQueueCreateMutex>
 8011184:	6278      	str	r0, [r7, #36]	; 0x24
 8011186:	e003      	b.n	8011190 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8011188:	2001      	movs	r0, #1
 801118a:	f000 fb8d 	bl	80118a8 <xQueueCreateMutex>
 801118e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011192:	2b00      	cmp	r3, #0
 8011194:	d00c      	beq.n	80111b0 <osMutexNew+0x110>
        if (attr != NULL) {
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d003      	beq.n	80111a4 <osMutexNew+0x104>
          name = attr->name;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	617b      	str	r3, [r7, #20]
 80111a2:	e001      	b.n	80111a8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80111a4:	2300      	movs	r3, #0
 80111a6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80111a8:	6979      	ldr	r1, [r7, #20]
 80111aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111ac:	f001 f96c 	bl	8012488 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80111b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d006      	beq.n	80111c4 <osMutexNew+0x124>
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d003      	beq.n	80111c4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80111bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111be:	f043 0301 	orr.w	r3, r3, #1
 80111c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80111c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3728      	adds	r7, #40	; 0x28
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	2000037c 	.word	0x2000037c

080111d4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b088      	sub	sp, #32
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f023 0301 	bic.w	r3, r3, #1
 80111e4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80111ee:	2300      	movs	r3, #0
 80111f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111f2:	f3ef 8305 	mrs	r3, IPSR
 80111f6:	613b      	str	r3, [r7, #16]
  return(result);
 80111f8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d10f      	bne.n	801121e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011202:	60fb      	str	r3, [r7, #12]
  return(result);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d109      	bne.n	801121e <osMutexAcquire+0x4a>
 801120a:	4b20      	ldr	r3, [pc, #128]	; (801128c <osMutexAcquire+0xb8>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2b02      	cmp	r3, #2
 8011210:	d109      	bne.n	8011226 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011212:	f3ef 8311 	mrs	r3, BASEPRI
 8011216:	60bb      	str	r3, [r7, #8]
  return(result);
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d003      	beq.n	8011226 <osMutexAcquire+0x52>
    stat = osErrorISR;
 801121e:	f06f 0305 	mvn.w	r3, #5
 8011222:	61fb      	str	r3, [r7, #28]
 8011224:	e02c      	b.n	8011280 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d103      	bne.n	8011234 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 801122c:	f06f 0303 	mvn.w	r3, #3
 8011230:	61fb      	str	r3, [r7, #28]
 8011232:	e025      	b.n	8011280 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d011      	beq.n	801125e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801123a:	6839      	ldr	r1, [r7, #0]
 801123c:	69b8      	ldr	r0, [r7, #24]
 801123e:	f000 fb99 	bl	8011974 <xQueueTakeMutexRecursive>
 8011242:	4603      	mov	r3, r0
 8011244:	2b01      	cmp	r3, #1
 8011246:	d01b      	beq.n	8011280 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d003      	beq.n	8011256 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801124e:	f06f 0301 	mvn.w	r3, #1
 8011252:	61fb      	str	r3, [r7, #28]
 8011254:	e014      	b.n	8011280 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8011256:	f06f 0302 	mvn.w	r3, #2
 801125a:	61fb      	str	r3, [r7, #28]
 801125c:	e010      	b.n	8011280 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801125e:	6839      	ldr	r1, [r7, #0]
 8011260:	69b8      	ldr	r0, [r7, #24]
 8011262:	f000 fee1 	bl	8012028 <xQueueSemaphoreTake>
 8011266:	4603      	mov	r3, r0
 8011268:	2b01      	cmp	r3, #1
 801126a:	d009      	beq.n	8011280 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d003      	beq.n	801127a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8011272:	f06f 0301 	mvn.w	r3, #1
 8011276:	61fb      	str	r3, [r7, #28]
 8011278:	e002      	b.n	8011280 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801127a:	f06f 0302 	mvn.w	r3, #2
 801127e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011280:	69fb      	ldr	r3, [r7, #28]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3720      	adds	r7, #32
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	2000037c 	.word	0x2000037c

08011290 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011290:	b580      	push	{r7, lr}
 8011292:	b088      	sub	sp, #32
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f023 0301 	bic.w	r3, r3, #1
 801129e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f003 0301 	and.w	r3, r3, #1
 80112a6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80112a8:	2300      	movs	r3, #0
 80112aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112ac:	f3ef 8305 	mrs	r3, IPSR
 80112b0:	613b      	str	r3, [r7, #16]
  return(result);
 80112b2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d10f      	bne.n	80112d8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112b8:	f3ef 8310 	mrs	r3, PRIMASK
 80112bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d109      	bne.n	80112d8 <osMutexRelease+0x48>
 80112c4:	4b19      	ldr	r3, [pc, #100]	; (801132c <osMutexRelease+0x9c>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d109      	bne.n	80112e0 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80112cc:	f3ef 8311 	mrs	r3, BASEPRI
 80112d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d003      	beq.n	80112e0 <osMutexRelease+0x50>
    stat = osErrorISR;
 80112d8:	f06f 0305 	mvn.w	r3, #5
 80112dc:	61fb      	str	r3, [r7, #28]
 80112de:	e01f      	b.n	8011320 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d103      	bne.n	80112ee <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80112e6:	f06f 0303 	mvn.w	r3, #3
 80112ea:	61fb      	str	r3, [r7, #28]
 80112ec:	e018      	b.n	8011320 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d009      	beq.n	8011308 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80112f4:	69b8      	ldr	r0, [r7, #24]
 80112f6:	f000 fb0a 	bl	801190e <xQueueGiveMutexRecursive>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	d00f      	beq.n	8011320 <osMutexRelease+0x90>
        stat = osErrorResource;
 8011300:	f06f 0302 	mvn.w	r3, #2
 8011304:	61fb      	str	r3, [r7, #28]
 8011306:	e00b      	b.n	8011320 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8011308:	2300      	movs	r3, #0
 801130a:	2200      	movs	r2, #0
 801130c:	2100      	movs	r1, #0
 801130e:	69b8      	ldr	r0, [r7, #24]
 8011310:	f000 fb96 	bl	8011a40 <xQueueGenericSend>
 8011314:	4603      	mov	r3, r0
 8011316:	2b01      	cmp	r3, #1
 8011318:	d002      	beq.n	8011320 <osMutexRelease+0x90>
        stat = osErrorResource;
 801131a:	f06f 0302 	mvn.w	r3, #2
 801131e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8011320:	69fb      	ldr	r3, [r7, #28]
}
 8011322:	4618      	mov	r0, r3
 8011324:	3720      	adds	r7, #32
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	2000037c 	.word	0x2000037c

08011330 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011330:	b580      	push	{r7, lr}
 8011332:	b08c      	sub	sp, #48	; 0x30
 8011334:	af02      	add	r7, sp, #8
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801133c:	2300      	movs	r3, #0
 801133e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011340:	f3ef 8305 	mrs	r3, IPSR
 8011344:	61bb      	str	r3, [r7, #24]
  return(result);
 8011346:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011348:	2b00      	cmp	r3, #0
 801134a:	d170      	bne.n	801142e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801134c:	f3ef 8310 	mrs	r3, PRIMASK
 8011350:	617b      	str	r3, [r7, #20]
  return(result);
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d16a      	bne.n	801142e <osMessageQueueNew+0xfe>
 8011358:	4b37      	ldr	r3, [pc, #220]	; (8011438 <osMessageQueueNew+0x108>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	2b02      	cmp	r3, #2
 801135e:	d105      	bne.n	801136c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011360:	f3ef 8311 	mrs	r3, BASEPRI
 8011364:	613b      	str	r3, [r7, #16]
  return(result);
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d160      	bne.n	801142e <osMessageQueueNew+0xfe>
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d05d      	beq.n	801142e <osMessageQueueNew+0xfe>
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d05a      	beq.n	801142e <osMessageQueueNew+0xfe>
    mem = -1;
 8011378:	f04f 33ff 	mov.w	r3, #4294967295
 801137c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d029      	beq.n	80113d8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d012      	beq.n	80113b2 <osMessageQueueNew+0x82>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	2b4f      	cmp	r3, #79	; 0x4f
 8011392:	d90e      	bls.n	80113b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00a      	beq.n	80113b2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	695a      	ldr	r2, [r3, #20]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	68b9      	ldr	r1, [r7, #8]
 80113a4:	fb01 f303 	mul.w	r3, r1, r3
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d302      	bcc.n	80113b2 <osMessageQueueNew+0x82>
        mem = 1;
 80113ac:	2301      	movs	r3, #1
 80113ae:	623b      	str	r3, [r7, #32]
 80113b0:	e014      	b.n	80113dc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d110      	bne.n	80113dc <osMessageQueueNew+0xac>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d10c      	bne.n	80113dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d108      	bne.n	80113dc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	695b      	ldr	r3, [r3, #20]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d104      	bne.n	80113dc <osMessageQueueNew+0xac>
          mem = 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	623b      	str	r3, [r7, #32]
 80113d6:	e001      	b.n	80113dc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80113d8:	2300      	movs	r3, #0
 80113da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80113dc:	6a3b      	ldr	r3, [r7, #32]
 80113de:	2b01      	cmp	r3, #1
 80113e0:	d10c      	bne.n	80113fc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	691a      	ldr	r2, [r3, #16]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6899      	ldr	r1, [r3, #8]
 80113ea:	2300      	movs	r3, #0
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	460b      	mov	r3, r1
 80113f0:	68b9      	ldr	r1, [r7, #8]
 80113f2:	68f8      	ldr	r0, [r7, #12]
 80113f4:	f000 f96c 	bl	80116d0 <xQueueGenericCreateStatic>
 80113f8:	6278      	str	r0, [r7, #36]	; 0x24
 80113fa:	e008      	b.n	801140e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80113fc:	6a3b      	ldr	r3, [r7, #32]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d105      	bne.n	801140e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011402:	2200      	movs	r2, #0
 8011404:	68b9      	ldr	r1, [r7, #8]
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f000 f9d4 	bl	80117b4 <xQueueGenericCreate>
 801140c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00c      	beq.n	801142e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d003      	beq.n	8011422 <osMessageQueueNew+0xf2>
        name = attr->name;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	61fb      	str	r3, [r7, #28]
 8011420:	e001      	b.n	8011426 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8011422:	2300      	movs	r3, #0
 8011424:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8011426:	69f9      	ldr	r1, [r7, #28]
 8011428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801142a:	f001 f82d 	bl	8012488 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011430:	4618      	mov	r0, r3
 8011432:	3728      	adds	r7, #40	; 0x28
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	2000037c 	.word	0x2000037c

0801143c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801143c:	b480      	push	{r7}
 801143e:	b085      	sub	sp, #20
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	4a06      	ldr	r2, [pc, #24]	; (8011464 <vApplicationGetIdleTaskMemory+0x28>)
 801144c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	4a05      	ldr	r2, [pc, #20]	; (8011468 <vApplicationGetIdleTaskMemory+0x2c>)
 8011452:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2280      	movs	r2, #128	; 0x80
 8011458:	601a      	str	r2, [r3, #0]
}
 801145a:	bf00      	nop
 801145c:	3714      	adds	r7, #20
 801145e:	46bd      	mov	sp, r7
 8011460:	bc80      	pop	{r7}
 8011462:	4770      	bx	lr
 8011464:	20000380 	.word	0x20000380
 8011468:	200003e4 	.word	0x200003e4

0801146c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801146c:	b480      	push	{r7}
 801146e:	b085      	sub	sp, #20
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	4a07      	ldr	r2, [pc, #28]	; (8011498 <vApplicationGetTimerTaskMemory+0x2c>)
 801147c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	4a06      	ldr	r2, [pc, #24]	; (801149c <vApplicationGetTimerTaskMemory+0x30>)
 8011482:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f44f 7280 	mov.w	r2, #256	; 0x100
 801148a:	601a      	str	r2, [r3, #0]
}
 801148c:	bf00      	nop
 801148e:	3714      	adds	r7, #20
 8011490:	46bd      	mov	sp, r7
 8011492:	bc80      	pop	{r7}
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	200005e4 	.word	0x200005e4
 801149c:	20000648 	.word	0x20000648

080114a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f103 0208 	add.w	r2, r3, #8
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f04f 32ff 	mov.w	r2, #4294967295
 80114b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f103 0208 	add.w	r2, r3, #8
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f103 0208 	add.w	r2, r3, #8
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80114d4:	bf00      	nop
 80114d6:	370c      	adds	r7, #12
 80114d8:	46bd      	mov	sp, r7
 80114da:	bc80      	pop	{r7}
 80114dc:	4770      	bx	lr

080114de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80114de:	b480      	push	{r7}
 80114e0:	b083      	sub	sp, #12
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2200      	movs	r2, #0
 80114ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80114ec:	bf00      	nop
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bc80      	pop	{r7}
 80114f4:	4770      	bx	lr

080114f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80114f6:	b480      	push	{r7}
 80114f8:	b085      	sub	sp, #20
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
 80114fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	689a      	ldr	r2, [r3, #8]
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	683a      	ldr	r2, [r7, #0]
 801151a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	683a      	ldr	r2, [r7, #0]
 8011520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	1c5a      	adds	r2, r3, #1
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	601a      	str	r2, [r3, #0]
}
 8011532:	bf00      	nop
 8011534:	3714      	adds	r7, #20
 8011536:	46bd      	mov	sp, r7
 8011538:	bc80      	pop	{r7}
 801153a:	4770      	bx	lr

0801153c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801153c:	b480      	push	{r7}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011552:	d103      	bne.n	801155c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	691b      	ldr	r3, [r3, #16]
 8011558:	60fb      	str	r3, [r7, #12]
 801155a:	e00c      	b.n	8011576 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	3308      	adds	r3, #8
 8011560:	60fb      	str	r3, [r7, #12]
 8011562:	e002      	b.n	801156a <vListInsert+0x2e>
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	60fb      	str	r3, [r7, #12]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	429a      	cmp	r2, r3
 8011574:	d2f6      	bcs.n	8011564 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	685a      	ldr	r2, [r3, #4]
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	683a      	ldr	r2, [r7, #0]
 8011584:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	683a      	ldr	r2, [r7, #0]
 8011590:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	1c5a      	adds	r2, r3, #1
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	601a      	str	r2, [r3, #0]
}
 80115a2:	bf00      	nop
 80115a4:	3714      	adds	r7, #20
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bc80      	pop	{r7}
 80115aa:	4770      	bx	lr

080115ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80115ac:	b480      	push	{r7}
 80115ae:	b085      	sub	sp, #20
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	6892      	ldr	r2, [r2, #8]
 80115c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	689b      	ldr	r3, [r3, #8]
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	6852      	ldr	r2, [r2, #4]
 80115cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d103      	bne.n	80115e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	689a      	ldr	r2, [r3, #8]
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	1e5a      	subs	r2, r3, #1
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bc80      	pop	{r7}
 80115fc:	4770      	bx	lr
	...

08011600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d109      	bne.n	8011628 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011618:	f383 8811 	msr	BASEPRI, r3
 801161c:	f3bf 8f6f 	isb	sy
 8011620:	f3bf 8f4f 	dsb	sy
 8011624:	60bb      	str	r3, [r7, #8]
 8011626:	e7fe      	b.n	8011626 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011628:	f002 fb9e 	bl	8013d68 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011634:	68f9      	ldr	r1, [r7, #12]
 8011636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011638:	fb01 f303 	mul.w	r3, r1, r3
 801163c:	441a      	add	r2, r3
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2200      	movs	r2, #0
 8011646:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011658:	3b01      	subs	r3, #1
 801165a:	68f9      	ldr	r1, [r7, #12]
 801165c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801165e:	fb01 f303 	mul.w	r3, r1, r3
 8011662:	441a      	add	r2, r3
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	22ff      	movs	r2, #255	; 0xff
 801166c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	22ff      	movs	r2, #255	; 0xff
 8011674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d114      	bne.n	80116a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d01a      	beq.n	80116bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	3310      	adds	r3, #16
 801168a:	4618      	mov	r0, r3
 801168c:	f001 fbc8 	bl	8012e20 <xTaskRemoveFromEventList>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d012      	beq.n	80116bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011696:	4b0d      	ldr	r3, [pc, #52]	; (80116cc <xQueueGenericReset+0xcc>)
 8011698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	f3bf 8f4f 	dsb	sy
 80116a2:	f3bf 8f6f 	isb	sy
 80116a6:	e009      	b.n	80116bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	3310      	adds	r3, #16
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7ff fef7 	bl	80114a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	3324      	adds	r3, #36	; 0x24
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7ff fef2 	bl	80114a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80116bc:	f002 fb82 	bl	8013dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80116c0:	2301      	movs	r3, #1
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3710      	adds	r7, #16
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	e000ed04 	.word	0xe000ed04

080116d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b08e      	sub	sp, #56	; 0x38
 80116d4:	af02      	add	r7, sp, #8
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d109      	bne.n	80116f8 <xQueueGenericCreateStatic+0x28>
 80116e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e8:	f383 8811 	msr	BASEPRI, r3
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80116f6:	e7fe      	b.n	80116f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d109      	bne.n	8011712 <xQueueGenericCreateStatic+0x42>
 80116fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011702:	f383 8811 	msr	BASEPRI, r3
 8011706:	f3bf 8f6f 	isb	sy
 801170a:	f3bf 8f4f 	dsb	sy
 801170e:	627b      	str	r3, [r7, #36]	; 0x24
 8011710:	e7fe      	b.n	8011710 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d002      	beq.n	801171e <xQueueGenericCreateStatic+0x4e>
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d001      	beq.n	8011722 <xQueueGenericCreateStatic+0x52>
 801171e:	2301      	movs	r3, #1
 8011720:	e000      	b.n	8011724 <xQueueGenericCreateStatic+0x54>
 8011722:	2300      	movs	r3, #0
 8011724:	2b00      	cmp	r3, #0
 8011726:	d109      	bne.n	801173c <xQueueGenericCreateStatic+0x6c>
 8011728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172c:	f383 8811 	msr	BASEPRI, r3
 8011730:	f3bf 8f6f 	isb	sy
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	623b      	str	r3, [r7, #32]
 801173a:	e7fe      	b.n	801173a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d102      	bne.n	8011748 <xQueueGenericCreateStatic+0x78>
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d101      	bne.n	801174c <xQueueGenericCreateStatic+0x7c>
 8011748:	2301      	movs	r3, #1
 801174a:	e000      	b.n	801174e <xQueueGenericCreateStatic+0x7e>
 801174c:	2300      	movs	r3, #0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d109      	bne.n	8011766 <xQueueGenericCreateStatic+0x96>
 8011752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011756:	f383 8811 	msr	BASEPRI, r3
 801175a:	f3bf 8f6f 	isb	sy
 801175e:	f3bf 8f4f 	dsb	sy
 8011762:	61fb      	str	r3, [r7, #28]
 8011764:	e7fe      	b.n	8011764 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011766:	2350      	movs	r3, #80	; 0x50
 8011768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	2b50      	cmp	r3, #80	; 0x50
 801176e:	d009      	beq.n	8011784 <xQueueGenericCreateStatic+0xb4>
 8011770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011774:	f383 8811 	msr	BASEPRI, r3
 8011778:	f3bf 8f6f 	isb	sy
 801177c:	f3bf 8f4f 	dsb	sy
 8011780:	61bb      	str	r3, [r7, #24]
 8011782:	e7fe      	b.n	8011782 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178a:	2b00      	cmp	r3, #0
 801178c:	d00d      	beq.n	80117aa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011790:	2201      	movs	r2, #1
 8011792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179c:	9300      	str	r3, [sp, #0]
 801179e:	4613      	mov	r3, r2
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	68b9      	ldr	r1, [r7, #8]
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f000 f842 	bl	801182e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80117aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3730      	adds	r7, #48	; 0x30
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b08a      	sub	sp, #40	; 0x28
 80117b8:	af02      	add	r7, sp, #8
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	4613      	mov	r3, r2
 80117c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d109      	bne.n	80117dc <xQueueGenericCreate+0x28>
 80117c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117cc:	f383 8811 	msr	BASEPRI, r3
 80117d0:	f3bf 8f6f 	isb	sy
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	613b      	str	r3, [r7, #16]
 80117da:	e7fe      	b.n	80117da <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d102      	bne.n	80117e8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80117e2:	2300      	movs	r3, #0
 80117e4:	61fb      	str	r3, [r7, #28]
 80117e6:	e004      	b.n	80117f2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	68ba      	ldr	r2, [r7, #8]
 80117ec:	fb02 f303 	mul.w	r3, r2, r3
 80117f0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	3350      	adds	r3, #80	; 0x50
 80117f6:	4618      	mov	r0, r3
 80117f8:	f002 fbac 	bl	8013f54 <pvPortMalloc>
 80117fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00f      	beq.n	8011824 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	3350      	adds	r3, #80	; 0x50
 8011808:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	2200      	movs	r2, #0
 801180e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011812:	79fa      	ldrb	r2, [r7, #7]
 8011814:	69bb      	ldr	r3, [r7, #24]
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	4613      	mov	r3, r2
 801181a:	697a      	ldr	r2, [r7, #20]
 801181c:	68b9      	ldr	r1, [r7, #8]
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	f000 f805 	bl	801182e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011824:	69bb      	ldr	r3, [r7, #24]
	}
 8011826:	4618      	mov	r0, r3
 8011828:	3720      	adds	r7, #32
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}

0801182e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801182e:	b580      	push	{r7, lr}
 8011830:	b084      	sub	sp, #16
 8011832:	af00      	add	r7, sp, #0
 8011834:	60f8      	str	r0, [r7, #12]
 8011836:	60b9      	str	r1, [r7, #8]
 8011838:	607a      	str	r2, [r7, #4]
 801183a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d103      	bne.n	801184a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	69ba      	ldr	r2, [r7, #24]
 8011846:	601a      	str	r2, [r3, #0]
 8011848:	e002      	b.n	8011850 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801185c:	2101      	movs	r1, #1
 801185e:	69b8      	ldr	r0, [r7, #24]
 8011860:	f7ff fece 	bl	8011600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	78fa      	ldrb	r2, [r7, #3]
 8011868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801186c:	bf00      	nop
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d00e      	beq.n	80118a0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2200      	movs	r2, #0
 8011886:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2200      	movs	r2, #0
 8011892:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011894:	2300      	movs	r3, #0
 8011896:	2200      	movs	r2, #0
 8011898:	2100      	movs	r1, #0
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f8d0 	bl	8011a40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80118a0:	bf00      	nop
 80118a2:	3708      	adds	r7, #8
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b086      	sub	sp, #24
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	4603      	mov	r3, r0
 80118b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80118b2:	2301      	movs	r3, #1
 80118b4:	617b      	str	r3, [r7, #20]
 80118b6:	2300      	movs	r3, #0
 80118b8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80118ba:	79fb      	ldrb	r3, [r7, #7]
 80118bc:	461a      	mov	r2, r3
 80118be:	6939      	ldr	r1, [r7, #16]
 80118c0:	6978      	ldr	r0, [r7, #20]
 80118c2:	f7ff ff77 	bl	80117b4 <xQueueGenericCreate>
 80118c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f7ff ffd3 	bl	8011874 <prvInitialiseMutex>

		return pxNewQueue;
 80118ce:	68fb      	ldr	r3, [r7, #12]
	}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3718      	adds	r7, #24
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b088      	sub	sp, #32
 80118dc:	af02      	add	r7, sp, #8
 80118de:	4603      	mov	r3, r0
 80118e0:	6039      	str	r1, [r7, #0]
 80118e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80118e4:	2301      	movs	r3, #1
 80118e6:	617b      	str	r3, [r7, #20]
 80118e8:	2300      	movs	r3, #0
 80118ea:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80118ec:	79fb      	ldrb	r3, [r7, #7]
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2200      	movs	r2, #0
 80118f4:	6939      	ldr	r1, [r7, #16]
 80118f6:	6978      	ldr	r0, [r7, #20]
 80118f8:	f7ff feea 	bl	80116d0 <xQueueGenericCreateStatic>
 80118fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f7ff ffb8 	bl	8011874 <prvInitialiseMutex>

		return pxNewQueue;
 8011904:	68fb      	ldr	r3, [r7, #12]
	}
 8011906:	4618      	mov	r0, r3
 8011908:	3718      	adds	r7, #24
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801190e:	b590      	push	{r4, r7, lr}
 8011910:	b087      	sub	sp, #28
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d109      	bne.n	8011934 <xQueueGiveMutexRecursive+0x26>
 8011920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	60fb      	str	r3, [r7, #12]
 8011932:	e7fe      	b.n	8011932 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	685c      	ldr	r4, [r3, #4]
 8011938:	f001 fc2c 	bl	8013194 <xTaskGetCurrentTaskHandle>
 801193c:	4603      	mov	r3, r0
 801193e:	429c      	cmp	r4, r3
 8011940:	d111      	bne.n	8011966 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	1e5a      	subs	r2, r3, #1
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d105      	bne.n	8011960 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011954:	2300      	movs	r3, #0
 8011956:	2200      	movs	r2, #0
 8011958:	2100      	movs	r1, #0
 801195a:	6938      	ldr	r0, [r7, #16]
 801195c:	f000 f870 	bl	8011a40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011960:	2301      	movs	r3, #1
 8011962:	617b      	str	r3, [r7, #20]
 8011964:	e001      	b.n	801196a <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011966:	2300      	movs	r3, #0
 8011968:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801196a:	697b      	ldr	r3, [r7, #20]
	}
 801196c:	4618      	mov	r0, r3
 801196e:	371c      	adds	r7, #28
 8011970:	46bd      	mov	sp, r7
 8011972:	bd90      	pop	{r4, r7, pc}

08011974 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011974:	b590      	push	{r4, r7, lr}
 8011976:	b087      	sub	sp, #28
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d109      	bne.n	801199c <xQueueTakeMutexRecursive+0x28>
 8011988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198c:	f383 8811 	msr	BASEPRI, r3
 8011990:	f3bf 8f6f 	isb	sy
 8011994:	f3bf 8f4f 	dsb	sy
 8011998:	60fb      	str	r3, [r7, #12]
 801199a:	e7fe      	b.n	801199a <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	685c      	ldr	r4, [r3, #4]
 80119a0:	f001 fbf8 	bl	8013194 <xTaskGetCurrentTaskHandle>
 80119a4:	4603      	mov	r3, r0
 80119a6:	429c      	cmp	r4, r3
 80119a8:	d107      	bne.n	80119ba <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	1c5a      	adds	r2, r3, #1
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80119b4:	2301      	movs	r3, #1
 80119b6:	617b      	str	r3, [r7, #20]
 80119b8:	e00c      	b.n	80119d4 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80119ba:	6839      	ldr	r1, [r7, #0]
 80119bc:	6938      	ldr	r0, [r7, #16]
 80119be:	f000 fb33 	bl	8012028 <xQueueSemaphoreTake>
 80119c2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d004      	beq.n	80119d4 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	1c5a      	adds	r2, r3, #1
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80119d4:	697b      	ldr	r3, [r7, #20]
	}
 80119d6:	4618      	mov	r0, r3
 80119d8:	371c      	adds	r7, #28
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd90      	pop	{r4, r7, pc}

080119de <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b086      	sub	sp, #24
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d109      	bne.n	8011a02 <xQueueCreateCountingSemaphore+0x24>
 80119ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f2:	f383 8811 	msr	BASEPRI, r3
 80119f6:	f3bf 8f6f 	isb	sy
 80119fa:	f3bf 8f4f 	dsb	sy
 80119fe:	613b      	str	r3, [r7, #16]
 8011a00:	e7fe      	b.n	8011a00 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011a02:	683a      	ldr	r2, [r7, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d909      	bls.n	8011a1e <xQueueCreateCountingSemaphore+0x40>
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	60fb      	str	r3, [r7, #12]
 8011a1c:	e7fe      	b.n	8011a1c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011a1e:	2202      	movs	r2, #2
 8011a20:	2100      	movs	r1, #0
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f7ff fec6 	bl	80117b4 <xQueueGenericCreate>
 8011a28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d002      	beq.n	8011a36 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	683a      	ldr	r2, [r7, #0]
 8011a34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011a36:	697b      	ldr	r3, [r7, #20]
	}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3718      	adds	r7, #24
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b08e      	sub	sp, #56	; 0x38
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	607a      	str	r2, [r7, #4]
 8011a4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d109      	bne.n	8011a70 <xQueueGenericSend+0x30>
 8011a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a60:	f383 8811 	msr	BASEPRI, r3
 8011a64:	f3bf 8f6f 	isb	sy
 8011a68:	f3bf 8f4f 	dsb	sy
 8011a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a6e:	e7fe      	b.n	8011a6e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d103      	bne.n	8011a7e <xQueueGenericSend+0x3e>
 8011a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d101      	bne.n	8011a82 <xQueueGenericSend+0x42>
 8011a7e:	2301      	movs	r3, #1
 8011a80:	e000      	b.n	8011a84 <xQueueGenericSend+0x44>
 8011a82:	2300      	movs	r3, #0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d109      	bne.n	8011a9c <xQueueGenericSend+0x5c>
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	627b      	str	r3, [r7, #36]	; 0x24
 8011a9a:	e7fe      	b.n	8011a9a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	2b02      	cmp	r3, #2
 8011aa0:	d103      	bne.n	8011aaa <xQueueGenericSend+0x6a>
 8011aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d101      	bne.n	8011aae <xQueueGenericSend+0x6e>
 8011aaa:	2301      	movs	r3, #1
 8011aac:	e000      	b.n	8011ab0 <xQueueGenericSend+0x70>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d109      	bne.n	8011ac8 <xQueueGenericSend+0x88>
 8011ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab8:	f383 8811 	msr	BASEPRI, r3
 8011abc:	f3bf 8f6f 	isb	sy
 8011ac0:	f3bf 8f4f 	dsb	sy
 8011ac4:	623b      	str	r3, [r7, #32]
 8011ac6:	e7fe      	b.n	8011ac6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ac8:	f001 fb72 	bl	80131b0 <xTaskGetSchedulerState>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d102      	bne.n	8011ad8 <xQueueGenericSend+0x98>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d101      	bne.n	8011adc <xQueueGenericSend+0x9c>
 8011ad8:	2301      	movs	r3, #1
 8011ada:	e000      	b.n	8011ade <xQueueGenericSend+0x9e>
 8011adc:	2300      	movs	r3, #0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d109      	bne.n	8011af6 <xQueueGenericSend+0xb6>
 8011ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae6:	f383 8811 	msr	BASEPRI, r3
 8011aea:	f3bf 8f6f 	isb	sy
 8011aee:	f3bf 8f4f 	dsb	sy
 8011af2:	61fb      	str	r3, [r7, #28]
 8011af4:	e7fe      	b.n	8011af4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011af6:	f002 f937 	bl	8013d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d302      	bcc.n	8011b0c <xQueueGenericSend+0xcc>
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	2b02      	cmp	r3, #2
 8011b0a:	d129      	bne.n	8011b60 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b0c:	683a      	ldr	r2, [r7, #0]
 8011b0e:	68b9      	ldr	r1, [r7, #8]
 8011b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b12:	f000 fba8 	bl	8012266 <prvCopyDataToQueue>
 8011b16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d010      	beq.n	8011b42 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b22:	3324      	adds	r3, #36	; 0x24
 8011b24:	4618      	mov	r0, r3
 8011b26:	f001 f97b 	bl	8012e20 <xTaskRemoveFromEventList>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d013      	beq.n	8011b58 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011b30:	4b3f      	ldr	r3, [pc, #252]	; (8011c30 <xQueueGenericSend+0x1f0>)
 8011b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b36:	601a      	str	r2, [r3, #0]
 8011b38:	f3bf 8f4f 	dsb	sy
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	e00a      	b.n	8011b58 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d007      	beq.n	8011b58 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011b48:	4b39      	ldr	r3, [pc, #228]	; (8011c30 <xQueueGenericSend+0x1f0>)
 8011b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b4e:	601a      	str	r2, [r3, #0]
 8011b50:	f3bf 8f4f 	dsb	sy
 8011b54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011b58:	f002 f934 	bl	8013dc4 <vPortExitCritical>
				return pdPASS;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e063      	b.n	8011c28 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d103      	bne.n	8011b6e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b66:	f002 f92d 	bl	8013dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	e05c      	b.n	8011c28 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d106      	bne.n	8011b82 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b74:	f107 0314 	add.w	r3, r7, #20
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f001 f9b3 	bl	8012ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b82:	f002 f91f 	bl	8013dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b86:	f000 ff0f 	bl	80129a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b8a:	f002 f8ed 	bl	8013d68 <vPortEnterCritical>
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b94:	b25b      	sxtb	r3, r3
 8011b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b9a:	d103      	bne.n	8011ba4 <xQueueGenericSend+0x164>
 8011b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011baa:	b25b      	sxtb	r3, r3
 8011bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb0:	d103      	bne.n	8011bba <xQueueGenericSend+0x17a>
 8011bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bba:	f002 f903 	bl	8013dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bbe:	1d3a      	adds	r2, r7, #4
 8011bc0:	f107 0314 	add.w	r3, r7, #20
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f001 f9a2 	bl	8012f10 <xTaskCheckForTimeOut>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d124      	bne.n	8011c1c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bd4:	f000 fc3f 	bl	8012456 <prvIsQueueFull>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d018      	beq.n	8011c10 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be0:	3310      	adds	r3, #16
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	4611      	mov	r1, r2
 8011be6:	4618      	mov	r0, r3
 8011be8:	f001 f8cc 	bl	8012d84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bee:	f000 fbca 	bl	8012386 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011bf2:	f000 fee7 	bl	80129c4 <xTaskResumeAll>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f47f af7c 	bne.w	8011af6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011bfe:	4b0c      	ldr	r3, [pc, #48]	; (8011c30 <xQueueGenericSend+0x1f0>)
 8011c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c04:	601a      	str	r2, [r3, #0]
 8011c06:	f3bf 8f4f 	dsb	sy
 8011c0a:	f3bf 8f6f 	isb	sy
 8011c0e:	e772      	b.n	8011af6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c12:	f000 fbb8 	bl	8012386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c16:	f000 fed5 	bl	80129c4 <xTaskResumeAll>
 8011c1a:	e76c      	b.n	8011af6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c1e:	f000 fbb2 	bl	8012386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c22:	f000 fecf 	bl	80129c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011c26:	2300      	movs	r3, #0
		}
	}
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3738      	adds	r7, #56	; 0x38
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	e000ed04 	.word	0xe000ed04

08011c34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b08e      	sub	sp, #56	; 0x38
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d109      	bne.n	8011c60 <xQueueGenericSendFromISR+0x2c>
 8011c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c50:	f383 8811 	msr	BASEPRI, r3
 8011c54:	f3bf 8f6f 	isb	sy
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8011c5e:	e7fe      	b.n	8011c5e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d103      	bne.n	8011c6e <xQueueGenericSendFromISR+0x3a>
 8011c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d101      	bne.n	8011c72 <xQueueGenericSendFromISR+0x3e>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	e000      	b.n	8011c74 <xQueueGenericSendFromISR+0x40>
 8011c72:	2300      	movs	r3, #0
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d109      	bne.n	8011c8c <xQueueGenericSendFromISR+0x58>
 8011c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7c:	f383 8811 	msr	BASEPRI, r3
 8011c80:	f3bf 8f6f 	isb	sy
 8011c84:	f3bf 8f4f 	dsb	sy
 8011c88:	623b      	str	r3, [r7, #32]
 8011c8a:	e7fe      	b.n	8011c8a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	2b02      	cmp	r3, #2
 8011c90:	d103      	bne.n	8011c9a <xQueueGenericSendFromISR+0x66>
 8011c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d101      	bne.n	8011c9e <xQueueGenericSendFromISR+0x6a>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e000      	b.n	8011ca0 <xQueueGenericSendFromISR+0x6c>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d109      	bne.n	8011cb8 <xQueueGenericSendFromISR+0x84>
 8011ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca8:	f383 8811 	msr	BASEPRI, r3
 8011cac:	f3bf 8f6f 	isb	sy
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	61fb      	str	r3, [r7, #28]
 8011cb6:	e7fe      	b.n	8011cb6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cb8:	f002 f910 	bl	8013edc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011cbc:	f3ef 8211 	mrs	r2, BASEPRI
 8011cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc4:	f383 8811 	msr	BASEPRI, r3
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	61ba      	str	r2, [r7, #24]
 8011cd2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011cd4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d302      	bcc.n	8011cea <xQueueGenericSendFromISR+0xb6>
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	2b02      	cmp	r3, #2
 8011ce8:	d12c      	bne.n	8011d44 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011cf4:	683a      	ldr	r2, [r7, #0]
 8011cf6:	68b9      	ldr	r1, [r7, #8]
 8011cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cfa:	f000 fab4 	bl	8012266 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011cfe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d06:	d112      	bne.n	8011d2e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d016      	beq.n	8011d3e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d12:	3324      	adds	r3, #36	; 0x24
 8011d14:	4618      	mov	r0, r3
 8011d16:	f001 f883 	bl	8012e20 <xTaskRemoveFromEventList>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00e      	beq.n	8011d3e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00b      	beq.n	8011d3e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	601a      	str	r2, [r3, #0]
 8011d2c:	e007      	b.n	8011d3e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011d32:	3301      	adds	r3, #1
 8011d34:	b2db      	uxtb	r3, r3
 8011d36:	b25a      	sxtb	r2, r3
 8011d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011d3e:	2301      	movs	r3, #1
 8011d40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011d42:	e001      	b.n	8011d48 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d44:	2300      	movs	r3, #0
 8011d46:	637b      	str	r3, [r7, #52]	; 0x34
 8011d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3738      	adds	r7, #56	; 0x38
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08e      	sub	sp, #56	; 0x38
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d109      	bne.n	8011d84 <xQueueGiveFromISR+0x28>
	__asm volatile
 8011d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d74:	f383 8811 	msr	BASEPRI, r3
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	623b      	str	r3, [r7, #32]
 8011d82:	e7fe      	b.n	8011d82 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d009      	beq.n	8011da0 <xQueueGiveFromISR+0x44>
 8011d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d90:	f383 8811 	msr	BASEPRI, r3
 8011d94:	f3bf 8f6f 	isb	sy
 8011d98:	f3bf 8f4f 	dsb	sy
 8011d9c:	61fb      	str	r3, [r7, #28]
 8011d9e:	e7fe      	b.n	8011d9e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d103      	bne.n	8011db0 <xQueueGiveFromISR+0x54>
 8011da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d101      	bne.n	8011db4 <xQueueGiveFromISR+0x58>
 8011db0:	2301      	movs	r3, #1
 8011db2:	e000      	b.n	8011db6 <xQueueGiveFromISR+0x5a>
 8011db4:	2300      	movs	r3, #0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d109      	bne.n	8011dce <xQueueGiveFromISR+0x72>
 8011dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dbe:	f383 8811 	msr	BASEPRI, r3
 8011dc2:	f3bf 8f6f 	isb	sy
 8011dc6:	f3bf 8f4f 	dsb	sy
 8011dca:	61bb      	str	r3, [r7, #24]
 8011dcc:	e7fe      	b.n	8011dcc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dce:	f002 f885 	bl	8013edc <vPortValidateInterruptPriority>
	__asm volatile
 8011dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8011dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dda:	f383 8811 	msr	BASEPRI, r3
 8011dde:	f3bf 8f6f 	isb	sy
 8011de2:	f3bf 8f4f 	dsb	sy
 8011de6:	617a      	str	r2, [r7, #20]
 8011de8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011dea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011df2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d22b      	bcs.n	8011e56 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	1c5a      	adds	r2, r3, #1
 8011e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e18:	d112      	bne.n	8011e40 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d016      	beq.n	8011e50 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e24:	3324      	adds	r3, #36	; 0x24
 8011e26:	4618      	mov	r0, r3
 8011e28:	f000 fffa 	bl	8012e20 <xTaskRemoveFromEventList>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00e      	beq.n	8011e50 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00b      	beq.n	8011e50 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	601a      	str	r2, [r3, #0]
 8011e3e:	e007      	b.n	8011e50 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e44:	3301      	adds	r3, #1
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	b25a      	sxtb	r2, r3
 8011e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011e50:	2301      	movs	r3, #1
 8011e52:	637b      	str	r3, [r7, #52]	; 0x34
 8011e54:	e001      	b.n	8011e5a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011e56:	2300      	movs	r3, #0
 8011e58:	637b      	str	r3, [r7, #52]	; 0x34
 8011e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3738      	adds	r7, #56	; 0x38
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
	...

08011e70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b08c      	sub	sp, #48	; 0x30
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d109      	bne.n	8011e9e <xQueueReceive+0x2e>
	__asm volatile
 8011e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8e:	f383 8811 	msr	BASEPRI, r3
 8011e92:	f3bf 8f6f 	isb	sy
 8011e96:	f3bf 8f4f 	dsb	sy
 8011e9a:	623b      	str	r3, [r7, #32]
 8011e9c:	e7fe      	b.n	8011e9c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d103      	bne.n	8011eac <xQueueReceive+0x3c>
 8011ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d101      	bne.n	8011eb0 <xQueueReceive+0x40>
 8011eac:	2301      	movs	r3, #1
 8011eae:	e000      	b.n	8011eb2 <xQueueReceive+0x42>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d109      	bne.n	8011eca <xQueueReceive+0x5a>
 8011eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eba:	f383 8811 	msr	BASEPRI, r3
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	f3bf 8f4f 	dsb	sy
 8011ec6:	61fb      	str	r3, [r7, #28]
 8011ec8:	e7fe      	b.n	8011ec8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011eca:	f001 f971 	bl	80131b0 <xTaskGetSchedulerState>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d102      	bne.n	8011eda <xQueueReceive+0x6a>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d101      	bne.n	8011ede <xQueueReceive+0x6e>
 8011eda:	2301      	movs	r3, #1
 8011edc:	e000      	b.n	8011ee0 <xQueueReceive+0x70>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d109      	bne.n	8011ef8 <xQueueReceive+0x88>
 8011ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee8:	f383 8811 	msr	BASEPRI, r3
 8011eec:	f3bf 8f6f 	isb	sy
 8011ef0:	f3bf 8f4f 	dsb	sy
 8011ef4:	61bb      	str	r3, [r7, #24]
 8011ef6:	e7fe      	b.n	8011ef6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ef8:	f001 ff36 	bl	8013d68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d01f      	beq.n	8011f48 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f08:	68b9      	ldr	r1, [r7, #8]
 8011f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f0c:	f000 fa15 	bl	801233a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	1e5a      	subs	r2, r3, #1
 8011f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1a:	691b      	ldr	r3, [r3, #16]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00f      	beq.n	8011f40 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f22:	3310      	adds	r3, #16
 8011f24:	4618      	mov	r0, r3
 8011f26:	f000 ff7b 	bl	8012e20 <xTaskRemoveFromEventList>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d007      	beq.n	8011f40 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f30:	4b3c      	ldr	r3, [pc, #240]	; (8012024 <xQueueReceive+0x1b4>)
 8011f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f36:	601a      	str	r2, [r3, #0]
 8011f38:	f3bf 8f4f 	dsb	sy
 8011f3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011f40:	f001 ff40 	bl	8013dc4 <vPortExitCritical>
				return pdPASS;
 8011f44:	2301      	movs	r3, #1
 8011f46:	e069      	b.n	801201c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d103      	bne.n	8011f56 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f4e:	f001 ff39 	bl	8013dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011f52:	2300      	movs	r3, #0
 8011f54:	e062      	b.n	801201c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d106      	bne.n	8011f6a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f5c:	f107 0310 	add.w	r3, r7, #16
 8011f60:	4618      	mov	r0, r3
 8011f62:	f000 ffbf 	bl	8012ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f66:	2301      	movs	r3, #1
 8011f68:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f6a:	f001 ff2b 	bl	8013dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f6e:	f000 fd1b 	bl	80129a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f72:	f001 fef9 	bl	8013d68 <vPortEnterCritical>
 8011f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f7c:	b25b      	sxtb	r3, r3
 8011f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f82:	d103      	bne.n	8011f8c <xQueueReceive+0x11c>
 8011f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f86:	2200      	movs	r2, #0
 8011f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f92:	b25b      	sxtb	r3, r3
 8011f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f98:	d103      	bne.n	8011fa2 <xQueueReceive+0x132>
 8011f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fa2:	f001 ff0f 	bl	8013dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fa6:	1d3a      	adds	r2, r7, #4
 8011fa8:	f107 0310 	add.w	r3, r7, #16
 8011fac:	4611      	mov	r1, r2
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 ffae 	bl	8012f10 <xTaskCheckForTimeOut>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d123      	bne.n	8012002 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fbc:	f000 fa35 	bl	801242a <prvIsQueueEmpty>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d017      	beq.n	8011ff6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc8:	3324      	adds	r3, #36	; 0x24
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	4611      	mov	r1, r2
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f000 fed8 	bl	8012d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fd6:	f000 f9d6 	bl	8012386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011fda:	f000 fcf3 	bl	80129c4 <xTaskResumeAll>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d189      	bne.n	8011ef8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011fe4:	4b0f      	ldr	r3, [pc, #60]	; (8012024 <xQueueReceive+0x1b4>)
 8011fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fea:	601a      	str	r2, [r3, #0]
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	e780      	b.n	8011ef8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ff8:	f000 f9c5 	bl	8012386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ffc:	f000 fce2 	bl	80129c4 <xTaskResumeAll>
 8012000:	e77a      	b.n	8011ef8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012004:	f000 f9bf 	bl	8012386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012008:	f000 fcdc 	bl	80129c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801200c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801200e:	f000 fa0c 	bl	801242a <prvIsQueueEmpty>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	f43f af6f 	beq.w	8011ef8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801201a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801201c:	4618      	mov	r0, r3
 801201e:	3730      	adds	r7, #48	; 0x30
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	e000ed04 	.word	0xe000ed04

08012028 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b08e      	sub	sp, #56	; 0x38
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012032:	2300      	movs	r3, #0
 8012034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801203a:	2300      	movs	r3, #0
 801203c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012040:	2b00      	cmp	r3, #0
 8012042:	d109      	bne.n	8012058 <xQueueSemaphoreTake+0x30>
 8012044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012048:	f383 8811 	msr	BASEPRI, r3
 801204c:	f3bf 8f6f 	isb	sy
 8012050:	f3bf 8f4f 	dsb	sy
 8012054:	623b      	str	r3, [r7, #32]
 8012056:	e7fe      	b.n	8012056 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205c:	2b00      	cmp	r3, #0
 801205e:	d009      	beq.n	8012074 <xQueueSemaphoreTake+0x4c>
 8012060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012064:	f383 8811 	msr	BASEPRI, r3
 8012068:	f3bf 8f6f 	isb	sy
 801206c:	f3bf 8f4f 	dsb	sy
 8012070:	61fb      	str	r3, [r7, #28]
 8012072:	e7fe      	b.n	8012072 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012074:	f001 f89c 	bl	80131b0 <xTaskGetSchedulerState>
 8012078:	4603      	mov	r3, r0
 801207a:	2b00      	cmp	r3, #0
 801207c:	d102      	bne.n	8012084 <xQueueSemaphoreTake+0x5c>
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d101      	bne.n	8012088 <xQueueSemaphoreTake+0x60>
 8012084:	2301      	movs	r3, #1
 8012086:	e000      	b.n	801208a <xQueueSemaphoreTake+0x62>
 8012088:	2300      	movs	r3, #0
 801208a:	2b00      	cmp	r3, #0
 801208c:	d109      	bne.n	80120a2 <xQueueSemaphoreTake+0x7a>
 801208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012092:	f383 8811 	msr	BASEPRI, r3
 8012096:	f3bf 8f6f 	isb	sy
 801209a:	f3bf 8f4f 	dsb	sy
 801209e:	61bb      	str	r3, [r7, #24]
 80120a0:	e7fe      	b.n	80120a0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80120a2:	f001 fe61 	bl	8013d68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80120a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80120ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d024      	beq.n	80120fc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80120b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b4:	1e5a      	subs	r2, r3, #1
 80120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80120ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d104      	bne.n	80120cc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80120c2:	f001 f9f1 	bl	80134a8 <pvTaskIncrementMutexHeldCount>
 80120c6:	4602      	mov	r2, r0
 80120c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ca:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	691b      	ldr	r3, [r3, #16]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d00f      	beq.n	80120f4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d6:	3310      	adds	r3, #16
 80120d8:	4618      	mov	r0, r3
 80120da:	f000 fea1 	bl	8012e20 <xTaskRemoveFromEventList>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d007      	beq.n	80120f4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80120e4:	4b53      	ldr	r3, [pc, #332]	; (8012234 <xQueueSemaphoreTake+0x20c>)
 80120e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120ea:	601a      	str	r2, [r3, #0]
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80120f4:	f001 fe66 	bl	8013dc4 <vPortExitCritical>
				return pdPASS;
 80120f8:	2301      	movs	r3, #1
 80120fa:	e096      	b.n	801222a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d110      	bne.n	8012124 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	2b00      	cmp	r3, #0
 8012106:	d009      	beq.n	801211c <xQueueSemaphoreTake+0xf4>
 8012108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801210c:	f383 8811 	msr	BASEPRI, r3
 8012110:	f3bf 8f6f 	isb	sy
 8012114:	f3bf 8f4f 	dsb	sy
 8012118:	617b      	str	r3, [r7, #20]
 801211a:	e7fe      	b.n	801211a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801211c:	f001 fe52 	bl	8013dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012120:	2300      	movs	r3, #0
 8012122:	e082      	b.n	801222a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801212a:	f107 030c 	add.w	r3, r7, #12
 801212e:	4618      	mov	r0, r3
 8012130:	f000 fed8 	bl	8012ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012134:	2301      	movs	r3, #1
 8012136:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012138:	f001 fe44 	bl	8013dc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801213c:	f000 fc34 	bl	80129a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012140:	f001 fe12 	bl	8013d68 <vPortEnterCritical>
 8012144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801214a:	b25b      	sxtb	r3, r3
 801214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012150:	d103      	bne.n	801215a <xQueueSemaphoreTake+0x132>
 8012152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012154:	2200      	movs	r2, #0
 8012156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012160:	b25b      	sxtb	r3, r3
 8012162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012166:	d103      	bne.n	8012170 <xQueueSemaphoreTake+0x148>
 8012168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216a:	2200      	movs	r2, #0
 801216c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012170:	f001 fe28 	bl	8013dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012174:	463a      	mov	r2, r7
 8012176:	f107 030c 	add.w	r3, r7, #12
 801217a:	4611      	mov	r1, r2
 801217c:	4618      	mov	r0, r3
 801217e:	f000 fec7 	bl	8012f10 <xTaskCheckForTimeOut>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d132      	bne.n	80121ee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801218a:	f000 f94e 	bl	801242a <prvIsQueueEmpty>
 801218e:	4603      	mov	r3, r0
 8012190:	2b00      	cmp	r3, #0
 8012192:	d026      	beq.n	80121e2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d109      	bne.n	80121b0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801219c:	f001 fde4 	bl	8013d68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80121a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	4618      	mov	r0, r3
 80121a6:	f001 f821 	bl	80131ec <xTaskPriorityInherit>
 80121aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80121ac:	f001 fe0a 	bl	8013dc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80121b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b2:	3324      	adds	r3, #36	; 0x24
 80121b4:	683a      	ldr	r2, [r7, #0]
 80121b6:	4611      	mov	r1, r2
 80121b8:	4618      	mov	r0, r3
 80121ba:	f000 fde3 	bl	8012d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80121be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121c0:	f000 f8e1 	bl	8012386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80121c4:	f000 fbfe 	bl	80129c4 <xTaskResumeAll>
 80121c8:	4603      	mov	r3, r0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f47f af69 	bne.w	80120a2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80121d0:	4b18      	ldr	r3, [pc, #96]	; (8012234 <xQueueSemaphoreTake+0x20c>)
 80121d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121d6:	601a      	str	r2, [r3, #0]
 80121d8:	f3bf 8f4f 	dsb	sy
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	e75f      	b.n	80120a2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80121e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121e4:	f000 f8cf 	bl	8012386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80121e8:	f000 fbec 	bl	80129c4 <xTaskResumeAll>
 80121ec:	e759      	b.n	80120a2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80121ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121f0:	f000 f8c9 	bl	8012386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80121f4:	f000 fbe6 	bl	80129c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121fa:	f000 f916 	bl	801242a <prvIsQueueEmpty>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	f43f af4e 	beq.w	80120a2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012208:	2b00      	cmp	r3, #0
 801220a:	d00d      	beq.n	8012228 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801220c:	f001 fdac 	bl	8013d68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012212:	f000 f811 	bl	8012238 <prvGetDisinheritPriorityAfterTimeout>
 8012216:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801221e:	4618      	mov	r0, r3
 8012220:	f001 f8be 	bl	80133a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012224:	f001 fdce 	bl	8013dc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801222a:	4618      	mov	r0, r3
 801222c:	3738      	adds	r7, #56	; 0x38
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	e000ed04 	.word	0xe000ed04

08012238 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012238:	b480      	push	{r7}
 801223a:	b085      	sub	sp, #20
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012244:	2b00      	cmp	r3, #0
 8012246:	d006      	beq.n	8012256 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012252:	60fb      	str	r3, [r7, #12]
 8012254:	e001      	b.n	801225a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012256:	2300      	movs	r3, #0
 8012258:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801225a:	68fb      	ldr	r3, [r7, #12]
	}
 801225c:	4618      	mov	r0, r3
 801225e:	3714      	adds	r7, #20
 8012260:	46bd      	mov	sp, r7
 8012262:	bc80      	pop	{r7}
 8012264:	4770      	bx	lr

08012266 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012266:	b580      	push	{r7, lr}
 8012268:	b086      	sub	sp, #24
 801226a:	af00      	add	r7, sp, #0
 801226c:	60f8      	str	r0, [r7, #12]
 801226e:	60b9      	str	r1, [r7, #8]
 8012270:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012272:	2300      	movs	r3, #0
 8012274:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801227a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012280:	2b00      	cmp	r3, #0
 8012282:	d10d      	bne.n	80122a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d14d      	bne.n	8012328 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	4618      	mov	r0, r3
 8012292:	f001 f819 	bl	80132c8 <xTaskPriorityDisinherit>
 8012296:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2200      	movs	r2, #0
 801229c:	605a      	str	r2, [r3, #4]
 801229e:	e043      	b.n	8012328 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d119      	bne.n	80122da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6898      	ldr	r0, [r3, #8]
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ae:	461a      	mov	r2, r3
 80122b0:	68b9      	ldr	r1, [r7, #8]
 80122b2:	f002 fc9b 	bl	8014bec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	689a      	ldr	r2, [r3, #8]
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122be:	441a      	add	r2, r3
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	689a      	ldr	r2, [r3, #8]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d32b      	bcc.n	8012328 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	609a      	str	r2, [r3, #8]
 80122d8:	e026      	b.n	8012328 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	68d8      	ldr	r0, [r3, #12]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122e2:	461a      	mov	r2, r3
 80122e4:	68b9      	ldr	r1, [r7, #8]
 80122e6:	f002 fc81 	bl	8014bec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	68da      	ldr	r2, [r3, #12]
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f2:	425b      	negs	r3, r3
 80122f4:	441a      	add	r2, r3
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	68da      	ldr	r2, [r3, #12]
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	429a      	cmp	r2, r3
 8012304:	d207      	bcs.n	8012316 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	685a      	ldr	r2, [r3, #4]
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801230e:	425b      	negs	r3, r3
 8012310:	441a      	add	r2, r3
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b02      	cmp	r3, #2
 801231a:	d105      	bne.n	8012328 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d002      	beq.n	8012328 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	3b01      	subs	r3, #1
 8012326:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	1c5a      	adds	r2, r3, #1
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012330:	697b      	ldr	r3, [r7, #20]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3718      	adds	r7, #24
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b082      	sub	sp, #8
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
 8012342:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012348:	2b00      	cmp	r3, #0
 801234a:	d018      	beq.n	801237e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	68da      	ldr	r2, [r3, #12]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012354:	441a      	add	r2, r3
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	68da      	ldr	r2, [r3, #12]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	685b      	ldr	r3, [r3, #4]
 8012362:	429a      	cmp	r2, r3
 8012364:	d303      	bcc.n	801236e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	68d9      	ldr	r1, [r3, #12]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012376:	461a      	mov	r2, r3
 8012378:	6838      	ldr	r0, [r7, #0]
 801237a:	f002 fc37 	bl	8014bec <memcpy>
	}
}
 801237e:	bf00      	nop
 8012380:	3708      	adds	r7, #8
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012386:	b580      	push	{r7, lr}
 8012388:	b084      	sub	sp, #16
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801238e:	f001 fceb 	bl	8013d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012398:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801239a:	e011      	b.n	80123c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d012      	beq.n	80123ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	3324      	adds	r3, #36	; 0x24
 80123a8:	4618      	mov	r0, r3
 80123aa:	f000 fd39 	bl	8012e20 <xTaskRemoveFromEventList>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80123b4:	f000 fe0c 	bl	8012fd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80123b8:	7bfb      	ldrb	r3, [r7, #15]
 80123ba:	3b01      	subs	r3, #1
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	dce9      	bgt.n	801239c <prvUnlockQueue+0x16>
 80123c8:	e000      	b.n	80123cc <prvUnlockQueue+0x46>
					break;
 80123ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	22ff      	movs	r2, #255	; 0xff
 80123d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80123d4:	f001 fcf6 	bl	8013dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80123d8:	f001 fcc6 	bl	8013d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123e4:	e011      	b.n	801240a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	691b      	ldr	r3, [r3, #16]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d012      	beq.n	8012414 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	3310      	adds	r3, #16
 80123f2:	4618      	mov	r0, r3
 80123f4:	f000 fd14 	bl	8012e20 <xTaskRemoveFromEventList>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d001      	beq.n	8012402 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80123fe:	f000 fde7 	bl	8012fd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012402:	7bbb      	ldrb	r3, [r7, #14]
 8012404:	3b01      	subs	r3, #1
 8012406:	b2db      	uxtb	r3, r3
 8012408:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801240a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801240e:	2b00      	cmp	r3, #0
 8012410:	dce9      	bgt.n	80123e6 <prvUnlockQueue+0x60>
 8012412:	e000      	b.n	8012416 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012414:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	22ff      	movs	r2, #255	; 0xff
 801241a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801241e:	f001 fcd1 	bl	8013dc4 <vPortExitCritical>
}
 8012422:	bf00      	nop
 8012424:	3710      	adds	r7, #16
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}

0801242a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801242a:	b580      	push	{r7, lr}
 801242c:	b084      	sub	sp, #16
 801242e:	af00      	add	r7, sp, #0
 8012430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012432:	f001 fc99 	bl	8013d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801243a:	2b00      	cmp	r3, #0
 801243c:	d102      	bne.n	8012444 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801243e:	2301      	movs	r3, #1
 8012440:	60fb      	str	r3, [r7, #12]
 8012442:	e001      	b.n	8012448 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012444:	2300      	movs	r3, #0
 8012446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012448:	f001 fcbc 	bl	8013dc4 <vPortExitCritical>

	return xReturn;
 801244c:	68fb      	ldr	r3, [r7, #12]
}
 801244e:	4618      	mov	r0, r3
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b084      	sub	sp, #16
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801245e:	f001 fc83 	bl	8013d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801246a:	429a      	cmp	r2, r3
 801246c:	d102      	bne.n	8012474 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801246e:	2301      	movs	r3, #1
 8012470:	60fb      	str	r3, [r7, #12]
 8012472:	e001      	b.n	8012478 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012474:	2300      	movs	r3, #0
 8012476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012478:	f001 fca4 	bl	8013dc4 <vPortExitCritical>

	return xReturn;
 801247c:	68fb      	ldr	r3, [r7, #12]
}
 801247e:	4618      	mov	r0, r3
 8012480:	3710      	adds	r7, #16
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
	...

08012488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012488:	b480      	push	{r7}
 801248a:	b085      	sub	sp, #20
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012492:	2300      	movs	r3, #0
 8012494:	60fb      	str	r3, [r7, #12]
 8012496:	e014      	b.n	80124c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012498:	4a0e      	ldr	r2, [pc, #56]	; (80124d4 <vQueueAddToRegistry+0x4c>)
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d10b      	bne.n	80124bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80124a4:	490b      	ldr	r1, [pc, #44]	; (80124d4 <vQueueAddToRegistry+0x4c>)
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80124ae:	4a09      	ldr	r2, [pc, #36]	; (80124d4 <vQueueAddToRegistry+0x4c>)
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	4413      	add	r3, r2
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80124ba:	e005      	b.n	80124c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	3301      	adds	r3, #1
 80124c0:	60fb      	str	r3, [r7, #12]
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	2b07      	cmp	r3, #7
 80124c6:	d9e7      	bls.n	8012498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80124c8:	bf00      	nop
 80124ca:	3714      	adds	r7, #20
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bc80      	pop	{r7}
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop
 80124d4:	20009638 	.word	0x20009638

080124d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b086      	sub	sp, #24
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80124e8:	f001 fc3e 	bl	8013d68 <vPortEnterCritical>
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124f2:	b25b      	sxtb	r3, r3
 80124f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f8:	d103      	bne.n	8012502 <vQueueWaitForMessageRestricted+0x2a>
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	2200      	movs	r2, #0
 80124fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012508:	b25b      	sxtb	r3, r3
 801250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801250e:	d103      	bne.n	8012518 <vQueueWaitForMessageRestricted+0x40>
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	2200      	movs	r2, #0
 8012514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012518:	f001 fc54 	bl	8013dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012520:	2b00      	cmp	r3, #0
 8012522:	d106      	bne.n	8012532 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	3324      	adds	r3, #36	; 0x24
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	68b9      	ldr	r1, [r7, #8]
 801252c:	4618      	mov	r0, r3
 801252e:	f000 fc4d 	bl	8012dcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012532:	6978      	ldr	r0, [r7, #20]
 8012534:	f7ff ff27 	bl	8012386 <prvUnlockQueue>
	}
 8012538:	bf00      	nop
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08e      	sub	sp, #56	; 0x38
 8012544:	af04      	add	r7, sp, #16
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
 801254c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012550:	2b00      	cmp	r3, #0
 8012552:	d109      	bne.n	8012568 <xTaskCreateStatic+0x28>
 8012554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012558:	f383 8811 	msr	BASEPRI, r3
 801255c:	f3bf 8f6f 	isb	sy
 8012560:	f3bf 8f4f 	dsb	sy
 8012564:	623b      	str	r3, [r7, #32]
 8012566:	e7fe      	b.n	8012566 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8012568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256a:	2b00      	cmp	r3, #0
 801256c:	d109      	bne.n	8012582 <xTaskCreateStatic+0x42>
 801256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	61fb      	str	r3, [r7, #28]
 8012580:	e7fe      	b.n	8012580 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012582:	2364      	movs	r3, #100	; 0x64
 8012584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	2b64      	cmp	r3, #100	; 0x64
 801258a:	d009      	beq.n	80125a0 <xTaskCreateStatic+0x60>
 801258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012590:	f383 8811 	msr	BASEPRI, r3
 8012594:	f3bf 8f6f 	isb	sy
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	61bb      	str	r3, [r7, #24]
 801259e:	e7fe      	b.n	801259e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80125a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d01e      	beq.n	80125e4 <xTaskCreateStatic+0xa4>
 80125a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d01b      	beq.n	80125e4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80125ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80125b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80125b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b8:	2202      	movs	r2, #2
 80125ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80125be:	2300      	movs	r3, #0
 80125c0:	9303      	str	r3, [sp, #12]
 80125c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c4:	9302      	str	r3, [sp, #8]
 80125c6:	f107 0314 	add.w	r3, r7, #20
 80125ca:	9301      	str	r3, [sp, #4]
 80125cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ce:	9300      	str	r3, [sp, #0]
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	68b9      	ldr	r1, [r7, #8]
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f000 f850 	bl	801267c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80125dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125de:	f000 f8d9 	bl	8012794 <prvAddNewTaskToReadyList>
 80125e2:	e001      	b.n	80125e8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80125e4:	2300      	movs	r3, #0
 80125e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80125e8:	697b      	ldr	r3, [r7, #20]
	}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3728      	adds	r7, #40	; 0x28
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b08c      	sub	sp, #48	; 0x30
 80125f6:	af04      	add	r7, sp, #16
 80125f8:	60f8      	str	r0, [r7, #12]
 80125fa:	60b9      	str	r1, [r7, #8]
 80125fc:	603b      	str	r3, [r7, #0]
 80125fe:	4613      	mov	r3, r2
 8012600:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012602:	88fb      	ldrh	r3, [r7, #6]
 8012604:	009b      	lsls	r3, r3, #2
 8012606:	4618      	mov	r0, r3
 8012608:	f001 fca4 	bl	8013f54 <pvPortMalloc>
 801260c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00e      	beq.n	8012632 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012614:	2064      	movs	r0, #100	; 0x64
 8012616:	f001 fc9d 	bl	8013f54 <pvPortMalloc>
 801261a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801261c:	69fb      	ldr	r3, [r7, #28]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d003      	beq.n	801262a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	697a      	ldr	r2, [r7, #20]
 8012626:	631a      	str	r2, [r3, #48]	; 0x30
 8012628:	e005      	b.n	8012636 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801262a:	6978      	ldr	r0, [r7, #20]
 801262c:	f001 fd54 	bl	80140d8 <vPortFree>
 8012630:	e001      	b.n	8012636 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012632:	2300      	movs	r3, #0
 8012634:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d017      	beq.n	801266c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	2200      	movs	r2, #0
 8012640:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012644:	88fa      	ldrh	r2, [r7, #6]
 8012646:	2300      	movs	r3, #0
 8012648:	9303      	str	r3, [sp, #12]
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	9302      	str	r3, [sp, #8]
 801264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012650:	9301      	str	r3, [sp, #4]
 8012652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012654:	9300      	str	r3, [sp, #0]
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	68b9      	ldr	r1, [r7, #8]
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f000 f80e 	bl	801267c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012660:	69f8      	ldr	r0, [r7, #28]
 8012662:	f000 f897 	bl	8012794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012666:	2301      	movs	r3, #1
 8012668:	61bb      	str	r3, [r7, #24]
 801266a:	e002      	b.n	8012672 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801266c:	f04f 33ff 	mov.w	r3, #4294967295
 8012670:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012672:	69bb      	ldr	r3, [r7, #24]
	}
 8012674:	4618      	mov	r0, r3
 8012676:	3720      	adds	r7, #32
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b088      	sub	sp, #32
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	607a      	str	r2, [r7, #4]
 8012688:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801268c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	009b      	lsls	r3, r3, #2
 8012692:	461a      	mov	r2, r3
 8012694:	21a5      	movs	r1, #165	; 0xa5
 8012696:	f002 facd 	bl	8014c34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80126a4:	3b01      	subs	r3, #1
 80126a6:	009b      	lsls	r3, r3, #2
 80126a8:	4413      	add	r3, r2
 80126aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	f023 0307 	bic.w	r3, r3, #7
 80126b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80126b4:	69bb      	ldr	r3, [r7, #24]
 80126b6:	f003 0307 	and.w	r3, r3, #7
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d009      	beq.n	80126d2 <prvInitialiseNewTask+0x56>
 80126be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c2:	f383 8811 	msr	BASEPRI, r3
 80126c6:	f3bf 8f6f 	isb	sy
 80126ca:	f3bf 8f4f 	dsb	sy
 80126ce:	617b      	str	r3, [r7, #20]
 80126d0:	e7fe      	b.n	80126d0 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	69ba      	ldr	r2, [r7, #24]
 80126d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80126d8:	2300      	movs	r3, #0
 80126da:	61fb      	str	r3, [r7, #28]
 80126dc:	e012      	b.n	8012704 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	4413      	add	r3, r2
 80126e4:	7819      	ldrb	r1, [r3, #0]
 80126e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	4413      	add	r3, r2
 80126ec:	3334      	adds	r3, #52	; 0x34
 80126ee:	460a      	mov	r2, r1
 80126f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80126f2:	68ba      	ldr	r2, [r7, #8]
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	4413      	add	r3, r2
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d006      	beq.n	801270c <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	3301      	adds	r3, #1
 8012702:	61fb      	str	r3, [r7, #28]
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	2b0f      	cmp	r3, #15
 8012708:	d9e9      	bls.n	80126de <prvInitialiseNewTask+0x62>
 801270a:	e000      	b.n	801270e <prvInitialiseNewTask+0x92>
		{
			break;
 801270c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012710:	2200      	movs	r2, #0
 8012712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012718:	2b37      	cmp	r3, #55	; 0x37
 801271a:	d901      	bls.n	8012720 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801271c:	2337      	movs	r3, #55	; 0x37
 801271e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801272a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 801272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272e:	2200      	movs	r2, #0
 8012730:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012734:	3304      	adds	r3, #4
 8012736:	4618      	mov	r0, r3
 8012738:	f7fe fed1 	bl	80114de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273e:	3318      	adds	r3, #24
 8012740:	4618      	mov	r0, r3
 8012742:	f7fe fecc 	bl	80114de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801274a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801275a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275e:	2200      	movs	r2, #0
 8012760:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012764:	2200      	movs	r2, #0
 8012766:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276a:	2200      	movs	r2, #0
 801276c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012770:	683a      	ldr	r2, [r7, #0]
 8012772:	68f9      	ldr	r1, [r7, #12]
 8012774:	69b8      	ldr	r0, [r7, #24]
 8012776:	f001 fa09 	bl	8013b8c <pxPortInitialiseStack>
 801277a:	4602      	mov	r2, r0
 801277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012782:	2b00      	cmp	r3, #0
 8012784:	d002      	beq.n	801278c <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801278a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801278c:	bf00      	nop
 801278e:	3720      	adds	r7, #32
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801279c:	f001 fae4 	bl	8013d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80127a0:	4b2d      	ldr	r3, [pc, #180]	; (8012858 <prvAddNewTaskToReadyList+0xc4>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	3301      	adds	r3, #1
 80127a6:	4a2c      	ldr	r2, [pc, #176]	; (8012858 <prvAddNewTaskToReadyList+0xc4>)
 80127a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80127aa:	4b2c      	ldr	r3, [pc, #176]	; (801285c <prvAddNewTaskToReadyList+0xc8>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d109      	bne.n	80127c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80127b2:	4a2a      	ldr	r2, [pc, #168]	; (801285c <prvAddNewTaskToReadyList+0xc8>)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80127b8:	4b27      	ldr	r3, [pc, #156]	; (8012858 <prvAddNewTaskToReadyList+0xc4>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2b01      	cmp	r3, #1
 80127be:	d110      	bne.n	80127e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80127c0:	f000 fc2a 	bl	8013018 <prvInitialiseTaskLists>
 80127c4:	e00d      	b.n	80127e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80127c6:	4b26      	ldr	r3, [pc, #152]	; (8012860 <prvAddNewTaskToReadyList+0xcc>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d109      	bne.n	80127e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80127ce:	4b23      	ldr	r3, [pc, #140]	; (801285c <prvAddNewTaskToReadyList+0xc8>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d8:	429a      	cmp	r2, r3
 80127da:	d802      	bhi.n	80127e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80127dc:	4a1f      	ldr	r2, [pc, #124]	; (801285c <prvAddNewTaskToReadyList+0xc8>)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80127e2:	4b20      	ldr	r3, [pc, #128]	; (8012864 <prvAddNewTaskToReadyList+0xd0>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	3301      	adds	r3, #1
 80127e8:	4a1e      	ldr	r2, [pc, #120]	; (8012864 <prvAddNewTaskToReadyList+0xd0>)
 80127ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80127ec:	4b1d      	ldr	r3, [pc, #116]	; (8012864 <prvAddNewTaskToReadyList+0xd0>)
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127f8:	4b1b      	ldr	r3, [pc, #108]	; (8012868 <prvAddNewTaskToReadyList+0xd4>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d903      	bls.n	8012808 <prvAddNewTaskToReadyList+0x74>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012804:	4a18      	ldr	r2, [pc, #96]	; (8012868 <prvAddNewTaskToReadyList+0xd4>)
 8012806:	6013      	str	r3, [r2, #0]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801280c:	4613      	mov	r3, r2
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	4413      	add	r3, r2
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	4a15      	ldr	r2, [pc, #84]	; (801286c <prvAddNewTaskToReadyList+0xd8>)
 8012816:	441a      	add	r2, r3
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	3304      	adds	r3, #4
 801281c:	4619      	mov	r1, r3
 801281e:	4610      	mov	r0, r2
 8012820:	f7fe fe69 	bl	80114f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012824:	f001 face 	bl	8013dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012828:	4b0d      	ldr	r3, [pc, #52]	; (8012860 <prvAddNewTaskToReadyList+0xcc>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d00e      	beq.n	801284e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012830:	4b0a      	ldr	r3, [pc, #40]	; (801285c <prvAddNewTaskToReadyList+0xc8>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801283a:	429a      	cmp	r2, r3
 801283c:	d207      	bcs.n	801284e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801283e:	4b0c      	ldr	r3, [pc, #48]	; (8012870 <prvAddNewTaskToReadyList+0xdc>)
 8012840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012844:	601a      	str	r2, [r3, #0]
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801284e:	bf00      	nop
 8012850:	3708      	adds	r7, #8
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop
 8012858:	20000f1c 	.word	0x20000f1c
 801285c:	20000a48 	.word	0x20000a48
 8012860:	20000f28 	.word	0x20000f28
 8012864:	20000f38 	.word	0x20000f38
 8012868:	20000f24 	.word	0x20000f24
 801286c:	20000a4c 	.word	0x20000a4c
 8012870:	e000ed04 	.word	0xe000ed04

08012874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801287c:	2300      	movs	r3, #0
 801287e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d016      	beq.n	80128b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012886:	4b13      	ldr	r3, [pc, #76]	; (80128d4 <vTaskDelay+0x60>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d009      	beq.n	80128a2 <vTaskDelay+0x2e>
 801288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	60bb      	str	r3, [r7, #8]
 80128a0:	e7fe      	b.n	80128a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80128a2:	f000 f881 	bl	80129a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80128a6:	2100      	movs	r1, #0
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 fe11 	bl	80134d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80128ae:	f000 f889 	bl	80129c4 <xTaskResumeAll>
 80128b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d107      	bne.n	80128ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80128ba:	4b07      	ldr	r3, [pc, #28]	; (80128d8 <vTaskDelay+0x64>)
 80128bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80128ca:	bf00      	nop
 80128cc:	3710      	adds	r7, #16
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	20000f44 	.word	0x20000f44
 80128d8:	e000ed04 	.word	0xe000ed04

080128dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b08a      	sub	sp, #40	; 0x28
 80128e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80128e2:	2300      	movs	r3, #0
 80128e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80128ea:	463a      	mov	r2, r7
 80128ec:	1d39      	adds	r1, r7, #4
 80128ee:	f107 0308 	add.w	r3, r7, #8
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fe fda2 	bl	801143c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80128f8:	6839      	ldr	r1, [r7, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	68ba      	ldr	r2, [r7, #8]
 80128fe:	9202      	str	r2, [sp, #8]
 8012900:	9301      	str	r3, [sp, #4]
 8012902:	2300      	movs	r3, #0
 8012904:	9300      	str	r3, [sp, #0]
 8012906:	2300      	movs	r3, #0
 8012908:	460a      	mov	r2, r1
 801290a:	4921      	ldr	r1, [pc, #132]	; (8012990 <vTaskStartScheduler+0xb4>)
 801290c:	4821      	ldr	r0, [pc, #132]	; (8012994 <vTaskStartScheduler+0xb8>)
 801290e:	f7ff fe17 	bl	8012540 <xTaskCreateStatic>
 8012912:	4602      	mov	r2, r0
 8012914:	4b20      	ldr	r3, [pc, #128]	; (8012998 <vTaskStartScheduler+0xbc>)
 8012916:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012918:	4b1f      	ldr	r3, [pc, #124]	; (8012998 <vTaskStartScheduler+0xbc>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d002      	beq.n	8012926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012920:	2301      	movs	r3, #1
 8012922:	617b      	str	r3, [r7, #20]
 8012924:	e001      	b.n	801292a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012926:	2300      	movs	r3, #0
 8012928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	2b01      	cmp	r3, #1
 801292e:	d102      	bne.n	8012936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012930:	f000 fe22 	bl	8013578 <xTimerCreateTimerTask>
 8012934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d117      	bne.n	801296c <vTaskStartScheduler+0x90>
 801293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012940:	f383 8811 	msr	BASEPRI, r3
 8012944:	f3bf 8f6f 	isb	sy
 8012948:	f3bf 8f4f 	dsb	sy
 801294c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801294e:	4b13      	ldr	r3, [pc, #76]	; (801299c <vTaskStartScheduler+0xc0>)
 8012950:	f04f 32ff 	mov.w	r2, #4294967295
 8012954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012956:	4b12      	ldr	r3, [pc, #72]	; (80129a0 <vTaskStartScheduler+0xc4>)
 8012958:	2201      	movs	r2, #1
 801295a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801295c:	4b11      	ldr	r3, [pc, #68]	; (80129a4 <vTaskStartScheduler+0xc8>)
 801295e:	2200      	movs	r2, #0
 8012960:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012962:	f7ef fbbb 	bl	80020dc <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012966:	f001 f98f 	bl	8013c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801296a:	e00d      	b.n	8012988 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012972:	d109      	bne.n	8012988 <vTaskStartScheduler+0xac>
 8012974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012978:	f383 8811 	msr	BASEPRI, r3
 801297c:	f3bf 8f6f 	isb	sy
 8012980:	f3bf 8f4f 	dsb	sy
 8012984:	60fb      	str	r3, [r7, #12]
 8012986:	e7fe      	b.n	8012986 <vTaskStartScheduler+0xaa>
}
 8012988:	bf00      	nop
 801298a:	3718      	adds	r7, #24
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}
 8012990:	0801a654 	.word	0x0801a654
 8012994:	08012fe9 	.word	0x08012fe9
 8012998:	20000f40 	.word	0x20000f40
 801299c:	20000f3c 	.word	0x20000f3c
 80129a0:	20000f28 	.word	0x20000f28
 80129a4:	20000f20 	.word	0x20000f20

080129a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80129a8:	b480      	push	{r7}
 80129aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80129ac:	4b04      	ldr	r3, [pc, #16]	; (80129c0 <vTaskSuspendAll+0x18>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	3301      	adds	r3, #1
 80129b2:	4a03      	ldr	r2, [pc, #12]	; (80129c0 <vTaskSuspendAll+0x18>)
 80129b4:	6013      	str	r3, [r2, #0]
}
 80129b6:	bf00      	nop
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bc80      	pop	{r7}
 80129bc:	4770      	bx	lr
 80129be:	bf00      	nop
 80129c0:	20000f44 	.word	0x20000f44

080129c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80129ca:	2300      	movs	r3, #0
 80129cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80129ce:	2300      	movs	r3, #0
 80129d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80129d2:	4b41      	ldr	r3, [pc, #260]	; (8012ad8 <xTaskResumeAll+0x114>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d109      	bne.n	80129ee <xTaskResumeAll+0x2a>
 80129da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129de:	f383 8811 	msr	BASEPRI, r3
 80129e2:	f3bf 8f6f 	isb	sy
 80129e6:	f3bf 8f4f 	dsb	sy
 80129ea:	603b      	str	r3, [r7, #0]
 80129ec:	e7fe      	b.n	80129ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80129ee:	f001 f9bb 	bl	8013d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80129f2:	4b39      	ldr	r3, [pc, #228]	; (8012ad8 <xTaskResumeAll+0x114>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	3b01      	subs	r3, #1
 80129f8:	4a37      	ldr	r2, [pc, #220]	; (8012ad8 <xTaskResumeAll+0x114>)
 80129fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129fc:	4b36      	ldr	r3, [pc, #216]	; (8012ad8 <xTaskResumeAll+0x114>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d162      	bne.n	8012aca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012a04:	4b35      	ldr	r3, [pc, #212]	; (8012adc <xTaskResumeAll+0x118>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d05e      	beq.n	8012aca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a0c:	e02f      	b.n	8012a6e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012a0e:	4b34      	ldr	r3, [pc, #208]	; (8012ae0 <xTaskResumeAll+0x11c>)
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	3318      	adds	r3, #24
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7fe fdc6 	bl	80115ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	3304      	adds	r3, #4
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fe fdc1 	bl	80115ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a2e:	4b2d      	ldr	r3, [pc, #180]	; (8012ae4 <xTaskResumeAll+0x120>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d903      	bls.n	8012a3e <xTaskResumeAll+0x7a>
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a3a:	4a2a      	ldr	r2, [pc, #168]	; (8012ae4 <xTaskResumeAll+0x120>)
 8012a3c:	6013      	str	r3, [r2, #0]
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a42:	4613      	mov	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	4413      	add	r3, r2
 8012a48:	009b      	lsls	r3, r3, #2
 8012a4a:	4a27      	ldr	r2, [pc, #156]	; (8012ae8 <xTaskResumeAll+0x124>)
 8012a4c:	441a      	add	r2, r3
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	3304      	adds	r3, #4
 8012a52:	4619      	mov	r1, r3
 8012a54:	4610      	mov	r0, r2
 8012a56:	f7fe fd4e 	bl	80114f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a5e:	4b23      	ldr	r3, [pc, #140]	; (8012aec <xTaskResumeAll+0x128>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d302      	bcc.n	8012a6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012a68:	4b21      	ldr	r3, [pc, #132]	; (8012af0 <xTaskResumeAll+0x12c>)
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a6e:	4b1c      	ldr	r3, [pc, #112]	; (8012ae0 <xTaskResumeAll+0x11c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d1cb      	bne.n	8012a0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d001      	beq.n	8012a80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012a7c:	f000 fb66 	bl	801314c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012a80:	4b1c      	ldr	r3, [pc, #112]	; (8012af4 <xTaskResumeAll+0x130>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d010      	beq.n	8012aae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012a8c:	f000 f844 	bl	8012b18 <xTaskIncrementTick>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d002      	beq.n	8012a9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012a96:	4b16      	ldr	r3, [pc, #88]	; (8012af0 <xTaskResumeAll+0x12c>)
 8012a98:	2201      	movs	r2, #1
 8012a9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	3b01      	subs	r3, #1
 8012aa0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d1f1      	bne.n	8012a8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012aa8:	4b12      	ldr	r3, [pc, #72]	; (8012af4 <xTaskResumeAll+0x130>)
 8012aaa:	2200      	movs	r2, #0
 8012aac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012aae:	4b10      	ldr	r3, [pc, #64]	; (8012af0 <xTaskResumeAll+0x12c>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d009      	beq.n	8012aca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012aba:	4b0f      	ldr	r3, [pc, #60]	; (8012af8 <xTaskResumeAll+0x134>)
 8012abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012aca:	f001 f97b 	bl	8013dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8012ace:	68bb      	ldr	r3, [r7, #8]
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3710      	adds	r7, #16
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	20000f44 	.word	0x20000f44
 8012adc:	20000f1c 	.word	0x20000f1c
 8012ae0:	20000edc 	.word	0x20000edc
 8012ae4:	20000f24 	.word	0x20000f24
 8012ae8:	20000a4c 	.word	0x20000a4c
 8012aec:	20000a48 	.word	0x20000a48
 8012af0:	20000f30 	.word	0x20000f30
 8012af4:	20000f2c 	.word	0x20000f2c
 8012af8:	e000ed04 	.word	0xe000ed04

08012afc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012b02:	4b04      	ldr	r3, [pc, #16]	; (8012b14 <xTaskGetTickCount+0x18>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012b08:	687b      	ldr	r3, [r7, #4]
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	370c      	adds	r7, #12
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bc80      	pop	{r7}
 8012b12:	4770      	bx	lr
 8012b14:	20000f20 	.word	0x20000f20

08012b18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b086      	sub	sp, #24
 8012b1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b22:	4b51      	ldr	r3, [pc, #324]	; (8012c68 <xTaskIncrementTick+0x150>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f040 808d 	bne.w	8012c46 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012b2c:	4b4f      	ldr	r3, [pc, #316]	; (8012c6c <xTaskIncrementTick+0x154>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	3301      	adds	r3, #1
 8012b32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012b34:	4a4d      	ldr	r2, [pc, #308]	; (8012c6c <xTaskIncrementTick+0x154>)
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d11f      	bne.n	8012b80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012b40:	4b4b      	ldr	r3, [pc, #300]	; (8012c70 <xTaskIncrementTick+0x158>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d009      	beq.n	8012b5e <xTaskIncrementTick+0x46>
 8012b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b4e:	f383 8811 	msr	BASEPRI, r3
 8012b52:	f3bf 8f6f 	isb	sy
 8012b56:	f3bf 8f4f 	dsb	sy
 8012b5a:	603b      	str	r3, [r7, #0]
 8012b5c:	e7fe      	b.n	8012b5c <xTaskIncrementTick+0x44>
 8012b5e:	4b44      	ldr	r3, [pc, #272]	; (8012c70 <xTaskIncrementTick+0x158>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	60fb      	str	r3, [r7, #12]
 8012b64:	4b43      	ldr	r3, [pc, #268]	; (8012c74 <xTaskIncrementTick+0x15c>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	4a41      	ldr	r2, [pc, #260]	; (8012c70 <xTaskIncrementTick+0x158>)
 8012b6a:	6013      	str	r3, [r2, #0]
 8012b6c:	4a41      	ldr	r2, [pc, #260]	; (8012c74 <xTaskIncrementTick+0x15c>)
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	6013      	str	r3, [r2, #0]
 8012b72:	4b41      	ldr	r3, [pc, #260]	; (8012c78 <xTaskIncrementTick+0x160>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	3301      	adds	r3, #1
 8012b78:	4a3f      	ldr	r2, [pc, #252]	; (8012c78 <xTaskIncrementTick+0x160>)
 8012b7a:	6013      	str	r3, [r2, #0]
 8012b7c:	f000 fae6 	bl	801314c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012b80:	4b3e      	ldr	r3, [pc, #248]	; (8012c7c <xTaskIncrementTick+0x164>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	693a      	ldr	r2, [r7, #16]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d34e      	bcc.n	8012c28 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b8a:	4b39      	ldr	r3, [pc, #228]	; (8012c70 <xTaskIncrementTick+0x158>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <xTaskIncrementTick+0x80>
 8012b94:	2301      	movs	r3, #1
 8012b96:	e000      	b.n	8012b9a <xTaskIncrementTick+0x82>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d004      	beq.n	8012ba8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b9e:	4b37      	ldr	r3, [pc, #220]	; (8012c7c <xTaskIncrementTick+0x164>)
 8012ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba4:	601a      	str	r2, [r3, #0]
					break;
 8012ba6:	e03f      	b.n	8012c28 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012ba8:	4b31      	ldr	r3, [pc, #196]	; (8012c70 <xTaskIncrementTick+0x158>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012bb8:	693a      	ldr	r2, [r7, #16]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d203      	bcs.n	8012bc8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012bc0:	4a2e      	ldr	r2, [pc, #184]	; (8012c7c <xTaskIncrementTick+0x164>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6013      	str	r3, [r2, #0]
						break;
 8012bc6:	e02f      	b.n	8012c28 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	3304      	adds	r3, #4
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7fe fced 	bl	80115ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d004      	beq.n	8012be4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	3318      	adds	r3, #24
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fe fce4 	bl	80115ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be8:	4b25      	ldr	r3, [pc, #148]	; (8012c80 <xTaskIncrementTick+0x168>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d903      	bls.n	8012bf8 <xTaskIncrementTick+0xe0>
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf4:	4a22      	ldr	r2, [pc, #136]	; (8012c80 <xTaskIncrementTick+0x168>)
 8012bf6:	6013      	str	r3, [r2, #0]
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4413      	add	r3, r2
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4a1f      	ldr	r2, [pc, #124]	; (8012c84 <xTaskIncrementTick+0x16c>)
 8012c06:	441a      	add	r2, r3
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	3304      	adds	r3, #4
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	4610      	mov	r0, r2
 8012c10:	f7fe fc71 	bl	80114f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c18:	4b1b      	ldr	r3, [pc, #108]	; (8012c88 <xTaskIncrementTick+0x170>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d3b3      	bcc.n	8012b8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012c22:	2301      	movs	r3, #1
 8012c24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c26:	e7b0      	b.n	8012b8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012c28:	4b17      	ldr	r3, [pc, #92]	; (8012c88 <xTaskIncrementTick+0x170>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c2e:	4915      	ldr	r1, [pc, #84]	; (8012c84 <xTaskIncrementTick+0x16c>)
 8012c30:	4613      	mov	r3, r2
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	440b      	add	r3, r1
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d907      	bls.n	8012c50 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8012c40:	2301      	movs	r3, #1
 8012c42:	617b      	str	r3, [r7, #20]
 8012c44:	e004      	b.n	8012c50 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012c46:	4b11      	ldr	r3, [pc, #68]	; (8012c8c <xTaskIncrementTick+0x174>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	4a0f      	ldr	r2, [pc, #60]	; (8012c8c <xTaskIncrementTick+0x174>)
 8012c4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012c50:	4b0f      	ldr	r3, [pc, #60]	; (8012c90 <xTaskIncrementTick+0x178>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d001      	beq.n	8012c5c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012c5c:	697b      	ldr	r3, [r7, #20]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3718      	adds	r7, #24
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	20000f44 	.word	0x20000f44
 8012c6c:	20000f20 	.word	0x20000f20
 8012c70:	20000ed4 	.word	0x20000ed4
 8012c74:	20000ed8 	.word	0x20000ed8
 8012c78:	20000f34 	.word	0x20000f34
 8012c7c:	20000f3c 	.word	0x20000f3c
 8012c80:	20000f24 	.word	0x20000f24
 8012c84:	20000a4c 	.word	0x20000a4c
 8012c88:	20000a48 	.word	0x20000a48
 8012c8c:	20000f2c 	.word	0x20000f2c
 8012c90:	20000f30 	.word	0x20000f30

08012c94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012c9a:	4b33      	ldr	r3, [pc, #204]	; (8012d68 <vTaskSwitchContext+0xd4>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d003      	beq.n	8012caa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012ca2:	4b32      	ldr	r3, [pc, #200]	; (8012d6c <vTaskSwitchContext+0xd8>)
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ca8:	e059      	b.n	8012d5e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8012caa:	4b30      	ldr	r3, [pc, #192]	; (8012d6c <vTaskSwitchContext+0xd8>)
 8012cac:	2200      	movs	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012cb0:	f7ef fa1e 	bl	80020f0 <getRunTimeCounterValue>
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	4b2e      	ldr	r3, [pc, #184]	; (8012d70 <vTaskSwitchContext+0xdc>)
 8012cb8:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012cba:	4b2d      	ldr	r3, [pc, #180]	; (8012d70 <vTaskSwitchContext+0xdc>)
 8012cbc:	681a      	ldr	r2, [r3, #0]
 8012cbe:	4b2d      	ldr	r3, [pc, #180]	; (8012d74 <vTaskSwitchContext+0xe0>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d909      	bls.n	8012cda <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012cc6:	4b2c      	ldr	r3, [pc, #176]	; (8012d78 <vTaskSwitchContext+0xe4>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012ccc:	4a28      	ldr	r2, [pc, #160]	; (8012d70 <vTaskSwitchContext+0xdc>)
 8012cce:	6810      	ldr	r0, [r2, #0]
 8012cd0:	4a28      	ldr	r2, [pc, #160]	; (8012d74 <vTaskSwitchContext+0xe0>)
 8012cd2:	6812      	ldr	r2, [r2, #0]
 8012cd4:	1a82      	subs	r2, r0, r2
 8012cd6:	440a      	add	r2, r1
 8012cd8:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8012cda:	4b25      	ldr	r3, [pc, #148]	; (8012d70 <vTaskSwitchContext+0xdc>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4a25      	ldr	r2, [pc, #148]	; (8012d74 <vTaskSwitchContext+0xe0>)
 8012ce0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012ce2:	4b26      	ldr	r3, [pc, #152]	; (8012d7c <vTaskSwitchContext+0xe8>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	60fb      	str	r3, [r7, #12]
 8012ce8:	e00f      	b.n	8012d0a <vTaskSwitchContext+0x76>
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d109      	bne.n	8012d04 <vTaskSwitchContext+0x70>
 8012cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf4:	f383 8811 	msr	BASEPRI, r3
 8012cf8:	f3bf 8f6f 	isb	sy
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	607b      	str	r3, [r7, #4]
 8012d02:	e7fe      	b.n	8012d02 <vTaskSwitchContext+0x6e>
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	3b01      	subs	r3, #1
 8012d08:	60fb      	str	r3, [r7, #12]
 8012d0a:	491d      	ldr	r1, [pc, #116]	; (8012d80 <vTaskSwitchContext+0xec>)
 8012d0c:	68fa      	ldr	r2, [r7, #12]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	4413      	add	r3, r2
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	440b      	add	r3, r1
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d0e5      	beq.n	8012cea <vTaskSwitchContext+0x56>
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	4613      	mov	r3, r2
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	4413      	add	r3, r2
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	4a15      	ldr	r2, [pc, #84]	; (8012d80 <vTaskSwitchContext+0xec>)
 8012d2a:	4413      	add	r3, r2
 8012d2c:	60bb      	str	r3, [r7, #8]
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	685a      	ldr	r2, [r3, #4]
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	605a      	str	r2, [r3, #4]
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	685a      	ldr	r2, [r3, #4]
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	3308      	adds	r3, #8
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d104      	bne.n	8012d4e <vTaskSwitchContext+0xba>
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	685a      	ldr	r2, [r3, #4]
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	605a      	str	r2, [r3, #4]
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	68db      	ldr	r3, [r3, #12]
 8012d54:	4a08      	ldr	r2, [pc, #32]	; (8012d78 <vTaskSwitchContext+0xe4>)
 8012d56:	6013      	str	r3, [r2, #0]
 8012d58:	4a08      	ldr	r2, [pc, #32]	; (8012d7c <vTaskSwitchContext+0xe8>)
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	6013      	str	r3, [r2, #0]
}
 8012d5e:	bf00      	nop
 8012d60:	3710      	adds	r7, #16
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	20000f44 	.word	0x20000f44
 8012d6c:	20000f30 	.word	0x20000f30
 8012d70:	20000f4c 	.word	0x20000f4c
 8012d74:	20000f48 	.word	0x20000f48
 8012d78:	20000a48 	.word	0x20000a48
 8012d7c:	20000f24 	.word	0x20000f24
 8012d80:	20000a4c 	.word	0x20000a4c

08012d84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d109      	bne.n	8012da8 <vTaskPlaceOnEventList+0x24>
 8012d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d98:	f383 8811 	msr	BASEPRI, r3
 8012d9c:	f3bf 8f6f 	isb	sy
 8012da0:	f3bf 8f4f 	dsb	sy
 8012da4:	60fb      	str	r3, [r7, #12]
 8012da6:	e7fe      	b.n	8012da6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012da8:	4b07      	ldr	r3, [pc, #28]	; (8012dc8 <vTaskPlaceOnEventList+0x44>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	3318      	adds	r3, #24
 8012dae:	4619      	mov	r1, r3
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f7fe fbc3 	bl	801153c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012db6:	2101      	movs	r1, #1
 8012db8:	6838      	ldr	r0, [r7, #0]
 8012dba:	f000 fb89 	bl	80134d0 <prvAddCurrentTaskToDelayedList>
}
 8012dbe:	bf00      	nop
 8012dc0:	3710      	adds	r7, #16
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	20000a48 	.word	0x20000a48

08012dcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b086      	sub	sp, #24
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d109      	bne.n	8012df2 <vTaskPlaceOnEventListRestricted+0x26>
 8012dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de2:	f383 8811 	msr	BASEPRI, r3
 8012de6:	f3bf 8f6f 	isb	sy
 8012dea:	f3bf 8f4f 	dsb	sy
 8012dee:	617b      	str	r3, [r7, #20]
 8012df0:	e7fe      	b.n	8012df0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012df2:	4b0a      	ldr	r3, [pc, #40]	; (8012e1c <vTaskPlaceOnEventListRestricted+0x50>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	3318      	adds	r3, #24
 8012df8:	4619      	mov	r1, r3
 8012dfa:	68f8      	ldr	r0, [r7, #12]
 8012dfc:	f7fe fb7b 	bl	80114f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d002      	beq.n	8012e0c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8012e06:	f04f 33ff 	mov.w	r3, #4294967295
 8012e0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012e0c:	6879      	ldr	r1, [r7, #4]
 8012e0e:	68b8      	ldr	r0, [r7, #8]
 8012e10:	f000 fb5e 	bl	80134d0 <prvAddCurrentTaskToDelayedList>
	}
 8012e14:	bf00      	nop
 8012e16:	3718      	adds	r7, #24
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}
 8012e1c:	20000a48 	.word	0x20000a48

08012e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b086      	sub	sp, #24
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d109      	bne.n	8012e4a <xTaskRemoveFromEventList+0x2a>
 8012e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3a:	f383 8811 	msr	BASEPRI, r3
 8012e3e:	f3bf 8f6f 	isb	sy
 8012e42:	f3bf 8f4f 	dsb	sy
 8012e46:	60fb      	str	r3, [r7, #12]
 8012e48:	e7fe      	b.n	8012e48 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	3318      	adds	r3, #24
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7fe fbac 	bl	80115ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e54:	4b1d      	ldr	r3, [pc, #116]	; (8012ecc <xTaskRemoveFromEventList+0xac>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d11d      	bne.n	8012e98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	3304      	adds	r3, #4
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7fe fba3 	bl	80115ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e6a:	4b19      	ldr	r3, [pc, #100]	; (8012ed0 <xTaskRemoveFromEventList+0xb0>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d903      	bls.n	8012e7a <xTaskRemoveFromEventList+0x5a>
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e76:	4a16      	ldr	r2, [pc, #88]	; (8012ed0 <xTaskRemoveFromEventList+0xb0>)
 8012e78:	6013      	str	r3, [r2, #0]
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e7e:	4613      	mov	r3, r2
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	4413      	add	r3, r2
 8012e84:	009b      	lsls	r3, r3, #2
 8012e86:	4a13      	ldr	r2, [pc, #76]	; (8012ed4 <xTaskRemoveFromEventList+0xb4>)
 8012e88:	441a      	add	r2, r3
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	4619      	mov	r1, r3
 8012e90:	4610      	mov	r0, r2
 8012e92:	f7fe fb30 	bl	80114f6 <vListInsertEnd>
 8012e96:	e005      	b.n	8012ea4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	3318      	adds	r3, #24
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	480e      	ldr	r0, [pc, #56]	; (8012ed8 <xTaskRemoveFromEventList+0xb8>)
 8012ea0:	f7fe fb29 	bl	80114f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea8:	4b0c      	ldr	r3, [pc, #48]	; (8012edc <xTaskRemoveFromEventList+0xbc>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d905      	bls.n	8012ebe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012eb6:	4b0a      	ldr	r3, [pc, #40]	; (8012ee0 <xTaskRemoveFromEventList+0xc0>)
 8012eb8:	2201      	movs	r2, #1
 8012eba:	601a      	str	r2, [r3, #0]
 8012ebc:	e001      	b.n	8012ec2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012ec2:	697b      	ldr	r3, [r7, #20]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3718      	adds	r7, #24
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	20000f44 	.word	0x20000f44
 8012ed0:	20000f24 	.word	0x20000f24
 8012ed4:	20000a4c 	.word	0x20000a4c
 8012ed8:	20000edc 	.word	0x20000edc
 8012edc:	20000a48 	.word	0x20000a48
 8012ee0:	20000f30 	.word	0x20000f30

08012ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012eec:	4b06      	ldr	r3, [pc, #24]	; (8012f08 <vTaskInternalSetTimeOutState+0x24>)
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012ef4:	4b05      	ldr	r3, [pc, #20]	; (8012f0c <vTaskInternalSetTimeOutState+0x28>)
 8012ef6:	681a      	ldr	r2, [r3, #0]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	605a      	str	r2, [r3, #4]
}
 8012efc:	bf00      	nop
 8012efe:	370c      	adds	r7, #12
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bc80      	pop	{r7}
 8012f04:	4770      	bx	lr
 8012f06:	bf00      	nop
 8012f08:	20000f34 	.word	0x20000f34
 8012f0c:	20000f20 	.word	0x20000f20

08012f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b088      	sub	sp, #32
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d109      	bne.n	8012f34 <xTaskCheckForTimeOut+0x24>
 8012f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	613b      	str	r3, [r7, #16]
 8012f32:	e7fe      	b.n	8012f32 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d109      	bne.n	8012f4e <xTaskCheckForTimeOut+0x3e>
 8012f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	60fb      	str	r3, [r7, #12]
 8012f4c:	e7fe      	b.n	8012f4c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012f4e:	f000 ff0b 	bl	8013d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012f52:	4b1d      	ldr	r3, [pc, #116]	; (8012fc8 <xTaskCheckForTimeOut+0xb8>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	69ba      	ldr	r2, [r7, #24]
 8012f5e:	1ad3      	subs	r3, r2, r3
 8012f60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f6a:	d102      	bne.n	8012f72 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	61fb      	str	r3, [r7, #28]
 8012f70:	e023      	b.n	8012fba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681a      	ldr	r2, [r3, #0]
 8012f76:	4b15      	ldr	r3, [pc, #84]	; (8012fcc <xTaskCheckForTimeOut+0xbc>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d007      	beq.n	8012f8e <xTaskCheckForTimeOut+0x7e>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	69ba      	ldr	r2, [r7, #24]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d302      	bcc.n	8012f8e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012f88:	2301      	movs	r3, #1
 8012f8a:	61fb      	str	r3, [r7, #28]
 8012f8c:	e015      	b.n	8012fba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	697a      	ldr	r2, [r7, #20]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d20b      	bcs.n	8012fb0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	697b      	ldr	r3, [r7, #20]
 8012f9e:	1ad2      	subs	r2, r2, r3
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7ff ff9d 	bl	8012ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012faa:	2300      	movs	r3, #0
 8012fac:	61fb      	str	r3, [r7, #28]
 8012fae:	e004      	b.n	8012fba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012fba:	f000 ff03 	bl	8013dc4 <vPortExitCritical>

	return xReturn;
 8012fbe:	69fb      	ldr	r3, [r7, #28]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3720      	adds	r7, #32
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	20000f20 	.word	0x20000f20
 8012fcc:	20000f34 	.word	0x20000f34

08012fd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012fd4:	4b03      	ldr	r3, [pc, #12]	; (8012fe4 <vTaskMissedYield+0x14>)
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	601a      	str	r2, [r3, #0]
}
 8012fda:	bf00      	nop
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bc80      	pop	{r7}
 8012fe0:	4770      	bx	lr
 8012fe2:	bf00      	nop
 8012fe4:	20000f30 	.word	0x20000f30

08012fe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ff0:	f000 f852 	bl	8013098 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ff4:	4b06      	ldr	r3, [pc, #24]	; (8013010 <prvIdleTask+0x28>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d9f9      	bls.n	8012ff0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012ffc:	4b05      	ldr	r3, [pc, #20]	; (8013014 <prvIdleTask+0x2c>)
 8012ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013002:	601a      	str	r2, [r3, #0]
 8013004:	f3bf 8f4f 	dsb	sy
 8013008:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801300c:	e7f0      	b.n	8012ff0 <prvIdleTask+0x8>
 801300e:	bf00      	nop
 8013010:	20000a4c 	.word	0x20000a4c
 8013014:	e000ed04 	.word	0xe000ed04

08013018 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801301e:	2300      	movs	r3, #0
 8013020:	607b      	str	r3, [r7, #4]
 8013022:	e00c      	b.n	801303e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	4613      	mov	r3, r2
 8013028:	009b      	lsls	r3, r3, #2
 801302a:	4413      	add	r3, r2
 801302c:	009b      	lsls	r3, r3, #2
 801302e:	4a12      	ldr	r2, [pc, #72]	; (8013078 <prvInitialiseTaskLists+0x60>)
 8013030:	4413      	add	r3, r2
 8013032:	4618      	mov	r0, r3
 8013034:	f7fe fa34 	bl	80114a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	3301      	adds	r3, #1
 801303c:	607b      	str	r3, [r7, #4]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b37      	cmp	r3, #55	; 0x37
 8013042:	d9ef      	bls.n	8013024 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013044:	480d      	ldr	r0, [pc, #52]	; (801307c <prvInitialiseTaskLists+0x64>)
 8013046:	f7fe fa2b 	bl	80114a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801304a:	480d      	ldr	r0, [pc, #52]	; (8013080 <prvInitialiseTaskLists+0x68>)
 801304c:	f7fe fa28 	bl	80114a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013050:	480c      	ldr	r0, [pc, #48]	; (8013084 <prvInitialiseTaskLists+0x6c>)
 8013052:	f7fe fa25 	bl	80114a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013056:	480c      	ldr	r0, [pc, #48]	; (8013088 <prvInitialiseTaskLists+0x70>)
 8013058:	f7fe fa22 	bl	80114a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801305c:	480b      	ldr	r0, [pc, #44]	; (801308c <prvInitialiseTaskLists+0x74>)
 801305e:	f7fe fa1f 	bl	80114a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013062:	4b0b      	ldr	r3, [pc, #44]	; (8013090 <prvInitialiseTaskLists+0x78>)
 8013064:	4a05      	ldr	r2, [pc, #20]	; (801307c <prvInitialiseTaskLists+0x64>)
 8013066:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013068:	4b0a      	ldr	r3, [pc, #40]	; (8013094 <prvInitialiseTaskLists+0x7c>)
 801306a:	4a05      	ldr	r2, [pc, #20]	; (8013080 <prvInitialiseTaskLists+0x68>)
 801306c:	601a      	str	r2, [r3, #0]
}
 801306e:	bf00      	nop
 8013070:	3708      	adds	r7, #8
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	20000a4c 	.word	0x20000a4c
 801307c:	20000eac 	.word	0x20000eac
 8013080:	20000ec0 	.word	0x20000ec0
 8013084:	20000edc 	.word	0x20000edc
 8013088:	20000ef0 	.word	0x20000ef0
 801308c:	20000f08 	.word	0x20000f08
 8013090:	20000ed4 	.word	0x20000ed4
 8013094:	20000ed8 	.word	0x20000ed8

08013098 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801309e:	e019      	b.n	80130d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80130a0:	f000 fe62 	bl	8013d68 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80130a4:	4b0f      	ldr	r3, [pc, #60]	; (80130e4 <prvCheckTasksWaitingTermination+0x4c>)
 80130a6:	68db      	ldr	r3, [r3, #12]
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	3304      	adds	r3, #4
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7fe fa7b 	bl	80115ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80130b6:	4b0c      	ldr	r3, [pc, #48]	; (80130e8 <prvCheckTasksWaitingTermination+0x50>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	3b01      	subs	r3, #1
 80130bc:	4a0a      	ldr	r2, [pc, #40]	; (80130e8 <prvCheckTasksWaitingTermination+0x50>)
 80130be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80130c0:	4b0a      	ldr	r3, [pc, #40]	; (80130ec <prvCheckTasksWaitingTermination+0x54>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	3b01      	subs	r3, #1
 80130c6:	4a09      	ldr	r2, [pc, #36]	; (80130ec <prvCheckTasksWaitingTermination+0x54>)
 80130c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80130ca:	f000 fe7b 	bl	8013dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 f80e 	bl	80130f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130d4:	4b05      	ldr	r3, [pc, #20]	; (80130ec <prvCheckTasksWaitingTermination+0x54>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d1e1      	bne.n	80130a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80130dc:	bf00      	nop
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	20000ef0 	.word	0x20000ef0
 80130e8:	20000f1c 	.word	0x20000f1c
 80130ec:	20000f04 	.word	0x20000f04

080130f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d108      	bne.n	8013114 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013106:	4618      	mov	r0, r3
 8013108:	f000 ffe6 	bl	80140d8 <vPortFree>
				vPortFree( pxTCB );
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f000 ffe3 	bl	80140d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013112:	e017      	b.n	8013144 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801311a:	2b01      	cmp	r3, #1
 801311c:	d103      	bne.n	8013126 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 ffda 	bl	80140d8 <vPortFree>
	}
 8013124:	e00e      	b.n	8013144 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801312c:	2b02      	cmp	r3, #2
 801312e:	d009      	beq.n	8013144 <prvDeleteTCB+0x54>
 8013130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013134:	f383 8811 	msr	BASEPRI, r3
 8013138:	f3bf 8f6f 	isb	sy
 801313c:	f3bf 8f4f 	dsb	sy
 8013140:	60fb      	str	r3, [r7, #12]
 8013142:	e7fe      	b.n	8013142 <prvDeleteTCB+0x52>
	}
 8013144:	bf00      	nop
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013152:	4b0e      	ldr	r3, [pc, #56]	; (801318c <prvResetNextTaskUnblockTime+0x40>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d101      	bne.n	8013160 <prvResetNextTaskUnblockTime+0x14>
 801315c:	2301      	movs	r3, #1
 801315e:	e000      	b.n	8013162 <prvResetNextTaskUnblockTime+0x16>
 8013160:	2300      	movs	r3, #0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d004      	beq.n	8013170 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013166:	4b0a      	ldr	r3, [pc, #40]	; (8013190 <prvResetNextTaskUnblockTime+0x44>)
 8013168:	f04f 32ff 	mov.w	r2, #4294967295
 801316c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801316e:	e008      	b.n	8013182 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013170:	4b06      	ldr	r3, [pc, #24]	; (801318c <prvResetNextTaskUnblockTime+0x40>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	68db      	ldr	r3, [r3, #12]
 8013178:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	4a04      	ldr	r2, [pc, #16]	; (8013190 <prvResetNextTaskUnblockTime+0x44>)
 8013180:	6013      	str	r3, [r2, #0]
}
 8013182:	bf00      	nop
 8013184:	370c      	adds	r7, #12
 8013186:	46bd      	mov	sp, r7
 8013188:	bc80      	pop	{r7}
 801318a:	4770      	bx	lr
 801318c:	20000ed4 	.word	0x20000ed4
 8013190:	20000f3c 	.word	0x20000f3c

08013194 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013194:	b480      	push	{r7}
 8013196:	b083      	sub	sp, #12
 8013198:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801319a:	4b04      	ldr	r3, [pc, #16]	; (80131ac <xTaskGetCurrentTaskHandle+0x18>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80131a0:	687b      	ldr	r3, [r7, #4]
	}
 80131a2:	4618      	mov	r0, r3
 80131a4:	370c      	adds	r7, #12
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bc80      	pop	{r7}
 80131aa:	4770      	bx	lr
 80131ac:	20000a48 	.word	0x20000a48

080131b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80131b6:	4b0b      	ldr	r3, [pc, #44]	; (80131e4 <xTaskGetSchedulerState+0x34>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d102      	bne.n	80131c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80131be:	2301      	movs	r3, #1
 80131c0:	607b      	str	r3, [r7, #4]
 80131c2:	e008      	b.n	80131d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131c4:	4b08      	ldr	r3, [pc, #32]	; (80131e8 <xTaskGetSchedulerState+0x38>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d102      	bne.n	80131d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80131cc:	2302      	movs	r3, #2
 80131ce:	607b      	str	r3, [r7, #4]
 80131d0:	e001      	b.n	80131d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80131d2:	2300      	movs	r3, #0
 80131d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80131d6:	687b      	ldr	r3, [r7, #4]
	}
 80131d8:	4618      	mov	r0, r3
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	bc80      	pop	{r7}
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop
 80131e4:	20000f28 	.word	0x20000f28
 80131e8:	20000f44 	.word	0x20000f44

080131ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80131f8:	2300      	movs	r3, #0
 80131fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d056      	beq.n	80132b0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013206:	4b2d      	ldr	r3, [pc, #180]	; (80132bc <xTaskPriorityInherit+0xd0>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801320c:	429a      	cmp	r2, r3
 801320e:	d246      	bcs.n	801329e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	699b      	ldr	r3, [r3, #24]
 8013214:	2b00      	cmp	r3, #0
 8013216:	db06      	blt.n	8013226 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013218:	4b28      	ldr	r3, [pc, #160]	; (80132bc <xTaskPriorityInherit+0xd0>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	6959      	ldr	r1, [r3, #20]
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801322e:	4613      	mov	r3, r2
 8013230:	009b      	lsls	r3, r3, #2
 8013232:	4413      	add	r3, r2
 8013234:	009b      	lsls	r3, r3, #2
 8013236:	4a22      	ldr	r2, [pc, #136]	; (80132c0 <xTaskPriorityInherit+0xd4>)
 8013238:	4413      	add	r3, r2
 801323a:	4299      	cmp	r1, r3
 801323c:	d101      	bne.n	8013242 <xTaskPriorityInherit+0x56>
 801323e:	2301      	movs	r3, #1
 8013240:	e000      	b.n	8013244 <xTaskPriorityInherit+0x58>
 8013242:	2300      	movs	r3, #0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d022      	beq.n	801328e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	3304      	adds	r3, #4
 801324c:	4618      	mov	r0, r3
 801324e:	f7fe f9ad 	bl	80115ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013252:	4b1a      	ldr	r3, [pc, #104]	; (80132bc <xTaskPriorityInherit+0xd0>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013260:	4b18      	ldr	r3, [pc, #96]	; (80132c4 <xTaskPriorityInherit+0xd8>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	429a      	cmp	r2, r3
 8013266:	d903      	bls.n	8013270 <xTaskPriorityInherit+0x84>
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801326c:	4a15      	ldr	r2, [pc, #84]	; (80132c4 <xTaskPriorityInherit+0xd8>)
 801326e:	6013      	str	r3, [r2, #0]
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013274:	4613      	mov	r3, r2
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4413      	add	r3, r2
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	4a10      	ldr	r2, [pc, #64]	; (80132c0 <xTaskPriorityInherit+0xd4>)
 801327e:	441a      	add	r2, r3
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	3304      	adds	r3, #4
 8013284:	4619      	mov	r1, r3
 8013286:	4610      	mov	r0, r2
 8013288:	f7fe f935 	bl	80114f6 <vListInsertEnd>
 801328c:	e004      	b.n	8013298 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801328e:	4b0b      	ldr	r3, [pc, #44]	; (80132bc <xTaskPriorityInherit+0xd0>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013298:	2301      	movs	r3, #1
 801329a:	60fb      	str	r3, [r7, #12]
 801329c:	e008      	b.n	80132b0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132a2:	4b06      	ldr	r3, [pc, #24]	; (80132bc <xTaskPriorityInherit+0xd0>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d201      	bcs.n	80132b0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80132ac:	2301      	movs	r3, #1
 80132ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80132b0:	68fb      	ldr	r3, [r7, #12]
	}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3710      	adds	r7, #16
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	20000a48 	.word	0x20000a48
 80132c0:	20000a4c 	.word	0x20000a4c
 80132c4:	20000f24 	.word	0x20000f24

080132c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b086      	sub	sp, #24
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80132d4:	2300      	movs	r3, #0
 80132d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d054      	beq.n	8013388 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80132de:	4b2d      	ldr	r3, [pc, #180]	; (8013394 <xTaskPriorityDisinherit+0xcc>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	693a      	ldr	r2, [r7, #16]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d009      	beq.n	80132fc <xTaskPriorityDisinherit+0x34>
 80132e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ec:	f383 8811 	msr	BASEPRI, r3
 80132f0:	f3bf 8f6f 	isb	sy
 80132f4:	f3bf 8f4f 	dsb	sy
 80132f8:	60fb      	str	r3, [r7, #12]
 80132fa:	e7fe      	b.n	80132fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013300:	2b00      	cmp	r3, #0
 8013302:	d109      	bne.n	8013318 <xTaskPriorityDisinherit+0x50>
 8013304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013308:	f383 8811 	msr	BASEPRI, r3
 801330c:	f3bf 8f6f 	isb	sy
 8013310:	f3bf 8f4f 	dsb	sy
 8013314:	60bb      	str	r3, [r7, #8]
 8013316:	e7fe      	b.n	8013316 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801331c:	1e5a      	subs	r2, r3, #1
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801332a:	429a      	cmp	r2, r3
 801332c:	d02c      	beq.n	8013388 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801332e:	693b      	ldr	r3, [r7, #16]
 8013330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013332:	2b00      	cmp	r3, #0
 8013334:	d128      	bne.n	8013388 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	3304      	adds	r3, #4
 801333a:	4618      	mov	r0, r3
 801333c:	f7fe f936 	bl	80115ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801334c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013358:	4b0f      	ldr	r3, [pc, #60]	; (8013398 <xTaskPriorityDisinherit+0xd0>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	429a      	cmp	r2, r3
 801335e:	d903      	bls.n	8013368 <xTaskPriorityDisinherit+0xa0>
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013364:	4a0c      	ldr	r2, [pc, #48]	; (8013398 <xTaskPriorityDisinherit+0xd0>)
 8013366:	6013      	str	r3, [r2, #0]
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801336c:	4613      	mov	r3, r2
 801336e:	009b      	lsls	r3, r3, #2
 8013370:	4413      	add	r3, r2
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	4a09      	ldr	r2, [pc, #36]	; (801339c <xTaskPriorityDisinherit+0xd4>)
 8013376:	441a      	add	r2, r3
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	3304      	adds	r3, #4
 801337c:	4619      	mov	r1, r3
 801337e:	4610      	mov	r0, r2
 8013380:	f7fe f8b9 	bl	80114f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013384:	2301      	movs	r3, #1
 8013386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013388:	697b      	ldr	r3, [r7, #20]
	}
 801338a:	4618      	mov	r0, r3
 801338c:	3718      	adds	r7, #24
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	20000a48 	.word	0x20000a48
 8013398:	20000f24 	.word	0x20000f24
 801339c:	20000a4c 	.word	0x20000a4c

080133a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b088      	sub	sp, #32
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80133ae:	2301      	movs	r3, #1
 80133b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d06d      	beq.n	8013494 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d109      	bne.n	80133d4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80133c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c4:	f383 8811 	msr	BASEPRI, r3
 80133c8:	f3bf 8f6f 	isb	sy
 80133cc:	f3bf 8f4f 	dsb	sy
 80133d0:	60fb      	str	r3, [r7, #12]
 80133d2:	e7fe      	b.n	80133d2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133d8:	683a      	ldr	r2, [r7, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d902      	bls.n	80133e4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	61fb      	str	r3, [r7, #28]
 80133e2:	e002      	b.n	80133ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ee:	69fa      	ldr	r2, [r7, #28]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d04f      	beq.n	8013494 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133f8:	697a      	ldr	r2, [r7, #20]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d14a      	bne.n	8013494 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80133fe:	4b27      	ldr	r3, [pc, #156]	; (801349c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	69ba      	ldr	r2, [r7, #24]
 8013404:	429a      	cmp	r2, r3
 8013406:	d109      	bne.n	801341c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340c:	f383 8811 	msr	BASEPRI, r3
 8013410:	f3bf 8f6f 	isb	sy
 8013414:	f3bf 8f4f 	dsb	sy
 8013418:	60bb      	str	r3, [r7, #8]
 801341a:	e7fe      	b.n	801341a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013420:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	69fa      	ldr	r2, [r7, #28]
 8013426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	699b      	ldr	r3, [r3, #24]
 801342c:	2b00      	cmp	r3, #0
 801342e:	db04      	blt.n	801343a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013430:	69fb      	ldr	r3, [r7, #28]
 8013432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	6959      	ldr	r1, [r3, #20]
 801343e:	693a      	ldr	r2, [r7, #16]
 8013440:	4613      	mov	r3, r2
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	4413      	add	r3, r2
 8013446:	009b      	lsls	r3, r3, #2
 8013448:	4a15      	ldr	r2, [pc, #84]	; (80134a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801344a:	4413      	add	r3, r2
 801344c:	4299      	cmp	r1, r3
 801344e:	d101      	bne.n	8013454 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8013450:	2301      	movs	r3, #1
 8013452:	e000      	b.n	8013456 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8013454:	2300      	movs	r3, #0
 8013456:	2b00      	cmp	r3, #0
 8013458:	d01c      	beq.n	8013494 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	3304      	adds	r3, #4
 801345e:	4618      	mov	r0, r3
 8013460:	f7fe f8a4 	bl	80115ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013468:	4b0e      	ldr	r3, [pc, #56]	; (80134a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	429a      	cmp	r2, r3
 801346e:	d903      	bls.n	8013478 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013474:	4a0b      	ldr	r2, [pc, #44]	; (80134a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013476:	6013      	str	r3, [r2, #0]
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801347c:	4613      	mov	r3, r2
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	4413      	add	r3, r2
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	4a06      	ldr	r2, [pc, #24]	; (80134a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013486:	441a      	add	r2, r3
 8013488:	69bb      	ldr	r3, [r7, #24]
 801348a:	3304      	adds	r3, #4
 801348c:	4619      	mov	r1, r3
 801348e:	4610      	mov	r0, r2
 8013490:	f7fe f831 	bl	80114f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013494:	bf00      	nop
 8013496:	3720      	adds	r7, #32
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	20000a48 	.word	0x20000a48
 80134a0:	20000a4c 	.word	0x20000a4c
 80134a4:	20000f24 	.word	0x20000f24

080134a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80134a8:	b480      	push	{r7}
 80134aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80134ac:	4b07      	ldr	r3, [pc, #28]	; (80134cc <pvTaskIncrementMutexHeldCount+0x24>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d004      	beq.n	80134be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80134b4:	4b05      	ldr	r3, [pc, #20]	; (80134cc <pvTaskIncrementMutexHeldCount+0x24>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134ba:	3201      	adds	r2, #1
 80134bc:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80134be:	4b03      	ldr	r3, [pc, #12]	; (80134cc <pvTaskIncrementMutexHeldCount+0x24>)
 80134c0:	681b      	ldr	r3, [r3, #0]
	}
 80134c2:	4618      	mov	r0, r3
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bc80      	pop	{r7}
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	20000a48 	.word	0x20000a48

080134d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134da:	4b21      	ldr	r3, [pc, #132]	; (8013560 <prvAddCurrentTaskToDelayedList+0x90>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134e0:	4b20      	ldr	r3, [pc, #128]	; (8013564 <prvAddCurrentTaskToDelayedList+0x94>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	3304      	adds	r3, #4
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7fe f860 	bl	80115ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134f2:	d10a      	bne.n	801350a <prvAddCurrentTaskToDelayedList+0x3a>
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d007      	beq.n	801350a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134fa:	4b1a      	ldr	r3, [pc, #104]	; (8013564 <prvAddCurrentTaskToDelayedList+0x94>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	3304      	adds	r3, #4
 8013500:	4619      	mov	r1, r3
 8013502:	4819      	ldr	r0, [pc, #100]	; (8013568 <prvAddCurrentTaskToDelayedList+0x98>)
 8013504:	f7fd fff7 	bl	80114f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013508:	e026      	b.n	8013558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801350a:	68fa      	ldr	r2, [r7, #12]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	4413      	add	r3, r2
 8013510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013512:	4b14      	ldr	r3, [pc, #80]	; (8013564 <prvAddCurrentTaskToDelayedList+0x94>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	68ba      	ldr	r2, [r7, #8]
 8013518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801351a:	68ba      	ldr	r2, [r7, #8]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	429a      	cmp	r2, r3
 8013520:	d209      	bcs.n	8013536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013522:	4b12      	ldr	r3, [pc, #72]	; (801356c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	4b0f      	ldr	r3, [pc, #60]	; (8013564 <prvAddCurrentTaskToDelayedList+0x94>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	3304      	adds	r3, #4
 801352c:	4619      	mov	r1, r3
 801352e:	4610      	mov	r0, r2
 8013530:	f7fe f804 	bl	801153c <vListInsert>
}
 8013534:	e010      	b.n	8013558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013536:	4b0e      	ldr	r3, [pc, #56]	; (8013570 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	4b0a      	ldr	r3, [pc, #40]	; (8013564 <prvAddCurrentTaskToDelayedList+0x94>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	3304      	adds	r3, #4
 8013540:	4619      	mov	r1, r3
 8013542:	4610      	mov	r0, r2
 8013544:	f7fd fffa 	bl	801153c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013548:	4b0a      	ldr	r3, [pc, #40]	; (8013574 <prvAddCurrentTaskToDelayedList+0xa4>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	68ba      	ldr	r2, [r7, #8]
 801354e:	429a      	cmp	r2, r3
 8013550:	d202      	bcs.n	8013558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013552:	4a08      	ldr	r2, [pc, #32]	; (8013574 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	6013      	str	r3, [r2, #0]
}
 8013558:	bf00      	nop
 801355a:	3710      	adds	r7, #16
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	20000f20 	.word	0x20000f20
 8013564:	20000a48 	.word	0x20000a48
 8013568:	20000f08 	.word	0x20000f08
 801356c:	20000ed8 	.word	0x20000ed8
 8013570:	20000ed4 	.word	0x20000ed4
 8013574:	20000f3c 	.word	0x20000f3c

08013578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b08a      	sub	sp, #40	; 0x28
 801357c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801357e:	2300      	movs	r3, #0
 8013580:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013582:	f000 fac3 	bl	8013b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013586:	4b1c      	ldr	r3, [pc, #112]	; (80135f8 <xTimerCreateTimerTask+0x80>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d021      	beq.n	80135d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801358e:	2300      	movs	r3, #0
 8013590:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013592:	2300      	movs	r3, #0
 8013594:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013596:	1d3a      	adds	r2, r7, #4
 8013598:	f107 0108 	add.w	r1, r7, #8
 801359c:	f107 030c 	add.w	r3, r7, #12
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7fd ff63 	bl	801146c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80135a6:	6879      	ldr	r1, [r7, #4]
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	68fa      	ldr	r2, [r7, #12]
 80135ac:	9202      	str	r2, [sp, #8]
 80135ae:	9301      	str	r3, [sp, #4]
 80135b0:	2302      	movs	r3, #2
 80135b2:	9300      	str	r3, [sp, #0]
 80135b4:	2300      	movs	r3, #0
 80135b6:	460a      	mov	r2, r1
 80135b8:	4910      	ldr	r1, [pc, #64]	; (80135fc <xTimerCreateTimerTask+0x84>)
 80135ba:	4811      	ldr	r0, [pc, #68]	; (8013600 <xTimerCreateTimerTask+0x88>)
 80135bc:	f7fe ffc0 	bl	8012540 <xTaskCreateStatic>
 80135c0:	4602      	mov	r2, r0
 80135c2:	4b10      	ldr	r3, [pc, #64]	; (8013604 <xTimerCreateTimerTask+0x8c>)
 80135c4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80135c6:	4b0f      	ldr	r3, [pc, #60]	; (8013604 <xTimerCreateTimerTask+0x8c>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80135ce:	2301      	movs	r3, #1
 80135d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d109      	bne.n	80135ec <xTimerCreateTimerTask+0x74>
 80135d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135dc:	f383 8811 	msr	BASEPRI, r3
 80135e0:	f3bf 8f6f 	isb	sy
 80135e4:	f3bf 8f4f 	dsb	sy
 80135e8:	613b      	str	r3, [r7, #16]
 80135ea:	e7fe      	b.n	80135ea <xTimerCreateTimerTask+0x72>
	return xReturn;
 80135ec:	697b      	ldr	r3, [r7, #20]
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3718      	adds	r7, #24
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	20000f80 	.word	0x20000f80
 80135fc:	0801a65c 	.word	0x0801a65c
 8013600:	08013721 	.word	0x08013721
 8013604:	20000f84 	.word	0x20000f84

08013608 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b08a      	sub	sp, #40	; 0x28
 801360c:	af00      	add	r7, sp, #0
 801360e:	60f8      	str	r0, [r7, #12]
 8013610:	60b9      	str	r1, [r7, #8]
 8013612:	607a      	str	r2, [r7, #4]
 8013614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013616:	2300      	movs	r3, #0
 8013618:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d109      	bne.n	8013634 <xTimerGenericCommand+0x2c>
 8013620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	623b      	str	r3, [r7, #32]
 8013632:	e7fe      	b.n	8013632 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013634:	4b19      	ldr	r3, [pc, #100]	; (801369c <xTimerGenericCommand+0x94>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d02a      	beq.n	8013692 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	2b05      	cmp	r3, #5
 801364c:	dc18      	bgt.n	8013680 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801364e:	f7ff fdaf 	bl	80131b0 <xTaskGetSchedulerState>
 8013652:	4603      	mov	r3, r0
 8013654:	2b02      	cmp	r3, #2
 8013656:	d109      	bne.n	801366c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013658:	4b10      	ldr	r3, [pc, #64]	; (801369c <xTimerGenericCommand+0x94>)
 801365a:	6818      	ldr	r0, [r3, #0]
 801365c:	f107 0110 	add.w	r1, r7, #16
 8013660:	2300      	movs	r3, #0
 8013662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013664:	f7fe f9ec 	bl	8011a40 <xQueueGenericSend>
 8013668:	6278      	str	r0, [r7, #36]	; 0x24
 801366a:	e012      	b.n	8013692 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801366c:	4b0b      	ldr	r3, [pc, #44]	; (801369c <xTimerGenericCommand+0x94>)
 801366e:	6818      	ldr	r0, [r3, #0]
 8013670:	f107 0110 	add.w	r1, r7, #16
 8013674:	2300      	movs	r3, #0
 8013676:	2200      	movs	r2, #0
 8013678:	f7fe f9e2 	bl	8011a40 <xQueueGenericSend>
 801367c:	6278      	str	r0, [r7, #36]	; 0x24
 801367e:	e008      	b.n	8013692 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013680:	4b06      	ldr	r3, [pc, #24]	; (801369c <xTimerGenericCommand+0x94>)
 8013682:	6818      	ldr	r0, [r3, #0]
 8013684:	f107 0110 	add.w	r1, r7, #16
 8013688:	2300      	movs	r3, #0
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	f7fe fad2 	bl	8011c34 <xQueueGenericSendFromISR>
 8013690:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013694:	4618      	mov	r0, r3
 8013696:	3728      	adds	r7, #40	; 0x28
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	20000f80 	.word	0x20000f80

080136a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b088      	sub	sp, #32
 80136a4:	af02      	add	r7, sp, #8
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80136aa:	4b1c      	ldr	r3, [pc, #112]	; (801371c <prvProcessExpiredTimer+0x7c>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	3304      	adds	r3, #4
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fd ff77 	bl	80115ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	69db      	ldr	r3, [r3, #28]
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d121      	bne.n	801370a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	699a      	ldr	r2, [r3, #24]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	18d1      	adds	r1, r2, r3
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	683a      	ldr	r2, [r7, #0]
 80136d2:	6978      	ldr	r0, [r7, #20]
 80136d4:	f000 f8c8 	bl	8013868 <prvInsertTimerInActiveList>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d015      	beq.n	801370a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80136de:	2300      	movs	r3, #0
 80136e0:	9300      	str	r3, [sp, #0]
 80136e2:	2300      	movs	r3, #0
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	2100      	movs	r1, #0
 80136e8:	6978      	ldr	r0, [r7, #20]
 80136ea:	f7ff ff8d 	bl	8013608 <xTimerGenericCommand>
 80136ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d109      	bne.n	801370a <prvProcessExpiredTimer+0x6a>
 80136f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fa:	f383 8811 	msr	BASEPRI, r3
 80136fe:	f3bf 8f6f 	isb	sy
 8013702:	f3bf 8f4f 	dsb	sy
 8013706:	60fb      	str	r3, [r7, #12]
 8013708:	e7fe      	b.n	8013708 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801370e:	6978      	ldr	r0, [r7, #20]
 8013710:	4798      	blx	r3
}
 8013712:	bf00      	nop
 8013714:	3718      	adds	r7, #24
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	20000f78 	.word	0x20000f78

08013720 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013728:	f107 0308 	add.w	r3, r7, #8
 801372c:	4618      	mov	r0, r3
 801372e:	f000 f857 	bl	80137e0 <prvGetNextExpireTime>
 8013732:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	4619      	mov	r1, r3
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	f000 f803 	bl	8013744 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801373e:	f000 f8d5 	bl	80138ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013742:	e7f1      	b.n	8013728 <prvTimerTask+0x8>

08013744 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801374e:	f7ff f92b 	bl	80129a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013752:	f107 0308 	add.w	r3, r7, #8
 8013756:	4618      	mov	r0, r3
 8013758:	f000 f866 	bl	8013828 <prvSampleTimeNow>
 801375c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d130      	bne.n	80137c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d10a      	bne.n	8013780 <prvProcessTimerOrBlockTask+0x3c>
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	429a      	cmp	r2, r3
 8013770:	d806      	bhi.n	8013780 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013772:	f7ff f927 	bl	80129c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013776:	68f9      	ldr	r1, [r7, #12]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7ff ff91 	bl	80136a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801377e:	e024      	b.n	80137ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d008      	beq.n	8013798 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013786:	4b13      	ldr	r3, [pc, #76]	; (80137d4 <prvProcessTimerOrBlockTask+0x90>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	2b00      	cmp	r3, #0
 801378e:	bf0c      	ite	eq
 8013790:	2301      	moveq	r3, #1
 8013792:	2300      	movne	r3, #0
 8013794:	b2db      	uxtb	r3, r3
 8013796:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013798:	4b0f      	ldr	r3, [pc, #60]	; (80137d8 <prvProcessTimerOrBlockTask+0x94>)
 801379a:	6818      	ldr	r0, [r3, #0]
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	1ad3      	subs	r3, r2, r3
 80137a2:	683a      	ldr	r2, [r7, #0]
 80137a4:	4619      	mov	r1, r3
 80137a6:	f7fe fe97 	bl	80124d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80137aa:	f7ff f90b 	bl	80129c4 <xTaskResumeAll>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d10a      	bne.n	80137ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80137b4:	4b09      	ldr	r3, [pc, #36]	; (80137dc <prvProcessTimerOrBlockTask+0x98>)
 80137b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ba:	601a      	str	r2, [r3, #0]
 80137bc:	f3bf 8f4f 	dsb	sy
 80137c0:	f3bf 8f6f 	isb	sy
}
 80137c4:	e001      	b.n	80137ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80137c6:	f7ff f8fd 	bl	80129c4 <xTaskResumeAll>
}
 80137ca:	bf00      	nop
 80137cc:	3710      	adds	r7, #16
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	20000f7c 	.word	0x20000f7c
 80137d8:	20000f80 	.word	0x20000f80
 80137dc:	e000ed04 	.word	0xe000ed04

080137e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80137e0:	b480      	push	{r7}
 80137e2:	b085      	sub	sp, #20
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80137e8:	4b0e      	ldr	r3, [pc, #56]	; (8013824 <prvGetNextExpireTime+0x44>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	bf0c      	ite	eq
 80137f2:	2301      	moveq	r3, #1
 80137f4:	2300      	movne	r3, #0
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	461a      	mov	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d105      	bne.n	8013812 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013806:	4b07      	ldr	r3, [pc, #28]	; (8013824 <prvGetNextExpireTime+0x44>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	68db      	ldr	r3, [r3, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	60fb      	str	r3, [r7, #12]
 8013810:	e001      	b.n	8013816 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013812:	2300      	movs	r3, #0
 8013814:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013816:	68fb      	ldr	r3, [r7, #12]
}
 8013818:	4618      	mov	r0, r3
 801381a:	3714      	adds	r7, #20
 801381c:	46bd      	mov	sp, r7
 801381e:	bc80      	pop	{r7}
 8013820:	4770      	bx	lr
 8013822:	bf00      	nop
 8013824:	20000f78 	.word	0x20000f78

08013828 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b084      	sub	sp, #16
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013830:	f7ff f964 	bl	8012afc <xTaskGetTickCount>
 8013834:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013836:	4b0b      	ldr	r3, [pc, #44]	; (8013864 <prvSampleTimeNow+0x3c>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	68fa      	ldr	r2, [r7, #12]
 801383c:	429a      	cmp	r2, r3
 801383e:	d205      	bcs.n	801384c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013840:	f000 f904 	bl	8013a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2201      	movs	r2, #1
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	e002      	b.n	8013852 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2200      	movs	r2, #0
 8013850:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013852:	4a04      	ldr	r2, [pc, #16]	; (8013864 <prvSampleTimeNow+0x3c>)
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013858:	68fb      	ldr	r3, [r7, #12]
}
 801385a:	4618      	mov	r0, r3
 801385c:	3710      	adds	r7, #16
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	20000f88 	.word	0x20000f88

08013868 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
 8013874:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013876:	2300      	movs	r3, #0
 8013878:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	68ba      	ldr	r2, [r7, #8]
 801387e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	68fa      	ldr	r2, [r7, #12]
 8013884:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013886:	68ba      	ldr	r2, [r7, #8]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	429a      	cmp	r2, r3
 801388c:	d812      	bhi.n	80138b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	1ad2      	subs	r2, r2, r3
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	699b      	ldr	r3, [r3, #24]
 8013898:	429a      	cmp	r2, r3
 801389a:	d302      	bcc.n	80138a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801389c:	2301      	movs	r3, #1
 801389e:	617b      	str	r3, [r7, #20]
 80138a0:	e01b      	b.n	80138da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80138a2:	4b10      	ldr	r3, [pc, #64]	; (80138e4 <prvInsertTimerInActiveList+0x7c>)
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	3304      	adds	r3, #4
 80138aa:	4619      	mov	r1, r3
 80138ac:	4610      	mov	r0, r2
 80138ae:	f7fd fe45 	bl	801153c <vListInsert>
 80138b2:	e012      	b.n	80138da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d206      	bcs.n	80138ca <prvInsertTimerInActiveList+0x62>
 80138bc:	68ba      	ldr	r2, [r7, #8]
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d302      	bcc.n	80138ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80138c4:	2301      	movs	r3, #1
 80138c6:	617b      	str	r3, [r7, #20]
 80138c8:	e007      	b.n	80138da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80138ca:	4b07      	ldr	r3, [pc, #28]	; (80138e8 <prvInsertTimerInActiveList+0x80>)
 80138cc:	681a      	ldr	r2, [r3, #0]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	3304      	adds	r3, #4
 80138d2:	4619      	mov	r1, r3
 80138d4:	4610      	mov	r0, r2
 80138d6:	f7fd fe31 	bl	801153c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80138da:	697b      	ldr	r3, [r7, #20]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3718      	adds	r7, #24
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	20000f7c 	.word	0x20000f7c
 80138e8:	20000f78 	.word	0x20000f78

080138ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b08e      	sub	sp, #56	; 0x38
 80138f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80138f2:	e099      	b.n	8013a28 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	da17      	bge.n	801392a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80138fa:	1d3b      	adds	r3, r7, #4
 80138fc:	3304      	adds	r3, #4
 80138fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013902:	2b00      	cmp	r3, #0
 8013904:	d109      	bne.n	801391a <prvProcessReceivedCommands+0x2e>
 8013906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390a:	f383 8811 	msr	BASEPRI, r3
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	f3bf 8f4f 	dsb	sy
 8013916:	61fb      	str	r3, [r7, #28]
 8013918:	e7fe      	b.n	8013918 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013920:	6850      	ldr	r0, [r2, #4]
 8013922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013924:	6892      	ldr	r2, [r2, #8]
 8013926:	4611      	mov	r1, r2
 8013928:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	db7a      	blt.n	8013a26 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013936:	695b      	ldr	r3, [r3, #20]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d004      	beq.n	8013946 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801393e:	3304      	adds	r3, #4
 8013940:	4618      	mov	r0, r3
 8013942:	f7fd fe33 	bl	80115ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013946:	463b      	mov	r3, r7
 8013948:	4618      	mov	r0, r3
 801394a:	f7ff ff6d 	bl	8013828 <prvSampleTimeNow>
 801394e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2b09      	cmp	r3, #9
 8013954:	d868      	bhi.n	8013a28 <prvProcessReceivedCommands+0x13c>
 8013956:	a201      	add	r2, pc, #4	; (adr r2, 801395c <prvProcessReceivedCommands+0x70>)
 8013958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801395c:	08013985 	.word	0x08013985
 8013960:	08013985 	.word	0x08013985
 8013964:	08013985 	.word	0x08013985
 8013968:	08013a29 	.word	0x08013a29
 801396c:	080139df 	.word	0x080139df
 8013970:	08013a15 	.word	0x08013a15
 8013974:	08013985 	.word	0x08013985
 8013978:	08013985 	.word	0x08013985
 801397c:	08013a29 	.word	0x08013a29
 8013980:	080139df 	.word	0x080139df
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013988:	699b      	ldr	r3, [r3, #24]
 801398a:	18d1      	adds	r1, r2, r3
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013992:	f7ff ff69 	bl	8013868 <prvInsertTimerInActiveList>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d045      	beq.n	8013a28 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80139a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a6:	69db      	ldr	r3, [r3, #28]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d13d      	bne.n	8013a28 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80139ac:	68ba      	ldr	r2, [r7, #8]
 80139ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b0:	699b      	ldr	r3, [r3, #24]
 80139b2:	441a      	add	r2, r3
 80139b4:	2300      	movs	r3, #0
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	2300      	movs	r3, #0
 80139ba:	2100      	movs	r1, #0
 80139bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139be:	f7ff fe23 	bl	8013608 <xTimerGenericCommand>
 80139c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d12e      	bne.n	8013a28 <prvProcessReceivedCommands+0x13c>
 80139ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ce:	f383 8811 	msr	BASEPRI, r3
 80139d2:	f3bf 8f6f 	isb	sy
 80139d6:	f3bf 8f4f 	dsb	sy
 80139da:	61bb      	str	r3, [r7, #24]
 80139dc:	e7fe      	b.n	80139dc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80139e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e6:	699b      	ldr	r3, [r3, #24]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d109      	bne.n	8013a00 <prvProcessReceivedCommands+0x114>
 80139ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f0:	f383 8811 	msr	BASEPRI, r3
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	617b      	str	r3, [r7, #20]
 80139fe:	e7fe      	b.n	80139fe <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a02:	699a      	ldr	r2, [r3, #24]
 8013a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a06:	18d1      	adds	r1, r2, r3
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a0e:	f7ff ff2b 	bl	8013868 <prvInsertTimerInActiveList>
					break;
 8013a12:	e009      	b.n	8013a28 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d104      	bne.n	8013a28 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8013a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a20:	f000 fb5a 	bl	80140d8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013a24:	e000      	b.n	8013a28 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013a26:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013a28:	4b07      	ldr	r3, [pc, #28]	; (8013a48 <prvProcessReceivedCommands+0x15c>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	1d39      	adds	r1, r7, #4
 8013a2e:	2200      	movs	r2, #0
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fe fa1d 	bl	8011e70 <xQueueReceive>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	f47f af5b 	bne.w	80138f4 <prvProcessReceivedCommands+0x8>
	}
}
 8013a3e:	bf00      	nop
 8013a40:	3730      	adds	r7, #48	; 0x30
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	20000f80 	.word	0x20000f80

08013a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b088      	sub	sp, #32
 8013a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013a52:	e044      	b.n	8013ade <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a54:	4b2b      	ldr	r3, [pc, #172]	; (8013b04 <prvSwitchTimerLists+0xb8>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a5e:	4b29      	ldr	r3, [pc, #164]	; (8013b04 <prvSwitchTimerLists+0xb8>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7fd fd9d 	bl	80115ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a76:	68f8      	ldr	r0, [r7, #12]
 8013a78:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	69db      	ldr	r3, [r3, #28]
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d12d      	bne.n	8013ade <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	699b      	ldr	r3, [r3, #24]
 8013a86:	693a      	ldr	r2, [r7, #16]
 8013a88:	4413      	add	r3, r2
 8013a8a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d90e      	bls.n	8013ab2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	68ba      	ldr	r2, [r7, #8]
 8013a98:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	68fa      	ldr	r2, [r7, #12]
 8013a9e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013aa0:	4b18      	ldr	r3, [pc, #96]	; (8013b04 <prvSwitchTimerLists+0xb8>)
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	3304      	adds	r3, #4
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	4610      	mov	r0, r2
 8013aac:	f7fd fd46 	bl	801153c <vListInsert>
 8013ab0:	e015      	b.n	8013ade <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	693a      	ldr	r2, [r7, #16]
 8013aba:	2100      	movs	r1, #0
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7ff fda3 	bl	8013608 <xTimerGenericCommand>
 8013ac2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d109      	bne.n	8013ade <prvSwitchTimerLists+0x92>
 8013aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ace:	f383 8811 	msr	BASEPRI, r3
 8013ad2:	f3bf 8f6f 	isb	sy
 8013ad6:	f3bf 8f4f 	dsb	sy
 8013ada:	603b      	str	r3, [r7, #0]
 8013adc:	e7fe      	b.n	8013adc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013ade:	4b09      	ldr	r3, [pc, #36]	; (8013b04 <prvSwitchTimerLists+0xb8>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1b5      	bne.n	8013a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013ae8:	4b06      	ldr	r3, [pc, #24]	; (8013b04 <prvSwitchTimerLists+0xb8>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013aee:	4b06      	ldr	r3, [pc, #24]	; (8013b08 <prvSwitchTimerLists+0xbc>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	4a04      	ldr	r2, [pc, #16]	; (8013b04 <prvSwitchTimerLists+0xb8>)
 8013af4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013af6:	4a04      	ldr	r2, [pc, #16]	; (8013b08 <prvSwitchTimerLists+0xbc>)
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	6013      	str	r3, [r2, #0]
}
 8013afc:	bf00      	nop
 8013afe:	3718      	adds	r7, #24
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	20000f78 	.word	0x20000f78
 8013b08:	20000f7c 	.word	0x20000f7c

08013b0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013b12:	f000 f929 	bl	8013d68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013b16:	4b15      	ldr	r3, [pc, #84]	; (8013b6c <prvCheckForValidListAndQueue+0x60>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d120      	bne.n	8013b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013b1e:	4814      	ldr	r0, [pc, #80]	; (8013b70 <prvCheckForValidListAndQueue+0x64>)
 8013b20:	f7fd fcbe 	bl	80114a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013b24:	4813      	ldr	r0, [pc, #76]	; (8013b74 <prvCheckForValidListAndQueue+0x68>)
 8013b26:	f7fd fcbb 	bl	80114a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013b2a:	4b13      	ldr	r3, [pc, #76]	; (8013b78 <prvCheckForValidListAndQueue+0x6c>)
 8013b2c:	4a10      	ldr	r2, [pc, #64]	; (8013b70 <prvCheckForValidListAndQueue+0x64>)
 8013b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013b30:	4b12      	ldr	r3, [pc, #72]	; (8013b7c <prvCheckForValidListAndQueue+0x70>)
 8013b32:	4a10      	ldr	r2, [pc, #64]	; (8013b74 <prvCheckForValidListAndQueue+0x68>)
 8013b34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013b36:	2300      	movs	r3, #0
 8013b38:	9300      	str	r3, [sp, #0]
 8013b3a:	4b11      	ldr	r3, [pc, #68]	; (8013b80 <prvCheckForValidListAndQueue+0x74>)
 8013b3c:	4a11      	ldr	r2, [pc, #68]	; (8013b84 <prvCheckForValidListAndQueue+0x78>)
 8013b3e:	2110      	movs	r1, #16
 8013b40:	200a      	movs	r0, #10
 8013b42:	f7fd fdc5 	bl	80116d0 <xQueueGenericCreateStatic>
 8013b46:	4602      	mov	r2, r0
 8013b48:	4b08      	ldr	r3, [pc, #32]	; (8013b6c <prvCheckForValidListAndQueue+0x60>)
 8013b4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013b4c:	4b07      	ldr	r3, [pc, #28]	; (8013b6c <prvCheckForValidListAndQueue+0x60>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d005      	beq.n	8013b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013b54:	4b05      	ldr	r3, [pc, #20]	; (8013b6c <prvCheckForValidListAndQueue+0x60>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	490b      	ldr	r1, [pc, #44]	; (8013b88 <prvCheckForValidListAndQueue+0x7c>)
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fe fc94 	bl	8012488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013b60:	f000 f930 	bl	8013dc4 <vPortExitCritical>
}
 8013b64:	bf00      	nop
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	20000f80 	.word	0x20000f80
 8013b70:	20000f50 	.word	0x20000f50
 8013b74:	20000f64 	.word	0x20000f64
 8013b78:	20000f78 	.word	0x20000f78
 8013b7c:	20000f7c 	.word	0x20000f7c
 8013b80:	2000102c 	.word	0x2000102c
 8013b84:	20000f8c 	.word	0x20000f8c
 8013b88:	0801a664 	.word	0x0801a664

08013b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b085      	sub	sp, #20
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	3b04      	subs	r3, #4
 8013b9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	3b04      	subs	r3, #4
 8013baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	f023 0201 	bic.w	r2, r3, #1
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	3b04      	subs	r3, #4
 8013bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013bbc:	4a08      	ldr	r2, [pc, #32]	; (8013be0 <pxPortInitialiseStack+0x54>)
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	3b14      	subs	r3, #20
 8013bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	3b20      	subs	r3, #32
 8013bd2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3714      	adds	r7, #20
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bc80      	pop	{r7}
 8013bde:	4770      	bx	lr
 8013be0:	08013be5 	.word	0x08013be5

08013be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013be4:	b480      	push	{r7}
 8013be6:	b085      	sub	sp, #20
 8013be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8013bea:	2300      	movs	r3, #0
 8013bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013bee:	4b10      	ldr	r3, [pc, #64]	; (8013c30 <prvTaskExitError+0x4c>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf6:	d009      	beq.n	8013c0c <prvTaskExitError+0x28>
 8013bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfc:	f383 8811 	msr	BASEPRI, r3
 8013c00:	f3bf 8f6f 	isb	sy
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	60fb      	str	r3, [r7, #12]
 8013c0a:	e7fe      	b.n	8013c0a <prvTaskExitError+0x26>
 8013c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c10:	f383 8811 	msr	BASEPRI, r3
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013c1e:	bf00      	nop
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d0fc      	beq.n	8013c20 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013c26:	bf00      	nop
 8013c28:	3714      	adds	r7, #20
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bc80      	pop	{r7}
 8013c2e:	4770      	bx	lr
 8013c30:	200000d4 	.word	0x200000d4
	...

08013c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013c40:	4b07      	ldr	r3, [pc, #28]	; (8013c60 <pxCurrentTCBConst2>)
 8013c42:	6819      	ldr	r1, [r3, #0]
 8013c44:	6808      	ldr	r0, [r1, #0]
 8013c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013c4a:	f380 8809 	msr	PSP, r0
 8013c4e:	f3bf 8f6f 	isb	sy
 8013c52:	f04f 0000 	mov.w	r0, #0
 8013c56:	f380 8811 	msr	BASEPRI, r0
 8013c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8013c5e:	4770      	bx	lr

08013c60 <pxCurrentTCBConst2>:
 8013c60:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013c64:	bf00      	nop
 8013c66:	bf00      	nop

08013c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013c68:	4806      	ldr	r0, [pc, #24]	; (8013c84 <prvPortStartFirstTask+0x1c>)
 8013c6a:	6800      	ldr	r0, [r0, #0]
 8013c6c:	6800      	ldr	r0, [r0, #0]
 8013c6e:	f380 8808 	msr	MSP, r0
 8013c72:	b662      	cpsie	i
 8013c74:	b661      	cpsie	f
 8013c76:	f3bf 8f4f 	dsb	sy
 8013c7a:	f3bf 8f6f 	isb	sy
 8013c7e:	df00      	svc	0
 8013c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013c82:	bf00      	nop
 8013c84:	e000ed08 	.word	0xe000ed08

08013c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013c8e:	4b31      	ldr	r3, [pc, #196]	; (8013d54 <xPortStartScheduler+0xcc>)
 8013c90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	b2db      	uxtb	r3, r3
 8013c98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	22ff      	movs	r2, #255	; 0xff
 8013c9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013ca8:	78fb      	ldrb	r3, [r7, #3]
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013cb0:	b2da      	uxtb	r2, r3
 8013cb2:	4b29      	ldr	r3, [pc, #164]	; (8013d58 <xPortStartScheduler+0xd0>)
 8013cb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013cb6:	4b29      	ldr	r3, [pc, #164]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013cb8:	2207      	movs	r2, #7
 8013cba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013cbc:	e009      	b.n	8013cd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013cbe:	4b27      	ldr	r3, [pc, #156]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	3b01      	subs	r3, #1
 8013cc4:	4a25      	ldr	r2, [pc, #148]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013cc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013cc8:	78fb      	ldrb	r3, [r7, #3]
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	005b      	lsls	r3, r3, #1
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013cd2:	78fb      	ldrb	r3, [r7, #3]
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013cda:	2b80      	cmp	r3, #128	; 0x80
 8013cdc:	d0ef      	beq.n	8013cbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013cde:	4b1f      	ldr	r3, [pc, #124]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f1c3 0307 	rsb	r3, r3, #7
 8013ce6:	2b04      	cmp	r3, #4
 8013ce8:	d009      	beq.n	8013cfe <xPortStartScheduler+0x76>
 8013cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cee:	f383 8811 	msr	BASEPRI, r3
 8013cf2:	f3bf 8f6f 	isb	sy
 8013cf6:	f3bf 8f4f 	dsb	sy
 8013cfa:	60bb      	str	r3, [r7, #8]
 8013cfc:	e7fe      	b.n	8013cfc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013cfe:	4b17      	ldr	r3, [pc, #92]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	021b      	lsls	r3, r3, #8
 8013d04:	4a15      	ldr	r2, [pc, #84]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013d08:	4b14      	ldr	r3, [pc, #80]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013d10:	4a12      	ldr	r2, [pc, #72]	; (8013d5c <xPortStartScheduler+0xd4>)
 8013d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	b2da      	uxtb	r2, r3
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013d1c:	4b10      	ldr	r3, [pc, #64]	; (8013d60 <xPortStartScheduler+0xd8>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	4a0f      	ldr	r2, [pc, #60]	; (8013d60 <xPortStartScheduler+0xd8>)
 8013d22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013d28:	4b0d      	ldr	r3, [pc, #52]	; (8013d60 <xPortStartScheduler+0xd8>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	4a0c      	ldr	r2, [pc, #48]	; (8013d60 <xPortStartScheduler+0xd8>)
 8013d2e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013d34:	f000 f8b0 	bl	8013e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013d38:	4b0a      	ldr	r3, [pc, #40]	; (8013d64 <xPortStartScheduler+0xdc>)
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013d3e:	f7ff ff93 	bl	8013c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013d42:	f7fe ffa7 	bl	8012c94 <vTaskSwitchContext>
	prvTaskExitError();
 8013d46:	f7ff ff4d 	bl	8013be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013d4a:	2300      	movs	r3, #0
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3710      	adds	r7, #16
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	e000e400 	.word	0xe000e400
 8013d58:	2000107c 	.word	0x2000107c
 8013d5c:	20001080 	.word	0x20001080
 8013d60:	e000ed20 	.word	0xe000ed20
 8013d64:	200000d4 	.word	0x200000d4

08013d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b083      	sub	sp, #12
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d72:	f383 8811 	msr	BASEPRI, r3
 8013d76:	f3bf 8f6f 	isb	sy
 8013d7a:	f3bf 8f4f 	dsb	sy
 8013d7e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013d80:	4b0e      	ldr	r3, [pc, #56]	; (8013dbc <vPortEnterCritical+0x54>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	3301      	adds	r3, #1
 8013d86:	4a0d      	ldr	r2, [pc, #52]	; (8013dbc <vPortEnterCritical+0x54>)
 8013d88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013d8a:	4b0c      	ldr	r3, [pc, #48]	; (8013dbc <vPortEnterCritical+0x54>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d10e      	bne.n	8013db0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013d92:	4b0b      	ldr	r3, [pc, #44]	; (8013dc0 <vPortEnterCritical+0x58>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d009      	beq.n	8013db0 <vPortEnterCritical+0x48>
 8013d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da0:	f383 8811 	msr	BASEPRI, r3
 8013da4:	f3bf 8f6f 	isb	sy
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	603b      	str	r3, [r7, #0]
 8013dae:	e7fe      	b.n	8013dae <vPortEnterCritical+0x46>
	}
}
 8013db0:	bf00      	nop
 8013db2:	370c      	adds	r7, #12
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bc80      	pop	{r7}
 8013db8:	4770      	bx	lr
 8013dba:	bf00      	nop
 8013dbc:	200000d4 	.word	0x200000d4
 8013dc0:	e000ed04 	.word	0xe000ed04

08013dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	b083      	sub	sp, #12
 8013dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013dca:	4b10      	ldr	r3, [pc, #64]	; (8013e0c <vPortExitCritical+0x48>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d109      	bne.n	8013de6 <vPortExitCritical+0x22>
 8013dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd6:	f383 8811 	msr	BASEPRI, r3
 8013dda:	f3bf 8f6f 	isb	sy
 8013dde:	f3bf 8f4f 	dsb	sy
 8013de2:	607b      	str	r3, [r7, #4]
 8013de4:	e7fe      	b.n	8013de4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8013de6:	4b09      	ldr	r3, [pc, #36]	; (8013e0c <vPortExitCritical+0x48>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	3b01      	subs	r3, #1
 8013dec:	4a07      	ldr	r2, [pc, #28]	; (8013e0c <vPortExitCritical+0x48>)
 8013dee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013df0:	4b06      	ldr	r3, [pc, #24]	; (8013e0c <vPortExitCritical+0x48>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d104      	bne.n	8013e02 <vPortExitCritical+0x3e>
 8013df8:	2300      	movs	r3, #0
 8013dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013e02:	bf00      	nop
 8013e04:	370c      	adds	r7, #12
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bc80      	pop	{r7}
 8013e0a:	4770      	bx	lr
 8013e0c:	200000d4 	.word	0x200000d4

08013e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013e10:	f3ef 8009 	mrs	r0, PSP
 8013e14:	f3bf 8f6f 	isb	sy
 8013e18:	4b0d      	ldr	r3, [pc, #52]	; (8013e50 <pxCurrentTCBConst>)
 8013e1a:	681a      	ldr	r2, [r3, #0]
 8013e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013e20:	6010      	str	r0, [r2, #0]
 8013e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013e2a:	f380 8811 	msr	BASEPRI, r0
 8013e2e:	f7fe ff31 	bl	8012c94 <vTaskSwitchContext>
 8013e32:	f04f 0000 	mov.w	r0, #0
 8013e36:	f380 8811 	msr	BASEPRI, r0
 8013e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e3e:	6819      	ldr	r1, [r3, #0]
 8013e40:	6808      	ldr	r0, [r1, #0]
 8013e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013e46:	f380 8809 	msr	PSP, r0
 8013e4a:	f3bf 8f6f 	isb	sy
 8013e4e:	4770      	bx	lr

08013e50 <pxCurrentTCBConst>:
 8013e50:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013e54:	bf00      	nop
 8013e56:	bf00      	nop

08013e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8013e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e62:	f383 8811 	msr	BASEPRI, r3
 8013e66:	f3bf 8f6f 	isb	sy
 8013e6a:	f3bf 8f4f 	dsb	sy
 8013e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013e70:	f7fe fe52 	bl	8012b18 <xTaskIncrementTick>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d003      	beq.n	8013e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013e7a:	4b06      	ldr	r3, [pc, #24]	; (8013e94 <SysTick_Handler+0x3c>)
 8013e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e80:	601a      	str	r2, [r3, #0]
 8013e82:	2300      	movs	r3, #0
 8013e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013e8c:	bf00      	nop
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	e000ed04 	.word	0xe000ed04

08013e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013e98:	b480      	push	{r7}
 8013e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013e9c:	4b0a      	ldr	r3, [pc, #40]	; (8013ec8 <vPortSetupTimerInterrupt+0x30>)
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013ea2:	4b0a      	ldr	r3, [pc, #40]	; (8013ecc <vPortSetupTimerInterrupt+0x34>)
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013ea8:	4b09      	ldr	r3, [pc, #36]	; (8013ed0 <vPortSetupTimerInterrupt+0x38>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	4a09      	ldr	r2, [pc, #36]	; (8013ed4 <vPortSetupTimerInterrupt+0x3c>)
 8013eae:	fba2 2303 	umull	r2, r3, r2, r3
 8013eb2:	099b      	lsrs	r3, r3, #6
 8013eb4:	4a08      	ldr	r2, [pc, #32]	; (8013ed8 <vPortSetupTimerInterrupt+0x40>)
 8013eb6:	3b01      	subs	r3, #1
 8013eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013eba:	4b03      	ldr	r3, [pc, #12]	; (8013ec8 <vPortSetupTimerInterrupt+0x30>)
 8013ebc:	2207      	movs	r2, #7
 8013ebe:	601a      	str	r2, [r3, #0]
}
 8013ec0:	bf00      	nop
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bc80      	pop	{r7}
 8013ec6:	4770      	bx	lr
 8013ec8:	e000e010 	.word	0xe000e010
 8013ecc:	e000e018 	.word	0xe000e018
 8013ed0:	20000000 	.word	0x20000000
 8013ed4:	10624dd3 	.word	0x10624dd3
 8013ed8:	e000e014 	.word	0xe000e014

08013edc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013edc:	b480      	push	{r7}
 8013ede:	b085      	sub	sp, #20
 8013ee0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013ee2:	f3ef 8305 	mrs	r3, IPSR
 8013ee6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2b0f      	cmp	r3, #15
 8013eec:	d913      	bls.n	8013f16 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013eee:	4a15      	ldr	r2, [pc, #84]	; (8013f44 <vPortValidateInterruptPriority+0x68>)
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	4413      	add	r3, r2
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013ef8:	4b13      	ldr	r3, [pc, #76]	; (8013f48 <vPortValidateInterruptPriority+0x6c>)
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	7afa      	ldrb	r2, [r7, #11]
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d209      	bcs.n	8013f16 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8013f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f06:	f383 8811 	msr	BASEPRI, r3
 8013f0a:	f3bf 8f6f 	isb	sy
 8013f0e:	f3bf 8f4f 	dsb	sy
 8013f12:	607b      	str	r3, [r7, #4]
 8013f14:	e7fe      	b.n	8013f14 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013f16:	4b0d      	ldr	r3, [pc, #52]	; (8013f4c <vPortValidateInterruptPriority+0x70>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013f1e:	4b0c      	ldr	r3, [pc, #48]	; (8013f50 <vPortValidateInterruptPriority+0x74>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d909      	bls.n	8013f3a <vPortValidateInterruptPriority+0x5e>
 8013f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f2a:	f383 8811 	msr	BASEPRI, r3
 8013f2e:	f3bf 8f6f 	isb	sy
 8013f32:	f3bf 8f4f 	dsb	sy
 8013f36:	603b      	str	r3, [r7, #0]
 8013f38:	e7fe      	b.n	8013f38 <vPortValidateInterruptPriority+0x5c>
	}
 8013f3a:	bf00      	nop
 8013f3c:	3714      	adds	r7, #20
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bc80      	pop	{r7}
 8013f42:	4770      	bx	lr
 8013f44:	e000e3f0 	.word	0xe000e3f0
 8013f48:	2000107c 	.word	0x2000107c
 8013f4c:	e000ed0c 	.word	0xe000ed0c
 8013f50:	20001080 	.word	0x20001080

08013f54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08a      	sub	sp, #40	; 0x28
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013f60:	f7fe fd22 	bl	80129a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013f64:	4b57      	ldr	r3, [pc, #348]	; (80140c4 <pvPortMalloc+0x170>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d101      	bne.n	8013f70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013f6c:	f000 f90c 	bl	8014188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013f70:	4b55      	ldr	r3, [pc, #340]	; (80140c8 <pvPortMalloc+0x174>)
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	4013      	ands	r3, r2
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f040 808c 	bne.w	8014096 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d01c      	beq.n	8013fbe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013f84:	2208      	movs	r2, #8
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	4413      	add	r3, r2
 8013f8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f003 0307 	and.w	r3, r3, #7
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d013      	beq.n	8013fbe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f023 0307 	bic.w	r3, r3, #7
 8013f9c:	3308      	adds	r3, #8
 8013f9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f003 0307 	and.w	r3, r3, #7
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d009      	beq.n	8013fbe <pvPortMalloc+0x6a>
 8013faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fae:	f383 8811 	msr	BASEPRI, r3
 8013fb2:	f3bf 8f6f 	isb	sy
 8013fb6:	f3bf 8f4f 	dsb	sy
 8013fba:	617b      	str	r3, [r7, #20]
 8013fbc:	e7fe      	b.n	8013fbc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d068      	beq.n	8014096 <pvPortMalloc+0x142>
 8013fc4:	4b41      	ldr	r3, [pc, #260]	; (80140cc <pvPortMalloc+0x178>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d863      	bhi.n	8014096 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013fce:	4b40      	ldr	r3, [pc, #256]	; (80140d0 <pvPortMalloc+0x17c>)
 8013fd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013fd2:	4b3f      	ldr	r3, [pc, #252]	; (80140d0 <pvPortMalloc+0x17c>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013fd8:	e004      	b.n	8013fe4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	687a      	ldr	r2, [r7, #4]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d903      	bls.n	8013ff6 <pvPortMalloc+0xa2>
 8013fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d1f1      	bne.n	8013fda <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013ff6:	4b33      	ldr	r3, [pc, #204]	; (80140c4 <pvPortMalloc+0x170>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d04a      	beq.n	8014096 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014000:	6a3b      	ldr	r3, [r7, #32]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	2208      	movs	r2, #8
 8014006:	4413      	add	r3, r2
 8014008:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400c:	681a      	ldr	r2, [r3, #0]
 801400e:	6a3b      	ldr	r3, [r7, #32]
 8014010:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014014:	685a      	ldr	r2, [r3, #4]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	1ad2      	subs	r2, r2, r3
 801401a:	2308      	movs	r3, #8
 801401c:	005b      	lsls	r3, r3, #1
 801401e:	429a      	cmp	r2, r3
 8014020:	d91e      	bls.n	8014060 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	4413      	add	r3, r2
 8014028:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	f003 0307 	and.w	r3, r3, #7
 8014030:	2b00      	cmp	r3, #0
 8014032:	d009      	beq.n	8014048 <pvPortMalloc+0xf4>
 8014034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014038:	f383 8811 	msr	BASEPRI, r3
 801403c:	f3bf 8f6f 	isb	sy
 8014040:	f3bf 8f4f 	dsb	sy
 8014044:	613b      	str	r3, [r7, #16]
 8014046:	e7fe      	b.n	8014046 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404a:	685a      	ldr	r2, [r3, #4]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	1ad2      	subs	r2, r2, r3
 8014050:	69bb      	ldr	r3, [r7, #24]
 8014052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801405a:	69b8      	ldr	r0, [r7, #24]
 801405c:	f000 f8f6 	bl	801424c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014060:	4b1a      	ldr	r3, [pc, #104]	; (80140cc <pvPortMalloc+0x178>)
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	1ad3      	subs	r3, r2, r3
 801406a:	4a18      	ldr	r2, [pc, #96]	; (80140cc <pvPortMalloc+0x178>)
 801406c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801406e:	4b17      	ldr	r3, [pc, #92]	; (80140cc <pvPortMalloc+0x178>)
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	4b18      	ldr	r3, [pc, #96]	; (80140d4 <pvPortMalloc+0x180>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	429a      	cmp	r2, r3
 8014078:	d203      	bcs.n	8014082 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801407a:	4b14      	ldr	r3, [pc, #80]	; (80140cc <pvPortMalloc+0x178>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	4a15      	ldr	r2, [pc, #84]	; (80140d4 <pvPortMalloc+0x180>)
 8014080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014084:	685a      	ldr	r2, [r3, #4]
 8014086:	4b10      	ldr	r3, [pc, #64]	; (80140c8 <pvPortMalloc+0x174>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	431a      	orrs	r2, r3
 801408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014092:	2200      	movs	r2, #0
 8014094:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014096:	f7fe fc95 	bl	80129c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801409a:	69fb      	ldr	r3, [r7, #28]
 801409c:	f003 0307 	and.w	r3, r3, #7
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d009      	beq.n	80140b8 <pvPortMalloc+0x164>
 80140a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a8:	f383 8811 	msr	BASEPRI, r3
 80140ac:	f3bf 8f6f 	isb	sy
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	60fb      	str	r3, [r7, #12]
 80140b6:	e7fe      	b.n	80140b6 <pvPortMalloc+0x162>
	return pvReturn;
 80140b8:	69fb      	ldr	r3, [r7, #28]
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3728      	adds	r7, #40	; 0x28
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	200085bc 	.word	0x200085bc
 80140c8:	200085c8 	.word	0x200085c8
 80140cc:	200085c0 	.word	0x200085c0
 80140d0:	200085b4 	.word	0x200085b4
 80140d4:	200085c4 	.word	0x200085c4

080140d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b086      	sub	sp, #24
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d046      	beq.n	8014178 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80140ea:	2308      	movs	r3, #8
 80140ec:	425b      	negs	r3, r3
 80140ee:	697a      	ldr	r2, [r7, #20]
 80140f0:	4413      	add	r3, r2
 80140f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	685a      	ldr	r2, [r3, #4]
 80140fc:	4b20      	ldr	r3, [pc, #128]	; (8014180 <vPortFree+0xa8>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	4013      	ands	r3, r2
 8014102:	2b00      	cmp	r3, #0
 8014104:	d109      	bne.n	801411a <vPortFree+0x42>
 8014106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801410a:	f383 8811 	msr	BASEPRI, r3
 801410e:	f3bf 8f6f 	isb	sy
 8014112:	f3bf 8f4f 	dsb	sy
 8014116:	60fb      	str	r3, [r7, #12]
 8014118:	e7fe      	b.n	8014118 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d009      	beq.n	8014136 <vPortFree+0x5e>
 8014122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014126:	f383 8811 	msr	BASEPRI, r3
 801412a:	f3bf 8f6f 	isb	sy
 801412e:	f3bf 8f4f 	dsb	sy
 8014132:	60bb      	str	r3, [r7, #8]
 8014134:	e7fe      	b.n	8014134 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	685a      	ldr	r2, [r3, #4]
 801413a:	4b11      	ldr	r3, [pc, #68]	; (8014180 <vPortFree+0xa8>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	4013      	ands	r3, r2
 8014140:	2b00      	cmp	r3, #0
 8014142:	d019      	beq.n	8014178 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d115      	bne.n	8014178 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	685a      	ldr	r2, [r3, #4]
 8014150:	4b0b      	ldr	r3, [pc, #44]	; (8014180 <vPortFree+0xa8>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	43db      	mvns	r3, r3
 8014156:	401a      	ands	r2, r3
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801415c:	f7fe fc24 	bl	80129a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	685a      	ldr	r2, [r3, #4]
 8014164:	4b07      	ldr	r3, [pc, #28]	; (8014184 <vPortFree+0xac>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	4413      	add	r3, r2
 801416a:	4a06      	ldr	r2, [pc, #24]	; (8014184 <vPortFree+0xac>)
 801416c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801416e:	6938      	ldr	r0, [r7, #16]
 8014170:	f000 f86c 	bl	801424c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014174:	f7fe fc26 	bl	80129c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014178:	bf00      	nop
 801417a:	3718      	adds	r7, #24
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	200085c8 	.word	0x200085c8
 8014184:	200085c0 	.word	0x200085c0

08014188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014188:	b480      	push	{r7}
 801418a:	b085      	sub	sp, #20
 801418c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801418e:	f247 5330 	movw	r3, #30000	; 0x7530
 8014192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014194:	4b27      	ldr	r3, [pc, #156]	; (8014234 <prvHeapInit+0xac>)
 8014196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f003 0307 	and.w	r3, r3, #7
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d00c      	beq.n	80141bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	3307      	adds	r3, #7
 80141a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f023 0307 	bic.w	r3, r3, #7
 80141ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80141b0:	68ba      	ldr	r2, [r7, #8]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	1ad3      	subs	r3, r2, r3
 80141b6:	4a1f      	ldr	r2, [pc, #124]	; (8014234 <prvHeapInit+0xac>)
 80141b8:	4413      	add	r3, r2
 80141ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80141c0:	4a1d      	ldr	r2, [pc, #116]	; (8014238 <prvHeapInit+0xb0>)
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80141c6:	4b1c      	ldr	r3, [pc, #112]	; (8014238 <prvHeapInit+0xb0>)
 80141c8:	2200      	movs	r2, #0
 80141ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	68ba      	ldr	r2, [r7, #8]
 80141d0:	4413      	add	r3, r2
 80141d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80141d4:	2208      	movs	r2, #8
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	1a9b      	subs	r3, r3, r2
 80141da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f023 0307 	bic.w	r3, r3, #7
 80141e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	4a15      	ldr	r2, [pc, #84]	; (801423c <prvHeapInit+0xb4>)
 80141e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80141ea:	4b14      	ldr	r3, [pc, #80]	; (801423c <prvHeapInit+0xb4>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2200      	movs	r2, #0
 80141f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80141f2:	4b12      	ldr	r3, [pc, #72]	; (801423c <prvHeapInit+0xb4>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2200      	movs	r2, #0
 80141f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	68fa      	ldr	r2, [r7, #12]
 8014202:	1ad2      	subs	r2, r2, r3
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014208:	4b0c      	ldr	r3, [pc, #48]	; (801423c <prvHeapInit+0xb4>)
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	4a0a      	ldr	r2, [pc, #40]	; (8014240 <prvHeapInit+0xb8>)
 8014216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	4a09      	ldr	r2, [pc, #36]	; (8014244 <prvHeapInit+0xbc>)
 801421e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014220:	4b09      	ldr	r3, [pc, #36]	; (8014248 <prvHeapInit+0xc0>)
 8014222:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014226:	601a      	str	r2, [r3, #0]
}
 8014228:	bf00      	nop
 801422a:	3714      	adds	r7, #20
 801422c:	46bd      	mov	sp, r7
 801422e:	bc80      	pop	{r7}
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	20001084 	.word	0x20001084
 8014238:	200085b4 	.word	0x200085b4
 801423c:	200085bc 	.word	0x200085bc
 8014240:	200085c4 	.word	0x200085c4
 8014244:	200085c0 	.word	0x200085c0
 8014248:	200085c8 	.word	0x200085c8

0801424c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801424c:	b480      	push	{r7}
 801424e:	b085      	sub	sp, #20
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014254:	4b27      	ldr	r3, [pc, #156]	; (80142f4 <prvInsertBlockIntoFreeList+0xa8>)
 8014256:	60fb      	str	r3, [r7, #12]
 8014258:	e002      	b.n	8014260 <prvInsertBlockIntoFreeList+0x14>
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	60fb      	str	r3, [r7, #12]
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	429a      	cmp	r2, r3
 8014268:	d8f7      	bhi.n	801425a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	68ba      	ldr	r2, [r7, #8]
 8014274:	4413      	add	r3, r2
 8014276:	687a      	ldr	r2, [r7, #4]
 8014278:	429a      	cmp	r2, r3
 801427a:	d108      	bne.n	801428e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	685a      	ldr	r2, [r3, #4]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	441a      	add	r2, r3
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	685b      	ldr	r3, [r3, #4]
 8014296:	68ba      	ldr	r2, [r7, #8]
 8014298:	441a      	add	r2, r3
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d118      	bne.n	80142d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681a      	ldr	r2, [r3, #0]
 80142a6:	4b14      	ldr	r3, [pc, #80]	; (80142f8 <prvInsertBlockIntoFreeList+0xac>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	429a      	cmp	r2, r3
 80142ac:	d00d      	beq.n	80142ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	685a      	ldr	r2, [r3, #4]
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	441a      	add	r2, r3
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	601a      	str	r2, [r3, #0]
 80142c8:	e008      	b.n	80142dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80142ca:	4b0b      	ldr	r3, [pc, #44]	; (80142f8 <prvInsertBlockIntoFreeList+0xac>)
 80142cc:	681a      	ldr	r2, [r3, #0]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	601a      	str	r2, [r3, #0]
 80142d2:	e003      	b.n	80142dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80142dc:	68fa      	ldr	r2, [r7, #12]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d002      	beq.n	80142ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142ea:	bf00      	nop
 80142ec:	3714      	adds	r7, #20
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bc80      	pop	{r7}
 80142f2:	4770      	bx	lr
 80142f4:	200085b4 	.word	0x200085b4
 80142f8:	200085bc 	.word	0x200085bc

080142fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014300:	2200      	movs	r2, #0
 8014302:	4914      	ldr	r1, [pc, #80]	; (8014354 <MX_USB_DEVICE_Init+0x58>)
 8014304:	4814      	ldr	r0, [pc, #80]	; (8014358 <MX_USB_DEVICE_Init+0x5c>)
 8014306:	f7fb fd39 	bl	800fd7c <USBD_Init>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d002      	beq.n	8014316 <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler(1);
 8014310:	2001      	movs	r0, #1
 8014312:	f7ef fabd 	bl	8003890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8014316:	4911      	ldr	r1, [pc, #68]	; (801435c <MX_USB_DEVICE_Init+0x60>)
 8014318:	480f      	ldr	r0, [pc, #60]	; (8014358 <MX_USB_DEVICE_Init+0x5c>)
 801431a:	f7fb fd5a 	bl	800fdd2 <USBD_RegisterClass>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d002      	beq.n	801432a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler(1);
 8014324:	2001      	movs	r0, #1
 8014326:	f7ef fab3 	bl	8003890 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801432a:	490d      	ldr	r1, [pc, #52]	; (8014360 <MX_USB_DEVICE_Init+0x64>)
 801432c:	480a      	ldr	r0, [pc, #40]	; (8014358 <MX_USB_DEVICE_Init+0x5c>)
 801432e:	f7fa fd07 	bl	800ed40 <USBD_MSC_RegisterStorage>
 8014332:	4603      	mov	r3, r0
 8014334:	2b00      	cmp	r3, #0
 8014336:	d002      	beq.n	801433e <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler(1);
 8014338:	2001      	movs	r0, #1
 801433a:	f7ef faa9 	bl	8003890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801433e:	4806      	ldr	r0, [pc, #24]	; (8014358 <MX_USB_DEVICE_Init+0x5c>)
 8014340:	f7fb fd60 	bl	800fe04 <USBD_Start>
 8014344:	4603      	mov	r3, r0
 8014346:	2b00      	cmp	r3, #0
 8014348:	d002      	beq.n	8014350 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler(1);
 801434a:	2001      	movs	r0, #1
 801434c:	f7ef faa0 	bl	8003890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014350:	bf00      	nop
 8014352:	bd80      	pop	{r7, pc}
 8014354:	200000d8 	.word	0x200000d8
 8014358:	20009678 	.word	0x20009678
 801435c:	20000030 	.word	0x20000030
 8014360:	20000128 	.word	0x20000128

08014364 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014364:	b480      	push	{r7}
 8014366:	b083      	sub	sp, #12
 8014368:	af00      	add	r7, sp, #0
 801436a:	4603      	mov	r3, r0
 801436c:	6039      	str	r1, [r7, #0]
 801436e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	2212      	movs	r2, #18
 8014374:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014376:	4b03      	ldr	r3, [pc, #12]	; (8014384 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014378:	4618      	mov	r0, r3
 801437a:	370c      	adds	r7, #12
 801437c:	46bd      	mov	sp, r7
 801437e:	bc80      	pop	{r7}
 8014380:	4770      	bx	lr
 8014382:	bf00      	nop
 8014384:	200000f4 	.word	0x200000f4

08014388 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
 801438e:	4603      	mov	r3, r0
 8014390:	6039      	str	r1, [r7, #0]
 8014392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	2204      	movs	r2, #4
 8014398:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801439a:	4b03      	ldr	r3, [pc, #12]	; (80143a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801439c:	4618      	mov	r0, r3
 801439e:	370c      	adds	r7, #12
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bc80      	pop	{r7}
 80143a4:	4770      	bx	lr
 80143a6:	bf00      	nop
 80143a8:	20000108 	.word	0x20000108

080143ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	4603      	mov	r3, r0
 80143b4:	6039      	str	r1, [r7, #0]
 80143b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80143b8:	79fb      	ldrb	r3, [r7, #7]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d105      	bne.n	80143ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80143be:	683a      	ldr	r2, [r7, #0]
 80143c0:	4907      	ldr	r1, [pc, #28]	; (80143e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80143c2:	4808      	ldr	r0, [pc, #32]	; (80143e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80143c4:	f7fc fc15 	bl	8010bf2 <USBD_GetString>
 80143c8:	e004      	b.n	80143d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80143ca:	683a      	ldr	r2, [r7, #0]
 80143cc:	4904      	ldr	r1, [pc, #16]	; (80143e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80143ce:	4805      	ldr	r0, [pc, #20]	; (80143e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80143d0:	f7fc fc0f 	bl	8010bf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80143d4:	4b02      	ldr	r3, [pc, #8]	; (80143e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	20009914 	.word	0x20009914
 80143e4:	0801a66c 	.word	0x0801a66c

080143e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	4603      	mov	r3, r0
 80143f0:	6039      	str	r1, [r7, #0]
 80143f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80143f4:	683a      	ldr	r2, [r7, #0]
 80143f6:	4904      	ldr	r1, [pc, #16]	; (8014408 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80143f8:	4804      	ldr	r0, [pc, #16]	; (801440c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80143fa:	f7fc fbfa 	bl	8010bf2 <USBD_GetString>
  return USBD_StrDesc;
 80143fe:	4b02      	ldr	r3, [pc, #8]	; (8014408 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014400:	4618      	mov	r0, r3
 8014402:	3708      	adds	r7, #8
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	20009914 	.word	0x20009914
 801440c:	0801a680 	.word	0x0801a680

08014410 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
 8014416:	4603      	mov	r3, r0
 8014418:	6039      	str	r1, [r7, #0]
 801441a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	221a      	movs	r2, #26
 8014420:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014422:	f000 f843 	bl	80144ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014426:	4b02      	ldr	r3, [pc, #8]	; (8014430 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014428:	4618      	mov	r0, r3
 801442a:	3708      	adds	r7, #8
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	2000010c 	.word	0x2000010c

08014434 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	4603      	mov	r3, r0
 801443c:	6039      	str	r1, [r7, #0]
 801443e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014440:	79fb      	ldrb	r3, [r7, #7]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d105      	bne.n	8014452 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014446:	683a      	ldr	r2, [r7, #0]
 8014448:	4907      	ldr	r1, [pc, #28]	; (8014468 <USBD_FS_ConfigStrDescriptor+0x34>)
 801444a:	4808      	ldr	r0, [pc, #32]	; (801446c <USBD_FS_ConfigStrDescriptor+0x38>)
 801444c:	f7fc fbd1 	bl	8010bf2 <USBD_GetString>
 8014450:	e004      	b.n	801445c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014452:	683a      	ldr	r2, [r7, #0]
 8014454:	4904      	ldr	r1, [pc, #16]	; (8014468 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014456:	4805      	ldr	r0, [pc, #20]	; (801446c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014458:	f7fc fbcb 	bl	8010bf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801445c:	4b02      	ldr	r3, [pc, #8]	; (8014468 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801445e:	4618      	mov	r0, r3
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	20009914 	.word	0x20009914
 801446c:	0801a694 	.word	0x0801a694

08014470 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
 8014476:	4603      	mov	r3, r0
 8014478:	6039      	str	r1, [r7, #0]
 801447a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801447c:	79fb      	ldrb	r3, [r7, #7]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d105      	bne.n	801448e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014482:	683a      	ldr	r2, [r7, #0]
 8014484:	4907      	ldr	r1, [pc, #28]	; (80144a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014486:	4808      	ldr	r0, [pc, #32]	; (80144a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014488:	f7fc fbb3 	bl	8010bf2 <USBD_GetString>
 801448c:	e004      	b.n	8014498 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801448e:	683a      	ldr	r2, [r7, #0]
 8014490:	4904      	ldr	r1, [pc, #16]	; (80144a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014492:	4805      	ldr	r0, [pc, #20]	; (80144a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014494:	f7fc fbad 	bl	8010bf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014498:	4b02      	ldr	r3, [pc, #8]	; (80144a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801449a:	4618      	mov	r0, r3
 801449c:	3708      	adds	r7, #8
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	20009914 	.word	0x20009914
 80144a8:	0801a6a0 	.word	0x0801a6a0

080144ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80144b2:	4b0f      	ldr	r3, [pc, #60]	; (80144f0 <Get_SerialNum+0x44>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80144b8:	4b0e      	ldr	r3, [pc, #56]	; (80144f4 <Get_SerialNum+0x48>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80144be:	4b0e      	ldr	r3, [pc, #56]	; (80144f8 <Get_SerialNum+0x4c>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80144c4:	68fa      	ldr	r2, [r7, #12]
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	4413      	add	r3, r2
 80144ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d009      	beq.n	80144e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80144d2:	2208      	movs	r2, #8
 80144d4:	4909      	ldr	r1, [pc, #36]	; (80144fc <Get_SerialNum+0x50>)
 80144d6:	68f8      	ldr	r0, [r7, #12]
 80144d8:	f000 f814 	bl	8014504 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80144dc:	2204      	movs	r2, #4
 80144de:	4908      	ldr	r1, [pc, #32]	; (8014500 <Get_SerialNum+0x54>)
 80144e0:	68b8      	ldr	r0, [r7, #8]
 80144e2:	f000 f80f 	bl	8014504 <IntToUnicode>
  }
}
 80144e6:	bf00      	nop
 80144e8:	3710      	adds	r7, #16
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	bf00      	nop
 80144f0:	1ff800d0 	.word	0x1ff800d0
 80144f4:	1ff800d4 	.word	0x1ff800d4
 80144f8:	1ff800d8 	.word	0x1ff800d8
 80144fc:	2000010e 	.word	0x2000010e
 8014500:	2000011e 	.word	0x2000011e

08014504 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014504:	b480      	push	{r7}
 8014506:	b087      	sub	sp, #28
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	4613      	mov	r3, r2
 8014510:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014512:	2300      	movs	r3, #0
 8014514:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014516:	2300      	movs	r3, #0
 8014518:	75fb      	strb	r3, [r7, #23]
 801451a:	e027      	b.n	801456c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	0f1b      	lsrs	r3, r3, #28
 8014520:	2b09      	cmp	r3, #9
 8014522:	d80b      	bhi.n	801453c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	0f1b      	lsrs	r3, r3, #28
 8014528:	b2da      	uxtb	r2, r3
 801452a:	7dfb      	ldrb	r3, [r7, #23]
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	4619      	mov	r1, r3
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	440b      	add	r3, r1
 8014534:	3230      	adds	r2, #48	; 0x30
 8014536:	b2d2      	uxtb	r2, r2
 8014538:	701a      	strb	r2, [r3, #0]
 801453a:	e00a      	b.n	8014552 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	0f1b      	lsrs	r3, r3, #28
 8014540:	b2da      	uxtb	r2, r3
 8014542:	7dfb      	ldrb	r3, [r7, #23]
 8014544:	005b      	lsls	r3, r3, #1
 8014546:	4619      	mov	r1, r3
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	440b      	add	r3, r1
 801454c:	3237      	adds	r2, #55	; 0x37
 801454e:	b2d2      	uxtb	r2, r2
 8014550:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	011b      	lsls	r3, r3, #4
 8014556:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014558:	7dfb      	ldrb	r3, [r7, #23]
 801455a:	005b      	lsls	r3, r3, #1
 801455c:	3301      	adds	r3, #1
 801455e:	68ba      	ldr	r2, [r7, #8]
 8014560:	4413      	add	r3, r2
 8014562:	2200      	movs	r2, #0
 8014564:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014566:	7dfb      	ldrb	r3, [r7, #23]
 8014568:	3301      	adds	r3, #1
 801456a:	75fb      	strb	r3, [r7, #23]
 801456c:	7dfa      	ldrb	r2, [r7, #23]
 801456e:	79fb      	ldrb	r3, [r7, #7]
 8014570:	429a      	cmp	r2, r3
 8014572:	d3d3      	bcc.n	801451c <IntToUnicode+0x18>
  }
}
 8014574:	bf00      	nop
 8014576:	371c      	adds	r7, #28
 8014578:	46bd      	mov	sp, r7
 801457a:	bc80      	pop	{r7}
 801457c:	4770      	bx	lr

0801457e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801457e:	b480      	push	{r7}
 8014580:	b083      	sub	sp, #12
 8014582:	af00      	add	r7, sp, #0
 8014584:	4603      	mov	r3, r0
 8014586:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014588:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801458a:	4618      	mov	r0, r3
 801458c:	370c      	adds	r7, #12
 801458e:	46bd      	mov	sp, r7
 8014590:	bc80      	pop	{r7}
 8014592:	4770      	bx	lr

08014594 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014594:	b480      	push	{r7}
 8014596:	b085      	sub	sp, #20
 8014598:	af00      	add	r7, sp, #0
 801459a:	4603      	mov	r3, r0
 801459c:	60b9      	str	r1, [r7, #8]
 801459e:	607a      	str	r2, [r7, #4]
 80145a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80145a8:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80145b0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80145b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3714      	adds	r7, #20
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bc80      	pop	{r7}
 80145bc:	4770      	bx	lr

080145be <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80145be:	b480      	push	{r7}
 80145c0:	b083      	sub	sp, #12
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	4603      	mov	r3, r0
 80145c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80145c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	370c      	adds	r7, #12
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bc80      	pop	{r7}
 80145d2:	4770      	bx	lr

080145d4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b083      	sub	sp, #12
 80145d8:	af00      	add	r7, sp, #0
 80145da:	4603      	mov	r3, r0
 80145dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80145de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	370c      	adds	r7, #12
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bc80      	pop	{r7}
 80145e8:	4770      	bx	lr

080145ea <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80145ea:	b480      	push	{r7}
 80145ec:	b085      	sub	sp, #20
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	607a      	str	r2, [r7, #4]
 80145f4:	461a      	mov	r2, r3
 80145f6:	4603      	mov	r3, r0
 80145f8:	73fb      	strb	r3, [r7, #15]
 80145fa:	4613      	mov	r3, r2
 80145fc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80145fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014600:	4618      	mov	r0, r3
 8014602:	3714      	adds	r7, #20
 8014604:	46bd      	mov	sp, r7
 8014606:	bc80      	pop	{r7}
 8014608:	4770      	bx	lr

0801460a <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801460a:	b480      	push	{r7}
 801460c:	b085      	sub	sp, #20
 801460e:	af00      	add	r7, sp, #0
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	607a      	str	r2, [r7, #4]
 8014614:	461a      	mov	r2, r3
 8014616:	4603      	mov	r3, r0
 8014618:	73fb      	strb	r3, [r7, #15]
 801461a:	4613      	mov	r3, r2
 801461c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 801461e:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8014620:	4618      	mov	r0, r3
 8014622:	3714      	adds	r7, #20
 8014624:	46bd      	mov	sp, r7
 8014626:	bc80      	pop	{r7}
 8014628:	4770      	bx	lr

0801462a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801462a:	b480      	push	{r7}
 801462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801462e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014630:	4618      	mov	r0, r3
 8014632:	46bd      	mov	sp, r7
 8014634:	bc80      	pop	{r7}
 8014636:	4770      	bx	lr

08014638 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	4a0d      	ldr	r2, [pc, #52]	; (801467c <HAL_PCD_MspInit+0x44>)
 8014646:	4293      	cmp	r3, r2
 8014648:	d113      	bne.n	8014672 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801464a:	4b0d      	ldr	r3, [pc, #52]	; (8014680 <HAL_PCD_MspInit+0x48>)
 801464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801464e:	4a0c      	ldr	r2, [pc, #48]	; (8014680 <HAL_PCD_MspInit+0x48>)
 8014650:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014654:	6253      	str	r3, [r2, #36]	; 0x24
 8014656:	4b0a      	ldr	r3, [pc, #40]	; (8014680 <HAL_PCD_MspInit+0x48>)
 8014658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801465a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801465e:	60fb      	str	r3, [r7, #12]
 8014660:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8014662:	2200      	movs	r2, #0
 8014664:	2100      	movs	r1, #0
 8014666:	2014      	movs	r0, #20
 8014668:	f7f3 f839 	bl	80076de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801466c:	2014      	movs	r0, #20
 801466e:	f7f3 f852 	bl	8007716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014672:	bf00      	nop
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	40005c00 	.word	0x40005c00
 8014680:	40023800 	.word	0x40023800

08014684 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014698:	4619      	mov	r1, r3
 801469a:	4610      	mov	r0, r2
 801469c:	f7fb fbfa 	bl	800fe94 <USBD_LL_SetupStage>
}
 80146a0:	bf00      	nop
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	460b      	mov	r3, r1
 80146b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80146ba:	78fa      	ldrb	r2, [r7, #3]
 80146bc:	6879      	ldr	r1, [r7, #4]
 80146be:	4613      	mov	r3, r2
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	440b      	add	r3, r1
 80146c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80146cc:	681a      	ldr	r2, [r3, #0]
 80146ce:	78fb      	ldrb	r3, [r7, #3]
 80146d0:	4619      	mov	r1, r3
 80146d2:	f7fb fc2a 	bl	800ff2a <USBD_LL_DataOutStage>
}
 80146d6:	bf00      	nop
 80146d8:	3708      	adds	r7, #8
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}

080146de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b082      	sub	sp, #8
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	6078      	str	r0, [r7, #4]
 80146e6:	460b      	mov	r3, r1
 80146e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80146f0:	78fa      	ldrb	r2, [r7, #3]
 80146f2:	6879      	ldr	r1, [r7, #4]
 80146f4:	4613      	mov	r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	4413      	add	r3, r2
 80146fa:	00db      	lsls	r3, r3, #3
 80146fc:	440b      	add	r3, r1
 80146fe:	333c      	adds	r3, #60	; 0x3c
 8014700:	681a      	ldr	r2, [r3, #0]
 8014702:	78fb      	ldrb	r3, [r7, #3]
 8014704:	4619      	mov	r1, r3
 8014706:	f7fb fc81 	bl	801000c <USBD_LL_DataInStage>
}
 801470a:	bf00      	nop
 801470c:	3708      	adds	r7, #8
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}

08014712 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014712:	b580      	push	{r7, lr}
 8014714:	b082      	sub	sp, #8
 8014716:	af00      	add	r7, sp, #0
 8014718:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8014720:	4618      	mov	r0, r3
 8014722:	f7fb fd8c 	bl	801023e <USBD_LL_SOF>
}
 8014726:	bf00      	nop
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}

0801472e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801472e:	b580      	push	{r7, lr}
 8014730:	b084      	sub	sp, #16
 8014732:	af00      	add	r7, sp, #0
 8014734:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014736:	2301      	movs	r3, #1
 8014738:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	689b      	ldr	r3, [r3, #8]
 801473e:	2b02      	cmp	r3, #2
 8014740:	d002      	beq.n	8014748 <HAL_PCD_ResetCallback+0x1a>
  {
    Error_Handler(1);
 8014742:	2001      	movs	r0, #1
 8014744:	f7ef f8a4 	bl	8003890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801474e:	7bfa      	ldrb	r2, [r7, #15]
 8014750:	4611      	mov	r1, r2
 8014752:	4618      	mov	r0, r3
 8014754:	f7fb fd40 	bl	80101d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801475e:	4618      	mov	r0, r3
 8014760:	f7fb fcf9 	bl	8010156 <USBD_LL_Reset>
}
 8014764:	bf00      	nop
 8014766:	3710      	adds	r7, #16
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801477a:	4618      	mov	r0, r3
 801477c:	f7fb fd3b 	bl	80101f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	699b      	ldr	r3, [r3, #24]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d005      	beq.n	8014794 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014788:	4b04      	ldr	r3, [pc, #16]	; (801479c <HAL_PCD_SuspendCallback+0x30>)
 801478a:	691b      	ldr	r3, [r3, #16]
 801478c:	4a03      	ldr	r2, [pc, #12]	; (801479c <HAL_PCD_SuspendCallback+0x30>)
 801478e:	f043 0306 	orr.w	r3, r3, #6
 8014792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014794:	bf00      	nop
 8014796:	3708      	adds	r7, #8
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}
 801479c:	e000ed00 	.word	0xe000ed00

080147a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fb fd35 	bl	801021e <USBD_LL_Resume>
}
 80147b4:	bf00      	nop
 80147b6:	3708      	adds	r7, #8
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80147c4:	4a23      	ldr	r2, [pc, #140]	; (8014854 <USBD_LL_Init+0x98>)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	4a21      	ldr	r2, [pc, #132]	; (8014854 <USBD_LL_Init+0x98>)
 80147d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80147d4:	4b1f      	ldr	r3, [pc, #124]	; (8014854 <USBD_LL_Init+0x98>)
 80147d6:	4a20      	ldr	r2, [pc, #128]	; (8014858 <USBD_LL_Init+0x9c>)
 80147d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80147da:	4b1e      	ldr	r3, [pc, #120]	; (8014854 <USBD_LL_Init+0x98>)
 80147dc:	2208      	movs	r2, #8
 80147de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80147e0:	4b1c      	ldr	r3, [pc, #112]	; (8014854 <USBD_LL_Init+0x98>)
 80147e2:	2202      	movs	r2, #2
 80147e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80147e6:	4b1b      	ldr	r3, [pc, #108]	; (8014854 <USBD_LL_Init+0x98>)
 80147e8:	2202      	movs	r2, #2
 80147ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80147ec:	4b19      	ldr	r3, [pc, #100]	; (8014854 <USBD_LL_Init+0x98>)
 80147ee:	2200      	movs	r2, #0
 80147f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80147f2:	4b18      	ldr	r3, [pc, #96]	; (8014854 <USBD_LL_Init+0x98>)
 80147f4:	2200      	movs	r2, #0
 80147f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80147f8:	4816      	ldr	r0, [pc, #88]	; (8014854 <USBD_LL_Init+0x98>)
 80147fa:	f7f3 fcf7 	bl	80081ec <HAL_PCD_Init>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d002      	beq.n	801480a <USBD_LL_Init+0x4e>
  {
    Error_Handler(1);
 8014804:	2001      	movs	r0, #1
 8014806:	f7ef f843 	bl	8003890 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014810:	2318      	movs	r3, #24
 8014812:	2200      	movs	r2, #0
 8014814:	2100      	movs	r1, #0
 8014816:	f7f4 ffab 	bl	8009770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014820:	2358      	movs	r3, #88	; 0x58
 8014822:	2200      	movs	r2, #0
 8014824:	2180      	movs	r1, #128	; 0x80
 8014826:	f7f4 ffa3 	bl	8009770 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014830:	2398      	movs	r3, #152	; 0x98
 8014832:	2200      	movs	r2, #0
 8014834:	2181      	movs	r1, #129	; 0x81
 8014836:	f7f4 ff9b 	bl	8009770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014840:	23d8      	movs	r3, #216	; 0xd8
 8014842:	2200      	movs	r2, #0
 8014844:	2101      	movs	r1, #1
 8014846:	f7f4 ff93 	bl	8009770 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 801484a:	2300      	movs	r3, #0
}
 801484c:	4618      	mov	r0, r3
 801484e:	3708      	adds	r7, #8
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	20009b14 	.word	0x20009b14
 8014858:	40005c00 	.word	0x40005c00

0801485c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014864:	2300      	movs	r3, #0
 8014866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014868:	2300      	movs	r3, #0
 801486a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014872:	4618      	mov	r0, r3
 8014874:	f7f3 fd98 	bl	80083a8 <HAL_PCD_Start>
 8014878:	4603      	mov	r3, r0
 801487a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801487c:	7bfb      	ldrb	r3, [r7, #15]
 801487e:	4618      	mov	r0, r3
 8014880:	f000 f964 	bl	8014b4c <USBD_Get_USB_Status>
 8014884:	4603      	mov	r3, r0
 8014886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014888:	7bbb      	ldrb	r3, [r7, #14]
}
 801488a:	4618      	mov	r0, r3
 801488c:	3710      	adds	r7, #16
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014892:	b580      	push	{r7, lr}
 8014894:	b084      	sub	sp, #16
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	4608      	mov	r0, r1
 801489c:	4611      	mov	r1, r2
 801489e:	461a      	mov	r2, r3
 80148a0:	4603      	mov	r3, r0
 80148a2:	70fb      	strb	r3, [r7, #3]
 80148a4:	460b      	mov	r3, r1
 80148a6:	70bb      	strb	r3, [r7, #2]
 80148a8:	4613      	mov	r3, r2
 80148aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148ac:	2300      	movs	r3, #0
 80148ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148b0:	2300      	movs	r3, #0
 80148b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80148ba:	78bb      	ldrb	r3, [r7, #2]
 80148bc:	883a      	ldrh	r2, [r7, #0]
 80148be:	78f9      	ldrb	r1, [r7, #3]
 80148c0:	f7f3 feb4 	bl	800862c <HAL_PCD_EP_Open>
 80148c4:	4603      	mov	r3, r0
 80148c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80148c8:	7bfb      	ldrb	r3, [r7, #15]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f000 f93e 	bl	8014b4c <USBD_Get_USB_Status>
 80148d0:	4603      	mov	r3, r0
 80148d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80148d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80148d6:	4618      	mov	r0, r3
 80148d8:	3710      	adds	r7, #16
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}

080148de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80148de:	b580      	push	{r7, lr}
 80148e0:	b084      	sub	sp, #16
 80148e2:	af00      	add	r7, sp, #0
 80148e4:	6078      	str	r0, [r7, #4]
 80148e6:	460b      	mov	r3, r1
 80148e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148ea:	2300      	movs	r3, #0
 80148ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148ee:	2300      	movs	r3, #0
 80148f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80148f8:	78fa      	ldrb	r2, [r7, #3]
 80148fa:	4611      	mov	r1, r2
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7f3 fefb 	bl	80086f8 <HAL_PCD_EP_Close>
 8014902:	4603      	mov	r3, r0
 8014904:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014906:	7bfb      	ldrb	r3, [r7, #15]
 8014908:	4618      	mov	r0, r3
 801490a:	f000 f91f 	bl	8014b4c <USBD_Get_USB_Status>
 801490e:	4603      	mov	r3, r0
 8014910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014912:	7bbb      	ldrb	r3, [r7, #14]
}
 8014914:	4618      	mov	r0, r3
 8014916:	3710      	adds	r7, #16
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	460b      	mov	r3, r1
 8014926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014928:	2300      	movs	r3, #0
 801492a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801492c:	2300      	movs	r3, #0
 801492e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014936:	78fa      	ldrb	r2, [r7, #3]
 8014938:	4611      	mov	r1, r2
 801493a:	4618      	mov	r0, r3
 801493c:	f7f4 f86f 	bl	8008a1e <HAL_PCD_EP_Flush>
 8014940:	4603      	mov	r3, r0
 8014942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014944:	7bfb      	ldrb	r3, [r7, #15]
 8014946:	4618      	mov	r0, r3
 8014948:	f000 f900 	bl	8014b4c <USBD_Get_USB_Status>
 801494c:	4603      	mov	r3, r0
 801494e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014950:	7bbb      	ldrb	r3, [r7, #14]
}
 8014952:	4618      	mov	r0, r3
 8014954:	3710      	adds	r7, #16
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}

0801495a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801495a:	b580      	push	{r7, lr}
 801495c:	b084      	sub	sp, #16
 801495e:	af00      	add	r7, sp, #0
 8014960:	6078      	str	r0, [r7, #4]
 8014962:	460b      	mov	r3, r1
 8014964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014966:	2300      	movs	r3, #0
 8014968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801496a:	2300      	movs	r3, #0
 801496c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014974:	78fa      	ldrb	r2, [r7, #3]
 8014976:	4611      	mov	r1, r2
 8014978:	4618      	mov	r0, r3
 801497a:	f7f3 ff9c 	bl	80088b6 <HAL_PCD_EP_SetStall>
 801497e:	4603      	mov	r3, r0
 8014980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014982:	7bfb      	ldrb	r3, [r7, #15]
 8014984:	4618      	mov	r0, r3
 8014986:	f000 f8e1 	bl	8014b4c <USBD_Get_USB_Status>
 801498a:	4603      	mov	r3, r0
 801498c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801498e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014990:	4618      	mov	r0, r3
 8014992:	3710      	adds	r7, #16
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}

08014998 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b084      	sub	sp, #16
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	460b      	mov	r3, r1
 80149a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149a4:	2300      	movs	r3, #0
 80149a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149a8:	2300      	movs	r3, #0
 80149aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80149b2:	78fa      	ldrb	r2, [r7, #3]
 80149b4:	4611      	mov	r1, r2
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7f3 ffdd 	bl	8008976 <HAL_PCD_EP_ClrStall>
 80149bc:	4603      	mov	r3, r0
 80149be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80149c0:	7bfb      	ldrb	r3, [r7, #15]
 80149c2:	4618      	mov	r0, r3
 80149c4:	f000 f8c2 	bl	8014b4c <USBD_Get_USB_Status>
 80149c8:	4603      	mov	r3, r0
 80149ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80149cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3710      	adds	r7, #16
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149d6:	b480      	push	{r7}
 80149d8:	b085      	sub	sp, #20
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
 80149de:	460b      	mov	r3, r1
 80149e0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80149e8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80149ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	da0c      	bge.n	8014a0c <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80149f2:	78fb      	ldrb	r3, [r7, #3]
 80149f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149f8:	68f9      	ldr	r1, [r7, #12]
 80149fa:	1c5a      	adds	r2, r3, #1
 80149fc:	4613      	mov	r3, r2
 80149fe:	009b      	lsls	r3, r3, #2
 8014a00:	4413      	add	r3, r2
 8014a02:	00db      	lsls	r3, r3, #3
 8014a04:	440b      	add	r3, r1
 8014a06:	3302      	adds	r3, #2
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	e00b      	b.n	8014a24 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014a0c:	78fb      	ldrb	r3, [r7, #3]
 8014a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a12:	68f9      	ldr	r1, [r7, #12]
 8014a14:	4613      	mov	r3, r2
 8014a16:	009b      	lsls	r3, r3, #2
 8014a18:	4413      	add	r3, r2
 8014a1a:	00db      	lsls	r3, r3, #3
 8014a1c:	440b      	add	r3, r1
 8014a1e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3714      	adds	r7, #20
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bc80      	pop	{r7}
 8014a2c:	4770      	bx	lr

08014a2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014a2e:	b580      	push	{r7, lr}
 8014a30:	b084      	sub	sp, #16
 8014a32:	af00      	add	r7, sp, #0
 8014a34:	6078      	str	r0, [r7, #4]
 8014a36:	460b      	mov	r3, r1
 8014a38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014a48:	78fa      	ldrb	r2, [r7, #3]
 8014a4a:	4611      	mov	r1, r2
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7f3 fdc8 	bl	80085e2 <HAL_PCD_SetAddress>
 8014a52:	4603      	mov	r3, r0
 8014a54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a56:	7bfb      	ldrb	r3, [r7, #15]
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f000 f877 	bl	8014b4c <USBD_Get_USB_Status>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	3710      	adds	r7, #16
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b086      	sub	sp, #24
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	607a      	str	r2, [r7, #4]
 8014a76:	461a      	mov	r2, r3
 8014a78:	460b      	mov	r3, r1
 8014a7a:	72fb      	strb	r3, [r7, #11]
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a80:	2300      	movs	r3, #0
 8014a82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a84:	2300      	movs	r3, #0
 8014a86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014a8e:	893b      	ldrh	r3, [r7, #8]
 8014a90:	7af9      	ldrb	r1, [r7, #11]
 8014a92:	687a      	ldr	r2, [r7, #4]
 8014a94:	f7f3 fecc 	bl	8008830 <HAL_PCD_EP_Transmit>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a9c:	7dfb      	ldrb	r3, [r7, #23]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f000 f854 	bl	8014b4c <USBD_Get_USB_Status>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014aa8:	7dbb      	ldrb	r3, [r7, #22]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3718      	adds	r7, #24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}

08014ab2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014ab2:	b580      	push	{r7, lr}
 8014ab4:	b086      	sub	sp, #24
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	60f8      	str	r0, [r7, #12]
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	461a      	mov	r2, r3
 8014abe:	460b      	mov	r3, r1
 8014ac0:	72fb      	strb	r3, [r7, #11]
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014aca:	2300      	movs	r3, #0
 8014acc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ad4:	893b      	ldrh	r3, [r7, #8]
 8014ad6:	7af9      	ldrb	r1, [r7, #11]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	f7f3 fe55 	bl	8008788 <HAL_PCD_EP_Receive>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ae2:	7dfb      	ldrb	r3, [r7, #23]
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f000 f831 	bl	8014b4c <USBD_Get_USB_Status>
 8014aea:	4603      	mov	r3, r0
 8014aec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014aee:	7dbb      	ldrb	r3, [r7, #22]
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3718      	adds	r7, #24
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	460b      	mov	r3, r1
 8014b02:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014b0a:	78fa      	ldrb	r2, [r7, #3]
 8014b0c:	4611      	mov	r1, r2
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7f3 fe77 	bl	8008802 <HAL_PCD_EP_GetRxCount>
 8014b14:	4603      	mov	r3, r0
}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3708      	adds	r7, #8
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}
	...

08014b20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014b20:	b480      	push	{r7}
 8014b22:	b083      	sub	sp, #12
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014b28:	4b02      	ldr	r3, [pc, #8]	; (8014b34 <USBD_static_malloc+0x14>)
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	370c      	adds	r7, #12
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bc80      	pop	{r7}
 8014b32:	4770      	bx	lr
 8014b34:	200085cc 	.word	0x200085cc

08014b38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014b38:	b480      	push	{r7}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]

}
 8014b40:	bf00      	nop
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bc80      	pop	{r7}
 8014b48:	4770      	bx	lr
	...

08014b4c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b085      	sub	sp, #20
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	4603      	mov	r3, r0
 8014b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b56:	2300      	movs	r3, #0
 8014b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014b5a:	79fb      	ldrb	r3, [r7, #7]
 8014b5c:	2b03      	cmp	r3, #3
 8014b5e:	d817      	bhi.n	8014b90 <USBD_Get_USB_Status+0x44>
 8014b60:	a201      	add	r2, pc, #4	; (adr r2, 8014b68 <USBD_Get_USB_Status+0x1c>)
 8014b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b66:	bf00      	nop
 8014b68:	08014b79 	.word	0x08014b79
 8014b6c:	08014b7f 	.word	0x08014b7f
 8014b70:	08014b85 	.word	0x08014b85
 8014b74:	08014b8b 	.word	0x08014b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8014b7c:	e00b      	b.n	8014b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014b7e:	2302      	movs	r3, #2
 8014b80:	73fb      	strb	r3, [r7, #15]
    break;
 8014b82:	e008      	b.n	8014b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014b84:	2301      	movs	r3, #1
 8014b86:	73fb      	strb	r3, [r7, #15]
    break;
 8014b88:	e005      	b.n	8014b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014b8a:	2302      	movs	r3, #2
 8014b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8014b8e:	e002      	b.n	8014b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014b90:	2302      	movs	r3, #2
 8014b92:	73fb      	strb	r3, [r7, #15]
    break;
 8014b94:	bf00      	nop
  }
  return usb_status;
 8014b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3714      	adds	r7, #20
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bc80      	pop	{r7}
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop

08014ba4 <__libc_init_array>:
 8014ba4:	b570      	push	{r4, r5, r6, lr}
 8014ba6:	2500      	movs	r5, #0
 8014ba8:	4e0c      	ldr	r6, [pc, #48]	; (8014bdc <__libc_init_array+0x38>)
 8014baa:	4c0d      	ldr	r4, [pc, #52]	; (8014be0 <__libc_init_array+0x3c>)
 8014bac:	1ba4      	subs	r4, r4, r6
 8014bae:	10a4      	asrs	r4, r4, #2
 8014bb0:	42a5      	cmp	r5, r4
 8014bb2:	d109      	bne.n	8014bc8 <__libc_init_array+0x24>
 8014bb4:	f004 fec6 	bl	8019944 <_init>
 8014bb8:	2500      	movs	r5, #0
 8014bba:	4e0a      	ldr	r6, [pc, #40]	; (8014be4 <__libc_init_array+0x40>)
 8014bbc:	4c0a      	ldr	r4, [pc, #40]	; (8014be8 <__libc_init_array+0x44>)
 8014bbe:	1ba4      	subs	r4, r4, r6
 8014bc0:	10a4      	asrs	r4, r4, #2
 8014bc2:	42a5      	cmp	r5, r4
 8014bc4:	d105      	bne.n	8014bd2 <__libc_init_array+0x2e>
 8014bc6:	bd70      	pop	{r4, r5, r6, pc}
 8014bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bcc:	4798      	blx	r3
 8014bce:	3501      	adds	r5, #1
 8014bd0:	e7ee      	b.n	8014bb0 <__libc_init_array+0xc>
 8014bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bd6:	4798      	blx	r3
 8014bd8:	3501      	adds	r5, #1
 8014bda:	e7f2      	b.n	8014bc2 <__libc_init_array+0x1e>
 8014bdc:	0801e664 	.word	0x0801e664
 8014be0:	0801e664 	.word	0x0801e664
 8014be4:	0801e664 	.word	0x0801e664
 8014be8:	0801e668 	.word	0x0801e668

08014bec <memcpy>:
 8014bec:	b510      	push	{r4, lr}
 8014bee:	1e43      	subs	r3, r0, #1
 8014bf0:	440a      	add	r2, r1
 8014bf2:	4291      	cmp	r1, r2
 8014bf4:	d100      	bne.n	8014bf8 <memcpy+0xc>
 8014bf6:	bd10      	pop	{r4, pc}
 8014bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c00:	e7f7      	b.n	8014bf2 <memcpy+0x6>

08014c02 <memmove>:
 8014c02:	4288      	cmp	r0, r1
 8014c04:	b510      	push	{r4, lr}
 8014c06:	eb01 0302 	add.w	r3, r1, r2
 8014c0a:	d807      	bhi.n	8014c1c <memmove+0x1a>
 8014c0c:	1e42      	subs	r2, r0, #1
 8014c0e:	4299      	cmp	r1, r3
 8014c10:	d00a      	beq.n	8014c28 <memmove+0x26>
 8014c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014c1a:	e7f8      	b.n	8014c0e <memmove+0xc>
 8014c1c:	4283      	cmp	r3, r0
 8014c1e:	d9f5      	bls.n	8014c0c <memmove+0xa>
 8014c20:	1881      	adds	r1, r0, r2
 8014c22:	1ad2      	subs	r2, r2, r3
 8014c24:	42d3      	cmn	r3, r2
 8014c26:	d100      	bne.n	8014c2a <memmove+0x28>
 8014c28:	bd10      	pop	{r4, pc}
 8014c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014c32:	e7f7      	b.n	8014c24 <memmove+0x22>

08014c34 <memset>:
 8014c34:	4603      	mov	r3, r0
 8014c36:	4402      	add	r2, r0
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	d100      	bne.n	8014c3e <memset+0xa>
 8014c3c:	4770      	bx	lr
 8014c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8014c42:	e7f9      	b.n	8014c38 <memset+0x4>

08014c44 <__cvt>:
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c4a:	461e      	mov	r6, r3
 8014c4c:	bfbb      	ittet	lt
 8014c4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8014c52:	461e      	movlt	r6, r3
 8014c54:	2300      	movge	r3, #0
 8014c56:	232d      	movlt	r3, #45	; 0x2d
 8014c58:	b088      	sub	sp, #32
 8014c5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014c5c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8014c60:	f027 0720 	bic.w	r7, r7, #32
 8014c64:	2f46      	cmp	r7, #70	; 0x46
 8014c66:	4614      	mov	r4, r2
 8014c68:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014c6a:	700b      	strb	r3, [r1, #0]
 8014c6c:	d004      	beq.n	8014c78 <__cvt+0x34>
 8014c6e:	2f45      	cmp	r7, #69	; 0x45
 8014c70:	d100      	bne.n	8014c74 <__cvt+0x30>
 8014c72:	3501      	adds	r5, #1
 8014c74:	2302      	movs	r3, #2
 8014c76:	e000      	b.n	8014c7a <__cvt+0x36>
 8014c78:	2303      	movs	r3, #3
 8014c7a:	aa07      	add	r2, sp, #28
 8014c7c:	9204      	str	r2, [sp, #16]
 8014c7e:	aa06      	add	r2, sp, #24
 8014c80:	e9cd a202 	strd	sl, r2, [sp, #8]
 8014c84:	e9cd 3500 	strd	r3, r5, [sp]
 8014c88:	4622      	mov	r2, r4
 8014c8a:	4633      	mov	r3, r6
 8014c8c:	f001 ff80 	bl	8016b90 <_dtoa_r>
 8014c90:	2f47      	cmp	r7, #71	; 0x47
 8014c92:	4680      	mov	r8, r0
 8014c94:	d102      	bne.n	8014c9c <__cvt+0x58>
 8014c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c98:	07db      	lsls	r3, r3, #31
 8014c9a:	d526      	bpl.n	8014cea <__cvt+0xa6>
 8014c9c:	2f46      	cmp	r7, #70	; 0x46
 8014c9e:	eb08 0905 	add.w	r9, r8, r5
 8014ca2:	d111      	bne.n	8014cc8 <__cvt+0x84>
 8014ca4:	f898 3000 	ldrb.w	r3, [r8]
 8014ca8:	2b30      	cmp	r3, #48	; 0x30
 8014caa:	d10a      	bne.n	8014cc2 <__cvt+0x7e>
 8014cac:	2200      	movs	r2, #0
 8014cae:	2300      	movs	r3, #0
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	4631      	mov	r1, r6
 8014cb4:	f7eb fe9a 	bl	80009ec <__aeabi_dcmpeq>
 8014cb8:	b918      	cbnz	r0, 8014cc2 <__cvt+0x7e>
 8014cba:	f1c5 0501 	rsb	r5, r5, #1
 8014cbe:	f8ca 5000 	str.w	r5, [sl]
 8014cc2:	f8da 3000 	ldr.w	r3, [sl]
 8014cc6:	4499      	add	r9, r3
 8014cc8:	2200      	movs	r2, #0
 8014cca:	2300      	movs	r3, #0
 8014ccc:	4620      	mov	r0, r4
 8014cce:	4631      	mov	r1, r6
 8014cd0:	f7eb fe8c 	bl	80009ec <__aeabi_dcmpeq>
 8014cd4:	b938      	cbnz	r0, 8014ce6 <__cvt+0xa2>
 8014cd6:	2230      	movs	r2, #48	; 0x30
 8014cd8:	9b07      	ldr	r3, [sp, #28]
 8014cda:	454b      	cmp	r3, r9
 8014cdc:	d205      	bcs.n	8014cea <__cvt+0xa6>
 8014cde:	1c59      	adds	r1, r3, #1
 8014ce0:	9107      	str	r1, [sp, #28]
 8014ce2:	701a      	strb	r2, [r3, #0]
 8014ce4:	e7f8      	b.n	8014cd8 <__cvt+0x94>
 8014ce6:	f8cd 901c 	str.w	r9, [sp, #28]
 8014cea:	4640      	mov	r0, r8
 8014cec:	9b07      	ldr	r3, [sp, #28]
 8014cee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cf0:	eba3 0308 	sub.w	r3, r3, r8
 8014cf4:	6013      	str	r3, [r2, #0]
 8014cf6:	b008      	add	sp, #32
 8014cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014cfc <__exponent>:
 8014cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cfe:	2900      	cmp	r1, #0
 8014d00:	bfb4      	ite	lt
 8014d02:	232d      	movlt	r3, #45	; 0x2d
 8014d04:	232b      	movge	r3, #43	; 0x2b
 8014d06:	4604      	mov	r4, r0
 8014d08:	bfb8      	it	lt
 8014d0a:	4249      	neglt	r1, r1
 8014d0c:	2909      	cmp	r1, #9
 8014d0e:	f804 2b02 	strb.w	r2, [r4], #2
 8014d12:	7043      	strb	r3, [r0, #1]
 8014d14:	dd21      	ble.n	8014d5a <__exponent+0x5e>
 8014d16:	f10d 0307 	add.w	r3, sp, #7
 8014d1a:	461f      	mov	r7, r3
 8014d1c:	260a      	movs	r6, #10
 8014d1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014d22:	fb06 1115 	mls	r1, r6, r5, r1
 8014d26:	2d09      	cmp	r5, #9
 8014d28:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8014d2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014d30:	f103 32ff 	add.w	r2, r3, #4294967295
 8014d34:	4629      	mov	r1, r5
 8014d36:	dc09      	bgt.n	8014d4c <__exponent+0x50>
 8014d38:	3130      	adds	r1, #48	; 0x30
 8014d3a:	3b02      	subs	r3, #2
 8014d3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014d40:	42bb      	cmp	r3, r7
 8014d42:	4622      	mov	r2, r4
 8014d44:	d304      	bcc.n	8014d50 <__exponent+0x54>
 8014d46:	1a10      	subs	r0, r2, r0
 8014d48:	b003      	add	sp, #12
 8014d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	e7e6      	b.n	8014d1e <__exponent+0x22>
 8014d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d54:	f804 2b01 	strb.w	r2, [r4], #1
 8014d58:	e7f2      	b.n	8014d40 <__exponent+0x44>
 8014d5a:	2330      	movs	r3, #48	; 0x30
 8014d5c:	4419      	add	r1, r3
 8014d5e:	7083      	strb	r3, [r0, #2]
 8014d60:	1d02      	adds	r2, r0, #4
 8014d62:	70c1      	strb	r1, [r0, #3]
 8014d64:	e7ef      	b.n	8014d46 <__exponent+0x4a>
	...

08014d68 <_printf_float>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	b091      	sub	sp, #68	; 0x44
 8014d6e:	460c      	mov	r4, r1
 8014d70:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014d72:	4693      	mov	fp, r2
 8014d74:	461e      	mov	r6, r3
 8014d76:	4605      	mov	r5, r0
 8014d78:	f003 f974 	bl	8018064 <_localeconv_r>
 8014d7c:	6803      	ldr	r3, [r0, #0]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	9309      	str	r3, [sp, #36]	; 0x24
 8014d82:	f7eb fa07 	bl	8000194 <strlen>
 8014d86:	2300      	movs	r3, #0
 8014d88:	930e      	str	r3, [sp, #56]	; 0x38
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	900a      	str	r0, [sp, #40]	; 0x28
 8014d8e:	3307      	adds	r3, #7
 8014d90:	f023 0307 	bic.w	r3, r3, #7
 8014d94:	f103 0208 	add.w	r2, r3, #8
 8014d98:	f894 8018 	ldrb.w	r8, [r4, #24]
 8014d9c:	f8d4 a000 	ldr.w	sl, [r4]
 8014da0:	603a      	str	r2, [r7, #0]
 8014da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014daa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8014dae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014db4:	f04f 32ff 	mov.w	r2, #4294967295
 8014db8:	4ba6      	ldr	r3, [pc, #664]	; (8015054 <_printf_float+0x2ec>)
 8014dba:	4638      	mov	r0, r7
 8014dbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dbe:	f7eb fe47 	bl	8000a50 <__aeabi_dcmpun>
 8014dc2:	bb68      	cbnz	r0, 8014e20 <_printf_float+0xb8>
 8014dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8014dc8:	4ba2      	ldr	r3, [pc, #648]	; (8015054 <_printf_float+0x2ec>)
 8014dca:	4638      	mov	r0, r7
 8014dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014dce:	f7eb fe21 	bl	8000a14 <__aeabi_dcmple>
 8014dd2:	bb28      	cbnz	r0, 8014e20 <_printf_float+0xb8>
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	4638      	mov	r0, r7
 8014dda:	4649      	mov	r1, r9
 8014ddc:	f7eb fe10 	bl	8000a00 <__aeabi_dcmplt>
 8014de0:	b110      	cbz	r0, 8014de8 <_printf_float+0x80>
 8014de2:	232d      	movs	r3, #45	; 0x2d
 8014de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014de8:	4f9b      	ldr	r7, [pc, #620]	; (8015058 <_printf_float+0x2f0>)
 8014dea:	4b9c      	ldr	r3, [pc, #624]	; (801505c <_printf_float+0x2f4>)
 8014dec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014df0:	bf98      	it	ls
 8014df2:	461f      	movls	r7, r3
 8014df4:	2303      	movs	r3, #3
 8014df6:	f04f 0900 	mov.w	r9, #0
 8014dfa:	6123      	str	r3, [r4, #16]
 8014dfc:	f02a 0304 	bic.w	r3, sl, #4
 8014e00:	6023      	str	r3, [r4, #0]
 8014e02:	9600      	str	r6, [sp, #0]
 8014e04:	465b      	mov	r3, fp
 8014e06:	aa0f      	add	r2, sp, #60	; 0x3c
 8014e08:	4621      	mov	r1, r4
 8014e0a:	4628      	mov	r0, r5
 8014e0c:	f000 f9e2 	bl	80151d4 <_printf_common>
 8014e10:	3001      	adds	r0, #1
 8014e12:	f040 8090 	bne.w	8014f36 <_printf_float+0x1ce>
 8014e16:	f04f 30ff 	mov.w	r0, #4294967295
 8014e1a:	b011      	add	sp, #68	; 0x44
 8014e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e20:	463a      	mov	r2, r7
 8014e22:	464b      	mov	r3, r9
 8014e24:	4638      	mov	r0, r7
 8014e26:	4649      	mov	r1, r9
 8014e28:	f7eb fe12 	bl	8000a50 <__aeabi_dcmpun>
 8014e2c:	b110      	cbz	r0, 8014e34 <_printf_float+0xcc>
 8014e2e:	4f8c      	ldr	r7, [pc, #560]	; (8015060 <_printf_float+0x2f8>)
 8014e30:	4b8c      	ldr	r3, [pc, #560]	; (8015064 <_printf_float+0x2fc>)
 8014e32:	e7db      	b.n	8014dec <_printf_float+0x84>
 8014e34:	6863      	ldr	r3, [r4, #4]
 8014e36:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8014e3a:	1c59      	adds	r1, r3, #1
 8014e3c:	a80d      	add	r0, sp, #52	; 0x34
 8014e3e:	a90e      	add	r1, sp, #56	; 0x38
 8014e40:	d140      	bne.n	8014ec4 <_printf_float+0x15c>
 8014e42:	2306      	movs	r3, #6
 8014e44:	6063      	str	r3, [r4, #4]
 8014e46:	f04f 0c00 	mov.w	ip, #0
 8014e4a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8014e4e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8014e52:	6863      	ldr	r3, [r4, #4]
 8014e54:	6022      	str	r2, [r4, #0]
 8014e56:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8014e5a:	9300      	str	r3, [sp, #0]
 8014e5c:	463a      	mov	r2, r7
 8014e5e:	464b      	mov	r3, r9
 8014e60:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8014e64:	4628      	mov	r0, r5
 8014e66:	f7ff feed 	bl	8014c44 <__cvt>
 8014e6a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8014e6e:	2b47      	cmp	r3, #71	; 0x47
 8014e70:	4607      	mov	r7, r0
 8014e72:	d109      	bne.n	8014e88 <_printf_float+0x120>
 8014e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e76:	1cd8      	adds	r0, r3, #3
 8014e78:	db02      	blt.n	8014e80 <_printf_float+0x118>
 8014e7a:	6862      	ldr	r2, [r4, #4]
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	dd47      	ble.n	8014f10 <_printf_float+0x1a8>
 8014e80:	f1a8 0802 	sub.w	r8, r8, #2
 8014e84:	fa5f f888 	uxtb.w	r8, r8
 8014e88:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8014e8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e8e:	d824      	bhi.n	8014eda <_printf_float+0x172>
 8014e90:	3901      	subs	r1, #1
 8014e92:	4642      	mov	r2, r8
 8014e94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014e98:	910d      	str	r1, [sp, #52]	; 0x34
 8014e9a:	f7ff ff2f 	bl	8014cfc <__exponent>
 8014e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ea0:	4681      	mov	r9, r0
 8014ea2:	1813      	adds	r3, r2, r0
 8014ea4:	2a01      	cmp	r2, #1
 8014ea6:	6123      	str	r3, [r4, #16]
 8014ea8:	dc02      	bgt.n	8014eb0 <_printf_float+0x148>
 8014eaa:	6822      	ldr	r2, [r4, #0]
 8014eac:	07d1      	lsls	r1, r2, #31
 8014eae:	d501      	bpl.n	8014eb4 <_printf_float+0x14c>
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	6123      	str	r3, [r4, #16]
 8014eb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d0a2      	beq.n	8014e02 <_printf_float+0x9a>
 8014ebc:	232d      	movs	r3, #45	; 0x2d
 8014ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ec2:	e79e      	b.n	8014e02 <_printf_float+0x9a>
 8014ec4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8014ec8:	f000 816e 	beq.w	80151a8 <_printf_float+0x440>
 8014ecc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014ed0:	d1b9      	bne.n	8014e46 <_printf_float+0xde>
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d1b7      	bne.n	8014e46 <_printf_float+0xde>
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	e7b4      	b.n	8014e44 <_printf_float+0xdc>
 8014eda:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8014ede:	d119      	bne.n	8014f14 <_printf_float+0x1ac>
 8014ee0:	2900      	cmp	r1, #0
 8014ee2:	6863      	ldr	r3, [r4, #4]
 8014ee4:	dd0c      	ble.n	8014f00 <_printf_float+0x198>
 8014ee6:	6121      	str	r1, [r4, #16]
 8014ee8:	b913      	cbnz	r3, 8014ef0 <_printf_float+0x188>
 8014eea:	6822      	ldr	r2, [r4, #0]
 8014eec:	07d2      	lsls	r2, r2, #31
 8014eee:	d502      	bpl.n	8014ef6 <_printf_float+0x18e>
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	440b      	add	r3, r1
 8014ef4:	6123      	str	r3, [r4, #16]
 8014ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ef8:	f04f 0900 	mov.w	r9, #0
 8014efc:	65a3      	str	r3, [r4, #88]	; 0x58
 8014efe:	e7d9      	b.n	8014eb4 <_printf_float+0x14c>
 8014f00:	b913      	cbnz	r3, 8014f08 <_printf_float+0x1a0>
 8014f02:	6822      	ldr	r2, [r4, #0]
 8014f04:	07d0      	lsls	r0, r2, #31
 8014f06:	d501      	bpl.n	8014f0c <_printf_float+0x1a4>
 8014f08:	3302      	adds	r3, #2
 8014f0a:	e7f3      	b.n	8014ef4 <_printf_float+0x18c>
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	e7f1      	b.n	8014ef4 <_printf_float+0x18c>
 8014f10:	f04f 0867 	mov.w	r8, #103	; 0x67
 8014f14:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	db05      	blt.n	8014f28 <_printf_float+0x1c0>
 8014f1c:	6822      	ldr	r2, [r4, #0]
 8014f1e:	6123      	str	r3, [r4, #16]
 8014f20:	07d1      	lsls	r1, r2, #31
 8014f22:	d5e8      	bpl.n	8014ef6 <_printf_float+0x18e>
 8014f24:	3301      	adds	r3, #1
 8014f26:	e7e5      	b.n	8014ef4 <_printf_float+0x18c>
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	bfcc      	ite	gt
 8014f2c:	2301      	movgt	r3, #1
 8014f2e:	f1c3 0302 	rsble	r3, r3, #2
 8014f32:	4413      	add	r3, r2
 8014f34:	e7de      	b.n	8014ef4 <_printf_float+0x18c>
 8014f36:	6823      	ldr	r3, [r4, #0]
 8014f38:	055a      	lsls	r2, r3, #21
 8014f3a:	d407      	bmi.n	8014f4c <_printf_float+0x1e4>
 8014f3c:	6923      	ldr	r3, [r4, #16]
 8014f3e:	463a      	mov	r2, r7
 8014f40:	4659      	mov	r1, fp
 8014f42:	4628      	mov	r0, r5
 8014f44:	47b0      	blx	r6
 8014f46:	3001      	adds	r0, #1
 8014f48:	d129      	bne.n	8014f9e <_printf_float+0x236>
 8014f4a:	e764      	b.n	8014e16 <_printf_float+0xae>
 8014f4c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8014f50:	f240 80d7 	bls.w	8015102 <_printf_float+0x39a>
 8014f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014f58:	2200      	movs	r2, #0
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	f7eb fd46 	bl	80009ec <__aeabi_dcmpeq>
 8014f60:	b388      	cbz	r0, 8014fc6 <_printf_float+0x25e>
 8014f62:	2301      	movs	r3, #1
 8014f64:	4a40      	ldr	r2, [pc, #256]	; (8015068 <_printf_float+0x300>)
 8014f66:	4659      	mov	r1, fp
 8014f68:	4628      	mov	r0, r5
 8014f6a:	47b0      	blx	r6
 8014f6c:	3001      	adds	r0, #1
 8014f6e:	f43f af52 	beq.w	8014e16 <_printf_float+0xae>
 8014f72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014f76:	429a      	cmp	r2, r3
 8014f78:	db02      	blt.n	8014f80 <_printf_float+0x218>
 8014f7a:	6823      	ldr	r3, [r4, #0]
 8014f7c:	07d8      	lsls	r0, r3, #31
 8014f7e:	d50e      	bpl.n	8014f9e <_printf_float+0x236>
 8014f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014f84:	4659      	mov	r1, fp
 8014f86:	4628      	mov	r0, r5
 8014f88:	47b0      	blx	r6
 8014f8a:	3001      	adds	r0, #1
 8014f8c:	f43f af43 	beq.w	8014e16 <_printf_float+0xae>
 8014f90:	2700      	movs	r7, #0
 8014f92:	f104 081a 	add.w	r8, r4, #26
 8014f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f98:	3b01      	subs	r3, #1
 8014f9a:	42bb      	cmp	r3, r7
 8014f9c:	dc09      	bgt.n	8014fb2 <_printf_float+0x24a>
 8014f9e:	6823      	ldr	r3, [r4, #0]
 8014fa0:	079f      	lsls	r7, r3, #30
 8014fa2:	f100 80fd 	bmi.w	80151a0 <_printf_float+0x438>
 8014fa6:	68e0      	ldr	r0, [r4, #12]
 8014fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014faa:	4298      	cmp	r0, r3
 8014fac:	bfb8      	it	lt
 8014fae:	4618      	movlt	r0, r3
 8014fb0:	e733      	b.n	8014e1a <_printf_float+0xb2>
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	4642      	mov	r2, r8
 8014fb6:	4659      	mov	r1, fp
 8014fb8:	4628      	mov	r0, r5
 8014fba:	47b0      	blx	r6
 8014fbc:	3001      	adds	r0, #1
 8014fbe:	f43f af2a 	beq.w	8014e16 <_printf_float+0xae>
 8014fc2:	3701      	adds	r7, #1
 8014fc4:	e7e7      	b.n	8014f96 <_printf_float+0x22e>
 8014fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	dc2b      	bgt.n	8015024 <_printf_float+0x2bc>
 8014fcc:	2301      	movs	r3, #1
 8014fce:	4a26      	ldr	r2, [pc, #152]	; (8015068 <_printf_float+0x300>)
 8014fd0:	4659      	mov	r1, fp
 8014fd2:	4628      	mov	r0, r5
 8014fd4:	47b0      	blx	r6
 8014fd6:	3001      	adds	r0, #1
 8014fd8:	f43f af1d 	beq.w	8014e16 <_printf_float+0xae>
 8014fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fde:	b923      	cbnz	r3, 8014fea <_printf_float+0x282>
 8014fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fe2:	b913      	cbnz	r3, 8014fea <_printf_float+0x282>
 8014fe4:	6823      	ldr	r3, [r4, #0]
 8014fe6:	07d9      	lsls	r1, r3, #31
 8014fe8:	d5d9      	bpl.n	8014f9e <_printf_float+0x236>
 8014fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014fee:	4659      	mov	r1, fp
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	47b0      	blx	r6
 8014ff4:	3001      	adds	r0, #1
 8014ff6:	f43f af0e 	beq.w	8014e16 <_printf_float+0xae>
 8014ffa:	f04f 0800 	mov.w	r8, #0
 8014ffe:	f104 091a 	add.w	r9, r4, #26
 8015002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015004:	425b      	negs	r3, r3
 8015006:	4543      	cmp	r3, r8
 8015008:	dc01      	bgt.n	801500e <_printf_float+0x2a6>
 801500a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801500c:	e797      	b.n	8014f3e <_printf_float+0x1d6>
 801500e:	2301      	movs	r3, #1
 8015010:	464a      	mov	r2, r9
 8015012:	4659      	mov	r1, fp
 8015014:	4628      	mov	r0, r5
 8015016:	47b0      	blx	r6
 8015018:	3001      	adds	r0, #1
 801501a:	f43f aefc 	beq.w	8014e16 <_printf_float+0xae>
 801501e:	f108 0801 	add.w	r8, r8, #1
 8015022:	e7ee      	b.n	8015002 <_printf_float+0x29a>
 8015024:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015028:	429a      	cmp	r2, r3
 801502a:	bfa8      	it	ge
 801502c:	461a      	movge	r2, r3
 801502e:	2a00      	cmp	r2, #0
 8015030:	4690      	mov	r8, r2
 8015032:	dd07      	ble.n	8015044 <_printf_float+0x2dc>
 8015034:	4613      	mov	r3, r2
 8015036:	4659      	mov	r1, fp
 8015038:	463a      	mov	r2, r7
 801503a:	4628      	mov	r0, r5
 801503c:	47b0      	blx	r6
 801503e:	3001      	adds	r0, #1
 8015040:	f43f aee9 	beq.w	8014e16 <_printf_float+0xae>
 8015044:	f104 031a 	add.w	r3, r4, #26
 8015048:	f04f 0a00 	mov.w	sl, #0
 801504c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8015050:	930b      	str	r3, [sp, #44]	; 0x2c
 8015052:	e015      	b.n	8015080 <_printf_float+0x318>
 8015054:	7fefffff 	.word	0x7fefffff
 8015058:	0801e32c 	.word	0x0801e32c
 801505c:	0801e328 	.word	0x0801e328
 8015060:	0801e334 	.word	0x0801e334
 8015064:	0801e330 	.word	0x0801e330
 8015068:	0801e553 	.word	0x0801e553
 801506c:	2301      	movs	r3, #1
 801506e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015070:	4659      	mov	r1, fp
 8015072:	4628      	mov	r0, r5
 8015074:	47b0      	blx	r6
 8015076:	3001      	adds	r0, #1
 8015078:	f43f aecd 	beq.w	8014e16 <_printf_float+0xae>
 801507c:	f10a 0a01 	add.w	sl, sl, #1
 8015080:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8015084:	eba9 0308 	sub.w	r3, r9, r8
 8015088:	4553      	cmp	r3, sl
 801508a:	dcef      	bgt.n	801506c <_printf_float+0x304>
 801508c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015090:	429a      	cmp	r2, r3
 8015092:	444f      	add	r7, r9
 8015094:	db14      	blt.n	80150c0 <_printf_float+0x358>
 8015096:	6823      	ldr	r3, [r4, #0]
 8015098:	07da      	lsls	r2, r3, #31
 801509a:	d411      	bmi.n	80150c0 <_printf_float+0x358>
 801509c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801509e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80150a0:	eba3 0209 	sub.w	r2, r3, r9
 80150a4:	eba3 0901 	sub.w	r9, r3, r1
 80150a8:	4591      	cmp	r9, r2
 80150aa:	bfa8      	it	ge
 80150ac:	4691      	movge	r9, r2
 80150ae:	f1b9 0f00 	cmp.w	r9, #0
 80150b2:	dc0d      	bgt.n	80150d0 <_printf_float+0x368>
 80150b4:	2700      	movs	r7, #0
 80150b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150ba:	f104 081a 	add.w	r8, r4, #26
 80150be:	e018      	b.n	80150f2 <_printf_float+0x38a>
 80150c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150c4:	4659      	mov	r1, fp
 80150c6:	4628      	mov	r0, r5
 80150c8:	47b0      	blx	r6
 80150ca:	3001      	adds	r0, #1
 80150cc:	d1e6      	bne.n	801509c <_printf_float+0x334>
 80150ce:	e6a2      	b.n	8014e16 <_printf_float+0xae>
 80150d0:	464b      	mov	r3, r9
 80150d2:	463a      	mov	r2, r7
 80150d4:	4659      	mov	r1, fp
 80150d6:	4628      	mov	r0, r5
 80150d8:	47b0      	blx	r6
 80150da:	3001      	adds	r0, #1
 80150dc:	d1ea      	bne.n	80150b4 <_printf_float+0x34c>
 80150de:	e69a      	b.n	8014e16 <_printf_float+0xae>
 80150e0:	2301      	movs	r3, #1
 80150e2:	4642      	mov	r2, r8
 80150e4:	4659      	mov	r1, fp
 80150e6:	4628      	mov	r0, r5
 80150e8:	47b0      	blx	r6
 80150ea:	3001      	adds	r0, #1
 80150ec:	f43f ae93 	beq.w	8014e16 <_printf_float+0xae>
 80150f0:	3701      	adds	r7, #1
 80150f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80150f6:	1a9b      	subs	r3, r3, r2
 80150f8:	eba3 0309 	sub.w	r3, r3, r9
 80150fc:	42bb      	cmp	r3, r7
 80150fe:	dcef      	bgt.n	80150e0 <_printf_float+0x378>
 8015100:	e74d      	b.n	8014f9e <_printf_float+0x236>
 8015102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015104:	2a01      	cmp	r2, #1
 8015106:	dc01      	bgt.n	801510c <_printf_float+0x3a4>
 8015108:	07db      	lsls	r3, r3, #31
 801510a:	d538      	bpl.n	801517e <_printf_float+0x416>
 801510c:	2301      	movs	r3, #1
 801510e:	463a      	mov	r2, r7
 8015110:	4659      	mov	r1, fp
 8015112:	4628      	mov	r0, r5
 8015114:	47b0      	blx	r6
 8015116:	3001      	adds	r0, #1
 8015118:	f43f ae7d 	beq.w	8014e16 <_printf_float+0xae>
 801511c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015120:	4659      	mov	r1, fp
 8015122:	4628      	mov	r0, r5
 8015124:	47b0      	blx	r6
 8015126:	3001      	adds	r0, #1
 8015128:	f107 0701 	add.w	r7, r7, #1
 801512c:	f43f ae73 	beq.w	8014e16 <_printf_float+0xae>
 8015130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015136:	2200      	movs	r2, #0
 8015138:	f103 38ff 	add.w	r8, r3, #4294967295
 801513c:	2300      	movs	r3, #0
 801513e:	f7eb fc55 	bl	80009ec <__aeabi_dcmpeq>
 8015142:	b9c0      	cbnz	r0, 8015176 <_printf_float+0x40e>
 8015144:	4643      	mov	r3, r8
 8015146:	463a      	mov	r2, r7
 8015148:	4659      	mov	r1, fp
 801514a:	4628      	mov	r0, r5
 801514c:	47b0      	blx	r6
 801514e:	3001      	adds	r0, #1
 8015150:	d10d      	bne.n	801516e <_printf_float+0x406>
 8015152:	e660      	b.n	8014e16 <_printf_float+0xae>
 8015154:	2301      	movs	r3, #1
 8015156:	4642      	mov	r2, r8
 8015158:	4659      	mov	r1, fp
 801515a:	4628      	mov	r0, r5
 801515c:	47b0      	blx	r6
 801515e:	3001      	adds	r0, #1
 8015160:	f43f ae59 	beq.w	8014e16 <_printf_float+0xae>
 8015164:	3701      	adds	r7, #1
 8015166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015168:	3b01      	subs	r3, #1
 801516a:	42bb      	cmp	r3, r7
 801516c:	dcf2      	bgt.n	8015154 <_printf_float+0x3ec>
 801516e:	464b      	mov	r3, r9
 8015170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015174:	e6e4      	b.n	8014f40 <_printf_float+0x1d8>
 8015176:	2700      	movs	r7, #0
 8015178:	f104 081a 	add.w	r8, r4, #26
 801517c:	e7f3      	b.n	8015166 <_printf_float+0x3fe>
 801517e:	2301      	movs	r3, #1
 8015180:	e7e1      	b.n	8015146 <_printf_float+0x3de>
 8015182:	2301      	movs	r3, #1
 8015184:	4642      	mov	r2, r8
 8015186:	4659      	mov	r1, fp
 8015188:	4628      	mov	r0, r5
 801518a:	47b0      	blx	r6
 801518c:	3001      	adds	r0, #1
 801518e:	f43f ae42 	beq.w	8014e16 <_printf_float+0xae>
 8015192:	3701      	adds	r7, #1
 8015194:	68e3      	ldr	r3, [r4, #12]
 8015196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015198:	1a9b      	subs	r3, r3, r2
 801519a:	42bb      	cmp	r3, r7
 801519c:	dcf1      	bgt.n	8015182 <_printf_float+0x41a>
 801519e:	e702      	b.n	8014fa6 <_printf_float+0x23e>
 80151a0:	2700      	movs	r7, #0
 80151a2:	f104 0819 	add.w	r8, r4, #25
 80151a6:	e7f5      	b.n	8015194 <_printf_float+0x42c>
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f43f ae94 	beq.w	8014ed6 <_printf_float+0x16e>
 80151ae:	f04f 0c00 	mov.w	ip, #0
 80151b2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80151b6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80151ba:	6022      	str	r2, [r4, #0]
 80151bc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80151c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80151c4:	9300      	str	r3, [sp, #0]
 80151c6:	463a      	mov	r2, r7
 80151c8:	464b      	mov	r3, r9
 80151ca:	4628      	mov	r0, r5
 80151cc:	f7ff fd3a 	bl	8014c44 <__cvt>
 80151d0:	4607      	mov	r7, r0
 80151d2:	e64f      	b.n	8014e74 <_printf_float+0x10c>

080151d4 <_printf_common>:
 80151d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151d8:	4691      	mov	r9, r2
 80151da:	461f      	mov	r7, r3
 80151dc:	688a      	ldr	r2, [r1, #8]
 80151de:	690b      	ldr	r3, [r1, #16]
 80151e0:	4606      	mov	r6, r0
 80151e2:	4293      	cmp	r3, r2
 80151e4:	bfb8      	it	lt
 80151e6:	4613      	movlt	r3, r2
 80151e8:	f8c9 3000 	str.w	r3, [r9]
 80151ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80151f0:	460c      	mov	r4, r1
 80151f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151f6:	b112      	cbz	r2, 80151fe <_printf_common+0x2a>
 80151f8:	3301      	adds	r3, #1
 80151fa:	f8c9 3000 	str.w	r3, [r9]
 80151fe:	6823      	ldr	r3, [r4, #0]
 8015200:	0699      	lsls	r1, r3, #26
 8015202:	bf42      	ittt	mi
 8015204:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015208:	3302      	addmi	r3, #2
 801520a:	f8c9 3000 	strmi.w	r3, [r9]
 801520e:	6825      	ldr	r5, [r4, #0]
 8015210:	f015 0506 	ands.w	r5, r5, #6
 8015214:	d107      	bne.n	8015226 <_printf_common+0x52>
 8015216:	f104 0a19 	add.w	sl, r4, #25
 801521a:	68e3      	ldr	r3, [r4, #12]
 801521c:	f8d9 2000 	ldr.w	r2, [r9]
 8015220:	1a9b      	subs	r3, r3, r2
 8015222:	42ab      	cmp	r3, r5
 8015224:	dc29      	bgt.n	801527a <_printf_common+0xa6>
 8015226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801522a:	6822      	ldr	r2, [r4, #0]
 801522c:	3300      	adds	r3, #0
 801522e:	bf18      	it	ne
 8015230:	2301      	movne	r3, #1
 8015232:	0692      	lsls	r2, r2, #26
 8015234:	d42e      	bmi.n	8015294 <_printf_common+0xc0>
 8015236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801523a:	4639      	mov	r1, r7
 801523c:	4630      	mov	r0, r6
 801523e:	47c0      	blx	r8
 8015240:	3001      	adds	r0, #1
 8015242:	d021      	beq.n	8015288 <_printf_common+0xb4>
 8015244:	6823      	ldr	r3, [r4, #0]
 8015246:	68e5      	ldr	r5, [r4, #12]
 8015248:	f003 0306 	and.w	r3, r3, #6
 801524c:	2b04      	cmp	r3, #4
 801524e:	bf18      	it	ne
 8015250:	2500      	movne	r5, #0
 8015252:	f8d9 2000 	ldr.w	r2, [r9]
 8015256:	f04f 0900 	mov.w	r9, #0
 801525a:	bf08      	it	eq
 801525c:	1aad      	subeq	r5, r5, r2
 801525e:	68a3      	ldr	r3, [r4, #8]
 8015260:	6922      	ldr	r2, [r4, #16]
 8015262:	bf08      	it	eq
 8015264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015268:	4293      	cmp	r3, r2
 801526a:	bfc4      	itt	gt
 801526c:	1a9b      	subgt	r3, r3, r2
 801526e:	18ed      	addgt	r5, r5, r3
 8015270:	341a      	adds	r4, #26
 8015272:	454d      	cmp	r5, r9
 8015274:	d11a      	bne.n	80152ac <_printf_common+0xd8>
 8015276:	2000      	movs	r0, #0
 8015278:	e008      	b.n	801528c <_printf_common+0xb8>
 801527a:	2301      	movs	r3, #1
 801527c:	4652      	mov	r2, sl
 801527e:	4639      	mov	r1, r7
 8015280:	4630      	mov	r0, r6
 8015282:	47c0      	blx	r8
 8015284:	3001      	adds	r0, #1
 8015286:	d103      	bne.n	8015290 <_printf_common+0xbc>
 8015288:	f04f 30ff 	mov.w	r0, #4294967295
 801528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015290:	3501      	adds	r5, #1
 8015292:	e7c2      	b.n	801521a <_printf_common+0x46>
 8015294:	2030      	movs	r0, #48	; 0x30
 8015296:	18e1      	adds	r1, r4, r3
 8015298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801529c:	1c5a      	adds	r2, r3, #1
 801529e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80152a2:	4422      	add	r2, r4
 80152a4:	3302      	adds	r3, #2
 80152a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80152aa:	e7c4      	b.n	8015236 <_printf_common+0x62>
 80152ac:	2301      	movs	r3, #1
 80152ae:	4622      	mov	r2, r4
 80152b0:	4639      	mov	r1, r7
 80152b2:	4630      	mov	r0, r6
 80152b4:	47c0      	blx	r8
 80152b6:	3001      	adds	r0, #1
 80152b8:	d0e6      	beq.n	8015288 <_printf_common+0xb4>
 80152ba:	f109 0901 	add.w	r9, r9, #1
 80152be:	e7d8      	b.n	8015272 <_printf_common+0x9e>

080152c0 <_printf_i>:
 80152c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80152c8:	460c      	mov	r4, r1
 80152ca:	7e09      	ldrb	r1, [r1, #24]
 80152cc:	b085      	sub	sp, #20
 80152ce:	296e      	cmp	r1, #110	; 0x6e
 80152d0:	4617      	mov	r7, r2
 80152d2:	4606      	mov	r6, r0
 80152d4:	4698      	mov	r8, r3
 80152d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152d8:	f000 80b3 	beq.w	8015442 <_printf_i+0x182>
 80152dc:	d822      	bhi.n	8015324 <_printf_i+0x64>
 80152de:	2963      	cmp	r1, #99	; 0x63
 80152e0:	d036      	beq.n	8015350 <_printf_i+0x90>
 80152e2:	d80a      	bhi.n	80152fa <_printf_i+0x3a>
 80152e4:	2900      	cmp	r1, #0
 80152e6:	f000 80b9 	beq.w	801545c <_printf_i+0x19c>
 80152ea:	2958      	cmp	r1, #88	; 0x58
 80152ec:	f000 8083 	beq.w	80153f6 <_printf_i+0x136>
 80152f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80152f8:	e032      	b.n	8015360 <_printf_i+0xa0>
 80152fa:	2964      	cmp	r1, #100	; 0x64
 80152fc:	d001      	beq.n	8015302 <_printf_i+0x42>
 80152fe:	2969      	cmp	r1, #105	; 0x69
 8015300:	d1f6      	bne.n	80152f0 <_printf_i+0x30>
 8015302:	6820      	ldr	r0, [r4, #0]
 8015304:	6813      	ldr	r3, [r2, #0]
 8015306:	0605      	lsls	r5, r0, #24
 8015308:	f103 0104 	add.w	r1, r3, #4
 801530c:	d52a      	bpl.n	8015364 <_printf_i+0xa4>
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	6011      	str	r1, [r2, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	da03      	bge.n	801531e <_printf_i+0x5e>
 8015316:	222d      	movs	r2, #45	; 0x2d
 8015318:	425b      	negs	r3, r3
 801531a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801531e:	486f      	ldr	r0, [pc, #444]	; (80154dc <_printf_i+0x21c>)
 8015320:	220a      	movs	r2, #10
 8015322:	e039      	b.n	8015398 <_printf_i+0xd8>
 8015324:	2973      	cmp	r1, #115	; 0x73
 8015326:	f000 809d 	beq.w	8015464 <_printf_i+0x1a4>
 801532a:	d808      	bhi.n	801533e <_printf_i+0x7e>
 801532c:	296f      	cmp	r1, #111	; 0x6f
 801532e:	d020      	beq.n	8015372 <_printf_i+0xb2>
 8015330:	2970      	cmp	r1, #112	; 0x70
 8015332:	d1dd      	bne.n	80152f0 <_printf_i+0x30>
 8015334:	6823      	ldr	r3, [r4, #0]
 8015336:	f043 0320 	orr.w	r3, r3, #32
 801533a:	6023      	str	r3, [r4, #0]
 801533c:	e003      	b.n	8015346 <_printf_i+0x86>
 801533e:	2975      	cmp	r1, #117	; 0x75
 8015340:	d017      	beq.n	8015372 <_printf_i+0xb2>
 8015342:	2978      	cmp	r1, #120	; 0x78
 8015344:	d1d4      	bne.n	80152f0 <_printf_i+0x30>
 8015346:	2378      	movs	r3, #120	; 0x78
 8015348:	4865      	ldr	r0, [pc, #404]	; (80154e0 <_printf_i+0x220>)
 801534a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801534e:	e055      	b.n	80153fc <_printf_i+0x13c>
 8015350:	6813      	ldr	r3, [r2, #0]
 8015352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015356:	1d19      	adds	r1, r3, #4
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	6011      	str	r1, [r2, #0]
 801535c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015360:	2301      	movs	r3, #1
 8015362:	e08c      	b.n	801547e <_printf_i+0x1be>
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	f010 0f40 	tst.w	r0, #64	; 0x40
 801536a:	6011      	str	r1, [r2, #0]
 801536c:	bf18      	it	ne
 801536e:	b21b      	sxthne	r3, r3
 8015370:	e7cf      	b.n	8015312 <_printf_i+0x52>
 8015372:	6813      	ldr	r3, [r2, #0]
 8015374:	6825      	ldr	r5, [r4, #0]
 8015376:	1d18      	adds	r0, r3, #4
 8015378:	6010      	str	r0, [r2, #0]
 801537a:	0628      	lsls	r0, r5, #24
 801537c:	d501      	bpl.n	8015382 <_printf_i+0xc2>
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	e002      	b.n	8015388 <_printf_i+0xc8>
 8015382:	0668      	lsls	r0, r5, #25
 8015384:	d5fb      	bpl.n	801537e <_printf_i+0xbe>
 8015386:	881b      	ldrh	r3, [r3, #0]
 8015388:	296f      	cmp	r1, #111	; 0x6f
 801538a:	bf14      	ite	ne
 801538c:	220a      	movne	r2, #10
 801538e:	2208      	moveq	r2, #8
 8015390:	4852      	ldr	r0, [pc, #328]	; (80154dc <_printf_i+0x21c>)
 8015392:	2100      	movs	r1, #0
 8015394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015398:	6865      	ldr	r5, [r4, #4]
 801539a:	2d00      	cmp	r5, #0
 801539c:	60a5      	str	r5, [r4, #8]
 801539e:	f2c0 8095 	blt.w	80154cc <_printf_i+0x20c>
 80153a2:	6821      	ldr	r1, [r4, #0]
 80153a4:	f021 0104 	bic.w	r1, r1, #4
 80153a8:	6021      	str	r1, [r4, #0]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d13d      	bne.n	801542a <_printf_i+0x16a>
 80153ae:	2d00      	cmp	r5, #0
 80153b0:	f040 808e 	bne.w	80154d0 <_printf_i+0x210>
 80153b4:	4665      	mov	r5, ip
 80153b6:	2a08      	cmp	r2, #8
 80153b8:	d10b      	bne.n	80153d2 <_printf_i+0x112>
 80153ba:	6823      	ldr	r3, [r4, #0]
 80153bc:	07db      	lsls	r3, r3, #31
 80153be:	d508      	bpl.n	80153d2 <_printf_i+0x112>
 80153c0:	6923      	ldr	r3, [r4, #16]
 80153c2:	6862      	ldr	r2, [r4, #4]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	bfde      	ittt	le
 80153c8:	2330      	movle	r3, #48	; 0x30
 80153ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80153ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80153d2:	ebac 0305 	sub.w	r3, ip, r5
 80153d6:	6123      	str	r3, [r4, #16]
 80153d8:	f8cd 8000 	str.w	r8, [sp]
 80153dc:	463b      	mov	r3, r7
 80153de:	aa03      	add	r2, sp, #12
 80153e0:	4621      	mov	r1, r4
 80153e2:	4630      	mov	r0, r6
 80153e4:	f7ff fef6 	bl	80151d4 <_printf_common>
 80153e8:	3001      	adds	r0, #1
 80153ea:	d14d      	bne.n	8015488 <_printf_i+0x1c8>
 80153ec:	f04f 30ff 	mov.w	r0, #4294967295
 80153f0:	b005      	add	sp, #20
 80153f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153f6:	4839      	ldr	r0, [pc, #228]	; (80154dc <_printf_i+0x21c>)
 80153f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80153fc:	6813      	ldr	r3, [r2, #0]
 80153fe:	6821      	ldr	r1, [r4, #0]
 8015400:	1d1d      	adds	r5, r3, #4
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	6015      	str	r5, [r2, #0]
 8015406:	060a      	lsls	r2, r1, #24
 8015408:	d50b      	bpl.n	8015422 <_printf_i+0x162>
 801540a:	07ca      	lsls	r2, r1, #31
 801540c:	bf44      	itt	mi
 801540e:	f041 0120 	orrmi.w	r1, r1, #32
 8015412:	6021      	strmi	r1, [r4, #0]
 8015414:	b91b      	cbnz	r3, 801541e <_printf_i+0x15e>
 8015416:	6822      	ldr	r2, [r4, #0]
 8015418:	f022 0220 	bic.w	r2, r2, #32
 801541c:	6022      	str	r2, [r4, #0]
 801541e:	2210      	movs	r2, #16
 8015420:	e7b7      	b.n	8015392 <_printf_i+0xd2>
 8015422:	064d      	lsls	r5, r1, #25
 8015424:	bf48      	it	mi
 8015426:	b29b      	uxthmi	r3, r3
 8015428:	e7ef      	b.n	801540a <_printf_i+0x14a>
 801542a:	4665      	mov	r5, ip
 801542c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015430:	fb02 3311 	mls	r3, r2, r1, r3
 8015434:	5cc3      	ldrb	r3, [r0, r3]
 8015436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801543a:	460b      	mov	r3, r1
 801543c:	2900      	cmp	r1, #0
 801543e:	d1f5      	bne.n	801542c <_printf_i+0x16c>
 8015440:	e7b9      	b.n	80153b6 <_printf_i+0xf6>
 8015442:	6813      	ldr	r3, [r2, #0]
 8015444:	6825      	ldr	r5, [r4, #0]
 8015446:	1d18      	adds	r0, r3, #4
 8015448:	6961      	ldr	r1, [r4, #20]
 801544a:	6010      	str	r0, [r2, #0]
 801544c:	0628      	lsls	r0, r5, #24
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	d501      	bpl.n	8015456 <_printf_i+0x196>
 8015452:	6019      	str	r1, [r3, #0]
 8015454:	e002      	b.n	801545c <_printf_i+0x19c>
 8015456:	066a      	lsls	r2, r5, #25
 8015458:	d5fb      	bpl.n	8015452 <_printf_i+0x192>
 801545a:	8019      	strh	r1, [r3, #0]
 801545c:	2300      	movs	r3, #0
 801545e:	4665      	mov	r5, ip
 8015460:	6123      	str	r3, [r4, #16]
 8015462:	e7b9      	b.n	80153d8 <_printf_i+0x118>
 8015464:	6813      	ldr	r3, [r2, #0]
 8015466:	1d19      	adds	r1, r3, #4
 8015468:	6011      	str	r1, [r2, #0]
 801546a:	681d      	ldr	r5, [r3, #0]
 801546c:	6862      	ldr	r2, [r4, #4]
 801546e:	2100      	movs	r1, #0
 8015470:	4628      	mov	r0, r5
 8015472:	f002 fe95 	bl	80181a0 <memchr>
 8015476:	b108      	cbz	r0, 801547c <_printf_i+0x1bc>
 8015478:	1b40      	subs	r0, r0, r5
 801547a:	6060      	str	r0, [r4, #4]
 801547c:	6863      	ldr	r3, [r4, #4]
 801547e:	6123      	str	r3, [r4, #16]
 8015480:	2300      	movs	r3, #0
 8015482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015486:	e7a7      	b.n	80153d8 <_printf_i+0x118>
 8015488:	6923      	ldr	r3, [r4, #16]
 801548a:	462a      	mov	r2, r5
 801548c:	4639      	mov	r1, r7
 801548e:	4630      	mov	r0, r6
 8015490:	47c0      	blx	r8
 8015492:	3001      	adds	r0, #1
 8015494:	d0aa      	beq.n	80153ec <_printf_i+0x12c>
 8015496:	6823      	ldr	r3, [r4, #0]
 8015498:	079b      	lsls	r3, r3, #30
 801549a:	d413      	bmi.n	80154c4 <_printf_i+0x204>
 801549c:	68e0      	ldr	r0, [r4, #12]
 801549e:	9b03      	ldr	r3, [sp, #12]
 80154a0:	4298      	cmp	r0, r3
 80154a2:	bfb8      	it	lt
 80154a4:	4618      	movlt	r0, r3
 80154a6:	e7a3      	b.n	80153f0 <_printf_i+0x130>
 80154a8:	2301      	movs	r3, #1
 80154aa:	464a      	mov	r2, r9
 80154ac:	4639      	mov	r1, r7
 80154ae:	4630      	mov	r0, r6
 80154b0:	47c0      	blx	r8
 80154b2:	3001      	adds	r0, #1
 80154b4:	d09a      	beq.n	80153ec <_printf_i+0x12c>
 80154b6:	3501      	adds	r5, #1
 80154b8:	68e3      	ldr	r3, [r4, #12]
 80154ba:	9a03      	ldr	r2, [sp, #12]
 80154bc:	1a9b      	subs	r3, r3, r2
 80154be:	42ab      	cmp	r3, r5
 80154c0:	dcf2      	bgt.n	80154a8 <_printf_i+0x1e8>
 80154c2:	e7eb      	b.n	801549c <_printf_i+0x1dc>
 80154c4:	2500      	movs	r5, #0
 80154c6:	f104 0919 	add.w	r9, r4, #25
 80154ca:	e7f5      	b.n	80154b8 <_printf_i+0x1f8>
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d1ac      	bne.n	801542a <_printf_i+0x16a>
 80154d0:	7803      	ldrb	r3, [r0, #0]
 80154d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80154da:	e76c      	b.n	80153b6 <_printf_i+0xf6>
 80154dc:	0801e338 	.word	0x0801e338
 80154e0:	0801e349 	.word	0x0801e349

080154e4 <_scanf_float>:
 80154e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e8:	469a      	mov	sl, r3
 80154ea:	688b      	ldr	r3, [r1, #8]
 80154ec:	4616      	mov	r6, r2
 80154ee:	1e5a      	subs	r2, r3, #1
 80154f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80154f4:	bf88      	it	hi
 80154f6:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80154fa:	b087      	sub	sp, #28
 80154fc:	bf85      	ittet	hi
 80154fe:	189b      	addhi	r3, r3, r2
 8015500:	9301      	strhi	r3, [sp, #4]
 8015502:	2300      	movls	r3, #0
 8015504:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015508:	4688      	mov	r8, r1
 801550a:	f04f 0b00 	mov.w	fp, #0
 801550e:	bf8c      	ite	hi
 8015510:	608b      	strhi	r3, [r1, #8]
 8015512:	9301      	strls	r3, [sp, #4]
 8015514:	680b      	ldr	r3, [r1, #0]
 8015516:	4607      	mov	r7, r0
 8015518:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801551c:	f848 3b1c 	str.w	r3, [r8], #28
 8015520:	460c      	mov	r4, r1
 8015522:	4645      	mov	r5, r8
 8015524:	465a      	mov	r2, fp
 8015526:	46d9      	mov	r9, fp
 8015528:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801552c:	f8cd b008 	str.w	fp, [sp, #8]
 8015530:	68a1      	ldr	r1, [r4, #8]
 8015532:	b181      	cbz	r1, 8015556 <_scanf_float+0x72>
 8015534:	6833      	ldr	r3, [r6, #0]
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	2b49      	cmp	r3, #73	; 0x49
 801553a:	d071      	beq.n	8015620 <_scanf_float+0x13c>
 801553c:	d84d      	bhi.n	80155da <_scanf_float+0xf6>
 801553e:	2b39      	cmp	r3, #57	; 0x39
 8015540:	d840      	bhi.n	80155c4 <_scanf_float+0xe0>
 8015542:	2b31      	cmp	r3, #49	; 0x31
 8015544:	f080 8088 	bcs.w	8015658 <_scanf_float+0x174>
 8015548:	2b2d      	cmp	r3, #45	; 0x2d
 801554a:	f000 8090 	beq.w	801566e <_scanf_float+0x18a>
 801554e:	d815      	bhi.n	801557c <_scanf_float+0x98>
 8015550:	2b2b      	cmp	r3, #43	; 0x2b
 8015552:	f000 808c 	beq.w	801566e <_scanf_float+0x18a>
 8015556:	f1b9 0f00 	cmp.w	r9, #0
 801555a:	d003      	beq.n	8015564 <_scanf_float+0x80>
 801555c:	6823      	ldr	r3, [r4, #0]
 801555e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015562:	6023      	str	r3, [r4, #0]
 8015564:	3a01      	subs	r2, #1
 8015566:	2a01      	cmp	r2, #1
 8015568:	f200 80ea 	bhi.w	8015740 <_scanf_float+0x25c>
 801556c:	4545      	cmp	r5, r8
 801556e:	f200 80dc 	bhi.w	801572a <_scanf_float+0x246>
 8015572:	2601      	movs	r6, #1
 8015574:	4630      	mov	r0, r6
 8015576:	b007      	add	sp, #28
 8015578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801557c:	2b2e      	cmp	r3, #46	; 0x2e
 801557e:	f000 809f 	beq.w	80156c0 <_scanf_float+0x1dc>
 8015582:	2b30      	cmp	r3, #48	; 0x30
 8015584:	d1e7      	bne.n	8015556 <_scanf_float+0x72>
 8015586:	6820      	ldr	r0, [r4, #0]
 8015588:	f410 7f80 	tst.w	r0, #256	; 0x100
 801558c:	d064      	beq.n	8015658 <_scanf_float+0x174>
 801558e:	9b01      	ldr	r3, [sp, #4]
 8015590:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015594:	6020      	str	r0, [r4, #0]
 8015596:	f109 0901 	add.w	r9, r9, #1
 801559a:	b11b      	cbz	r3, 80155a4 <_scanf_float+0xc0>
 801559c:	3b01      	subs	r3, #1
 801559e:	3101      	adds	r1, #1
 80155a0:	9301      	str	r3, [sp, #4]
 80155a2:	60a1      	str	r1, [r4, #8]
 80155a4:	68a3      	ldr	r3, [r4, #8]
 80155a6:	3b01      	subs	r3, #1
 80155a8:	60a3      	str	r3, [r4, #8]
 80155aa:	6923      	ldr	r3, [r4, #16]
 80155ac:	3301      	adds	r3, #1
 80155ae:	6123      	str	r3, [r4, #16]
 80155b0:	6873      	ldr	r3, [r6, #4]
 80155b2:	3b01      	subs	r3, #1
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	6073      	str	r3, [r6, #4]
 80155b8:	f340 80ac 	ble.w	8015714 <_scanf_float+0x230>
 80155bc:	6833      	ldr	r3, [r6, #0]
 80155be:	3301      	adds	r3, #1
 80155c0:	6033      	str	r3, [r6, #0]
 80155c2:	e7b5      	b.n	8015530 <_scanf_float+0x4c>
 80155c4:	2b45      	cmp	r3, #69	; 0x45
 80155c6:	f000 8085 	beq.w	80156d4 <_scanf_float+0x1f0>
 80155ca:	2b46      	cmp	r3, #70	; 0x46
 80155cc:	d06a      	beq.n	80156a4 <_scanf_float+0x1c0>
 80155ce:	2b41      	cmp	r3, #65	; 0x41
 80155d0:	d1c1      	bne.n	8015556 <_scanf_float+0x72>
 80155d2:	2a01      	cmp	r2, #1
 80155d4:	d1bf      	bne.n	8015556 <_scanf_float+0x72>
 80155d6:	2202      	movs	r2, #2
 80155d8:	e046      	b.n	8015668 <_scanf_float+0x184>
 80155da:	2b65      	cmp	r3, #101	; 0x65
 80155dc:	d07a      	beq.n	80156d4 <_scanf_float+0x1f0>
 80155de:	d818      	bhi.n	8015612 <_scanf_float+0x12e>
 80155e0:	2b54      	cmp	r3, #84	; 0x54
 80155e2:	d066      	beq.n	80156b2 <_scanf_float+0x1ce>
 80155e4:	d811      	bhi.n	801560a <_scanf_float+0x126>
 80155e6:	2b4e      	cmp	r3, #78	; 0x4e
 80155e8:	d1b5      	bne.n	8015556 <_scanf_float+0x72>
 80155ea:	2a00      	cmp	r2, #0
 80155ec:	d146      	bne.n	801567c <_scanf_float+0x198>
 80155ee:	f1b9 0f00 	cmp.w	r9, #0
 80155f2:	d145      	bne.n	8015680 <_scanf_float+0x19c>
 80155f4:	6821      	ldr	r1, [r4, #0]
 80155f6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80155fa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80155fe:	d13f      	bne.n	8015680 <_scanf_float+0x19c>
 8015600:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015604:	6021      	str	r1, [r4, #0]
 8015606:	2201      	movs	r2, #1
 8015608:	e02e      	b.n	8015668 <_scanf_float+0x184>
 801560a:	2b59      	cmp	r3, #89	; 0x59
 801560c:	d01e      	beq.n	801564c <_scanf_float+0x168>
 801560e:	2b61      	cmp	r3, #97	; 0x61
 8015610:	e7de      	b.n	80155d0 <_scanf_float+0xec>
 8015612:	2b6e      	cmp	r3, #110	; 0x6e
 8015614:	d0e9      	beq.n	80155ea <_scanf_float+0x106>
 8015616:	d815      	bhi.n	8015644 <_scanf_float+0x160>
 8015618:	2b66      	cmp	r3, #102	; 0x66
 801561a:	d043      	beq.n	80156a4 <_scanf_float+0x1c0>
 801561c:	2b69      	cmp	r3, #105	; 0x69
 801561e:	d19a      	bne.n	8015556 <_scanf_float+0x72>
 8015620:	f1bb 0f00 	cmp.w	fp, #0
 8015624:	d138      	bne.n	8015698 <_scanf_float+0x1b4>
 8015626:	f1b9 0f00 	cmp.w	r9, #0
 801562a:	d197      	bne.n	801555c <_scanf_float+0x78>
 801562c:	6821      	ldr	r1, [r4, #0]
 801562e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015632:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015636:	d195      	bne.n	8015564 <_scanf_float+0x80>
 8015638:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801563c:	6021      	str	r1, [r4, #0]
 801563e:	f04f 0b01 	mov.w	fp, #1
 8015642:	e011      	b.n	8015668 <_scanf_float+0x184>
 8015644:	2b74      	cmp	r3, #116	; 0x74
 8015646:	d034      	beq.n	80156b2 <_scanf_float+0x1ce>
 8015648:	2b79      	cmp	r3, #121	; 0x79
 801564a:	d184      	bne.n	8015556 <_scanf_float+0x72>
 801564c:	f1bb 0f07 	cmp.w	fp, #7
 8015650:	d181      	bne.n	8015556 <_scanf_float+0x72>
 8015652:	f04f 0b08 	mov.w	fp, #8
 8015656:	e007      	b.n	8015668 <_scanf_float+0x184>
 8015658:	eb12 0f0b 	cmn.w	r2, fp
 801565c:	f47f af7b 	bne.w	8015556 <_scanf_float+0x72>
 8015660:	6821      	ldr	r1, [r4, #0]
 8015662:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015666:	6021      	str	r1, [r4, #0]
 8015668:	702b      	strb	r3, [r5, #0]
 801566a:	3501      	adds	r5, #1
 801566c:	e79a      	b.n	80155a4 <_scanf_float+0xc0>
 801566e:	6821      	ldr	r1, [r4, #0]
 8015670:	0608      	lsls	r0, r1, #24
 8015672:	f57f af70 	bpl.w	8015556 <_scanf_float+0x72>
 8015676:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801567a:	e7f4      	b.n	8015666 <_scanf_float+0x182>
 801567c:	2a02      	cmp	r2, #2
 801567e:	d047      	beq.n	8015710 <_scanf_float+0x22c>
 8015680:	f1bb 0f01 	cmp.w	fp, #1
 8015684:	d003      	beq.n	801568e <_scanf_float+0x1aa>
 8015686:	f1bb 0f04 	cmp.w	fp, #4
 801568a:	f47f af64 	bne.w	8015556 <_scanf_float+0x72>
 801568e:	f10b 0b01 	add.w	fp, fp, #1
 8015692:	fa5f fb8b 	uxtb.w	fp, fp
 8015696:	e7e7      	b.n	8015668 <_scanf_float+0x184>
 8015698:	f1bb 0f03 	cmp.w	fp, #3
 801569c:	d0f7      	beq.n	801568e <_scanf_float+0x1aa>
 801569e:	f1bb 0f05 	cmp.w	fp, #5
 80156a2:	e7f2      	b.n	801568a <_scanf_float+0x1a6>
 80156a4:	f1bb 0f02 	cmp.w	fp, #2
 80156a8:	f47f af55 	bne.w	8015556 <_scanf_float+0x72>
 80156ac:	f04f 0b03 	mov.w	fp, #3
 80156b0:	e7da      	b.n	8015668 <_scanf_float+0x184>
 80156b2:	f1bb 0f06 	cmp.w	fp, #6
 80156b6:	f47f af4e 	bne.w	8015556 <_scanf_float+0x72>
 80156ba:	f04f 0b07 	mov.w	fp, #7
 80156be:	e7d3      	b.n	8015668 <_scanf_float+0x184>
 80156c0:	6821      	ldr	r1, [r4, #0]
 80156c2:	0588      	lsls	r0, r1, #22
 80156c4:	f57f af47 	bpl.w	8015556 <_scanf_float+0x72>
 80156c8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80156cc:	6021      	str	r1, [r4, #0]
 80156ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80156d2:	e7c9      	b.n	8015668 <_scanf_float+0x184>
 80156d4:	6821      	ldr	r1, [r4, #0]
 80156d6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80156da:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80156de:	d006      	beq.n	80156ee <_scanf_float+0x20a>
 80156e0:	0548      	lsls	r0, r1, #21
 80156e2:	f57f af38 	bpl.w	8015556 <_scanf_float+0x72>
 80156e6:	f1b9 0f00 	cmp.w	r9, #0
 80156ea:	f43f af3b 	beq.w	8015564 <_scanf_float+0x80>
 80156ee:	0588      	lsls	r0, r1, #22
 80156f0:	bf58      	it	pl
 80156f2:	9802      	ldrpl	r0, [sp, #8]
 80156f4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80156f8:	bf58      	it	pl
 80156fa:	eba9 0000 	subpl.w	r0, r9, r0
 80156fe:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015702:	bf58      	it	pl
 8015704:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015708:	6021      	str	r1, [r4, #0]
 801570a:	f04f 0900 	mov.w	r9, #0
 801570e:	e7ab      	b.n	8015668 <_scanf_float+0x184>
 8015710:	2203      	movs	r2, #3
 8015712:	e7a9      	b.n	8015668 <_scanf_float+0x184>
 8015714:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015718:	4631      	mov	r1, r6
 801571a:	4638      	mov	r0, r7
 801571c:	9205      	str	r2, [sp, #20]
 801571e:	4798      	blx	r3
 8015720:	9a05      	ldr	r2, [sp, #20]
 8015722:	2800      	cmp	r0, #0
 8015724:	f43f af04 	beq.w	8015530 <_scanf_float+0x4c>
 8015728:	e715      	b.n	8015556 <_scanf_float+0x72>
 801572a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801572e:	4632      	mov	r2, r6
 8015730:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015734:	4638      	mov	r0, r7
 8015736:	4798      	blx	r3
 8015738:	6923      	ldr	r3, [r4, #16]
 801573a:	3b01      	subs	r3, #1
 801573c:	6123      	str	r3, [r4, #16]
 801573e:	e715      	b.n	801556c <_scanf_float+0x88>
 8015740:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015744:	2b06      	cmp	r3, #6
 8015746:	d80a      	bhi.n	801575e <_scanf_float+0x27a>
 8015748:	f1bb 0f02 	cmp.w	fp, #2
 801574c:	d967      	bls.n	801581e <_scanf_float+0x33a>
 801574e:	f1ab 0b03 	sub.w	fp, fp, #3
 8015752:	fa5f fb8b 	uxtb.w	fp, fp
 8015756:	eba5 0b0b 	sub.w	fp, r5, fp
 801575a:	455d      	cmp	r5, fp
 801575c:	d14a      	bne.n	80157f4 <_scanf_float+0x310>
 801575e:	6823      	ldr	r3, [r4, #0]
 8015760:	05da      	lsls	r2, r3, #23
 8015762:	d51f      	bpl.n	80157a4 <_scanf_float+0x2c0>
 8015764:	055b      	lsls	r3, r3, #21
 8015766:	d467      	bmi.n	8015838 <_scanf_float+0x354>
 8015768:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801576c:	6923      	ldr	r3, [r4, #16]
 801576e:	2965      	cmp	r1, #101	; 0x65
 8015770:	f103 33ff 	add.w	r3, r3, #4294967295
 8015774:	f105 3bff 	add.w	fp, r5, #4294967295
 8015778:	6123      	str	r3, [r4, #16]
 801577a:	d00d      	beq.n	8015798 <_scanf_float+0x2b4>
 801577c:	2945      	cmp	r1, #69	; 0x45
 801577e:	d00b      	beq.n	8015798 <_scanf_float+0x2b4>
 8015780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015784:	4632      	mov	r2, r6
 8015786:	4638      	mov	r0, r7
 8015788:	4798      	blx	r3
 801578a:	6923      	ldr	r3, [r4, #16]
 801578c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015790:	3b01      	subs	r3, #1
 8015792:	f1a5 0b02 	sub.w	fp, r5, #2
 8015796:	6123      	str	r3, [r4, #16]
 8015798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801579c:	4632      	mov	r2, r6
 801579e:	4638      	mov	r0, r7
 80157a0:	4798      	blx	r3
 80157a2:	465d      	mov	r5, fp
 80157a4:	6826      	ldr	r6, [r4, #0]
 80157a6:	f016 0610 	ands.w	r6, r6, #16
 80157aa:	d176      	bne.n	801589a <_scanf_float+0x3b6>
 80157ac:	702e      	strb	r6, [r5, #0]
 80157ae:	6823      	ldr	r3, [r4, #0]
 80157b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80157b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80157b8:	d141      	bne.n	801583e <_scanf_float+0x35a>
 80157ba:	9b02      	ldr	r3, [sp, #8]
 80157bc:	eba9 0303 	sub.w	r3, r9, r3
 80157c0:	425a      	negs	r2, r3
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d148      	bne.n	8015858 <_scanf_float+0x374>
 80157c6:	4641      	mov	r1, r8
 80157c8:	2200      	movs	r2, #0
 80157ca:	4638      	mov	r0, r7
 80157cc:	f000 ffd0 	bl	8016770 <_strtod_r>
 80157d0:	6825      	ldr	r5, [r4, #0]
 80157d2:	4680      	mov	r8, r0
 80157d4:	f015 0f02 	tst.w	r5, #2
 80157d8:	4689      	mov	r9, r1
 80157da:	f8da 3000 	ldr.w	r3, [sl]
 80157de:	d046      	beq.n	801586e <_scanf_float+0x38a>
 80157e0:	1d1a      	adds	r2, r3, #4
 80157e2:	f8ca 2000 	str.w	r2, [sl]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	e9c3 8900 	strd	r8, r9, [r3]
 80157ec:	68e3      	ldr	r3, [r4, #12]
 80157ee:	3301      	adds	r3, #1
 80157f0:	60e3      	str	r3, [r4, #12]
 80157f2:	e6bf      	b.n	8015574 <_scanf_float+0x90>
 80157f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80157f8:	4632      	mov	r2, r6
 80157fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80157fe:	4638      	mov	r0, r7
 8015800:	4798      	blx	r3
 8015802:	6923      	ldr	r3, [r4, #16]
 8015804:	3b01      	subs	r3, #1
 8015806:	6123      	str	r3, [r4, #16]
 8015808:	e7a7      	b.n	801575a <_scanf_float+0x276>
 801580a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801580e:	4632      	mov	r2, r6
 8015810:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015814:	4638      	mov	r0, r7
 8015816:	4798      	blx	r3
 8015818:	6923      	ldr	r3, [r4, #16]
 801581a:	3b01      	subs	r3, #1
 801581c:	6123      	str	r3, [r4, #16]
 801581e:	4545      	cmp	r5, r8
 8015820:	d8f3      	bhi.n	801580a <_scanf_float+0x326>
 8015822:	e6a6      	b.n	8015572 <_scanf_float+0x8e>
 8015824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015828:	4632      	mov	r2, r6
 801582a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801582e:	4638      	mov	r0, r7
 8015830:	4798      	blx	r3
 8015832:	6923      	ldr	r3, [r4, #16]
 8015834:	3b01      	subs	r3, #1
 8015836:	6123      	str	r3, [r4, #16]
 8015838:	4545      	cmp	r5, r8
 801583a:	d8f3      	bhi.n	8015824 <_scanf_float+0x340>
 801583c:	e699      	b.n	8015572 <_scanf_float+0x8e>
 801583e:	9b03      	ldr	r3, [sp, #12]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d0c0      	beq.n	80157c6 <_scanf_float+0x2e2>
 8015844:	9904      	ldr	r1, [sp, #16]
 8015846:	230a      	movs	r3, #10
 8015848:	4632      	mov	r2, r6
 801584a:	3101      	adds	r1, #1
 801584c:	4638      	mov	r0, r7
 801584e:	f001 f81b 	bl	8016888 <_strtol_r>
 8015852:	9b03      	ldr	r3, [sp, #12]
 8015854:	9d04      	ldr	r5, [sp, #16]
 8015856:	1ac2      	subs	r2, r0, r3
 8015858:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801585c:	429d      	cmp	r5, r3
 801585e:	bf28      	it	cs
 8015860:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015864:	490e      	ldr	r1, [pc, #56]	; (80158a0 <_scanf_float+0x3bc>)
 8015866:	4628      	mov	r0, r5
 8015868:	f000 f89c 	bl	80159a4 <siprintf>
 801586c:	e7ab      	b.n	80157c6 <_scanf_float+0x2e2>
 801586e:	1d1f      	adds	r7, r3, #4
 8015870:	f015 0504 	ands.w	r5, r5, #4
 8015874:	f8ca 7000 	str.w	r7, [sl]
 8015878:	d1b5      	bne.n	80157e6 <_scanf_float+0x302>
 801587a:	681f      	ldr	r7, [r3, #0]
 801587c:	4602      	mov	r2, r0
 801587e:	460b      	mov	r3, r1
 8015880:	f7eb f8e6 	bl	8000a50 <__aeabi_dcmpun>
 8015884:	b120      	cbz	r0, 8015890 <_scanf_float+0x3ac>
 8015886:	4628      	mov	r0, r5
 8015888:	f000 f888 	bl	801599c <nanf>
 801588c:	6038      	str	r0, [r7, #0]
 801588e:	e7ad      	b.n	80157ec <_scanf_float+0x308>
 8015890:	4640      	mov	r0, r8
 8015892:	4649      	mov	r1, r9
 8015894:	f7eb f93a 	bl	8000b0c <__aeabi_d2f>
 8015898:	e7f8      	b.n	801588c <_scanf_float+0x3a8>
 801589a:	2600      	movs	r6, #0
 801589c:	e66a      	b.n	8015574 <_scanf_float+0x90>
 801589e:	bf00      	nop
 80158a0:	0801e35a 	.word	0x0801e35a

080158a4 <iprintf>:
 80158a4:	b40f      	push	{r0, r1, r2, r3}
 80158a6:	4b0a      	ldr	r3, [pc, #40]	; (80158d0 <iprintf+0x2c>)
 80158a8:	b513      	push	{r0, r1, r4, lr}
 80158aa:	681c      	ldr	r4, [r3, #0]
 80158ac:	b124      	cbz	r4, 80158b8 <iprintf+0x14>
 80158ae:	69a3      	ldr	r3, [r4, #24]
 80158b0:	b913      	cbnz	r3, 80158b8 <iprintf+0x14>
 80158b2:	4620      	mov	r0, r4
 80158b4:	f002 f810 	bl	80178d8 <__sinit>
 80158b8:	ab05      	add	r3, sp, #20
 80158ba:	9a04      	ldr	r2, [sp, #16]
 80158bc:	68a1      	ldr	r1, [r4, #8]
 80158be:	4620      	mov	r0, r4
 80158c0:	9301      	str	r3, [sp, #4]
 80158c2:	f003 fc4b 	bl	801915c <_vfiprintf_r>
 80158c6:	b002      	add	sp, #8
 80158c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158cc:	b004      	add	sp, #16
 80158ce:	4770      	bx	lr
 80158d0:	20000148 	.word	0x20000148

080158d4 <_puts_r>:
 80158d4:	b570      	push	{r4, r5, r6, lr}
 80158d6:	460e      	mov	r6, r1
 80158d8:	4605      	mov	r5, r0
 80158da:	b118      	cbz	r0, 80158e4 <_puts_r+0x10>
 80158dc:	6983      	ldr	r3, [r0, #24]
 80158de:	b90b      	cbnz	r3, 80158e4 <_puts_r+0x10>
 80158e0:	f001 fffa 	bl	80178d8 <__sinit>
 80158e4:	69ab      	ldr	r3, [r5, #24]
 80158e6:	68ac      	ldr	r4, [r5, #8]
 80158e8:	b913      	cbnz	r3, 80158f0 <_puts_r+0x1c>
 80158ea:	4628      	mov	r0, r5
 80158ec:	f001 fff4 	bl	80178d8 <__sinit>
 80158f0:	4b23      	ldr	r3, [pc, #140]	; (8015980 <_puts_r+0xac>)
 80158f2:	429c      	cmp	r4, r3
 80158f4:	d117      	bne.n	8015926 <_puts_r+0x52>
 80158f6:	686c      	ldr	r4, [r5, #4]
 80158f8:	89a3      	ldrh	r3, [r4, #12]
 80158fa:	071b      	lsls	r3, r3, #28
 80158fc:	d51d      	bpl.n	801593a <_puts_r+0x66>
 80158fe:	6923      	ldr	r3, [r4, #16]
 8015900:	b1db      	cbz	r3, 801593a <_puts_r+0x66>
 8015902:	3e01      	subs	r6, #1
 8015904:	68a3      	ldr	r3, [r4, #8]
 8015906:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801590a:	3b01      	subs	r3, #1
 801590c:	60a3      	str	r3, [r4, #8]
 801590e:	b9e9      	cbnz	r1, 801594c <_puts_r+0x78>
 8015910:	2b00      	cmp	r3, #0
 8015912:	da2e      	bge.n	8015972 <_puts_r+0x9e>
 8015914:	4622      	mov	r2, r4
 8015916:	210a      	movs	r1, #10
 8015918:	4628      	mov	r0, r5
 801591a:	f000 ffc7 	bl	80168ac <__swbuf_r>
 801591e:	3001      	adds	r0, #1
 8015920:	d011      	beq.n	8015946 <_puts_r+0x72>
 8015922:	200a      	movs	r0, #10
 8015924:	e011      	b.n	801594a <_puts_r+0x76>
 8015926:	4b17      	ldr	r3, [pc, #92]	; (8015984 <_puts_r+0xb0>)
 8015928:	429c      	cmp	r4, r3
 801592a:	d101      	bne.n	8015930 <_puts_r+0x5c>
 801592c:	68ac      	ldr	r4, [r5, #8]
 801592e:	e7e3      	b.n	80158f8 <_puts_r+0x24>
 8015930:	4b15      	ldr	r3, [pc, #84]	; (8015988 <_puts_r+0xb4>)
 8015932:	429c      	cmp	r4, r3
 8015934:	bf08      	it	eq
 8015936:	68ec      	ldreq	r4, [r5, #12]
 8015938:	e7de      	b.n	80158f8 <_puts_r+0x24>
 801593a:	4621      	mov	r1, r4
 801593c:	4628      	mov	r0, r5
 801593e:	f001 f819 	bl	8016974 <__swsetup_r>
 8015942:	2800      	cmp	r0, #0
 8015944:	d0dd      	beq.n	8015902 <_puts_r+0x2e>
 8015946:	f04f 30ff 	mov.w	r0, #4294967295
 801594a:	bd70      	pop	{r4, r5, r6, pc}
 801594c:	2b00      	cmp	r3, #0
 801594e:	da04      	bge.n	801595a <_puts_r+0x86>
 8015950:	69a2      	ldr	r2, [r4, #24]
 8015952:	429a      	cmp	r2, r3
 8015954:	dc06      	bgt.n	8015964 <_puts_r+0x90>
 8015956:	290a      	cmp	r1, #10
 8015958:	d004      	beq.n	8015964 <_puts_r+0x90>
 801595a:	6823      	ldr	r3, [r4, #0]
 801595c:	1c5a      	adds	r2, r3, #1
 801595e:	6022      	str	r2, [r4, #0]
 8015960:	7019      	strb	r1, [r3, #0]
 8015962:	e7cf      	b.n	8015904 <_puts_r+0x30>
 8015964:	4622      	mov	r2, r4
 8015966:	4628      	mov	r0, r5
 8015968:	f000 ffa0 	bl	80168ac <__swbuf_r>
 801596c:	3001      	adds	r0, #1
 801596e:	d1c9      	bne.n	8015904 <_puts_r+0x30>
 8015970:	e7e9      	b.n	8015946 <_puts_r+0x72>
 8015972:	200a      	movs	r0, #10
 8015974:	6823      	ldr	r3, [r4, #0]
 8015976:	1c5a      	adds	r2, r3, #1
 8015978:	6022      	str	r2, [r4, #0]
 801597a:	7018      	strb	r0, [r3, #0]
 801597c:	e7e5      	b.n	801594a <_puts_r+0x76>
 801597e:	bf00      	nop
 8015980:	0801e3e0 	.word	0x0801e3e0
 8015984:	0801e400 	.word	0x0801e400
 8015988:	0801e3c0 	.word	0x0801e3c0

0801598c <puts>:
 801598c:	4b02      	ldr	r3, [pc, #8]	; (8015998 <puts+0xc>)
 801598e:	4601      	mov	r1, r0
 8015990:	6818      	ldr	r0, [r3, #0]
 8015992:	f7ff bf9f 	b.w	80158d4 <_puts_r>
 8015996:	bf00      	nop
 8015998:	20000148 	.word	0x20000148

0801599c <nanf>:
 801599c:	4800      	ldr	r0, [pc, #0]	; (80159a0 <nanf+0x4>)
 801599e:	4770      	bx	lr
 80159a0:	7fc00000 	.word	0x7fc00000

080159a4 <siprintf>:
 80159a4:	b40e      	push	{r1, r2, r3}
 80159a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80159aa:	b500      	push	{lr}
 80159ac:	b09c      	sub	sp, #112	; 0x70
 80159ae:	ab1d      	add	r3, sp, #116	; 0x74
 80159b0:	9002      	str	r0, [sp, #8]
 80159b2:	9006      	str	r0, [sp, #24]
 80159b4:	9107      	str	r1, [sp, #28]
 80159b6:	9104      	str	r1, [sp, #16]
 80159b8:	4808      	ldr	r0, [pc, #32]	; (80159dc <siprintf+0x38>)
 80159ba:	4909      	ldr	r1, [pc, #36]	; (80159e0 <siprintf+0x3c>)
 80159bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80159c0:	9105      	str	r1, [sp, #20]
 80159c2:	6800      	ldr	r0, [r0, #0]
 80159c4:	a902      	add	r1, sp, #8
 80159c6:	9301      	str	r3, [sp, #4]
 80159c8:	f003 f8fe 	bl	8018bc8 <_svfiprintf_r>
 80159cc:	2200      	movs	r2, #0
 80159ce:	9b02      	ldr	r3, [sp, #8]
 80159d0:	701a      	strb	r2, [r3, #0]
 80159d2:	b01c      	add	sp, #112	; 0x70
 80159d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80159d8:	b003      	add	sp, #12
 80159da:	4770      	bx	lr
 80159dc:	20000148 	.word	0x20000148
 80159e0:	ffff0208 	.word	0xffff0208

080159e4 <siscanf>:
 80159e4:	b40e      	push	{r1, r2, r3}
 80159e6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80159ea:	b530      	push	{r4, r5, lr}
 80159ec:	b09c      	sub	sp, #112	; 0x70
 80159ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80159f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80159f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80159f8:	9002      	str	r0, [sp, #8]
 80159fa:	9006      	str	r0, [sp, #24]
 80159fc:	f7ea fbca 	bl	8000194 <strlen>
 8015a00:	4b0b      	ldr	r3, [pc, #44]	; (8015a30 <siscanf+0x4c>)
 8015a02:	9003      	str	r0, [sp, #12]
 8015a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a06:	2300      	movs	r3, #0
 8015a08:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a0a:	9314      	str	r3, [sp, #80]	; 0x50
 8015a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a10:	9007      	str	r0, [sp, #28]
 8015a12:	4808      	ldr	r0, [pc, #32]	; (8015a34 <siscanf+0x50>)
 8015a14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015a18:	462a      	mov	r2, r5
 8015a1a:	4623      	mov	r3, r4
 8015a1c:	a902      	add	r1, sp, #8
 8015a1e:	6800      	ldr	r0, [r0, #0]
 8015a20:	9401      	str	r4, [sp, #4]
 8015a22:	f003 fa23 	bl	8018e6c <__ssvfiscanf_r>
 8015a26:	b01c      	add	sp, #112	; 0x70
 8015a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a2c:	b003      	add	sp, #12
 8015a2e:	4770      	bx	lr
 8015a30:	08015a5b 	.word	0x08015a5b
 8015a34:	20000148 	.word	0x20000148

08015a38 <__sread>:
 8015a38:	b510      	push	{r4, lr}
 8015a3a:	460c      	mov	r4, r1
 8015a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a40:	f003 fdfa 	bl	8019638 <_read_r>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	bfab      	itete	ge
 8015a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8015a4c:	181b      	addge	r3, r3, r0
 8015a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a52:	bfac      	ite	ge
 8015a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8015a56:	81a3      	strhlt	r3, [r4, #12]
 8015a58:	bd10      	pop	{r4, pc}

08015a5a <__seofread>:
 8015a5a:	2000      	movs	r0, #0
 8015a5c:	4770      	bx	lr

08015a5e <__swrite>:
 8015a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a62:	461f      	mov	r7, r3
 8015a64:	898b      	ldrh	r3, [r1, #12]
 8015a66:	4605      	mov	r5, r0
 8015a68:	05db      	lsls	r3, r3, #23
 8015a6a:	460c      	mov	r4, r1
 8015a6c:	4616      	mov	r6, r2
 8015a6e:	d505      	bpl.n	8015a7c <__swrite+0x1e>
 8015a70:	2302      	movs	r3, #2
 8015a72:	2200      	movs	r2, #0
 8015a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a78:	f002 fb02 	bl	8018080 <_lseek_r>
 8015a7c:	89a3      	ldrh	r3, [r4, #12]
 8015a7e:	4632      	mov	r2, r6
 8015a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015a84:	81a3      	strh	r3, [r4, #12]
 8015a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a8a:	463b      	mov	r3, r7
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a92:	f000 bf5d 	b.w	8016950 <_write_r>

08015a96 <__sseek>:
 8015a96:	b510      	push	{r4, lr}
 8015a98:	460c      	mov	r4, r1
 8015a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a9e:	f002 faef 	bl	8018080 <_lseek_r>
 8015aa2:	1c43      	adds	r3, r0, #1
 8015aa4:	89a3      	ldrh	r3, [r4, #12]
 8015aa6:	bf15      	itete	ne
 8015aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8015aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015ab2:	81a3      	strheq	r3, [r4, #12]
 8015ab4:	bf18      	it	ne
 8015ab6:	81a3      	strhne	r3, [r4, #12]
 8015ab8:	bd10      	pop	{r4, pc}

08015aba <__sclose>:
 8015aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015abe:	f000 bfc7 	b.w	8016a50 <_close_r>

08015ac2 <strcpy>:
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ac8:	f803 2b01 	strb.w	r2, [r3], #1
 8015acc:	2a00      	cmp	r2, #0
 8015ace:	d1f9      	bne.n	8015ac4 <strcpy+0x2>
 8015ad0:	4770      	bx	lr

08015ad2 <strncmp>:
 8015ad2:	b510      	push	{r4, lr}
 8015ad4:	b16a      	cbz	r2, 8015af2 <strncmp+0x20>
 8015ad6:	3901      	subs	r1, #1
 8015ad8:	1884      	adds	r4, r0, r2
 8015ada:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015ade:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015ae2:	4293      	cmp	r3, r2
 8015ae4:	d103      	bne.n	8015aee <strncmp+0x1c>
 8015ae6:	42a0      	cmp	r0, r4
 8015ae8:	d001      	beq.n	8015aee <strncmp+0x1c>
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d1f5      	bne.n	8015ada <strncmp+0x8>
 8015aee:	1a98      	subs	r0, r3, r2
 8015af0:	bd10      	pop	{r4, pc}
 8015af2:	4610      	mov	r0, r2
 8015af4:	e7fc      	b.n	8015af0 <strncmp+0x1e>

08015af6 <strstr>:
 8015af6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015af8:	7803      	ldrb	r3, [r0, #0]
 8015afa:	b17b      	cbz	r3, 8015b1c <strstr+0x26>
 8015afc:	4604      	mov	r4, r0
 8015afe:	7823      	ldrb	r3, [r4, #0]
 8015b00:	4620      	mov	r0, r4
 8015b02:	1c66      	adds	r6, r4, #1
 8015b04:	b17b      	cbz	r3, 8015b26 <strstr+0x30>
 8015b06:	1e4a      	subs	r2, r1, #1
 8015b08:	1e63      	subs	r3, r4, #1
 8015b0a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8015b0e:	b14d      	cbz	r5, 8015b24 <strstr+0x2e>
 8015b10:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015b14:	4634      	mov	r4, r6
 8015b16:	42af      	cmp	r7, r5
 8015b18:	d0f7      	beq.n	8015b0a <strstr+0x14>
 8015b1a:	e7f0      	b.n	8015afe <strstr+0x8>
 8015b1c:	780b      	ldrb	r3, [r1, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	bf18      	it	ne
 8015b22:	2000      	movne	r0, #0
 8015b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b26:	4618      	mov	r0, r3
 8015b28:	e7fc      	b.n	8015b24 <strstr+0x2e>

08015b2a <sulp>:
 8015b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b2e:	460f      	mov	r7, r1
 8015b30:	4690      	mov	r8, r2
 8015b32:	f002 fe0d 	bl	8018750 <__ulp>
 8015b36:	4604      	mov	r4, r0
 8015b38:	460d      	mov	r5, r1
 8015b3a:	f1b8 0f00 	cmp.w	r8, #0
 8015b3e:	d011      	beq.n	8015b64 <sulp+0x3a>
 8015b40:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8015b44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	dd0b      	ble.n	8015b64 <sulp+0x3a>
 8015b4c:	2400      	movs	r4, #0
 8015b4e:	051b      	lsls	r3, r3, #20
 8015b50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015b54:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015b58:	4622      	mov	r2, r4
 8015b5a:	462b      	mov	r3, r5
 8015b5c:	f7ea fcde 	bl	800051c <__aeabi_dmul>
 8015b60:	4604      	mov	r4, r0
 8015b62:	460d      	mov	r5, r1
 8015b64:	4620      	mov	r0, r4
 8015b66:	4629      	mov	r1, r5
 8015b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b6c:	0000      	movs	r0, r0
	...

08015b70 <_strtod_l>:
 8015b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b74:	461f      	mov	r7, r3
 8015b76:	2300      	movs	r3, #0
 8015b78:	b0a1      	sub	sp, #132	; 0x84
 8015b7a:	4683      	mov	fp, r0
 8015b7c:	4638      	mov	r0, r7
 8015b7e:	460e      	mov	r6, r1
 8015b80:	9217      	str	r2, [sp, #92]	; 0x5c
 8015b82:	931c      	str	r3, [sp, #112]	; 0x70
 8015b84:	f002 fa6c 	bl	8018060 <__localeconv_l>
 8015b88:	4680      	mov	r8, r0
 8015b8a:	6800      	ldr	r0, [r0, #0]
 8015b8c:	f7ea fb02 	bl	8000194 <strlen>
 8015b90:	f04f 0900 	mov.w	r9, #0
 8015b94:	4604      	mov	r4, r0
 8015b96:	f04f 0a00 	mov.w	sl, #0
 8015b9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b9e:	781a      	ldrb	r2, [r3, #0]
 8015ba0:	2a0d      	cmp	r2, #13
 8015ba2:	d832      	bhi.n	8015c0a <_strtod_l+0x9a>
 8015ba4:	2a09      	cmp	r2, #9
 8015ba6:	d236      	bcs.n	8015c16 <_strtod_l+0xa6>
 8015ba8:	2a00      	cmp	r2, #0
 8015baa:	d03e      	beq.n	8015c2a <_strtod_l+0xba>
 8015bac:	2300      	movs	r3, #0
 8015bae:	930d      	str	r3, [sp, #52]	; 0x34
 8015bb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015bb2:	782b      	ldrb	r3, [r5, #0]
 8015bb4:	2b30      	cmp	r3, #48	; 0x30
 8015bb6:	f040 80ac 	bne.w	8015d12 <_strtod_l+0x1a2>
 8015bba:	786b      	ldrb	r3, [r5, #1]
 8015bbc:	2b58      	cmp	r3, #88	; 0x58
 8015bbe:	d001      	beq.n	8015bc4 <_strtod_l+0x54>
 8015bc0:	2b78      	cmp	r3, #120	; 0x78
 8015bc2:	d167      	bne.n	8015c94 <_strtod_l+0x124>
 8015bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bc6:	9702      	str	r7, [sp, #8]
 8015bc8:	9301      	str	r3, [sp, #4]
 8015bca:	ab1c      	add	r3, sp, #112	; 0x70
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	4a89      	ldr	r2, [pc, #548]	; (8015df4 <_strtod_l+0x284>)
 8015bd0:	ab1d      	add	r3, sp, #116	; 0x74
 8015bd2:	a91b      	add	r1, sp, #108	; 0x6c
 8015bd4:	4658      	mov	r0, fp
 8015bd6:	f001 ff59 	bl	8017a8c <__gethex>
 8015bda:	f010 0407 	ands.w	r4, r0, #7
 8015bde:	4606      	mov	r6, r0
 8015be0:	d005      	beq.n	8015bee <_strtod_l+0x7e>
 8015be2:	2c06      	cmp	r4, #6
 8015be4:	d12b      	bne.n	8015c3e <_strtod_l+0xce>
 8015be6:	2300      	movs	r3, #0
 8015be8:	3501      	adds	r5, #1
 8015bea:	951b      	str	r5, [sp, #108]	; 0x6c
 8015bec:	930d      	str	r3, [sp, #52]	; 0x34
 8015bee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	f040 85a6 	bne.w	8016742 <_strtod_l+0xbd2>
 8015bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bf8:	b1e3      	cbz	r3, 8015c34 <_strtod_l+0xc4>
 8015bfa:	464a      	mov	r2, r9
 8015bfc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8015c00:	4610      	mov	r0, r2
 8015c02:	4619      	mov	r1, r3
 8015c04:	b021      	add	sp, #132	; 0x84
 8015c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c0a:	2a2b      	cmp	r2, #43	; 0x2b
 8015c0c:	d015      	beq.n	8015c3a <_strtod_l+0xca>
 8015c0e:	2a2d      	cmp	r2, #45	; 0x2d
 8015c10:	d004      	beq.n	8015c1c <_strtod_l+0xac>
 8015c12:	2a20      	cmp	r2, #32
 8015c14:	d1ca      	bne.n	8015bac <_strtod_l+0x3c>
 8015c16:	3301      	adds	r3, #1
 8015c18:	931b      	str	r3, [sp, #108]	; 0x6c
 8015c1a:	e7bf      	b.n	8015b9c <_strtod_l+0x2c>
 8015c1c:	2201      	movs	r2, #1
 8015c1e:	920d      	str	r2, [sp, #52]	; 0x34
 8015c20:	1c5a      	adds	r2, r3, #1
 8015c22:	921b      	str	r2, [sp, #108]	; 0x6c
 8015c24:	785b      	ldrb	r3, [r3, #1]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d1c2      	bne.n	8015bb0 <_strtod_l+0x40>
 8015c2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	f040 8585 	bne.w	801673e <_strtod_l+0xbce>
 8015c34:	464a      	mov	r2, r9
 8015c36:	4653      	mov	r3, sl
 8015c38:	e7e2      	b.n	8015c00 <_strtod_l+0x90>
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	e7ef      	b.n	8015c1e <_strtod_l+0xae>
 8015c3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015c40:	b13a      	cbz	r2, 8015c52 <_strtod_l+0xe2>
 8015c42:	2135      	movs	r1, #53	; 0x35
 8015c44:	a81e      	add	r0, sp, #120	; 0x78
 8015c46:	f002 fe76 	bl	8018936 <__copybits>
 8015c4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c4c:	4658      	mov	r0, fp
 8015c4e:	f002 fae9 	bl	8018224 <_Bfree>
 8015c52:	3c01      	subs	r4, #1
 8015c54:	2c04      	cmp	r4, #4
 8015c56:	d806      	bhi.n	8015c66 <_strtod_l+0xf6>
 8015c58:	e8df f004 	tbb	[pc, r4]
 8015c5c:	1714030a 	.word	0x1714030a
 8015c60:	0a          	.byte	0x0a
 8015c61:	00          	.byte	0x00
 8015c62:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8015c66:	0731      	lsls	r1, r6, #28
 8015c68:	d5c1      	bpl.n	8015bee <_strtod_l+0x7e>
 8015c6a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8015c6e:	e7be      	b.n	8015bee <_strtod_l+0x7e>
 8015c70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015c72:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8015c76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015c7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015c7e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8015c82:	e7f0      	b.n	8015c66 <_strtod_l+0xf6>
 8015c84:	f8df a170 	ldr.w	sl, [pc, #368]	; 8015df8 <_strtod_l+0x288>
 8015c88:	e7ed      	b.n	8015c66 <_strtod_l+0xf6>
 8015c8a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8015c8e:	f04f 39ff 	mov.w	r9, #4294967295
 8015c92:	e7e8      	b.n	8015c66 <_strtod_l+0xf6>
 8015c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c96:	1c5a      	adds	r2, r3, #1
 8015c98:	921b      	str	r2, [sp, #108]	; 0x6c
 8015c9a:	785b      	ldrb	r3, [r3, #1]
 8015c9c:	2b30      	cmp	r3, #48	; 0x30
 8015c9e:	d0f9      	beq.n	8015c94 <_strtod_l+0x124>
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d0a4      	beq.n	8015bee <_strtod_l+0x7e>
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	2500      	movs	r5, #0
 8015ca8:	220a      	movs	r2, #10
 8015caa:	9307      	str	r3, [sp, #28]
 8015cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cae:	9506      	str	r5, [sp, #24]
 8015cb0:	9308      	str	r3, [sp, #32]
 8015cb2:	9504      	str	r5, [sp, #16]
 8015cb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015cb6:	7807      	ldrb	r7, [r0, #0]
 8015cb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015cbc:	b2d9      	uxtb	r1, r3
 8015cbe:	2909      	cmp	r1, #9
 8015cc0:	d929      	bls.n	8015d16 <_strtod_l+0x1a6>
 8015cc2:	4622      	mov	r2, r4
 8015cc4:	f8d8 1000 	ldr.w	r1, [r8]
 8015cc8:	f7ff ff03 	bl	8015ad2 <strncmp>
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	d031      	beq.n	8015d34 <_strtod_l+0x1c4>
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	463b      	mov	r3, r7
 8015cd4:	4602      	mov	r2, r0
 8015cd6:	9c04      	ldr	r4, [sp, #16]
 8015cd8:	9005      	str	r0, [sp, #20]
 8015cda:	2b65      	cmp	r3, #101	; 0x65
 8015cdc:	d001      	beq.n	8015ce2 <_strtod_l+0x172>
 8015cde:	2b45      	cmp	r3, #69	; 0x45
 8015ce0:	d114      	bne.n	8015d0c <_strtod_l+0x19c>
 8015ce2:	b924      	cbnz	r4, 8015cee <_strtod_l+0x17e>
 8015ce4:	b910      	cbnz	r0, 8015cec <_strtod_l+0x17c>
 8015ce6:	9b07      	ldr	r3, [sp, #28]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d09e      	beq.n	8015c2a <_strtod_l+0xba>
 8015cec:	2400      	movs	r4, #0
 8015cee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015cf0:	1c73      	adds	r3, r6, #1
 8015cf2:	931b      	str	r3, [sp, #108]	; 0x6c
 8015cf4:	7873      	ldrb	r3, [r6, #1]
 8015cf6:	2b2b      	cmp	r3, #43	; 0x2b
 8015cf8:	d078      	beq.n	8015dec <_strtod_l+0x27c>
 8015cfa:	2b2d      	cmp	r3, #45	; 0x2d
 8015cfc:	d070      	beq.n	8015de0 <_strtod_l+0x270>
 8015cfe:	f04f 0c00 	mov.w	ip, #0
 8015d02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015d06:	2f09      	cmp	r7, #9
 8015d08:	d97c      	bls.n	8015e04 <_strtod_l+0x294>
 8015d0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015d0c:	f04f 0e00 	mov.w	lr, #0
 8015d10:	e09a      	b.n	8015e48 <_strtod_l+0x2d8>
 8015d12:	2300      	movs	r3, #0
 8015d14:	e7c7      	b.n	8015ca6 <_strtod_l+0x136>
 8015d16:	9904      	ldr	r1, [sp, #16]
 8015d18:	3001      	adds	r0, #1
 8015d1a:	2908      	cmp	r1, #8
 8015d1c:	bfd7      	itett	le
 8015d1e:	9906      	ldrle	r1, [sp, #24]
 8015d20:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015d24:	fb02 3301 	mlale	r3, r2, r1, r3
 8015d28:	9306      	strle	r3, [sp, #24]
 8015d2a:	9b04      	ldr	r3, [sp, #16]
 8015d2c:	901b      	str	r0, [sp, #108]	; 0x6c
 8015d2e:	3301      	adds	r3, #1
 8015d30:	9304      	str	r3, [sp, #16]
 8015d32:	e7bf      	b.n	8015cb4 <_strtod_l+0x144>
 8015d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d36:	191a      	adds	r2, r3, r4
 8015d38:	921b      	str	r2, [sp, #108]	; 0x6c
 8015d3a:	9a04      	ldr	r2, [sp, #16]
 8015d3c:	5d1b      	ldrb	r3, [r3, r4]
 8015d3e:	2a00      	cmp	r2, #0
 8015d40:	d037      	beq.n	8015db2 <_strtod_l+0x242>
 8015d42:	4602      	mov	r2, r0
 8015d44:	9c04      	ldr	r4, [sp, #16]
 8015d46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015d4a:	2909      	cmp	r1, #9
 8015d4c:	d913      	bls.n	8015d76 <_strtod_l+0x206>
 8015d4e:	2101      	movs	r1, #1
 8015d50:	9105      	str	r1, [sp, #20]
 8015d52:	e7c2      	b.n	8015cda <_strtod_l+0x16a>
 8015d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d56:	3001      	adds	r0, #1
 8015d58:	1c5a      	adds	r2, r3, #1
 8015d5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8015d5c:	785b      	ldrb	r3, [r3, #1]
 8015d5e:	2b30      	cmp	r3, #48	; 0x30
 8015d60:	d0f8      	beq.n	8015d54 <_strtod_l+0x1e4>
 8015d62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015d66:	2a08      	cmp	r2, #8
 8015d68:	f200 84f0 	bhi.w	801674c <_strtod_l+0xbdc>
 8015d6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015d6e:	9208      	str	r2, [sp, #32]
 8015d70:	4602      	mov	r2, r0
 8015d72:	2000      	movs	r0, #0
 8015d74:	4604      	mov	r4, r0
 8015d76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015d7a:	f100 0101 	add.w	r1, r0, #1
 8015d7e:	d012      	beq.n	8015da6 <_strtod_l+0x236>
 8015d80:	440a      	add	r2, r1
 8015d82:	270a      	movs	r7, #10
 8015d84:	4621      	mov	r1, r4
 8015d86:	eb00 0c04 	add.w	ip, r0, r4
 8015d8a:	458c      	cmp	ip, r1
 8015d8c:	d113      	bne.n	8015db6 <_strtod_l+0x246>
 8015d8e:	1821      	adds	r1, r4, r0
 8015d90:	2908      	cmp	r1, #8
 8015d92:	f104 0401 	add.w	r4, r4, #1
 8015d96:	4404      	add	r4, r0
 8015d98:	dc19      	bgt.n	8015dce <_strtod_l+0x25e>
 8015d9a:	210a      	movs	r1, #10
 8015d9c:	9b06      	ldr	r3, [sp, #24]
 8015d9e:	fb01 e303 	mla	r3, r1, r3, lr
 8015da2:	9306      	str	r3, [sp, #24]
 8015da4:	2100      	movs	r1, #0
 8015da6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015da8:	1c58      	adds	r0, r3, #1
 8015daa:	901b      	str	r0, [sp, #108]	; 0x6c
 8015dac:	785b      	ldrb	r3, [r3, #1]
 8015dae:	4608      	mov	r0, r1
 8015db0:	e7c9      	b.n	8015d46 <_strtod_l+0x1d6>
 8015db2:	9804      	ldr	r0, [sp, #16]
 8015db4:	e7d3      	b.n	8015d5e <_strtod_l+0x1ee>
 8015db6:	2908      	cmp	r1, #8
 8015db8:	f101 0101 	add.w	r1, r1, #1
 8015dbc:	dc03      	bgt.n	8015dc6 <_strtod_l+0x256>
 8015dbe:	9b06      	ldr	r3, [sp, #24]
 8015dc0:	437b      	muls	r3, r7
 8015dc2:	9306      	str	r3, [sp, #24]
 8015dc4:	e7e1      	b.n	8015d8a <_strtod_l+0x21a>
 8015dc6:	2910      	cmp	r1, #16
 8015dc8:	bfd8      	it	le
 8015dca:	437d      	mulle	r5, r7
 8015dcc:	e7dd      	b.n	8015d8a <_strtod_l+0x21a>
 8015dce:	2c10      	cmp	r4, #16
 8015dd0:	bfdc      	itt	le
 8015dd2:	210a      	movle	r1, #10
 8015dd4:	fb01 e505 	mlale	r5, r1, r5, lr
 8015dd8:	e7e4      	b.n	8015da4 <_strtod_l+0x234>
 8015dda:	2301      	movs	r3, #1
 8015ddc:	9305      	str	r3, [sp, #20]
 8015dde:	e781      	b.n	8015ce4 <_strtod_l+0x174>
 8015de0:	f04f 0c01 	mov.w	ip, #1
 8015de4:	1cb3      	adds	r3, r6, #2
 8015de6:	931b      	str	r3, [sp, #108]	; 0x6c
 8015de8:	78b3      	ldrb	r3, [r6, #2]
 8015dea:	e78a      	b.n	8015d02 <_strtod_l+0x192>
 8015dec:	f04f 0c00 	mov.w	ip, #0
 8015df0:	e7f8      	b.n	8015de4 <_strtod_l+0x274>
 8015df2:	bf00      	nop
 8015df4:	0801e360 	.word	0x0801e360
 8015df8:	7ff00000 	.word	0x7ff00000
 8015dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015dfe:	1c5f      	adds	r7, r3, #1
 8015e00:	971b      	str	r7, [sp, #108]	; 0x6c
 8015e02:	785b      	ldrb	r3, [r3, #1]
 8015e04:	2b30      	cmp	r3, #48	; 0x30
 8015e06:	d0f9      	beq.n	8015dfc <_strtod_l+0x28c>
 8015e08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015e0c:	2f08      	cmp	r7, #8
 8015e0e:	f63f af7d 	bhi.w	8015d0c <_strtod_l+0x19c>
 8015e12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015e16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e18:	9309      	str	r3, [sp, #36]	; 0x24
 8015e1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e1c:	1c5f      	adds	r7, r3, #1
 8015e1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8015e20:	785b      	ldrb	r3, [r3, #1]
 8015e22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015e26:	f1b8 0f09 	cmp.w	r8, #9
 8015e2a:	d937      	bls.n	8015e9c <_strtod_l+0x32c>
 8015e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e2e:	1a7f      	subs	r7, r7, r1
 8015e30:	2f08      	cmp	r7, #8
 8015e32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015e36:	dc37      	bgt.n	8015ea8 <_strtod_l+0x338>
 8015e38:	45be      	cmp	lr, r7
 8015e3a:	bfa8      	it	ge
 8015e3c:	46be      	movge	lr, r7
 8015e3e:	f1bc 0f00 	cmp.w	ip, #0
 8015e42:	d001      	beq.n	8015e48 <_strtod_l+0x2d8>
 8015e44:	f1ce 0e00 	rsb	lr, lr, #0
 8015e48:	2c00      	cmp	r4, #0
 8015e4a:	d151      	bne.n	8015ef0 <_strtod_l+0x380>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	f47f aece 	bne.w	8015bee <_strtod_l+0x7e>
 8015e52:	9a07      	ldr	r2, [sp, #28]
 8015e54:	2a00      	cmp	r2, #0
 8015e56:	f47f aeca 	bne.w	8015bee <_strtod_l+0x7e>
 8015e5a:	9a05      	ldr	r2, [sp, #20]
 8015e5c:	2a00      	cmp	r2, #0
 8015e5e:	f47f aee4 	bne.w	8015c2a <_strtod_l+0xba>
 8015e62:	2b4e      	cmp	r3, #78	; 0x4e
 8015e64:	d027      	beq.n	8015eb6 <_strtod_l+0x346>
 8015e66:	dc21      	bgt.n	8015eac <_strtod_l+0x33c>
 8015e68:	2b49      	cmp	r3, #73	; 0x49
 8015e6a:	f47f aede 	bne.w	8015c2a <_strtod_l+0xba>
 8015e6e:	49a4      	ldr	r1, [pc, #656]	; (8016100 <_strtod_l+0x590>)
 8015e70:	a81b      	add	r0, sp, #108	; 0x6c
 8015e72:	f002 f83f 	bl	8017ef4 <__match>
 8015e76:	2800      	cmp	r0, #0
 8015e78:	f43f aed7 	beq.w	8015c2a <_strtod_l+0xba>
 8015e7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e7e:	49a1      	ldr	r1, [pc, #644]	; (8016104 <_strtod_l+0x594>)
 8015e80:	3b01      	subs	r3, #1
 8015e82:	a81b      	add	r0, sp, #108	; 0x6c
 8015e84:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e86:	f002 f835 	bl	8017ef4 <__match>
 8015e8a:	b910      	cbnz	r0, 8015e92 <_strtod_l+0x322>
 8015e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e8e:	3301      	adds	r3, #1
 8015e90:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e92:	f8df a284 	ldr.w	sl, [pc, #644]	; 8016118 <_strtod_l+0x5a8>
 8015e96:	f04f 0900 	mov.w	r9, #0
 8015e9a:	e6a8      	b.n	8015bee <_strtod_l+0x7e>
 8015e9c:	210a      	movs	r1, #10
 8015e9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015ea2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015ea6:	e7b8      	b.n	8015e1a <_strtod_l+0x2aa>
 8015ea8:	46be      	mov	lr, r7
 8015eaa:	e7c8      	b.n	8015e3e <_strtod_l+0x2ce>
 8015eac:	2b69      	cmp	r3, #105	; 0x69
 8015eae:	d0de      	beq.n	8015e6e <_strtod_l+0x2fe>
 8015eb0:	2b6e      	cmp	r3, #110	; 0x6e
 8015eb2:	f47f aeba 	bne.w	8015c2a <_strtod_l+0xba>
 8015eb6:	4994      	ldr	r1, [pc, #592]	; (8016108 <_strtod_l+0x598>)
 8015eb8:	a81b      	add	r0, sp, #108	; 0x6c
 8015eba:	f002 f81b 	bl	8017ef4 <__match>
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	f43f aeb3 	beq.w	8015c2a <_strtod_l+0xba>
 8015ec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	2b28      	cmp	r3, #40	; 0x28
 8015eca:	d10e      	bne.n	8015eea <_strtod_l+0x37a>
 8015ecc:	aa1e      	add	r2, sp, #120	; 0x78
 8015ece:	498f      	ldr	r1, [pc, #572]	; (801610c <_strtod_l+0x59c>)
 8015ed0:	a81b      	add	r0, sp, #108	; 0x6c
 8015ed2:	f002 f823 	bl	8017f1c <__hexnan>
 8015ed6:	2805      	cmp	r0, #5
 8015ed8:	d107      	bne.n	8015eea <_strtod_l+0x37a>
 8015eda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015edc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8015ee0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8015ee4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8015ee8:	e681      	b.n	8015bee <_strtod_l+0x7e>
 8015eea:	f8df a234 	ldr.w	sl, [pc, #564]	; 8016120 <_strtod_l+0x5b0>
 8015eee:	e7d2      	b.n	8015e96 <_strtod_l+0x326>
 8015ef0:	ebae 0302 	sub.w	r3, lr, r2
 8015ef4:	9307      	str	r3, [sp, #28]
 8015ef6:	9b04      	ldr	r3, [sp, #16]
 8015ef8:	9806      	ldr	r0, [sp, #24]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	bf08      	it	eq
 8015efe:	4623      	moveq	r3, r4
 8015f00:	2c10      	cmp	r4, #16
 8015f02:	9304      	str	r3, [sp, #16]
 8015f04:	46a0      	mov	r8, r4
 8015f06:	bfa8      	it	ge
 8015f08:	f04f 0810 	movge.w	r8, #16
 8015f0c:	f7ea fa8c 	bl	8000428 <__aeabi_ui2d>
 8015f10:	2c09      	cmp	r4, #9
 8015f12:	4681      	mov	r9, r0
 8015f14:	468a      	mov	sl, r1
 8015f16:	dc13      	bgt.n	8015f40 <_strtod_l+0x3d0>
 8015f18:	9b07      	ldr	r3, [sp, #28]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	f43f ae67 	beq.w	8015bee <_strtod_l+0x7e>
 8015f20:	9b07      	ldr	r3, [sp, #28]
 8015f22:	dd7e      	ble.n	8016022 <_strtod_l+0x4b2>
 8015f24:	2b16      	cmp	r3, #22
 8015f26:	dc65      	bgt.n	8015ff4 <_strtod_l+0x484>
 8015f28:	4a79      	ldr	r2, [pc, #484]	; (8016110 <_strtod_l+0x5a0>)
 8015f2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015f2e:	464a      	mov	r2, r9
 8015f30:	e9de 0100 	ldrd	r0, r1, [lr]
 8015f34:	4653      	mov	r3, sl
 8015f36:	f7ea faf1 	bl	800051c <__aeabi_dmul>
 8015f3a:	4681      	mov	r9, r0
 8015f3c:	468a      	mov	sl, r1
 8015f3e:	e656      	b.n	8015bee <_strtod_l+0x7e>
 8015f40:	4b73      	ldr	r3, [pc, #460]	; (8016110 <_strtod_l+0x5a0>)
 8015f42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015f46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015f4a:	f7ea fae7 	bl	800051c <__aeabi_dmul>
 8015f4e:	4606      	mov	r6, r0
 8015f50:	4628      	mov	r0, r5
 8015f52:	460f      	mov	r7, r1
 8015f54:	f7ea fa68 	bl	8000428 <__aeabi_ui2d>
 8015f58:	4602      	mov	r2, r0
 8015f5a:	460b      	mov	r3, r1
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	4639      	mov	r1, r7
 8015f60:	f7ea f926 	bl	80001b0 <__adddf3>
 8015f64:	2c0f      	cmp	r4, #15
 8015f66:	4681      	mov	r9, r0
 8015f68:	468a      	mov	sl, r1
 8015f6a:	ddd5      	ble.n	8015f18 <_strtod_l+0x3a8>
 8015f6c:	9b07      	ldr	r3, [sp, #28]
 8015f6e:	eba4 0808 	sub.w	r8, r4, r8
 8015f72:	4498      	add	r8, r3
 8015f74:	f1b8 0f00 	cmp.w	r8, #0
 8015f78:	f340 809a 	ble.w	80160b0 <_strtod_l+0x540>
 8015f7c:	f018 030f 	ands.w	r3, r8, #15
 8015f80:	d00a      	beq.n	8015f98 <_strtod_l+0x428>
 8015f82:	4963      	ldr	r1, [pc, #396]	; (8016110 <_strtod_l+0x5a0>)
 8015f84:	464a      	mov	r2, r9
 8015f86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f8e:	4653      	mov	r3, sl
 8015f90:	f7ea fac4 	bl	800051c <__aeabi_dmul>
 8015f94:	4681      	mov	r9, r0
 8015f96:	468a      	mov	sl, r1
 8015f98:	f038 080f 	bics.w	r8, r8, #15
 8015f9c:	d077      	beq.n	801608e <_strtod_l+0x51e>
 8015f9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015fa2:	dd4b      	ble.n	801603c <_strtod_l+0x4cc>
 8015fa4:	f04f 0800 	mov.w	r8, #0
 8015fa8:	f8cd 8010 	str.w	r8, [sp, #16]
 8015fac:	f8cd 8020 	str.w	r8, [sp, #32]
 8015fb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8015fb4:	2322      	movs	r3, #34	; 0x22
 8015fb6:	f04f 0900 	mov.w	r9, #0
 8015fba:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8016118 <_strtod_l+0x5a8>
 8015fbe:	f8cb 3000 	str.w	r3, [fp]
 8015fc2:	9b08      	ldr	r3, [sp, #32]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	f43f ae12 	beq.w	8015bee <_strtod_l+0x7e>
 8015fca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015fcc:	4658      	mov	r0, fp
 8015fce:	f002 f929 	bl	8018224 <_Bfree>
 8015fd2:	9906      	ldr	r1, [sp, #24]
 8015fd4:	4658      	mov	r0, fp
 8015fd6:	f002 f925 	bl	8018224 <_Bfree>
 8015fda:	9904      	ldr	r1, [sp, #16]
 8015fdc:	4658      	mov	r0, fp
 8015fde:	f002 f921 	bl	8018224 <_Bfree>
 8015fe2:	9908      	ldr	r1, [sp, #32]
 8015fe4:	4658      	mov	r0, fp
 8015fe6:	f002 f91d 	bl	8018224 <_Bfree>
 8015fea:	4641      	mov	r1, r8
 8015fec:	4658      	mov	r0, fp
 8015fee:	f002 f919 	bl	8018224 <_Bfree>
 8015ff2:	e5fc      	b.n	8015bee <_strtod_l+0x7e>
 8015ff4:	9a07      	ldr	r2, [sp, #28]
 8015ff6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	dbb6      	blt.n	8015f6c <_strtod_l+0x3fc>
 8015ffe:	4d44      	ldr	r5, [pc, #272]	; (8016110 <_strtod_l+0x5a0>)
 8016000:	f1c4 040f 	rsb	r4, r4, #15
 8016004:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016008:	464a      	mov	r2, r9
 801600a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801600e:	4653      	mov	r3, sl
 8016010:	f7ea fa84 	bl	800051c <__aeabi_dmul>
 8016014:	9b07      	ldr	r3, [sp, #28]
 8016016:	1b1c      	subs	r4, r3, r4
 8016018:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801601c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016020:	e789      	b.n	8015f36 <_strtod_l+0x3c6>
 8016022:	f113 0f16 	cmn.w	r3, #22
 8016026:	dba1      	blt.n	8015f6c <_strtod_l+0x3fc>
 8016028:	4a39      	ldr	r2, [pc, #228]	; (8016110 <_strtod_l+0x5a0>)
 801602a:	4648      	mov	r0, r9
 801602c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016030:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016034:	4651      	mov	r1, sl
 8016036:	f7ea fb9b 	bl	8000770 <__aeabi_ddiv>
 801603a:	e77e      	b.n	8015f3a <_strtod_l+0x3ca>
 801603c:	2300      	movs	r3, #0
 801603e:	4648      	mov	r0, r9
 8016040:	4651      	mov	r1, sl
 8016042:	461d      	mov	r5, r3
 8016044:	4e33      	ldr	r6, [pc, #204]	; (8016114 <_strtod_l+0x5a4>)
 8016046:	ea4f 1828 	mov.w	r8, r8, asr #4
 801604a:	f1b8 0f01 	cmp.w	r8, #1
 801604e:	dc21      	bgt.n	8016094 <_strtod_l+0x524>
 8016050:	b10b      	cbz	r3, 8016056 <_strtod_l+0x4e6>
 8016052:	4681      	mov	r9, r0
 8016054:	468a      	mov	sl, r1
 8016056:	4b2f      	ldr	r3, [pc, #188]	; (8016114 <_strtod_l+0x5a4>)
 8016058:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 801605c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016060:	464a      	mov	r2, r9
 8016062:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016066:	4653      	mov	r3, sl
 8016068:	f7ea fa58 	bl	800051c <__aeabi_dmul>
 801606c:	4b2a      	ldr	r3, [pc, #168]	; (8016118 <_strtod_l+0x5a8>)
 801606e:	460a      	mov	r2, r1
 8016070:	400b      	ands	r3, r1
 8016072:	492a      	ldr	r1, [pc, #168]	; (801611c <_strtod_l+0x5ac>)
 8016074:	4681      	mov	r9, r0
 8016076:	428b      	cmp	r3, r1
 8016078:	d894      	bhi.n	8015fa4 <_strtod_l+0x434>
 801607a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801607e:	428b      	cmp	r3, r1
 8016080:	bf86      	itte	hi
 8016082:	f04f 39ff 	movhi.w	r9, #4294967295
 8016086:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8016124 <_strtod_l+0x5b4>
 801608a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 801608e:	2300      	movs	r3, #0
 8016090:	9305      	str	r3, [sp, #20]
 8016092:	e07b      	b.n	801618c <_strtod_l+0x61c>
 8016094:	f018 0f01 	tst.w	r8, #1
 8016098:	d006      	beq.n	80160a8 <_strtod_l+0x538>
 801609a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160a2:	f7ea fa3b 	bl	800051c <__aeabi_dmul>
 80160a6:	2301      	movs	r3, #1
 80160a8:	3501      	adds	r5, #1
 80160aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80160ae:	e7cc      	b.n	801604a <_strtod_l+0x4da>
 80160b0:	d0ed      	beq.n	801608e <_strtod_l+0x51e>
 80160b2:	f1c8 0800 	rsb	r8, r8, #0
 80160b6:	f018 020f 	ands.w	r2, r8, #15
 80160ba:	d00a      	beq.n	80160d2 <_strtod_l+0x562>
 80160bc:	4b14      	ldr	r3, [pc, #80]	; (8016110 <_strtod_l+0x5a0>)
 80160be:	4648      	mov	r0, r9
 80160c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80160c4:	4651      	mov	r1, sl
 80160c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ca:	f7ea fb51 	bl	8000770 <__aeabi_ddiv>
 80160ce:	4681      	mov	r9, r0
 80160d0:	468a      	mov	sl, r1
 80160d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80160d6:	d0da      	beq.n	801608e <_strtod_l+0x51e>
 80160d8:	f1b8 0f1f 	cmp.w	r8, #31
 80160dc:	dd24      	ble.n	8016128 <_strtod_l+0x5b8>
 80160de:	f04f 0800 	mov.w	r8, #0
 80160e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80160e6:	f8cd 8020 	str.w	r8, [sp, #32]
 80160ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80160ee:	2322      	movs	r3, #34	; 0x22
 80160f0:	f04f 0900 	mov.w	r9, #0
 80160f4:	f04f 0a00 	mov.w	sl, #0
 80160f8:	f8cb 3000 	str.w	r3, [fp]
 80160fc:	e761      	b.n	8015fc2 <_strtod_l+0x452>
 80160fe:	bf00      	nop
 8016100:	0801e32d 	.word	0x0801e32d
 8016104:	0801e3b3 	.word	0x0801e3b3
 8016108:	0801e335 	.word	0x0801e335
 801610c:	0801e374 	.word	0x0801e374
 8016110:	0801e458 	.word	0x0801e458
 8016114:	0801e430 	.word	0x0801e430
 8016118:	7ff00000 	.word	0x7ff00000
 801611c:	7ca00000 	.word	0x7ca00000
 8016120:	fff80000 	.word	0xfff80000
 8016124:	7fefffff 	.word	0x7fefffff
 8016128:	f018 0310 	ands.w	r3, r8, #16
 801612c:	bf18      	it	ne
 801612e:	236a      	movne	r3, #106	; 0x6a
 8016130:	4648      	mov	r0, r9
 8016132:	9305      	str	r3, [sp, #20]
 8016134:	4651      	mov	r1, sl
 8016136:	2300      	movs	r3, #0
 8016138:	4da1      	ldr	r5, [pc, #644]	; (80163c0 <_strtod_l+0x850>)
 801613a:	f1b8 0f00 	cmp.w	r8, #0
 801613e:	f300 8113 	bgt.w	8016368 <_strtod_l+0x7f8>
 8016142:	b10b      	cbz	r3, 8016148 <_strtod_l+0x5d8>
 8016144:	4681      	mov	r9, r0
 8016146:	468a      	mov	sl, r1
 8016148:	9b05      	ldr	r3, [sp, #20]
 801614a:	b1bb      	cbz	r3, 801617c <_strtod_l+0x60c>
 801614c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8016150:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016154:	2b00      	cmp	r3, #0
 8016156:	4651      	mov	r1, sl
 8016158:	dd10      	ble.n	801617c <_strtod_l+0x60c>
 801615a:	2b1f      	cmp	r3, #31
 801615c:	f340 8110 	ble.w	8016380 <_strtod_l+0x810>
 8016160:	2b34      	cmp	r3, #52	; 0x34
 8016162:	bfd8      	it	le
 8016164:	f04f 32ff 	movle.w	r2, #4294967295
 8016168:	f04f 0900 	mov.w	r9, #0
 801616c:	bfcf      	iteee	gt
 801616e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8016172:	3b20      	suble	r3, #32
 8016174:	fa02 f303 	lslle.w	r3, r2, r3
 8016178:	ea03 0a01 	andle.w	sl, r3, r1
 801617c:	2200      	movs	r2, #0
 801617e:	2300      	movs	r3, #0
 8016180:	4648      	mov	r0, r9
 8016182:	4651      	mov	r1, sl
 8016184:	f7ea fc32 	bl	80009ec <__aeabi_dcmpeq>
 8016188:	2800      	cmp	r0, #0
 801618a:	d1a8      	bne.n	80160de <_strtod_l+0x56e>
 801618c:	9b06      	ldr	r3, [sp, #24]
 801618e:	9a04      	ldr	r2, [sp, #16]
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	9908      	ldr	r1, [sp, #32]
 8016194:	4623      	mov	r3, r4
 8016196:	4658      	mov	r0, fp
 8016198:	f002 f896 	bl	80182c8 <__s2b>
 801619c:	9008      	str	r0, [sp, #32]
 801619e:	2800      	cmp	r0, #0
 80161a0:	f43f af00 	beq.w	8015fa4 <_strtod_l+0x434>
 80161a4:	9a07      	ldr	r2, [sp, #28]
 80161a6:	9b07      	ldr	r3, [sp, #28]
 80161a8:	2a00      	cmp	r2, #0
 80161aa:	f1c3 0300 	rsb	r3, r3, #0
 80161ae:	bfa8      	it	ge
 80161b0:	2300      	movge	r3, #0
 80161b2:	f04f 0800 	mov.w	r8, #0
 80161b6:	930e      	str	r3, [sp, #56]	; 0x38
 80161b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80161bc:	9316      	str	r3, [sp, #88]	; 0x58
 80161be:	f8cd 8010 	str.w	r8, [sp, #16]
 80161c2:	9b08      	ldr	r3, [sp, #32]
 80161c4:	4658      	mov	r0, fp
 80161c6:	6859      	ldr	r1, [r3, #4]
 80161c8:	f001 fff8 	bl	80181bc <_Balloc>
 80161cc:	9006      	str	r0, [sp, #24]
 80161ce:	2800      	cmp	r0, #0
 80161d0:	f43f aef0 	beq.w	8015fb4 <_strtod_l+0x444>
 80161d4:	9b08      	ldr	r3, [sp, #32]
 80161d6:	300c      	adds	r0, #12
 80161d8:	691a      	ldr	r2, [r3, #16]
 80161da:	f103 010c 	add.w	r1, r3, #12
 80161de:	3202      	adds	r2, #2
 80161e0:	0092      	lsls	r2, r2, #2
 80161e2:	f7fe fd03 	bl	8014bec <memcpy>
 80161e6:	ab1e      	add	r3, sp, #120	; 0x78
 80161e8:	9301      	str	r3, [sp, #4]
 80161ea:	ab1d      	add	r3, sp, #116	; 0x74
 80161ec:	9300      	str	r3, [sp, #0]
 80161ee:	464a      	mov	r2, r9
 80161f0:	4653      	mov	r3, sl
 80161f2:	4658      	mov	r0, fp
 80161f4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80161f8:	f002 fb20 	bl	801883c <__d2b>
 80161fc:	901c      	str	r0, [sp, #112]	; 0x70
 80161fe:	2800      	cmp	r0, #0
 8016200:	f43f aed8 	beq.w	8015fb4 <_strtod_l+0x444>
 8016204:	2101      	movs	r1, #1
 8016206:	4658      	mov	r0, fp
 8016208:	f002 f8ea 	bl	80183e0 <__i2b>
 801620c:	9004      	str	r0, [sp, #16]
 801620e:	4603      	mov	r3, r0
 8016210:	2800      	cmp	r0, #0
 8016212:	f43f aecf 	beq.w	8015fb4 <_strtod_l+0x444>
 8016216:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8016218:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801621a:	2d00      	cmp	r5, #0
 801621c:	bfab      	itete	ge
 801621e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016220:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016222:	18ee      	addge	r6, r5, r3
 8016224:	1b5c      	sublt	r4, r3, r5
 8016226:	9b05      	ldr	r3, [sp, #20]
 8016228:	bfa8      	it	ge
 801622a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 801622c:	eba5 0503 	sub.w	r5, r5, r3
 8016230:	4415      	add	r5, r2
 8016232:	4b64      	ldr	r3, [pc, #400]	; (80163c4 <_strtod_l+0x854>)
 8016234:	f105 35ff 	add.w	r5, r5, #4294967295
 8016238:	bfb8      	it	lt
 801623a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 801623c:	429d      	cmp	r5, r3
 801623e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016242:	f280 80af 	bge.w	80163a4 <_strtod_l+0x834>
 8016246:	1b5b      	subs	r3, r3, r5
 8016248:	2b1f      	cmp	r3, #31
 801624a:	eba2 0203 	sub.w	r2, r2, r3
 801624e:	f04f 0701 	mov.w	r7, #1
 8016252:	f300 809c 	bgt.w	801638e <_strtod_l+0x81e>
 8016256:	2500      	movs	r5, #0
 8016258:	fa07 f303 	lsl.w	r3, r7, r3
 801625c:	930f      	str	r3, [sp, #60]	; 0x3c
 801625e:	18b7      	adds	r7, r6, r2
 8016260:	9b05      	ldr	r3, [sp, #20]
 8016262:	42be      	cmp	r6, r7
 8016264:	4414      	add	r4, r2
 8016266:	441c      	add	r4, r3
 8016268:	4633      	mov	r3, r6
 801626a:	bfa8      	it	ge
 801626c:	463b      	movge	r3, r7
 801626e:	42a3      	cmp	r3, r4
 8016270:	bfa8      	it	ge
 8016272:	4623      	movge	r3, r4
 8016274:	2b00      	cmp	r3, #0
 8016276:	bfc2      	ittt	gt
 8016278:	1aff      	subgt	r7, r7, r3
 801627a:	1ae4      	subgt	r4, r4, r3
 801627c:	1af6      	subgt	r6, r6, r3
 801627e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016280:	b1bb      	cbz	r3, 80162b2 <_strtod_l+0x742>
 8016282:	461a      	mov	r2, r3
 8016284:	9904      	ldr	r1, [sp, #16]
 8016286:	4658      	mov	r0, fp
 8016288:	f002 f948 	bl	801851c <__pow5mult>
 801628c:	9004      	str	r0, [sp, #16]
 801628e:	2800      	cmp	r0, #0
 8016290:	f43f ae90 	beq.w	8015fb4 <_strtod_l+0x444>
 8016294:	4601      	mov	r1, r0
 8016296:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016298:	4658      	mov	r0, fp
 801629a:	f002 f8aa 	bl	80183f2 <__multiply>
 801629e:	9009      	str	r0, [sp, #36]	; 0x24
 80162a0:	2800      	cmp	r0, #0
 80162a2:	f43f ae87 	beq.w	8015fb4 <_strtod_l+0x444>
 80162a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80162a8:	4658      	mov	r0, fp
 80162aa:	f001 ffbb 	bl	8018224 <_Bfree>
 80162ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162b0:	931c      	str	r3, [sp, #112]	; 0x70
 80162b2:	2f00      	cmp	r7, #0
 80162b4:	dc7a      	bgt.n	80163ac <_strtod_l+0x83c>
 80162b6:	9b07      	ldr	r3, [sp, #28]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	dd08      	ble.n	80162ce <_strtod_l+0x75e>
 80162bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80162be:	9906      	ldr	r1, [sp, #24]
 80162c0:	4658      	mov	r0, fp
 80162c2:	f002 f92b 	bl	801851c <__pow5mult>
 80162c6:	9006      	str	r0, [sp, #24]
 80162c8:	2800      	cmp	r0, #0
 80162ca:	f43f ae73 	beq.w	8015fb4 <_strtod_l+0x444>
 80162ce:	2c00      	cmp	r4, #0
 80162d0:	dd08      	ble.n	80162e4 <_strtod_l+0x774>
 80162d2:	4622      	mov	r2, r4
 80162d4:	9906      	ldr	r1, [sp, #24]
 80162d6:	4658      	mov	r0, fp
 80162d8:	f002 f96e 	bl	80185b8 <__lshift>
 80162dc:	9006      	str	r0, [sp, #24]
 80162de:	2800      	cmp	r0, #0
 80162e0:	f43f ae68 	beq.w	8015fb4 <_strtod_l+0x444>
 80162e4:	2e00      	cmp	r6, #0
 80162e6:	dd08      	ble.n	80162fa <_strtod_l+0x78a>
 80162e8:	4632      	mov	r2, r6
 80162ea:	9904      	ldr	r1, [sp, #16]
 80162ec:	4658      	mov	r0, fp
 80162ee:	f002 f963 	bl	80185b8 <__lshift>
 80162f2:	9004      	str	r0, [sp, #16]
 80162f4:	2800      	cmp	r0, #0
 80162f6:	f43f ae5d 	beq.w	8015fb4 <_strtod_l+0x444>
 80162fa:	9a06      	ldr	r2, [sp, #24]
 80162fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80162fe:	4658      	mov	r0, fp
 8016300:	f002 f9c8 	bl	8018694 <__mdiff>
 8016304:	4680      	mov	r8, r0
 8016306:	2800      	cmp	r0, #0
 8016308:	f43f ae54 	beq.w	8015fb4 <_strtod_l+0x444>
 801630c:	2400      	movs	r4, #0
 801630e:	68c3      	ldr	r3, [r0, #12]
 8016310:	9904      	ldr	r1, [sp, #16]
 8016312:	60c4      	str	r4, [r0, #12]
 8016314:	930c      	str	r3, [sp, #48]	; 0x30
 8016316:	f002 f9a3 	bl	8018660 <__mcmp>
 801631a:	42a0      	cmp	r0, r4
 801631c:	da54      	bge.n	80163c8 <_strtod_l+0x858>
 801631e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016320:	b9f3      	cbnz	r3, 8016360 <_strtod_l+0x7f0>
 8016322:	f1b9 0f00 	cmp.w	r9, #0
 8016326:	d11b      	bne.n	8016360 <_strtod_l+0x7f0>
 8016328:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801632c:	b9c3      	cbnz	r3, 8016360 <_strtod_l+0x7f0>
 801632e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8016332:	0d1b      	lsrs	r3, r3, #20
 8016334:	051b      	lsls	r3, r3, #20
 8016336:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801633a:	d911      	bls.n	8016360 <_strtod_l+0x7f0>
 801633c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016340:	b91b      	cbnz	r3, 801634a <_strtod_l+0x7da>
 8016342:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016346:	2b01      	cmp	r3, #1
 8016348:	dd0a      	ble.n	8016360 <_strtod_l+0x7f0>
 801634a:	4641      	mov	r1, r8
 801634c:	2201      	movs	r2, #1
 801634e:	4658      	mov	r0, fp
 8016350:	f002 f932 	bl	80185b8 <__lshift>
 8016354:	9904      	ldr	r1, [sp, #16]
 8016356:	4680      	mov	r8, r0
 8016358:	f002 f982 	bl	8018660 <__mcmp>
 801635c:	2800      	cmp	r0, #0
 801635e:	dc68      	bgt.n	8016432 <_strtod_l+0x8c2>
 8016360:	9b05      	ldr	r3, [sp, #20]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d172      	bne.n	801644c <_strtod_l+0x8dc>
 8016366:	e630      	b.n	8015fca <_strtod_l+0x45a>
 8016368:	f018 0f01 	tst.w	r8, #1
 801636c:	d004      	beq.n	8016378 <_strtod_l+0x808>
 801636e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016372:	f7ea f8d3 	bl	800051c <__aeabi_dmul>
 8016376:	2301      	movs	r3, #1
 8016378:	ea4f 0868 	mov.w	r8, r8, asr #1
 801637c:	3508      	adds	r5, #8
 801637e:	e6dc      	b.n	801613a <_strtod_l+0x5ca>
 8016380:	f04f 32ff 	mov.w	r2, #4294967295
 8016384:	fa02 f303 	lsl.w	r3, r2, r3
 8016388:	ea03 0909 	and.w	r9, r3, r9
 801638c:	e6f6      	b.n	801617c <_strtod_l+0x60c>
 801638e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8016392:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8016396:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801639a:	35e2      	adds	r5, #226	; 0xe2
 801639c:	fa07 f505 	lsl.w	r5, r7, r5
 80163a0:	970f      	str	r7, [sp, #60]	; 0x3c
 80163a2:	e75c      	b.n	801625e <_strtod_l+0x6ee>
 80163a4:	2301      	movs	r3, #1
 80163a6:	2500      	movs	r5, #0
 80163a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80163aa:	e758      	b.n	801625e <_strtod_l+0x6ee>
 80163ac:	463a      	mov	r2, r7
 80163ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80163b0:	4658      	mov	r0, fp
 80163b2:	f002 f901 	bl	80185b8 <__lshift>
 80163b6:	901c      	str	r0, [sp, #112]	; 0x70
 80163b8:	2800      	cmp	r0, #0
 80163ba:	f47f af7c 	bne.w	80162b6 <_strtod_l+0x746>
 80163be:	e5f9      	b.n	8015fb4 <_strtod_l+0x444>
 80163c0:	0801e388 	.word	0x0801e388
 80163c4:	fffffc02 	.word	0xfffffc02
 80163c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80163cc:	f040 8089 	bne.w	80164e2 <_strtod_l+0x972>
 80163d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163d2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80163d6:	b342      	cbz	r2, 801642a <_strtod_l+0x8ba>
 80163d8:	4aaf      	ldr	r2, [pc, #700]	; (8016698 <_strtod_l+0xb28>)
 80163da:	4293      	cmp	r3, r2
 80163dc:	d156      	bne.n	801648c <_strtod_l+0x91c>
 80163de:	9b05      	ldr	r3, [sp, #20]
 80163e0:	4648      	mov	r0, r9
 80163e2:	b1eb      	cbz	r3, 8016420 <_strtod_l+0x8b0>
 80163e4:	4653      	mov	r3, sl
 80163e6:	4aad      	ldr	r2, [pc, #692]	; (801669c <_strtod_l+0xb2c>)
 80163e8:	f04f 31ff 	mov.w	r1, #4294967295
 80163ec:	401a      	ands	r2, r3
 80163ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80163f2:	d818      	bhi.n	8016426 <_strtod_l+0x8b6>
 80163f4:	0d12      	lsrs	r2, r2, #20
 80163f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80163fa:	fa01 f303 	lsl.w	r3, r1, r3
 80163fe:	4298      	cmp	r0, r3
 8016400:	d144      	bne.n	801648c <_strtod_l+0x91c>
 8016402:	4ba7      	ldr	r3, [pc, #668]	; (80166a0 <_strtod_l+0xb30>)
 8016404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016406:	429a      	cmp	r2, r3
 8016408:	d102      	bne.n	8016410 <_strtod_l+0x8a0>
 801640a:	3001      	adds	r0, #1
 801640c:	f43f add2 	beq.w	8015fb4 <_strtod_l+0x444>
 8016410:	4ba2      	ldr	r3, [pc, #648]	; (801669c <_strtod_l+0xb2c>)
 8016412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016414:	f04f 0900 	mov.w	r9, #0
 8016418:	401a      	ands	r2, r3
 801641a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 801641e:	e79f      	b.n	8016360 <_strtod_l+0x7f0>
 8016420:	f04f 33ff 	mov.w	r3, #4294967295
 8016424:	e7eb      	b.n	80163fe <_strtod_l+0x88e>
 8016426:	460b      	mov	r3, r1
 8016428:	e7e9      	b.n	80163fe <_strtod_l+0x88e>
 801642a:	bb7b      	cbnz	r3, 801648c <_strtod_l+0x91c>
 801642c:	f1b9 0f00 	cmp.w	r9, #0
 8016430:	d12c      	bne.n	801648c <_strtod_l+0x91c>
 8016432:	9905      	ldr	r1, [sp, #20]
 8016434:	4653      	mov	r3, sl
 8016436:	4a99      	ldr	r2, [pc, #612]	; (801669c <_strtod_l+0xb2c>)
 8016438:	b1f1      	cbz	r1, 8016478 <_strtod_l+0x908>
 801643a:	ea02 010a 	and.w	r1, r2, sl
 801643e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016442:	dc19      	bgt.n	8016478 <_strtod_l+0x908>
 8016444:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016448:	f77f ae51 	ble.w	80160ee <_strtod_l+0x57e>
 801644c:	2300      	movs	r3, #0
 801644e:	4a95      	ldr	r2, [pc, #596]	; (80166a4 <_strtod_l+0xb34>)
 8016450:	4648      	mov	r0, r9
 8016452:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016456:	4651      	mov	r1, sl
 8016458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801645c:	f7ea f85e 	bl	800051c <__aeabi_dmul>
 8016460:	4681      	mov	r9, r0
 8016462:	468a      	mov	sl, r1
 8016464:	2900      	cmp	r1, #0
 8016466:	f47f adb0 	bne.w	8015fca <_strtod_l+0x45a>
 801646a:	2800      	cmp	r0, #0
 801646c:	f47f adad 	bne.w	8015fca <_strtod_l+0x45a>
 8016470:	2322      	movs	r3, #34	; 0x22
 8016472:	f8cb 3000 	str.w	r3, [fp]
 8016476:	e5a8      	b.n	8015fca <_strtod_l+0x45a>
 8016478:	4013      	ands	r3, r2
 801647a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801647e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8016482:	f04f 39ff 	mov.w	r9, #4294967295
 8016486:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 801648a:	e769      	b.n	8016360 <_strtod_l+0x7f0>
 801648c:	b19d      	cbz	r5, 80164b6 <_strtod_l+0x946>
 801648e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016490:	421d      	tst	r5, r3
 8016492:	f43f af65 	beq.w	8016360 <_strtod_l+0x7f0>
 8016496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016498:	9a05      	ldr	r2, [sp, #20]
 801649a:	4648      	mov	r0, r9
 801649c:	4651      	mov	r1, sl
 801649e:	b173      	cbz	r3, 80164be <_strtod_l+0x94e>
 80164a0:	f7ff fb43 	bl	8015b2a <sulp>
 80164a4:	4602      	mov	r2, r0
 80164a6:	460b      	mov	r3, r1
 80164a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80164ac:	f7e9 fe80 	bl	80001b0 <__adddf3>
 80164b0:	4681      	mov	r9, r0
 80164b2:	468a      	mov	sl, r1
 80164b4:	e754      	b.n	8016360 <_strtod_l+0x7f0>
 80164b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164b8:	ea13 0f09 	tst.w	r3, r9
 80164bc:	e7e9      	b.n	8016492 <_strtod_l+0x922>
 80164be:	f7ff fb34 	bl	8015b2a <sulp>
 80164c2:	4602      	mov	r2, r0
 80164c4:	460b      	mov	r3, r1
 80164c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80164ca:	f7e9 fe6f 	bl	80001ac <__aeabi_dsub>
 80164ce:	2200      	movs	r2, #0
 80164d0:	2300      	movs	r3, #0
 80164d2:	4681      	mov	r9, r0
 80164d4:	468a      	mov	sl, r1
 80164d6:	f7ea fa89 	bl	80009ec <__aeabi_dcmpeq>
 80164da:	2800      	cmp	r0, #0
 80164dc:	f47f ae07 	bne.w	80160ee <_strtod_l+0x57e>
 80164e0:	e73e      	b.n	8016360 <_strtod_l+0x7f0>
 80164e2:	9904      	ldr	r1, [sp, #16]
 80164e4:	4640      	mov	r0, r8
 80164e6:	f002 f9f8 	bl	80188da <__ratio>
 80164ea:	2200      	movs	r2, #0
 80164ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80164f0:	4606      	mov	r6, r0
 80164f2:	460f      	mov	r7, r1
 80164f4:	f7ea fa8e 	bl	8000a14 <__aeabi_dcmple>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	d075      	beq.n	80165e8 <_strtod_l+0xa78>
 80164fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d047      	beq.n	8016592 <_strtod_l+0xa22>
 8016502:	2600      	movs	r6, #0
 8016504:	4f68      	ldr	r7, [pc, #416]	; (80166a8 <_strtod_l+0xb38>)
 8016506:	4d68      	ldr	r5, [pc, #416]	; (80166a8 <_strtod_l+0xb38>)
 8016508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801650a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801650e:	0d1b      	lsrs	r3, r3, #20
 8016510:	051b      	lsls	r3, r3, #20
 8016512:	930f      	str	r3, [sp, #60]	; 0x3c
 8016514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016516:	4b65      	ldr	r3, [pc, #404]	; (80166ac <_strtod_l+0xb3c>)
 8016518:	429a      	cmp	r2, r3
 801651a:	f040 80cf 	bne.w	80166bc <_strtod_l+0xb4c>
 801651e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016522:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016528:	4648      	mov	r0, r9
 801652a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 801652e:	4651      	mov	r1, sl
 8016530:	f002 f90e 	bl	8018750 <__ulp>
 8016534:	4602      	mov	r2, r0
 8016536:	460b      	mov	r3, r1
 8016538:	4630      	mov	r0, r6
 801653a:	4639      	mov	r1, r7
 801653c:	f7e9 ffee 	bl	800051c <__aeabi_dmul>
 8016540:	464a      	mov	r2, r9
 8016542:	4653      	mov	r3, sl
 8016544:	f7e9 fe34 	bl	80001b0 <__adddf3>
 8016548:	460b      	mov	r3, r1
 801654a:	4954      	ldr	r1, [pc, #336]	; (801669c <_strtod_l+0xb2c>)
 801654c:	4a58      	ldr	r2, [pc, #352]	; (80166b0 <_strtod_l+0xb40>)
 801654e:	4019      	ands	r1, r3
 8016550:	4291      	cmp	r1, r2
 8016552:	4681      	mov	r9, r0
 8016554:	d95e      	bls.n	8016614 <_strtod_l+0xaa4>
 8016556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016558:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801655c:	4293      	cmp	r3, r2
 801655e:	d103      	bne.n	8016568 <_strtod_l+0x9f8>
 8016560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016562:	3301      	adds	r3, #1
 8016564:	f43f ad26 	beq.w	8015fb4 <_strtod_l+0x444>
 8016568:	f04f 39ff 	mov.w	r9, #4294967295
 801656c:	f8df a130 	ldr.w	sl, [pc, #304]	; 80166a0 <_strtod_l+0xb30>
 8016570:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016572:	4658      	mov	r0, fp
 8016574:	f001 fe56 	bl	8018224 <_Bfree>
 8016578:	9906      	ldr	r1, [sp, #24]
 801657a:	4658      	mov	r0, fp
 801657c:	f001 fe52 	bl	8018224 <_Bfree>
 8016580:	9904      	ldr	r1, [sp, #16]
 8016582:	4658      	mov	r0, fp
 8016584:	f001 fe4e 	bl	8018224 <_Bfree>
 8016588:	4641      	mov	r1, r8
 801658a:	4658      	mov	r0, fp
 801658c:	f001 fe4a 	bl	8018224 <_Bfree>
 8016590:	e617      	b.n	80161c2 <_strtod_l+0x652>
 8016592:	f1b9 0f00 	cmp.w	r9, #0
 8016596:	d119      	bne.n	80165cc <_strtod_l+0xa5c>
 8016598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801659a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801659e:	b9e3      	cbnz	r3, 80165da <_strtod_l+0xa6a>
 80165a0:	2200      	movs	r2, #0
 80165a2:	4b41      	ldr	r3, [pc, #260]	; (80166a8 <_strtod_l+0xb38>)
 80165a4:	4630      	mov	r0, r6
 80165a6:	4639      	mov	r1, r7
 80165a8:	f7ea fa2a 	bl	8000a00 <__aeabi_dcmplt>
 80165ac:	b9c8      	cbnz	r0, 80165e2 <_strtod_l+0xa72>
 80165ae:	2200      	movs	r2, #0
 80165b0:	4b40      	ldr	r3, [pc, #256]	; (80166b4 <_strtod_l+0xb44>)
 80165b2:	4630      	mov	r0, r6
 80165b4:	4639      	mov	r1, r7
 80165b6:	f7e9 ffb1 	bl	800051c <__aeabi_dmul>
 80165ba:	4604      	mov	r4, r0
 80165bc:	460d      	mov	r5, r1
 80165be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80165c2:	9418      	str	r4, [sp, #96]	; 0x60
 80165c4:	9319      	str	r3, [sp, #100]	; 0x64
 80165c6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80165ca:	e79d      	b.n	8016508 <_strtod_l+0x998>
 80165cc:	f1b9 0f01 	cmp.w	r9, #1
 80165d0:	d103      	bne.n	80165da <_strtod_l+0xa6a>
 80165d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	f43f ad8a 	beq.w	80160ee <_strtod_l+0x57e>
 80165da:	2600      	movs	r6, #0
 80165dc:	4f36      	ldr	r7, [pc, #216]	; (80166b8 <_strtod_l+0xb48>)
 80165de:	2400      	movs	r4, #0
 80165e0:	e791      	b.n	8016506 <_strtod_l+0x996>
 80165e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80165e4:	4d33      	ldr	r5, [pc, #204]	; (80166b4 <_strtod_l+0xb44>)
 80165e6:	e7ea      	b.n	80165be <_strtod_l+0xa4e>
 80165e8:	4b32      	ldr	r3, [pc, #200]	; (80166b4 <_strtod_l+0xb44>)
 80165ea:	2200      	movs	r2, #0
 80165ec:	4630      	mov	r0, r6
 80165ee:	4639      	mov	r1, r7
 80165f0:	f7e9 ff94 	bl	800051c <__aeabi_dmul>
 80165f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165f6:	4604      	mov	r4, r0
 80165f8:	460d      	mov	r5, r1
 80165fa:	b933      	cbnz	r3, 801660a <_strtod_l+0xa9a>
 80165fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016600:	9010      	str	r0, [sp, #64]	; 0x40
 8016602:	9311      	str	r3, [sp, #68]	; 0x44
 8016604:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8016608:	e77e      	b.n	8016508 <_strtod_l+0x998>
 801660a:	4602      	mov	r2, r0
 801660c:	460b      	mov	r3, r1
 801660e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016612:	e7f7      	b.n	8016604 <_strtod_l+0xa94>
 8016614:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8016618:	9b05      	ldr	r3, [sp, #20]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d1a8      	bne.n	8016570 <_strtod_l+0xa00>
 801661e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8016622:	0d1b      	lsrs	r3, r3, #20
 8016624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016626:	051b      	lsls	r3, r3, #20
 8016628:	429a      	cmp	r2, r3
 801662a:	4656      	mov	r6, sl
 801662c:	d1a0      	bne.n	8016570 <_strtod_l+0xa00>
 801662e:	4629      	mov	r1, r5
 8016630:	4620      	mov	r0, r4
 8016632:	f7ea fa23 	bl	8000a7c <__aeabi_d2iz>
 8016636:	f7e9 ff07 	bl	8000448 <__aeabi_i2d>
 801663a:	460b      	mov	r3, r1
 801663c:	4602      	mov	r2, r0
 801663e:	4629      	mov	r1, r5
 8016640:	4620      	mov	r0, r4
 8016642:	f7e9 fdb3 	bl	80001ac <__aeabi_dsub>
 8016646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016648:	4604      	mov	r4, r0
 801664a:	460d      	mov	r5, r1
 801664c:	b933      	cbnz	r3, 801665c <_strtod_l+0xaec>
 801664e:	f1b9 0f00 	cmp.w	r9, #0
 8016652:	d103      	bne.n	801665c <_strtod_l+0xaec>
 8016654:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8016658:	2e00      	cmp	r6, #0
 801665a:	d06a      	beq.n	8016732 <_strtod_l+0xbc2>
 801665c:	a30a      	add	r3, pc, #40	; (adr r3, 8016688 <_strtod_l+0xb18>)
 801665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016662:	4620      	mov	r0, r4
 8016664:	4629      	mov	r1, r5
 8016666:	f7ea f9cb 	bl	8000a00 <__aeabi_dcmplt>
 801666a:	2800      	cmp	r0, #0
 801666c:	f47f acad 	bne.w	8015fca <_strtod_l+0x45a>
 8016670:	a307      	add	r3, pc, #28	; (adr r3, 8016690 <_strtod_l+0xb20>)
 8016672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016676:	4620      	mov	r0, r4
 8016678:	4629      	mov	r1, r5
 801667a:	f7ea f9df 	bl	8000a3c <__aeabi_dcmpgt>
 801667e:	2800      	cmp	r0, #0
 8016680:	f43f af76 	beq.w	8016570 <_strtod_l+0xa00>
 8016684:	e4a1      	b.n	8015fca <_strtod_l+0x45a>
 8016686:	bf00      	nop
 8016688:	94a03595 	.word	0x94a03595
 801668c:	3fdfffff 	.word	0x3fdfffff
 8016690:	35afe535 	.word	0x35afe535
 8016694:	3fe00000 	.word	0x3fe00000
 8016698:	000fffff 	.word	0x000fffff
 801669c:	7ff00000 	.word	0x7ff00000
 80166a0:	7fefffff 	.word	0x7fefffff
 80166a4:	39500000 	.word	0x39500000
 80166a8:	3ff00000 	.word	0x3ff00000
 80166ac:	7fe00000 	.word	0x7fe00000
 80166b0:	7c9fffff 	.word	0x7c9fffff
 80166b4:	3fe00000 	.word	0x3fe00000
 80166b8:	bff00000 	.word	0xbff00000
 80166bc:	9b05      	ldr	r3, [sp, #20]
 80166be:	b313      	cbz	r3, 8016706 <_strtod_l+0xb96>
 80166c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80166c6:	d81e      	bhi.n	8016706 <_strtod_l+0xb96>
 80166c8:	a325      	add	r3, pc, #148	; (adr r3, 8016760 <_strtod_l+0xbf0>)
 80166ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ce:	4620      	mov	r0, r4
 80166d0:	4629      	mov	r1, r5
 80166d2:	f7ea f99f 	bl	8000a14 <__aeabi_dcmple>
 80166d6:	b190      	cbz	r0, 80166fe <_strtod_l+0xb8e>
 80166d8:	4629      	mov	r1, r5
 80166da:	4620      	mov	r0, r4
 80166dc:	f7ea f9f6 	bl	8000acc <__aeabi_d2uiz>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	bf08      	it	eq
 80166e4:	2001      	moveq	r0, #1
 80166e6:	f7e9 fe9f 	bl	8000428 <__aeabi_ui2d>
 80166ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166ec:	4604      	mov	r4, r0
 80166ee:	460d      	mov	r5, r1
 80166f0:	b9d3      	cbnz	r3, 8016728 <_strtod_l+0xbb8>
 80166f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80166f6:	9012      	str	r0, [sp, #72]	; 0x48
 80166f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80166fa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80166fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016700:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8016704:	1a9f      	subs	r7, r3, r2
 8016706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801670a:	f002 f821 	bl	8018750 <__ulp>
 801670e:	4602      	mov	r2, r0
 8016710:	460b      	mov	r3, r1
 8016712:	4630      	mov	r0, r6
 8016714:	4639      	mov	r1, r7
 8016716:	f7e9 ff01 	bl	800051c <__aeabi_dmul>
 801671a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801671e:	f7e9 fd47 	bl	80001b0 <__adddf3>
 8016722:	4681      	mov	r9, r0
 8016724:	468a      	mov	sl, r1
 8016726:	e777      	b.n	8016618 <_strtod_l+0xaa8>
 8016728:	4602      	mov	r2, r0
 801672a:	460b      	mov	r3, r1
 801672c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8016730:	e7e3      	b.n	80166fa <_strtod_l+0xb8a>
 8016732:	a30d      	add	r3, pc, #52	; (adr r3, 8016768 <_strtod_l+0xbf8>)
 8016734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016738:	f7ea f962 	bl	8000a00 <__aeabi_dcmplt>
 801673c:	e79f      	b.n	801667e <_strtod_l+0xb0e>
 801673e:	2300      	movs	r3, #0
 8016740:	930d      	str	r3, [sp, #52]	; 0x34
 8016742:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016744:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016746:	6013      	str	r3, [r2, #0]
 8016748:	f7ff ba55 	b.w	8015bf6 <_strtod_l+0x86>
 801674c:	2b65      	cmp	r3, #101	; 0x65
 801674e:	f04f 0200 	mov.w	r2, #0
 8016752:	f43f ab42 	beq.w	8015dda <_strtod_l+0x26a>
 8016756:	2101      	movs	r1, #1
 8016758:	4614      	mov	r4, r2
 801675a:	9105      	str	r1, [sp, #20]
 801675c:	f7ff babf 	b.w	8015cde <_strtod_l+0x16e>
 8016760:	ffc00000 	.word	0xffc00000
 8016764:	41dfffff 	.word	0x41dfffff
 8016768:	94a03595 	.word	0x94a03595
 801676c:	3fcfffff 	.word	0x3fcfffff

08016770 <_strtod_r>:
 8016770:	4b05      	ldr	r3, [pc, #20]	; (8016788 <_strtod_r+0x18>)
 8016772:	b410      	push	{r4}
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4c05      	ldr	r4, [pc, #20]	; (801678c <_strtod_r+0x1c>)
 8016778:	6a1b      	ldr	r3, [r3, #32]
 801677a:	2b00      	cmp	r3, #0
 801677c:	bf08      	it	eq
 801677e:	4623      	moveq	r3, r4
 8016780:	bc10      	pop	{r4}
 8016782:	f7ff b9f5 	b.w	8015b70 <_strtod_l>
 8016786:	bf00      	nop
 8016788:	20000148 	.word	0x20000148
 801678c:	200001ac 	.word	0x200001ac

08016790 <_strtol_l.isra.0>:
 8016790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016794:	4680      	mov	r8, r0
 8016796:	4689      	mov	r9, r1
 8016798:	4692      	mov	sl, r2
 801679a:	461e      	mov	r6, r3
 801679c:	460f      	mov	r7, r1
 801679e:	463d      	mov	r5, r7
 80167a0:	9808      	ldr	r0, [sp, #32]
 80167a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80167a6:	f001 fc49 	bl	801803c <__locale_ctype_ptr_l>
 80167aa:	4420      	add	r0, r4
 80167ac:	7843      	ldrb	r3, [r0, #1]
 80167ae:	f013 0308 	ands.w	r3, r3, #8
 80167b2:	d132      	bne.n	801681a <_strtol_l.isra.0+0x8a>
 80167b4:	2c2d      	cmp	r4, #45	; 0x2d
 80167b6:	d132      	bne.n	801681e <_strtol_l.isra.0+0x8e>
 80167b8:	2201      	movs	r2, #1
 80167ba:	787c      	ldrb	r4, [r7, #1]
 80167bc:	1cbd      	adds	r5, r7, #2
 80167be:	2e00      	cmp	r6, #0
 80167c0:	d05d      	beq.n	801687e <_strtol_l.isra.0+0xee>
 80167c2:	2e10      	cmp	r6, #16
 80167c4:	d109      	bne.n	80167da <_strtol_l.isra.0+0x4a>
 80167c6:	2c30      	cmp	r4, #48	; 0x30
 80167c8:	d107      	bne.n	80167da <_strtol_l.isra.0+0x4a>
 80167ca:	782b      	ldrb	r3, [r5, #0]
 80167cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80167d0:	2b58      	cmp	r3, #88	; 0x58
 80167d2:	d14f      	bne.n	8016874 <_strtol_l.isra.0+0xe4>
 80167d4:	2610      	movs	r6, #16
 80167d6:	786c      	ldrb	r4, [r5, #1]
 80167d8:	3502      	adds	r5, #2
 80167da:	2a00      	cmp	r2, #0
 80167dc:	bf14      	ite	ne
 80167de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80167e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80167e6:	2700      	movs	r7, #0
 80167e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80167ec:	4638      	mov	r0, r7
 80167ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80167f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80167f6:	2b09      	cmp	r3, #9
 80167f8:	d817      	bhi.n	801682a <_strtol_l.isra.0+0x9a>
 80167fa:	461c      	mov	r4, r3
 80167fc:	42a6      	cmp	r6, r4
 80167fe:	dd23      	ble.n	8016848 <_strtol_l.isra.0+0xb8>
 8016800:	1c7b      	adds	r3, r7, #1
 8016802:	d007      	beq.n	8016814 <_strtol_l.isra.0+0x84>
 8016804:	4584      	cmp	ip, r0
 8016806:	d31c      	bcc.n	8016842 <_strtol_l.isra.0+0xb2>
 8016808:	d101      	bne.n	801680e <_strtol_l.isra.0+0x7e>
 801680a:	45a6      	cmp	lr, r4
 801680c:	db19      	blt.n	8016842 <_strtol_l.isra.0+0xb2>
 801680e:	2701      	movs	r7, #1
 8016810:	fb00 4006 	mla	r0, r0, r6, r4
 8016814:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016818:	e7eb      	b.n	80167f2 <_strtol_l.isra.0+0x62>
 801681a:	462f      	mov	r7, r5
 801681c:	e7bf      	b.n	801679e <_strtol_l.isra.0+0xe>
 801681e:	2c2b      	cmp	r4, #43	; 0x2b
 8016820:	bf04      	itt	eq
 8016822:	1cbd      	addeq	r5, r7, #2
 8016824:	787c      	ldrbeq	r4, [r7, #1]
 8016826:	461a      	mov	r2, r3
 8016828:	e7c9      	b.n	80167be <_strtol_l.isra.0+0x2e>
 801682a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801682e:	2b19      	cmp	r3, #25
 8016830:	d801      	bhi.n	8016836 <_strtol_l.isra.0+0xa6>
 8016832:	3c37      	subs	r4, #55	; 0x37
 8016834:	e7e2      	b.n	80167fc <_strtol_l.isra.0+0x6c>
 8016836:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801683a:	2b19      	cmp	r3, #25
 801683c:	d804      	bhi.n	8016848 <_strtol_l.isra.0+0xb8>
 801683e:	3c57      	subs	r4, #87	; 0x57
 8016840:	e7dc      	b.n	80167fc <_strtol_l.isra.0+0x6c>
 8016842:	f04f 37ff 	mov.w	r7, #4294967295
 8016846:	e7e5      	b.n	8016814 <_strtol_l.isra.0+0x84>
 8016848:	1c7b      	adds	r3, r7, #1
 801684a:	d108      	bne.n	801685e <_strtol_l.isra.0+0xce>
 801684c:	2322      	movs	r3, #34	; 0x22
 801684e:	4608      	mov	r0, r1
 8016850:	f8c8 3000 	str.w	r3, [r8]
 8016854:	f1ba 0f00 	cmp.w	sl, #0
 8016858:	d107      	bne.n	801686a <_strtol_l.isra.0+0xda>
 801685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801685e:	b102      	cbz	r2, 8016862 <_strtol_l.isra.0+0xd2>
 8016860:	4240      	negs	r0, r0
 8016862:	f1ba 0f00 	cmp.w	sl, #0
 8016866:	d0f8      	beq.n	801685a <_strtol_l.isra.0+0xca>
 8016868:	b10f      	cbz	r7, 801686e <_strtol_l.isra.0+0xde>
 801686a:	f105 39ff 	add.w	r9, r5, #4294967295
 801686e:	f8ca 9000 	str.w	r9, [sl]
 8016872:	e7f2      	b.n	801685a <_strtol_l.isra.0+0xca>
 8016874:	2430      	movs	r4, #48	; 0x30
 8016876:	2e00      	cmp	r6, #0
 8016878:	d1af      	bne.n	80167da <_strtol_l.isra.0+0x4a>
 801687a:	2608      	movs	r6, #8
 801687c:	e7ad      	b.n	80167da <_strtol_l.isra.0+0x4a>
 801687e:	2c30      	cmp	r4, #48	; 0x30
 8016880:	d0a3      	beq.n	80167ca <_strtol_l.isra.0+0x3a>
 8016882:	260a      	movs	r6, #10
 8016884:	e7a9      	b.n	80167da <_strtol_l.isra.0+0x4a>
	...

08016888 <_strtol_r>:
 8016888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801688a:	4c06      	ldr	r4, [pc, #24]	; (80168a4 <_strtol_r+0x1c>)
 801688c:	4d06      	ldr	r5, [pc, #24]	; (80168a8 <_strtol_r+0x20>)
 801688e:	6824      	ldr	r4, [r4, #0]
 8016890:	6a24      	ldr	r4, [r4, #32]
 8016892:	2c00      	cmp	r4, #0
 8016894:	bf08      	it	eq
 8016896:	462c      	moveq	r4, r5
 8016898:	9400      	str	r4, [sp, #0]
 801689a:	f7ff ff79 	bl	8016790 <_strtol_l.isra.0>
 801689e:	b003      	add	sp, #12
 80168a0:	bd30      	pop	{r4, r5, pc}
 80168a2:	bf00      	nop
 80168a4:	20000148 	.word	0x20000148
 80168a8:	200001ac 	.word	0x200001ac

080168ac <__swbuf_r>:
 80168ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ae:	460e      	mov	r6, r1
 80168b0:	4614      	mov	r4, r2
 80168b2:	4605      	mov	r5, r0
 80168b4:	b118      	cbz	r0, 80168be <__swbuf_r+0x12>
 80168b6:	6983      	ldr	r3, [r0, #24]
 80168b8:	b90b      	cbnz	r3, 80168be <__swbuf_r+0x12>
 80168ba:	f001 f80d 	bl	80178d8 <__sinit>
 80168be:	4b21      	ldr	r3, [pc, #132]	; (8016944 <__swbuf_r+0x98>)
 80168c0:	429c      	cmp	r4, r3
 80168c2:	d12a      	bne.n	801691a <__swbuf_r+0x6e>
 80168c4:	686c      	ldr	r4, [r5, #4]
 80168c6:	69a3      	ldr	r3, [r4, #24]
 80168c8:	60a3      	str	r3, [r4, #8]
 80168ca:	89a3      	ldrh	r3, [r4, #12]
 80168cc:	071a      	lsls	r2, r3, #28
 80168ce:	d52e      	bpl.n	801692e <__swbuf_r+0x82>
 80168d0:	6923      	ldr	r3, [r4, #16]
 80168d2:	b363      	cbz	r3, 801692e <__swbuf_r+0x82>
 80168d4:	6923      	ldr	r3, [r4, #16]
 80168d6:	6820      	ldr	r0, [r4, #0]
 80168d8:	b2f6      	uxtb	r6, r6
 80168da:	1ac0      	subs	r0, r0, r3
 80168dc:	6963      	ldr	r3, [r4, #20]
 80168de:	4637      	mov	r7, r6
 80168e0:	4283      	cmp	r3, r0
 80168e2:	dc04      	bgt.n	80168ee <__swbuf_r+0x42>
 80168e4:	4621      	mov	r1, r4
 80168e6:	4628      	mov	r0, r5
 80168e8:	f000 ff8c 	bl	8017804 <_fflush_r>
 80168ec:	bb28      	cbnz	r0, 801693a <__swbuf_r+0x8e>
 80168ee:	68a3      	ldr	r3, [r4, #8]
 80168f0:	3001      	adds	r0, #1
 80168f2:	3b01      	subs	r3, #1
 80168f4:	60a3      	str	r3, [r4, #8]
 80168f6:	6823      	ldr	r3, [r4, #0]
 80168f8:	1c5a      	adds	r2, r3, #1
 80168fa:	6022      	str	r2, [r4, #0]
 80168fc:	701e      	strb	r6, [r3, #0]
 80168fe:	6963      	ldr	r3, [r4, #20]
 8016900:	4283      	cmp	r3, r0
 8016902:	d004      	beq.n	801690e <__swbuf_r+0x62>
 8016904:	89a3      	ldrh	r3, [r4, #12]
 8016906:	07db      	lsls	r3, r3, #31
 8016908:	d519      	bpl.n	801693e <__swbuf_r+0x92>
 801690a:	2e0a      	cmp	r6, #10
 801690c:	d117      	bne.n	801693e <__swbuf_r+0x92>
 801690e:	4621      	mov	r1, r4
 8016910:	4628      	mov	r0, r5
 8016912:	f000 ff77 	bl	8017804 <_fflush_r>
 8016916:	b190      	cbz	r0, 801693e <__swbuf_r+0x92>
 8016918:	e00f      	b.n	801693a <__swbuf_r+0x8e>
 801691a:	4b0b      	ldr	r3, [pc, #44]	; (8016948 <__swbuf_r+0x9c>)
 801691c:	429c      	cmp	r4, r3
 801691e:	d101      	bne.n	8016924 <__swbuf_r+0x78>
 8016920:	68ac      	ldr	r4, [r5, #8]
 8016922:	e7d0      	b.n	80168c6 <__swbuf_r+0x1a>
 8016924:	4b09      	ldr	r3, [pc, #36]	; (801694c <__swbuf_r+0xa0>)
 8016926:	429c      	cmp	r4, r3
 8016928:	bf08      	it	eq
 801692a:	68ec      	ldreq	r4, [r5, #12]
 801692c:	e7cb      	b.n	80168c6 <__swbuf_r+0x1a>
 801692e:	4621      	mov	r1, r4
 8016930:	4628      	mov	r0, r5
 8016932:	f000 f81f 	bl	8016974 <__swsetup_r>
 8016936:	2800      	cmp	r0, #0
 8016938:	d0cc      	beq.n	80168d4 <__swbuf_r+0x28>
 801693a:	f04f 37ff 	mov.w	r7, #4294967295
 801693e:	4638      	mov	r0, r7
 8016940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016942:	bf00      	nop
 8016944:	0801e3e0 	.word	0x0801e3e0
 8016948:	0801e400 	.word	0x0801e400
 801694c:	0801e3c0 	.word	0x0801e3c0

08016950 <_write_r>:
 8016950:	b538      	push	{r3, r4, r5, lr}
 8016952:	4605      	mov	r5, r0
 8016954:	4608      	mov	r0, r1
 8016956:	4611      	mov	r1, r2
 8016958:	2200      	movs	r2, #0
 801695a:	4c05      	ldr	r4, [pc, #20]	; (8016970 <_write_r+0x20>)
 801695c:	6022      	str	r2, [r4, #0]
 801695e:	461a      	mov	r2, r3
 8016960:	f7ed f9ab 	bl	8003cba <_write>
 8016964:	1c43      	adds	r3, r0, #1
 8016966:	d102      	bne.n	801696e <_write_r+0x1e>
 8016968:	6823      	ldr	r3, [r4, #0]
 801696a:	b103      	cbz	r3, 801696e <_write_r+0x1e>
 801696c:	602b      	str	r3, [r5, #0]
 801696e:	bd38      	pop	{r3, r4, r5, pc}
 8016970:	20009e00 	.word	0x20009e00

08016974 <__swsetup_r>:
 8016974:	4b32      	ldr	r3, [pc, #200]	; (8016a40 <__swsetup_r+0xcc>)
 8016976:	b570      	push	{r4, r5, r6, lr}
 8016978:	681d      	ldr	r5, [r3, #0]
 801697a:	4606      	mov	r6, r0
 801697c:	460c      	mov	r4, r1
 801697e:	b125      	cbz	r5, 801698a <__swsetup_r+0x16>
 8016980:	69ab      	ldr	r3, [r5, #24]
 8016982:	b913      	cbnz	r3, 801698a <__swsetup_r+0x16>
 8016984:	4628      	mov	r0, r5
 8016986:	f000 ffa7 	bl	80178d8 <__sinit>
 801698a:	4b2e      	ldr	r3, [pc, #184]	; (8016a44 <__swsetup_r+0xd0>)
 801698c:	429c      	cmp	r4, r3
 801698e:	d10f      	bne.n	80169b0 <__swsetup_r+0x3c>
 8016990:	686c      	ldr	r4, [r5, #4]
 8016992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016996:	b29a      	uxth	r2, r3
 8016998:	0715      	lsls	r5, r2, #28
 801699a:	d42c      	bmi.n	80169f6 <__swsetup_r+0x82>
 801699c:	06d0      	lsls	r0, r2, #27
 801699e:	d411      	bmi.n	80169c4 <__swsetup_r+0x50>
 80169a0:	2209      	movs	r2, #9
 80169a2:	6032      	str	r2, [r6, #0]
 80169a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169a8:	81a3      	strh	r3, [r4, #12]
 80169aa:	f04f 30ff 	mov.w	r0, #4294967295
 80169ae:	e03e      	b.n	8016a2e <__swsetup_r+0xba>
 80169b0:	4b25      	ldr	r3, [pc, #148]	; (8016a48 <__swsetup_r+0xd4>)
 80169b2:	429c      	cmp	r4, r3
 80169b4:	d101      	bne.n	80169ba <__swsetup_r+0x46>
 80169b6:	68ac      	ldr	r4, [r5, #8]
 80169b8:	e7eb      	b.n	8016992 <__swsetup_r+0x1e>
 80169ba:	4b24      	ldr	r3, [pc, #144]	; (8016a4c <__swsetup_r+0xd8>)
 80169bc:	429c      	cmp	r4, r3
 80169be:	bf08      	it	eq
 80169c0:	68ec      	ldreq	r4, [r5, #12]
 80169c2:	e7e6      	b.n	8016992 <__swsetup_r+0x1e>
 80169c4:	0751      	lsls	r1, r2, #29
 80169c6:	d512      	bpl.n	80169ee <__swsetup_r+0x7a>
 80169c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169ca:	b141      	cbz	r1, 80169de <__swsetup_r+0x6a>
 80169cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169d0:	4299      	cmp	r1, r3
 80169d2:	d002      	beq.n	80169da <__swsetup_r+0x66>
 80169d4:	4630      	mov	r0, r6
 80169d6:	f001 fff7 	bl	80189c8 <_free_r>
 80169da:	2300      	movs	r3, #0
 80169dc:	6363      	str	r3, [r4, #52]	; 0x34
 80169de:	89a3      	ldrh	r3, [r4, #12]
 80169e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80169e4:	81a3      	strh	r3, [r4, #12]
 80169e6:	2300      	movs	r3, #0
 80169e8:	6063      	str	r3, [r4, #4]
 80169ea:	6923      	ldr	r3, [r4, #16]
 80169ec:	6023      	str	r3, [r4, #0]
 80169ee:	89a3      	ldrh	r3, [r4, #12]
 80169f0:	f043 0308 	orr.w	r3, r3, #8
 80169f4:	81a3      	strh	r3, [r4, #12]
 80169f6:	6923      	ldr	r3, [r4, #16]
 80169f8:	b94b      	cbnz	r3, 8016a0e <__swsetup_r+0x9a>
 80169fa:	89a3      	ldrh	r3, [r4, #12]
 80169fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a04:	d003      	beq.n	8016a0e <__swsetup_r+0x9a>
 8016a06:	4621      	mov	r1, r4
 8016a08:	4630      	mov	r0, r6
 8016a0a:	f001 fb6f 	bl	80180ec <__smakebuf_r>
 8016a0e:	89a2      	ldrh	r2, [r4, #12]
 8016a10:	f012 0301 	ands.w	r3, r2, #1
 8016a14:	d00c      	beq.n	8016a30 <__swsetup_r+0xbc>
 8016a16:	2300      	movs	r3, #0
 8016a18:	60a3      	str	r3, [r4, #8]
 8016a1a:	6963      	ldr	r3, [r4, #20]
 8016a1c:	425b      	negs	r3, r3
 8016a1e:	61a3      	str	r3, [r4, #24]
 8016a20:	6923      	ldr	r3, [r4, #16]
 8016a22:	b953      	cbnz	r3, 8016a3a <__swsetup_r+0xc6>
 8016a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016a2c:	d1ba      	bne.n	80169a4 <__swsetup_r+0x30>
 8016a2e:	bd70      	pop	{r4, r5, r6, pc}
 8016a30:	0792      	lsls	r2, r2, #30
 8016a32:	bf58      	it	pl
 8016a34:	6963      	ldrpl	r3, [r4, #20]
 8016a36:	60a3      	str	r3, [r4, #8]
 8016a38:	e7f2      	b.n	8016a20 <__swsetup_r+0xac>
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	e7f7      	b.n	8016a2e <__swsetup_r+0xba>
 8016a3e:	bf00      	nop
 8016a40:	20000148 	.word	0x20000148
 8016a44:	0801e3e0 	.word	0x0801e3e0
 8016a48:	0801e400 	.word	0x0801e400
 8016a4c:	0801e3c0 	.word	0x0801e3c0

08016a50 <_close_r>:
 8016a50:	b538      	push	{r3, r4, r5, lr}
 8016a52:	2300      	movs	r3, #0
 8016a54:	4c05      	ldr	r4, [pc, #20]	; (8016a6c <_close_r+0x1c>)
 8016a56:	4605      	mov	r5, r0
 8016a58:	4608      	mov	r0, r1
 8016a5a:	6023      	str	r3, [r4, #0]
 8016a5c:	f7ed f949 	bl	8003cf2 <_close>
 8016a60:	1c43      	adds	r3, r0, #1
 8016a62:	d102      	bne.n	8016a6a <_close_r+0x1a>
 8016a64:	6823      	ldr	r3, [r4, #0]
 8016a66:	b103      	cbz	r3, 8016a6a <_close_r+0x1a>
 8016a68:	602b      	str	r3, [r5, #0]
 8016a6a:	bd38      	pop	{r3, r4, r5, pc}
 8016a6c:	20009e00 	.word	0x20009e00

08016a70 <quorem>:
 8016a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a74:	6903      	ldr	r3, [r0, #16]
 8016a76:	690c      	ldr	r4, [r1, #16]
 8016a78:	4680      	mov	r8, r0
 8016a7a:	42a3      	cmp	r3, r4
 8016a7c:	f2c0 8084 	blt.w	8016b88 <quorem+0x118>
 8016a80:	3c01      	subs	r4, #1
 8016a82:	f101 0714 	add.w	r7, r1, #20
 8016a86:	f100 0614 	add.w	r6, r0, #20
 8016a8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016a8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016a92:	3501      	adds	r5, #1
 8016a94:	fbb0 f5f5 	udiv	r5, r0, r5
 8016a98:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016a9c:	eb06 030c 	add.w	r3, r6, ip
 8016aa0:	eb07 090c 	add.w	r9, r7, ip
 8016aa4:	9301      	str	r3, [sp, #4]
 8016aa6:	b39d      	cbz	r5, 8016b10 <quorem+0xa0>
 8016aa8:	f04f 0a00 	mov.w	sl, #0
 8016aac:	4638      	mov	r0, r7
 8016aae:	46b6      	mov	lr, r6
 8016ab0:	46d3      	mov	fp, sl
 8016ab2:	f850 2b04 	ldr.w	r2, [r0], #4
 8016ab6:	b293      	uxth	r3, r2
 8016ab8:	fb05 a303 	mla	r3, r5, r3, sl
 8016abc:	0c12      	lsrs	r2, r2, #16
 8016abe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016ac2:	fb05 a202 	mla	r2, r5, r2, sl
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	ebab 0303 	sub.w	r3, fp, r3
 8016acc:	f8de b000 	ldr.w	fp, [lr]
 8016ad0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016ad4:	fa1f fb8b 	uxth.w	fp, fp
 8016ad8:	445b      	add	r3, fp
 8016ada:	fa1f fb82 	uxth.w	fp, r2
 8016ade:	f8de 2000 	ldr.w	r2, [lr]
 8016ae2:	4581      	cmp	r9, r0
 8016ae4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016aec:	b29b      	uxth	r3, r3
 8016aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016af2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016af6:	f84e 3b04 	str.w	r3, [lr], #4
 8016afa:	d2da      	bcs.n	8016ab2 <quorem+0x42>
 8016afc:	f856 300c 	ldr.w	r3, [r6, ip]
 8016b00:	b933      	cbnz	r3, 8016b10 <quorem+0xa0>
 8016b02:	9b01      	ldr	r3, [sp, #4]
 8016b04:	3b04      	subs	r3, #4
 8016b06:	429e      	cmp	r6, r3
 8016b08:	461a      	mov	r2, r3
 8016b0a:	d331      	bcc.n	8016b70 <quorem+0x100>
 8016b0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016b10:	4640      	mov	r0, r8
 8016b12:	f001 fda5 	bl	8018660 <__mcmp>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	db26      	blt.n	8016b68 <quorem+0xf8>
 8016b1a:	4630      	mov	r0, r6
 8016b1c:	f04f 0c00 	mov.w	ip, #0
 8016b20:	3501      	adds	r5, #1
 8016b22:	f857 1b04 	ldr.w	r1, [r7], #4
 8016b26:	f8d0 e000 	ldr.w	lr, [r0]
 8016b2a:	b28b      	uxth	r3, r1
 8016b2c:	ebac 0303 	sub.w	r3, ip, r3
 8016b30:	fa1f f28e 	uxth.w	r2, lr
 8016b34:	4413      	add	r3, r2
 8016b36:	0c0a      	lsrs	r2, r1, #16
 8016b38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b46:	45b9      	cmp	r9, r7
 8016b48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016b4c:	f840 3b04 	str.w	r3, [r0], #4
 8016b50:	d2e7      	bcs.n	8016b22 <quorem+0xb2>
 8016b52:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016b56:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016b5a:	b92a      	cbnz	r2, 8016b68 <quorem+0xf8>
 8016b5c:	3b04      	subs	r3, #4
 8016b5e:	429e      	cmp	r6, r3
 8016b60:	461a      	mov	r2, r3
 8016b62:	d30b      	bcc.n	8016b7c <quorem+0x10c>
 8016b64:	f8c8 4010 	str.w	r4, [r8, #16]
 8016b68:	4628      	mov	r0, r5
 8016b6a:	b003      	add	sp, #12
 8016b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b70:	6812      	ldr	r2, [r2, #0]
 8016b72:	3b04      	subs	r3, #4
 8016b74:	2a00      	cmp	r2, #0
 8016b76:	d1c9      	bne.n	8016b0c <quorem+0x9c>
 8016b78:	3c01      	subs	r4, #1
 8016b7a:	e7c4      	b.n	8016b06 <quorem+0x96>
 8016b7c:	6812      	ldr	r2, [r2, #0]
 8016b7e:	3b04      	subs	r3, #4
 8016b80:	2a00      	cmp	r2, #0
 8016b82:	d1ef      	bne.n	8016b64 <quorem+0xf4>
 8016b84:	3c01      	subs	r4, #1
 8016b86:	e7ea      	b.n	8016b5e <quorem+0xee>
 8016b88:	2000      	movs	r0, #0
 8016b8a:	e7ee      	b.n	8016b6a <quorem+0xfa>
 8016b8c:	0000      	movs	r0, r0
	...

08016b90 <_dtoa_r>:
 8016b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b94:	4616      	mov	r6, r2
 8016b96:	461f      	mov	r7, r3
 8016b98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016b9a:	b095      	sub	sp, #84	; 0x54
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8016ba2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8016ba6:	b93d      	cbnz	r5, 8016bb8 <_dtoa_r+0x28>
 8016ba8:	2010      	movs	r0, #16
 8016baa:	f001 fadf 	bl	801816c <malloc>
 8016bae:	6260      	str	r0, [r4, #36]	; 0x24
 8016bb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016bb4:	6005      	str	r5, [r0, #0]
 8016bb6:	60c5      	str	r5, [r0, #12]
 8016bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bba:	6819      	ldr	r1, [r3, #0]
 8016bbc:	b151      	cbz	r1, 8016bd4 <_dtoa_r+0x44>
 8016bbe:	685a      	ldr	r2, [r3, #4]
 8016bc0:	2301      	movs	r3, #1
 8016bc2:	4093      	lsls	r3, r2
 8016bc4:	604a      	str	r2, [r1, #4]
 8016bc6:	608b      	str	r3, [r1, #8]
 8016bc8:	4620      	mov	r0, r4
 8016bca:	f001 fb2b 	bl	8018224 <_Bfree>
 8016bce:	2200      	movs	r2, #0
 8016bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bd2:	601a      	str	r2, [r3, #0]
 8016bd4:	1e3b      	subs	r3, r7, #0
 8016bd6:	bfaf      	iteee	ge
 8016bd8:	2300      	movge	r3, #0
 8016bda:	2201      	movlt	r2, #1
 8016bdc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016be0:	9303      	strlt	r3, [sp, #12]
 8016be2:	bfac      	ite	ge
 8016be4:	f8c8 3000 	strge.w	r3, [r8]
 8016be8:	f8c8 2000 	strlt.w	r2, [r8]
 8016bec:	4bae      	ldr	r3, [pc, #696]	; (8016ea8 <_dtoa_r+0x318>)
 8016bee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016bf2:	ea33 0308 	bics.w	r3, r3, r8
 8016bf6:	d11b      	bne.n	8016c30 <_dtoa_r+0xa0>
 8016bf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8016bfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016bfe:	6013      	str	r3, [r2, #0]
 8016c00:	9b02      	ldr	r3, [sp, #8]
 8016c02:	b923      	cbnz	r3, 8016c0e <_dtoa_r+0x7e>
 8016c04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	f000 8545 	beq.w	8017698 <_dtoa_r+0xb08>
 8016c0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016c10:	b953      	cbnz	r3, 8016c28 <_dtoa_r+0x98>
 8016c12:	4ba6      	ldr	r3, [pc, #664]	; (8016eac <_dtoa_r+0x31c>)
 8016c14:	e021      	b.n	8016c5a <_dtoa_r+0xca>
 8016c16:	4ba6      	ldr	r3, [pc, #664]	; (8016eb0 <_dtoa_r+0x320>)
 8016c18:	9306      	str	r3, [sp, #24]
 8016c1a:	3308      	adds	r3, #8
 8016c1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016c1e:	6013      	str	r3, [r2, #0]
 8016c20:	9806      	ldr	r0, [sp, #24]
 8016c22:	b015      	add	sp, #84	; 0x54
 8016c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c28:	4ba0      	ldr	r3, [pc, #640]	; (8016eac <_dtoa_r+0x31c>)
 8016c2a:	9306      	str	r3, [sp, #24]
 8016c2c:	3303      	adds	r3, #3
 8016c2e:	e7f5      	b.n	8016c1c <_dtoa_r+0x8c>
 8016c30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016c34:	2200      	movs	r2, #0
 8016c36:	2300      	movs	r3, #0
 8016c38:	4630      	mov	r0, r6
 8016c3a:	4639      	mov	r1, r7
 8016c3c:	f7e9 fed6 	bl	80009ec <__aeabi_dcmpeq>
 8016c40:	4682      	mov	sl, r0
 8016c42:	b160      	cbz	r0, 8016c5e <_dtoa_r+0xce>
 8016c44:	2301      	movs	r3, #1
 8016c46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c48:	6013      	str	r3, [r2, #0]
 8016c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	f000 8520 	beq.w	8017692 <_dtoa_r+0xb02>
 8016c52:	4b98      	ldr	r3, [pc, #608]	; (8016eb4 <_dtoa_r+0x324>)
 8016c54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016c56:	6013      	str	r3, [r2, #0]
 8016c58:	3b01      	subs	r3, #1
 8016c5a:	9306      	str	r3, [sp, #24]
 8016c5c:	e7e0      	b.n	8016c20 <_dtoa_r+0x90>
 8016c5e:	ab12      	add	r3, sp, #72	; 0x48
 8016c60:	9301      	str	r3, [sp, #4]
 8016c62:	ab13      	add	r3, sp, #76	; 0x4c
 8016c64:	9300      	str	r3, [sp, #0]
 8016c66:	4632      	mov	r2, r6
 8016c68:	463b      	mov	r3, r7
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	f001 fde6 	bl	801883c <__d2b>
 8016c70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016c74:	4683      	mov	fp, r0
 8016c76:	2d00      	cmp	r5, #0
 8016c78:	d07d      	beq.n	8016d76 <_dtoa_r+0x1e6>
 8016c7a:	46b0      	mov	r8, r6
 8016c7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016c80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8016c84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8016c88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016c8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8016c90:	2200      	movs	r2, #0
 8016c92:	4b89      	ldr	r3, [pc, #548]	; (8016eb8 <_dtoa_r+0x328>)
 8016c94:	4640      	mov	r0, r8
 8016c96:	4649      	mov	r1, r9
 8016c98:	f7e9 fa88 	bl	80001ac <__aeabi_dsub>
 8016c9c:	a37c      	add	r3, pc, #496	; (adr r3, 8016e90 <_dtoa_r+0x300>)
 8016c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca2:	f7e9 fc3b 	bl	800051c <__aeabi_dmul>
 8016ca6:	a37c      	add	r3, pc, #496	; (adr r3, 8016e98 <_dtoa_r+0x308>)
 8016ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cac:	f7e9 fa80 	bl	80001b0 <__adddf3>
 8016cb0:	4606      	mov	r6, r0
 8016cb2:	4628      	mov	r0, r5
 8016cb4:	460f      	mov	r7, r1
 8016cb6:	f7e9 fbc7 	bl	8000448 <__aeabi_i2d>
 8016cba:	a379      	add	r3, pc, #484	; (adr r3, 8016ea0 <_dtoa_r+0x310>)
 8016cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc0:	f7e9 fc2c 	bl	800051c <__aeabi_dmul>
 8016cc4:	4602      	mov	r2, r0
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	4630      	mov	r0, r6
 8016cca:	4639      	mov	r1, r7
 8016ccc:	f7e9 fa70 	bl	80001b0 <__adddf3>
 8016cd0:	4606      	mov	r6, r0
 8016cd2:	460f      	mov	r7, r1
 8016cd4:	f7e9 fed2 	bl	8000a7c <__aeabi_d2iz>
 8016cd8:	2200      	movs	r2, #0
 8016cda:	4682      	mov	sl, r0
 8016cdc:	2300      	movs	r3, #0
 8016cde:	4630      	mov	r0, r6
 8016ce0:	4639      	mov	r1, r7
 8016ce2:	f7e9 fe8d 	bl	8000a00 <__aeabi_dcmplt>
 8016ce6:	b148      	cbz	r0, 8016cfc <_dtoa_r+0x16c>
 8016ce8:	4650      	mov	r0, sl
 8016cea:	f7e9 fbad 	bl	8000448 <__aeabi_i2d>
 8016cee:	4632      	mov	r2, r6
 8016cf0:	463b      	mov	r3, r7
 8016cf2:	f7e9 fe7b 	bl	80009ec <__aeabi_dcmpeq>
 8016cf6:	b908      	cbnz	r0, 8016cfc <_dtoa_r+0x16c>
 8016cf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cfc:	f1ba 0f16 	cmp.w	sl, #22
 8016d00:	d85a      	bhi.n	8016db8 <_dtoa_r+0x228>
 8016d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016d06:	496d      	ldr	r1, [pc, #436]	; (8016ebc <_dtoa_r+0x32c>)
 8016d08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d10:	f7e9 fe94 	bl	8000a3c <__aeabi_dcmpgt>
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d051      	beq.n	8016dbc <_dtoa_r+0x22c>
 8016d18:	2300      	movs	r3, #0
 8016d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8016d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d22:	1b5d      	subs	r5, r3, r5
 8016d24:	1e6b      	subs	r3, r5, #1
 8016d26:	9307      	str	r3, [sp, #28]
 8016d28:	bf43      	ittte	mi
 8016d2a:	2300      	movmi	r3, #0
 8016d2c:	f1c5 0901 	rsbmi	r9, r5, #1
 8016d30:	9307      	strmi	r3, [sp, #28]
 8016d32:	f04f 0900 	movpl.w	r9, #0
 8016d36:	f1ba 0f00 	cmp.w	sl, #0
 8016d3a:	db41      	blt.n	8016dc0 <_dtoa_r+0x230>
 8016d3c:	9b07      	ldr	r3, [sp, #28]
 8016d3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8016d42:	4453      	add	r3, sl
 8016d44:	9307      	str	r3, [sp, #28]
 8016d46:	2300      	movs	r3, #0
 8016d48:	9308      	str	r3, [sp, #32]
 8016d4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016d4c:	2b09      	cmp	r3, #9
 8016d4e:	f200 808f 	bhi.w	8016e70 <_dtoa_r+0x2e0>
 8016d52:	2b05      	cmp	r3, #5
 8016d54:	bfc4      	itt	gt
 8016d56:	3b04      	subgt	r3, #4
 8016d58:	931e      	strgt	r3, [sp, #120]	; 0x78
 8016d5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016d5c:	bfc8      	it	gt
 8016d5e:	2500      	movgt	r5, #0
 8016d60:	f1a3 0302 	sub.w	r3, r3, #2
 8016d64:	bfd8      	it	le
 8016d66:	2501      	movle	r5, #1
 8016d68:	2b03      	cmp	r3, #3
 8016d6a:	f200 808d 	bhi.w	8016e88 <_dtoa_r+0x2f8>
 8016d6e:	e8df f003 	tbb	[pc, r3]
 8016d72:	7d7b      	.short	0x7d7b
 8016d74:	6f2f      	.short	0x6f2f
 8016d76:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8016d7a:	441d      	add	r5, r3
 8016d7c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016d80:	2820      	cmp	r0, #32
 8016d82:	dd13      	ble.n	8016dac <_dtoa_r+0x21c>
 8016d84:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016d88:	9b02      	ldr	r3, [sp, #8]
 8016d8a:	fa08 f800 	lsl.w	r8, r8, r0
 8016d8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016d92:	fa23 f000 	lsr.w	r0, r3, r0
 8016d96:	ea48 0000 	orr.w	r0, r8, r0
 8016d9a:	f7e9 fb45 	bl	8000428 <__aeabi_ui2d>
 8016d9e:	2301      	movs	r3, #1
 8016da0:	4680      	mov	r8, r0
 8016da2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8016da6:	3d01      	subs	r5, #1
 8016da8:	9310      	str	r3, [sp, #64]	; 0x40
 8016daa:	e771      	b.n	8016c90 <_dtoa_r+0x100>
 8016dac:	9b02      	ldr	r3, [sp, #8]
 8016dae:	f1c0 0020 	rsb	r0, r0, #32
 8016db2:	fa03 f000 	lsl.w	r0, r3, r0
 8016db6:	e7f0      	b.n	8016d9a <_dtoa_r+0x20a>
 8016db8:	2301      	movs	r3, #1
 8016dba:	e7b0      	b.n	8016d1e <_dtoa_r+0x18e>
 8016dbc:	900d      	str	r0, [sp, #52]	; 0x34
 8016dbe:	e7af      	b.n	8016d20 <_dtoa_r+0x190>
 8016dc0:	f1ca 0300 	rsb	r3, sl, #0
 8016dc4:	9308      	str	r3, [sp, #32]
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	eba9 090a 	sub.w	r9, r9, sl
 8016dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8016dce:	e7bc      	b.n	8016d4a <_dtoa_r+0x1ba>
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8016dd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	dd74      	ble.n	8016ec4 <_dtoa_r+0x334>
 8016dda:	4698      	mov	r8, r3
 8016ddc:	9304      	str	r3, [sp, #16]
 8016dde:	2200      	movs	r2, #0
 8016de0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016de2:	6072      	str	r2, [r6, #4]
 8016de4:	2204      	movs	r2, #4
 8016de6:	f102 0014 	add.w	r0, r2, #20
 8016dea:	4298      	cmp	r0, r3
 8016dec:	6871      	ldr	r1, [r6, #4]
 8016dee:	d96e      	bls.n	8016ece <_dtoa_r+0x33e>
 8016df0:	4620      	mov	r0, r4
 8016df2:	f001 f9e3 	bl	80181bc <_Balloc>
 8016df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016df8:	6030      	str	r0, [r6, #0]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	f1b8 0f0e 	cmp.w	r8, #14
 8016e00:	9306      	str	r3, [sp, #24]
 8016e02:	f200 80ed 	bhi.w	8016fe0 <_dtoa_r+0x450>
 8016e06:	2d00      	cmp	r5, #0
 8016e08:	f000 80ea 	beq.w	8016fe0 <_dtoa_r+0x450>
 8016e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e10:	f1ba 0f00 	cmp.w	sl, #0
 8016e14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016e18:	dd77      	ble.n	8016f0a <_dtoa_r+0x37a>
 8016e1a:	4a28      	ldr	r2, [pc, #160]	; (8016ebc <_dtoa_r+0x32c>)
 8016e1c:	f00a 030f 	and.w	r3, sl, #15
 8016e20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016e24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016e28:	06f0      	lsls	r0, r6, #27
 8016e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016e32:	d568      	bpl.n	8016f06 <_dtoa_r+0x376>
 8016e34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016e38:	4b21      	ldr	r3, [pc, #132]	; (8016ec0 <_dtoa_r+0x330>)
 8016e3a:	2503      	movs	r5, #3
 8016e3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016e40:	f7e9 fc96 	bl	8000770 <__aeabi_ddiv>
 8016e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016e48:	f006 060f 	and.w	r6, r6, #15
 8016e4c:	4f1c      	ldr	r7, [pc, #112]	; (8016ec0 <_dtoa_r+0x330>)
 8016e4e:	e04f      	b.n	8016ef0 <_dtoa_r+0x360>
 8016e50:	2301      	movs	r3, #1
 8016e52:	9309      	str	r3, [sp, #36]	; 0x24
 8016e54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016e56:	4453      	add	r3, sl
 8016e58:	f103 0801 	add.w	r8, r3, #1
 8016e5c:	9304      	str	r3, [sp, #16]
 8016e5e:	4643      	mov	r3, r8
 8016e60:	2b01      	cmp	r3, #1
 8016e62:	bfb8      	it	lt
 8016e64:	2301      	movlt	r3, #1
 8016e66:	e7ba      	b.n	8016dde <_dtoa_r+0x24e>
 8016e68:	2300      	movs	r3, #0
 8016e6a:	e7b2      	b.n	8016dd2 <_dtoa_r+0x242>
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	e7f0      	b.n	8016e52 <_dtoa_r+0x2c2>
 8016e70:	2501      	movs	r5, #1
 8016e72:	2300      	movs	r3, #0
 8016e74:	9509      	str	r5, [sp, #36]	; 0x24
 8016e76:	931e      	str	r3, [sp, #120]	; 0x78
 8016e78:	f04f 33ff 	mov.w	r3, #4294967295
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	9304      	str	r3, [sp, #16]
 8016e80:	4698      	mov	r8, r3
 8016e82:	2312      	movs	r3, #18
 8016e84:	921f      	str	r2, [sp, #124]	; 0x7c
 8016e86:	e7aa      	b.n	8016dde <_dtoa_r+0x24e>
 8016e88:	2301      	movs	r3, #1
 8016e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8016e8c:	e7f4      	b.n	8016e78 <_dtoa_r+0x2e8>
 8016e8e:	bf00      	nop
 8016e90:	636f4361 	.word	0x636f4361
 8016e94:	3fd287a7 	.word	0x3fd287a7
 8016e98:	8b60c8b3 	.word	0x8b60c8b3
 8016e9c:	3fc68a28 	.word	0x3fc68a28
 8016ea0:	509f79fb 	.word	0x509f79fb
 8016ea4:	3fd34413 	.word	0x3fd34413
 8016ea8:	7ff00000 	.word	0x7ff00000
 8016eac:	0801e3b9 	.word	0x0801e3b9
 8016eb0:	0801e3b0 	.word	0x0801e3b0
 8016eb4:	0801e554 	.word	0x0801e554
 8016eb8:	3ff80000 	.word	0x3ff80000
 8016ebc:	0801e458 	.word	0x0801e458
 8016ec0:	0801e430 	.word	0x0801e430
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	9304      	str	r3, [sp, #16]
 8016ec8:	4698      	mov	r8, r3
 8016eca:	461a      	mov	r2, r3
 8016ecc:	e7da      	b.n	8016e84 <_dtoa_r+0x2f4>
 8016ece:	3101      	adds	r1, #1
 8016ed0:	6071      	str	r1, [r6, #4]
 8016ed2:	0052      	lsls	r2, r2, #1
 8016ed4:	e787      	b.n	8016de6 <_dtoa_r+0x256>
 8016ed6:	07f1      	lsls	r1, r6, #31
 8016ed8:	d508      	bpl.n	8016eec <_dtoa_r+0x35c>
 8016eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ee2:	f7e9 fb1b 	bl	800051c <__aeabi_dmul>
 8016ee6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016eea:	3501      	adds	r5, #1
 8016eec:	1076      	asrs	r6, r6, #1
 8016eee:	3708      	adds	r7, #8
 8016ef0:	2e00      	cmp	r6, #0
 8016ef2:	d1f0      	bne.n	8016ed6 <_dtoa_r+0x346>
 8016ef4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016efc:	f7e9 fc38 	bl	8000770 <__aeabi_ddiv>
 8016f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f04:	e01b      	b.n	8016f3e <_dtoa_r+0x3ae>
 8016f06:	2502      	movs	r5, #2
 8016f08:	e7a0      	b.n	8016e4c <_dtoa_r+0x2bc>
 8016f0a:	f000 80a4 	beq.w	8017056 <_dtoa_r+0x4c6>
 8016f0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016f12:	f1ca 0600 	rsb	r6, sl, #0
 8016f16:	4ba0      	ldr	r3, [pc, #640]	; (8017198 <_dtoa_r+0x608>)
 8016f18:	f006 020f 	and.w	r2, r6, #15
 8016f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f24:	f7e9 fafa 	bl	800051c <__aeabi_dmul>
 8016f28:	2502      	movs	r5, #2
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f30:	4f9a      	ldr	r7, [pc, #616]	; (801719c <_dtoa_r+0x60c>)
 8016f32:	1136      	asrs	r6, r6, #4
 8016f34:	2e00      	cmp	r6, #0
 8016f36:	f040 8083 	bne.w	8017040 <_dtoa_r+0x4b0>
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d1e0      	bne.n	8016f00 <_dtoa_r+0x370>
 8016f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	f000 808a 	beq.w	801705a <_dtoa_r+0x4ca>
 8016f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f4a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f52:	2200      	movs	r2, #0
 8016f54:	4b92      	ldr	r3, [pc, #584]	; (80171a0 <_dtoa_r+0x610>)
 8016f56:	f7e9 fd53 	bl	8000a00 <__aeabi_dcmplt>
 8016f5a:	2800      	cmp	r0, #0
 8016f5c:	d07d      	beq.n	801705a <_dtoa_r+0x4ca>
 8016f5e:	f1b8 0f00 	cmp.w	r8, #0
 8016f62:	d07a      	beq.n	801705a <_dtoa_r+0x4ca>
 8016f64:	9b04      	ldr	r3, [sp, #16]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	dd36      	ble.n	8016fd8 <_dtoa_r+0x448>
 8016f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f6e:	2200      	movs	r2, #0
 8016f70:	4b8c      	ldr	r3, [pc, #560]	; (80171a4 <_dtoa_r+0x614>)
 8016f72:	f7e9 fad3 	bl	800051c <__aeabi_dmul>
 8016f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f7a:	9e04      	ldr	r6, [sp, #16]
 8016f7c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8016f80:	3501      	adds	r5, #1
 8016f82:	4628      	mov	r0, r5
 8016f84:	f7e9 fa60 	bl	8000448 <__aeabi_i2d>
 8016f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f8c:	f7e9 fac6 	bl	800051c <__aeabi_dmul>
 8016f90:	2200      	movs	r2, #0
 8016f92:	4b85      	ldr	r3, [pc, #532]	; (80171a8 <_dtoa_r+0x618>)
 8016f94:	f7e9 f90c 	bl	80001b0 <__adddf3>
 8016f98:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8016f9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016fa0:	950b      	str	r5, [sp, #44]	; 0x2c
 8016fa2:	2e00      	cmp	r6, #0
 8016fa4:	d15c      	bne.n	8017060 <_dtoa_r+0x4d0>
 8016fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016faa:	2200      	movs	r2, #0
 8016fac:	4b7f      	ldr	r3, [pc, #508]	; (80171ac <_dtoa_r+0x61c>)
 8016fae:	f7e9 f8fd 	bl	80001ac <__aeabi_dsub>
 8016fb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016fb4:	462b      	mov	r3, r5
 8016fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016fba:	f7e9 fd3f 	bl	8000a3c <__aeabi_dcmpgt>
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	f040 8281 	bne.w	80174c6 <_dtoa_r+0x936>
 8016fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016fca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8016fce:	f7e9 fd17 	bl	8000a00 <__aeabi_dcmplt>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	f040 8275 	bne.w	80174c2 <_dtoa_r+0x932>
 8016fd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016fe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	f2c0 814b 	blt.w	801727e <_dtoa_r+0x6ee>
 8016fe8:	f1ba 0f0e 	cmp.w	sl, #14
 8016fec:	f300 8147 	bgt.w	801727e <_dtoa_r+0x6ee>
 8016ff0:	4b69      	ldr	r3, [pc, #420]	; (8017198 <_dtoa_r+0x608>)
 8016ff2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016ffe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017000:	2b00      	cmp	r3, #0
 8017002:	f280 80d7 	bge.w	80171b4 <_dtoa_r+0x624>
 8017006:	f1b8 0f00 	cmp.w	r8, #0
 801700a:	f300 80d3 	bgt.w	80171b4 <_dtoa_r+0x624>
 801700e:	f040 8257 	bne.w	80174c0 <_dtoa_r+0x930>
 8017012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017016:	2200      	movs	r2, #0
 8017018:	4b64      	ldr	r3, [pc, #400]	; (80171ac <_dtoa_r+0x61c>)
 801701a:	f7e9 fa7f 	bl	800051c <__aeabi_dmul>
 801701e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017022:	f7e9 fd01 	bl	8000a28 <__aeabi_dcmpge>
 8017026:	4646      	mov	r6, r8
 8017028:	4647      	mov	r7, r8
 801702a:	2800      	cmp	r0, #0
 801702c:	f040 822d 	bne.w	801748a <_dtoa_r+0x8fa>
 8017030:	9b06      	ldr	r3, [sp, #24]
 8017032:	9a06      	ldr	r2, [sp, #24]
 8017034:	1c5d      	adds	r5, r3, #1
 8017036:	2331      	movs	r3, #49	; 0x31
 8017038:	f10a 0a01 	add.w	sl, sl, #1
 801703c:	7013      	strb	r3, [r2, #0]
 801703e:	e228      	b.n	8017492 <_dtoa_r+0x902>
 8017040:	07f2      	lsls	r2, r6, #31
 8017042:	d505      	bpl.n	8017050 <_dtoa_r+0x4c0>
 8017044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017048:	f7e9 fa68 	bl	800051c <__aeabi_dmul>
 801704c:	2301      	movs	r3, #1
 801704e:	3501      	adds	r5, #1
 8017050:	1076      	asrs	r6, r6, #1
 8017052:	3708      	adds	r7, #8
 8017054:	e76e      	b.n	8016f34 <_dtoa_r+0x3a4>
 8017056:	2502      	movs	r5, #2
 8017058:	e771      	b.n	8016f3e <_dtoa_r+0x3ae>
 801705a:	4657      	mov	r7, sl
 801705c:	4646      	mov	r6, r8
 801705e:	e790      	b.n	8016f82 <_dtoa_r+0x3f2>
 8017060:	4b4d      	ldr	r3, [pc, #308]	; (8017198 <_dtoa_r+0x608>)
 8017062:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017066:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801706a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801706c:	2b00      	cmp	r3, #0
 801706e:	d048      	beq.n	8017102 <_dtoa_r+0x572>
 8017070:	4602      	mov	r2, r0
 8017072:	460b      	mov	r3, r1
 8017074:	2000      	movs	r0, #0
 8017076:	494e      	ldr	r1, [pc, #312]	; (80171b0 <_dtoa_r+0x620>)
 8017078:	f7e9 fb7a 	bl	8000770 <__aeabi_ddiv>
 801707c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017080:	f7e9 f894 	bl	80001ac <__aeabi_dsub>
 8017084:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017088:	9d06      	ldr	r5, [sp, #24]
 801708a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801708e:	f7e9 fcf5 	bl	8000a7c <__aeabi_d2iz>
 8017092:	9011      	str	r0, [sp, #68]	; 0x44
 8017094:	f7e9 f9d8 	bl	8000448 <__aeabi_i2d>
 8017098:	4602      	mov	r2, r0
 801709a:	460b      	mov	r3, r1
 801709c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170a0:	f7e9 f884 	bl	80001ac <__aeabi_dsub>
 80170a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170aa:	3330      	adds	r3, #48	; 0x30
 80170ac:	f805 3b01 	strb.w	r3, [r5], #1
 80170b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80170b4:	f7e9 fca4 	bl	8000a00 <__aeabi_dcmplt>
 80170b8:	2800      	cmp	r0, #0
 80170ba:	d163      	bne.n	8017184 <_dtoa_r+0x5f4>
 80170bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170c0:	2000      	movs	r0, #0
 80170c2:	4937      	ldr	r1, [pc, #220]	; (80171a0 <_dtoa_r+0x610>)
 80170c4:	f7e9 f872 	bl	80001ac <__aeabi_dsub>
 80170c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80170cc:	f7e9 fc98 	bl	8000a00 <__aeabi_dcmplt>
 80170d0:	2800      	cmp	r0, #0
 80170d2:	f040 80b5 	bne.w	8017240 <_dtoa_r+0x6b0>
 80170d6:	9b06      	ldr	r3, [sp, #24]
 80170d8:	1aeb      	subs	r3, r5, r3
 80170da:	429e      	cmp	r6, r3
 80170dc:	f77f af7c 	ble.w	8016fd8 <_dtoa_r+0x448>
 80170e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80170e4:	2200      	movs	r2, #0
 80170e6:	4b2f      	ldr	r3, [pc, #188]	; (80171a4 <_dtoa_r+0x614>)
 80170e8:	f7e9 fa18 	bl	800051c <__aeabi_dmul>
 80170ec:	2200      	movs	r2, #0
 80170ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80170f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170f6:	4b2b      	ldr	r3, [pc, #172]	; (80171a4 <_dtoa_r+0x614>)
 80170f8:	f7e9 fa10 	bl	800051c <__aeabi_dmul>
 80170fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017100:	e7c3      	b.n	801708a <_dtoa_r+0x4fa>
 8017102:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017106:	f7e9 fa09 	bl	800051c <__aeabi_dmul>
 801710a:	9b06      	ldr	r3, [sp, #24]
 801710c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017110:	199d      	adds	r5, r3, r6
 8017112:	461e      	mov	r6, r3
 8017114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017118:	f7e9 fcb0 	bl	8000a7c <__aeabi_d2iz>
 801711c:	9011      	str	r0, [sp, #68]	; 0x44
 801711e:	f7e9 f993 	bl	8000448 <__aeabi_i2d>
 8017122:	4602      	mov	r2, r0
 8017124:	460b      	mov	r3, r1
 8017126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801712a:	f7e9 f83f 	bl	80001ac <__aeabi_dsub>
 801712e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017134:	3330      	adds	r3, #48	; 0x30
 8017136:	f806 3b01 	strb.w	r3, [r6], #1
 801713a:	42ae      	cmp	r6, r5
 801713c:	f04f 0200 	mov.w	r2, #0
 8017140:	d124      	bne.n	801718c <_dtoa_r+0x5fc>
 8017142:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017146:	4b1a      	ldr	r3, [pc, #104]	; (80171b0 <_dtoa_r+0x620>)
 8017148:	f7e9 f832 	bl	80001b0 <__adddf3>
 801714c:	4602      	mov	r2, r0
 801714e:	460b      	mov	r3, r1
 8017150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017154:	f7e9 fc72 	bl	8000a3c <__aeabi_dcmpgt>
 8017158:	2800      	cmp	r0, #0
 801715a:	d171      	bne.n	8017240 <_dtoa_r+0x6b0>
 801715c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017160:	2000      	movs	r0, #0
 8017162:	4913      	ldr	r1, [pc, #76]	; (80171b0 <_dtoa_r+0x620>)
 8017164:	f7e9 f822 	bl	80001ac <__aeabi_dsub>
 8017168:	4602      	mov	r2, r0
 801716a:	460b      	mov	r3, r1
 801716c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017170:	f7e9 fc46 	bl	8000a00 <__aeabi_dcmplt>
 8017174:	2800      	cmp	r0, #0
 8017176:	f43f af2f 	beq.w	8016fd8 <_dtoa_r+0x448>
 801717a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801717e:	1e6a      	subs	r2, r5, #1
 8017180:	2b30      	cmp	r3, #48	; 0x30
 8017182:	d001      	beq.n	8017188 <_dtoa_r+0x5f8>
 8017184:	46ba      	mov	sl, r7
 8017186:	e04a      	b.n	801721e <_dtoa_r+0x68e>
 8017188:	4615      	mov	r5, r2
 801718a:	e7f6      	b.n	801717a <_dtoa_r+0x5ea>
 801718c:	4b05      	ldr	r3, [pc, #20]	; (80171a4 <_dtoa_r+0x614>)
 801718e:	f7e9 f9c5 	bl	800051c <__aeabi_dmul>
 8017192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017196:	e7bd      	b.n	8017114 <_dtoa_r+0x584>
 8017198:	0801e458 	.word	0x0801e458
 801719c:	0801e430 	.word	0x0801e430
 80171a0:	3ff00000 	.word	0x3ff00000
 80171a4:	40240000 	.word	0x40240000
 80171a8:	401c0000 	.word	0x401c0000
 80171ac:	40140000 	.word	0x40140000
 80171b0:	3fe00000 	.word	0x3fe00000
 80171b4:	9d06      	ldr	r5, [sp, #24]
 80171b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80171ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80171be:	4630      	mov	r0, r6
 80171c0:	4639      	mov	r1, r7
 80171c2:	f7e9 fad5 	bl	8000770 <__aeabi_ddiv>
 80171c6:	f7e9 fc59 	bl	8000a7c <__aeabi_d2iz>
 80171ca:	4681      	mov	r9, r0
 80171cc:	f7e9 f93c 	bl	8000448 <__aeabi_i2d>
 80171d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80171d4:	f7e9 f9a2 	bl	800051c <__aeabi_dmul>
 80171d8:	4602      	mov	r2, r0
 80171da:	460b      	mov	r3, r1
 80171dc:	4630      	mov	r0, r6
 80171de:	4639      	mov	r1, r7
 80171e0:	f7e8 ffe4 	bl	80001ac <__aeabi_dsub>
 80171e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80171e8:	f805 6b01 	strb.w	r6, [r5], #1
 80171ec:	9e06      	ldr	r6, [sp, #24]
 80171ee:	4602      	mov	r2, r0
 80171f0:	1bae      	subs	r6, r5, r6
 80171f2:	45b0      	cmp	r8, r6
 80171f4:	460b      	mov	r3, r1
 80171f6:	d135      	bne.n	8017264 <_dtoa_r+0x6d4>
 80171f8:	f7e8 ffda 	bl	80001b0 <__adddf3>
 80171fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017200:	4606      	mov	r6, r0
 8017202:	460f      	mov	r7, r1
 8017204:	f7e9 fc1a 	bl	8000a3c <__aeabi_dcmpgt>
 8017208:	b9c8      	cbnz	r0, 801723e <_dtoa_r+0x6ae>
 801720a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801720e:	4630      	mov	r0, r6
 8017210:	4639      	mov	r1, r7
 8017212:	f7e9 fbeb 	bl	80009ec <__aeabi_dcmpeq>
 8017216:	b110      	cbz	r0, 801721e <_dtoa_r+0x68e>
 8017218:	f019 0f01 	tst.w	r9, #1
 801721c:	d10f      	bne.n	801723e <_dtoa_r+0x6ae>
 801721e:	4659      	mov	r1, fp
 8017220:	4620      	mov	r0, r4
 8017222:	f000 ffff 	bl	8018224 <_Bfree>
 8017226:	2300      	movs	r3, #0
 8017228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801722a:	702b      	strb	r3, [r5, #0]
 801722c:	f10a 0301 	add.w	r3, sl, #1
 8017230:	6013      	str	r3, [r2, #0]
 8017232:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017234:	2b00      	cmp	r3, #0
 8017236:	f43f acf3 	beq.w	8016c20 <_dtoa_r+0x90>
 801723a:	601d      	str	r5, [r3, #0]
 801723c:	e4f0      	b.n	8016c20 <_dtoa_r+0x90>
 801723e:	4657      	mov	r7, sl
 8017240:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017244:	1e6b      	subs	r3, r5, #1
 8017246:	2a39      	cmp	r2, #57	; 0x39
 8017248:	d106      	bne.n	8017258 <_dtoa_r+0x6c8>
 801724a:	9a06      	ldr	r2, [sp, #24]
 801724c:	429a      	cmp	r2, r3
 801724e:	d107      	bne.n	8017260 <_dtoa_r+0x6d0>
 8017250:	2330      	movs	r3, #48	; 0x30
 8017252:	7013      	strb	r3, [r2, #0]
 8017254:	4613      	mov	r3, r2
 8017256:	3701      	adds	r7, #1
 8017258:	781a      	ldrb	r2, [r3, #0]
 801725a:	3201      	adds	r2, #1
 801725c:	701a      	strb	r2, [r3, #0]
 801725e:	e791      	b.n	8017184 <_dtoa_r+0x5f4>
 8017260:	461d      	mov	r5, r3
 8017262:	e7ed      	b.n	8017240 <_dtoa_r+0x6b0>
 8017264:	2200      	movs	r2, #0
 8017266:	4b99      	ldr	r3, [pc, #612]	; (80174cc <_dtoa_r+0x93c>)
 8017268:	f7e9 f958 	bl	800051c <__aeabi_dmul>
 801726c:	2200      	movs	r2, #0
 801726e:	2300      	movs	r3, #0
 8017270:	4606      	mov	r6, r0
 8017272:	460f      	mov	r7, r1
 8017274:	f7e9 fbba 	bl	80009ec <__aeabi_dcmpeq>
 8017278:	2800      	cmp	r0, #0
 801727a:	d09e      	beq.n	80171ba <_dtoa_r+0x62a>
 801727c:	e7cf      	b.n	801721e <_dtoa_r+0x68e>
 801727e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017280:	2a00      	cmp	r2, #0
 8017282:	f000 8088 	beq.w	8017396 <_dtoa_r+0x806>
 8017286:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017288:	2a01      	cmp	r2, #1
 801728a:	dc6d      	bgt.n	8017368 <_dtoa_r+0x7d8>
 801728c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801728e:	2a00      	cmp	r2, #0
 8017290:	d066      	beq.n	8017360 <_dtoa_r+0x7d0>
 8017292:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017296:	464d      	mov	r5, r9
 8017298:	9e08      	ldr	r6, [sp, #32]
 801729a:	9a07      	ldr	r2, [sp, #28]
 801729c:	2101      	movs	r1, #1
 801729e:	441a      	add	r2, r3
 80172a0:	4620      	mov	r0, r4
 80172a2:	4499      	add	r9, r3
 80172a4:	9207      	str	r2, [sp, #28]
 80172a6:	f001 f89b 	bl	80183e0 <__i2b>
 80172aa:	4607      	mov	r7, r0
 80172ac:	2d00      	cmp	r5, #0
 80172ae:	dd0b      	ble.n	80172c8 <_dtoa_r+0x738>
 80172b0:	9b07      	ldr	r3, [sp, #28]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	dd08      	ble.n	80172c8 <_dtoa_r+0x738>
 80172b6:	42ab      	cmp	r3, r5
 80172b8:	bfa8      	it	ge
 80172ba:	462b      	movge	r3, r5
 80172bc:	9a07      	ldr	r2, [sp, #28]
 80172be:	eba9 0903 	sub.w	r9, r9, r3
 80172c2:	1aed      	subs	r5, r5, r3
 80172c4:	1ad3      	subs	r3, r2, r3
 80172c6:	9307      	str	r3, [sp, #28]
 80172c8:	9b08      	ldr	r3, [sp, #32]
 80172ca:	b1eb      	cbz	r3, 8017308 <_dtoa_r+0x778>
 80172cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d065      	beq.n	801739e <_dtoa_r+0x80e>
 80172d2:	b18e      	cbz	r6, 80172f8 <_dtoa_r+0x768>
 80172d4:	4639      	mov	r1, r7
 80172d6:	4632      	mov	r2, r6
 80172d8:	4620      	mov	r0, r4
 80172da:	f001 f91f 	bl	801851c <__pow5mult>
 80172de:	465a      	mov	r2, fp
 80172e0:	4601      	mov	r1, r0
 80172e2:	4607      	mov	r7, r0
 80172e4:	4620      	mov	r0, r4
 80172e6:	f001 f884 	bl	80183f2 <__multiply>
 80172ea:	4659      	mov	r1, fp
 80172ec:	900a      	str	r0, [sp, #40]	; 0x28
 80172ee:	4620      	mov	r0, r4
 80172f0:	f000 ff98 	bl	8018224 <_Bfree>
 80172f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172f6:	469b      	mov	fp, r3
 80172f8:	9b08      	ldr	r3, [sp, #32]
 80172fa:	1b9a      	subs	r2, r3, r6
 80172fc:	d004      	beq.n	8017308 <_dtoa_r+0x778>
 80172fe:	4659      	mov	r1, fp
 8017300:	4620      	mov	r0, r4
 8017302:	f001 f90b 	bl	801851c <__pow5mult>
 8017306:	4683      	mov	fp, r0
 8017308:	2101      	movs	r1, #1
 801730a:	4620      	mov	r0, r4
 801730c:	f001 f868 	bl	80183e0 <__i2b>
 8017310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017312:	4606      	mov	r6, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	f000 81c6 	beq.w	80176a6 <_dtoa_r+0xb16>
 801731a:	461a      	mov	r2, r3
 801731c:	4601      	mov	r1, r0
 801731e:	4620      	mov	r0, r4
 8017320:	f001 f8fc 	bl	801851c <__pow5mult>
 8017324:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017326:	4606      	mov	r6, r0
 8017328:	2b01      	cmp	r3, #1
 801732a:	dc3e      	bgt.n	80173aa <_dtoa_r+0x81a>
 801732c:	9b02      	ldr	r3, [sp, #8]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d137      	bne.n	80173a2 <_dtoa_r+0x812>
 8017332:	9b03      	ldr	r3, [sp, #12]
 8017334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017338:	2b00      	cmp	r3, #0
 801733a:	d134      	bne.n	80173a6 <_dtoa_r+0x816>
 801733c:	9b03      	ldr	r3, [sp, #12]
 801733e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017342:	0d1b      	lsrs	r3, r3, #20
 8017344:	051b      	lsls	r3, r3, #20
 8017346:	b12b      	cbz	r3, 8017354 <_dtoa_r+0x7c4>
 8017348:	9b07      	ldr	r3, [sp, #28]
 801734a:	f109 0901 	add.w	r9, r9, #1
 801734e:	3301      	adds	r3, #1
 8017350:	9307      	str	r3, [sp, #28]
 8017352:	2301      	movs	r3, #1
 8017354:	9308      	str	r3, [sp, #32]
 8017356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017358:	2b00      	cmp	r3, #0
 801735a:	d128      	bne.n	80173ae <_dtoa_r+0x81e>
 801735c:	2001      	movs	r0, #1
 801735e:	e02e      	b.n	80173be <_dtoa_r+0x82e>
 8017360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017362:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017366:	e796      	b.n	8017296 <_dtoa_r+0x706>
 8017368:	9b08      	ldr	r3, [sp, #32]
 801736a:	f108 36ff 	add.w	r6, r8, #4294967295
 801736e:	42b3      	cmp	r3, r6
 8017370:	bfb7      	itett	lt
 8017372:	9b08      	ldrlt	r3, [sp, #32]
 8017374:	1b9e      	subge	r6, r3, r6
 8017376:	1af2      	sublt	r2, r6, r3
 8017378:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801737a:	bfbf      	itttt	lt
 801737c:	9608      	strlt	r6, [sp, #32]
 801737e:	189b      	addlt	r3, r3, r2
 8017380:	930c      	strlt	r3, [sp, #48]	; 0x30
 8017382:	2600      	movlt	r6, #0
 8017384:	f1b8 0f00 	cmp.w	r8, #0
 8017388:	bfb9      	ittee	lt
 801738a:	eba9 0508 	sublt.w	r5, r9, r8
 801738e:	2300      	movlt	r3, #0
 8017390:	464d      	movge	r5, r9
 8017392:	4643      	movge	r3, r8
 8017394:	e781      	b.n	801729a <_dtoa_r+0x70a>
 8017396:	9e08      	ldr	r6, [sp, #32]
 8017398:	464d      	mov	r5, r9
 801739a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801739c:	e786      	b.n	80172ac <_dtoa_r+0x71c>
 801739e:	9a08      	ldr	r2, [sp, #32]
 80173a0:	e7ad      	b.n	80172fe <_dtoa_r+0x76e>
 80173a2:	2300      	movs	r3, #0
 80173a4:	e7d6      	b.n	8017354 <_dtoa_r+0x7c4>
 80173a6:	9b02      	ldr	r3, [sp, #8]
 80173a8:	e7d4      	b.n	8017354 <_dtoa_r+0x7c4>
 80173aa:	2300      	movs	r3, #0
 80173ac:	9308      	str	r3, [sp, #32]
 80173ae:	6933      	ldr	r3, [r6, #16]
 80173b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80173b4:	6918      	ldr	r0, [r3, #16]
 80173b6:	f000 ffc5 	bl	8018344 <__hi0bits>
 80173ba:	f1c0 0020 	rsb	r0, r0, #32
 80173be:	9b07      	ldr	r3, [sp, #28]
 80173c0:	4418      	add	r0, r3
 80173c2:	f010 001f 	ands.w	r0, r0, #31
 80173c6:	d047      	beq.n	8017458 <_dtoa_r+0x8c8>
 80173c8:	f1c0 0320 	rsb	r3, r0, #32
 80173cc:	2b04      	cmp	r3, #4
 80173ce:	dd3b      	ble.n	8017448 <_dtoa_r+0x8b8>
 80173d0:	9b07      	ldr	r3, [sp, #28]
 80173d2:	f1c0 001c 	rsb	r0, r0, #28
 80173d6:	4481      	add	r9, r0
 80173d8:	4405      	add	r5, r0
 80173da:	4403      	add	r3, r0
 80173dc:	9307      	str	r3, [sp, #28]
 80173de:	f1b9 0f00 	cmp.w	r9, #0
 80173e2:	dd05      	ble.n	80173f0 <_dtoa_r+0x860>
 80173e4:	4659      	mov	r1, fp
 80173e6:	464a      	mov	r2, r9
 80173e8:	4620      	mov	r0, r4
 80173ea:	f001 f8e5 	bl	80185b8 <__lshift>
 80173ee:	4683      	mov	fp, r0
 80173f0:	9b07      	ldr	r3, [sp, #28]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	dd05      	ble.n	8017402 <_dtoa_r+0x872>
 80173f6:	4631      	mov	r1, r6
 80173f8:	461a      	mov	r2, r3
 80173fa:	4620      	mov	r0, r4
 80173fc:	f001 f8dc 	bl	80185b8 <__lshift>
 8017400:	4606      	mov	r6, r0
 8017402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017404:	b353      	cbz	r3, 801745c <_dtoa_r+0x8cc>
 8017406:	4631      	mov	r1, r6
 8017408:	4658      	mov	r0, fp
 801740a:	f001 f929 	bl	8018660 <__mcmp>
 801740e:	2800      	cmp	r0, #0
 8017410:	da24      	bge.n	801745c <_dtoa_r+0x8cc>
 8017412:	2300      	movs	r3, #0
 8017414:	4659      	mov	r1, fp
 8017416:	220a      	movs	r2, #10
 8017418:	4620      	mov	r0, r4
 801741a:	f000 ff1a 	bl	8018252 <__multadd>
 801741e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017420:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017424:	4683      	mov	fp, r0
 8017426:	2b00      	cmp	r3, #0
 8017428:	f000 8144 	beq.w	80176b4 <_dtoa_r+0xb24>
 801742c:	2300      	movs	r3, #0
 801742e:	4639      	mov	r1, r7
 8017430:	220a      	movs	r2, #10
 8017432:	4620      	mov	r0, r4
 8017434:	f000 ff0d 	bl	8018252 <__multadd>
 8017438:	9b04      	ldr	r3, [sp, #16]
 801743a:	4607      	mov	r7, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	dc4d      	bgt.n	80174dc <_dtoa_r+0x94c>
 8017440:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017442:	2b02      	cmp	r3, #2
 8017444:	dd4a      	ble.n	80174dc <_dtoa_r+0x94c>
 8017446:	e011      	b.n	801746c <_dtoa_r+0x8dc>
 8017448:	d0c9      	beq.n	80173de <_dtoa_r+0x84e>
 801744a:	9a07      	ldr	r2, [sp, #28]
 801744c:	331c      	adds	r3, #28
 801744e:	441a      	add	r2, r3
 8017450:	4499      	add	r9, r3
 8017452:	441d      	add	r5, r3
 8017454:	4613      	mov	r3, r2
 8017456:	e7c1      	b.n	80173dc <_dtoa_r+0x84c>
 8017458:	4603      	mov	r3, r0
 801745a:	e7f6      	b.n	801744a <_dtoa_r+0x8ba>
 801745c:	f1b8 0f00 	cmp.w	r8, #0
 8017460:	dc36      	bgt.n	80174d0 <_dtoa_r+0x940>
 8017462:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017464:	2b02      	cmp	r3, #2
 8017466:	dd33      	ble.n	80174d0 <_dtoa_r+0x940>
 8017468:	f8cd 8010 	str.w	r8, [sp, #16]
 801746c:	9b04      	ldr	r3, [sp, #16]
 801746e:	b963      	cbnz	r3, 801748a <_dtoa_r+0x8fa>
 8017470:	4631      	mov	r1, r6
 8017472:	2205      	movs	r2, #5
 8017474:	4620      	mov	r0, r4
 8017476:	f000 feec 	bl	8018252 <__multadd>
 801747a:	4601      	mov	r1, r0
 801747c:	4606      	mov	r6, r0
 801747e:	4658      	mov	r0, fp
 8017480:	f001 f8ee 	bl	8018660 <__mcmp>
 8017484:	2800      	cmp	r0, #0
 8017486:	f73f add3 	bgt.w	8017030 <_dtoa_r+0x4a0>
 801748a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801748c:	9d06      	ldr	r5, [sp, #24]
 801748e:	ea6f 0a03 	mvn.w	sl, r3
 8017492:	f04f 0900 	mov.w	r9, #0
 8017496:	4631      	mov	r1, r6
 8017498:	4620      	mov	r0, r4
 801749a:	f000 fec3 	bl	8018224 <_Bfree>
 801749e:	2f00      	cmp	r7, #0
 80174a0:	f43f aebd 	beq.w	801721e <_dtoa_r+0x68e>
 80174a4:	f1b9 0f00 	cmp.w	r9, #0
 80174a8:	d005      	beq.n	80174b6 <_dtoa_r+0x926>
 80174aa:	45b9      	cmp	r9, r7
 80174ac:	d003      	beq.n	80174b6 <_dtoa_r+0x926>
 80174ae:	4649      	mov	r1, r9
 80174b0:	4620      	mov	r0, r4
 80174b2:	f000 feb7 	bl	8018224 <_Bfree>
 80174b6:	4639      	mov	r1, r7
 80174b8:	4620      	mov	r0, r4
 80174ba:	f000 feb3 	bl	8018224 <_Bfree>
 80174be:	e6ae      	b.n	801721e <_dtoa_r+0x68e>
 80174c0:	2600      	movs	r6, #0
 80174c2:	4637      	mov	r7, r6
 80174c4:	e7e1      	b.n	801748a <_dtoa_r+0x8fa>
 80174c6:	46ba      	mov	sl, r7
 80174c8:	4637      	mov	r7, r6
 80174ca:	e5b1      	b.n	8017030 <_dtoa_r+0x4a0>
 80174cc:	40240000 	.word	0x40240000
 80174d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	f000 80f3 	beq.w	80176c2 <_dtoa_r+0xb32>
 80174dc:	2d00      	cmp	r5, #0
 80174de:	dd05      	ble.n	80174ec <_dtoa_r+0x95c>
 80174e0:	4639      	mov	r1, r7
 80174e2:	462a      	mov	r2, r5
 80174e4:	4620      	mov	r0, r4
 80174e6:	f001 f867 	bl	80185b8 <__lshift>
 80174ea:	4607      	mov	r7, r0
 80174ec:	9b08      	ldr	r3, [sp, #32]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d04c      	beq.n	801758c <_dtoa_r+0x9fc>
 80174f2:	6879      	ldr	r1, [r7, #4]
 80174f4:	4620      	mov	r0, r4
 80174f6:	f000 fe61 	bl	80181bc <_Balloc>
 80174fa:	4605      	mov	r5, r0
 80174fc:	693a      	ldr	r2, [r7, #16]
 80174fe:	f107 010c 	add.w	r1, r7, #12
 8017502:	3202      	adds	r2, #2
 8017504:	0092      	lsls	r2, r2, #2
 8017506:	300c      	adds	r0, #12
 8017508:	f7fd fb70 	bl	8014bec <memcpy>
 801750c:	2201      	movs	r2, #1
 801750e:	4629      	mov	r1, r5
 8017510:	4620      	mov	r0, r4
 8017512:	f001 f851 	bl	80185b8 <__lshift>
 8017516:	46b9      	mov	r9, r7
 8017518:	4607      	mov	r7, r0
 801751a:	9b06      	ldr	r3, [sp, #24]
 801751c:	9307      	str	r3, [sp, #28]
 801751e:	9b02      	ldr	r3, [sp, #8]
 8017520:	f003 0301 	and.w	r3, r3, #1
 8017524:	9308      	str	r3, [sp, #32]
 8017526:	4631      	mov	r1, r6
 8017528:	4658      	mov	r0, fp
 801752a:	f7ff faa1 	bl	8016a70 <quorem>
 801752e:	4649      	mov	r1, r9
 8017530:	4605      	mov	r5, r0
 8017532:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017536:	4658      	mov	r0, fp
 8017538:	f001 f892 	bl	8018660 <__mcmp>
 801753c:	463a      	mov	r2, r7
 801753e:	9002      	str	r0, [sp, #8]
 8017540:	4631      	mov	r1, r6
 8017542:	4620      	mov	r0, r4
 8017544:	f001 f8a6 	bl	8018694 <__mdiff>
 8017548:	68c3      	ldr	r3, [r0, #12]
 801754a:	4602      	mov	r2, r0
 801754c:	bb03      	cbnz	r3, 8017590 <_dtoa_r+0xa00>
 801754e:	4601      	mov	r1, r0
 8017550:	9009      	str	r0, [sp, #36]	; 0x24
 8017552:	4658      	mov	r0, fp
 8017554:	f001 f884 	bl	8018660 <__mcmp>
 8017558:	4603      	mov	r3, r0
 801755a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801755c:	4611      	mov	r1, r2
 801755e:	4620      	mov	r0, r4
 8017560:	9309      	str	r3, [sp, #36]	; 0x24
 8017562:	f000 fe5f 	bl	8018224 <_Bfree>
 8017566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017568:	b9a3      	cbnz	r3, 8017594 <_dtoa_r+0xa04>
 801756a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801756c:	b992      	cbnz	r2, 8017594 <_dtoa_r+0xa04>
 801756e:	9a08      	ldr	r2, [sp, #32]
 8017570:	b982      	cbnz	r2, 8017594 <_dtoa_r+0xa04>
 8017572:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017576:	d029      	beq.n	80175cc <_dtoa_r+0xa3c>
 8017578:	9b02      	ldr	r3, [sp, #8]
 801757a:	2b00      	cmp	r3, #0
 801757c:	dd01      	ble.n	8017582 <_dtoa_r+0x9f2>
 801757e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017582:	9b07      	ldr	r3, [sp, #28]
 8017584:	1c5d      	adds	r5, r3, #1
 8017586:	f883 8000 	strb.w	r8, [r3]
 801758a:	e784      	b.n	8017496 <_dtoa_r+0x906>
 801758c:	4638      	mov	r0, r7
 801758e:	e7c2      	b.n	8017516 <_dtoa_r+0x986>
 8017590:	2301      	movs	r3, #1
 8017592:	e7e3      	b.n	801755c <_dtoa_r+0x9cc>
 8017594:	9a02      	ldr	r2, [sp, #8]
 8017596:	2a00      	cmp	r2, #0
 8017598:	db04      	blt.n	80175a4 <_dtoa_r+0xa14>
 801759a:	d123      	bne.n	80175e4 <_dtoa_r+0xa54>
 801759c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801759e:	bb0a      	cbnz	r2, 80175e4 <_dtoa_r+0xa54>
 80175a0:	9a08      	ldr	r2, [sp, #32]
 80175a2:	b9fa      	cbnz	r2, 80175e4 <_dtoa_r+0xa54>
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	ddec      	ble.n	8017582 <_dtoa_r+0x9f2>
 80175a8:	4659      	mov	r1, fp
 80175aa:	2201      	movs	r2, #1
 80175ac:	4620      	mov	r0, r4
 80175ae:	f001 f803 	bl	80185b8 <__lshift>
 80175b2:	4631      	mov	r1, r6
 80175b4:	4683      	mov	fp, r0
 80175b6:	f001 f853 	bl	8018660 <__mcmp>
 80175ba:	2800      	cmp	r0, #0
 80175bc:	dc03      	bgt.n	80175c6 <_dtoa_r+0xa36>
 80175be:	d1e0      	bne.n	8017582 <_dtoa_r+0x9f2>
 80175c0:	f018 0f01 	tst.w	r8, #1
 80175c4:	d0dd      	beq.n	8017582 <_dtoa_r+0x9f2>
 80175c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80175ca:	d1d8      	bne.n	801757e <_dtoa_r+0x9ee>
 80175cc:	9b07      	ldr	r3, [sp, #28]
 80175ce:	9a07      	ldr	r2, [sp, #28]
 80175d0:	1c5d      	adds	r5, r3, #1
 80175d2:	2339      	movs	r3, #57	; 0x39
 80175d4:	7013      	strb	r3, [r2, #0]
 80175d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80175da:	1e6a      	subs	r2, r5, #1
 80175dc:	2b39      	cmp	r3, #57	; 0x39
 80175de:	d04d      	beq.n	801767c <_dtoa_r+0xaec>
 80175e0:	3301      	adds	r3, #1
 80175e2:	e052      	b.n	801768a <_dtoa_r+0xafa>
 80175e4:	9a07      	ldr	r2, [sp, #28]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	f102 0501 	add.w	r5, r2, #1
 80175ec:	dd06      	ble.n	80175fc <_dtoa_r+0xa6c>
 80175ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80175f2:	d0eb      	beq.n	80175cc <_dtoa_r+0xa3c>
 80175f4:	f108 0801 	add.w	r8, r8, #1
 80175f8:	9b07      	ldr	r3, [sp, #28]
 80175fa:	e7c4      	b.n	8017586 <_dtoa_r+0x9f6>
 80175fc:	9b06      	ldr	r3, [sp, #24]
 80175fe:	9a04      	ldr	r2, [sp, #16]
 8017600:	1aeb      	subs	r3, r5, r3
 8017602:	4293      	cmp	r3, r2
 8017604:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017608:	d021      	beq.n	801764e <_dtoa_r+0xabe>
 801760a:	4659      	mov	r1, fp
 801760c:	2300      	movs	r3, #0
 801760e:	220a      	movs	r2, #10
 8017610:	4620      	mov	r0, r4
 8017612:	f000 fe1e 	bl	8018252 <__multadd>
 8017616:	45b9      	cmp	r9, r7
 8017618:	4683      	mov	fp, r0
 801761a:	f04f 0300 	mov.w	r3, #0
 801761e:	f04f 020a 	mov.w	r2, #10
 8017622:	4649      	mov	r1, r9
 8017624:	4620      	mov	r0, r4
 8017626:	d105      	bne.n	8017634 <_dtoa_r+0xaa4>
 8017628:	f000 fe13 	bl	8018252 <__multadd>
 801762c:	4681      	mov	r9, r0
 801762e:	4607      	mov	r7, r0
 8017630:	9507      	str	r5, [sp, #28]
 8017632:	e778      	b.n	8017526 <_dtoa_r+0x996>
 8017634:	f000 fe0d 	bl	8018252 <__multadd>
 8017638:	4639      	mov	r1, r7
 801763a:	4681      	mov	r9, r0
 801763c:	2300      	movs	r3, #0
 801763e:	220a      	movs	r2, #10
 8017640:	4620      	mov	r0, r4
 8017642:	f000 fe06 	bl	8018252 <__multadd>
 8017646:	4607      	mov	r7, r0
 8017648:	e7f2      	b.n	8017630 <_dtoa_r+0xaa0>
 801764a:	f04f 0900 	mov.w	r9, #0
 801764e:	4659      	mov	r1, fp
 8017650:	2201      	movs	r2, #1
 8017652:	4620      	mov	r0, r4
 8017654:	f000 ffb0 	bl	80185b8 <__lshift>
 8017658:	4631      	mov	r1, r6
 801765a:	4683      	mov	fp, r0
 801765c:	f001 f800 	bl	8018660 <__mcmp>
 8017660:	2800      	cmp	r0, #0
 8017662:	dcb8      	bgt.n	80175d6 <_dtoa_r+0xa46>
 8017664:	d102      	bne.n	801766c <_dtoa_r+0xadc>
 8017666:	f018 0f01 	tst.w	r8, #1
 801766a:	d1b4      	bne.n	80175d6 <_dtoa_r+0xa46>
 801766c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017670:	1e6a      	subs	r2, r5, #1
 8017672:	2b30      	cmp	r3, #48	; 0x30
 8017674:	f47f af0f 	bne.w	8017496 <_dtoa_r+0x906>
 8017678:	4615      	mov	r5, r2
 801767a:	e7f7      	b.n	801766c <_dtoa_r+0xadc>
 801767c:	9b06      	ldr	r3, [sp, #24]
 801767e:	4293      	cmp	r3, r2
 8017680:	d105      	bne.n	801768e <_dtoa_r+0xafe>
 8017682:	2331      	movs	r3, #49	; 0x31
 8017684:	9a06      	ldr	r2, [sp, #24]
 8017686:	f10a 0a01 	add.w	sl, sl, #1
 801768a:	7013      	strb	r3, [r2, #0]
 801768c:	e703      	b.n	8017496 <_dtoa_r+0x906>
 801768e:	4615      	mov	r5, r2
 8017690:	e7a1      	b.n	80175d6 <_dtoa_r+0xa46>
 8017692:	4b17      	ldr	r3, [pc, #92]	; (80176f0 <_dtoa_r+0xb60>)
 8017694:	f7ff bae1 	b.w	8016c5a <_dtoa_r+0xca>
 8017698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801769a:	2b00      	cmp	r3, #0
 801769c:	f47f aabb 	bne.w	8016c16 <_dtoa_r+0x86>
 80176a0:	4b14      	ldr	r3, [pc, #80]	; (80176f4 <_dtoa_r+0xb64>)
 80176a2:	f7ff bada 	b.w	8016c5a <_dtoa_r+0xca>
 80176a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80176a8:	2b01      	cmp	r3, #1
 80176aa:	f77f ae3f 	ble.w	801732c <_dtoa_r+0x79c>
 80176ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176b0:	9308      	str	r3, [sp, #32]
 80176b2:	e653      	b.n	801735c <_dtoa_r+0x7cc>
 80176b4:	9b04      	ldr	r3, [sp, #16]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	dc03      	bgt.n	80176c2 <_dtoa_r+0xb32>
 80176ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80176bc:	2b02      	cmp	r3, #2
 80176be:	f73f aed5 	bgt.w	801746c <_dtoa_r+0x8dc>
 80176c2:	9d06      	ldr	r5, [sp, #24]
 80176c4:	4631      	mov	r1, r6
 80176c6:	4658      	mov	r0, fp
 80176c8:	f7ff f9d2 	bl	8016a70 <quorem>
 80176cc:	9b06      	ldr	r3, [sp, #24]
 80176ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80176d2:	f805 8b01 	strb.w	r8, [r5], #1
 80176d6:	9a04      	ldr	r2, [sp, #16]
 80176d8:	1aeb      	subs	r3, r5, r3
 80176da:	429a      	cmp	r2, r3
 80176dc:	ddb5      	ble.n	801764a <_dtoa_r+0xaba>
 80176de:	4659      	mov	r1, fp
 80176e0:	2300      	movs	r3, #0
 80176e2:	220a      	movs	r2, #10
 80176e4:	4620      	mov	r0, r4
 80176e6:	f000 fdb4 	bl	8018252 <__multadd>
 80176ea:	4683      	mov	fp, r0
 80176ec:	e7ea      	b.n	80176c4 <_dtoa_r+0xb34>
 80176ee:	bf00      	nop
 80176f0:	0801e553 	.word	0x0801e553
 80176f4:	0801e3b0 	.word	0x0801e3b0

080176f8 <__sflush_r>:
 80176f8:	898a      	ldrh	r2, [r1, #12]
 80176fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176fe:	4605      	mov	r5, r0
 8017700:	0710      	lsls	r0, r2, #28
 8017702:	460c      	mov	r4, r1
 8017704:	d458      	bmi.n	80177b8 <__sflush_r+0xc0>
 8017706:	684b      	ldr	r3, [r1, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	dc05      	bgt.n	8017718 <__sflush_r+0x20>
 801770c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801770e:	2b00      	cmp	r3, #0
 8017710:	dc02      	bgt.n	8017718 <__sflush_r+0x20>
 8017712:	2000      	movs	r0, #0
 8017714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801771a:	2e00      	cmp	r6, #0
 801771c:	d0f9      	beq.n	8017712 <__sflush_r+0x1a>
 801771e:	2300      	movs	r3, #0
 8017720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017724:	682f      	ldr	r7, [r5, #0]
 8017726:	6a21      	ldr	r1, [r4, #32]
 8017728:	602b      	str	r3, [r5, #0]
 801772a:	d032      	beq.n	8017792 <__sflush_r+0x9a>
 801772c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801772e:	89a3      	ldrh	r3, [r4, #12]
 8017730:	075a      	lsls	r2, r3, #29
 8017732:	d505      	bpl.n	8017740 <__sflush_r+0x48>
 8017734:	6863      	ldr	r3, [r4, #4]
 8017736:	1ac0      	subs	r0, r0, r3
 8017738:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801773a:	b10b      	cbz	r3, 8017740 <__sflush_r+0x48>
 801773c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801773e:	1ac0      	subs	r0, r0, r3
 8017740:	2300      	movs	r3, #0
 8017742:	4602      	mov	r2, r0
 8017744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017746:	6a21      	ldr	r1, [r4, #32]
 8017748:	4628      	mov	r0, r5
 801774a:	47b0      	blx	r6
 801774c:	1c43      	adds	r3, r0, #1
 801774e:	89a3      	ldrh	r3, [r4, #12]
 8017750:	d106      	bne.n	8017760 <__sflush_r+0x68>
 8017752:	6829      	ldr	r1, [r5, #0]
 8017754:	291d      	cmp	r1, #29
 8017756:	d848      	bhi.n	80177ea <__sflush_r+0xf2>
 8017758:	4a29      	ldr	r2, [pc, #164]	; (8017800 <__sflush_r+0x108>)
 801775a:	40ca      	lsrs	r2, r1
 801775c:	07d6      	lsls	r6, r2, #31
 801775e:	d544      	bpl.n	80177ea <__sflush_r+0xf2>
 8017760:	2200      	movs	r2, #0
 8017762:	6062      	str	r2, [r4, #4]
 8017764:	6922      	ldr	r2, [r4, #16]
 8017766:	04d9      	lsls	r1, r3, #19
 8017768:	6022      	str	r2, [r4, #0]
 801776a:	d504      	bpl.n	8017776 <__sflush_r+0x7e>
 801776c:	1c42      	adds	r2, r0, #1
 801776e:	d101      	bne.n	8017774 <__sflush_r+0x7c>
 8017770:	682b      	ldr	r3, [r5, #0]
 8017772:	b903      	cbnz	r3, 8017776 <__sflush_r+0x7e>
 8017774:	6560      	str	r0, [r4, #84]	; 0x54
 8017776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017778:	602f      	str	r7, [r5, #0]
 801777a:	2900      	cmp	r1, #0
 801777c:	d0c9      	beq.n	8017712 <__sflush_r+0x1a>
 801777e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017782:	4299      	cmp	r1, r3
 8017784:	d002      	beq.n	801778c <__sflush_r+0x94>
 8017786:	4628      	mov	r0, r5
 8017788:	f001 f91e 	bl	80189c8 <_free_r>
 801778c:	2000      	movs	r0, #0
 801778e:	6360      	str	r0, [r4, #52]	; 0x34
 8017790:	e7c0      	b.n	8017714 <__sflush_r+0x1c>
 8017792:	2301      	movs	r3, #1
 8017794:	4628      	mov	r0, r5
 8017796:	47b0      	blx	r6
 8017798:	1c41      	adds	r1, r0, #1
 801779a:	d1c8      	bne.n	801772e <__sflush_r+0x36>
 801779c:	682b      	ldr	r3, [r5, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d0c5      	beq.n	801772e <__sflush_r+0x36>
 80177a2:	2b1d      	cmp	r3, #29
 80177a4:	d001      	beq.n	80177aa <__sflush_r+0xb2>
 80177a6:	2b16      	cmp	r3, #22
 80177a8:	d101      	bne.n	80177ae <__sflush_r+0xb6>
 80177aa:	602f      	str	r7, [r5, #0]
 80177ac:	e7b1      	b.n	8017712 <__sflush_r+0x1a>
 80177ae:	89a3      	ldrh	r3, [r4, #12]
 80177b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177b4:	81a3      	strh	r3, [r4, #12]
 80177b6:	e7ad      	b.n	8017714 <__sflush_r+0x1c>
 80177b8:	690f      	ldr	r7, [r1, #16]
 80177ba:	2f00      	cmp	r7, #0
 80177bc:	d0a9      	beq.n	8017712 <__sflush_r+0x1a>
 80177be:	0793      	lsls	r3, r2, #30
 80177c0:	bf18      	it	ne
 80177c2:	2300      	movne	r3, #0
 80177c4:	680e      	ldr	r6, [r1, #0]
 80177c6:	bf08      	it	eq
 80177c8:	694b      	ldreq	r3, [r1, #20]
 80177ca:	eba6 0807 	sub.w	r8, r6, r7
 80177ce:	600f      	str	r7, [r1, #0]
 80177d0:	608b      	str	r3, [r1, #8]
 80177d2:	f1b8 0f00 	cmp.w	r8, #0
 80177d6:	dd9c      	ble.n	8017712 <__sflush_r+0x1a>
 80177d8:	4643      	mov	r3, r8
 80177da:	463a      	mov	r2, r7
 80177dc:	6a21      	ldr	r1, [r4, #32]
 80177de:	4628      	mov	r0, r5
 80177e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80177e2:	47b0      	blx	r6
 80177e4:	2800      	cmp	r0, #0
 80177e6:	dc06      	bgt.n	80177f6 <__sflush_r+0xfe>
 80177e8:	89a3      	ldrh	r3, [r4, #12]
 80177ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177ee:	81a3      	strh	r3, [r4, #12]
 80177f0:	f04f 30ff 	mov.w	r0, #4294967295
 80177f4:	e78e      	b.n	8017714 <__sflush_r+0x1c>
 80177f6:	4407      	add	r7, r0
 80177f8:	eba8 0800 	sub.w	r8, r8, r0
 80177fc:	e7e9      	b.n	80177d2 <__sflush_r+0xda>
 80177fe:	bf00      	nop
 8017800:	20400001 	.word	0x20400001

08017804 <_fflush_r>:
 8017804:	b538      	push	{r3, r4, r5, lr}
 8017806:	690b      	ldr	r3, [r1, #16]
 8017808:	4605      	mov	r5, r0
 801780a:	460c      	mov	r4, r1
 801780c:	b1db      	cbz	r3, 8017846 <_fflush_r+0x42>
 801780e:	b118      	cbz	r0, 8017818 <_fflush_r+0x14>
 8017810:	6983      	ldr	r3, [r0, #24]
 8017812:	b90b      	cbnz	r3, 8017818 <_fflush_r+0x14>
 8017814:	f000 f860 	bl	80178d8 <__sinit>
 8017818:	4b0c      	ldr	r3, [pc, #48]	; (801784c <_fflush_r+0x48>)
 801781a:	429c      	cmp	r4, r3
 801781c:	d109      	bne.n	8017832 <_fflush_r+0x2e>
 801781e:	686c      	ldr	r4, [r5, #4]
 8017820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017824:	b17b      	cbz	r3, 8017846 <_fflush_r+0x42>
 8017826:	4621      	mov	r1, r4
 8017828:	4628      	mov	r0, r5
 801782a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801782e:	f7ff bf63 	b.w	80176f8 <__sflush_r>
 8017832:	4b07      	ldr	r3, [pc, #28]	; (8017850 <_fflush_r+0x4c>)
 8017834:	429c      	cmp	r4, r3
 8017836:	d101      	bne.n	801783c <_fflush_r+0x38>
 8017838:	68ac      	ldr	r4, [r5, #8]
 801783a:	e7f1      	b.n	8017820 <_fflush_r+0x1c>
 801783c:	4b05      	ldr	r3, [pc, #20]	; (8017854 <_fflush_r+0x50>)
 801783e:	429c      	cmp	r4, r3
 8017840:	bf08      	it	eq
 8017842:	68ec      	ldreq	r4, [r5, #12]
 8017844:	e7ec      	b.n	8017820 <_fflush_r+0x1c>
 8017846:	2000      	movs	r0, #0
 8017848:	bd38      	pop	{r3, r4, r5, pc}
 801784a:	bf00      	nop
 801784c:	0801e3e0 	.word	0x0801e3e0
 8017850:	0801e400 	.word	0x0801e400
 8017854:	0801e3c0 	.word	0x0801e3c0

08017858 <std>:
 8017858:	2300      	movs	r3, #0
 801785a:	b510      	push	{r4, lr}
 801785c:	4604      	mov	r4, r0
 801785e:	e9c0 3300 	strd	r3, r3, [r0]
 8017862:	6083      	str	r3, [r0, #8]
 8017864:	8181      	strh	r1, [r0, #12]
 8017866:	6643      	str	r3, [r0, #100]	; 0x64
 8017868:	81c2      	strh	r2, [r0, #14]
 801786a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801786e:	6183      	str	r3, [r0, #24]
 8017870:	4619      	mov	r1, r3
 8017872:	2208      	movs	r2, #8
 8017874:	305c      	adds	r0, #92	; 0x5c
 8017876:	f7fd f9dd 	bl	8014c34 <memset>
 801787a:	4b05      	ldr	r3, [pc, #20]	; (8017890 <std+0x38>)
 801787c:	6224      	str	r4, [r4, #32]
 801787e:	6263      	str	r3, [r4, #36]	; 0x24
 8017880:	4b04      	ldr	r3, [pc, #16]	; (8017894 <std+0x3c>)
 8017882:	62a3      	str	r3, [r4, #40]	; 0x28
 8017884:	4b04      	ldr	r3, [pc, #16]	; (8017898 <std+0x40>)
 8017886:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017888:	4b04      	ldr	r3, [pc, #16]	; (801789c <std+0x44>)
 801788a:	6323      	str	r3, [r4, #48]	; 0x30
 801788c:	bd10      	pop	{r4, pc}
 801788e:	bf00      	nop
 8017890:	08015a39 	.word	0x08015a39
 8017894:	08015a5f 	.word	0x08015a5f
 8017898:	08015a97 	.word	0x08015a97
 801789c:	08015abb 	.word	0x08015abb

080178a0 <_cleanup_r>:
 80178a0:	4901      	ldr	r1, [pc, #4]	; (80178a8 <_cleanup_r+0x8>)
 80178a2:	f000 b885 	b.w	80179b0 <_fwalk_reent>
 80178a6:	bf00      	nop
 80178a8:	08017805 	.word	0x08017805

080178ac <__sfmoreglue>:
 80178ac:	b570      	push	{r4, r5, r6, lr}
 80178ae:	2568      	movs	r5, #104	; 0x68
 80178b0:	1e4a      	subs	r2, r1, #1
 80178b2:	4355      	muls	r5, r2
 80178b4:	460e      	mov	r6, r1
 80178b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80178ba:	f001 f8d1 	bl	8018a60 <_malloc_r>
 80178be:	4604      	mov	r4, r0
 80178c0:	b140      	cbz	r0, 80178d4 <__sfmoreglue+0x28>
 80178c2:	2100      	movs	r1, #0
 80178c4:	e9c0 1600 	strd	r1, r6, [r0]
 80178c8:	300c      	adds	r0, #12
 80178ca:	60a0      	str	r0, [r4, #8]
 80178cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80178d0:	f7fd f9b0 	bl	8014c34 <memset>
 80178d4:	4620      	mov	r0, r4
 80178d6:	bd70      	pop	{r4, r5, r6, pc}

080178d8 <__sinit>:
 80178d8:	6983      	ldr	r3, [r0, #24]
 80178da:	b510      	push	{r4, lr}
 80178dc:	4604      	mov	r4, r0
 80178de:	bb33      	cbnz	r3, 801792e <__sinit+0x56>
 80178e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80178e4:	6503      	str	r3, [r0, #80]	; 0x50
 80178e6:	4b12      	ldr	r3, [pc, #72]	; (8017930 <__sinit+0x58>)
 80178e8:	4a12      	ldr	r2, [pc, #72]	; (8017934 <__sinit+0x5c>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	6282      	str	r2, [r0, #40]	; 0x28
 80178ee:	4298      	cmp	r0, r3
 80178f0:	bf04      	itt	eq
 80178f2:	2301      	moveq	r3, #1
 80178f4:	6183      	streq	r3, [r0, #24]
 80178f6:	f000 f81f 	bl	8017938 <__sfp>
 80178fa:	6060      	str	r0, [r4, #4]
 80178fc:	4620      	mov	r0, r4
 80178fe:	f000 f81b 	bl	8017938 <__sfp>
 8017902:	60a0      	str	r0, [r4, #8]
 8017904:	4620      	mov	r0, r4
 8017906:	f000 f817 	bl	8017938 <__sfp>
 801790a:	2200      	movs	r2, #0
 801790c:	60e0      	str	r0, [r4, #12]
 801790e:	2104      	movs	r1, #4
 8017910:	6860      	ldr	r0, [r4, #4]
 8017912:	f7ff ffa1 	bl	8017858 <std>
 8017916:	2201      	movs	r2, #1
 8017918:	2109      	movs	r1, #9
 801791a:	68a0      	ldr	r0, [r4, #8]
 801791c:	f7ff ff9c 	bl	8017858 <std>
 8017920:	2202      	movs	r2, #2
 8017922:	2112      	movs	r1, #18
 8017924:	68e0      	ldr	r0, [r4, #12]
 8017926:	f7ff ff97 	bl	8017858 <std>
 801792a:	2301      	movs	r3, #1
 801792c:	61a3      	str	r3, [r4, #24]
 801792e:	bd10      	pop	{r4, pc}
 8017930:	0801e324 	.word	0x0801e324
 8017934:	080178a1 	.word	0x080178a1

08017938 <__sfp>:
 8017938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801793a:	4b1b      	ldr	r3, [pc, #108]	; (80179a8 <__sfp+0x70>)
 801793c:	4607      	mov	r7, r0
 801793e:	681e      	ldr	r6, [r3, #0]
 8017940:	69b3      	ldr	r3, [r6, #24]
 8017942:	b913      	cbnz	r3, 801794a <__sfp+0x12>
 8017944:	4630      	mov	r0, r6
 8017946:	f7ff ffc7 	bl	80178d8 <__sinit>
 801794a:	3648      	adds	r6, #72	; 0x48
 801794c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017950:	3b01      	subs	r3, #1
 8017952:	d503      	bpl.n	801795c <__sfp+0x24>
 8017954:	6833      	ldr	r3, [r6, #0]
 8017956:	b133      	cbz	r3, 8017966 <__sfp+0x2e>
 8017958:	6836      	ldr	r6, [r6, #0]
 801795a:	e7f7      	b.n	801794c <__sfp+0x14>
 801795c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017960:	b16d      	cbz	r5, 801797e <__sfp+0x46>
 8017962:	3468      	adds	r4, #104	; 0x68
 8017964:	e7f4      	b.n	8017950 <__sfp+0x18>
 8017966:	2104      	movs	r1, #4
 8017968:	4638      	mov	r0, r7
 801796a:	f7ff ff9f 	bl	80178ac <__sfmoreglue>
 801796e:	6030      	str	r0, [r6, #0]
 8017970:	2800      	cmp	r0, #0
 8017972:	d1f1      	bne.n	8017958 <__sfp+0x20>
 8017974:	230c      	movs	r3, #12
 8017976:	4604      	mov	r4, r0
 8017978:	603b      	str	r3, [r7, #0]
 801797a:	4620      	mov	r0, r4
 801797c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801797e:	4b0b      	ldr	r3, [pc, #44]	; (80179ac <__sfp+0x74>)
 8017980:	6665      	str	r5, [r4, #100]	; 0x64
 8017982:	e9c4 5500 	strd	r5, r5, [r4]
 8017986:	60a5      	str	r5, [r4, #8]
 8017988:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801798c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017990:	2208      	movs	r2, #8
 8017992:	4629      	mov	r1, r5
 8017994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017998:	f7fd f94c 	bl	8014c34 <memset>
 801799c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80179a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80179a4:	e7e9      	b.n	801797a <__sfp+0x42>
 80179a6:	bf00      	nop
 80179a8:	0801e324 	.word	0x0801e324
 80179ac:	ffff0001 	.word	0xffff0001

080179b0 <_fwalk_reent>:
 80179b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179b4:	4680      	mov	r8, r0
 80179b6:	4689      	mov	r9, r1
 80179b8:	2600      	movs	r6, #0
 80179ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80179be:	b914      	cbnz	r4, 80179c6 <_fwalk_reent+0x16>
 80179c0:	4630      	mov	r0, r6
 80179c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80179ca:	3f01      	subs	r7, #1
 80179cc:	d501      	bpl.n	80179d2 <_fwalk_reent+0x22>
 80179ce:	6824      	ldr	r4, [r4, #0]
 80179d0:	e7f5      	b.n	80179be <_fwalk_reent+0xe>
 80179d2:	89ab      	ldrh	r3, [r5, #12]
 80179d4:	2b01      	cmp	r3, #1
 80179d6:	d907      	bls.n	80179e8 <_fwalk_reent+0x38>
 80179d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179dc:	3301      	adds	r3, #1
 80179de:	d003      	beq.n	80179e8 <_fwalk_reent+0x38>
 80179e0:	4629      	mov	r1, r5
 80179e2:	4640      	mov	r0, r8
 80179e4:	47c8      	blx	r9
 80179e6:	4306      	orrs	r6, r0
 80179e8:	3568      	adds	r5, #104	; 0x68
 80179ea:	e7ee      	b.n	80179ca <_fwalk_reent+0x1a>

080179ec <rshift>:
 80179ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179ee:	6906      	ldr	r6, [r0, #16]
 80179f0:	114b      	asrs	r3, r1, #5
 80179f2:	429e      	cmp	r6, r3
 80179f4:	f100 0414 	add.w	r4, r0, #20
 80179f8:	dd31      	ble.n	8017a5e <rshift+0x72>
 80179fa:	f011 011f 	ands.w	r1, r1, #31
 80179fe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017a02:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017a06:	d108      	bne.n	8017a1a <rshift+0x2e>
 8017a08:	4621      	mov	r1, r4
 8017a0a:	42b2      	cmp	r2, r6
 8017a0c:	460b      	mov	r3, r1
 8017a0e:	d211      	bcs.n	8017a34 <rshift+0x48>
 8017a10:	f852 3b04 	ldr.w	r3, [r2], #4
 8017a14:	f841 3b04 	str.w	r3, [r1], #4
 8017a18:	e7f7      	b.n	8017a0a <rshift+0x1e>
 8017a1a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017a1e:	4623      	mov	r3, r4
 8017a20:	f1c1 0c20 	rsb	ip, r1, #32
 8017a24:	40cd      	lsrs	r5, r1
 8017a26:	3204      	adds	r2, #4
 8017a28:	42b2      	cmp	r2, r6
 8017a2a:	4617      	mov	r7, r2
 8017a2c:	d30d      	bcc.n	8017a4a <rshift+0x5e>
 8017a2e:	601d      	str	r5, [r3, #0]
 8017a30:	b105      	cbz	r5, 8017a34 <rshift+0x48>
 8017a32:	3304      	adds	r3, #4
 8017a34:	42a3      	cmp	r3, r4
 8017a36:	eba3 0204 	sub.w	r2, r3, r4
 8017a3a:	bf08      	it	eq
 8017a3c:	2300      	moveq	r3, #0
 8017a3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017a42:	6102      	str	r2, [r0, #16]
 8017a44:	bf08      	it	eq
 8017a46:	6143      	streq	r3, [r0, #20]
 8017a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a4a:	683f      	ldr	r7, [r7, #0]
 8017a4c:	fa07 f70c 	lsl.w	r7, r7, ip
 8017a50:	433d      	orrs	r5, r7
 8017a52:	f843 5b04 	str.w	r5, [r3], #4
 8017a56:	f852 5b04 	ldr.w	r5, [r2], #4
 8017a5a:	40cd      	lsrs	r5, r1
 8017a5c:	e7e4      	b.n	8017a28 <rshift+0x3c>
 8017a5e:	4623      	mov	r3, r4
 8017a60:	e7e8      	b.n	8017a34 <rshift+0x48>

08017a62 <__hexdig_fun>:
 8017a62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017a66:	2b09      	cmp	r3, #9
 8017a68:	d802      	bhi.n	8017a70 <__hexdig_fun+0xe>
 8017a6a:	3820      	subs	r0, #32
 8017a6c:	b2c0      	uxtb	r0, r0
 8017a6e:	4770      	bx	lr
 8017a70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017a74:	2b05      	cmp	r3, #5
 8017a76:	d801      	bhi.n	8017a7c <__hexdig_fun+0x1a>
 8017a78:	3847      	subs	r0, #71	; 0x47
 8017a7a:	e7f7      	b.n	8017a6c <__hexdig_fun+0xa>
 8017a7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017a80:	2b05      	cmp	r3, #5
 8017a82:	d801      	bhi.n	8017a88 <__hexdig_fun+0x26>
 8017a84:	3827      	subs	r0, #39	; 0x27
 8017a86:	e7f1      	b.n	8017a6c <__hexdig_fun+0xa>
 8017a88:	2000      	movs	r0, #0
 8017a8a:	4770      	bx	lr

08017a8c <__gethex>:
 8017a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a90:	b08b      	sub	sp, #44	; 0x2c
 8017a92:	9002      	str	r0, [sp, #8]
 8017a94:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017a96:	468a      	mov	sl, r1
 8017a98:	4690      	mov	r8, r2
 8017a9a:	9306      	str	r3, [sp, #24]
 8017a9c:	f000 fae0 	bl	8018060 <__localeconv_l>
 8017aa0:	6803      	ldr	r3, [r0, #0]
 8017aa2:	f04f 0b00 	mov.w	fp, #0
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	9303      	str	r3, [sp, #12]
 8017aaa:	f7e8 fb73 	bl	8000194 <strlen>
 8017aae:	9b03      	ldr	r3, [sp, #12]
 8017ab0:	9001      	str	r0, [sp, #4]
 8017ab2:	4403      	add	r3, r0
 8017ab4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017ab8:	9307      	str	r3, [sp, #28]
 8017aba:	f8da 3000 	ldr.w	r3, [sl]
 8017abe:	3302      	adds	r3, #2
 8017ac0:	461f      	mov	r7, r3
 8017ac2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017ac6:	2830      	cmp	r0, #48	; 0x30
 8017ac8:	d06c      	beq.n	8017ba4 <__gethex+0x118>
 8017aca:	f7ff ffca 	bl	8017a62 <__hexdig_fun>
 8017ace:	4604      	mov	r4, r0
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	d16a      	bne.n	8017baa <__gethex+0x11e>
 8017ad4:	9a01      	ldr	r2, [sp, #4]
 8017ad6:	9903      	ldr	r1, [sp, #12]
 8017ad8:	4638      	mov	r0, r7
 8017ada:	f7fd fffa 	bl	8015ad2 <strncmp>
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	d166      	bne.n	8017bb0 <__gethex+0x124>
 8017ae2:	9b01      	ldr	r3, [sp, #4]
 8017ae4:	5cf8      	ldrb	r0, [r7, r3]
 8017ae6:	18fe      	adds	r6, r7, r3
 8017ae8:	f7ff ffbb 	bl	8017a62 <__hexdig_fun>
 8017aec:	2800      	cmp	r0, #0
 8017aee:	d062      	beq.n	8017bb6 <__gethex+0x12a>
 8017af0:	4633      	mov	r3, r6
 8017af2:	7818      	ldrb	r0, [r3, #0]
 8017af4:	461f      	mov	r7, r3
 8017af6:	2830      	cmp	r0, #48	; 0x30
 8017af8:	f103 0301 	add.w	r3, r3, #1
 8017afc:	d0f9      	beq.n	8017af2 <__gethex+0x66>
 8017afe:	f7ff ffb0 	bl	8017a62 <__hexdig_fun>
 8017b02:	fab0 f580 	clz	r5, r0
 8017b06:	4634      	mov	r4, r6
 8017b08:	f04f 0b01 	mov.w	fp, #1
 8017b0c:	096d      	lsrs	r5, r5, #5
 8017b0e:	463a      	mov	r2, r7
 8017b10:	4616      	mov	r6, r2
 8017b12:	7830      	ldrb	r0, [r6, #0]
 8017b14:	3201      	adds	r2, #1
 8017b16:	f7ff ffa4 	bl	8017a62 <__hexdig_fun>
 8017b1a:	2800      	cmp	r0, #0
 8017b1c:	d1f8      	bne.n	8017b10 <__gethex+0x84>
 8017b1e:	9a01      	ldr	r2, [sp, #4]
 8017b20:	9903      	ldr	r1, [sp, #12]
 8017b22:	4630      	mov	r0, r6
 8017b24:	f7fd ffd5 	bl	8015ad2 <strncmp>
 8017b28:	b950      	cbnz	r0, 8017b40 <__gethex+0xb4>
 8017b2a:	b954      	cbnz	r4, 8017b42 <__gethex+0xb6>
 8017b2c:	9b01      	ldr	r3, [sp, #4]
 8017b2e:	18f4      	adds	r4, r6, r3
 8017b30:	4622      	mov	r2, r4
 8017b32:	4616      	mov	r6, r2
 8017b34:	7830      	ldrb	r0, [r6, #0]
 8017b36:	3201      	adds	r2, #1
 8017b38:	f7ff ff93 	bl	8017a62 <__hexdig_fun>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	d1f8      	bne.n	8017b32 <__gethex+0xa6>
 8017b40:	b10c      	cbz	r4, 8017b46 <__gethex+0xba>
 8017b42:	1ba4      	subs	r4, r4, r6
 8017b44:	00a4      	lsls	r4, r4, #2
 8017b46:	7833      	ldrb	r3, [r6, #0]
 8017b48:	2b50      	cmp	r3, #80	; 0x50
 8017b4a:	d001      	beq.n	8017b50 <__gethex+0xc4>
 8017b4c:	2b70      	cmp	r3, #112	; 0x70
 8017b4e:	d140      	bne.n	8017bd2 <__gethex+0x146>
 8017b50:	7873      	ldrb	r3, [r6, #1]
 8017b52:	2b2b      	cmp	r3, #43	; 0x2b
 8017b54:	d031      	beq.n	8017bba <__gethex+0x12e>
 8017b56:	2b2d      	cmp	r3, #45	; 0x2d
 8017b58:	d033      	beq.n	8017bc2 <__gethex+0x136>
 8017b5a:	f04f 0900 	mov.w	r9, #0
 8017b5e:	1c71      	adds	r1, r6, #1
 8017b60:	7808      	ldrb	r0, [r1, #0]
 8017b62:	f7ff ff7e 	bl	8017a62 <__hexdig_fun>
 8017b66:	1e43      	subs	r3, r0, #1
 8017b68:	b2db      	uxtb	r3, r3
 8017b6a:	2b18      	cmp	r3, #24
 8017b6c:	d831      	bhi.n	8017bd2 <__gethex+0x146>
 8017b6e:	f1a0 0210 	sub.w	r2, r0, #16
 8017b72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017b76:	f7ff ff74 	bl	8017a62 <__hexdig_fun>
 8017b7a:	1e43      	subs	r3, r0, #1
 8017b7c:	b2db      	uxtb	r3, r3
 8017b7e:	2b18      	cmp	r3, #24
 8017b80:	d922      	bls.n	8017bc8 <__gethex+0x13c>
 8017b82:	f1b9 0f00 	cmp.w	r9, #0
 8017b86:	d000      	beq.n	8017b8a <__gethex+0xfe>
 8017b88:	4252      	negs	r2, r2
 8017b8a:	4414      	add	r4, r2
 8017b8c:	f8ca 1000 	str.w	r1, [sl]
 8017b90:	b30d      	cbz	r5, 8017bd6 <__gethex+0x14a>
 8017b92:	f1bb 0f00 	cmp.w	fp, #0
 8017b96:	bf0c      	ite	eq
 8017b98:	2706      	moveq	r7, #6
 8017b9a:	2700      	movne	r7, #0
 8017b9c:	4638      	mov	r0, r7
 8017b9e:	b00b      	add	sp, #44	; 0x2c
 8017ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba4:	f10b 0b01 	add.w	fp, fp, #1
 8017ba8:	e78a      	b.n	8017ac0 <__gethex+0x34>
 8017baa:	2500      	movs	r5, #0
 8017bac:	462c      	mov	r4, r5
 8017bae:	e7ae      	b.n	8017b0e <__gethex+0x82>
 8017bb0:	463e      	mov	r6, r7
 8017bb2:	2501      	movs	r5, #1
 8017bb4:	e7c7      	b.n	8017b46 <__gethex+0xba>
 8017bb6:	4604      	mov	r4, r0
 8017bb8:	e7fb      	b.n	8017bb2 <__gethex+0x126>
 8017bba:	f04f 0900 	mov.w	r9, #0
 8017bbe:	1cb1      	adds	r1, r6, #2
 8017bc0:	e7ce      	b.n	8017b60 <__gethex+0xd4>
 8017bc2:	f04f 0901 	mov.w	r9, #1
 8017bc6:	e7fa      	b.n	8017bbe <__gethex+0x132>
 8017bc8:	230a      	movs	r3, #10
 8017bca:	fb03 0202 	mla	r2, r3, r2, r0
 8017bce:	3a10      	subs	r2, #16
 8017bd0:	e7cf      	b.n	8017b72 <__gethex+0xe6>
 8017bd2:	4631      	mov	r1, r6
 8017bd4:	e7da      	b.n	8017b8c <__gethex+0x100>
 8017bd6:	4629      	mov	r1, r5
 8017bd8:	1bf3      	subs	r3, r6, r7
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	2b07      	cmp	r3, #7
 8017bde:	dc49      	bgt.n	8017c74 <__gethex+0x1e8>
 8017be0:	9802      	ldr	r0, [sp, #8]
 8017be2:	f000 faeb 	bl	80181bc <_Balloc>
 8017be6:	f04f 0b00 	mov.w	fp, #0
 8017bea:	4605      	mov	r5, r0
 8017bec:	46da      	mov	sl, fp
 8017bee:	9b01      	ldr	r3, [sp, #4]
 8017bf0:	f100 0914 	add.w	r9, r0, #20
 8017bf4:	f1c3 0301 	rsb	r3, r3, #1
 8017bf8:	f8cd 9010 	str.w	r9, [sp, #16]
 8017bfc:	9308      	str	r3, [sp, #32]
 8017bfe:	42b7      	cmp	r7, r6
 8017c00:	d33b      	bcc.n	8017c7a <__gethex+0x1ee>
 8017c02:	9804      	ldr	r0, [sp, #16]
 8017c04:	f840 ab04 	str.w	sl, [r0], #4
 8017c08:	eba0 0009 	sub.w	r0, r0, r9
 8017c0c:	1080      	asrs	r0, r0, #2
 8017c0e:	6128      	str	r0, [r5, #16]
 8017c10:	0147      	lsls	r7, r0, #5
 8017c12:	4650      	mov	r0, sl
 8017c14:	f000 fb96 	bl	8018344 <__hi0bits>
 8017c18:	f8d8 6000 	ldr.w	r6, [r8]
 8017c1c:	1a3f      	subs	r7, r7, r0
 8017c1e:	42b7      	cmp	r7, r6
 8017c20:	dd64      	ble.n	8017cec <__gethex+0x260>
 8017c22:	1bbf      	subs	r7, r7, r6
 8017c24:	4639      	mov	r1, r7
 8017c26:	4628      	mov	r0, r5
 8017c28:	f000 fe9f 	bl	801896a <__any_on>
 8017c2c:	4682      	mov	sl, r0
 8017c2e:	b178      	cbz	r0, 8017c50 <__gethex+0x1c4>
 8017c30:	f04f 0a01 	mov.w	sl, #1
 8017c34:	1e7b      	subs	r3, r7, #1
 8017c36:	1159      	asrs	r1, r3, #5
 8017c38:	f003 021f 	and.w	r2, r3, #31
 8017c3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017c40:	fa0a f202 	lsl.w	r2, sl, r2
 8017c44:	420a      	tst	r2, r1
 8017c46:	d003      	beq.n	8017c50 <__gethex+0x1c4>
 8017c48:	4553      	cmp	r3, sl
 8017c4a:	dc46      	bgt.n	8017cda <__gethex+0x24e>
 8017c4c:	f04f 0a02 	mov.w	sl, #2
 8017c50:	4639      	mov	r1, r7
 8017c52:	4628      	mov	r0, r5
 8017c54:	f7ff feca 	bl	80179ec <rshift>
 8017c58:	443c      	add	r4, r7
 8017c5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c5e:	42a3      	cmp	r3, r4
 8017c60:	da52      	bge.n	8017d08 <__gethex+0x27c>
 8017c62:	4629      	mov	r1, r5
 8017c64:	9802      	ldr	r0, [sp, #8]
 8017c66:	f000 fadd 	bl	8018224 <_Bfree>
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c6e:	27a3      	movs	r7, #163	; 0xa3
 8017c70:	6013      	str	r3, [r2, #0]
 8017c72:	e793      	b.n	8017b9c <__gethex+0x110>
 8017c74:	3101      	adds	r1, #1
 8017c76:	105b      	asrs	r3, r3, #1
 8017c78:	e7b0      	b.n	8017bdc <__gethex+0x150>
 8017c7a:	1e73      	subs	r3, r6, #1
 8017c7c:	9305      	str	r3, [sp, #20]
 8017c7e:	9a07      	ldr	r2, [sp, #28]
 8017c80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d018      	beq.n	8017cba <__gethex+0x22e>
 8017c88:	f1bb 0f20 	cmp.w	fp, #32
 8017c8c:	d107      	bne.n	8017c9e <__gethex+0x212>
 8017c8e:	9b04      	ldr	r3, [sp, #16]
 8017c90:	f8c3 a000 	str.w	sl, [r3]
 8017c94:	f04f 0a00 	mov.w	sl, #0
 8017c98:	46d3      	mov	fp, sl
 8017c9a:	3304      	adds	r3, #4
 8017c9c:	9304      	str	r3, [sp, #16]
 8017c9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017ca2:	f7ff fede 	bl	8017a62 <__hexdig_fun>
 8017ca6:	f000 000f 	and.w	r0, r0, #15
 8017caa:	fa00 f00b 	lsl.w	r0, r0, fp
 8017cae:	ea4a 0a00 	orr.w	sl, sl, r0
 8017cb2:	f10b 0b04 	add.w	fp, fp, #4
 8017cb6:	9b05      	ldr	r3, [sp, #20]
 8017cb8:	e00d      	b.n	8017cd6 <__gethex+0x24a>
 8017cba:	9b05      	ldr	r3, [sp, #20]
 8017cbc:	9a08      	ldr	r2, [sp, #32]
 8017cbe:	4413      	add	r3, r2
 8017cc0:	42bb      	cmp	r3, r7
 8017cc2:	d3e1      	bcc.n	8017c88 <__gethex+0x1fc>
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	9a01      	ldr	r2, [sp, #4]
 8017cc8:	9903      	ldr	r1, [sp, #12]
 8017cca:	9309      	str	r3, [sp, #36]	; 0x24
 8017ccc:	f7fd ff01 	bl	8015ad2 <strncmp>
 8017cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cd2:	2800      	cmp	r0, #0
 8017cd4:	d1d8      	bne.n	8017c88 <__gethex+0x1fc>
 8017cd6:	461e      	mov	r6, r3
 8017cd8:	e791      	b.n	8017bfe <__gethex+0x172>
 8017cda:	1eb9      	subs	r1, r7, #2
 8017cdc:	4628      	mov	r0, r5
 8017cde:	f000 fe44 	bl	801896a <__any_on>
 8017ce2:	2800      	cmp	r0, #0
 8017ce4:	d0b2      	beq.n	8017c4c <__gethex+0x1c0>
 8017ce6:	f04f 0a03 	mov.w	sl, #3
 8017cea:	e7b1      	b.n	8017c50 <__gethex+0x1c4>
 8017cec:	da09      	bge.n	8017d02 <__gethex+0x276>
 8017cee:	1bf7      	subs	r7, r6, r7
 8017cf0:	4629      	mov	r1, r5
 8017cf2:	463a      	mov	r2, r7
 8017cf4:	9802      	ldr	r0, [sp, #8]
 8017cf6:	f000 fc5f 	bl	80185b8 <__lshift>
 8017cfa:	4605      	mov	r5, r0
 8017cfc:	1be4      	subs	r4, r4, r7
 8017cfe:	f100 0914 	add.w	r9, r0, #20
 8017d02:	f04f 0a00 	mov.w	sl, #0
 8017d06:	e7a8      	b.n	8017c5a <__gethex+0x1ce>
 8017d08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017d0c:	42a0      	cmp	r0, r4
 8017d0e:	dd6b      	ble.n	8017de8 <__gethex+0x35c>
 8017d10:	1b04      	subs	r4, r0, r4
 8017d12:	42a6      	cmp	r6, r4
 8017d14:	dc2e      	bgt.n	8017d74 <__gethex+0x2e8>
 8017d16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d1a:	2b02      	cmp	r3, #2
 8017d1c:	d022      	beq.n	8017d64 <__gethex+0x2d8>
 8017d1e:	2b03      	cmp	r3, #3
 8017d20:	d024      	beq.n	8017d6c <__gethex+0x2e0>
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	d115      	bne.n	8017d52 <__gethex+0x2c6>
 8017d26:	42a6      	cmp	r6, r4
 8017d28:	d113      	bne.n	8017d52 <__gethex+0x2c6>
 8017d2a:	2e01      	cmp	r6, #1
 8017d2c:	dc0b      	bgt.n	8017d46 <__gethex+0x2ba>
 8017d2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017d32:	9a06      	ldr	r2, [sp, #24]
 8017d34:	2762      	movs	r7, #98	; 0x62
 8017d36:	6013      	str	r3, [r2, #0]
 8017d38:	2301      	movs	r3, #1
 8017d3a:	612b      	str	r3, [r5, #16]
 8017d3c:	f8c9 3000 	str.w	r3, [r9]
 8017d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d42:	601d      	str	r5, [r3, #0]
 8017d44:	e72a      	b.n	8017b9c <__gethex+0x110>
 8017d46:	1e71      	subs	r1, r6, #1
 8017d48:	4628      	mov	r0, r5
 8017d4a:	f000 fe0e 	bl	801896a <__any_on>
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	d1ed      	bne.n	8017d2e <__gethex+0x2a2>
 8017d52:	4629      	mov	r1, r5
 8017d54:	9802      	ldr	r0, [sp, #8]
 8017d56:	f000 fa65 	bl	8018224 <_Bfree>
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d5e:	2750      	movs	r7, #80	; 0x50
 8017d60:	6013      	str	r3, [r2, #0]
 8017d62:	e71b      	b.n	8017b9c <__gethex+0x110>
 8017d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d0e1      	beq.n	8017d2e <__gethex+0x2a2>
 8017d6a:	e7f2      	b.n	8017d52 <__gethex+0x2c6>
 8017d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d1dd      	bne.n	8017d2e <__gethex+0x2a2>
 8017d72:	e7ee      	b.n	8017d52 <__gethex+0x2c6>
 8017d74:	1e67      	subs	r7, r4, #1
 8017d76:	f1ba 0f00 	cmp.w	sl, #0
 8017d7a:	d132      	bne.n	8017de2 <__gethex+0x356>
 8017d7c:	b127      	cbz	r7, 8017d88 <__gethex+0x2fc>
 8017d7e:	4639      	mov	r1, r7
 8017d80:	4628      	mov	r0, r5
 8017d82:	f000 fdf2 	bl	801896a <__any_on>
 8017d86:	4682      	mov	sl, r0
 8017d88:	2301      	movs	r3, #1
 8017d8a:	117a      	asrs	r2, r7, #5
 8017d8c:	f007 071f 	and.w	r7, r7, #31
 8017d90:	fa03 f707 	lsl.w	r7, r3, r7
 8017d94:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017d98:	4621      	mov	r1, r4
 8017d9a:	421f      	tst	r7, r3
 8017d9c:	f04f 0702 	mov.w	r7, #2
 8017da0:	4628      	mov	r0, r5
 8017da2:	bf18      	it	ne
 8017da4:	f04a 0a02 	orrne.w	sl, sl, #2
 8017da8:	1b36      	subs	r6, r6, r4
 8017daa:	f7ff fe1f 	bl	80179ec <rshift>
 8017dae:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017db2:	f1ba 0f00 	cmp.w	sl, #0
 8017db6:	d048      	beq.n	8017e4a <__gethex+0x3be>
 8017db8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017dbc:	2b02      	cmp	r3, #2
 8017dbe:	d015      	beq.n	8017dec <__gethex+0x360>
 8017dc0:	2b03      	cmp	r3, #3
 8017dc2:	d017      	beq.n	8017df4 <__gethex+0x368>
 8017dc4:	2b01      	cmp	r3, #1
 8017dc6:	d109      	bne.n	8017ddc <__gethex+0x350>
 8017dc8:	f01a 0f02 	tst.w	sl, #2
 8017dcc:	d006      	beq.n	8017ddc <__gethex+0x350>
 8017dce:	f8d9 3000 	ldr.w	r3, [r9]
 8017dd2:	ea4a 0a03 	orr.w	sl, sl, r3
 8017dd6:	f01a 0f01 	tst.w	sl, #1
 8017dda:	d10e      	bne.n	8017dfa <__gethex+0x36e>
 8017ddc:	f047 0710 	orr.w	r7, r7, #16
 8017de0:	e033      	b.n	8017e4a <__gethex+0x3be>
 8017de2:	f04f 0a01 	mov.w	sl, #1
 8017de6:	e7cf      	b.n	8017d88 <__gethex+0x2fc>
 8017de8:	2701      	movs	r7, #1
 8017dea:	e7e2      	b.n	8017db2 <__gethex+0x326>
 8017dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dee:	f1c3 0301 	rsb	r3, r3, #1
 8017df2:	9315      	str	r3, [sp, #84]	; 0x54
 8017df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d0f0      	beq.n	8017ddc <__gethex+0x350>
 8017dfa:	f04f 0c00 	mov.w	ip, #0
 8017dfe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017e02:	f105 0314 	add.w	r3, r5, #20
 8017e06:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017e0a:	eb03 010a 	add.w	r1, r3, sl
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017e18:	d01c      	beq.n	8017e54 <__gethex+0x3c8>
 8017e1a:	3201      	adds	r2, #1
 8017e1c:	6002      	str	r2, [r0, #0]
 8017e1e:	2f02      	cmp	r7, #2
 8017e20:	f105 0314 	add.w	r3, r5, #20
 8017e24:	d138      	bne.n	8017e98 <__gethex+0x40c>
 8017e26:	f8d8 2000 	ldr.w	r2, [r8]
 8017e2a:	3a01      	subs	r2, #1
 8017e2c:	42b2      	cmp	r2, r6
 8017e2e:	d10a      	bne.n	8017e46 <__gethex+0x3ba>
 8017e30:	2201      	movs	r2, #1
 8017e32:	1171      	asrs	r1, r6, #5
 8017e34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e38:	f006 061f 	and.w	r6, r6, #31
 8017e3c:	fa02 f606 	lsl.w	r6, r2, r6
 8017e40:	421e      	tst	r6, r3
 8017e42:	bf18      	it	ne
 8017e44:	4617      	movne	r7, r2
 8017e46:	f047 0720 	orr.w	r7, r7, #32
 8017e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e4c:	601d      	str	r5, [r3, #0]
 8017e4e:	9b06      	ldr	r3, [sp, #24]
 8017e50:	601c      	str	r4, [r3, #0]
 8017e52:	e6a3      	b.n	8017b9c <__gethex+0x110>
 8017e54:	4299      	cmp	r1, r3
 8017e56:	f843 cc04 	str.w	ip, [r3, #-4]
 8017e5a:	d8d8      	bhi.n	8017e0e <__gethex+0x382>
 8017e5c:	68ab      	ldr	r3, [r5, #8]
 8017e5e:	4599      	cmp	r9, r3
 8017e60:	db12      	blt.n	8017e88 <__gethex+0x3fc>
 8017e62:	6869      	ldr	r1, [r5, #4]
 8017e64:	9802      	ldr	r0, [sp, #8]
 8017e66:	3101      	adds	r1, #1
 8017e68:	f000 f9a8 	bl	80181bc <_Balloc>
 8017e6c:	4683      	mov	fp, r0
 8017e6e:	692a      	ldr	r2, [r5, #16]
 8017e70:	f105 010c 	add.w	r1, r5, #12
 8017e74:	3202      	adds	r2, #2
 8017e76:	0092      	lsls	r2, r2, #2
 8017e78:	300c      	adds	r0, #12
 8017e7a:	f7fc feb7 	bl	8014bec <memcpy>
 8017e7e:	4629      	mov	r1, r5
 8017e80:	9802      	ldr	r0, [sp, #8]
 8017e82:	f000 f9cf 	bl	8018224 <_Bfree>
 8017e86:	465d      	mov	r5, fp
 8017e88:	692b      	ldr	r3, [r5, #16]
 8017e8a:	1c5a      	adds	r2, r3, #1
 8017e8c:	612a      	str	r2, [r5, #16]
 8017e8e:	2201      	movs	r2, #1
 8017e90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017e94:	615a      	str	r2, [r3, #20]
 8017e96:	e7c2      	b.n	8017e1e <__gethex+0x392>
 8017e98:	692a      	ldr	r2, [r5, #16]
 8017e9a:	454a      	cmp	r2, r9
 8017e9c:	dd0b      	ble.n	8017eb6 <__gethex+0x42a>
 8017e9e:	2101      	movs	r1, #1
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	f7ff fda3 	bl	80179ec <rshift>
 8017ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017eaa:	3401      	adds	r4, #1
 8017eac:	42a3      	cmp	r3, r4
 8017eae:	f6ff aed8 	blt.w	8017c62 <__gethex+0x1d6>
 8017eb2:	2701      	movs	r7, #1
 8017eb4:	e7c7      	b.n	8017e46 <__gethex+0x3ba>
 8017eb6:	f016 061f 	ands.w	r6, r6, #31
 8017eba:	d0fa      	beq.n	8017eb2 <__gethex+0x426>
 8017ebc:	449a      	add	sl, r3
 8017ebe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017ec2:	f000 fa3f 	bl	8018344 <__hi0bits>
 8017ec6:	f1c6 0620 	rsb	r6, r6, #32
 8017eca:	42b0      	cmp	r0, r6
 8017ecc:	dbe7      	blt.n	8017e9e <__gethex+0x412>
 8017ece:	e7f0      	b.n	8017eb2 <__gethex+0x426>

08017ed0 <L_shift>:
 8017ed0:	f1c2 0208 	rsb	r2, r2, #8
 8017ed4:	0092      	lsls	r2, r2, #2
 8017ed6:	b570      	push	{r4, r5, r6, lr}
 8017ed8:	f1c2 0620 	rsb	r6, r2, #32
 8017edc:	6843      	ldr	r3, [r0, #4]
 8017ede:	6804      	ldr	r4, [r0, #0]
 8017ee0:	fa03 f506 	lsl.w	r5, r3, r6
 8017ee4:	432c      	orrs	r4, r5
 8017ee6:	40d3      	lsrs	r3, r2
 8017ee8:	6004      	str	r4, [r0, #0]
 8017eea:	f840 3f04 	str.w	r3, [r0, #4]!
 8017eee:	4288      	cmp	r0, r1
 8017ef0:	d3f4      	bcc.n	8017edc <L_shift+0xc>
 8017ef2:	bd70      	pop	{r4, r5, r6, pc}

08017ef4 <__match>:
 8017ef4:	b530      	push	{r4, r5, lr}
 8017ef6:	6803      	ldr	r3, [r0, #0]
 8017ef8:	3301      	adds	r3, #1
 8017efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017efe:	b914      	cbnz	r4, 8017f06 <__match+0x12>
 8017f00:	6003      	str	r3, [r0, #0]
 8017f02:	2001      	movs	r0, #1
 8017f04:	bd30      	pop	{r4, r5, pc}
 8017f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017f0e:	2d19      	cmp	r5, #25
 8017f10:	bf98      	it	ls
 8017f12:	3220      	addls	r2, #32
 8017f14:	42a2      	cmp	r2, r4
 8017f16:	d0f0      	beq.n	8017efa <__match+0x6>
 8017f18:	2000      	movs	r0, #0
 8017f1a:	e7f3      	b.n	8017f04 <__match+0x10>

08017f1c <__hexnan>:
 8017f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f20:	2500      	movs	r5, #0
 8017f22:	680b      	ldr	r3, [r1, #0]
 8017f24:	4682      	mov	sl, r0
 8017f26:	115f      	asrs	r7, r3, #5
 8017f28:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017f2c:	f013 031f 	ands.w	r3, r3, #31
 8017f30:	bf18      	it	ne
 8017f32:	3704      	addne	r7, #4
 8017f34:	1f3e      	subs	r6, r7, #4
 8017f36:	4690      	mov	r8, r2
 8017f38:	46b1      	mov	r9, r6
 8017f3a:	4634      	mov	r4, r6
 8017f3c:	46ab      	mov	fp, r5
 8017f3e:	b087      	sub	sp, #28
 8017f40:	6801      	ldr	r1, [r0, #0]
 8017f42:	9301      	str	r3, [sp, #4]
 8017f44:	f847 5c04 	str.w	r5, [r7, #-4]
 8017f48:	9502      	str	r5, [sp, #8]
 8017f4a:	784a      	ldrb	r2, [r1, #1]
 8017f4c:	1c4b      	adds	r3, r1, #1
 8017f4e:	9303      	str	r3, [sp, #12]
 8017f50:	b342      	cbz	r2, 8017fa4 <__hexnan+0x88>
 8017f52:	4610      	mov	r0, r2
 8017f54:	9105      	str	r1, [sp, #20]
 8017f56:	9204      	str	r2, [sp, #16]
 8017f58:	f7ff fd83 	bl	8017a62 <__hexdig_fun>
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	d143      	bne.n	8017fe8 <__hexnan+0xcc>
 8017f60:	9a04      	ldr	r2, [sp, #16]
 8017f62:	9905      	ldr	r1, [sp, #20]
 8017f64:	2a20      	cmp	r2, #32
 8017f66:	d818      	bhi.n	8017f9a <__hexnan+0x7e>
 8017f68:	9b02      	ldr	r3, [sp, #8]
 8017f6a:	459b      	cmp	fp, r3
 8017f6c:	dd13      	ble.n	8017f96 <__hexnan+0x7a>
 8017f6e:	454c      	cmp	r4, r9
 8017f70:	d206      	bcs.n	8017f80 <__hexnan+0x64>
 8017f72:	2d07      	cmp	r5, #7
 8017f74:	dc04      	bgt.n	8017f80 <__hexnan+0x64>
 8017f76:	462a      	mov	r2, r5
 8017f78:	4649      	mov	r1, r9
 8017f7a:	4620      	mov	r0, r4
 8017f7c:	f7ff ffa8 	bl	8017ed0 <L_shift>
 8017f80:	4544      	cmp	r4, r8
 8017f82:	d944      	bls.n	801800e <__hexnan+0xf2>
 8017f84:	2300      	movs	r3, #0
 8017f86:	f1a4 0904 	sub.w	r9, r4, #4
 8017f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f8e:	461d      	mov	r5, r3
 8017f90:	464c      	mov	r4, r9
 8017f92:	f8cd b008 	str.w	fp, [sp, #8]
 8017f96:	9903      	ldr	r1, [sp, #12]
 8017f98:	e7d7      	b.n	8017f4a <__hexnan+0x2e>
 8017f9a:	2a29      	cmp	r2, #41	; 0x29
 8017f9c:	d14a      	bne.n	8018034 <__hexnan+0x118>
 8017f9e:	3102      	adds	r1, #2
 8017fa0:	f8ca 1000 	str.w	r1, [sl]
 8017fa4:	f1bb 0f00 	cmp.w	fp, #0
 8017fa8:	d044      	beq.n	8018034 <__hexnan+0x118>
 8017faa:	454c      	cmp	r4, r9
 8017fac:	d206      	bcs.n	8017fbc <__hexnan+0xa0>
 8017fae:	2d07      	cmp	r5, #7
 8017fb0:	dc04      	bgt.n	8017fbc <__hexnan+0xa0>
 8017fb2:	462a      	mov	r2, r5
 8017fb4:	4649      	mov	r1, r9
 8017fb6:	4620      	mov	r0, r4
 8017fb8:	f7ff ff8a 	bl	8017ed0 <L_shift>
 8017fbc:	4544      	cmp	r4, r8
 8017fbe:	d928      	bls.n	8018012 <__hexnan+0xf6>
 8017fc0:	4643      	mov	r3, r8
 8017fc2:	f854 2b04 	ldr.w	r2, [r4], #4
 8017fc6:	42a6      	cmp	r6, r4
 8017fc8:	f843 2b04 	str.w	r2, [r3], #4
 8017fcc:	d2f9      	bcs.n	8017fc2 <__hexnan+0xa6>
 8017fce:	2200      	movs	r2, #0
 8017fd0:	f843 2b04 	str.w	r2, [r3], #4
 8017fd4:	429e      	cmp	r6, r3
 8017fd6:	d2fb      	bcs.n	8017fd0 <__hexnan+0xb4>
 8017fd8:	6833      	ldr	r3, [r6, #0]
 8017fda:	b91b      	cbnz	r3, 8017fe4 <__hexnan+0xc8>
 8017fdc:	4546      	cmp	r6, r8
 8017fde:	d127      	bne.n	8018030 <__hexnan+0x114>
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	6033      	str	r3, [r6, #0]
 8017fe4:	2005      	movs	r0, #5
 8017fe6:	e026      	b.n	8018036 <__hexnan+0x11a>
 8017fe8:	3501      	adds	r5, #1
 8017fea:	2d08      	cmp	r5, #8
 8017fec:	f10b 0b01 	add.w	fp, fp, #1
 8017ff0:	dd06      	ble.n	8018000 <__hexnan+0xe4>
 8017ff2:	4544      	cmp	r4, r8
 8017ff4:	d9cf      	bls.n	8017f96 <__hexnan+0x7a>
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	2501      	movs	r5, #1
 8017ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ffe:	3c04      	subs	r4, #4
 8018000:	6822      	ldr	r2, [r4, #0]
 8018002:	f000 000f 	and.w	r0, r0, #15
 8018006:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801800a:	6020      	str	r0, [r4, #0]
 801800c:	e7c3      	b.n	8017f96 <__hexnan+0x7a>
 801800e:	2508      	movs	r5, #8
 8018010:	e7c1      	b.n	8017f96 <__hexnan+0x7a>
 8018012:	9b01      	ldr	r3, [sp, #4]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d0df      	beq.n	8017fd8 <__hexnan+0xbc>
 8018018:	f04f 32ff 	mov.w	r2, #4294967295
 801801c:	f1c3 0320 	rsb	r3, r3, #32
 8018020:	fa22 f303 	lsr.w	r3, r2, r3
 8018024:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018028:	401a      	ands	r2, r3
 801802a:	f847 2c04 	str.w	r2, [r7, #-4]
 801802e:	e7d3      	b.n	8017fd8 <__hexnan+0xbc>
 8018030:	3e04      	subs	r6, #4
 8018032:	e7d1      	b.n	8017fd8 <__hexnan+0xbc>
 8018034:	2004      	movs	r0, #4
 8018036:	b007      	add	sp, #28
 8018038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801803c <__locale_ctype_ptr_l>:
 801803c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018040:	4770      	bx	lr
	...

08018044 <__locale_ctype_ptr>:
 8018044:	4b04      	ldr	r3, [pc, #16]	; (8018058 <__locale_ctype_ptr+0x14>)
 8018046:	4a05      	ldr	r2, [pc, #20]	; (801805c <__locale_ctype_ptr+0x18>)
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	6a1b      	ldr	r3, [r3, #32]
 801804c:	2b00      	cmp	r3, #0
 801804e:	bf08      	it	eq
 8018050:	4613      	moveq	r3, r2
 8018052:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018056:	4770      	bx	lr
 8018058:	20000148 	.word	0x20000148
 801805c:	200001ac 	.word	0x200001ac

08018060 <__localeconv_l>:
 8018060:	30f0      	adds	r0, #240	; 0xf0
 8018062:	4770      	bx	lr

08018064 <_localeconv_r>:
 8018064:	4b04      	ldr	r3, [pc, #16]	; (8018078 <_localeconv_r+0x14>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	6a18      	ldr	r0, [r3, #32]
 801806a:	4b04      	ldr	r3, [pc, #16]	; (801807c <_localeconv_r+0x18>)
 801806c:	2800      	cmp	r0, #0
 801806e:	bf08      	it	eq
 8018070:	4618      	moveq	r0, r3
 8018072:	30f0      	adds	r0, #240	; 0xf0
 8018074:	4770      	bx	lr
 8018076:	bf00      	nop
 8018078:	20000148 	.word	0x20000148
 801807c:	200001ac 	.word	0x200001ac

08018080 <_lseek_r>:
 8018080:	b538      	push	{r3, r4, r5, lr}
 8018082:	4605      	mov	r5, r0
 8018084:	4608      	mov	r0, r1
 8018086:	4611      	mov	r1, r2
 8018088:	2200      	movs	r2, #0
 801808a:	4c05      	ldr	r4, [pc, #20]	; (80180a0 <_lseek_r+0x20>)
 801808c:	6022      	str	r2, [r4, #0]
 801808e:	461a      	mov	r2, r3
 8018090:	f7eb fe53 	bl	8003d3a <_lseek>
 8018094:	1c43      	adds	r3, r0, #1
 8018096:	d102      	bne.n	801809e <_lseek_r+0x1e>
 8018098:	6823      	ldr	r3, [r4, #0]
 801809a:	b103      	cbz	r3, 801809e <_lseek_r+0x1e>
 801809c:	602b      	str	r3, [r5, #0]
 801809e:	bd38      	pop	{r3, r4, r5, pc}
 80180a0:	20009e00 	.word	0x20009e00

080180a4 <__swhatbuf_r>:
 80180a4:	b570      	push	{r4, r5, r6, lr}
 80180a6:	460e      	mov	r6, r1
 80180a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180ac:	b096      	sub	sp, #88	; 0x58
 80180ae:	2900      	cmp	r1, #0
 80180b0:	4614      	mov	r4, r2
 80180b2:	461d      	mov	r5, r3
 80180b4:	da07      	bge.n	80180c6 <__swhatbuf_r+0x22>
 80180b6:	2300      	movs	r3, #0
 80180b8:	602b      	str	r3, [r5, #0]
 80180ba:	89b3      	ldrh	r3, [r6, #12]
 80180bc:	061a      	lsls	r2, r3, #24
 80180be:	d410      	bmi.n	80180e2 <__swhatbuf_r+0x3e>
 80180c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180c4:	e00e      	b.n	80180e4 <__swhatbuf_r+0x40>
 80180c6:	466a      	mov	r2, sp
 80180c8:	f001 fbdc 	bl	8019884 <_fstat_r>
 80180cc:	2800      	cmp	r0, #0
 80180ce:	dbf2      	blt.n	80180b6 <__swhatbuf_r+0x12>
 80180d0:	9a01      	ldr	r2, [sp, #4]
 80180d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80180d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80180da:	425a      	negs	r2, r3
 80180dc:	415a      	adcs	r2, r3
 80180de:	602a      	str	r2, [r5, #0]
 80180e0:	e7ee      	b.n	80180c0 <__swhatbuf_r+0x1c>
 80180e2:	2340      	movs	r3, #64	; 0x40
 80180e4:	2000      	movs	r0, #0
 80180e6:	6023      	str	r3, [r4, #0]
 80180e8:	b016      	add	sp, #88	; 0x58
 80180ea:	bd70      	pop	{r4, r5, r6, pc}

080180ec <__smakebuf_r>:
 80180ec:	898b      	ldrh	r3, [r1, #12]
 80180ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80180f0:	079d      	lsls	r5, r3, #30
 80180f2:	4606      	mov	r6, r0
 80180f4:	460c      	mov	r4, r1
 80180f6:	d507      	bpl.n	8018108 <__smakebuf_r+0x1c>
 80180f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80180fc:	6023      	str	r3, [r4, #0]
 80180fe:	6123      	str	r3, [r4, #16]
 8018100:	2301      	movs	r3, #1
 8018102:	6163      	str	r3, [r4, #20]
 8018104:	b002      	add	sp, #8
 8018106:	bd70      	pop	{r4, r5, r6, pc}
 8018108:	ab01      	add	r3, sp, #4
 801810a:	466a      	mov	r2, sp
 801810c:	f7ff ffca 	bl	80180a4 <__swhatbuf_r>
 8018110:	9900      	ldr	r1, [sp, #0]
 8018112:	4605      	mov	r5, r0
 8018114:	4630      	mov	r0, r6
 8018116:	f000 fca3 	bl	8018a60 <_malloc_r>
 801811a:	b948      	cbnz	r0, 8018130 <__smakebuf_r+0x44>
 801811c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018120:	059a      	lsls	r2, r3, #22
 8018122:	d4ef      	bmi.n	8018104 <__smakebuf_r+0x18>
 8018124:	f023 0303 	bic.w	r3, r3, #3
 8018128:	f043 0302 	orr.w	r3, r3, #2
 801812c:	81a3      	strh	r3, [r4, #12]
 801812e:	e7e3      	b.n	80180f8 <__smakebuf_r+0xc>
 8018130:	4b0d      	ldr	r3, [pc, #52]	; (8018168 <__smakebuf_r+0x7c>)
 8018132:	62b3      	str	r3, [r6, #40]	; 0x28
 8018134:	89a3      	ldrh	r3, [r4, #12]
 8018136:	6020      	str	r0, [r4, #0]
 8018138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801813c:	81a3      	strh	r3, [r4, #12]
 801813e:	9b00      	ldr	r3, [sp, #0]
 8018140:	6120      	str	r0, [r4, #16]
 8018142:	6163      	str	r3, [r4, #20]
 8018144:	9b01      	ldr	r3, [sp, #4]
 8018146:	b15b      	cbz	r3, 8018160 <__smakebuf_r+0x74>
 8018148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801814c:	4630      	mov	r0, r6
 801814e:	f001 fbab 	bl	80198a8 <_isatty_r>
 8018152:	b128      	cbz	r0, 8018160 <__smakebuf_r+0x74>
 8018154:	89a3      	ldrh	r3, [r4, #12]
 8018156:	f023 0303 	bic.w	r3, r3, #3
 801815a:	f043 0301 	orr.w	r3, r3, #1
 801815e:	81a3      	strh	r3, [r4, #12]
 8018160:	89a3      	ldrh	r3, [r4, #12]
 8018162:	431d      	orrs	r5, r3
 8018164:	81a5      	strh	r5, [r4, #12]
 8018166:	e7cd      	b.n	8018104 <__smakebuf_r+0x18>
 8018168:	080178a1 	.word	0x080178a1

0801816c <malloc>:
 801816c:	4b02      	ldr	r3, [pc, #8]	; (8018178 <malloc+0xc>)
 801816e:	4601      	mov	r1, r0
 8018170:	6818      	ldr	r0, [r3, #0]
 8018172:	f000 bc75 	b.w	8018a60 <_malloc_r>
 8018176:	bf00      	nop
 8018178:	20000148 	.word	0x20000148

0801817c <__ascii_mbtowc>:
 801817c:	b082      	sub	sp, #8
 801817e:	b901      	cbnz	r1, 8018182 <__ascii_mbtowc+0x6>
 8018180:	a901      	add	r1, sp, #4
 8018182:	b142      	cbz	r2, 8018196 <__ascii_mbtowc+0x1a>
 8018184:	b14b      	cbz	r3, 801819a <__ascii_mbtowc+0x1e>
 8018186:	7813      	ldrb	r3, [r2, #0]
 8018188:	600b      	str	r3, [r1, #0]
 801818a:	7812      	ldrb	r2, [r2, #0]
 801818c:	1c10      	adds	r0, r2, #0
 801818e:	bf18      	it	ne
 8018190:	2001      	movne	r0, #1
 8018192:	b002      	add	sp, #8
 8018194:	4770      	bx	lr
 8018196:	4610      	mov	r0, r2
 8018198:	e7fb      	b.n	8018192 <__ascii_mbtowc+0x16>
 801819a:	f06f 0001 	mvn.w	r0, #1
 801819e:	e7f8      	b.n	8018192 <__ascii_mbtowc+0x16>

080181a0 <memchr>:
 80181a0:	b510      	push	{r4, lr}
 80181a2:	b2c9      	uxtb	r1, r1
 80181a4:	4402      	add	r2, r0
 80181a6:	4290      	cmp	r0, r2
 80181a8:	4603      	mov	r3, r0
 80181aa:	d101      	bne.n	80181b0 <memchr+0x10>
 80181ac:	2300      	movs	r3, #0
 80181ae:	e003      	b.n	80181b8 <memchr+0x18>
 80181b0:	781c      	ldrb	r4, [r3, #0]
 80181b2:	3001      	adds	r0, #1
 80181b4:	428c      	cmp	r4, r1
 80181b6:	d1f6      	bne.n	80181a6 <memchr+0x6>
 80181b8:	4618      	mov	r0, r3
 80181ba:	bd10      	pop	{r4, pc}

080181bc <_Balloc>:
 80181bc:	b570      	push	{r4, r5, r6, lr}
 80181be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80181c0:	4604      	mov	r4, r0
 80181c2:	460e      	mov	r6, r1
 80181c4:	b93d      	cbnz	r5, 80181d6 <_Balloc+0x1a>
 80181c6:	2010      	movs	r0, #16
 80181c8:	f7ff ffd0 	bl	801816c <malloc>
 80181cc:	6260      	str	r0, [r4, #36]	; 0x24
 80181ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80181d2:	6005      	str	r5, [r0, #0]
 80181d4:	60c5      	str	r5, [r0, #12]
 80181d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80181d8:	68eb      	ldr	r3, [r5, #12]
 80181da:	b183      	cbz	r3, 80181fe <_Balloc+0x42>
 80181dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181de:	68db      	ldr	r3, [r3, #12]
 80181e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80181e4:	b9b8      	cbnz	r0, 8018216 <_Balloc+0x5a>
 80181e6:	2101      	movs	r1, #1
 80181e8:	fa01 f506 	lsl.w	r5, r1, r6
 80181ec:	1d6a      	adds	r2, r5, #5
 80181ee:	0092      	lsls	r2, r2, #2
 80181f0:	4620      	mov	r0, r4
 80181f2:	f000 fbdb 	bl	80189ac <_calloc_r>
 80181f6:	b160      	cbz	r0, 8018212 <_Balloc+0x56>
 80181f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80181fc:	e00e      	b.n	801821c <_Balloc+0x60>
 80181fe:	2221      	movs	r2, #33	; 0x21
 8018200:	2104      	movs	r1, #4
 8018202:	4620      	mov	r0, r4
 8018204:	f000 fbd2 	bl	80189ac <_calloc_r>
 8018208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801820a:	60e8      	str	r0, [r5, #12]
 801820c:	68db      	ldr	r3, [r3, #12]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d1e4      	bne.n	80181dc <_Balloc+0x20>
 8018212:	2000      	movs	r0, #0
 8018214:	bd70      	pop	{r4, r5, r6, pc}
 8018216:	6802      	ldr	r2, [r0, #0]
 8018218:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801821c:	2300      	movs	r3, #0
 801821e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018222:	e7f7      	b.n	8018214 <_Balloc+0x58>

08018224 <_Bfree>:
 8018224:	b570      	push	{r4, r5, r6, lr}
 8018226:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018228:	4606      	mov	r6, r0
 801822a:	460d      	mov	r5, r1
 801822c:	b93c      	cbnz	r4, 801823e <_Bfree+0x1a>
 801822e:	2010      	movs	r0, #16
 8018230:	f7ff ff9c 	bl	801816c <malloc>
 8018234:	6270      	str	r0, [r6, #36]	; 0x24
 8018236:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801823a:	6004      	str	r4, [r0, #0]
 801823c:	60c4      	str	r4, [r0, #12]
 801823e:	b13d      	cbz	r5, 8018250 <_Bfree+0x2c>
 8018240:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018242:	686a      	ldr	r2, [r5, #4]
 8018244:	68db      	ldr	r3, [r3, #12]
 8018246:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801824a:	6029      	str	r1, [r5, #0]
 801824c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018250:	bd70      	pop	{r4, r5, r6, pc}

08018252 <__multadd>:
 8018252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018256:	461f      	mov	r7, r3
 8018258:	4606      	mov	r6, r0
 801825a:	460c      	mov	r4, r1
 801825c:	2300      	movs	r3, #0
 801825e:	690d      	ldr	r5, [r1, #16]
 8018260:	f101 0c14 	add.w	ip, r1, #20
 8018264:	f8dc 0000 	ldr.w	r0, [ip]
 8018268:	3301      	adds	r3, #1
 801826a:	b281      	uxth	r1, r0
 801826c:	fb02 7101 	mla	r1, r2, r1, r7
 8018270:	0c00      	lsrs	r0, r0, #16
 8018272:	0c0f      	lsrs	r7, r1, #16
 8018274:	fb02 7000 	mla	r0, r2, r0, r7
 8018278:	b289      	uxth	r1, r1
 801827a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801827e:	429d      	cmp	r5, r3
 8018280:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018284:	f84c 1b04 	str.w	r1, [ip], #4
 8018288:	dcec      	bgt.n	8018264 <__multadd+0x12>
 801828a:	b1d7      	cbz	r7, 80182c2 <__multadd+0x70>
 801828c:	68a3      	ldr	r3, [r4, #8]
 801828e:	42ab      	cmp	r3, r5
 8018290:	dc12      	bgt.n	80182b8 <__multadd+0x66>
 8018292:	6861      	ldr	r1, [r4, #4]
 8018294:	4630      	mov	r0, r6
 8018296:	3101      	adds	r1, #1
 8018298:	f7ff ff90 	bl	80181bc <_Balloc>
 801829c:	4680      	mov	r8, r0
 801829e:	6922      	ldr	r2, [r4, #16]
 80182a0:	f104 010c 	add.w	r1, r4, #12
 80182a4:	3202      	adds	r2, #2
 80182a6:	0092      	lsls	r2, r2, #2
 80182a8:	300c      	adds	r0, #12
 80182aa:	f7fc fc9f 	bl	8014bec <memcpy>
 80182ae:	4621      	mov	r1, r4
 80182b0:	4630      	mov	r0, r6
 80182b2:	f7ff ffb7 	bl	8018224 <_Bfree>
 80182b6:	4644      	mov	r4, r8
 80182b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80182bc:	3501      	adds	r5, #1
 80182be:	615f      	str	r7, [r3, #20]
 80182c0:	6125      	str	r5, [r4, #16]
 80182c2:	4620      	mov	r0, r4
 80182c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080182c8 <__s2b>:
 80182c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182cc:	4615      	mov	r5, r2
 80182ce:	2209      	movs	r2, #9
 80182d0:	461f      	mov	r7, r3
 80182d2:	3308      	adds	r3, #8
 80182d4:	460c      	mov	r4, r1
 80182d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80182da:	4606      	mov	r6, r0
 80182dc:	2201      	movs	r2, #1
 80182de:	2100      	movs	r1, #0
 80182e0:	429a      	cmp	r2, r3
 80182e2:	db20      	blt.n	8018326 <__s2b+0x5e>
 80182e4:	4630      	mov	r0, r6
 80182e6:	f7ff ff69 	bl	80181bc <_Balloc>
 80182ea:	9b08      	ldr	r3, [sp, #32]
 80182ec:	2d09      	cmp	r5, #9
 80182ee:	6143      	str	r3, [r0, #20]
 80182f0:	f04f 0301 	mov.w	r3, #1
 80182f4:	6103      	str	r3, [r0, #16]
 80182f6:	dd19      	ble.n	801832c <__s2b+0x64>
 80182f8:	f104 0809 	add.w	r8, r4, #9
 80182fc:	46c1      	mov	r9, r8
 80182fe:	442c      	add	r4, r5
 8018300:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018304:	4601      	mov	r1, r0
 8018306:	3b30      	subs	r3, #48	; 0x30
 8018308:	220a      	movs	r2, #10
 801830a:	4630      	mov	r0, r6
 801830c:	f7ff ffa1 	bl	8018252 <__multadd>
 8018310:	45a1      	cmp	r9, r4
 8018312:	d1f5      	bne.n	8018300 <__s2b+0x38>
 8018314:	eb08 0405 	add.w	r4, r8, r5
 8018318:	3c08      	subs	r4, #8
 801831a:	1b2d      	subs	r5, r5, r4
 801831c:	1963      	adds	r3, r4, r5
 801831e:	42bb      	cmp	r3, r7
 8018320:	db07      	blt.n	8018332 <__s2b+0x6a>
 8018322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018326:	0052      	lsls	r2, r2, #1
 8018328:	3101      	adds	r1, #1
 801832a:	e7d9      	b.n	80182e0 <__s2b+0x18>
 801832c:	340a      	adds	r4, #10
 801832e:	2509      	movs	r5, #9
 8018330:	e7f3      	b.n	801831a <__s2b+0x52>
 8018332:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018336:	4601      	mov	r1, r0
 8018338:	3b30      	subs	r3, #48	; 0x30
 801833a:	220a      	movs	r2, #10
 801833c:	4630      	mov	r0, r6
 801833e:	f7ff ff88 	bl	8018252 <__multadd>
 8018342:	e7eb      	b.n	801831c <__s2b+0x54>

08018344 <__hi0bits>:
 8018344:	0c02      	lsrs	r2, r0, #16
 8018346:	0412      	lsls	r2, r2, #16
 8018348:	4603      	mov	r3, r0
 801834a:	b9b2      	cbnz	r2, 801837a <__hi0bits+0x36>
 801834c:	0403      	lsls	r3, r0, #16
 801834e:	2010      	movs	r0, #16
 8018350:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018354:	bf04      	itt	eq
 8018356:	021b      	lsleq	r3, r3, #8
 8018358:	3008      	addeq	r0, #8
 801835a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801835e:	bf04      	itt	eq
 8018360:	011b      	lsleq	r3, r3, #4
 8018362:	3004      	addeq	r0, #4
 8018364:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018368:	bf04      	itt	eq
 801836a:	009b      	lsleq	r3, r3, #2
 801836c:	3002      	addeq	r0, #2
 801836e:	2b00      	cmp	r3, #0
 8018370:	db06      	blt.n	8018380 <__hi0bits+0x3c>
 8018372:	005b      	lsls	r3, r3, #1
 8018374:	d503      	bpl.n	801837e <__hi0bits+0x3a>
 8018376:	3001      	adds	r0, #1
 8018378:	4770      	bx	lr
 801837a:	2000      	movs	r0, #0
 801837c:	e7e8      	b.n	8018350 <__hi0bits+0xc>
 801837e:	2020      	movs	r0, #32
 8018380:	4770      	bx	lr

08018382 <__lo0bits>:
 8018382:	6803      	ldr	r3, [r0, #0]
 8018384:	4601      	mov	r1, r0
 8018386:	f013 0207 	ands.w	r2, r3, #7
 801838a:	d00b      	beq.n	80183a4 <__lo0bits+0x22>
 801838c:	07da      	lsls	r2, r3, #31
 801838e:	d423      	bmi.n	80183d8 <__lo0bits+0x56>
 8018390:	0798      	lsls	r0, r3, #30
 8018392:	bf49      	itett	mi
 8018394:	085b      	lsrmi	r3, r3, #1
 8018396:	089b      	lsrpl	r3, r3, #2
 8018398:	2001      	movmi	r0, #1
 801839a:	600b      	strmi	r3, [r1, #0]
 801839c:	bf5c      	itt	pl
 801839e:	600b      	strpl	r3, [r1, #0]
 80183a0:	2002      	movpl	r0, #2
 80183a2:	4770      	bx	lr
 80183a4:	b298      	uxth	r0, r3
 80183a6:	b9a8      	cbnz	r0, 80183d4 <__lo0bits+0x52>
 80183a8:	2010      	movs	r0, #16
 80183aa:	0c1b      	lsrs	r3, r3, #16
 80183ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80183b0:	bf04      	itt	eq
 80183b2:	0a1b      	lsreq	r3, r3, #8
 80183b4:	3008      	addeq	r0, #8
 80183b6:	071a      	lsls	r2, r3, #28
 80183b8:	bf04      	itt	eq
 80183ba:	091b      	lsreq	r3, r3, #4
 80183bc:	3004      	addeq	r0, #4
 80183be:	079a      	lsls	r2, r3, #30
 80183c0:	bf04      	itt	eq
 80183c2:	089b      	lsreq	r3, r3, #2
 80183c4:	3002      	addeq	r0, #2
 80183c6:	07da      	lsls	r2, r3, #31
 80183c8:	d402      	bmi.n	80183d0 <__lo0bits+0x4e>
 80183ca:	085b      	lsrs	r3, r3, #1
 80183cc:	d006      	beq.n	80183dc <__lo0bits+0x5a>
 80183ce:	3001      	adds	r0, #1
 80183d0:	600b      	str	r3, [r1, #0]
 80183d2:	4770      	bx	lr
 80183d4:	4610      	mov	r0, r2
 80183d6:	e7e9      	b.n	80183ac <__lo0bits+0x2a>
 80183d8:	2000      	movs	r0, #0
 80183da:	4770      	bx	lr
 80183dc:	2020      	movs	r0, #32
 80183de:	4770      	bx	lr

080183e0 <__i2b>:
 80183e0:	b510      	push	{r4, lr}
 80183e2:	460c      	mov	r4, r1
 80183e4:	2101      	movs	r1, #1
 80183e6:	f7ff fee9 	bl	80181bc <_Balloc>
 80183ea:	2201      	movs	r2, #1
 80183ec:	6144      	str	r4, [r0, #20]
 80183ee:	6102      	str	r2, [r0, #16]
 80183f0:	bd10      	pop	{r4, pc}

080183f2 <__multiply>:
 80183f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183f6:	4614      	mov	r4, r2
 80183f8:	690a      	ldr	r2, [r1, #16]
 80183fa:	6923      	ldr	r3, [r4, #16]
 80183fc:	4688      	mov	r8, r1
 80183fe:	429a      	cmp	r2, r3
 8018400:	bfbe      	ittt	lt
 8018402:	460b      	movlt	r3, r1
 8018404:	46a0      	movlt	r8, r4
 8018406:	461c      	movlt	r4, r3
 8018408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801840c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018410:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018414:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018418:	eb07 0609 	add.w	r6, r7, r9
 801841c:	42b3      	cmp	r3, r6
 801841e:	bfb8      	it	lt
 8018420:	3101      	addlt	r1, #1
 8018422:	f7ff fecb 	bl	80181bc <_Balloc>
 8018426:	f100 0514 	add.w	r5, r0, #20
 801842a:	462b      	mov	r3, r5
 801842c:	2200      	movs	r2, #0
 801842e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018432:	4573      	cmp	r3, lr
 8018434:	d316      	bcc.n	8018464 <__multiply+0x72>
 8018436:	f104 0214 	add.w	r2, r4, #20
 801843a:	f108 0114 	add.w	r1, r8, #20
 801843e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018442:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018446:	9300      	str	r3, [sp, #0]
 8018448:	9b00      	ldr	r3, [sp, #0]
 801844a:	9201      	str	r2, [sp, #4]
 801844c:	4293      	cmp	r3, r2
 801844e:	d80c      	bhi.n	801846a <__multiply+0x78>
 8018450:	2e00      	cmp	r6, #0
 8018452:	dd03      	ble.n	801845c <__multiply+0x6a>
 8018454:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018458:	2b00      	cmp	r3, #0
 801845a:	d05d      	beq.n	8018518 <__multiply+0x126>
 801845c:	6106      	str	r6, [r0, #16]
 801845e:	b003      	add	sp, #12
 8018460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018464:	f843 2b04 	str.w	r2, [r3], #4
 8018468:	e7e3      	b.n	8018432 <__multiply+0x40>
 801846a:	f8b2 b000 	ldrh.w	fp, [r2]
 801846e:	f1bb 0f00 	cmp.w	fp, #0
 8018472:	d023      	beq.n	80184bc <__multiply+0xca>
 8018474:	4689      	mov	r9, r1
 8018476:	46ac      	mov	ip, r5
 8018478:	f04f 0800 	mov.w	r8, #0
 801847c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018480:	f8dc a000 	ldr.w	sl, [ip]
 8018484:	b2a3      	uxth	r3, r4
 8018486:	fa1f fa8a 	uxth.w	sl, sl
 801848a:	fb0b a303 	mla	r3, fp, r3, sl
 801848e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018492:	f8dc 4000 	ldr.w	r4, [ip]
 8018496:	4443      	add	r3, r8
 8018498:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801849c:	fb0b 840a 	mla	r4, fp, sl, r8
 80184a0:	46e2      	mov	sl, ip
 80184a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80184ac:	454f      	cmp	r7, r9
 80184ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80184b2:	f84a 3b04 	str.w	r3, [sl], #4
 80184b6:	d82b      	bhi.n	8018510 <__multiply+0x11e>
 80184b8:	f8cc 8004 	str.w	r8, [ip, #4]
 80184bc:	9b01      	ldr	r3, [sp, #4]
 80184be:	3204      	adds	r2, #4
 80184c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80184c4:	f1ba 0f00 	cmp.w	sl, #0
 80184c8:	d020      	beq.n	801850c <__multiply+0x11a>
 80184ca:	4689      	mov	r9, r1
 80184cc:	46a8      	mov	r8, r5
 80184ce:	f04f 0b00 	mov.w	fp, #0
 80184d2:	682b      	ldr	r3, [r5, #0]
 80184d4:	f8b9 c000 	ldrh.w	ip, [r9]
 80184d8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	fb0a 440c 	mla	r4, sl, ip, r4
 80184e2:	46c4      	mov	ip, r8
 80184e4:	445c      	add	r4, fp
 80184e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80184ea:	f84c 3b04 	str.w	r3, [ip], #4
 80184ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80184f2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80184f6:	0c1b      	lsrs	r3, r3, #16
 80184f8:	fb0a b303 	mla	r3, sl, r3, fp
 80184fc:	454f      	cmp	r7, r9
 80184fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018502:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018506:	d805      	bhi.n	8018514 <__multiply+0x122>
 8018508:	f8c8 3004 	str.w	r3, [r8, #4]
 801850c:	3504      	adds	r5, #4
 801850e:	e79b      	b.n	8018448 <__multiply+0x56>
 8018510:	46d4      	mov	ip, sl
 8018512:	e7b3      	b.n	801847c <__multiply+0x8a>
 8018514:	46e0      	mov	r8, ip
 8018516:	e7dd      	b.n	80184d4 <__multiply+0xe2>
 8018518:	3e01      	subs	r6, #1
 801851a:	e799      	b.n	8018450 <__multiply+0x5e>

0801851c <__pow5mult>:
 801851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018520:	4615      	mov	r5, r2
 8018522:	f012 0203 	ands.w	r2, r2, #3
 8018526:	4606      	mov	r6, r0
 8018528:	460f      	mov	r7, r1
 801852a:	d007      	beq.n	801853c <__pow5mult+0x20>
 801852c:	4c21      	ldr	r4, [pc, #132]	; (80185b4 <__pow5mult+0x98>)
 801852e:	3a01      	subs	r2, #1
 8018530:	2300      	movs	r3, #0
 8018532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018536:	f7ff fe8c 	bl	8018252 <__multadd>
 801853a:	4607      	mov	r7, r0
 801853c:	10ad      	asrs	r5, r5, #2
 801853e:	d035      	beq.n	80185ac <__pow5mult+0x90>
 8018540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018542:	b93c      	cbnz	r4, 8018554 <__pow5mult+0x38>
 8018544:	2010      	movs	r0, #16
 8018546:	f7ff fe11 	bl	801816c <malloc>
 801854a:	6270      	str	r0, [r6, #36]	; 0x24
 801854c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018550:	6004      	str	r4, [r0, #0]
 8018552:	60c4      	str	r4, [r0, #12]
 8018554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801855c:	b94c      	cbnz	r4, 8018572 <__pow5mult+0x56>
 801855e:	f240 2171 	movw	r1, #625	; 0x271
 8018562:	4630      	mov	r0, r6
 8018564:	f7ff ff3c 	bl	80183e0 <__i2b>
 8018568:	2300      	movs	r3, #0
 801856a:	4604      	mov	r4, r0
 801856c:	f8c8 0008 	str.w	r0, [r8, #8]
 8018570:	6003      	str	r3, [r0, #0]
 8018572:	f04f 0800 	mov.w	r8, #0
 8018576:	07eb      	lsls	r3, r5, #31
 8018578:	d50a      	bpl.n	8018590 <__pow5mult+0x74>
 801857a:	4639      	mov	r1, r7
 801857c:	4622      	mov	r2, r4
 801857e:	4630      	mov	r0, r6
 8018580:	f7ff ff37 	bl	80183f2 <__multiply>
 8018584:	4681      	mov	r9, r0
 8018586:	4639      	mov	r1, r7
 8018588:	4630      	mov	r0, r6
 801858a:	f7ff fe4b 	bl	8018224 <_Bfree>
 801858e:	464f      	mov	r7, r9
 8018590:	106d      	asrs	r5, r5, #1
 8018592:	d00b      	beq.n	80185ac <__pow5mult+0x90>
 8018594:	6820      	ldr	r0, [r4, #0]
 8018596:	b938      	cbnz	r0, 80185a8 <__pow5mult+0x8c>
 8018598:	4622      	mov	r2, r4
 801859a:	4621      	mov	r1, r4
 801859c:	4630      	mov	r0, r6
 801859e:	f7ff ff28 	bl	80183f2 <__multiply>
 80185a2:	6020      	str	r0, [r4, #0]
 80185a4:	f8c0 8000 	str.w	r8, [r0]
 80185a8:	4604      	mov	r4, r0
 80185aa:	e7e4      	b.n	8018576 <__pow5mult+0x5a>
 80185ac:	4638      	mov	r0, r7
 80185ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185b2:	bf00      	nop
 80185b4:	0801e520 	.word	0x0801e520

080185b8 <__lshift>:
 80185b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185bc:	460c      	mov	r4, r1
 80185be:	4607      	mov	r7, r0
 80185c0:	4616      	mov	r6, r2
 80185c2:	6923      	ldr	r3, [r4, #16]
 80185c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80185c8:	eb0a 0903 	add.w	r9, sl, r3
 80185cc:	6849      	ldr	r1, [r1, #4]
 80185ce:	68a3      	ldr	r3, [r4, #8]
 80185d0:	f109 0501 	add.w	r5, r9, #1
 80185d4:	42ab      	cmp	r3, r5
 80185d6:	db32      	blt.n	801863e <__lshift+0x86>
 80185d8:	4638      	mov	r0, r7
 80185da:	f7ff fdef 	bl	80181bc <_Balloc>
 80185de:	2300      	movs	r3, #0
 80185e0:	4680      	mov	r8, r0
 80185e2:	461a      	mov	r2, r3
 80185e4:	f100 0114 	add.w	r1, r0, #20
 80185e8:	4553      	cmp	r3, sl
 80185ea:	db2b      	blt.n	8018644 <__lshift+0x8c>
 80185ec:	6920      	ldr	r0, [r4, #16]
 80185ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80185f2:	f104 0314 	add.w	r3, r4, #20
 80185f6:	f016 021f 	ands.w	r2, r6, #31
 80185fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80185fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018602:	d025      	beq.n	8018650 <__lshift+0x98>
 8018604:	2000      	movs	r0, #0
 8018606:	f1c2 0e20 	rsb	lr, r2, #32
 801860a:	468a      	mov	sl, r1
 801860c:	681e      	ldr	r6, [r3, #0]
 801860e:	4096      	lsls	r6, r2
 8018610:	4330      	orrs	r0, r6
 8018612:	f84a 0b04 	str.w	r0, [sl], #4
 8018616:	f853 0b04 	ldr.w	r0, [r3], #4
 801861a:	459c      	cmp	ip, r3
 801861c:	fa20 f00e 	lsr.w	r0, r0, lr
 8018620:	d814      	bhi.n	801864c <__lshift+0x94>
 8018622:	6048      	str	r0, [r1, #4]
 8018624:	b108      	cbz	r0, 801862a <__lshift+0x72>
 8018626:	f109 0502 	add.w	r5, r9, #2
 801862a:	3d01      	subs	r5, #1
 801862c:	4638      	mov	r0, r7
 801862e:	f8c8 5010 	str.w	r5, [r8, #16]
 8018632:	4621      	mov	r1, r4
 8018634:	f7ff fdf6 	bl	8018224 <_Bfree>
 8018638:	4640      	mov	r0, r8
 801863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801863e:	3101      	adds	r1, #1
 8018640:	005b      	lsls	r3, r3, #1
 8018642:	e7c7      	b.n	80185d4 <__lshift+0x1c>
 8018644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018648:	3301      	adds	r3, #1
 801864a:	e7cd      	b.n	80185e8 <__lshift+0x30>
 801864c:	4651      	mov	r1, sl
 801864e:	e7dc      	b.n	801860a <__lshift+0x52>
 8018650:	3904      	subs	r1, #4
 8018652:	f853 2b04 	ldr.w	r2, [r3], #4
 8018656:	459c      	cmp	ip, r3
 8018658:	f841 2f04 	str.w	r2, [r1, #4]!
 801865c:	d8f9      	bhi.n	8018652 <__lshift+0x9a>
 801865e:	e7e4      	b.n	801862a <__lshift+0x72>

08018660 <__mcmp>:
 8018660:	6903      	ldr	r3, [r0, #16]
 8018662:	690a      	ldr	r2, [r1, #16]
 8018664:	b530      	push	{r4, r5, lr}
 8018666:	1a9b      	subs	r3, r3, r2
 8018668:	d10c      	bne.n	8018684 <__mcmp+0x24>
 801866a:	0092      	lsls	r2, r2, #2
 801866c:	3014      	adds	r0, #20
 801866e:	3114      	adds	r1, #20
 8018670:	1884      	adds	r4, r0, r2
 8018672:	4411      	add	r1, r2
 8018674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801867c:	4295      	cmp	r5, r2
 801867e:	d003      	beq.n	8018688 <__mcmp+0x28>
 8018680:	d305      	bcc.n	801868e <__mcmp+0x2e>
 8018682:	2301      	movs	r3, #1
 8018684:	4618      	mov	r0, r3
 8018686:	bd30      	pop	{r4, r5, pc}
 8018688:	42a0      	cmp	r0, r4
 801868a:	d3f3      	bcc.n	8018674 <__mcmp+0x14>
 801868c:	e7fa      	b.n	8018684 <__mcmp+0x24>
 801868e:	f04f 33ff 	mov.w	r3, #4294967295
 8018692:	e7f7      	b.n	8018684 <__mcmp+0x24>

08018694 <__mdiff>:
 8018694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018698:	460d      	mov	r5, r1
 801869a:	4607      	mov	r7, r0
 801869c:	4611      	mov	r1, r2
 801869e:	4628      	mov	r0, r5
 80186a0:	4614      	mov	r4, r2
 80186a2:	f7ff ffdd 	bl	8018660 <__mcmp>
 80186a6:	1e06      	subs	r6, r0, #0
 80186a8:	d108      	bne.n	80186bc <__mdiff+0x28>
 80186aa:	4631      	mov	r1, r6
 80186ac:	4638      	mov	r0, r7
 80186ae:	f7ff fd85 	bl	80181bc <_Balloc>
 80186b2:	2301      	movs	r3, #1
 80186b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80186b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186bc:	bfa4      	itt	ge
 80186be:	4623      	movge	r3, r4
 80186c0:	462c      	movge	r4, r5
 80186c2:	4638      	mov	r0, r7
 80186c4:	6861      	ldr	r1, [r4, #4]
 80186c6:	bfa6      	itte	ge
 80186c8:	461d      	movge	r5, r3
 80186ca:	2600      	movge	r6, #0
 80186cc:	2601      	movlt	r6, #1
 80186ce:	f7ff fd75 	bl	80181bc <_Balloc>
 80186d2:	f04f 0e00 	mov.w	lr, #0
 80186d6:	60c6      	str	r6, [r0, #12]
 80186d8:	692b      	ldr	r3, [r5, #16]
 80186da:	6926      	ldr	r6, [r4, #16]
 80186dc:	f104 0214 	add.w	r2, r4, #20
 80186e0:	f105 0914 	add.w	r9, r5, #20
 80186e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80186e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80186ec:	f100 0114 	add.w	r1, r0, #20
 80186f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80186f4:	f859 5b04 	ldr.w	r5, [r9], #4
 80186f8:	fa1f f38a 	uxth.w	r3, sl
 80186fc:	4473      	add	r3, lr
 80186fe:	b2ac      	uxth	r4, r5
 8018700:	1b1b      	subs	r3, r3, r4
 8018702:	0c2c      	lsrs	r4, r5, #16
 8018704:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8018708:	eb04 4423 	add.w	r4, r4, r3, asr #16
 801870c:	b29b      	uxth	r3, r3
 801870e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8018712:	45c8      	cmp	r8, r9
 8018714:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8018718:	4694      	mov	ip, r2
 801871a:	f841 4b04 	str.w	r4, [r1], #4
 801871e:	d8e7      	bhi.n	80186f0 <__mdiff+0x5c>
 8018720:	45bc      	cmp	ip, r7
 8018722:	d304      	bcc.n	801872e <__mdiff+0x9a>
 8018724:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8018728:	b183      	cbz	r3, 801874c <__mdiff+0xb8>
 801872a:	6106      	str	r6, [r0, #16]
 801872c:	e7c4      	b.n	80186b8 <__mdiff+0x24>
 801872e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8018732:	b2a2      	uxth	r2, r4
 8018734:	4472      	add	r2, lr
 8018736:	1413      	asrs	r3, r2, #16
 8018738:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801873c:	b292      	uxth	r2, r2
 801873e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018742:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018746:	f841 2b04 	str.w	r2, [r1], #4
 801874a:	e7e9      	b.n	8018720 <__mdiff+0x8c>
 801874c:	3e01      	subs	r6, #1
 801874e:	e7e9      	b.n	8018724 <__mdiff+0x90>

08018750 <__ulp>:
 8018750:	4b10      	ldr	r3, [pc, #64]	; (8018794 <__ulp+0x44>)
 8018752:	400b      	ands	r3, r1
 8018754:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018758:	2b00      	cmp	r3, #0
 801875a:	dd02      	ble.n	8018762 <__ulp+0x12>
 801875c:	2000      	movs	r0, #0
 801875e:	4619      	mov	r1, r3
 8018760:	4770      	bx	lr
 8018762:	425b      	negs	r3, r3
 8018764:	151b      	asrs	r3, r3, #20
 8018766:	2b13      	cmp	r3, #19
 8018768:	f04f 0000 	mov.w	r0, #0
 801876c:	f04f 0100 	mov.w	r1, #0
 8018770:	dc04      	bgt.n	801877c <__ulp+0x2c>
 8018772:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018776:	fa42 f103 	asr.w	r1, r2, r3
 801877a:	4770      	bx	lr
 801877c:	2201      	movs	r2, #1
 801877e:	3b14      	subs	r3, #20
 8018780:	2b1e      	cmp	r3, #30
 8018782:	bfce      	itee	gt
 8018784:	4613      	movgt	r3, r2
 8018786:	f1c3 031f 	rsble	r3, r3, #31
 801878a:	fa02 f303 	lslle.w	r3, r2, r3
 801878e:	4618      	mov	r0, r3
 8018790:	4770      	bx	lr
 8018792:	bf00      	nop
 8018794:	7ff00000 	.word	0x7ff00000

08018798 <__b2d>:
 8018798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801879c:	6907      	ldr	r7, [r0, #16]
 801879e:	f100 0914 	add.w	r9, r0, #20
 80187a2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80187a6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80187aa:	f1a7 0804 	sub.w	r8, r7, #4
 80187ae:	4630      	mov	r0, r6
 80187b0:	f7ff fdc8 	bl	8018344 <__hi0bits>
 80187b4:	f1c0 0320 	rsb	r3, r0, #32
 80187b8:	280a      	cmp	r0, #10
 80187ba:	600b      	str	r3, [r1, #0]
 80187bc:	491e      	ldr	r1, [pc, #120]	; (8018838 <__b2d+0xa0>)
 80187be:	dc17      	bgt.n	80187f0 <__b2d+0x58>
 80187c0:	45c1      	cmp	r9, r8
 80187c2:	bf28      	it	cs
 80187c4:	2200      	movcs	r2, #0
 80187c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80187ca:	fa26 f30c 	lsr.w	r3, r6, ip
 80187ce:	bf38      	it	cc
 80187d0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80187d4:	ea43 0501 	orr.w	r5, r3, r1
 80187d8:	f100 0315 	add.w	r3, r0, #21
 80187dc:	fa06 f303 	lsl.w	r3, r6, r3
 80187e0:	fa22 f20c 	lsr.w	r2, r2, ip
 80187e4:	ea43 0402 	orr.w	r4, r3, r2
 80187e8:	4620      	mov	r0, r4
 80187ea:	4629      	mov	r1, r5
 80187ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187f0:	45c1      	cmp	r9, r8
 80187f2:	bf3a      	itte	cc
 80187f4:	f1a7 0808 	subcc.w	r8, r7, #8
 80187f8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80187fc:	2200      	movcs	r2, #0
 80187fe:	f1b0 030b 	subs.w	r3, r0, #11
 8018802:	d015      	beq.n	8018830 <__b2d+0x98>
 8018804:	409e      	lsls	r6, r3
 8018806:	f1c3 0720 	rsb	r7, r3, #32
 801880a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 801880e:	fa22 f107 	lsr.w	r1, r2, r7
 8018812:	45c8      	cmp	r8, r9
 8018814:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8018818:	ea46 0501 	orr.w	r5, r6, r1
 801881c:	bf94      	ite	ls
 801881e:	2100      	movls	r1, #0
 8018820:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8018824:	fa02 f003 	lsl.w	r0, r2, r3
 8018828:	40f9      	lsrs	r1, r7
 801882a:	ea40 0401 	orr.w	r4, r0, r1
 801882e:	e7db      	b.n	80187e8 <__b2d+0x50>
 8018830:	ea46 0501 	orr.w	r5, r6, r1
 8018834:	4614      	mov	r4, r2
 8018836:	e7d7      	b.n	80187e8 <__b2d+0x50>
 8018838:	3ff00000 	.word	0x3ff00000

0801883c <__d2b>:
 801883c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018840:	461c      	mov	r4, r3
 8018842:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8018846:	2101      	movs	r1, #1
 8018848:	4690      	mov	r8, r2
 801884a:	f7ff fcb7 	bl	80181bc <_Balloc>
 801884e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8018852:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8018856:	4607      	mov	r7, r0
 8018858:	bb34      	cbnz	r4, 80188a8 <__d2b+0x6c>
 801885a:	9201      	str	r2, [sp, #4]
 801885c:	f1b8 0200 	subs.w	r2, r8, #0
 8018860:	d027      	beq.n	80188b2 <__d2b+0x76>
 8018862:	a802      	add	r0, sp, #8
 8018864:	f840 2d08 	str.w	r2, [r0, #-8]!
 8018868:	f7ff fd8b 	bl	8018382 <__lo0bits>
 801886c:	9900      	ldr	r1, [sp, #0]
 801886e:	b1f0      	cbz	r0, 80188ae <__d2b+0x72>
 8018870:	9a01      	ldr	r2, [sp, #4]
 8018872:	f1c0 0320 	rsb	r3, r0, #32
 8018876:	fa02 f303 	lsl.w	r3, r2, r3
 801887a:	430b      	orrs	r3, r1
 801887c:	40c2      	lsrs	r2, r0
 801887e:	617b      	str	r3, [r7, #20]
 8018880:	9201      	str	r2, [sp, #4]
 8018882:	9b01      	ldr	r3, [sp, #4]
 8018884:	2b00      	cmp	r3, #0
 8018886:	bf14      	ite	ne
 8018888:	2102      	movne	r1, #2
 801888a:	2101      	moveq	r1, #1
 801888c:	61bb      	str	r3, [r7, #24]
 801888e:	6139      	str	r1, [r7, #16]
 8018890:	b1c4      	cbz	r4, 80188c4 <__d2b+0x88>
 8018892:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018896:	4404      	add	r4, r0
 8018898:	6034      	str	r4, [r6, #0]
 801889a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801889e:	6028      	str	r0, [r5, #0]
 80188a0:	4638      	mov	r0, r7
 80188a2:	b002      	add	sp, #8
 80188a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80188ac:	e7d5      	b.n	801885a <__d2b+0x1e>
 80188ae:	6179      	str	r1, [r7, #20]
 80188b0:	e7e7      	b.n	8018882 <__d2b+0x46>
 80188b2:	a801      	add	r0, sp, #4
 80188b4:	f7ff fd65 	bl	8018382 <__lo0bits>
 80188b8:	2101      	movs	r1, #1
 80188ba:	9b01      	ldr	r3, [sp, #4]
 80188bc:	6139      	str	r1, [r7, #16]
 80188be:	617b      	str	r3, [r7, #20]
 80188c0:	3020      	adds	r0, #32
 80188c2:	e7e5      	b.n	8018890 <__d2b+0x54>
 80188c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80188c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80188cc:	6030      	str	r0, [r6, #0]
 80188ce:	6918      	ldr	r0, [r3, #16]
 80188d0:	f7ff fd38 	bl	8018344 <__hi0bits>
 80188d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80188d8:	e7e1      	b.n	801889e <__d2b+0x62>

080188da <__ratio>:
 80188da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188de:	4688      	mov	r8, r1
 80188e0:	4669      	mov	r1, sp
 80188e2:	4681      	mov	r9, r0
 80188e4:	f7ff ff58 	bl	8018798 <__b2d>
 80188e8:	468b      	mov	fp, r1
 80188ea:	4606      	mov	r6, r0
 80188ec:	460f      	mov	r7, r1
 80188ee:	4640      	mov	r0, r8
 80188f0:	a901      	add	r1, sp, #4
 80188f2:	f7ff ff51 	bl	8018798 <__b2d>
 80188f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80188fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80188fe:	460d      	mov	r5, r1
 8018900:	eba3 0c02 	sub.w	ip, r3, r2
 8018904:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018908:	1a9b      	subs	r3, r3, r2
 801890a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801890e:	2b00      	cmp	r3, #0
 8018910:	bfd5      	itete	le
 8018912:	460a      	movle	r2, r1
 8018914:	463a      	movgt	r2, r7
 8018916:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801891a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801891e:	bfd8      	it	le
 8018920:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8018924:	462b      	mov	r3, r5
 8018926:	4602      	mov	r2, r0
 8018928:	4659      	mov	r1, fp
 801892a:	4630      	mov	r0, r6
 801892c:	f7e7 ff20 	bl	8000770 <__aeabi_ddiv>
 8018930:	b003      	add	sp, #12
 8018932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018936 <__copybits>:
 8018936:	3901      	subs	r1, #1
 8018938:	b510      	push	{r4, lr}
 801893a:	1149      	asrs	r1, r1, #5
 801893c:	6914      	ldr	r4, [r2, #16]
 801893e:	3101      	adds	r1, #1
 8018940:	f102 0314 	add.w	r3, r2, #20
 8018944:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018948:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801894c:	42a3      	cmp	r3, r4
 801894e:	4602      	mov	r2, r0
 8018950:	d303      	bcc.n	801895a <__copybits+0x24>
 8018952:	2300      	movs	r3, #0
 8018954:	428a      	cmp	r2, r1
 8018956:	d305      	bcc.n	8018964 <__copybits+0x2e>
 8018958:	bd10      	pop	{r4, pc}
 801895a:	f853 2b04 	ldr.w	r2, [r3], #4
 801895e:	f840 2b04 	str.w	r2, [r0], #4
 8018962:	e7f3      	b.n	801894c <__copybits+0x16>
 8018964:	f842 3b04 	str.w	r3, [r2], #4
 8018968:	e7f4      	b.n	8018954 <__copybits+0x1e>

0801896a <__any_on>:
 801896a:	f100 0214 	add.w	r2, r0, #20
 801896e:	6900      	ldr	r0, [r0, #16]
 8018970:	114b      	asrs	r3, r1, #5
 8018972:	4298      	cmp	r0, r3
 8018974:	b510      	push	{r4, lr}
 8018976:	db11      	blt.n	801899c <__any_on+0x32>
 8018978:	dd0a      	ble.n	8018990 <__any_on+0x26>
 801897a:	f011 011f 	ands.w	r1, r1, #31
 801897e:	d007      	beq.n	8018990 <__any_on+0x26>
 8018980:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018984:	fa24 f001 	lsr.w	r0, r4, r1
 8018988:	fa00 f101 	lsl.w	r1, r0, r1
 801898c:	428c      	cmp	r4, r1
 801898e:	d10b      	bne.n	80189a8 <__any_on+0x3e>
 8018990:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018994:	4293      	cmp	r3, r2
 8018996:	d803      	bhi.n	80189a0 <__any_on+0x36>
 8018998:	2000      	movs	r0, #0
 801899a:	bd10      	pop	{r4, pc}
 801899c:	4603      	mov	r3, r0
 801899e:	e7f7      	b.n	8018990 <__any_on+0x26>
 80189a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80189a4:	2900      	cmp	r1, #0
 80189a6:	d0f5      	beq.n	8018994 <__any_on+0x2a>
 80189a8:	2001      	movs	r0, #1
 80189aa:	e7f6      	b.n	801899a <__any_on+0x30>

080189ac <_calloc_r>:
 80189ac:	b538      	push	{r3, r4, r5, lr}
 80189ae:	fb02 f401 	mul.w	r4, r2, r1
 80189b2:	4621      	mov	r1, r4
 80189b4:	f000 f854 	bl	8018a60 <_malloc_r>
 80189b8:	4605      	mov	r5, r0
 80189ba:	b118      	cbz	r0, 80189c4 <_calloc_r+0x18>
 80189bc:	4622      	mov	r2, r4
 80189be:	2100      	movs	r1, #0
 80189c0:	f7fc f938 	bl	8014c34 <memset>
 80189c4:	4628      	mov	r0, r5
 80189c6:	bd38      	pop	{r3, r4, r5, pc}

080189c8 <_free_r>:
 80189c8:	b538      	push	{r3, r4, r5, lr}
 80189ca:	4605      	mov	r5, r0
 80189cc:	2900      	cmp	r1, #0
 80189ce:	d043      	beq.n	8018a58 <_free_r+0x90>
 80189d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189d4:	1f0c      	subs	r4, r1, #4
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	bfb8      	it	lt
 80189da:	18e4      	addlt	r4, r4, r3
 80189dc:	f000 ff74 	bl	80198c8 <__malloc_lock>
 80189e0:	4a1e      	ldr	r2, [pc, #120]	; (8018a5c <_free_r+0x94>)
 80189e2:	6813      	ldr	r3, [r2, #0]
 80189e4:	4610      	mov	r0, r2
 80189e6:	b933      	cbnz	r3, 80189f6 <_free_r+0x2e>
 80189e8:	6063      	str	r3, [r4, #4]
 80189ea:	6014      	str	r4, [r2, #0]
 80189ec:	4628      	mov	r0, r5
 80189ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189f2:	f000 bf6a 	b.w	80198ca <__malloc_unlock>
 80189f6:	42a3      	cmp	r3, r4
 80189f8:	d90b      	bls.n	8018a12 <_free_r+0x4a>
 80189fa:	6821      	ldr	r1, [r4, #0]
 80189fc:	1862      	adds	r2, r4, r1
 80189fe:	4293      	cmp	r3, r2
 8018a00:	bf01      	itttt	eq
 8018a02:	681a      	ldreq	r2, [r3, #0]
 8018a04:	685b      	ldreq	r3, [r3, #4]
 8018a06:	1852      	addeq	r2, r2, r1
 8018a08:	6022      	streq	r2, [r4, #0]
 8018a0a:	6063      	str	r3, [r4, #4]
 8018a0c:	6004      	str	r4, [r0, #0]
 8018a0e:	e7ed      	b.n	80189ec <_free_r+0x24>
 8018a10:	4613      	mov	r3, r2
 8018a12:	685a      	ldr	r2, [r3, #4]
 8018a14:	b10a      	cbz	r2, 8018a1a <_free_r+0x52>
 8018a16:	42a2      	cmp	r2, r4
 8018a18:	d9fa      	bls.n	8018a10 <_free_r+0x48>
 8018a1a:	6819      	ldr	r1, [r3, #0]
 8018a1c:	1858      	adds	r0, r3, r1
 8018a1e:	42a0      	cmp	r0, r4
 8018a20:	d10b      	bne.n	8018a3a <_free_r+0x72>
 8018a22:	6820      	ldr	r0, [r4, #0]
 8018a24:	4401      	add	r1, r0
 8018a26:	1858      	adds	r0, r3, r1
 8018a28:	4282      	cmp	r2, r0
 8018a2a:	6019      	str	r1, [r3, #0]
 8018a2c:	d1de      	bne.n	80189ec <_free_r+0x24>
 8018a2e:	6810      	ldr	r0, [r2, #0]
 8018a30:	6852      	ldr	r2, [r2, #4]
 8018a32:	4401      	add	r1, r0
 8018a34:	6019      	str	r1, [r3, #0]
 8018a36:	605a      	str	r2, [r3, #4]
 8018a38:	e7d8      	b.n	80189ec <_free_r+0x24>
 8018a3a:	d902      	bls.n	8018a42 <_free_r+0x7a>
 8018a3c:	230c      	movs	r3, #12
 8018a3e:	602b      	str	r3, [r5, #0]
 8018a40:	e7d4      	b.n	80189ec <_free_r+0x24>
 8018a42:	6820      	ldr	r0, [r4, #0]
 8018a44:	1821      	adds	r1, r4, r0
 8018a46:	428a      	cmp	r2, r1
 8018a48:	bf01      	itttt	eq
 8018a4a:	6811      	ldreq	r1, [r2, #0]
 8018a4c:	6852      	ldreq	r2, [r2, #4]
 8018a4e:	1809      	addeq	r1, r1, r0
 8018a50:	6021      	streq	r1, [r4, #0]
 8018a52:	6062      	str	r2, [r4, #4]
 8018a54:	605c      	str	r4, [r3, #4]
 8018a56:	e7c9      	b.n	80189ec <_free_r+0x24>
 8018a58:	bd38      	pop	{r3, r4, r5, pc}
 8018a5a:	bf00      	nop
 8018a5c:	2000883c 	.word	0x2000883c

08018a60 <_malloc_r>:
 8018a60:	b570      	push	{r4, r5, r6, lr}
 8018a62:	1ccd      	adds	r5, r1, #3
 8018a64:	f025 0503 	bic.w	r5, r5, #3
 8018a68:	3508      	adds	r5, #8
 8018a6a:	2d0c      	cmp	r5, #12
 8018a6c:	bf38      	it	cc
 8018a6e:	250c      	movcc	r5, #12
 8018a70:	2d00      	cmp	r5, #0
 8018a72:	4606      	mov	r6, r0
 8018a74:	db01      	blt.n	8018a7a <_malloc_r+0x1a>
 8018a76:	42a9      	cmp	r1, r5
 8018a78:	d903      	bls.n	8018a82 <_malloc_r+0x22>
 8018a7a:	230c      	movs	r3, #12
 8018a7c:	6033      	str	r3, [r6, #0]
 8018a7e:	2000      	movs	r0, #0
 8018a80:	bd70      	pop	{r4, r5, r6, pc}
 8018a82:	f000 ff21 	bl	80198c8 <__malloc_lock>
 8018a86:	4a21      	ldr	r2, [pc, #132]	; (8018b0c <_malloc_r+0xac>)
 8018a88:	6814      	ldr	r4, [r2, #0]
 8018a8a:	4621      	mov	r1, r4
 8018a8c:	b991      	cbnz	r1, 8018ab4 <_malloc_r+0x54>
 8018a8e:	4c20      	ldr	r4, [pc, #128]	; (8018b10 <_malloc_r+0xb0>)
 8018a90:	6823      	ldr	r3, [r4, #0]
 8018a92:	b91b      	cbnz	r3, 8018a9c <_malloc_r+0x3c>
 8018a94:	4630      	mov	r0, r6
 8018a96:	f000 fde1 	bl	801965c <_sbrk_r>
 8018a9a:	6020      	str	r0, [r4, #0]
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	4630      	mov	r0, r6
 8018aa0:	f000 fddc 	bl	801965c <_sbrk_r>
 8018aa4:	1c43      	adds	r3, r0, #1
 8018aa6:	d124      	bne.n	8018af2 <_malloc_r+0x92>
 8018aa8:	230c      	movs	r3, #12
 8018aaa:	4630      	mov	r0, r6
 8018aac:	6033      	str	r3, [r6, #0]
 8018aae:	f000 ff0c 	bl	80198ca <__malloc_unlock>
 8018ab2:	e7e4      	b.n	8018a7e <_malloc_r+0x1e>
 8018ab4:	680b      	ldr	r3, [r1, #0]
 8018ab6:	1b5b      	subs	r3, r3, r5
 8018ab8:	d418      	bmi.n	8018aec <_malloc_r+0x8c>
 8018aba:	2b0b      	cmp	r3, #11
 8018abc:	d90f      	bls.n	8018ade <_malloc_r+0x7e>
 8018abe:	600b      	str	r3, [r1, #0]
 8018ac0:	18cc      	adds	r4, r1, r3
 8018ac2:	50cd      	str	r5, [r1, r3]
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	f000 ff00 	bl	80198ca <__malloc_unlock>
 8018aca:	f104 000b 	add.w	r0, r4, #11
 8018ace:	1d23      	adds	r3, r4, #4
 8018ad0:	f020 0007 	bic.w	r0, r0, #7
 8018ad4:	1ac3      	subs	r3, r0, r3
 8018ad6:	d0d3      	beq.n	8018a80 <_malloc_r+0x20>
 8018ad8:	425a      	negs	r2, r3
 8018ada:	50e2      	str	r2, [r4, r3]
 8018adc:	e7d0      	b.n	8018a80 <_malloc_r+0x20>
 8018ade:	684b      	ldr	r3, [r1, #4]
 8018ae0:	428c      	cmp	r4, r1
 8018ae2:	bf16      	itet	ne
 8018ae4:	6063      	strne	r3, [r4, #4]
 8018ae6:	6013      	streq	r3, [r2, #0]
 8018ae8:	460c      	movne	r4, r1
 8018aea:	e7eb      	b.n	8018ac4 <_malloc_r+0x64>
 8018aec:	460c      	mov	r4, r1
 8018aee:	6849      	ldr	r1, [r1, #4]
 8018af0:	e7cc      	b.n	8018a8c <_malloc_r+0x2c>
 8018af2:	1cc4      	adds	r4, r0, #3
 8018af4:	f024 0403 	bic.w	r4, r4, #3
 8018af8:	42a0      	cmp	r0, r4
 8018afa:	d005      	beq.n	8018b08 <_malloc_r+0xa8>
 8018afc:	1a21      	subs	r1, r4, r0
 8018afe:	4630      	mov	r0, r6
 8018b00:	f000 fdac 	bl	801965c <_sbrk_r>
 8018b04:	3001      	adds	r0, #1
 8018b06:	d0cf      	beq.n	8018aa8 <_malloc_r+0x48>
 8018b08:	6025      	str	r5, [r4, #0]
 8018b0a:	e7db      	b.n	8018ac4 <_malloc_r+0x64>
 8018b0c:	2000883c 	.word	0x2000883c
 8018b10:	20008840 	.word	0x20008840

08018b14 <__ssputs_r>:
 8018b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b18:	688e      	ldr	r6, [r1, #8]
 8018b1a:	4682      	mov	sl, r0
 8018b1c:	429e      	cmp	r6, r3
 8018b1e:	460c      	mov	r4, r1
 8018b20:	4690      	mov	r8, r2
 8018b22:	4699      	mov	r9, r3
 8018b24:	d837      	bhi.n	8018b96 <__ssputs_r+0x82>
 8018b26:	898a      	ldrh	r2, [r1, #12]
 8018b28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018b2c:	d031      	beq.n	8018b92 <__ssputs_r+0x7e>
 8018b2e:	2302      	movs	r3, #2
 8018b30:	6825      	ldr	r5, [r4, #0]
 8018b32:	6909      	ldr	r1, [r1, #16]
 8018b34:	1a6f      	subs	r7, r5, r1
 8018b36:	6965      	ldr	r5, [r4, #20]
 8018b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8018b40:	f109 0301 	add.w	r3, r9, #1
 8018b44:	443b      	add	r3, r7
 8018b46:	429d      	cmp	r5, r3
 8018b48:	bf38      	it	cc
 8018b4a:	461d      	movcc	r5, r3
 8018b4c:	0553      	lsls	r3, r2, #21
 8018b4e:	d530      	bpl.n	8018bb2 <__ssputs_r+0x9e>
 8018b50:	4629      	mov	r1, r5
 8018b52:	f7ff ff85 	bl	8018a60 <_malloc_r>
 8018b56:	4606      	mov	r6, r0
 8018b58:	b950      	cbnz	r0, 8018b70 <__ssputs_r+0x5c>
 8018b5a:	230c      	movs	r3, #12
 8018b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018b60:	f8ca 3000 	str.w	r3, [sl]
 8018b64:	89a3      	ldrh	r3, [r4, #12]
 8018b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b6a:	81a3      	strh	r3, [r4, #12]
 8018b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b70:	463a      	mov	r2, r7
 8018b72:	6921      	ldr	r1, [r4, #16]
 8018b74:	f7fc f83a 	bl	8014bec <memcpy>
 8018b78:	89a3      	ldrh	r3, [r4, #12]
 8018b7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b82:	81a3      	strh	r3, [r4, #12]
 8018b84:	6126      	str	r6, [r4, #16]
 8018b86:	443e      	add	r6, r7
 8018b88:	6026      	str	r6, [r4, #0]
 8018b8a:	464e      	mov	r6, r9
 8018b8c:	6165      	str	r5, [r4, #20]
 8018b8e:	1bed      	subs	r5, r5, r7
 8018b90:	60a5      	str	r5, [r4, #8]
 8018b92:	454e      	cmp	r6, r9
 8018b94:	d900      	bls.n	8018b98 <__ssputs_r+0x84>
 8018b96:	464e      	mov	r6, r9
 8018b98:	4632      	mov	r2, r6
 8018b9a:	4641      	mov	r1, r8
 8018b9c:	6820      	ldr	r0, [r4, #0]
 8018b9e:	f7fc f830 	bl	8014c02 <memmove>
 8018ba2:	68a3      	ldr	r3, [r4, #8]
 8018ba4:	2000      	movs	r0, #0
 8018ba6:	1b9b      	subs	r3, r3, r6
 8018ba8:	60a3      	str	r3, [r4, #8]
 8018baa:	6823      	ldr	r3, [r4, #0]
 8018bac:	441e      	add	r6, r3
 8018bae:	6026      	str	r6, [r4, #0]
 8018bb0:	e7dc      	b.n	8018b6c <__ssputs_r+0x58>
 8018bb2:	462a      	mov	r2, r5
 8018bb4:	f000 fe8a 	bl	80198cc <_realloc_r>
 8018bb8:	4606      	mov	r6, r0
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	d1e2      	bne.n	8018b84 <__ssputs_r+0x70>
 8018bbe:	6921      	ldr	r1, [r4, #16]
 8018bc0:	4650      	mov	r0, sl
 8018bc2:	f7ff ff01 	bl	80189c8 <_free_r>
 8018bc6:	e7c8      	b.n	8018b5a <__ssputs_r+0x46>

08018bc8 <_svfiprintf_r>:
 8018bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bcc:	461d      	mov	r5, r3
 8018bce:	898b      	ldrh	r3, [r1, #12]
 8018bd0:	b09d      	sub	sp, #116	; 0x74
 8018bd2:	061f      	lsls	r7, r3, #24
 8018bd4:	4680      	mov	r8, r0
 8018bd6:	460c      	mov	r4, r1
 8018bd8:	4616      	mov	r6, r2
 8018bda:	d50f      	bpl.n	8018bfc <_svfiprintf_r+0x34>
 8018bdc:	690b      	ldr	r3, [r1, #16]
 8018bde:	b96b      	cbnz	r3, 8018bfc <_svfiprintf_r+0x34>
 8018be0:	2140      	movs	r1, #64	; 0x40
 8018be2:	f7ff ff3d 	bl	8018a60 <_malloc_r>
 8018be6:	6020      	str	r0, [r4, #0]
 8018be8:	6120      	str	r0, [r4, #16]
 8018bea:	b928      	cbnz	r0, 8018bf8 <_svfiprintf_r+0x30>
 8018bec:	230c      	movs	r3, #12
 8018bee:	f8c8 3000 	str.w	r3, [r8]
 8018bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8018bf6:	e0c8      	b.n	8018d8a <_svfiprintf_r+0x1c2>
 8018bf8:	2340      	movs	r3, #64	; 0x40
 8018bfa:	6163      	str	r3, [r4, #20]
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8018c00:	2320      	movs	r3, #32
 8018c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c06:	2330      	movs	r3, #48	; 0x30
 8018c08:	f04f 0b01 	mov.w	fp, #1
 8018c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c10:	9503      	str	r5, [sp, #12]
 8018c12:	4637      	mov	r7, r6
 8018c14:	463d      	mov	r5, r7
 8018c16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018c1a:	b10b      	cbz	r3, 8018c20 <_svfiprintf_r+0x58>
 8018c1c:	2b25      	cmp	r3, #37	; 0x25
 8018c1e:	d13e      	bne.n	8018c9e <_svfiprintf_r+0xd6>
 8018c20:	ebb7 0a06 	subs.w	sl, r7, r6
 8018c24:	d00b      	beq.n	8018c3e <_svfiprintf_r+0x76>
 8018c26:	4653      	mov	r3, sl
 8018c28:	4632      	mov	r2, r6
 8018c2a:	4621      	mov	r1, r4
 8018c2c:	4640      	mov	r0, r8
 8018c2e:	f7ff ff71 	bl	8018b14 <__ssputs_r>
 8018c32:	3001      	adds	r0, #1
 8018c34:	f000 80a4 	beq.w	8018d80 <_svfiprintf_r+0x1b8>
 8018c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c3a:	4453      	add	r3, sl
 8018c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8018c3e:	783b      	ldrb	r3, [r7, #0]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	f000 809d 	beq.w	8018d80 <_svfiprintf_r+0x1b8>
 8018c46:	2300      	movs	r3, #0
 8018c48:	f04f 32ff 	mov.w	r2, #4294967295
 8018c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c50:	9304      	str	r3, [sp, #16]
 8018c52:	9307      	str	r3, [sp, #28]
 8018c54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018c58:	931a      	str	r3, [sp, #104]	; 0x68
 8018c5a:	462f      	mov	r7, r5
 8018c5c:	2205      	movs	r2, #5
 8018c5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018c62:	4850      	ldr	r0, [pc, #320]	; (8018da4 <_svfiprintf_r+0x1dc>)
 8018c64:	f7ff fa9c 	bl	80181a0 <memchr>
 8018c68:	9b04      	ldr	r3, [sp, #16]
 8018c6a:	b9d0      	cbnz	r0, 8018ca2 <_svfiprintf_r+0xda>
 8018c6c:	06d9      	lsls	r1, r3, #27
 8018c6e:	bf44      	itt	mi
 8018c70:	2220      	movmi	r2, #32
 8018c72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018c76:	071a      	lsls	r2, r3, #28
 8018c78:	bf44      	itt	mi
 8018c7a:	222b      	movmi	r2, #43	; 0x2b
 8018c7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018c80:	782a      	ldrb	r2, [r5, #0]
 8018c82:	2a2a      	cmp	r2, #42	; 0x2a
 8018c84:	d015      	beq.n	8018cb2 <_svfiprintf_r+0xea>
 8018c86:	462f      	mov	r7, r5
 8018c88:	2000      	movs	r0, #0
 8018c8a:	250a      	movs	r5, #10
 8018c8c:	9a07      	ldr	r2, [sp, #28]
 8018c8e:	4639      	mov	r1, r7
 8018c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c94:	3b30      	subs	r3, #48	; 0x30
 8018c96:	2b09      	cmp	r3, #9
 8018c98:	d94d      	bls.n	8018d36 <_svfiprintf_r+0x16e>
 8018c9a:	b1b8      	cbz	r0, 8018ccc <_svfiprintf_r+0x104>
 8018c9c:	e00f      	b.n	8018cbe <_svfiprintf_r+0xf6>
 8018c9e:	462f      	mov	r7, r5
 8018ca0:	e7b8      	b.n	8018c14 <_svfiprintf_r+0x4c>
 8018ca2:	4a40      	ldr	r2, [pc, #256]	; (8018da4 <_svfiprintf_r+0x1dc>)
 8018ca4:	463d      	mov	r5, r7
 8018ca6:	1a80      	subs	r0, r0, r2
 8018ca8:	fa0b f000 	lsl.w	r0, fp, r0
 8018cac:	4318      	orrs	r0, r3
 8018cae:	9004      	str	r0, [sp, #16]
 8018cb0:	e7d3      	b.n	8018c5a <_svfiprintf_r+0x92>
 8018cb2:	9a03      	ldr	r2, [sp, #12]
 8018cb4:	1d11      	adds	r1, r2, #4
 8018cb6:	6812      	ldr	r2, [r2, #0]
 8018cb8:	9103      	str	r1, [sp, #12]
 8018cba:	2a00      	cmp	r2, #0
 8018cbc:	db01      	blt.n	8018cc2 <_svfiprintf_r+0xfa>
 8018cbe:	9207      	str	r2, [sp, #28]
 8018cc0:	e004      	b.n	8018ccc <_svfiprintf_r+0x104>
 8018cc2:	4252      	negs	r2, r2
 8018cc4:	f043 0302 	orr.w	r3, r3, #2
 8018cc8:	9207      	str	r2, [sp, #28]
 8018cca:	9304      	str	r3, [sp, #16]
 8018ccc:	783b      	ldrb	r3, [r7, #0]
 8018cce:	2b2e      	cmp	r3, #46	; 0x2e
 8018cd0:	d10c      	bne.n	8018cec <_svfiprintf_r+0x124>
 8018cd2:	787b      	ldrb	r3, [r7, #1]
 8018cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8018cd6:	d133      	bne.n	8018d40 <_svfiprintf_r+0x178>
 8018cd8:	9b03      	ldr	r3, [sp, #12]
 8018cda:	3702      	adds	r7, #2
 8018cdc:	1d1a      	adds	r2, r3, #4
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	9203      	str	r2, [sp, #12]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	bfb8      	it	lt
 8018ce6:	f04f 33ff 	movlt.w	r3, #4294967295
 8018cea:	9305      	str	r3, [sp, #20]
 8018cec:	4d2e      	ldr	r5, [pc, #184]	; (8018da8 <_svfiprintf_r+0x1e0>)
 8018cee:	2203      	movs	r2, #3
 8018cf0:	7839      	ldrb	r1, [r7, #0]
 8018cf2:	4628      	mov	r0, r5
 8018cf4:	f7ff fa54 	bl	80181a0 <memchr>
 8018cf8:	b138      	cbz	r0, 8018d0a <_svfiprintf_r+0x142>
 8018cfa:	2340      	movs	r3, #64	; 0x40
 8018cfc:	1b40      	subs	r0, r0, r5
 8018cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8018d02:	9b04      	ldr	r3, [sp, #16]
 8018d04:	3701      	adds	r7, #1
 8018d06:	4303      	orrs	r3, r0
 8018d08:	9304      	str	r3, [sp, #16]
 8018d0a:	7839      	ldrb	r1, [r7, #0]
 8018d0c:	2206      	movs	r2, #6
 8018d0e:	4827      	ldr	r0, [pc, #156]	; (8018dac <_svfiprintf_r+0x1e4>)
 8018d10:	1c7e      	adds	r6, r7, #1
 8018d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d16:	f7ff fa43 	bl	80181a0 <memchr>
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	d038      	beq.n	8018d90 <_svfiprintf_r+0x1c8>
 8018d1e:	4b24      	ldr	r3, [pc, #144]	; (8018db0 <_svfiprintf_r+0x1e8>)
 8018d20:	bb13      	cbnz	r3, 8018d68 <_svfiprintf_r+0x1a0>
 8018d22:	9b03      	ldr	r3, [sp, #12]
 8018d24:	3307      	adds	r3, #7
 8018d26:	f023 0307 	bic.w	r3, r3, #7
 8018d2a:	3308      	adds	r3, #8
 8018d2c:	9303      	str	r3, [sp, #12]
 8018d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d30:	444b      	add	r3, r9
 8018d32:	9309      	str	r3, [sp, #36]	; 0x24
 8018d34:	e76d      	b.n	8018c12 <_svfiprintf_r+0x4a>
 8018d36:	fb05 3202 	mla	r2, r5, r2, r3
 8018d3a:	2001      	movs	r0, #1
 8018d3c:	460f      	mov	r7, r1
 8018d3e:	e7a6      	b.n	8018c8e <_svfiprintf_r+0xc6>
 8018d40:	2300      	movs	r3, #0
 8018d42:	250a      	movs	r5, #10
 8018d44:	4619      	mov	r1, r3
 8018d46:	3701      	adds	r7, #1
 8018d48:	9305      	str	r3, [sp, #20]
 8018d4a:	4638      	mov	r0, r7
 8018d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d50:	3a30      	subs	r2, #48	; 0x30
 8018d52:	2a09      	cmp	r2, #9
 8018d54:	d903      	bls.n	8018d5e <_svfiprintf_r+0x196>
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d0c8      	beq.n	8018cec <_svfiprintf_r+0x124>
 8018d5a:	9105      	str	r1, [sp, #20]
 8018d5c:	e7c6      	b.n	8018cec <_svfiprintf_r+0x124>
 8018d5e:	fb05 2101 	mla	r1, r5, r1, r2
 8018d62:	2301      	movs	r3, #1
 8018d64:	4607      	mov	r7, r0
 8018d66:	e7f0      	b.n	8018d4a <_svfiprintf_r+0x182>
 8018d68:	ab03      	add	r3, sp, #12
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	4622      	mov	r2, r4
 8018d6e:	4b11      	ldr	r3, [pc, #68]	; (8018db4 <_svfiprintf_r+0x1ec>)
 8018d70:	a904      	add	r1, sp, #16
 8018d72:	4640      	mov	r0, r8
 8018d74:	f7fb fff8 	bl	8014d68 <_printf_float>
 8018d78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018d7c:	4681      	mov	r9, r0
 8018d7e:	d1d6      	bne.n	8018d2e <_svfiprintf_r+0x166>
 8018d80:	89a3      	ldrh	r3, [r4, #12]
 8018d82:	065b      	lsls	r3, r3, #25
 8018d84:	f53f af35 	bmi.w	8018bf2 <_svfiprintf_r+0x2a>
 8018d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d8a:	b01d      	add	sp, #116	; 0x74
 8018d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d90:	ab03      	add	r3, sp, #12
 8018d92:	9300      	str	r3, [sp, #0]
 8018d94:	4622      	mov	r2, r4
 8018d96:	4b07      	ldr	r3, [pc, #28]	; (8018db4 <_svfiprintf_r+0x1ec>)
 8018d98:	a904      	add	r1, sp, #16
 8018d9a:	4640      	mov	r0, r8
 8018d9c:	f7fc fa90 	bl	80152c0 <_printf_i>
 8018da0:	e7ea      	b.n	8018d78 <_svfiprintf_r+0x1b0>
 8018da2:	bf00      	nop
 8018da4:	0801e52c 	.word	0x0801e52c
 8018da8:	0801e532 	.word	0x0801e532
 8018dac:	0801e536 	.word	0x0801e536
 8018db0:	08014d69 	.word	0x08014d69
 8018db4:	08018b15 	.word	0x08018b15

08018db8 <_sungetc_r>:
 8018db8:	b538      	push	{r3, r4, r5, lr}
 8018dba:	1c4b      	adds	r3, r1, #1
 8018dbc:	4614      	mov	r4, r2
 8018dbe:	d103      	bne.n	8018dc8 <_sungetc_r+0x10>
 8018dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8018dc4:	4628      	mov	r0, r5
 8018dc6:	bd38      	pop	{r3, r4, r5, pc}
 8018dc8:	8993      	ldrh	r3, [r2, #12]
 8018dca:	b2cd      	uxtb	r5, r1
 8018dcc:	f023 0320 	bic.w	r3, r3, #32
 8018dd0:	8193      	strh	r3, [r2, #12]
 8018dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018dd4:	6852      	ldr	r2, [r2, #4]
 8018dd6:	b18b      	cbz	r3, 8018dfc <_sungetc_r+0x44>
 8018dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018dda:	4293      	cmp	r3, r2
 8018ddc:	dd08      	ble.n	8018df0 <_sungetc_r+0x38>
 8018dde:	6823      	ldr	r3, [r4, #0]
 8018de0:	1e5a      	subs	r2, r3, #1
 8018de2:	6022      	str	r2, [r4, #0]
 8018de4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018de8:	6863      	ldr	r3, [r4, #4]
 8018dea:	3301      	adds	r3, #1
 8018dec:	6063      	str	r3, [r4, #4]
 8018dee:	e7e9      	b.n	8018dc4 <_sungetc_r+0xc>
 8018df0:	4621      	mov	r1, r4
 8018df2:	f000 fd01 	bl	80197f8 <__submore>
 8018df6:	2800      	cmp	r0, #0
 8018df8:	d0f1      	beq.n	8018dde <_sungetc_r+0x26>
 8018dfa:	e7e1      	b.n	8018dc0 <_sungetc_r+0x8>
 8018dfc:	6921      	ldr	r1, [r4, #16]
 8018dfe:	6823      	ldr	r3, [r4, #0]
 8018e00:	b151      	cbz	r1, 8018e18 <_sungetc_r+0x60>
 8018e02:	4299      	cmp	r1, r3
 8018e04:	d208      	bcs.n	8018e18 <_sungetc_r+0x60>
 8018e06:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018e0a:	42a9      	cmp	r1, r5
 8018e0c:	d104      	bne.n	8018e18 <_sungetc_r+0x60>
 8018e0e:	3b01      	subs	r3, #1
 8018e10:	3201      	adds	r2, #1
 8018e12:	6023      	str	r3, [r4, #0]
 8018e14:	6062      	str	r2, [r4, #4]
 8018e16:	e7d5      	b.n	8018dc4 <_sungetc_r+0xc>
 8018e18:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e20:	6363      	str	r3, [r4, #52]	; 0x34
 8018e22:	2303      	movs	r3, #3
 8018e24:	63a3      	str	r3, [r4, #56]	; 0x38
 8018e26:	4623      	mov	r3, r4
 8018e28:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018e2c:	6023      	str	r3, [r4, #0]
 8018e2e:	2301      	movs	r3, #1
 8018e30:	e7dc      	b.n	8018dec <_sungetc_r+0x34>

08018e32 <__ssrefill_r>:
 8018e32:	b510      	push	{r4, lr}
 8018e34:	460c      	mov	r4, r1
 8018e36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018e38:	b169      	cbz	r1, 8018e56 <__ssrefill_r+0x24>
 8018e3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e3e:	4299      	cmp	r1, r3
 8018e40:	d001      	beq.n	8018e46 <__ssrefill_r+0x14>
 8018e42:	f7ff fdc1 	bl	80189c8 <_free_r>
 8018e46:	2000      	movs	r0, #0
 8018e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018e4a:	6360      	str	r0, [r4, #52]	; 0x34
 8018e4c:	6063      	str	r3, [r4, #4]
 8018e4e:	b113      	cbz	r3, 8018e56 <__ssrefill_r+0x24>
 8018e50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e52:	6023      	str	r3, [r4, #0]
 8018e54:	bd10      	pop	{r4, pc}
 8018e56:	6923      	ldr	r3, [r4, #16]
 8018e58:	f04f 30ff 	mov.w	r0, #4294967295
 8018e5c:	6023      	str	r3, [r4, #0]
 8018e5e:	2300      	movs	r3, #0
 8018e60:	6063      	str	r3, [r4, #4]
 8018e62:	89a3      	ldrh	r3, [r4, #12]
 8018e64:	f043 0320 	orr.w	r3, r3, #32
 8018e68:	81a3      	strh	r3, [r4, #12]
 8018e6a:	e7f3      	b.n	8018e54 <__ssrefill_r+0x22>

08018e6c <__ssvfiscanf_r>:
 8018e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e70:	460c      	mov	r4, r1
 8018e72:	2100      	movs	r1, #0
 8018e74:	4606      	mov	r6, r0
 8018e76:	4692      	mov	sl, r2
 8018e78:	270a      	movs	r7, #10
 8018e7a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018e7e:	9144      	str	r1, [sp, #272]	; 0x110
 8018e80:	9145      	str	r1, [sp, #276]	; 0x114
 8018e82:	499e      	ldr	r1, [pc, #632]	; (80190fc <__ssvfiscanf_r+0x290>)
 8018e84:	f10d 0804 	add.w	r8, sp, #4
 8018e88:	91a0      	str	r1, [sp, #640]	; 0x280
 8018e8a:	499d      	ldr	r1, [pc, #628]	; (8019100 <__ssvfiscanf_r+0x294>)
 8018e8c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8019104 <__ssvfiscanf_r+0x298>
 8018e90:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018e94:	91a1      	str	r1, [sp, #644]	; 0x284
 8018e96:	9300      	str	r3, [sp, #0]
 8018e98:	f89a 3000 	ldrb.w	r3, [sl]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	f000 812a 	beq.w	80190f6 <__ssvfiscanf_r+0x28a>
 8018ea2:	4655      	mov	r5, sl
 8018ea4:	f7ff f8ce 	bl	8018044 <__locale_ctype_ptr>
 8018ea8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018eac:	4458      	add	r0, fp
 8018eae:	7843      	ldrb	r3, [r0, #1]
 8018eb0:	f013 0308 	ands.w	r3, r3, #8
 8018eb4:	d01c      	beq.n	8018ef0 <__ssvfiscanf_r+0x84>
 8018eb6:	6863      	ldr	r3, [r4, #4]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	dd12      	ble.n	8018ee2 <__ssvfiscanf_r+0x76>
 8018ebc:	f7ff f8c2 	bl	8018044 <__locale_ctype_ptr>
 8018ec0:	6823      	ldr	r3, [r4, #0]
 8018ec2:	781a      	ldrb	r2, [r3, #0]
 8018ec4:	4410      	add	r0, r2
 8018ec6:	7842      	ldrb	r2, [r0, #1]
 8018ec8:	0712      	lsls	r2, r2, #28
 8018eca:	d401      	bmi.n	8018ed0 <__ssvfiscanf_r+0x64>
 8018ecc:	46aa      	mov	sl, r5
 8018ece:	e7e3      	b.n	8018e98 <__ssvfiscanf_r+0x2c>
 8018ed0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018ed2:	3301      	adds	r3, #1
 8018ed4:	3201      	adds	r2, #1
 8018ed6:	9245      	str	r2, [sp, #276]	; 0x114
 8018ed8:	6862      	ldr	r2, [r4, #4]
 8018eda:	6023      	str	r3, [r4, #0]
 8018edc:	3a01      	subs	r2, #1
 8018ede:	6062      	str	r2, [r4, #4]
 8018ee0:	e7e9      	b.n	8018eb6 <__ssvfiscanf_r+0x4a>
 8018ee2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018ee4:	4621      	mov	r1, r4
 8018ee6:	4630      	mov	r0, r6
 8018ee8:	4798      	blx	r3
 8018eea:	2800      	cmp	r0, #0
 8018eec:	d0e6      	beq.n	8018ebc <__ssvfiscanf_r+0x50>
 8018eee:	e7ed      	b.n	8018ecc <__ssvfiscanf_r+0x60>
 8018ef0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018ef4:	f040 8082 	bne.w	8018ffc <__ssvfiscanf_r+0x190>
 8018ef8:	9343      	str	r3, [sp, #268]	; 0x10c
 8018efa:	9341      	str	r3, [sp, #260]	; 0x104
 8018efc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018f00:	2b2a      	cmp	r3, #42	; 0x2a
 8018f02:	d103      	bne.n	8018f0c <__ssvfiscanf_r+0xa0>
 8018f04:	2310      	movs	r3, #16
 8018f06:	f10a 0502 	add.w	r5, sl, #2
 8018f0a:	9341      	str	r3, [sp, #260]	; 0x104
 8018f0c:	46aa      	mov	sl, r5
 8018f0e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018f12:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018f16:	2a09      	cmp	r2, #9
 8018f18:	d922      	bls.n	8018f60 <__ssvfiscanf_r+0xf4>
 8018f1a:	2203      	movs	r2, #3
 8018f1c:	4879      	ldr	r0, [pc, #484]	; (8019104 <__ssvfiscanf_r+0x298>)
 8018f1e:	f7ff f93f 	bl	80181a0 <memchr>
 8018f22:	b138      	cbz	r0, 8018f34 <__ssvfiscanf_r+0xc8>
 8018f24:	eba0 0309 	sub.w	r3, r0, r9
 8018f28:	2001      	movs	r0, #1
 8018f2a:	46aa      	mov	sl, r5
 8018f2c:	4098      	lsls	r0, r3
 8018f2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f30:	4318      	orrs	r0, r3
 8018f32:	9041      	str	r0, [sp, #260]	; 0x104
 8018f34:	f89a 3000 	ldrb.w	r3, [sl]
 8018f38:	f10a 0501 	add.w	r5, sl, #1
 8018f3c:	2b67      	cmp	r3, #103	; 0x67
 8018f3e:	d82b      	bhi.n	8018f98 <__ssvfiscanf_r+0x12c>
 8018f40:	2b65      	cmp	r3, #101	; 0x65
 8018f42:	f080 809f 	bcs.w	8019084 <__ssvfiscanf_r+0x218>
 8018f46:	2b47      	cmp	r3, #71	; 0x47
 8018f48:	d810      	bhi.n	8018f6c <__ssvfiscanf_r+0x100>
 8018f4a:	2b45      	cmp	r3, #69	; 0x45
 8018f4c:	f080 809a 	bcs.w	8019084 <__ssvfiscanf_r+0x218>
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d06c      	beq.n	801902e <__ssvfiscanf_r+0x1c2>
 8018f54:	2b25      	cmp	r3, #37	; 0x25
 8018f56:	d051      	beq.n	8018ffc <__ssvfiscanf_r+0x190>
 8018f58:	2303      	movs	r3, #3
 8018f5a:	9742      	str	r7, [sp, #264]	; 0x108
 8018f5c:	9347      	str	r3, [sp, #284]	; 0x11c
 8018f5e:	e027      	b.n	8018fb0 <__ssvfiscanf_r+0x144>
 8018f60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018f62:	fb07 1303 	mla	r3, r7, r3, r1
 8018f66:	3b30      	subs	r3, #48	; 0x30
 8018f68:	9343      	str	r3, [sp, #268]	; 0x10c
 8018f6a:	e7cf      	b.n	8018f0c <__ssvfiscanf_r+0xa0>
 8018f6c:	2b5b      	cmp	r3, #91	; 0x5b
 8018f6e:	d06a      	beq.n	8019046 <__ssvfiscanf_r+0x1da>
 8018f70:	d80c      	bhi.n	8018f8c <__ssvfiscanf_r+0x120>
 8018f72:	2b58      	cmp	r3, #88	; 0x58
 8018f74:	d1f0      	bne.n	8018f58 <__ssvfiscanf_r+0xec>
 8018f76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f7c:	9241      	str	r2, [sp, #260]	; 0x104
 8018f7e:	2210      	movs	r2, #16
 8018f80:	9242      	str	r2, [sp, #264]	; 0x108
 8018f82:	2b6e      	cmp	r3, #110	; 0x6e
 8018f84:	bf8c      	ite	hi
 8018f86:	2304      	movhi	r3, #4
 8018f88:	2303      	movls	r3, #3
 8018f8a:	e010      	b.n	8018fae <__ssvfiscanf_r+0x142>
 8018f8c:	2b63      	cmp	r3, #99	; 0x63
 8018f8e:	d065      	beq.n	801905c <__ssvfiscanf_r+0x1f0>
 8018f90:	2b64      	cmp	r3, #100	; 0x64
 8018f92:	d1e1      	bne.n	8018f58 <__ssvfiscanf_r+0xec>
 8018f94:	9742      	str	r7, [sp, #264]	; 0x108
 8018f96:	e7f4      	b.n	8018f82 <__ssvfiscanf_r+0x116>
 8018f98:	2b70      	cmp	r3, #112	; 0x70
 8018f9a:	d04b      	beq.n	8019034 <__ssvfiscanf_r+0x1c8>
 8018f9c:	d826      	bhi.n	8018fec <__ssvfiscanf_r+0x180>
 8018f9e:	2b6e      	cmp	r3, #110	; 0x6e
 8018fa0:	d062      	beq.n	8019068 <__ssvfiscanf_r+0x1fc>
 8018fa2:	d84c      	bhi.n	801903e <__ssvfiscanf_r+0x1d2>
 8018fa4:	2b69      	cmp	r3, #105	; 0x69
 8018fa6:	d1d7      	bne.n	8018f58 <__ssvfiscanf_r+0xec>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	9342      	str	r3, [sp, #264]	; 0x108
 8018fac:	2303      	movs	r3, #3
 8018fae:	9347      	str	r3, [sp, #284]	; 0x11c
 8018fb0:	6863      	ldr	r3, [r4, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	dd68      	ble.n	8019088 <__ssvfiscanf_r+0x21c>
 8018fb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018fb8:	0659      	lsls	r1, r3, #25
 8018fba:	d407      	bmi.n	8018fcc <__ssvfiscanf_r+0x160>
 8018fbc:	f7ff f842 	bl	8018044 <__locale_ctype_ptr>
 8018fc0:	6823      	ldr	r3, [r4, #0]
 8018fc2:	781a      	ldrb	r2, [r3, #0]
 8018fc4:	4410      	add	r0, r2
 8018fc6:	7842      	ldrb	r2, [r0, #1]
 8018fc8:	0712      	lsls	r2, r2, #28
 8018fca:	d464      	bmi.n	8019096 <__ssvfiscanf_r+0x22a>
 8018fcc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018fce:	2b02      	cmp	r3, #2
 8018fd0:	dc73      	bgt.n	80190ba <__ssvfiscanf_r+0x24e>
 8018fd2:	466b      	mov	r3, sp
 8018fd4:	4622      	mov	r2, r4
 8018fd6:	a941      	add	r1, sp, #260	; 0x104
 8018fd8:	4630      	mov	r0, r6
 8018fda:	f000 f9d5 	bl	8019388 <_scanf_chars>
 8018fde:	2801      	cmp	r0, #1
 8018fe0:	f000 8089 	beq.w	80190f6 <__ssvfiscanf_r+0x28a>
 8018fe4:	2802      	cmp	r0, #2
 8018fe6:	f47f af71 	bne.w	8018ecc <__ssvfiscanf_r+0x60>
 8018fea:	e01d      	b.n	8019028 <__ssvfiscanf_r+0x1bc>
 8018fec:	2b75      	cmp	r3, #117	; 0x75
 8018fee:	d0d1      	beq.n	8018f94 <__ssvfiscanf_r+0x128>
 8018ff0:	2b78      	cmp	r3, #120	; 0x78
 8018ff2:	d0c0      	beq.n	8018f76 <__ssvfiscanf_r+0x10a>
 8018ff4:	2b73      	cmp	r3, #115	; 0x73
 8018ff6:	d1af      	bne.n	8018f58 <__ssvfiscanf_r+0xec>
 8018ff8:	2302      	movs	r3, #2
 8018ffa:	e7d8      	b.n	8018fae <__ssvfiscanf_r+0x142>
 8018ffc:	6863      	ldr	r3, [r4, #4]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	dd0c      	ble.n	801901c <__ssvfiscanf_r+0x1b0>
 8019002:	6823      	ldr	r3, [r4, #0]
 8019004:	781a      	ldrb	r2, [r3, #0]
 8019006:	455a      	cmp	r2, fp
 8019008:	d175      	bne.n	80190f6 <__ssvfiscanf_r+0x28a>
 801900a:	3301      	adds	r3, #1
 801900c:	6862      	ldr	r2, [r4, #4]
 801900e:	6023      	str	r3, [r4, #0]
 8019010:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019012:	3a01      	subs	r2, #1
 8019014:	3301      	adds	r3, #1
 8019016:	6062      	str	r2, [r4, #4]
 8019018:	9345      	str	r3, [sp, #276]	; 0x114
 801901a:	e757      	b.n	8018ecc <__ssvfiscanf_r+0x60>
 801901c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801901e:	4621      	mov	r1, r4
 8019020:	4630      	mov	r0, r6
 8019022:	4798      	blx	r3
 8019024:	2800      	cmp	r0, #0
 8019026:	d0ec      	beq.n	8019002 <__ssvfiscanf_r+0x196>
 8019028:	9844      	ldr	r0, [sp, #272]	; 0x110
 801902a:	2800      	cmp	r0, #0
 801902c:	d159      	bne.n	80190e2 <__ssvfiscanf_r+0x276>
 801902e:	f04f 30ff 	mov.w	r0, #4294967295
 8019032:	e05c      	b.n	80190ee <__ssvfiscanf_r+0x282>
 8019034:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019036:	f042 0220 	orr.w	r2, r2, #32
 801903a:	9241      	str	r2, [sp, #260]	; 0x104
 801903c:	e79b      	b.n	8018f76 <__ssvfiscanf_r+0x10a>
 801903e:	2308      	movs	r3, #8
 8019040:	9342      	str	r3, [sp, #264]	; 0x108
 8019042:	2304      	movs	r3, #4
 8019044:	e7b3      	b.n	8018fae <__ssvfiscanf_r+0x142>
 8019046:	4629      	mov	r1, r5
 8019048:	4640      	mov	r0, r8
 801904a:	f000 fb17 	bl	801967c <__sccl>
 801904e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019050:	4605      	mov	r5, r0
 8019052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019056:	9341      	str	r3, [sp, #260]	; 0x104
 8019058:	2301      	movs	r3, #1
 801905a:	e7a8      	b.n	8018fae <__ssvfiscanf_r+0x142>
 801905c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801905e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019062:	9341      	str	r3, [sp, #260]	; 0x104
 8019064:	2300      	movs	r3, #0
 8019066:	e7a2      	b.n	8018fae <__ssvfiscanf_r+0x142>
 8019068:	9841      	ldr	r0, [sp, #260]	; 0x104
 801906a:	06c3      	lsls	r3, r0, #27
 801906c:	f53f af2e 	bmi.w	8018ecc <__ssvfiscanf_r+0x60>
 8019070:	9b00      	ldr	r3, [sp, #0]
 8019072:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019074:	1d19      	adds	r1, r3, #4
 8019076:	9100      	str	r1, [sp, #0]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	07c0      	lsls	r0, r0, #31
 801907c:	bf4c      	ite	mi
 801907e:	801a      	strhmi	r2, [r3, #0]
 8019080:	601a      	strpl	r2, [r3, #0]
 8019082:	e723      	b.n	8018ecc <__ssvfiscanf_r+0x60>
 8019084:	2305      	movs	r3, #5
 8019086:	e792      	b.n	8018fae <__ssvfiscanf_r+0x142>
 8019088:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801908a:	4621      	mov	r1, r4
 801908c:	4630      	mov	r0, r6
 801908e:	4798      	blx	r3
 8019090:	2800      	cmp	r0, #0
 8019092:	d090      	beq.n	8018fb6 <__ssvfiscanf_r+0x14a>
 8019094:	e7c8      	b.n	8019028 <__ssvfiscanf_r+0x1bc>
 8019096:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019098:	3201      	adds	r2, #1
 801909a:	9245      	str	r2, [sp, #276]	; 0x114
 801909c:	6862      	ldr	r2, [r4, #4]
 801909e:	3a01      	subs	r2, #1
 80190a0:	2a00      	cmp	r2, #0
 80190a2:	6062      	str	r2, [r4, #4]
 80190a4:	dd02      	ble.n	80190ac <__ssvfiscanf_r+0x240>
 80190a6:	3301      	adds	r3, #1
 80190a8:	6023      	str	r3, [r4, #0]
 80190aa:	e787      	b.n	8018fbc <__ssvfiscanf_r+0x150>
 80190ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80190ae:	4621      	mov	r1, r4
 80190b0:	4630      	mov	r0, r6
 80190b2:	4798      	blx	r3
 80190b4:	2800      	cmp	r0, #0
 80190b6:	d081      	beq.n	8018fbc <__ssvfiscanf_r+0x150>
 80190b8:	e7b6      	b.n	8019028 <__ssvfiscanf_r+0x1bc>
 80190ba:	2b04      	cmp	r3, #4
 80190bc:	dc06      	bgt.n	80190cc <__ssvfiscanf_r+0x260>
 80190be:	466b      	mov	r3, sp
 80190c0:	4622      	mov	r2, r4
 80190c2:	a941      	add	r1, sp, #260	; 0x104
 80190c4:	4630      	mov	r0, r6
 80190c6:	f000 f9c1 	bl	801944c <_scanf_i>
 80190ca:	e788      	b.n	8018fde <__ssvfiscanf_r+0x172>
 80190cc:	4b0e      	ldr	r3, [pc, #56]	; (8019108 <__ssvfiscanf_r+0x29c>)
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	f43f aefc 	beq.w	8018ecc <__ssvfiscanf_r+0x60>
 80190d4:	466b      	mov	r3, sp
 80190d6:	4622      	mov	r2, r4
 80190d8:	a941      	add	r1, sp, #260	; 0x104
 80190da:	4630      	mov	r0, r6
 80190dc:	f7fc fa02 	bl	80154e4 <_scanf_float>
 80190e0:	e77d      	b.n	8018fde <__ssvfiscanf_r+0x172>
 80190e2:	89a3      	ldrh	r3, [r4, #12]
 80190e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80190e8:	bf18      	it	ne
 80190ea:	f04f 30ff 	movne.w	r0, #4294967295
 80190ee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80190f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80190f8:	e7f9      	b.n	80190ee <__ssvfiscanf_r+0x282>
 80190fa:	bf00      	nop
 80190fc:	08018db9 	.word	0x08018db9
 8019100:	08018e33 	.word	0x08018e33
 8019104:	0801e532 	.word	0x0801e532
 8019108:	080154e5 	.word	0x080154e5

0801910c <__sfputc_r>:
 801910c:	6893      	ldr	r3, [r2, #8]
 801910e:	b410      	push	{r4}
 8019110:	3b01      	subs	r3, #1
 8019112:	2b00      	cmp	r3, #0
 8019114:	6093      	str	r3, [r2, #8]
 8019116:	da07      	bge.n	8019128 <__sfputc_r+0x1c>
 8019118:	6994      	ldr	r4, [r2, #24]
 801911a:	42a3      	cmp	r3, r4
 801911c:	db01      	blt.n	8019122 <__sfputc_r+0x16>
 801911e:	290a      	cmp	r1, #10
 8019120:	d102      	bne.n	8019128 <__sfputc_r+0x1c>
 8019122:	bc10      	pop	{r4}
 8019124:	f7fd bbc2 	b.w	80168ac <__swbuf_r>
 8019128:	6813      	ldr	r3, [r2, #0]
 801912a:	1c58      	adds	r0, r3, #1
 801912c:	6010      	str	r0, [r2, #0]
 801912e:	7019      	strb	r1, [r3, #0]
 8019130:	4608      	mov	r0, r1
 8019132:	bc10      	pop	{r4}
 8019134:	4770      	bx	lr

08019136 <__sfputs_r>:
 8019136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019138:	4606      	mov	r6, r0
 801913a:	460f      	mov	r7, r1
 801913c:	4614      	mov	r4, r2
 801913e:	18d5      	adds	r5, r2, r3
 8019140:	42ac      	cmp	r4, r5
 8019142:	d101      	bne.n	8019148 <__sfputs_r+0x12>
 8019144:	2000      	movs	r0, #0
 8019146:	e007      	b.n	8019158 <__sfputs_r+0x22>
 8019148:	463a      	mov	r2, r7
 801914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801914e:	4630      	mov	r0, r6
 8019150:	f7ff ffdc 	bl	801910c <__sfputc_r>
 8019154:	1c43      	adds	r3, r0, #1
 8019156:	d1f3      	bne.n	8019140 <__sfputs_r+0xa>
 8019158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801915c <_vfiprintf_r>:
 801915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019160:	460c      	mov	r4, r1
 8019162:	b09d      	sub	sp, #116	; 0x74
 8019164:	4617      	mov	r7, r2
 8019166:	461d      	mov	r5, r3
 8019168:	4606      	mov	r6, r0
 801916a:	b118      	cbz	r0, 8019174 <_vfiprintf_r+0x18>
 801916c:	6983      	ldr	r3, [r0, #24]
 801916e:	b90b      	cbnz	r3, 8019174 <_vfiprintf_r+0x18>
 8019170:	f7fe fbb2 	bl	80178d8 <__sinit>
 8019174:	4b7c      	ldr	r3, [pc, #496]	; (8019368 <_vfiprintf_r+0x20c>)
 8019176:	429c      	cmp	r4, r3
 8019178:	d158      	bne.n	801922c <_vfiprintf_r+0xd0>
 801917a:	6874      	ldr	r4, [r6, #4]
 801917c:	89a3      	ldrh	r3, [r4, #12]
 801917e:	0718      	lsls	r0, r3, #28
 8019180:	d55e      	bpl.n	8019240 <_vfiprintf_r+0xe4>
 8019182:	6923      	ldr	r3, [r4, #16]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d05b      	beq.n	8019240 <_vfiprintf_r+0xe4>
 8019188:	2300      	movs	r3, #0
 801918a:	9309      	str	r3, [sp, #36]	; 0x24
 801918c:	2320      	movs	r3, #32
 801918e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019192:	2330      	movs	r3, #48	; 0x30
 8019194:	f04f 0b01 	mov.w	fp, #1
 8019198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801919c:	9503      	str	r5, [sp, #12]
 801919e:	46b8      	mov	r8, r7
 80191a0:	4645      	mov	r5, r8
 80191a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80191a6:	b10b      	cbz	r3, 80191ac <_vfiprintf_r+0x50>
 80191a8:	2b25      	cmp	r3, #37	; 0x25
 80191aa:	d154      	bne.n	8019256 <_vfiprintf_r+0xfa>
 80191ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80191b0:	d00b      	beq.n	80191ca <_vfiprintf_r+0x6e>
 80191b2:	4653      	mov	r3, sl
 80191b4:	463a      	mov	r2, r7
 80191b6:	4621      	mov	r1, r4
 80191b8:	4630      	mov	r0, r6
 80191ba:	f7ff ffbc 	bl	8019136 <__sfputs_r>
 80191be:	3001      	adds	r0, #1
 80191c0:	f000 80c2 	beq.w	8019348 <_vfiprintf_r+0x1ec>
 80191c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191c6:	4453      	add	r3, sl
 80191c8:	9309      	str	r3, [sp, #36]	; 0x24
 80191ca:	f898 3000 	ldrb.w	r3, [r8]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	f000 80ba 	beq.w	8019348 <_vfiprintf_r+0x1ec>
 80191d4:	2300      	movs	r3, #0
 80191d6:	f04f 32ff 	mov.w	r2, #4294967295
 80191da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191de:	9304      	str	r3, [sp, #16]
 80191e0:	9307      	str	r3, [sp, #28]
 80191e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191e6:	931a      	str	r3, [sp, #104]	; 0x68
 80191e8:	46a8      	mov	r8, r5
 80191ea:	2205      	movs	r2, #5
 80191ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80191f0:	485e      	ldr	r0, [pc, #376]	; (801936c <_vfiprintf_r+0x210>)
 80191f2:	f7fe ffd5 	bl	80181a0 <memchr>
 80191f6:	9b04      	ldr	r3, [sp, #16]
 80191f8:	bb78      	cbnz	r0, 801925a <_vfiprintf_r+0xfe>
 80191fa:	06d9      	lsls	r1, r3, #27
 80191fc:	bf44      	itt	mi
 80191fe:	2220      	movmi	r2, #32
 8019200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019204:	071a      	lsls	r2, r3, #28
 8019206:	bf44      	itt	mi
 8019208:	222b      	movmi	r2, #43	; 0x2b
 801920a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801920e:	782a      	ldrb	r2, [r5, #0]
 8019210:	2a2a      	cmp	r2, #42	; 0x2a
 8019212:	d02a      	beq.n	801926a <_vfiprintf_r+0x10e>
 8019214:	46a8      	mov	r8, r5
 8019216:	2000      	movs	r0, #0
 8019218:	250a      	movs	r5, #10
 801921a:	9a07      	ldr	r2, [sp, #28]
 801921c:	4641      	mov	r1, r8
 801921e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019222:	3b30      	subs	r3, #48	; 0x30
 8019224:	2b09      	cmp	r3, #9
 8019226:	d969      	bls.n	80192fc <_vfiprintf_r+0x1a0>
 8019228:	b360      	cbz	r0, 8019284 <_vfiprintf_r+0x128>
 801922a:	e024      	b.n	8019276 <_vfiprintf_r+0x11a>
 801922c:	4b50      	ldr	r3, [pc, #320]	; (8019370 <_vfiprintf_r+0x214>)
 801922e:	429c      	cmp	r4, r3
 8019230:	d101      	bne.n	8019236 <_vfiprintf_r+0xda>
 8019232:	68b4      	ldr	r4, [r6, #8]
 8019234:	e7a2      	b.n	801917c <_vfiprintf_r+0x20>
 8019236:	4b4f      	ldr	r3, [pc, #316]	; (8019374 <_vfiprintf_r+0x218>)
 8019238:	429c      	cmp	r4, r3
 801923a:	bf08      	it	eq
 801923c:	68f4      	ldreq	r4, [r6, #12]
 801923e:	e79d      	b.n	801917c <_vfiprintf_r+0x20>
 8019240:	4621      	mov	r1, r4
 8019242:	4630      	mov	r0, r6
 8019244:	f7fd fb96 	bl	8016974 <__swsetup_r>
 8019248:	2800      	cmp	r0, #0
 801924a:	d09d      	beq.n	8019188 <_vfiprintf_r+0x2c>
 801924c:	f04f 30ff 	mov.w	r0, #4294967295
 8019250:	b01d      	add	sp, #116	; 0x74
 8019252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019256:	46a8      	mov	r8, r5
 8019258:	e7a2      	b.n	80191a0 <_vfiprintf_r+0x44>
 801925a:	4a44      	ldr	r2, [pc, #272]	; (801936c <_vfiprintf_r+0x210>)
 801925c:	4645      	mov	r5, r8
 801925e:	1a80      	subs	r0, r0, r2
 8019260:	fa0b f000 	lsl.w	r0, fp, r0
 8019264:	4318      	orrs	r0, r3
 8019266:	9004      	str	r0, [sp, #16]
 8019268:	e7be      	b.n	80191e8 <_vfiprintf_r+0x8c>
 801926a:	9a03      	ldr	r2, [sp, #12]
 801926c:	1d11      	adds	r1, r2, #4
 801926e:	6812      	ldr	r2, [r2, #0]
 8019270:	9103      	str	r1, [sp, #12]
 8019272:	2a00      	cmp	r2, #0
 8019274:	db01      	blt.n	801927a <_vfiprintf_r+0x11e>
 8019276:	9207      	str	r2, [sp, #28]
 8019278:	e004      	b.n	8019284 <_vfiprintf_r+0x128>
 801927a:	4252      	negs	r2, r2
 801927c:	f043 0302 	orr.w	r3, r3, #2
 8019280:	9207      	str	r2, [sp, #28]
 8019282:	9304      	str	r3, [sp, #16]
 8019284:	f898 3000 	ldrb.w	r3, [r8]
 8019288:	2b2e      	cmp	r3, #46	; 0x2e
 801928a:	d10e      	bne.n	80192aa <_vfiprintf_r+0x14e>
 801928c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019290:	2b2a      	cmp	r3, #42	; 0x2a
 8019292:	d138      	bne.n	8019306 <_vfiprintf_r+0x1aa>
 8019294:	9b03      	ldr	r3, [sp, #12]
 8019296:	f108 0802 	add.w	r8, r8, #2
 801929a:	1d1a      	adds	r2, r3, #4
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	9203      	str	r2, [sp, #12]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	bfb8      	it	lt
 80192a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80192a8:	9305      	str	r3, [sp, #20]
 80192aa:	4d33      	ldr	r5, [pc, #204]	; (8019378 <_vfiprintf_r+0x21c>)
 80192ac:	2203      	movs	r2, #3
 80192ae:	f898 1000 	ldrb.w	r1, [r8]
 80192b2:	4628      	mov	r0, r5
 80192b4:	f7fe ff74 	bl	80181a0 <memchr>
 80192b8:	b140      	cbz	r0, 80192cc <_vfiprintf_r+0x170>
 80192ba:	2340      	movs	r3, #64	; 0x40
 80192bc:	1b40      	subs	r0, r0, r5
 80192be:	fa03 f000 	lsl.w	r0, r3, r0
 80192c2:	9b04      	ldr	r3, [sp, #16]
 80192c4:	f108 0801 	add.w	r8, r8, #1
 80192c8:	4303      	orrs	r3, r0
 80192ca:	9304      	str	r3, [sp, #16]
 80192cc:	f898 1000 	ldrb.w	r1, [r8]
 80192d0:	2206      	movs	r2, #6
 80192d2:	482a      	ldr	r0, [pc, #168]	; (801937c <_vfiprintf_r+0x220>)
 80192d4:	f108 0701 	add.w	r7, r8, #1
 80192d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80192dc:	f7fe ff60 	bl	80181a0 <memchr>
 80192e0:	2800      	cmp	r0, #0
 80192e2:	d037      	beq.n	8019354 <_vfiprintf_r+0x1f8>
 80192e4:	4b26      	ldr	r3, [pc, #152]	; (8019380 <_vfiprintf_r+0x224>)
 80192e6:	bb1b      	cbnz	r3, 8019330 <_vfiprintf_r+0x1d4>
 80192e8:	9b03      	ldr	r3, [sp, #12]
 80192ea:	3307      	adds	r3, #7
 80192ec:	f023 0307 	bic.w	r3, r3, #7
 80192f0:	3308      	adds	r3, #8
 80192f2:	9303      	str	r3, [sp, #12]
 80192f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192f6:	444b      	add	r3, r9
 80192f8:	9309      	str	r3, [sp, #36]	; 0x24
 80192fa:	e750      	b.n	801919e <_vfiprintf_r+0x42>
 80192fc:	fb05 3202 	mla	r2, r5, r2, r3
 8019300:	2001      	movs	r0, #1
 8019302:	4688      	mov	r8, r1
 8019304:	e78a      	b.n	801921c <_vfiprintf_r+0xc0>
 8019306:	2300      	movs	r3, #0
 8019308:	250a      	movs	r5, #10
 801930a:	4619      	mov	r1, r3
 801930c:	f108 0801 	add.w	r8, r8, #1
 8019310:	9305      	str	r3, [sp, #20]
 8019312:	4640      	mov	r0, r8
 8019314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019318:	3a30      	subs	r2, #48	; 0x30
 801931a:	2a09      	cmp	r2, #9
 801931c:	d903      	bls.n	8019326 <_vfiprintf_r+0x1ca>
 801931e:	2b00      	cmp	r3, #0
 8019320:	d0c3      	beq.n	80192aa <_vfiprintf_r+0x14e>
 8019322:	9105      	str	r1, [sp, #20]
 8019324:	e7c1      	b.n	80192aa <_vfiprintf_r+0x14e>
 8019326:	fb05 2101 	mla	r1, r5, r1, r2
 801932a:	2301      	movs	r3, #1
 801932c:	4680      	mov	r8, r0
 801932e:	e7f0      	b.n	8019312 <_vfiprintf_r+0x1b6>
 8019330:	ab03      	add	r3, sp, #12
 8019332:	9300      	str	r3, [sp, #0]
 8019334:	4622      	mov	r2, r4
 8019336:	4b13      	ldr	r3, [pc, #76]	; (8019384 <_vfiprintf_r+0x228>)
 8019338:	a904      	add	r1, sp, #16
 801933a:	4630      	mov	r0, r6
 801933c:	f7fb fd14 	bl	8014d68 <_printf_float>
 8019340:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019344:	4681      	mov	r9, r0
 8019346:	d1d5      	bne.n	80192f4 <_vfiprintf_r+0x198>
 8019348:	89a3      	ldrh	r3, [r4, #12]
 801934a:	065b      	lsls	r3, r3, #25
 801934c:	f53f af7e 	bmi.w	801924c <_vfiprintf_r+0xf0>
 8019350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019352:	e77d      	b.n	8019250 <_vfiprintf_r+0xf4>
 8019354:	ab03      	add	r3, sp, #12
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	4622      	mov	r2, r4
 801935a:	4b0a      	ldr	r3, [pc, #40]	; (8019384 <_vfiprintf_r+0x228>)
 801935c:	a904      	add	r1, sp, #16
 801935e:	4630      	mov	r0, r6
 8019360:	f7fb ffae 	bl	80152c0 <_printf_i>
 8019364:	e7ec      	b.n	8019340 <_vfiprintf_r+0x1e4>
 8019366:	bf00      	nop
 8019368:	0801e3e0 	.word	0x0801e3e0
 801936c:	0801e52c 	.word	0x0801e52c
 8019370:	0801e400 	.word	0x0801e400
 8019374:	0801e3c0 	.word	0x0801e3c0
 8019378:	0801e532 	.word	0x0801e532
 801937c:	0801e536 	.word	0x0801e536
 8019380:	08014d69 	.word	0x08014d69
 8019384:	08019137 	.word	0x08019137

08019388 <_scanf_chars>:
 8019388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801938c:	4615      	mov	r5, r2
 801938e:	688a      	ldr	r2, [r1, #8]
 8019390:	4680      	mov	r8, r0
 8019392:	460c      	mov	r4, r1
 8019394:	b932      	cbnz	r2, 80193a4 <_scanf_chars+0x1c>
 8019396:	698a      	ldr	r2, [r1, #24]
 8019398:	2a00      	cmp	r2, #0
 801939a:	bf14      	ite	ne
 801939c:	f04f 32ff 	movne.w	r2, #4294967295
 80193a0:	2201      	moveq	r2, #1
 80193a2:	608a      	str	r2, [r1, #8]
 80193a4:	2600      	movs	r6, #0
 80193a6:	6822      	ldr	r2, [r4, #0]
 80193a8:	06d1      	lsls	r1, r2, #27
 80193aa:	bf5f      	itttt	pl
 80193ac:	681a      	ldrpl	r2, [r3, #0]
 80193ae:	1d11      	addpl	r1, r2, #4
 80193b0:	6019      	strpl	r1, [r3, #0]
 80193b2:	6817      	ldrpl	r7, [r2, #0]
 80193b4:	69a3      	ldr	r3, [r4, #24]
 80193b6:	b1db      	cbz	r3, 80193f0 <_scanf_chars+0x68>
 80193b8:	2b01      	cmp	r3, #1
 80193ba:	d107      	bne.n	80193cc <_scanf_chars+0x44>
 80193bc:	682b      	ldr	r3, [r5, #0]
 80193be:	6962      	ldr	r2, [r4, #20]
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	5cd3      	ldrb	r3, [r2, r3]
 80193c4:	b9a3      	cbnz	r3, 80193f0 <_scanf_chars+0x68>
 80193c6:	2e00      	cmp	r6, #0
 80193c8:	d131      	bne.n	801942e <_scanf_chars+0xa6>
 80193ca:	e006      	b.n	80193da <_scanf_chars+0x52>
 80193cc:	2b02      	cmp	r3, #2
 80193ce:	d007      	beq.n	80193e0 <_scanf_chars+0x58>
 80193d0:	2e00      	cmp	r6, #0
 80193d2:	d12c      	bne.n	801942e <_scanf_chars+0xa6>
 80193d4:	69a3      	ldr	r3, [r4, #24]
 80193d6:	2b01      	cmp	r3, #1
 80193d8:	d129      	bne.n	801942e <_scanf_chars+0xa6>
 80193da:	2001      	movs	r0, #1
 80193dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193e0:	f7fe fe30 	bl	8018044 <__locale_ctype_ptr>
 80193e4:	682b      	ldr	r3, [r5, #0]
 80193e6:	781b      	ldrb	r3, [r3, #0]
 80193e8:	4418      	add	r0, r3
 80193ea:	7843      	ldrb	r3, [r0, #1]
 80193ec:	071b      	lsls	r3, r3, #28
 80193ee:	d4ef      	bmi.n	80193d0 <_scanf_chars+0x48>
 80193f0:	6823      	ldr	r3, [r4, #0]
 80193f2:	3601      	adds	r6, #1
 80193f4:	06da      	lsls	r2, r3, #27
 80193f6:	bf5e      	ittt	pl
 80193f8:	682b      	ldrpl	r3, [r5, #0]
 80193fa:	781b      	ldrbpl	r3, [r3, #0]
 80193fc:	703b      	strbpl	r3, [r7, #0]
 80193fe:	682a      	ldr	r2, [r5, #0]
 8019400:	686b      	ldr	r3, [r5, #4]
 8019402:	f102 0201 	add.w	r2, r2, #1
 8019406:	602a      	str	r2, [r5, #0]
 8019408:	68a2      	ldr	r2, [r4, #8]
 801940a:	f103 33ff 	add.w	r3, r3, #4294967295
 801940e:	f102 32ff 	add.w	r2, r2, #4294967295
 8019412:	606b      	str	r3, [r5, #4]
 8019414:	bf58      	it	pl
 8019416:	3701      	addpl	r7, #1
 8019418:	60a2      	str	r2, [r4, #8]
 801941a:	b142      	cbz	r2, 801942e <_scanf_chars+0xa6>
 801941c:	2b00      	cmp	r3, #0
 801941e:	dcc9      	bgt.n	80193b4 <_scanf_chars+0x2c>
 8019420:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019424:	4629      	mov	r1, r5
 8019426:	4640      	mov	r0, r8
 8019428:	4798      	blx	r3
 801942a:	2800      	cmp	r0, #0
 801942c:	d0c2      	beq.n	80193b4 <_scanf_chars+0x2c>
 801942e:	6823      	ldr	r3, [r4, #0]
 8019430:	f013 0310 	ands.w	r3, r3, #16
 8019434:	d105      	bne.n	8019442 <_scanf_chars+0xba>
 8019436:	68e2      	ldr	r2, [r4, #12]
 8019438:	3201      	adds	r2, #1
 801943a:	60e2      	str	r2, [r4, #12]
 801943c:	69a2      	ldr	r2, [r4, #24]
 801943e:	b102      	cbz	r2, 8019442 <_scanf_chars+0xba>
 8019440:	703b      	strb	r3, [r7, #0]
 8019442:	6923      	ldr	r3, [r4, #16]
 8019444:	2000      	movs	r0, #0
 8019446:	441e      	add	r6, r3
 8019448:	6126      	str	r6, [r4, #16]
 801944a:	e7c7      	b.n	80193dc <_scanf_chars+0x54>

0801944c <_scanf_i>:
 801944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019450:	460c      	mov	r4, r1
 8019452:	469a      	mov	sl, r3
 8019454:	4b74      	ldr	r3, [pc, #464]	; (8019628 <_scanf_i+0x1dc>)
 8019456:	b087      	sub	sp, #28
 8019458:	4683      	mov	fp, r0
 801945a:	4616      	mov	r6, r2
 801945c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019460:	ab03      	add	r3, sp, #12
 8019462:	68a7      	ldr	r7, [r4, #8]
 8019464:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019468:	4b70      	ldr	r3, [pc, #448]	; (801962c <_scanf_i+0x1e0>)
 801946a:	69a1      	ldr	r1, [r4, #24]
 801946c:	4a70      	ldr	r2, [pc, #448]	; (8019630 <_scanf_i+0x1e4>)
 801946e:	f104 091c 	add.w	r9, r4, #28
 8019472:	2903      	cmp	r1, #3
 8019474:	bf08      	it	eq
 8019476:	461a      	moveq	r2, r3
 8019478:	1e7b      	subs	r3, r7, #1
 801947a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801947e:	bf84      	itt	hi
 8019480:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019484:	60a3      	strhi	r3, [r4, #8]
 8019486:	6823      	ldr	r3, [r4, #0]
 8019488:	bf88      	it	hi
 801948a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801948e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019492:	6023      	str	r3, [r4, #0]
 8019494:	bf98      	it	ls
 8019496:	2700      	movls	r7, #0
 8019498:	464b      	mov	r3, r9
 801949a:	f04f 0800 	mov.w	r8, #0
 801949e:	9200      	str	r2, [sp, #0]
 80194a0:	bf88      	it	hi
 80194a2:	197f      	addhi	r7, r7, r5
 80194a4:	6831      	ldr	r1, [r6, #0]
 80194a6:	9301      	str	r3, [sp, #4]
 80194a8:	ab03      	add	r3, sp, #12
 80194aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80194ae:	2202      	movs	r2, #2
 80194b0:	7809      	ldrb	r1, [r1, #0]
 80194b2:	f7fe fe75 	bl	80181a0 <memchr>
 80194b6:	9b01      	ldr	r3, [sp, #4]
 80194b8:	b330      	cbz	r0, 8019508 <_scanf_i+0xbc>
 80194ba:	f1b8 0f01 	cmp.w	r8, #1
 80194be:	d15a      	bne.n	8019576 <_scanf_i+0x12a>
 80194c0:	6862      	ldr	r2, [r4, #4]
 80194c2:	b92a      	cbnz	r2, 80194d0 <_scanf_i+0x84>
 80194c4:	2108      	movs	r1, #8
 80194c6:	6822      	ldr	r2, [r4, #0]
 80194c8:	6061      	str	r1, [r4, #4]
 80194ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80194ce:	6022      	str	r2, [r4, #0]
 80194d0:	6822      	ldr	r2, [r4, #0]
 80194d2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80194d6:	6022      	str	r2, [r4, #0]
 80194d8:	68a2      	ldr	r2, [r4, #8]
 80194da:	1e51      	subs	r1, r2, #1
 80194dc:	60a1      	str	r1, [r4, #8]
 80194de:	b19a      	cbz	r2, 8019508 <_scanf_i+0xbc>
 80194e0:	6832      	ldr	r2, [r6, #0]
 80194e2:	1c5d      	adds	r5, r3, #1
 80194e4:	1c51      	adds	r1, r2, #1
 80194e6:	6031      	str	r1, [r6, #0]
 80194e8:	7812      	ldrb	r2, [r2, #0]
 80194ea:	701a      	strb	r2, [r3, #0]
 80194ec:	6873      	ldr	r3, [r6, #4]
 80194ee:	3b01      	subs	r3, #1
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	6073      	str	r3, [r6, #4]
 80194f4:	dc07      	bgt.n	8019506 <_scanf_i+0xba>
 80194f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80194fa:	4631      	mov	r1, r6
 80194fc:	4658      	mov	r0, fp
 80194fe:	4798      	blx	r3
 8019500:	2800      	cmp	r0, #0
 8019502:	f040 8087 	bne.w	8019614 <_scanf_i+0x1c8>
 8019506:	462b      	mov	r3, r5
 8019508:	f108 0801 	add.w	r8, r8, #1
 801950c:	f1b8 0f03 	cmp.w	r8, #3
 8019510:	d1c8      	bne.n	80194a4 <_scanf_i+0x58>
 8019512:	6862      	ldr	r2, [r4, #4]
 8019514:	b90a      	cbnz	r2, 801951a <_scanf_i+0xce>
 8019516:	220a      	movs	r2, #10
 8019518:	6062      	str	r2, [r4, #4]
 801951a:	6862      	ldr	r2, [r4, #4]
 801951c:	4945      	ldr	r1, [pc, #276]	; (8019634 <_scanf_i+0x1e8>)
 801951e:	6960      	ldr	r0, [r4, #20]
 8019520:	1a89      	subs	r1, r1, r2
 8019522:	9301      	str	r3, [sp, #4]
 8019524:	f000 f8aa 	bl	801967c <__sccl>
 8019528:	9b01      	ldr	r3, [sp, #4]
 801952a:	f04f 0800 	mov.w	r8, #0
 801952e:	461d      	mov	r5, r3
 8019530:	68a3      	ldr	r3, [r4, #8]
 8019532:	6822      	ldr	r2, [r4, #0]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d03b      	beq.n	80195b0 <_scanf_i+0x164>
 8019538:	6831      	ldr	r1, [r6, #0]
 801953a:	6960      	ldr	r0, [r4, #20]
 801953c:	f891 c000 	ldrb.w	ip, [r1]
 8019540:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019544:	2800      	cmp	r0, #0
 8019546:	d033      	beq.n	80195b0 <_scanf_i+0x164>
 8019548:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801954c:	d121      	bne.n	8019592 <_scanf_i+0x146>
 801954e:	0510      	lsls	r0, r2, #20
 8019550:	d51f      	bpl.n	8019592 <_scanf_i+0x146>
 8019552:	f108 0801 	add.w	r8, r8, #1
 8019556:	b117      	cbz	r7, 801955e <_scanf_i+0x112>
 8019558:	3301      	adds	r3, #1
 801955a:	3f01      	subs	r7, #1
 801955c:	60a3      	str	r3, [r4, #8]
 801955e:	6873      	ldr	r3, [r6, #4]
 8019560:	3b01      	subs	r3, #1
 8019562:	2b00      	cmp	r3, #0
 8019564:	6073      	str	r3, [r6, #4]
 8019566:	dd1c      	ble.n	80195a2 <_scanf_i+0x156>
 8019568:	6833      	ldr	r3, [r6, #0]
 801956a:	3301      	adds	r3, #1
 801956c:	6033      	str	r3, [r6, #0]
 801956e:	68a3      	ldr	r3, [r4, #8]
 8019570:	3b01      	subs	r3, #1
 8019572:	60a3      	str	r3, [r4, #8]
 8019574:	e7dc      	b.n	8019530 <_scanf_i+0xe4>
 8019576:	f1b8 0f02 	cmp.w	r8, #2
 801957a:	d1ad      	bne.n	80194d8 <_scanf_i+0x8c>
 801957c:	6822      	ldr	r2, [r4, #0]
 801957e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019582:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019586:	d1bf      	bne.n	8019508 <_scanf_i+0xbc>
 8019588:	2110      	movs	r1, #16
 801958a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801958e:	6061      	str	r1, [r4, #4]
 8019590:	e7a1      	b.n	80194d6 <_scanf_i+0x8a>
 8019592:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019596:	6022      	str	r2, [r4, #0]
 8019598:	780b      	ldrb	r3, [r1, #0]
 801959a:	3501      	adds	r5, #1
 801959c:	f805 3c01 	strb.w	r3, [r5, #-1]
 80195a0:	e7dd      	b.n	801955e <_scanf_i+0x112>
 80195a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80195a6:	4631      	mov	r1, r6
 80195a8:	4658      	mov	r0, fp
 80195aa:	4798      	blx	r3
 80195ac:	2800      	cmp	r0, #0
 80195ae:	d0de      	beq.n	801956e <_scanf_i+0x122>
 80195b0:	6823      	ldr	r3, [r4, #0]
 80195b2:	05d9      	lsls	r1, r3, #23
 80195b4:	d50c      	bpl.n	80195d0 <_scanf_i+0x184>
 80195b6:	454d      	cmp	r5, r9
 80195b8:	d908      	bls.n	80195cc <_scanf_i+0x180>
 80195ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80195be:	1e6f      	subs	r7, r5, #1
 80195c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80195c4:	4632      	mov	r2, r6
 80195c6:	4658      	mov	r0, fp
 80195c8:	4798      	blx	r3
 80195ca:	463d      	mov	r5, r7
 80195cc:	454d      	cmp	r5, r9
 80195ce:	d029      	beq.n	8019624 <_scanf_i+0x1d8>
 80195d0:	6822      	ldr	r2, [r4, #0]
 80195d2:	f012 0210 	ands.w	r2, r2, #16
 80195d6:	d113      	bne.n	8019600 <_scanf_i+0x1b4>
 80195d8:	702a      	strb	r2, [r5, #0]
 80195da:	6863      	ldr	r3, [r4, #4]
 80195dc:	4649      	mov	r1, r9
 80195de:	4658      	mov	r0, fp
 80195e0:	9e00      	ldr	r6, [sp, #0]
 80195e2:	47b0      	blx	r6
 80195e4:	f8da 3000 	ldr.w	r3, [sl]
 80195e8:	6821      	ldr	r1, [r4, #0]
 80195ea:	1d1a      	adds	r2, r3, #4
 80195ec:	f8ca 2000 	str.w	r2, [sl]
 80195f0:	f011 0f20 	tst.w	r1, #32
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	d010      	beq.n	801961a <_scanf_i+0x1ce>
 80195f8:	6018      	str	r0, [r3, #0]
 80195fa:	68e3      	ldr	r3, [r4, #12]
 80195fc:	3301      	adds	r3, #1
 80195fe:	60e3      	str	r3, [r4, #12]
 8019600:	2000      	movs	r0, #0
 8019602:	eba5 0509 	sub.w	r5, r5, r9
 8019606:	44a8      	add	r8, r5
 8019608:	6925      	ldr	r5, [r4, #16]
 801960a:	4445      	add	r5, r8
 801960c:	6125      	str	r5, [r4, #16]
 801960e:	b007      	add	sp, #28
 8019610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019614:	f04f 0800 	mov.w	r8, #0
 8019618:	e7ca      	b.n	80195b0 <_scanf_i+0x164>
 801961a:	07ca      	lsls	r2, r1, #31
 801961c:	bf4c      	ite	mi
 801961e:	8018      	strhmi	r0, [r3, #0]
 8019620:	6018      	strpl	r0, [r3, #0]
 8019622:	e7ea      	b.n	80195fa <_scanf_i+0x1ae>
 8019624:	2001      	movs	r0, #1
 8019626:	e7f2      	b.n	801960e <_scanf_i+0x1c2>
 8019628:	0801a6b0 	.word	0x0801a6b0
 801962c:	08016889 	.word	0x08016889
 8019630:	080197d5 	.word	0x080197d5
 8019634:	0801e54d 	.word	0x0801e54d

08019638 <_read_r>:
 8019638:	b538      	push	{r3, r4, r5, lr}
 801963a:	4605      	mov	r5, r0
 801963c:	4608      	mov	r0, r1
 801963e:	4611      	mov	r1, r2
 8019640:	2200      	movs	r2, #0
 8019642:	4c05      	ldr	r4, [pc, #20]	; (8019658 <_read_r+0x20>)
 8019644:	6022      	str	r2, [r4, #0]
 8019646:	461a      	mov	r2, r3
 8019648:	f7ea fb1a 	bl	8003c80 <_read>
 801964c:	1c43      	adds	r3, r0, #1
 801964e:	d102      	bne.n	8019656 <_read_r+0x1e>
 8019650:	6823      	ldr	r3, [r4, #0]
 8019652:	b103      	cbz	r3, 8019656 <_read_r+0x1e>
 8019654:	602b      	str	r3, [r5, #0]
 8019656:	bd38      	pop	{r3, r4, r5, pc}
 8019658:	20009e00 	.word	0x20009e00

0801965c <_sbrk_r>:
 801965c:	b538      	push	{r3, r4, r5, lr}
 801965e:	2300      	movs	r3, #0
 8019660:	4c05      	ldr	r4, [pc, #20]	; (8019678 <_sbrk_r+0x1c>)
 8019662:	4605      	mov	r5, r0
 8019664:	4608      	mov	r0, r1
 8019666:	6023      	str	r3, [r4, #0]
 8019668:	f000 f95e 	bl	8019928 <_sbrk>
 801966c:	1c43      	adds	r3, r0, #1
 801966e:	d102      	bne.n	8019676 <_sbrk_r+0x1a>
 8019670:	6823      	ldr	r3, [r4, #0]
 8019672:	b103      	cbz	r3, 8019676 <_sbrk_r+0x1a>
 8019674:	602b      	str	r3, [r5, #0]
 8019676:	bd38      	pop	{r3, r4, r5, pc}
 8019678:	20009e00 	.word	0x20009e00

0801967c <__sccl>:
 801967c:	b570      	push	{r4, r5, r6, lr}
 801967e:	780b      	ldrb	r3, [r1, #0]
 8019680:	1e44      	subs	r4, r0, #1
 8019682:	2b5e      	cmp	r3, #94	; 0x5e
 8019684:	bf13      	iteet	ne
 8019686:	1c4a      	addne	r2, r1, #1
 8019688:	1c8a      	addeq	r2, r1, #2
 801968a:	784b      	ldrbeq	r3, [r1, #1]
 801968c:	2100      	movne	r1, #0
 801968e:	bf08      	it	eq
 8019690:	2101      	moveq	r1, #1
 8019692:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019696:	f804 1f01 	strb.w	r1, [r4, #1]!
 801969a:	42ac      	cmp	r4, r5
 801969c:	d1fb      	bne.n	8019696 <__sccl+0x1a>
 801969e:	b913      	cbnz	r3, 80196a6 <__sccl+0x2a>
 80196a0:	3a01      	subs	r2, #1
 80196a2:	4610      	mov	r0, r2
 80196a4:	bd70      	pop	{r4, r5, r6, pc}
 80196a6:	f081 0401 	eor.w	r4, r1, #1
 80196aa:	54c4      	strb	r4, [r0, r3]
 80196ac:	1c51      	adds	r1, r2, #1
 80196ae:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80196b2:	1e4e      	subs	r6, r1, #1
 80196b4:	2d2d      	cmp	r5, #45	; 0x2d
 80196b6:	460a      	mov	r2, r1
 80196b8:	d006      	beq.n	80196c8 <__sccl+0x4c>
 80196ba:	2d5d      	cmp	r5, #93	; 0x5d
 80196bc:	d0f1      	beq.n	80196a2 <__sccl+0x26>
 80196be:	b90d      	cbnz	r5, 80196c4 <__sccl+0x48>
 80196c0:	4632      	mov	r2, r6
 80196c2:	e7ee      	b.n	80196a2 <__sccl+0x26>
 80196c4:	462b      	mov	r3, r5
 80196c6:	e7f0      	b.n	80196aa <__sccl+0x2e>
 80196c8:	780e      	ldrb	r6, [r1, #0]
 80196ca:	2e5d      	cmp	r6, #93	; 0x5d
 80196cc:	d0fa      	beq.n	80196c4 <__sccl+0x48>
 80196ce:	42b3      	cmp	r3, r6
 80196d0:	dcf8      	bgt.n	80196c4 <__sccl+0x48>
 80196d2:	3301      	adds	r3, #1
 80196d4:	429e      	cmp	r6, r3
 80196d6:	54c4      	strb	r4, [r0, r3]
 80196d8:	dcfb      	bgt.n	80196d2 <__sccl+0x56>
 80196da:	3102      	adds	r1, #2
 80196dc:	e7e7      	b.n	80196ae <__sccl+0x32>

080196de <_strtoul_l.isra.0>:
 80196de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196e2:	4680      	mov	r8, r0
 80196e4:	4689      	mov	r9, r1
 80196e6:	4692      	mov	sl, r2
 80196e8:	461e      	mov	r6, r3
 80196ea:	460f      	mov	r7, r1
 80196ec:	463d      	mov	r5, r7
 80196ee:	9808      	ldr	r0, [sp, #32]
 80196f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80196f4:	f7fe fca2 	bl	801803c <__locale_ctype_ptr_l>
 80196f8:	4420      	add	r0, r4
 80196fa:	7843      	ldrb	r3, [r0, #1]
 80196fc:	f013 0308 	ands.w	r3, r3, #8
 8019700:	d130      	bne.n	8019764 <_strtoul_l.isra.0+0x86>
 8019702:	2c2d      	cmp	r4, #45	; 0x2d
 8019704:	d130      	bne.n	8019768 <_strtoul_l.isra.0+0x8a>
 8019706:	2101      	movs	r1, #1
 8019708:	787c      	ldrb	r4, [r7, #1]
 801970a:	1cbd      	adds	r5, r7, #2
 801970c:	2e00      	cmp	r6, #0
 801970e:	d05c      	beq.n	80197ca <_strtoul_l.isra.0+0xec>
 8019710:	2e10      	cmp	r6, #16
 8019712:	d109      	bne.n	8019728 <_strtoul_l.isra.0+0x4a>
 8019714:	2c30      	cmp	r4, #48	; 0x30
 8019716:	d107      	bne.n	8019728 <_strtoul_l.isra.0+0x4a>
 8019718:	782b      	ldrb	r3, [r5, #0]
 801971a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801971e:	2b58      	cmp	r3, #88	; 0x58
 8019720:	d14e      	bne.n	80197c0 <_strtoul_l.isra.0+0xe2>
 8019722:	2610      	movs	r6, #16
 8019724:	786c      	ldrb	r4, [r5, #1]
 8019726:	3502      	adds	r5, #2
 8019728:	f04f 32ff 	mov.w	r2, #4294967295
 801972c:	fbb2 f2f6 	udiv	r2, r2, r6
 8019730:	2300      	movs	r3, #0
 8019732:	fb06 fc02 	mul.w	ip, r6, r2
 8019736:	4618      	mov	r0, r3
 8019738:	ea6f 0c0c 	mvn.w	ip, ip
 801973c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019740:	2f09      	cmp	r7, #9
 8019742:	d817      	bhi.n	8019774 <_strtoul_l.isra.0+0x96>
 8019744:	463c      	mov	r4, r7
 8019746:	42a6      	cmp	r6, r4
 8019748:	dd23      	ble.n	8019792 <_strtoul_l.isra.0+0xb4>
 801974a:	2b00      	cmp	r3, #0
 801974c:	db1e      	blt.n	801978c <_strtoul_l.isra.0+0xae>
 801974e:	4282      	cmp	r2, r0
 8019750:	d31c      	bcc.n	801978c <_strtoul_l.isra.0+0xae>
 8019752:	d101      	bne.n	8019758 <_strtoul_l.isra.0+0x7a>
 8019754:	45a4      	cmp	ip, r4
 8019756:	db19      	blt.n	801978c <_strtoul_l.isra.0+0xae>
 8019758:	2301      	movs	r3, #1
 801975a:	fb00 4006 	mla	r0, r0, r6, r4
 801975e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019762:	e7eb      	b.n	801973c <_strtoul_l.isra.0+0x5e>
 8019764:	462f      	mov	r7, r5
 8019766:	e7c1      	b.n	80196ec <_strtoul_l.isra.0+0xe>
 8019768:	2c2b      	cmp	r4, #43	; 0x2b
 801976a:	bf04      	itt	eq
 801976c:	1cbd      	addeq	r5, r7, #2
 801976e:	787c      	ldrbeq	r4, [r7, #1]
 8019770:	4619      	mov	r1, r3
 8019772:	e7cb      	b.n	801970c <_strtoul_l.isra.0+0x2e>
 8019774:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019778:	2f19      	cmp	r7, #25
 801977a:	d801      	bhi.n	8019780 <_strtoul_l.isra.0+0xa2>
 801977c:	3c37      	subs	r4, #55	; 0x37
 801977e:	e7e2      	b.n	8019746 <_strtoul_l.isra.0+0x68>
 8019780:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019784:	2f19      	cmp	r7, #25
 8019786:	d804      	bhi.n	8019792 <_strtoul_l.isra.0+0xb4>
 8019788:	3c57      	subs	r4, #87	; 0x57
 801978a:	e7dc      	b.n	8019746 <_strtoul_l.isra.0+0x68>
 801978c:	f04f 33ff 	mov.w	r3, #4294967295
 8019790:	e7e5      	b.n	801975e <_strtoul_l.isra.0+0x80>
 8019792:	2b00      	cmp	r3, #0
 8019794:	da09      	bge.n	80197aa <_strtoul_l.isra.0+0xcc>
 8019796:	2322      	movs	r3, #34	; 0x22
 8019798:	f04f 30ff 	mov.w	r0, #4294967295
 801979c:	f8c8 3000 	str.w	r3, [r8]
 80197a0:	f1ba 0f00 	cmp.w	sl, #0
 80197a4:	d107      	bne.n	80197b6 <_strtoul_l.isra.0+0xd8>
 80197a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197aa:	b101      	cbz	r1, 80197ae <_strtoul_l.isra.0+0xd0>
 80197ac:	4240      	negs	r0, r0
 80197ae:	f1ba 0f00 	cmp.w	sl, #0
 80197b2:	d0f8      	beq.n	80197a6 <_strtoul_l.isra.0+0xc8>
 80197b4:	b10b      	cbz	r3, 80197ba <_strtoul_l.isra.0+0xdc>
 80197b6:	f105 39ff 	add.w	r9, r5, #4294967295
 80197ba:	f8ca 9000 	str.w	r9, [sl]
 80197be:	e7f2      	b.n	80197a6 <_strtoul_l.isra.0+0xc8>
 80197c0:	2430      	movs	r4, #48	; 0x30
 80197c2:	2e00      	cmp	r6, #0
 80197c4:	d1b0      	bne.n	8019728 <_strtoul_l.isra.0+0x4a>
 80197c6:	2608      	movs	r6, #8
 80197c8:	e7ae      	b.n	8019728 <_strtoul_l.isra.0+0x4a>
 80197ca:	2c30      	cmp	r4, #48	; 0x30
 80197cc:	d0a4      	beq.n	8019718 <_strtoul_l.isra.0+0x3a>
 80197ce:	260a      	movs	r6, #10
 80197d0:	e7aa      	b.n	8019728 <_strtoul_l.isra.0+0x4a>
	...

080197d4 <_strtoul_r>:
 80197d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197d6:	4c06      	ldr	r4, [pc, #24]	; (80197f0 <_strtoul_r+0x1c>)
 80197d8:	4d06      	ldr	r5, [pc, #24]	; (80197f4 <_strtoul_r+0x20>)
 80197da:	6824      	ldr	r4, [r4, #0]
 80197dc:	6a24      	ldr	r4, [r4, #32]
 80197de:	2c00      	cmp	r4, #0
 80197e0:	bf08      	it	eq
 80197e2:	462c      	moveq	r4, r5
 80197e4:	9400      	str	r4, [sp, #0]
 80197e6:	f7ff ff7a 	bl	80196de <_strtoul_l.isra.0>
 80197ea:	b003      	add	sp, #12
 80197ec:	bd30      	pop	{r4, r5, pc}
 80197ee:	bf00      	nop
 80197f0:	20000148 	.word	0x20000148
 80197f4:	200001ac 	.word	0x200001ac

080197f8 <__submore>:
 80197f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197fc:	460c      	mov	r4, r1
 80197fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019804:	4299      	cmp	r1, r3
 8019806:	d11b      	bne.n	8019840 <__submore+0x48>
 8019808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801980c:	f7ff f928 	bl	8018a60 <_malloc_r>
 8019810:	b918      	cbnz	r0, 801981a <__submore+0x22>
 8019812:	f04f 30ff 	mov.w	r0, #4294967295
 8019816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801981a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801981e:	63a3      	str	r3, [r4, #56]	; 0x38
 8019820:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019824:	6360      	str	r0, [r4, #52]	; 0x34
 8019826:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801982a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801982e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019832:	7043      	strb	r3, [r0, #1]
 8019834:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019838:	7003      	strb	r3, [r0, #0]
 801983a:	6020      	str	r0, [r4, #0]
 801983c:	2000      	movs	r0, #0
 801983e:	e7ea      	b.n	8019816 <__submore+0x1e>
 8019840:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019842:	0077      	lsls	r7, r6, #1
 8019844:	463a      	mov	r2, r7
 8019846:	f000 f841 	bl	80198cc <_realloc_r>
 801984a:	4605      	mov	r5, r0
 801984c:	2800      	cmp	r0, #0
 801984e:	d0e0      	beq.n	8019812 <__submore+0x1a>
 8019850:	eb00 0806 	add.w	r8, r0, r6
 8019854:	4601      	mov	r1, r0
 8019856:	4632      	mov	r2, r6
 8019858:	4640      	mov	r0, r8
 801985a:	f7fb f9c7 	bl	8014bec <memcpy>
 801985e:	f8c4 8000 	str.w	r8, [r4]
 8019862:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019866:	e7e9      	b.n	801983c <__submore+0x44>

08019868 <__ascii_wctomb>:
 8019868:	b149      	cbz	r1, 801987e <__ascii_wctomb+0x16>
 801986a:	2aff      	cmp	r2, #255	; 0xff
 801986c:	bf8b      	itete	hi
 801986e:	238a      	movhi	r3, #138	; 0x8a
 8019870:	700a      	strbls	r2, [r1, #0]
 8019872:	6003      	strhi	r3, [r0, #0]
 8019874:	2001      	movls	r0, #1
 8019876:	bf88      	it	hi
 8019878:	f04f 30ff 	movhi.w	r0, #4294967295
 801987c:	4770      	bx	lr
 801987e:	4608      	mov	r0, r1
 8019880:	4770      	bx	lr
	...

08019884 <_fstat_r>:
 8019884:	b538      	push	{r3, r4, r5, lr}
 8019886:	2300      	movs	r3, #0
 8019888:	4c06      	ldr	r4, [pc, #24]	; (80198a4 <_fstat_r+0x20>)
 801988a:	4605      	mov	r5, r0
 801988c:	4608      	mov	r0, r1
 801988e:	4611      	mov	r1, r2
 8019890:	6023      	str	r3, [r4, #0]
 8019892:	f7ea fa39 	bl	8003d08 <_fstat>
 8019896:	1c43      	adds	r3, r0, #1
 8019898:	d102      	bne.n	80198a0 <_fstat_r+0x1c>
 801989a:	6823      	ldr	r3, [r4, #0]
 801989c:	b103      	cbz	r3, 80198a0 <_fstat_r+0x1c>
 801989e:	602b      	str	r3, [r5, #0]
 80198a0:	bd38      	pop	{r3, r4, r5, pc}
 80198a2:	bf00      	nop
 80198a4:	20009e00 	.word	0x20009e00

080198a8 <_isatty_r>:
 80198a8:	b538      	push	{r3, r4, r5, lr}
 80198aa:	2300      	movs	r3, #0
 80198ac:	4c05      	ldr	r4, [pc, #20]	; (80198c4 <_isatty_r+0x1c>)
 80198ae:	4605      	mov	r5, r0
 80198b0:	4608      	mov	r0, r1
 80198b2:	6023      	str	r3, [r4, #0]
 80198b4:	f7ea fa37 	bl	8003d26 <_isatty>
 80198b8:	1c43      	adds	r3, r0, #1
 80198ba:	d102      	bne.n	80198c2 <_isatty_r+0x1a>
 80198bc:	6823      	ldr	r3, [r4, #0]
 80198be:	b103      	cbz	r3, 80198c2 <_isatty_r+0x1a>
 80198c0:	602b      	str	r3, [r5, #0]
 80198c2:	bd38      	pop	{r3, r4, r5, pc}
 80198c4:	20009e00 	.word	0x20009e00

080198c8 <__malloc_lock>:
 80198c8:	4770      	bx	lr

080198ca <__malloc_unlock>:
 80198ca:	4770      	bx	lr

080198cc <_realloc_r>:
 80198cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ce:	4607      	mov	r7, r0
 80198d0:	4614      	mov	r4, r2
 80198d2:	460e      	mov	r6, r1
 80198d4:	b921      	cbnz	r1, 80198e0 <_realloc_r+0x14>
 80198d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80198da:	4611      	mov	r1, r2
 80198dc:	f7ff b8c0 	b.w	8018a60 <_malloc_r>
 80198e0:	b922      	cbnz	r2, 80198ec <_realloc_r+0x20>
 80198e2:	f7ff f871 	bl	80189c8 <_free_r>
 80198e6:	4625      	mov	r5, r4
 80198e8:	4628      	mov	r0, r5
 80198ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198ec:	f000 f814 	bl	8019918 <_malloc_usable_size_r>
 80198f0:	42a0      	cmp	r0, r4
 80198f2:	d20f      	bcs.n	8019914 <_realloc_r+0x48>
 80198f4:	4621      	mov	r1, r4
 80198f6:	4638      	mov	r0, r7
 80198f8:	f7ff f8b2 	bl	8018a60 <_malloc_r>
 80198fc:	4605      	mov	r5, r0
 80198fe:	2800      	cmp	r0, #0
 8019900:	d0f2      	beq.n	80198e8 <_realloc_r+0x1c>
 8019902:	4631      	mov	r1, r6
 8019904:	4622      	mov	r2, r4
 8019906:	f7fb f971 	bl	8014bec <memcpy>
 801990a:	4631      	mov	r1, r6
 801990c:	4638      	mov	r0, r7
 801990e:	f7ff f85b 	bl	80189c8 <_free_r>
 8019912:	e7e9      	b.n	80198e8 <_realloc_r+0x1c>
 8019914:	4635      	mov	r5, r6
 8019916:	e7e7      	b.n	80198e8 <_realloc_r+0x1c>

08019918 <_malloc_usable_size_r>:
 8019918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801991c:	1f18      	subs	r0, r3, #4
 801991e:	2b00      	cmp	r3, #0
 8019920:	bfbc      	itt	lt
 8019922:	580b      	ldrlt	r3, [r1, r0]
 8019924:	18c0      	addlt	r0, r0, r3
 8019926:	4770      	bx	lr

08019928 <_sbrk>:
 8019928:	4b04      	ldr	r3, [pc, #16]	; (801993c <_sbrk+0x14>)
 801992a:	4602      	mov	r2, r0
 801992c:	6819      	ldr	r1, [r3, #0]
 801992e:	b909      	cbnz	r1, 8019934 <_sbrk+0xc>
 8019930:	4903      	ldr	r1, [pc, #12]	; (8019940 <_sbrk+0x18>)
 8019932:	6019      	str	r1, [r3, #0]
 8019934:	6818      	ldr	r0, [r3, #0]
 8019936:	4402      	add	r2, r0
 8019938:	601a      	str	r2, [r3, #0]
 801993a:	4770      	bx	lr
 801993c:	20008844 	.word	0x20008844
 8019940:	20009e08 	.word	0x20009e08

08019944 <_init>:
 8019944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019946:	bf00      	nop
 8019948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801994a:	bc08      	pop	{r3}
 801994c:	469e      	mov	lr, r3
 801994e:	4770      	bx	lr

08019950 <_fini>:
 8019950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019952:	bf00      	nop
 8019954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019956:	bc08      	pop	{r3}
 8019958:	469e      	mov	lr, r3
 801995a:	4770      	bx	lr


Medogonka_L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019abc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d54  08019c00  08019c00  00029c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e954  0801e954  00030318  2**0
                  CONTENTS
  4 .ARM          00000008  0801e954  0801e954  0002e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e95c  0801e95c  00030318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e95c  0801e95c  0002e95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e960  0801e960  0002e960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0801e964  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b18  20000318  0801ec7c  00030318  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009e30  0801ec7c  00039e30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007976b  00000000  00000000  00030341  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a69b  00000000  00000000  000a9aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002b38  00000000  00000000  000b4148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002698  00000000  00000000  000b6c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e3a7  00000000  00000000  000b9318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00041ae4  00000000  00000000  000e76bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b7395  00000000  00000000  001291a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0538  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c0a4  00000000  00000000  001e05b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000318 	.word	0x20000318
 800015c:	00000000 	.word	0x00000000
 8000160:	08019be4 	.word	0x08019be4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000031c 	.word	0x2000031c
 800017c:	08019be4 	.word	0x08019be4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002e2:	f1a4 0401 	sub.w	r4, r4, #1
 80002e6:	d1e9      	bne.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	468c      	mov	ip, r1
 8000be2:	4604      	mov	r4, r0
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0c03 	orr.w	ip, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	fbbc f7fe 	udiv	r7, ip, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e c317 	mls	r3, lr, r7, ip
 8000c1a:	fb07 f908 	mul.w	r9, r7, r8
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c24:	4599      	cmp	r9, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 31ff 	add.w	r1, r7, #4294967295
 8000c2e:	f080 811c 	bcs.w	8000e6a <__udivmoddi4+0x28e>
 8000c32:	4599      	cmp	r9, r3
 8000c34:	f240 8119 	bls.w	8000e6a <__udivmoddi4+0x28e>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	eba3 0309 	sub.w	r3, r3, r9
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	fb00 f108 	mul.w	r1, r0, r8
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c52:	42a1      	cmp	r1, r4
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	192c      	adds	r4, r5, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 8107 	bcs.w	8000e6e <__udivmoddi4+0x292>
 8000c60:	42a1      	cmp	r1, r4
 8000c62:	f240 8104 	bls.w	8000e6e <__udivmoddi4+0x292>
 8000c66:	3802      	subs	r0, #2
 8000c68:	442c      	add	r4, r5
 8000c6a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6e:	2700      	movs	r7, #0
 8000c70:	1a64      	subs	r4, r4, r1
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	2300      	movs	r3, #0
 8000c76:	40d4      	lsrs	r4, r2
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ec 	beq.w	8000e64 <__udivmoddi4+0x288>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d148      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fb 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4c00 	strd	r4, ip, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	2701      	movs	r7, #1
 8000cd0:	1b49      	subs	r1, r1, r5
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fa1f f985 	uxth.w	r9, r5
 8000cda:	fbb1 fef8 	udiv	lr, r1, r8
 8000cde:	fb08 111e 	mls	r1, r8, lr, r1
 8000ce2:	fb09 f00e 	mul.w	r0, r9, lr
 8000ce6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000cea:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x126>
 8000cf2:	18eb      	adds	r3, r5, r3
 8000cf4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x124>
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	f200 80cd 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000d00:	468e      	mov	lr, r1
 8000d02:	1a1b      	subs	r3, r3, r0
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	fb09 f900 	mul.w	r9, r9, r0
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d1a:	192c      	adds	r4, r5, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f200 80b6 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d32:	e79e      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d34:	f1c7 0520 	rsb	r5, r7, #32
 8000d38:	40bb      	lsls	r3, r7
 8000d3a:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa21 f405 	lsr.w	r4, r1, r5
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d4e:	fa1f f88c 	uxth.w	r8, ip
 8000d52:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d56:	fa20 f305 	lsr.w	r3, r0, r5
 8000d5a:	40b9      	lsls	r1, r7
 8000d5c:	fb09 fa08 	mul.w	sl, r9, r8
 8000d60:	4319      	orrs	r1, r3
 8000d62:	0c0b      	lsrs	r3, r1, #16
 8000d64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f307 	lsl.w	r3, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	eba4 040a 	sub.w	r4, r4, sl
 8000d90:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d94:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d98:	fb00 fa08 	mul.w	sl, r0, r8
 8000d9c:	b289      	uxth	r1, r1
 8000d9e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x1dc>
 8000da6:	eb1c 0404 	adds.w	r4, ip, r4
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbc:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc0:	eba4 040a 	sub.w	r4, r4, sl
 8000dc4:	454c      	cmp	r4, r9
 8000dc6:	4641      	mov	r1, r8
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	d354      	bcc.n	8000e76 <__udivmoddi4+0x29a>
 8000dcc:	d051      	beq.n	8000e72 <__udivmoddi4+0x296>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d069      	beq.n	8000ea6 <__udivmoddi4+0x2ca>
 8000dd2:	1a5a      	subs	r2, r3, r1
 8000dd4:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd8:	fa04 f505 	lsl.w	r5, r4, r5
 8000ddc:	fa22 f307 	lsr.w	r3, r2, r7
 8000de0:	40fc      	lsrs	r4, r7
 8000de2:	431d      	orrs	r5, r3
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	4095      	lsls	r5, r2
 8000dee:	f1c2 0320 	rsb	r3, r2, #32
 8000df2:	fa21 f003 	lsr.w	r0, r1, r3
 8000df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000dfa:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dfe:	fa1f f985 	uxth.w	r9, r5
 8000e02:	fb08 0017 	mls	r0, r8, r7, r0
 8000e06:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	fb07 fc09 	mul.w	ip, r7, r9
 8000e10:	430b      	orrs	r3, r1
 8000e12:	0c19      	lsrs	r1, r3, #16
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	458c      	cmp	ip, r1
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x254>
 8000e20:	1869      	adds	r1, r5, r1
 8000e22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000e26:	d231      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e28:	458c      	cmp	ip, r1
 8000e2a:	d92f      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	3f02      	subs	r7, #2
 8000e2e:	4429      	add	r1, r5
 8000e30:	eba1 010c 	sub.w	r1, r1, ip
 8000e34:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e38:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e3c:	fb00 fe09 	mul.w	lr, r0, r9
 8000e40:	b299      	uxth	r1, r3
 8000e42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e46:	458e      	cmp	lr, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e50:	d218      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d916      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	eba1 010e 	sub.w	r1, r1, lr
 8000e5e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e62:	e73a      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e64:	4637      	mov	r7, r6
 8000e66:	4630      	mov	r0, r6
 8000e68:	e708      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e6a:	460f      	mov	r7, r1
 8000e6c:	e6e6      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	e6fb      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e72:	4543      	cmp	r3, r8
 8000e74:	d2ab      	bcs.n	8000dce <__udivmoddi4+0x1f2>
 8000e76:	ebb8 0102 	subs.w	r1, r8, r2
 8000e7a:	eb69 020c 	sbc.w	r2, r9, ip
 8000e7e:	3801      	subs	r0, #1
 8000e80:	4696      	mov	lr, r2
 8000e82:	e7a4      	b.n	8000dce <__udivmoddi4+0x1f2>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e7e8      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1dc>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e7cf      	b.n	8000e30 <__udivmoddi4+0x254>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3802      	subs	r0, #2
 8000e96:	442c      	add	r4, r5
 8000e98:	e747      	b.n	8000d2a <__udivmoddi4+0x14e>
 8000e9a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9e:	442b      	add	r3, r5
 8000ea0:	e72f      	b.n	8000d02 <__udivmoddi4+0x126>
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	e707      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea6:	4637      	mov	r7, r6
 8000ea8:	e6e8      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

//======================================================================================
void MX_ADC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <MX_ADC_Init+0xb0>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC_Init+0xac>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_ADC_Init+0xac>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC_Init+0xac>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f22:	f005 fe65 	bl	8006bf0 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <MX_ADC_Init+0x82>
  {
    Error_Handler(2);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f002 fd73 	bl	8003a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f32:	2310      	movs	r3, #16
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_ADC_Init+0xac>)
 8000f44:	f006 f9d6 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <MX_ADC_Init+0xa4>
  {
    Error_Handler(2);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f002 fd62 	bl	8003a18 <Error_Handler>
  }

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20008b50 	.word	0x20008b50
 8000f60:	40012400 	.word	0x40012400

08000f64 <HAL_ADC_MspInit>:
//======================================================================================
void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <HAL_ADC_MspInit+0xe4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d15c      	bne.n	8001040 <HAL_ADC_MspInit+0xdc>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a24      	ldr	r2, [pc, #144]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_ADC_MspInit+0xe8>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    PE8     ------> ADC_IN23
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = ADC_V_MOTOR_Pin|ADC_V_IN_12V_Pin;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <HAL_ADC_MspInit+0xec>)
 8000ffa:	f006 feaf 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SPEED_Pin;
 8000ffe:	2320      	movs	r3, #32
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_SPEED_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <HAL_ADC_MspInit+0xf0>)
 8001012:	f006 fea3 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_I_IN_12V_Pin|ADC_I_MOTOR_Pin;
 8001016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_ADC_MspInit+0xf4>)
 800102c:	f006 fe96 	bl	8007d5c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2012      	movs	r0, #18
 8001036:	f006 fc18 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800103a:	2012      	movs	r0, #18
 800103c:	f006 fc31 	bl	80078a2 <HAL_NVIC_EnableIRQ>

  }
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40012400 	.word	0x40012400
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020800 	.word	0x40020800
 8001058:	40021000 	.word	0x40021000

0800105c <ADC_GetRAWData>:
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
  }
}
//======================================================================================
uint32_t ADC_GetRAWData(uint32_t Channel)												// Получить сырые данные для обрботки по указанному каналу
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]

	sConfig.Rank         = ADC_REGULAR_RANK_1;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]

	sConfig.Channel      = Channel;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <ADC_GetRAWData+0x64>)
 8001084:	f006 f936 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <ADC_GetRAWData+0x38>
	{
		Error_Handler(2);
 800108e:	2002      	movs	r0, #2
 8001090:	f002 fcc2 	bl	8003a18 <Error_Handler>
	}

	// Замер из АЦП
	HAL_ADC_Start(&hadc);
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <ADC_GetRAWData+0x64>)
 8001096:	f005 fef1 	bl	8006e7c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 800109a:	210a      	movs	r1, #10
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <ADC_GetRAWData+0x64>)
 800109e:	f005 ff79 	bl	8006f94 <HAL_ADC_PollForConversion>
	ADC_State.ADC_RAW = HAL_ADC_GetValue(&hadc);
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <ADC_GetRAWData+0x64>)
 80010a4:	f005 ffff 	bl	80070a6 <HAL_ADC_GetValue>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <ADC_GetRAWData+0x68>)
 80010ac:	605a      	str	r2, [r3, #4]
	HAL_ADC_Stop(&hadc);
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <ADC_GetRAWData+0x64>)
 80010b0:	f005 ff44 	bl	8006f3c <HAL_ADC_Stop>

	return ADC_State.ADC_RAW;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <ADC_GetRAWData+0x68>)
 80010b6:	685b      	ldr	r3, [r3, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20008b50 	.word	0x20008b50
 80010c4:	20008bb0 	.word	0x20008bb0

080010c8 <ADC_ScanState>:
//======================================================================================
void ADC_ScanState(void)																// Замер из АЦП по всем каналам сразу
{
 80010c8:	b598      	push	{r3, r4, r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	// ADC Channel: IN23						- ADC_I_IN_12V
	// ADC Channel: IN24						- ADC_I_MOTOR
	// ADC Channel: Temperature Sensor Channel 	- температура кристалла процессора
	// ADC Channel: Vrefint Channel				- Напряжение питания, для рассчетов опоры

	ADC_State.DataReady = 0;
 80010cc:	4ba8      	ldr	r3, [pc, #672]	; (8001370 <ADC_ScanState+0x2a8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]


	ADC_GetRAWData(ADC_CHANNEL_VREFINT);												// Канал АЦП - опорное напряжение для рассчета напряжения питания процессора
 80010d2:	2011      	movs	r0, #17
 80010d4:	f7ff ffc2 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80010d8:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <ADC_ScanState+0x2a8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e0:	d222      	bcs.n	8001128 <ADC_ScanState+0x60>
	{
		// Реальное напряжение питания процессора, точнее питание аналоговой части
		ADC_State.ADC_Ref_Voltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_State.ADC_RAW, hadc.Init.Resolution) / 1000.0; // калибровка батареи - опорное напряжение АЦП
 80010e2:	4ba4      	ldr	r3, [pc, #656]	; (8001374 <ADC_ScanState+0x2ac>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010ec:	fb03 f202 	mul.w	r2, r3, r2
 80010f0:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <ADC_ScanState+0x2a8>)
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	4ba0      	ldr	r3, [pc, #640]	; (8001378 <ADC_ScanState+0x2b0>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	0ddb      	lsrs	r3, r3, #23
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f990 	bl	8000428 <__aeabi_ui2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b9b      	ldr	r3, [pc, #620]	; (800137c <ADC_ScanState+0x2b4>)
 800110e:	f7ff fb2f 	bl	8000770 <__aeabi_ddiv>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	4a96      	ldr	r2, [pc, #600]	; (8001370 <ADC_ScanState+0x2a8>)
 8001118:	e9c2 3402 	strd	r3, r4, [r2, #8]
		ADC_State.DataReady++;
 800111c:	4b94      	ldr	r3, [pc, #592]	; (8001370 <ADC_ScanState+0x2a8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <ADC_ScanState+0x2a8>)
 8001126:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(ADC_CHANNEL_TEMPSENSOR);												// Канал АЦП - температура внутри процессора
 8001128:	2010      	movs	r0, #16
 800112a:	f7ff ff97 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800112e:	4b90      	ldr	r3, [pc, #576]	; (8001370 <ADC_ScanState+0x2a8>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001136:	d229      	bcs.n	800118c <ADC_ScanState+0xc4>
	{
		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, без учета реального напряжения питания
		ADC_State.CPU_Temperature 	= COMPUTATION_TEMPERATURE_TEMP30_TEMP110(ADC_State.ADC_RAW) - 2;
 8001138:	4b8d      	ldr	r3, [pc, #564]	; (8001370 <ADC_ScanState+0x2a8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4a8e      	ldr	r2, [pc, #568]	; (8001380 <ADC_ScanState+0x2b8>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	099b      	lsrs	r3, r3, #6
 800114c:	461a      	mov	r2, r3
 800114e:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <ADC_ScanState+0x2bc>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	461a      	mov	r2, r3
 800115e:	4b8a      	ldr	r3, [pc, #552]	; (8001388 <ADC_ScanState+0x2c0>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4b87      	ldr	r3, [pc, #540]	; (8001384 <ADC_ScanState+0x2bc>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	1acb      	subs	r3, r1, r3
 800116a:	fb92 f3f3 	sdiv	r3, r2, r3
 800116e:	331c      	adds	r3, #28
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f969 	bl	8000448 <__aeabi_i2d>
 8001176:	4603      	mov	r3, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4a7d      	ldr	r2, [pc, #500]	; (8001370 <ADC_ScanState+0x2a8>)
 800117c:	e9c2 3404 	strd	r3, r4, [r2, #16]

//		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, с учетом реального опопрного напряжения питания
//		ADC_State.CPU_Temperature_raw 	= __LL_ADC_CALC_DATA_TO_VOLTAGE(ADC_State.ADC_Ref_Voltage, ADC_State.ADC_RAW, hadc.Init.Resolution);  // пересчет из сырых данных АЦП в напряжение в вольтах с учетом разрядности
//		ADC_State.CPU_TemperatureRef    = __LL_ADC_CALC_TEMPERATURE((uint32_t)(1000*ADC_State.ADC_Ref_Voltage), ADC_State.ADC_RAW , hadc.Init.Resolution) - 2;

		ADC_State.DataReady++;
 8001180:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <ADC_ScanState+0x2a8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b79      	ldr	r3, [pc, #484]	; (8001370 <ADC_ScanState+0x2a8>)
 800118a:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_SPEED);													// Канал АЦП - регулятор скорости мотора (пременный резистор 0..3.3V)
 800118c:	200f      	movs	r0, #15
 800118e:	f7ff ff65 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 8001192:	4b77      	ldr	r3, [pc, #476]	; (8001370 <ADC_ScanState+0x2a8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800119a:	d235      	bcs.n	8001208 <ADC_ScanState+0x140>
	{
		ADC_State.Speed_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_SPEED;
 800119c:	4b74      	ldr	r3, [pc, #464]	; (8001370 <ADC_ScanState+0x2a8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f941 	bl	8000428 <__aeabi_ui2d>
 80011a6:	a366      	add	r3, pc, #408	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff f9b6 	bl	800051c <__aeabi_dmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	4a6e      	ldr	r2, [pc, #440]	; (8001370 <ADC_ScanState+0x2a8>)
 80011b6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		ADC_State.Speed_value_percent	= (uint8_t)( (ADC_State.Speed_value_volts/ADC_REF_VOLTAGE_DEFAULT)*(double)100 );
 80011ba:	4b6d      	ldr	r3, [pc, #436]	; (8001370 <ADC_ScanState+0x2a8>)
 80011bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011c0:	a361      	add	r3, pc, #388	; (adr r3, 8001348 <ADC_ScanState+0x280>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fad3 	bl	8000770 <__aeabi_ddiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <ADC_ScanState+0x2c4>)
 80011d8:	f7ff f9a0 	bl	800051c <__aeabi_dmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4618      	mov	r0, r3
 80011e2:	4621      	mov	r1, r4
 80011e4:	f7ff fc72 	bl	8000acc <__aeabi_d2uiz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b60      	ldr	r3, [pc, #384]	; (8001370 <ADC_ScanState+0x2a8>)
 80011ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		Speed_value_percent = ADC_State.Speed_value_percent;
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <ADC_ScanState+0x2a8>)
 80011f4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80011f8:	4b65      	ldr	r3, [pc, #404]	; (8001390 <ADC_ScanState+0x2c8>)
 80011fa:	701a      	strb	r2, [r3, #0]

		ADC_State.DataReady++;
 80011fc:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <ADC_ScanState+0x2a8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b5a      	ldr	r3, [pc, #360]	; (8001370 <ADC_ScanState+0x2a8>)
 8001206:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_IN_12V);												// Канал АЦП - напряжение питания на входе
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ff27 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800120e:	4b58      	ldr	r3, [pc, #352]	; (8001370 <ADC_ScanState+0x2a8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001216:	d21d      	bcs.n	8001254 <ADC_ScanState+0x18c>
	{
		ADC_State.V_IN_12V_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_IN_12V;
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <ADC_ScanState+0x2a8>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f903 	bl	8000428 <__aeabi_ui2d>
 8001222:	a347      	add	r3, pc, #284	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f7ff f978 	bl	800051c <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	a346      	add	r3, pc, #280	; (adr r3, 8001350 <ADC_ScanState+0x288>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f96f 	bl	800051c <__aeabi_dmul>
 800123e:	4603      	mov	r3, r0
 8001240:	460c      	mov	r4, r1
 8001242:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <ADC_ScanState+0x2a8>)
 8001244:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

		ADC_State.DataReady++;
 8001248:	4b49      	ldr	r3, [pc, #292]	; (8001370 <ADC_ScanState+0x2a8>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <ADC_ScanState+0x2a8>)
 8001252:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_MOTOR);												// Канал АЦП - напряжение питания мотора (среднее)
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff01 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <ADC_ScanState+0x2a8>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001262:	d21d      	bcs.n	80012a0 <ADC_ScanState+0x1d8>
	{
		ADC_State.V_IN_MOTOR_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_MOTOR;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <ADC_ScanState+0x2a8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_ui2d>
 800126e:	a334      	add	r3, pc, #208	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff f952 	bl	800051c <__aeabi_dmul>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	a335      	add	r3, pc, #212	; (adr r3, 8001358 <ADC_ScanState+0x290>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f949 	bl	800051c <__aeabi_dmul>
 800128a:	4603      	mov	r3, r0
 800128c:	460c      	mov	r4, r1
 800128e:	4a38      	ldr	r2, [pc, #224]	; (8001370 <ADC_ScanState+0x2a8>)
 8001290:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

		ADC_State.DataReady++;
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <ADC_ScanState+0x2a8>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <ADC_ScanState+0x2a8>)
 800129e:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_IN_12V);												// Канал АЦП - общий входной ток
 80012a0:	2017      	movs	r0, #23
 80012a2:	f7ff fedb 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <ADC_ScanState+0x2a8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ae:	d21d      	bcs.n	80012ec <ADC_ScanState+0x224>
	{
		ADC_State.I_IN_12V_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_IN_12V;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <ADC_ScanState+0x2a8>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8b7 	bl	8000428 <__aeabi_ui2d>
 80012ba:	a321      	add	r3, pc, #132	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f92c 	bl	800051c <__aeabi_dmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	a324      	add	r3, pc, #144	; (adr r3, 8001360 <ADC_ScanState+0x298>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f923 	bl	800051c <__aeabi_dmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <ADC_ScanState+0x2a8>)
 80012dc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

		ADC_State.DataReady++;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <ADC_ScanState+0x2a8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <ADC_ScanState+0x2a8>)
 80012ea:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_MOTOR);												// Канал АЦП - ток мотора
 80012ec:	2018      	movs	r0, #24
 80012ee:	f7ff feb5 	bl	800105c <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <ADC_ScanState+0x2a8>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fa:	d21d      	bcs.n	8001338 <ADC_ScanState+0x270>
	{
		ADC_State.I_IN_MOTOR_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_MOTOR;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <ADC_ScanState+0x2a8>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f891 	bl	8000428 <__aeabi_ui2d>
 8001306:	a30e      	add	r3, pc, #56	; (adr r3, 8001340 <ADC_ScanState+0x278>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f906 	bl	800051c <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	a313      	add	r3, pc, #76	; (adr r3, 8001368 <ADC_ScanState+0x2a0>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f8fd 	bl	800051c <__aeabi_dmul>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <ADC_ScanState+0x2a8>)
 8001328:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

		ADC_State.DataReady++;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <ADC_ScanState+0x2a8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <ADC_ScanState+0x2a8>)
 8001336:	701a      	strb	r2, [r3, #0]
	}

}
 8001338:	bf00      	nop
 800133a:	bd98      	pop	{r3, r4, r7, pc}
 800133c:	f3af 8000 	nop.w
 8001340:	66666666 	.word	0x66666666
 8001344:	3f4a6666 	.word	0x3f4a6666
 8001348:	66666666 	.word	0x66666666
 800134c:	400a6666 	.word	0x400a6666
 8001350:	70a3d70a 	.word	0x70a3d70a
 8001354:	40180a3d 	.word	0x40180a3d
 8001358:	51eb851f 	.word	0x51eb851f
 800135c:	40181eb8 	.word	0x40181eb8
 8001360:	cccccccd 	.word	0xcccccccd
 8001364:	4010cccc 	.word	0x4010cccc
 8001368:	9999999a 	.word	0x9999999a
 800136c:	40099999 	.word	0x40099999
 8001370:	20008bb0 	.word	0x20008bb0
 8001374:	1ff800f8 	.word	0x1ff800f8
 8001378:	20008b50 	.word	0x20008b50
 800137c:	408f4000 	.word	0x408f4000
 8001380:	057619f1 	.word	0x057619f1
 8001384:	1ff800fa 	.word	0x1ff800fa
 8001388:	1ff800fe 	.word	0x1ff800fe
 800138c:	40590000 	.word	0x40590000
 8001390:	20008968 	.word	0x20008968

08001394 <BUZZER_Init>:

uint8_t			BUZZER_BuzzerState;														// состояние баззера (включен/выключен)

//======================================================================================
void BUZZER_Init(uint8_t state)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	; 0x40
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <BUZZER_Init+0x144>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <BUZZER_Init+0x144>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <BUZZER_Init+0x144>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <BUZZER_Init+0x144>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a47      	ldr	r2, [pc, #284]	; (80014d8 <BUZZER_Init+0x144>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <BUZZER_Init+0x144>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <BUZZER_Init+0x144>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <BUZZER_Init+0x144>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <BUZZER_Init+0x144>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <BUZZER_Init+0x144>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <BUZZER_Init+0x144>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <BUZZER_Init+0x144>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <BUZZER_Init+0x144>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a35      	ldr	r2, [pc, #212]	; (80014d8 <BUZZER_Init+0x144>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <BUZZER_Init+0x144>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <BUZZER_Init+0x144>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <BUZZER_Init+0x144>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <BUZZER_Init+0x144>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2120      	movs	r1, #32
 8001432:	482a      	ldr	r0, [pc, #168]	; (80014dc <BUZZER_Init+0x148>)
 8001434:	f006 fe37 	bl	80080a6 <HAL_GPIO_WritePin>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <BUZZER_Init+0x144>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <BUZZER_Init+0x144>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	61d3      	str	r3, [r2, #28]
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <BUZZER_Init+0x144>)
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin 		= BUZZER_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8001458:	2302      	movs	r3, #2
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38


	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001464:	4619      	mov	r1, r3
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <BUZZER_Init+0x148>)
 8001468:	f006 fc78 	bl	8007d5c <HAL_GPIO_Init>
	BUZZER_BuzzerState = state;
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <BUZZER_Init+0x14c>)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	7013      	strb	r3, [r2, #0]


	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance 				= TIM6;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <BUZZER_Init+0x150>)
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <BUZZER_Init+0x154>)
 8001476:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler 		= 32;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <BUZZER_Init+0x150>)
 800147a:	2220      	movs	r2, #32
 800147c:	605a      	str	r2, [r3, #4]
	htim6.Init.Period 			= BUZZER_HALF_PERIOD_TIM;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <BUZZER_Init+0x150>)
 8001480:	2279      	movs	r2, #121	; 0x79
 8001482:	60da      	str	r2, [r3, #12]
	htim6.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <BUZZER_Init+0x150>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <BUZZER_Init+0x150>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001490:	4814      	ldr	r0, [pc, #80]	; (80014e4 <BUZZER_Init+0x150>)
 8001492:	f009 fb37 	bl	800ab04 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <BUZZER_Init+0x10e>
	{
		Error_Handler(4);
 800149c:	2004      	movs	r0, #4
 800149e:	f002 fabb 	bl	8003a18 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger 	= TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
	sMasterConfig.MasterSlaveMode 		= TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <BUZZER_Init+0x150>)
 80014b2:	f00a fd93 	bl	800bfdc <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <BUZZER_Init+0x12e>
	{
		Error_Handler(4);
 80014bc:	2004      	movs	r0, #4
 80014be:	f002 faab 	bl	8003a18 <Error_Handler>
	}

	HAL_TIM_Base_MspInit(&htim6);														// Настройка прерываний для таймера
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <BUZZER_Init+0x150>)
 80014c4:	f001 fdfc 	bl	80030c0 <HAL_TIM_Base_MspInit>

	HAL_TIM_MspPostInit(&htim6);
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <BUZZER_Init+0x150>)
 80014ca:	f001 fe9b 	bl	8003204 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3740      	adds	r7, #64	; 0x40
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400
 80014e0:	20008c00 	.word	0x20008c00
 80014e4:	20008f0c 	.word	0x20008f0c
 80014e8:	40001000 	.word	0x40001000

080014ec <BUZZER_Beep>:
//======================================================================================
void BUZZER_Beep(void) 																	// Generates one short beep in RealMode with stupid waiting
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
//	htim6.Init.Period = 100;
//	HAL_TIM_Base_Init(&htim6);
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <BUZZER_Beep+0x40>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d113      	bne.n	8001522 <BUZZER_Beep+0x36>
	{
		uint16_t len = BUZZER_NUM_HALF_PERIOD_NORM;
 80014fa:	2346      	movs	r3, #70	; 0x46
 80014fc:	80fb      	strh	r3, [r7, #6]
		while (len--)
 80014fe:	e006      	b.n	800150e <BUZZER_Beep+0x22>
		{
			BUZZER_INV;
 8001500:	2120      	movs	r1, #32
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <BUZZER_Beep+0x44>)
 8001504:	f006 fde7 	bl	80080d6 <HAL_GPIO_TogglePin>
			HAL_Delay(BUZZER_HALF_PERIOD);
 8001508:	2001      	movs	r0, #1
 800150a:	f005 fb4f 	bl	8006bac <HAL_Delay>
		while (len--)
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	80fa      	strh	r2, [r7, #6]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f3      	bne.n	8001500 <BUZZER_Beep+0x14>
		}
		BUZZER_OFF;
 8001518:	2200      	movs	r2, #0
 800151a:	2120      	movs	r1, #32
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <BUZZER_Beep+0x44>)
 800151e:	f006 fdc2 	bl	80080a6 <HAL_GPIO_WritePin>
	}
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20008c00 	.word	0x20008c00
 8001530:	40020400 	.word	0x40020400

08001534 <BUZZER_BeepTIM>:
//======================================================================================
void BUZZER_BeepTIM(void) 																// Generates one short beep under RTOS
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <BUZZER_BeepTIM+0x2c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10d      	bne.n	800155c <BUZZER_BeepTIM+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim6);													// Запуск тааймера, на обработчике состояния таймера - смена состояния пина баззера
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <BUZZER_BeepTIM+0x30>)
 8001542:	f009 fb87 	bl	800ac54 <HAL_TIM_Base_Start_IT>
		osDelay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через планировщик RTOS (минимум 1мс)
 8001546:	2046      	movs	r0, #70	; 0x46
 8001548:	f00f fecc 	bl	80112e4 <osDelay>
	//	HAL_Delay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через HAL (минимум 1мс)
		HAL_TIM_Base_Stop_IT(&htim6);
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <BUZZER_BeepTIM+0x30>)
 800154e:	f009 fbd3 	bl	800acf8 <HAL_TIM_Base_Stop_IT>
		BUZZER_OFF;
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <BUZZER_BeepTIM+0x34>)
 8001558:	f006 fda5 	bl	80080a6 <HAL_GPIO_WritePin>
	}
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20008c00 	.word	0x20008c00
 8001564:	20008f0c 	.word	0x20008f0c
 8001568:	40020400 	.word	0x40020400

0800156c <BUZZER_Beep_TickTIM>:
		BUZZER_OFF;
	}
}
//======================================================================================
void BUZZER_Beep_TickTIM(void)															// Generates one very-very short beep
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <BUZZER_Beep_TickTIM+0x2c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10d      	bne.n	8001594 <BUZZER_Beep_TickTIM+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim6);													// Запуск тааймера, на обработчике состояния таймера - смена состояния пина баззера
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <BUZZER_Beep_TickTIM+0x30>)
 800157a:	f009 fb6b 	bl	800ac54 <HAL_TIM_Base_Start_IT>
		osDelay(BUZZER_NUM_HALF_PERIOD_SHORT/4);										// если задержка через планировщик RTOS (минимум 1мс)
 800157e:	200a      	movs	r0, #10
 8001580:	f00f feb0 	bl	80112e4 <osDelay>
	//	HAL_Delay(BUZZER_NUM_HALF_PERIOD_SHORT/4);										// если задержка через HAL (минимум 1мс)
		HAL_TIM_Base_Stop_IT(&htim6);
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <BUZZER_Beep_TickTIM+0x30>)
 8001586:	f009 fbb7 	bl	800acf8 <HAL_TIM_Base_Stop_IT>
		BUZZER_OFF;
 800158a:	2200      	movs	r2, #0
 800158c:	2120      	movs	r1, #32
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <BUZZER_Beep_TickTIM+0x34>)
 8001590:	f006 fd89 	bl	80080a6 <HAL_GPIO_WritePin>
	}
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20008c00 	.word	0x20008c00
 800159c:	20008f0c 	.word	0x20008f0c
 80015a0:	40020400 	.word	0x40020400

080015a4 <MX_DAC_Init>:

DAC_HandleTypeDef DacHandle;

//======================================================================================
void MX_DAC_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  DacHandle.Instance = DAC;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_DAC_Init+0x50>)
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <MX_DAC_Init+0x54>)
 80015b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&DacHandle) != HAL_OK)
 80015b8:	480e      	ldr	r0, [pc, #56]	; (80015f4 <MX_DAC_Init+0x50>)
 80015ba:	f006 f980 	bl	80078be <HAL_DAC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <MX_DAC_Init+0x26>
  {
    Error_Handler(3);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f002 fa27 	bl	8003a18 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACx_CHANNEL) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_DAC_Init+0x50>)
 80015da:	f006 fa05 	bl	80079e8 <HAL_DAC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <MX_DAC_Init+0x46>
  {
    Error_Handler(3);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f002 fa17 	bl	8003a18 <Error_Handler>
  }

}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20008c04 	.word	0x20008c04
 80015f8:	40007400 	.word	0x40007400

080015fc <HAL_DAC_MspInit>:
//======================================================================================
void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a15      	ldr	r2, [pc, #84]	; (8001670 <HAL_DAC_MspInit+0x74>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d123      	bne.n	8001666 <HAL_DAC_MspInit+0x6a>
  {
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001624:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001628:	6253      	str	r3, [r2, #36]	; 0x24
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_DAC_MspInit+0x78>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_DAC_MspInit+0x78>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_DAC_MspInit+0x78>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC1__MOTOR_SPEED_Pin;
 800164e:	2310      	movs	r3, #16
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001652:	2303      	movs	r3, #3
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1__MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_DAC_MspInit+0x7c>)
 8001662:	f006 fb7b 	bl	8007d5c <HAL_GPIO_Init>

  }
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40007400 	.word	0x40007400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <DAC_SetValue>:
    HAL_GPIO_DeInit(DAC1__MOTOR_SPEED_GPIO_Port, DAC1__MOTOR_SPEED_Pin);
  }
}
//======================================================================================
void DAC_SetValue(uint8_t AValue)														// Установка значения в ЦАП
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	if (HAL_DAC_SetValue(&DacHandle, DACx_CHANNEL, DAC_ALIGN_8B_R, (uint32_t)AValue) != HAL_OK)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2208      	movs	r2, #8
 800168a:	2100      	movs	r1, #0
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <DAC_SetValue+0x40>)
 800168e:	f006 f987 	bl	80079a0 <HAL_DAC_SetValue>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <DAC_SetValue+0x22>
	{
	  Error_Handler(21);//Setting value Error
 8001698:	2015      	movs	r0, #21
 800169a:	f002 f9bd 	bl	8003a18 <Error_Handler>
	}

	if (HAL_DAC_Start(&DacHandle, DACx_CHANNEL) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <DAC_SetValue+0x40>)
 80016a2:	f006 f92e 	bl	8007902 <HAL_DAC_Start>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <DAC_SetValue+0x36>
	{
	  Error_Handler(21);//Start Error
 80016ac:	2015      	movs	r0, #21
 80016ae:	f002 f9b3 	bl	8003a18 <Error_Handler>
	}

}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20008c04 	.word	0x20008c04

080016c0 <MX_DMA_Init>:
#include <DMA.h>

//======================================================================================
void MX_DMA_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_DMA_Init+0x38>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <MX_DMA_Init+0x38>)
 80016cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_DMA_Init+0x38>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200f      	movs	r0, #15
 80016e4:	f006 f8c1 	bl	800786a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016e8:	200f      	movs	r0, #15
 80016ea:	f006 f8da 	bl	80078a2 <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <DS18B20_Init>:

#include "main.h"
#include "cmsis_os.h" 																	// для osDelay(();
//=======================================================================================
void  DS18B20_Init(void)																// Инициализация термодатчиков
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b42      	ldr	r3, [pc, #264]	; (800181c <DS18B20_Init+0x120>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a41      	ldr	r2, [pc, #260]	; (800181c <DS18B20_Init+0x120>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <DS18B20_Init+0x120>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <DS18B20_Init+0x120>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a3b      	ldr	r2, [pc, #236]	; (800181c <DS18B20_Init+0x120>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <DS18B20_Init+0x120>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <DS18B20_Init+0x120>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a35      	ldr	r2, [pc, #212]	; (800181c <DS18B20_Init+0x120>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <DS18B20_Init+0x120>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <DS18B20_Init+0x120>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a2f      	ldr	r2, [pc, #188]	; (800181c <DS18B20_Init+0x120>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <DS18B20_Init+0x120>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <DS18B20_Init+0x120>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <DS18B20_Init+0x120>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <DS18B20_Init+0x120>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <DS18B20_Init+0x120>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <DS18B20_Init+0x120>)
 8001790:	f043 0320 	orr.w	r3, r3, #32
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <DS18B20_Init+0x120>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin, 		GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2101      	movs	r1, #1
 80017a6:	481e      	ldr	r0, [pc, #120]	; (8001820 <DS18B20_Init+0x124>)
 80017a8:	f006 fc7d 	bl	80080a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_MOTOR_1W_GPIO_Port, 		TEMP_MOTOR_1W_Pin, 		GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2102      	movs	r1, #2
 80017b0:	481b      	ldr	r0, [pc, #108]	; (8001820 <DS18B20_Init+0x124>)
 80017b2:	f006 fc78 	bl	80080a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin, 	GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	2104      	movs	r1, #4
 80017ba:	4819      	ldr	r0, [pc, #100]	; (8001820 <DS18B20_Init+0x124>)
 80017bc:	f006 fc73 	bl	80080a6 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = TEMP_AIR_1W_Pin;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_AIR_1W_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4812      	ldr	r0, [pc, #72]	; (8001820 <DS18B20_Init+0x124>)
 80017d8:	f006 fac0 	bl	8007d5c <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_MOTOR_1W_Pin;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_MOTOR_1W_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	480b      	ldr	r0, [pc, #44]	; (8001820 <DS18B20_Init+0x124>)
 80017f4:	f006 fab2 	bl	8007d5c <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_DRIVER_1W_Pin;
 80017f8:	2304      	movs	r3, #4
 80017fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_DRIVER_1W_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <DS18B20_Init+0x124>)
 8001810:	f006 faa4 	bl	8007d5c <HAL_GPIO_Init>
}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	; 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <DS18B20_ConfigPinToRead>:
//=======================================================================================
void  DS18B20_ConfigPinToRead(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как вход на чтение
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f006 fa84 	bl	8007d5c <HAL_GPIO_Init>
}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <DS18B20_ConfigPinToWrite>:
//=======================================================================================
void  DS18B20_ConfigPinToWrite(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как выход на запись
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f006 fa68 	bl	8007d5c <HAL_GPIO_Init>
}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <DS18B20_ResetN>:

//=======================================================================================
// Транспортный уровень 1-Wire уровень программно:
//=======================================================================================
uint8_t DS18B20_ResetN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)							// Сделать RESET на 1-Wire линии
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 1;																	// Код возврата (0=Ок, 1=Ошибка)
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffd7 	bl	800185c <DS18B20_ConfigPinToWrite>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ae:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 480 мкс
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f006 fbf5 	bl	80080a6 <HAL_GPIO_WritePin>
	Delay_us(480);
 80018bc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80018c0:	f001 fcfe 	bl	80032c0 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ и ждем 60 мкс
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4619      	mov	r1, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f006 fbeb 	bl	80080a6 <HAL_GPIO_WritePin>
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffa5 	bl	8001824 <DS18B20_ConfigPinToRead>
	Delay_us(60);
 80018da:	203c      	movs	r0, #60	; 0x3c
 80018dc:	f001 fcf0 	bl	80032c0 <Delay_us>
	ret = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии и ждем завершения 420 мкс
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f006 fbc7 	bl	8008078 <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80018ee:	b662      	cpsie	i
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(420);
 80018f0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80018f4:	f001 fce4 	bl	80032c0 <Delay_us>
	return ret;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <DS18B20_Write_BitN>:
//=======================================================================================
void DS18B20_Write_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) // Отправка 1 бита в 1-Wire
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f006 fbc4 	bl	80080a6 <HAL_GPIO_WritePin>
	Delay_us(1);
 800191e:	2001      	movs	r0, #1
 8001920:	f001 fcce 	bl	80032c0 <Delay_us>
	if (PinState == GPIO_PIN_SET)														// Если нужно записать 1
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <DS18B20_Write_BitN+0x34>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);								// 		отпускаем линию ВВЕРХ
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	2201      	movs	r2, #1
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f006 fbb8 	bl	80080a6 <HAL_GPIO_WritePin>
	else																				// 		продолжаем держать линию ВНИЗу и ждем  60 мкс
	{
	}
	Delay_us(60);
 8001936:	203c      	movs	r0, #60	; 0x3c
 8001938:	f001 fcc2 	bl	80032c0 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// 		отпускаем линию ВВЕРХ
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f006 fbaf 	bl	80080a6 <HAL_GPIO_WritePin>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <DS18B20_Write_ByteN>:
//=======================================================================================
void DS18B20_Write_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t byte) 			// Отправка 1 байта в 1-Wire
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
	uint8_t i = 8;
 8001960:	2308      	movs	r3, #8
 8001962:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	73bb      	strb	r3, [r7, #14]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff75 	bl	800185c <DS18B20_ConfigPinToWrite>
  __ASM volatile ("cpsid i" : : : "memory");
 8001972:	b672      	cpsid	i
	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 8001974:	e00c      	b.n	8001990 <DS18B20_Write_ByteN+0x40>
	{
		bit = byte & 1;
 8001976:	787b      	ldrb	r3, [r7, #1]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	73bb      	strb	r3, [r7, #14]
		DS18B20_Write_BitN(GPIOx, GPIO_Pin, bit);										// Пишем текущий бит
 800197e:	7bba      	ldrb	r2, [r7, #14]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffbc 	bl	8001902 <DS18B20_Write_BitN>
		byte >>= 1;																		// и сдвигаем на 1 позицию вправо для записи следующего бита
 800198a:	787b      	ldrb	r3, [r7, #1]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	707b      	strb	r3, [r7, #1]
	while (i--)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	73fa      	strb	r2, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ed      	bne.n	8001976 <DS18B20_Write_ByteN+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 800199a:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <DS18B20_Read_BitN>:
//=======================================================================================
uint8_t DS18B20_Read_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 бита из 1-Wire
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
	uint8_t bit = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	737b      	strb	r3, [r7, #13]
	uint16_t wait = 5;
 80019b4:	2305      	movs	r3, #5
 80019b6:	81fb      	strh	r3, [r7, #14]

	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff4d 	bl	800185c <DS18B20_ConfigPinToWrite>

	// запрос приема бита
//	__disable_irq(); 																	// Глобально запретить все прерывания здесь важна времянка и чтобы никто не отвлекал!!!
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f006 fb6c 	bl	80080a6 <HAL_GPIO_WritePin>
//	Delay_us(1);
	while (wait--);																		// делаем так, т.к. вверхед на Delay_us(1); сильно больше необходимого интервала
 80019ce:	bf00      	nop
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	81fa      	strh	r2, [r7, #14]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1fa      	bne.n	80019d0 <DS18B20_Read_BitN+0x2c>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	2201      	movs	r2, #1
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f006 fb60 	bl	80080a6 <HAL_GPIO_WritePin>

	// читаем ответа бита
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff1a 	bl	8001824 <DS18B20_ConfigPinToRead>
	//Delay_us(14);																		// и ждем 14 мкс
	//Delay_us(2);																		// Delay_us - не точно работает за счет оверхеда на HAL на таких задержках (при 14мкс пролетает мимо)

//	LED_LIGHT_SET;
	bit = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f006 fb3f 	bl	8008078 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	737b      	strb	r3, [r7, #13]
//	LED_LIGHT_RESE  T;

//	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(50);																		// Ждем 45 мкс до конца, и возвращаем считанное значение
 80019fe:	2032      	movs	r0, #50	; 0x32
 8001a00:	f001 fc5e 	bl	80032c0 <Delay_us>

	return bit;
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <DS18B20_Read_ByteN>:
//=======================================================================================
uint8_t DS18B20_Read_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 байта из 1-Wire
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]
	uint8_t i = 8;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	73fb      	strb	r3, [r7, #15]
	uint8_t n = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a22:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 8001a24:	e00f      	b.n	8001a46 <DS18B20_Read_ByteN+0x38>
	{
		n >>= 1;																		// сдвигаем на 1 позицию вправо
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	73bb      	strb	r3, [r7, #14]
		n |= (DS18B20_Read_BitN(GPIOx, GPIO_Pin) << 7);									// и сохраняем считанное значение
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffb7 	bl	80019a4 <DS18B20_Read_BitN>
 8001a36:	4603      	mov	r3, r0
 8001a38:	01db      	lsls	r3, r3, #7
 8001a3a:	b25a      	sxtb	r2, r3
 8001a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	73bb      	strb	r3, [r7, #14]
	while (i--)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	1e5a      	subs	r2, r3, #1
 8001a4a:	73fa      	strb	r2, [r7, #15]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ea      	bne.n	8001a26 <DS18B20_Read_ByteN+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a50:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	return n;
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DS18B20_Measure_Async_Start>:

//=======================================================================================
// High-level functions
//=======================================================================================
void DS18B20_Measure_Async_Start(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{	// Асинхронный старт измерения температуры чтобы в процессе можно было чем-то еще заняться.
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]

	// Установка битности преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff11 	bl	8001894 <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	22cc      	movs	r2, #204	; 0xcc
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff69 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_WSCRATCHPAD);						// пошлем команду о том что мы будем сейчас писать данные в ScratchPad (3 байта)
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	224e      	movs	r2, #78	; 0x4e
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff63 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Th (верхний порог аларма, здесь нам не нужен)
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff5d 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Tl (нижний порог аларма, здесь нам не нужен)
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff57 	bl	8001950 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_RES_12BIT);							// запись регистра конфигурации (разрядность преобразования температуры)
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	227f      	movs	r2, #127	; 0x7f
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff51 	bl	8001950 <DS18B20_Write_ByteN>

	// Запуск преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff feee 	bl	8001894 <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	22cc      	movs	r2, #204	; 0xcc
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff46 	bl	8001950 <DS18B20_Write_ByteN>

	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_CONVERTTEMP);						// пошлем команду о том что нужно запусить процесс измерения
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	2244      	movs	r2, #68	; 0x44
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff40 	bl	8001950 <DS18B20_Write_ByteN>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <DS18B20_Measure_Async_FinishN>:
//=======================================================================================
uint16_t DS18B20_Measure_Async_FinishN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
	int16_t Temp_FULL = DS18B20_ERR;													// такого кода на бывает у этих датчиков (5 старших разрядов должны быть одинаково 0 или 1, там знак температуры пишется)
 8001ae4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001ae8:	83fb      	strh	r3, [r7, #30]
	int16_t Temp_LSByte;
	int16_t Temp_MSByte;
	uint8_t ScratchPad[DS18X20_SP_SIZE];
//	uint8_t CRC_Result = DS18X20_ERROR_CRC;

	if (DS18B20_ResetN(GPIOx, GPIO_Pin) == 0)											// Если на RESET пришел правильный ответ PRESENSE
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fed0 	bl	8001894 <DS18B20_ResetN>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d13e      	bne.n	8001b78 <DS18B20_Measure_Async_FinishN+0xa0>
	{
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	22cc      	movs	r2, #204	; 0xcc
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff25 	bl	8001950 <DS18B20_Write_ByteN>
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_RSCRATCHPAD);					// Запрос на чтение ScratchPad
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	22be      	movs	r2, #190	; 0xbe
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff1f 	bl	8001950 <DS18B20_Write_ByteN>

		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e00f      	b.n	8001b38 <DS18B20_Measure_Async_FinishN+0x60>
			ScratchPad[i] = DS18B20_Read_ByteN(GPIOx, GPIO_Pin);
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff76 	bl	8001a0e <DS18B20_Read_ByteN>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4619      	mov	r1, r3
 8001b26:	f107 0208 	add.w	r2, r7, #8
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	460a      	mov	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	ddec      	ble.n	8001b18 <DS18B20_Measure_Async_FinishN+0x40>

		DS18B20_ResetN(GPIOx, GPIO_Pin);												// Сброс по окончании чтения ScratchPad
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fea6 	bl	8001894 <DS18B20_ResetN>


		// После вычисления контрольной суммы мастер должен сравнить получившееся значение с переданной CRC.
		// Если эти значения совпадают, значит прием данных прошел без ошибок.
		// Можно также вычислить контрольную сумму для всех 64 принятых бит, тогда результат должен быть равен нулю. (Из статьи Ридико Л.И.)
		if ( DS18B20_CRC8( &ScratchPad[0], DS18X20_SP_SIZE ) == 0 )								// если CRC проверен, возвращаем 2 байта температуры (потом декодировать)
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	2109      	movs	r1, #9
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f8ec 	bl	8001d2c <DS18B20_CRC8>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <DS18B20_Measure_Async_FinishN+0x9a>
		{
			Temp_LSByte = ScratchPad[0];							// temp LSByte младший
 8001b5a:	7a3b      	ldrb	r3, [r7, #8]
 8001b5c:	82fb      	strh	r3, [r7, #22]
			Temp_MSByte = ScratchPad[1];							// temp MSByte старший
 8001b5e:	7a7b      	ldrb	r3, [r7, #9]
 8001b60:	82bb      	strh	r3, [r7, #20]
			Temp_FULL   = ((Temp_MSByte << 8) + (Temp_LSByte));
 8001b62:	8abb      	ldrh	r3, [r7, #20]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	83fb      	strh	r3, [r7, #30]
 8001b70:	e002      	b.n	8001b78 <DS18B20_Measure_Async_FinishN+0xa0>
//			CRC_Result = DS18X20_ERROR_CRC;
		}
		else
		{
			// Если передача прошла с ошибкой - передаем ошибку
			Temp_FULL = DS18B20_ERR;
 8001b72:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001b76:	83fb      	strh	r3, [r7, #30]
		}

	}
	return Temp_FULL;
 8001b78:	8bfb      	ldrh	r3, [r7, #30]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <DS18B20_Temperature_Double>:
	}
	return (int8_t)((TempWord & 0b0000011111110000) >> 4);								// целая часть
}
//=======================================================================================
double DS18B20_Temperature_Double(uint16_t TempWord)									// Получить температуру полностью со знаком и в double
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
	double temp_c = -56.0;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	4c62      	ldr	r4, [pc, #392]	; (8001d1c <DS18B20_Temperature_Double+0x198>)
 8001b94:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (TempWord >= 0x800) 																// Ортицательная температура
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9e:	d363      	bcc.n	8001c68 <DS18B20_Temperature_Double+0xe4>
	{
		temp_c = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f04f 0400 	mov.w	r4, #0
 8001ba8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c += 0.06250;
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <DS18B20_Temperature_Double+0x48>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <DS18B20_Temperature_Double+0x19c>)
 8001bbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc0:	f7fe faf6 	bl	80001b0 <__adddf3>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c += 0.12500;
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <DS18B20_Temperature_Double+0x6a>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001bde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001be2:	f7fe fae5 	bl	80001b0 <__adddf3>
 8001be6:	4603      	mov	r3, r0
 8001be8:	460c      	mov	r4, r1
 8001bea:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c += 0.25000;
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <DS18B20_Temperature_Double+0x8a>
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <DS18B20_Temperature_Double+0x1a0>)
 8001bfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c02:	f7fe fad5 	bl	80001b0 <__adddf3>
 8001c06:	4603      	mov	r3, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c += 0.50000;
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <DS18B20_Temperature_Double+0xaa>
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <DS18B20_Temperature_Double+0x1a4>)
 8001c1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c22:	f7fe fac5 	bl	80001b0 <__adddf3>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	e9c7 3402 	strd	r3, r4, [r7, #8]

		// целая часть
		TempWord = (TempWord >> 4) & 0x00FF;
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	80fb      	strh	r3, [r7, #6]
		TempWord = TempWord - 0x0001; //subtract 1
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	80fb      	strh	r3, [r7, #6]
		TempWord = ~TempWord; //ones compliment
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	80fb      	strh	r3, [r7, #6]
		temp_c = temp_c - (double)(TempWord & 0xFF);
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fbfd 	bl	8000448 <__aeabi_i2d>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	461a      	mov	r2, r3
 8001c54:	4623      	mov	r3, r4
 8001c56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c5a:	f7fe faa7 	bl	80001ac <__aeabi_dsub>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460c      	mov	r4, r1
 8001c62:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001c66:	e051      	b.n	8001d0c <DS18B20_Temperature_Double+0x188>
	}
	else 																				// Положительная температура
	{
		temp_c = 0;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	f04f 0400 	mov.w	r4, #0
 8001c70:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// целая часть
		temp_c = (TempWord >> 4) & 0x00FF;
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fbe3 	bl	8000448 <__aeabi_i2d>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c = temp_c + 0.06250;
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <DS18B20_Temperature_Double+0x126>
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <DS18B20_Temperature_Double+0x19c>)
 8001c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c9e:	f7fe fa87 	bl	80001b0 <__adddf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c = temp_c + 0.12500;
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00b      	beq.n	8001ccc <DS18B20_Temperature_Double+0x148>
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cc0:	f7fe fa76 	bl	80001b0 <__adddf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c = temp_c + 0.25000;
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00a      	beq.n	8001cec <DS18B20_Temperature_Double+0x168>
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <DS18B20_Temperature_Double+0x1a0>)
 8001cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ce0:	f7fe fa66 	bl	80001b0 <__adddf3>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c = temp_c + 0.50000;
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <DS18B20_Temperature_Double+0x188>
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <DS18B20_Temperature_Double+0x1a4>)
 8001cfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d00:	f7fe fa56 	bl	80001b0 <__adddf3>
 8001d04:	4603      	mov	r3, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}
	return temp_c;
 8001d0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	c04c0000 	.word	0xc04c0000
 8001d20:	3fb00000 	.word	0x3fb00000
 8001d24:	3fd00000 	.word	0x3fd00000
 8001d28:	3fe00000 	.word	0x3fe00000

08001d2c <DS18B20_CRC8>:
//=======================================================================================
#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0
////=======================================================================================
uint8_t DS18B20_CRC8( uint8_t *data, uint16_t number_of_bytes_in_data )					// Рассчет CRC
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;

	crc = CRC8INIT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	81bb      	strh	r3, [r7, #12]
 8001d40:	e02a      	b.n	8001d98 <DS18B20_CRC8+0x6c>
	{
		b = data[loop_count];
 8001d42:	89bb      	ldrh	r3, [r7, #12]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	72bb      	strb	r3, [r7, #10]

		bit_counter = 8;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	72fb      	strb	r3, [r7, #11]
		do {
			feedback_bit = (crc ^ b) & 0x01;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	7abb      	ldrb	r3, [r7, #10]
 8001d54:	4053      	eors	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	727b      	strb	r3, [r7, #9]

			if ( feedback_bit == 0x01 ) {
 8001d5e:	7a7b      	ldrb	r3, [r7, #9]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d103      	bne.n	8001d6c <DS18B20_CRC8+0x40>
				crc = crc ^ CRC8POLY;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	f083 0318 	eor.w	r3, r3, #24
 8001d6a:	73fb      	strb	r3, [r7, #15]
			}
			crc = (crc >> 1) & 0x7F;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
			if ( feedback_bit == 0x01 ) {
 8001d72:	7a7b      	ldrb	r3, [r7, #9]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d103      	bne.n	8001d80 <DS18B20_CRC8+0x54>
				crc = crc | 0x80;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d7e:	73fb      	strb	r3, [r7, #15]
			}

			b = b >> 1;
 8001d80:	7abb      	ldrb	r3, [r7, #10]
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	72bb      	strb	r3, [r7, #10]
			bit_counter--;
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	72fb      	strb	r3, [r7, #11]

		} while (bit_counter > 0);
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1de      	bne.n	8001d50 <DS18B20_CRC8+0x24>
	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	3301      	adds	r3, #1
 8001d96:	81bb      	strh	r3, [r7, #12]
 8001d98:	89ba      	ldrh	r2, [r7, #12]
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1d0      	bne.n	8001d42 <DS18B20_CRC8+0x16>
	}

	return crc;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <Display_Test>:

static char str[18];																	// Для печати строк через sprintf

//======================================================================================
void Display_Test(uint16_t pos_x, uint16_t pos_y)										// Для тестов
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af04      	add	r7, sp, #16
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	80fb      	strh	r3, [r7, #6]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80bb      	strh	r3, [r7, #4]
//	sprintf(str, "%04.3f", ADC_State.Speed_value_volts);
//	LCD9488_GUI_Draw_StringColor(10, 230, str, (unsigned char*)LCD55Mono37x48, RED, CYAN, DRAW_NO_OVERLYING);

	sprintf(str, "%02d", Speed_value_percent);
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <Display_Test+0x44>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	490c      	ldr	r1, [pc, #48]	; (8001df4 <Display_Test+0x48>)
 8001dc4:	480c      	ldr	r0, [pc, #48]	; (8001df8 <Display_Test+0x4c>)
 8001dc6:	f013 ff3d 	bl	8015c44 <siprintf>
//	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Digital7Mono32x48, RED, CYAN, DRAW_NO_OVERLYING);
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, (unsigned char*)Unispace32x48_Digits, RED, CYAN, DRAW_NO_OVERLYING);
 8001dca:	88b9      	ldrh	r1, [r7, #4]
 8001dcc:	88f8      	ldrh	r0, [r7, #6]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <Display_Test+0x50>)
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <Display_Test+0x4c>)
 8001de2:	f002 fe39 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>


}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20008968 	.word	0x20008968
 8001df4:	08019c00 	.word	0x08019c00
 8001df8:	20000334 	.word	0x20000334
 8001dfc:	0801de4c 	.word	0x0801de4c

08001e00 <Display_SystemVoltage>:
//======================================================================================
void Display_SystemVoltage(uint16_t pos_x, uint16_t pos_y)								// Показать напряжение питания процессора
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af04      	add	r7, sp, #16
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	80fb      	strh	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80bb      	strh	r3, [r7, #4]
	unsigned char* Font = (unsigned char*)Arial_9;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <Display_SystemVoltage+0x8c>)
 8001e12:	60fb      	str	r3, [r7, #12]

	sprintf(str, "Vcc = %3.2fv", ADC_State.ADC_Ref_Voltage);
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <Display_SystemVoltage+0x90>)
 8001e16:	f103 0408 	add.w	r4, r3, #8
 8001e1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4623      	mov	r3, r4
 8001e22:	491c      	ldr	r1, [pc, #112]	; (8001e94 <Display_SystemVoltage+0x94>)
 8001e24:	481c      	ldr	r0, [pc, #112]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e26:	f013 ff0d 	bl	8015c44 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001e2a:	88b9      	ldrh	r1, [r7, #4]
 8001e2c:	88f8      	ldrh	r0, [r7, #6]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9302      	str	r3, [sp, #8]
 8001e32:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e42:	f002 fe09 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>

	sprintf(str, "Tmp = %+2dC", (int)ADC_State.CPU_Temperature);
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <Display_SystemVoltage+0x90>)
 8001e48:	f103 0410 	add.w	r4, r3, #16
 8001e4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	4621      	mov	r1, r4
 8001e54:	f7fe fe12 	bl	8000a7c <__aeabi_d2iz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	490f      	ldr	r1, [pc, #60]	; (8001e9c <Display_SystemVoltage+0x9c>)
 8001e5e:	480e      	ldr	r0, [pc, #56]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e60:	f013 fef0 	bl	8015c44 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y + 10, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001e64:	88bb      	ldrh	r3, [r7, #4]
 8001e66:	330a      	adds	r3, #10
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	88f8      	ldrh	r0, [r7, #6]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <Display_SystemVoltage+0x98>)
 8001e80:	f002 fdea 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>

}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}
 8001e8c:	0801d5a4 	.word	0x0801d5a4
 8001e90:	20008bb0 	.word	0x20008bb0
 8001e94:	08019c08 	.word	0x08019c08
 8001e98:	20000334 	.word	0x20000334
 8001e9c:	08019c18 	.word	0x08019c18

08001ea0 <Display_MotorDirection>:
//======================================================================================
void Display_MotorDirection(uint16_t pos_x, uint16_t pos_y, TMotorDirection AMotorDirection) // Показать направление вращения мотора
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	80bb      	strh	r3, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	70fb      	strb	r3, [r7, #3]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <Display_MotorDirection+0x88>)
 8001eb4:	60fb      	str	r3, [r7, #12]
	switch (AMotorDirection)
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d013      	beq.n	8001ee4 <Display_MotorDirection+0x44>
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d020      	beq.n	8001f02 <Display_MotorDirection+0x62>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d000      	beq.n	8001ec6 <Display_MotorDirection+0x26>
			break;
		case MD_REV:
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
			break;
	}
}
 8001ec4:	e02c      	b.n	8001f20 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, " STOP  ", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001ec6:	88b9      	ldrh	r1, [r7, #4]
 8001ec8:	88f8      	ldrh	r0, [r7, #6]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9302      	str	r3, [sp, #8]
 8001ece:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <Display_MotorDirection+0x8c>)
 8001ede:	f002 fdbb 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>
			break;
 8001ee2:	e01d      	b.n	8001f20 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "FORWARD", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001ee4:	88b9      	ldrh	r1, [r7, #4]
 8001ee6:	88f8      	ldrh	r0, [r7, #6]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <Display_MotorDirection+0x90>)
 8001efc:	f002 fdac 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>
			break;
 8001f00:	e00e      	b.n	8001f20 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001f02:	88b9      	ldrh	r1, [r7, #4]
 8001f04:	88f8      	ldrh	r0, [r7, #6]
 8001f06:	2300      	movs	r3, #0
 8001f08:	9302      	str	r3, [sp, #8]
 8001f0a:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <Display_MotorDirection+0x94>)
 8001f1a:	f002 fd9d 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>
			break;
 8001f1e:	bf00      	nop
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	0801ab3c 	.word	0x0801ab3c
 8001f2c:	08019c24 	.word	0x08019c24
 8001f30:	08019c2c 	.word	0x08019c2c
 8001f34:	08019c34 	.word	0x08019c34

08001f38 <Display_MotorSpeed>:
//======================================================================================
void Display_MotorSpeed(uint16_t pos_x, uint16_t pos_y, uint16_t ASpeed) 					// Показать скорость вращения мотора
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
 8001f42:	460b      	mov	r3, r1
 8001f44:	80bb      	strh	r3, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	807b      	strh	r3, [r7, #2]
	unsigned char* Font = (unsigned char*)Unispace32x48_Digits;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <Display_MotorSpeed+0x44>)
 8001f4c:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%04d", (uint16_t)ASpeed);
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	461a      	mov	r2, r3
 8001f52:	490b      	ldr	r1, [pc, #44]	; (8001f80 <Display_MotorSpeed+0x48>)
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <Display_MotorSpeed+0x4c>)
 8001f56:	f013 fe75 	bl	8015c44 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001f5a:	88b9      	ldrh	r1, [r7, #4]
 8001f5c:	88f8      	ldrh	r0, [r7, #6]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	231f      	movs	r3, #31
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <Display_MotorSpeed+0x4c>)
 8001f70:	f002 fd72 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0801de4c 	.word	0x0801de4c
 8001f80:	08019c3c 	.word	0x08019c3c
 8001f84:	20000334 	.word	0x20000334

08001f88 <Display_Temperature>:
//======================================================================================
void Display_Temperature(uint16_t pos_x, uint16_t pos_y, double ATemp) 						// Показать температуру
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af04      	add	r7, sp, #16
 8001f8e:	e9c7 2300 	strd	r2, r3, [r7]
 8001f92:	4603      	mov	r3, r0
 8001f94:	81fb      	strh	r3, [r7, #14]
 8001f96:	460b      	mov	r3, r1
 8001f98:	81bb      	strh	r3, [r7, #12]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <Display_Temperature+0x44>)
 8001f9c:	617b      	str	r3, [r7, #20]

	sprintf(str, "Temp = %+2.1f C", ATemp );
 8001f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fa2:	490b      	ldr	r1, [pc, #44]	; (8001fd0 <Display_Temperature+0x48>)
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <Display_Temperature+0x4c>)
 8001fa6:	f013 fe4d 	bl	8015c44 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001faa:	89b9      	ldrh	r1, [r7, #12]
 8001fac:	89f8      	ldrh	r0, [r7, #14]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	231f      	movs	r3, #31
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <Display_Temperature+0x4c>)
 8001fc0:	f002 fd4a 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>
}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0801ab3c 	.word	0x0801ab3c
 8001fd0:	08019c44 	.word	0x08019c44
 8001fd4:	20000334 	.word	0x20000334

08001fd8 <Display_Encoder>:
//======================================================================================
void Display_Encoder(uint16_t pos_x, uint16_t pos_y)										// Показать значение энкодера
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80fb      	strh	r3, [r7, #6]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
	sprintf(str, "%02d", (uint8_t)(ExchangeStruct.Encoder_State->MP_Encoder_Value));
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <Display_Encoder+0x48>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	490c      	ldr	r1, [pc, #48]	; (8002024 <Display_Encoder+0x4c>)
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <Display_Encoder+0x50>)
 8001ff6:	f013 fe25 	bl	8015c44 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, (unsigned char*)Unispace32x48_Digits, RED, CYAN, DRAW_NO_OVERLYING);
 8001ffa:	88b9      	ldrh	r1, [r7, #4]
 8001ffc:	88f8      	ldrh	r0, [r7, #6]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <Display_Encoder+0x54>)
 8002010:	4a05      	ldr	r2, [pc, #20]	; (8002028 <Display_Encoder+0x50>)
 8002012:	f002 fd21 	bl	8004a58 <LCD9488_GUI_Draw_StringColor>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20008c18 	.word	0x20008c18
 8002024:	08019c00 	.word	0x08019c00
 8002028:	20000334 	.word	0x20000334
 800202c:	0801de4c 	.word	0x0801de4c

08002030 <EEPROM_OptionsLoadDefault>:



//=======================================================================================
void EEPROM_OptionsLoadDefault(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
// MP_Power_Set_5V0(POWERSTATE_DISABLE);
// MP_Power_Set_10V(POWERSTATE_DISABLE);
// MP_Power_Set_EOP(POWERSTATE_DISABLE);
// MP_Power_Set_Encoder(POWERSTATE_DISABLE);
//
	ExchangeStruct.TerminalFormat = TERMINALFORMAT_HUMAN;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <EEPROM_OptionsLoadDefault+0x14>)
 8002036:	2200      	movs	r2, #0
 8002038:	735a      	strb	r2, [r3, #13]
//	ExchangeStruct.TerminalFormat = TERMINALFORMAT_MACHINE;
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20008c18 	.word	0x20008c18

08002048 <EEPROM_OptionsLoad>:
//=======================================================================================
void EEPROM_OptionsLoad(void)															// Загрузить настройки из энергонезависимой памяти
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	EEPROM_OptionsLoadDefault();
 800204c:	f7ff fff0 	bl	8002030 <EEPROM_OptionsLoadDefault>
// ExchangeStruct.DeviceSerialNumber[8] = '\0';
//
//
// MP_BUZZER_BuzzerState = (((uint8_t)( *(__IO uint32_t*)(EEPROM_ADDR_BASE + EEPROM_ADDR_SETTINGS_BUZZER) ) == 0)?(BUZZER_STSTE_OFF):(BUZZER_STSTE_ON)) ;
//
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <EEPROM_OptionsSave>:
//=======================================================================================
void EEPROM_OptionsSave(void)															// Сохранить настройки в энергонезависимой памяти
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
//	 // MP_ExchangeStruct.TerminalMode = TERMINALMODE_COMMAND;
//	 //	double ref_3v3 = 3.4596459;
//	 //	double ref_12v = 14.00116007;
//	 //	EEPROM_WriteObject(EEPROM_ADDR_SETTINGS_ADCREF3V3, &ref_3v3, sizeof(ref_3v3) );
//	 //	EEPROM_WriteObject(EEPROM_ADDR_SETTINGS_ADCREF12V, &ref_12v, sizeof(ref_12v) );
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <Encoder_Init>:
// на аппаратном таймере TIM3 в режиме энкодера
#include <Encoder.h>
#include "tim.h"
//=======================================================================================
void  Encoder_Init(void)																// Настройка GPIO портов для энкодера
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <Encoder_Init+0x104>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <Encoder_Init+0x104>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <Encoder_Init+0x104>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <Encoder_Init+0x104>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a38      	ldr	r2, [pc, #224]	; (8002164 <Encoder_Init+0x104>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <Encoder_Init+0x104>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <Encoder_Init+0x104>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a32      	ldr	r2, [pc, #200]	; (8002164 <Encoder_Init+0x104>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <Encoder_Init+0x104>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <Encoder_Init+0x104>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a2c      	ldr	r2, [pc, #176]	; (8002164 <Encoder_Init+0x104>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <Encoder_Init+0x104>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <Encoder_Init+0x104>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a26      	ldr	r2, [pc, #152]	; (8002164 <Encoder_Init+0x104>)
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <Encoder_Init+0x104>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <Encoder_Init+0x104>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a20      	ldr	r2, [pc, #128]	; (8002164 <Encoder_Init+0x104>)
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <Encoder_Init+0x104>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	// ENC_A
    GPIO_InitStruct.Pin 		= ENC_A_Pin;
 80020f6:	2308      	movs	r3, #8
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate 	= GPIO_AF2_TIM3;
 8002106:	2302      	movs	r3, #2
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4815      	ldr	r0, [pc, #84]	; (8002168 <Encoder_Init+0x108>)
 8002112:	f005 fe23 	bl	8007d5c <HAL_GPIO_Init>

	// ENC_B
    GPIO_InitStruct.Pin 		= ENC_B_Pin;
 8002116:	2310      	movs	r3, #16
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002126:	2302      	movs	r3, #2
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <Encoder_Init+0x108>)
 8002132:	f005 fe13 	bl	8007d5c <HAL_GPIO_Init>

	// ENC_BTN
	GPIO_InitStruct.Pin 		= ENC_BTN_Pin;
 8002136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <Encoder_Init+0x10c>)
 800213e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002144:	2301      	movs	r3, #1
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <Encoder_Init+0x110>)
 8002150:	f005 fe04 	bl	8007d5c <HAL_GPIO_Init>

	// включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

    MX_TIM3_Init();																		// Настройка таймера TIM3 для работы с энкодером
 8002154:	f000 fdba 	bl	8002ccc <MX_TIM3_Init>
    Encoder_Start();																	// Начальная установка для энкодера
 8002158:	f000 f80c 	bl	8002174 <Encoder_Start>
}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40021000 	.word	0x40021000
 800216c:	10210000 	.word	0x10210000
 8002170:	40020c00 	.word	0x40020c00

08002174 <Encoder_Start>:
//=======================================================================================

//=======================================================================================
void Encoder_Start(void)																// Начальная установка для энкодера
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	Encoder_State.MP_Encoder_Value 				= ENCODER_VAL_DEFAULT;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <Encoder_Start+0x28>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
	Encoder_State.MP_Encoder_Value_old 			= ENCODER_VAL_DEFAULT;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <Encoder_Start+0x28>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
//	Encoder_State.MP_Encoder_Value_prev 		= ENCODER_VAL_DEFAULT;
	__HAL_TIM_SET_COUNTER(&htim3, Encoder_State.MP_Encoder_Value);
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <Encoder_Start+0x2c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <Encoder_Start+0x28>)
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800218e:	213c      	movs	r1, #60	; 0x3c
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <Encoder_Start+0x2c>)
 8002192:	f009 f865 	bl	800b260 <HAL_TIM_Encoder_Start_IT>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20008b3c 	.word	0x20008b3c
 80021a0:	20008e8c 	.word	0x20008e8c

080021a4 <Encoder_Scan>:
	__HAL_TIM_SET_COUNTER(&htim3, Encoder_State.MP_Encoder_Value);
	HAL_TIM_Encoder_Stop_IT(&htim3, TIM_CHANNEL_ALL);
}
//=======================================================================================
uint8_t Encoder_Scan(void)																// Сканировать состояние энкодера
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	Encoder_State.MP_Encoder_Value 				= __HAL_TIM_GET_COUNTER(&htim3);
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <Encoder_Scan+0x80>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <Encoder_Scan+0x84>)
 80021b0:	6013      	str	r3, [r2, #0]
	Encoder_State.MP_Encoder_Dir 				= __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <Encoder_Scan+0x80>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b10      	cmp	r3, #16
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <Encoder_Scan+0x84>)
 80021ca:	609a      	str	r2, [r3, #8]
	Encoder_State.MP_Encoder_Delta				= Encoder_State.MP_Encoder_Value - Encoder_State.MP_Encoder_Value_old;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <Encoder_Scan+0x84>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <Encoder_Scan+0x84>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <Encoder_Scan+0x84>)
 80021da:	60da      	str	r2, [r3, #12]
	Encoder_State.fEncoder3Changes				= ( Encoder_State.MP_Encoder_Delta != 0 );
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <Encoder_Scan+0x84>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <Encoder_Scan+0x84>)
 80021ee:	741a      	strb	r2, [r3, #16]
	Encoder_State.Btn_pressed					= ENC_BTN_PRESSED;
 80021f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <Encoder_Scan+0x88>)
 80021f6:	f005 ff3f 	bl	8008078 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <Encoder_Scan+0x84>)
 800220a:	745a      	strb	r2, [r3, #17]

	if (Encoder_State.fEncoder3Changes)
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <Encoder_Scan+0x84>)
 800220e:	7c1b      	ldrb	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <Encoder_Scan+0x78>
	{
		Encoder_State.MP_Encoder_Value_old = Encoder_State.MP_Encoder_Value;			// обновить предыдущее состояние энкодера для следующего цикла сканирования
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <Encoder_Scan+0x84>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a03      	ldr	r2, [pc, #12]	; (8002228 <Encoder_Scan+0x84>)
 800221a:	6053      	str	r3, [r2, #4]
	}

	return Encoder_State.fEncoder3Changes;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <Encoder_Scan+0x84>)
 800221e:	7c1b      	ldrb	r3, [r3, #16]
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20008e8c 	.word	0x20008e8c
 8002228:	20008b3c 	.word	0x20008b3c
 800222c:	40020c00 	.word	0x40020c00

08002230 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
//__weak void configureTimerForRunTimeStats(void)
void configureTimerForRunTimeStats(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim9);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <configureTimerForRunTimeStats+0x10>)
 8002236:	f008 fca5 	bl	800ab84 <HAL_TIM_Base_Start>
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20008f4c 	.word	0x20008f4c

08002244 <getRunTimeCounterValue>:

//__weak unsigned long getRunTimeCounterValue(void)
unsigned long getRunTimeCounterValue(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
    static unsigned long counter = 0;

     counter += __HAL_TIM_GET_COUNTER(&htim9);
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <getRunTimeCounterValue+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <getRunTimeCounterValue+0x2c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <getRunTimeCounterValue+0x2c>)
 8002256:	6013      	str	r3, [r2, #0]
     __HAL_TIM_SET_COUNTER(&htim9, 0);
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <getRunTimeCounterValue+0x28>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	; 0x24

     return counter;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <getRunTimeCounterValue+0x2c>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20008f4c 	.word	0x20008f4c
 8002270:	20000348 	.word	0x20000348

08002274 <MX_FREERTOS_Init>:

//======================================================================================
void MX_FREERTOS_Init(void)																// FreeRTOS initialization
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  // Create the mutex(es)
  myMutex_I2C1Handle 		= osMutexNew(&myMutex_I2C1_attributes);						// creation of myMutex_I2C1
 8002278:	4838      	ldr	r0, [pc, #224]	; (800235c <MX_FREERTOS_Init+0xe8>)
 800227a:	f00f f861 	bl	8011340 <osMutexNew>
 800227e:	4602      	mov	r2, r0
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <MX_FREERTOS_Init+0xec>)
 8002282:	601a      	str	r2, [r3, #0]
  MircoRL_Tx_MutexHandle 	= osMutexNew(&MutexMircoRL_Tx_attributes);					// creation of MutexMircoRL_Tx
 8002284:	4837      	ldr	r0, [pc, #220]	; (8002364 <MX_FREERTOS_Init+0xf0>)
 8002286:	f00f f85b 	bl	8011340 <osMutexNew>
 800228a:	4602      	mov	r2, r0
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <MX_FREERTOS_Init+0xf4>)
 800228e:	601a      	str	r2, [r3, #0]
  MircoRL_TxCMD_MutexHandle	= osMutexNew(&MutexMircoRL_TxCMD_attributes);				// creation of MutexMircoRL_TxCMD
 8002290:	4836      	ldr	r0, [pc, #216]	; (800236c <MX_FREERTOS_Init+0xf8>)
 8002292:	f00f f855 	bl	8011340 <osMutexNew>
 8002296:	4602      	mov	r2, r0
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <MX_FREERTOS_Init+0xfc>)
 800229a:	601a      	str	r2, [r3, #0]

  MicroRL_xRxSemaphore = xSemaphoreCreateCounting(10,0);
 800229c:	2100      	movs	r1, #0
 800229e:	200a      	movs	r0, #10
 80022a0:	f00f fced 	bl	8011c7e <xQueueCreateCountingSemaphore>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <MX_FREERTOS_Init+0x100>)
 80022a8:	601a      	str	r2, [r3, #0]
  MicroRL_xTxSemaphore = xSemaphoreCreateBinary();
 80022aa:	2203      	movs	r2, #3
 80022ac:	2100      	movs	r1, #0
 80022ae:	2001      	movs	r0, #1
 80022b0:	f00f fbd0 	bl	8011a54 <xQueueGenericCreate>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <MX_FREERTOS_Init+0x104>)
 80022b8:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(MicroRL_xTxSemaphore);
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <MX_FREERTOS_Init+0x104>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	f00f fd0c 	bl	8011ce0 <xQueueGenericSend>

  // Create the queue(s)
  myQueue_UART_RxHandle 	= osMessageQueueNew (32, sizeof(uint8_t), &myQueue_UART_Rx_attributes);	// creation of myQueue_UART_Rx
 80022c8:	4a2c      	ldr	r2, [pc, #176]	; (800237c <MX_FREERTOS_Init+0x108>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	2020      	movs	r0, #32
 80022ce:	f00f f97f 	bl	80115d0 <osMessageQueueNew>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <MX_FREERTOS_Init+0x10c>)
 80022d6:	601a      	str	r2, [r3, #0]

  // Create the thread(s)
  defaultTaskHandle 		= osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022d8:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <MX_FREERTOS_Init+0x110>)
 80022da:	2100      	movs	r1, #0
 80022dc:	482a      	ldr	r0, [pc, #168]	; (8002388 <MX_FREERTOS_Init+0x114>)
 80022de:	f00e ff57 	bl	8011190 <osThreadNew>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_FREERTOS_Init+0x118>)
 80022e6:	601a      	str	r2, [r3, #0]
  myTask_IMUHandle 			= osThreadNew(StartTask_IMU, NULL, &myTask_IMU_attributes);
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <MX_FREERTOS_Init+0x11c>)
 80022ea:	2100      	movs	r1, #0
 80022ec:	4829      	ldr	r0, [pc, #164]	; (8002394 <MX_FREERTOS_Init+0x120>)
 80022ee:	f00e ff4f 	bl	8011190 <osThreadNew>
 80022f2:	4602      	mov	r2, r0
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <MX_FREERTOS_Init+0x124>)
 80022f6:	601a      	str	r2, [r3, #0]
  myTask_LCDHandle 			= osThreadNew(StartTask_LCD, NULL, &myTask_LCD_attributes);
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <MX_FREERTOS_Init+0x128>)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4828      	ldr	r0, [pc, #160]	; (80023a0 <MX_FREERTOS_Init+0x12c>)
 80022fe:	f00e ff47 	bl	8011190 <osThreadNew>
 8002302:	4602      	mov	r2, r0
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <MX_FREERTOS_Init+0x130>)
 8002306:	601a      	str	r2, [r3, #0]
  myTask_ADCHandle 			= osThreadNew(StartTask_ADC, NULL, &myTask_ADC_attributes);
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <MX_FREERTOS_Init+0x134>)
 800230a:	2100      	movs	r1, #0
 800230c:	4827      	ldr	r0, [pc, #156]	; (80023ac <MX_FREERTOS_Init+0x138>)
 800230e:	f00e ff3f 	bl	8011190 <osThreadNew>
 8002312:	4602      	mov	r2, r0
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <MX_FREERTOS_Init+0x13c>)
 8002316:	601a      	str	r2, [r3, #0]
  myTask_ScanCTRLHandle 	= osThreadNew(StartTask_ScanControls, NULL, &myTask_ScanCTRL_attributes);
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <MX_FREERTOS_Init+0x140>)
 800231a:	2100      	movs	r1, #0
 800231c:	4826      	ldr	r0, [pc, #152]	; (80023b8 <MX_FREERTOS_Init+0x144>)
 800231e:	f00e ff37 	bl	8011190 <osThreadNew>
 8002322:	4602      	mov	r2, r0
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <MX_FREERTOS_Init+0x148>)
 8002326:	601a      	str	r2, [r3, #0]
  myTask_ScanTempHandle 	= osThreadNew(StartTask_ScanTemperature, NULL, &myTask_ScanTemp_attributes);
 8002328:	4a25      	ldr	r2, [pc, #148]	; (80023c0 <MX_FREERTOS_Init+0x14c>)
 800232a:	2100      	movs	r1, #0
 800232c:	4825      	ldr	r0, [pc, #148]	; (80023c4 <MX_FREERTOS_Init+0x150>)
 800232e:	f00e ff2f 	bl	8011190 <osThreadNew>
 8002332:	4602      	mov	r2, r0
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <MX_FREERTOS_Init+0x154>)
 8002336:	601a      	str	r2, [r3, #0]
  myTask_SetStateHandle 	= osThreadNew(StartTask_SetState, NULL, &myTask_SetState_attributes);
 8002338:	4a24      	ldr	r2, [pc, #144]	; (80023cc <MX_FREERTOS_Init+0x158>)
 800233a:	2100      	movs	r1, #0
 800233c:	4824      	ldr	r0, [pc, #144]	; (80023d0 <MX_FREERTOS_Init+0x15c>)
 800233e:	f00e ff27 	bl	8011190 <osThreadNew>
 8002342:	4602      	mov	r2, r0
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <MX_FREERTOS_Init+0x160>)
 8002346:	601a      	str	r2, [r3, #0]
  myTask_MicroRLHandle 		= osThreadNew(StartTask_MircoRL, NULL, &myTask_MicroRL_attributes);
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <MX_FREERTOS_Init+0x164>)
 800234a:	2100      	movs	r1, #0
 800234c:	4823      	ldr	r0, [pc, #140]	; (80023dc <MX_FREERTOS_Init+0x168>)
 800234e:	f00e ff1f 	bl	8011190 <osThreadNew>
 8002352:	4602      	mov	r2, r0
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_FREERTOS_Init+0x16c>)
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	0801aae8 	.word	0x0801aae8
 8002360:	20008cb4 	.word	0x20008cb4
 8002364:	0801aaf8 	.word	0x0801aaf8
 8002368:	20008a24 	.word	0x20008a24
 800236c:	0801ab08 	.word	0x0801ab08
 8002370:	20008ba4 	.word	0x20008ba4
 8002374:	20008958 	.word	0x20008958
 8002378:	20008a08 	.word	0x20008a08
 800237c:	0801aad0 	.word	0x0801aad0
 8002380:	20008c38 	.word	0x20008c38
 8002384:	0801a9b0 	.word	0x0801a9b0
 8002388:	080023e5 	.word	0x080023e5
 800238c:	20008c2c 	.word	0x20008c2c
 8002390:	0801a9d4 	.word	0x0801a9d4
 8002394:	080023fd 	.word	0x080023fd
 8002398:	20008c30 	.word	0x20008c30
 800239c:	0801a9f8 	.word	0x0801a9f8
 80023a0:	0800240d 	.word	0x0800240d
 80023a4:	20008cc0 	.word	0x20008cc0
 80023a8:	0801aa1c 	.word	0x0801aa1c
 80023ac:	080024a1 	.word	0x080024a1
 80023b0:	20008cb8 	.word	0x20008cb8
 80023b4:	0801aa40 	.word	0x0801aa40
 80023b8:	080024b5 	.word	0x080024b5
 80023bc:	20008c8c 	.word	0x20008c8c
 80023c0:	0801aa64 	.word	0x0801aa64
 80023c4:	080024e9 	.word	0x080024e9
 80023c8:	20008c34 	.word	0x20008c34
 80023cc:	0801aa88 	.word	0x0801aa88
 80023d0:	080025a9 	.word	0x080025a9
 80023d4:	20008cbc 	.word	0x20008cbc
 80023d8:	0801aaac 	.word	0x0801aaac
 80023dc:	08002651 	.word	0x08002651
 80023e0:	20008c90 	.word	0x20008c90

080023e4 <StartDefaultTask>:
//======================================================================================
void StartDefaultTask(void *argument)													// Поток по-умолчанию
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  MX_USB_DEVICE_Init();																	// init code for USB_DEVICE
 80023ec:	f012 f8d6 	bl	801459c <MX_USB_DEVICE_Init>

  BUZZER_BeepTIM();																		// Квакнуть баззером при старте
 80023f0:	f7ff f8a0 	bl	8001534 <BUZZER_BeepTIM>

  for(;;)
  {
	//LED_LIGHT_INV;
	// LED_GREEN_INV;
    osDelay(100);
 80023f4:	2064      	movs	r0, #100	; 0x64
 80023f6:	f00e ff75 	bl	80112e4 <osDelay>
 80023fa:	e7fb      	b.n	80023f4 <StartDefaultTask+0x10>

080023fc <StartTask_IMU>:

  }
}
//======================================================================================
void StartTask_IMU(void *argument)														// Поток сканирования данных от МЕМС по вибрации
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8002404:	2001      	movs	r0, #1
 8002406:	f00e ff6d 	bl	80112e4 <osDelay>
 800240a:	e7fb      	b.n	8002404 <StartTask_IMU+0x8>

0800240c <StartTask_LCD>:
  }
}
//======================================================================================
void StartTask_LCD(void *argument)														// Поток вывода на LCD экран
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	Display_Test(200,230);
 8002414:	21e6      	movs	r1, #230	; 0xe6
 8002416:	20c8      	movs	r0, #200	; 0xc8
 8002418:	f7ff fcc8 	bl	8001dac <Display_Test>
	Display_MotorDirection(50, 50, MotorDirection);										// Показать направление вращения мотора
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <StartTask_LCD+0x7c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	2132      	movs	r1, #50	; 0x32
 8002424:	2032      	movs	r0, #50	; 0x32
 8002426:	f7ff fd3b 	bl	8001ea0 <Display_MotorDirection>
	Display_MotorSpeed(250, 50, MotorSpeed);											// Показать скорость вращения мотора
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <StartTask_LCD+0x80>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	2132      	movs	r1, #50	; 0x32
 8002432:	20fa      	movs	r0, #250	; 0xfa
 8002434:	f7ff fd80 	bl	8001f38 <Display_MotorSpeed>

	Display_SystemVoltage(100, 5);
 8002438:	2105      	movs	r1, #5
 800243a:	2064      	movs	r0, #100	; 0x64
 800243c:	f7ff fce0 	bl	8001e00 <Display_SystemVoltage>

	Display_Temperature(10, 100, Temperature_Motor);									// Темература от датчика мотора
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <StartTask_LCD+0x84>)
 8002442:	cb18      	ldmia	r3, {r3, r4}
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	2164      	movs	r1, #100	; 0x64
 800244a:	200a      	movs	r0, #10
 800244c:	f7ff fd9c 	bl	8001f88 <Display_Temperature>
	Display_Temperature(10, 140, Temperature_Driver);									// Темература от датчика драйвера
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <StartTask_LCD+0x88>)
 8002452:	cb18      	ldmia	r3, {r3, r4}
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	218c      	movs	r1, #140	; 0x8c
 800245a:	200a      	movs	r0, #10
 800245c:	f7ff fd94 	bl	8001f88 <Display_Temperature>
	Display_Temperature(10, 180, Temperature_Air);										// Темература от датчика воздуха
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <StartTask_LCD+0x8c>)
 8002462:	cb18      	ldmia	r3, {r3, r4}
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	21b4      	movs	r1, #180	; 0xb4
 800246a:	200a      	movs	r0, #10
 800246c:	f7ff fd8c 	bl	8001f88 <Display_Temperature>

	Display_Encoder(50, 230);															// Значение энкодера
 8002470:	21e6      	movs	r1, #230	; 0xe6
 8002472:	2032      	movs	r0, #50	; 0x32
 8002474:	f7ff fdb0 	bl	8001fd8 <Display_Encoder>

	LED_GREEN_INV;
 8002478:	2110      	movs	r1, #16
 800247a:	4808      	ldr	r0, [pc, #32]	; (800249c <StartTask_LCD+0x90>)
 800247c:	f005 fe2b 	bl	80080d6 <HAL_GPIO_TogglePin>

    osDelay(200);
 8002480:	20c8      	movs	r0, #200	; 0xc8
 8002482:	f00e ff2f 	bl	80112e4 <osDelay>
	Display_Test(200,230);
 8002486:	e7c5      	b.n	8002414 <StartTask_LCD+0x8>
 8002488:	20008ba8 	.word	0x20008ba8
 800248c:	20008a0c 	.word	0x20008a0c
 8002490:	20008960 	.word	0x20008960
 8002494:	20008a18 	.word	0x20008a18
 8002498:	20008970 	.word	0x20008970
 800249c:	40020800 	.word	0x40020800

080024a0 <StartTask_ADC>:
  }
}
//======================================================================================
void StartTask_ADC(void *argument)														// Поток для сканирования АЦП (Напряжения питания и мотора, Тока питания и мотора, положения регулятора скорости)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 80024a8:	f7fe fe0e 	bl	80010c8 <ADC_ScanState>
    osDelay(50);
 80024ac:	2032      	movs	r0, #50	; 0x32
 80024ae:	f00e ff19 	bl	80112e4 <osDelay>
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 80024b2:	e7f9      	b.n	80024a8 <StartTask_ADC+0x8>

080024b4 <StartTask_ScanControls>:
  }
}
//======================================================================================
void StartTask_ScanControls(void *argument)												// Поток сканироваяни элементов управления
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim4);
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <StartTask_ScanControls+0x30>)
 80024be:	f008 fbc9 	bl	800ac54 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);											// Запустить TIM4 для анализа оборотов бака
 80024c2:	2100      	movs	r1, #0
 80024c4:	4807      	ldr	r0, [pc, #28]	; (80024e4 <StartTask_ScanControls+0x30>)
 80024c6:	f008 fd63 	bl	800af90 <HAL_TIM_IC_Start_IT>

  for(;;)
  {
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 80024ca:	f001 fadd 	bl	8003a88 <Motor_Scan_DirectionState>

	if (Encoder_Scan())																	// Просканировать энкодер и если состояние энкодера поменялось, выполниить действие
 80024ce:	f7ff fe69 	bl	80021a4 <Encoder_Scan>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <StartTask_ScanControls+0x28>
	{
		BUZZER_Beep_TickTIM();															// Сделать короткий тик баззером на каждую смену энкодера
 80024d8:	f7ff f848 	bl	800156c <BUZZER_Beep_TickTIM>
//		LED_LIGHT_SET;




    osDelay(10);
 80024dc:	200a      	movs	r0, #10
 80024de:	f00e ff01 	bl	80112e4 <osDelay>
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 80024e2:	e7f2      	b.n	80024ca <StartTask_ScanControls+0x16>
 80024e4:	20008e0c 	.word	0x20008e0c

080024e8 <StartTask_ScanTemperature>:
  }
}
//======================================================================================
void StartTask_ScanTemperature(void *argument)											// Поток сканирования температуры по 1-Wire от термодатчиков DS18B20
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  osDelay(200);
 80024f0:	20c8      	movs	r0, #200	; 0xc8
 80024f2:	f00e fef7 	bl	80112e4 <osDelay>

  for(;;)
  {
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 80024f6:	2102      	movs	r1, #2
 80024f8:	4824      	ldr	r0, [pc, #144]	; (800258c <StartTask_ScanTemperature+0xa4>)
 80024fa:	f7ff faaf 	bl	8001a5c <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_DRIVER_1W_GPIO_Port,	TEMP_DRIVER_1W_Pin);		// Запрос на старт замера температуры драйвера мотора
 80024fe:	2104      	movs	r1, #4
 8002500:	4822      	ldr	r0, [pc, #136]	; (800258c <StartTask_ScanTemperature+0xa4>)
 8002502:	f7ff faab 	bl	8001a5c <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Запрос на старт замера температуры воздуха
 8002506:	2101      	movs	r1, #1
 8002508:	4820      	ldr	r0, [pc, #128]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800250a:	f7ff faa7 	bl	8001a5c <DS18B20_Measure_Async_Start>
	osDelay(1000);																		// задержка для 12-битного преобразования
 800250e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002512:	f00e fee7 	bl	80112e4 <osDelay>
	Temperature_Motor_RAW	= DS18B20_Measure_Async_FinishN(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры мотора
 8002516:	2102      	movs	r1, #2
 8002518:	481c      	ldr	r0, [pc, #112]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800251a:	f7ff fadd 	bl	8001ad8 <DS18B20_Measure_Async_FinishN>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <StartTask_ScanTemperature+0xa8>)
 8002524:	801a      	strh	r2, [r3, #0]
	Temperature_Driver_RAW	= DS18B20_Measure_Async_FinishN(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin);		// Возврат ответа от финальной фазы замера для температуры драйвера мотора
 8002526:	2104      	movs	r1, #4
 8002528:	4818      	ldr	r0, [pc, #96]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800252a:	f7ff fad5 	bl	8001ad8 <DS18B20_Measure_Async_FinishN>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <StartTask_ScanTemperature+0xac>)
 8002534:	801a      	strh	r2, [r3, #0]
	Temperature_Air_RAW		= DS18B20_Measure_Async_FinishN(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры воздуха
 8002536:	2101      	movs	r1, #1
 8002538:	4814      	ldr	r0, [pc, #80]	; (800258c <StartTask_ScanTemperature+0xa4>)
 800253a:	f7ff facd 	bl	8001ad8 <DS18B20_Measure_Async_FinishN>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <StartTask_ScanTemperature+0xb0>)
 8002544:	801a      	strh	r2, [r3, #0]

	Temperature_Motor		= DS18B20_Temperature_Double(Temperature_Motor_RAW);		// Пересчет в double
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <StartTask_ScanTemperature+0xa8>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fb1a 	bl	8001b84 <DS18B20_Temperature_Double>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	4a11      	ldr	r2, [pc, #68]	; (800259c <StartTask_ScanTemperature+0xb4>)
 8002556:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Driver		= DS18B20_Temperature_Double(Temperature_Driver_RAW);		// Пересчет в double
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <StartTask_ScanTemperature+0xac>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fb10 	bl	8001b84 <DS18B20_Temperature_Double>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <StartTask_ScanTemperature+0xb8>)
 800256a:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Air			= DS18B20_Temperature_Double(Temperature_Air_RAW);			// Пересчет в double
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <StartTask_ScanTemperature+0xb0>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fb06 	bl	8001b84 <DS18B20_Temperature_Double>
 8002578:	4603      	mov	r3, r0
 800257a:	460c      	mov	r4, r1
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <StartTask_ScanTemperature+0xbc>)
 800257e:	e9c2 3400 	strd	r3, r4, [r2]

    osDelay(15000);																		// Интервал сканирования температур - 10 сек
 8002582:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002586:	f00e fead 	bl	80112e4 <osDelay>
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 800258a:	e7b4      	b.n	80024f6 <StartTask_ScanTemperature+0xe>
 800258c:	40020400 	.word	0x40020400
 8002590:	20008b34 	.word	0x20008b34
 8002594:	20008a0e 	.word	0x20008a0e
 8002598:	20008b2c 	.word	0x20008b2c
 800259c:	20008960 	.word	0x20008960
 80025a0:	20008a18 	.word	0x20008a18
 80025a4:	20008970 	.word	0x20008970

080025a8 <StartTask_SetState>:
  }
}
//======================================================================================
void StartTask_SetState(void *argument)													// Поток установки сотояний системы
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <StartTask_SetState+0x98>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fab9 	bl	8003b2c <Motor_Set_DirectionState>

	//DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)2.55));				// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V]
	DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)1.58));					// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V] (1.58 - коэф чтобы получить на выходе 0..5V после ЦАП+ОУ)
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <StartTask_SetState+0x9c>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff32 	bl	8000428 <__aeabi_ui2d>
 80025c4:	a31a      	add	r3, pc, #104	; (adr r3, 8002630 <StartTask_SetState+0x88>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fd ffa7 	bl	800051c <__aeabi_dmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	4618      	mov	r0, r3
 80025d4:	4621      	mov	r1, r4
 80025d6:	f7fe fa79 	bl	8000acc <__aeabi_d2uiz>
 80025da:	4603      	mov	r3, r0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f84c 	bl	800167c <DAC_SetValue>

	MotorSpeed = ((MotorSpeed_Period > 0) ? ((uint16_t)((double)60000/(double)MotorSpeed_Period)) : (0) );			// Пересчет периода оборотов мотора от датчика Холла в скорость (стелано на таймере-4)
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <StartTask_SetState+0xa0>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <StartTask_SetState+0x72>
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <StartTask_SetState+0xa0>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd ff19 	bl	8000428 <__aeabi_ui2d>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	a10e      	add	r1, pc, #56	; (adr r1, 8002638 <StartTask_SetState+0x90>)
 8002600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002604:	f7fe f8b4 	bl	8000770 <__aeabi_ddiv>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4618      	mov	r0, r3
 800260e:	4621      	mov	r1, r4
 8002610:	f7fe fa5c 	bl	8000acc <__aeabi_d2uiz>
 8002614:	4603      	mov	r3, r0
 8002616:	b29b      	uxth	r3, r3
 8002618:	e000      	b.n	800261c <StartTask_SetState+0x74>
 800261a:	2300      	movs	r3, #0
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <StartTask_SetState+0xa4>)
 800261e:	8013      	strh	r3, [r2, #0]


	//FAN_Set_Speed(Speed_value_percent);													// Установить скорость мотора вентилятора охлаждения (ШИМ)
	FAN_Set_Speed(0);																	// Установить скорость мотора вентилятора охлаждения (ШИМ)
 8002620:	2000      	movs	r0, #0
 8002622:	f001 facd 	bl	8003bc0 <FAN_Set_Speed>



    osDelay(20);
 8002626:	2014      	movs	r0, #20
 8002628:	f00e fe5c 	bl	80112e4 <osDelay>
	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 800262c:	e7c0      	b.n	80025b0 <StartTask_SetState+0x8>
 800262e:	bf00      	nop
 8002630:	147ae148 	.word	0x147ae148
 8002634:	3ff947ae 	.word	0x3ff947ae
 8002638:	00000000 	.word	0x00000000
 800263c:	40ed4c00 	.word	0x40ed4c00
 8002640:	20008ba8 	.word	0x20008ba8
 8002644:	20008968 	.word	0x20008968
 8002648:	20008a20 	.word	0x20008a20
 800264c:	20008a0c 	.word	0x20008a0c

08002650 <StartTask_MircoRL>:
  }
}
//======================================================================================
void StartTask_MircoRL(void *argument)													// командный интерпретатор
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	microrl_terminalInit();																// нициализация командного интерпретатора
 8002658:	f003 fb08 	bl	8005c6c <microrl_terminalInit>

	HAL_UART_Receive_IT(&huart5, (uint8_t *)MainCPU_Rx_Buffer, 1);						// делаем начальный запрос на асинхронный прием обного байта - стартуем прием данных от UART на прерываниях
 800265c:	2201      	movs	r2, #1
 800265e:	4903      	ldr	r1, [pc, #12]	; (800266c <StartTask_MircoRL+0x1c>)
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <StartTask_MircoRL+0x20>)
 8002662:	f009 fdff 	bl	800c264 <HAL_UART_Receive_IT>

	while(1)
	{
		microrl_terminalProcess();														// Процесс просыпается от семафора MicroRL_xRxSemaphore
 8002666:	f003 fb35 	bl	8005cd4 <microrl_terminalProcess>
 800266a:	e7fc      	b.n	8002666 <StartTask_MircoRL+0x16>
 800266c:	20008b30 	.word	0x20008b30
 8002670:	20008fcc 	.word	0x20008fcc

08002674 <HAL_UART_RxCpltCallback>:
	}
}
//=======================================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
//			if( GPS_Rx_QueueHandle != 0 )
//				xQueueSendFromISR( GPS_Rx_QueueHandle,  ( void * )&MP_GPS_USART_RxBuffer[0], &xHigherPriorityTaskWoken  ); // записываем в очередь принятый байт от GPS
//			HAL_UART_Receive_IT(&huart3, (uint8_t *)MP_GPS_USART_RxBuffer, 1);			// делаем запрос на асинхронный прием обного байта
//		}
//
		if ( huart->Instance == UART5 ) 												// Если это колбэк по прерыванию от USART-5  - запрос в терминал командной строки от MainCPU
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_UART_RxCpltCallback+0x78>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d12d      	bne.n	80026e2 <HAL_UART_RxCpltCallback+0x6e>
		{
//			USART2->DR = UART5->DR;
			//USART2->DR = MainCPU_Rx_Buffer[0];										// делаем эхо вывод в виртуальный COM-порта на PC (самый быстрый вариант)
			//UART4->DR = MainCPU_Rx_Buffer[0];											// делаем эхо вывод в свой же порт

			MircoRL_sRxRingBuf.data[MircoRL_sRxRingBuf.wrIdx++] = MainCPU_Rx_Buffer[0];	// складываем полученный байт в кольцевой буфер приема
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 8002688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	4918      	ldr	r1, [pc, #96]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 8002690:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8002694:	4a17      	ldr	r2, [pc, #92]	; (80026f4 <HAL_UART_RxCpltCallback+0x80>)
 8002696:	7811      	ldrb	r1, [r2, #0]
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 800269a:	54d1      	strb	r1, [r2, r3]
			if (MircoRL_sRxRingBuf.wrIdx >= MICRORL_uartSIZE_OF_RING_BUFFER)			// переход через 0
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 800269e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a2:	2b7f      	cmp	r3, #127	; 0x7f
 80026a4:	dd03      	ble.n	80026ae <HAL_UART_RxCpltCallback+0x3a>
			{
				MircoRL_sRxRingBuf.wrIdx = 0;
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_UART_RxCpltCallback+0x7c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			}
			portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
			xSemaphoreGiveFromISR(MicroRL_xRxSemaphore, &xHigherPriorityTaskWoken);		// Семафорим в StartTask_MircoRL что прилетел байт из UART и что-то с ним нужно сделать
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_UART_RxCpltCallback+0x84>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f00f fc9d 	bl	8011ffc <xQueueGiveFromISR>
			if( xHigherPriorityTaskWoken != pdFALSE )
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_UART_RxCpltCallback+0x64>
			{
				portYIELD();
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_UART_RxCpltCallback+0x88>)
 80026ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	f3bf 8f6f 	isb	sy
			}

			HAL_UART_Receive_IT(&huart5, (uint8_t *)MainCPU_Rx_Buffer, 1);				// делаем опять запрос на асинхронный прием обного байта
 80026d8:	2201      	movs	r2, #1
 80026da:	4906      	ldr	r1, [pc, #24]	; (80026f4 <HAL_UART_RxCpltCallback+0x80>)
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <HAL_UART_RxCpltCallback+0x8c>)
 80026de:	f009 fdc1 	bl	800c264 <HAL_UART_Receive_IT>
		}

}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40005000 	.word	0x40005000
 80026f0:	2000897c 	.word	0x2000897c
 80026f4:	20008b30 	.word	0x20008b30
 80026f8:	20008958 	.word	0x20008958
 80026fc:	e000ed04 	.word	0xe000ed04
 8002700:	20008fcc 	.word	0x20008fcc

08002704 <MX_GPIO_Init>:
//         EXTI
//     PA8 ------> RCC_MCO

//======================================================================================
void MX_GPIO_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	; 0x30
 8002708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270a:	f107 031c 	add.w	r3, r7, #28
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b52      	ldr	r3, [pc, #328]	; (8002864 <MX_GPIO_Init+0x160>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a51      	ldr	r2, [pc, #324]	; (8002864 <MX_GPIO_Init+0x160>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	61d3      	str	r3, [r2, #28]
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <MX_GPIO_Init+0x160>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	4b4c      	ldr	r3, [pc, #304]	; (8002864 <MX_GPIO_Init+0x160>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a4b      	ldr	r2, [pc, #300]	; (8002864 <MX_GPIO_Init+0x160>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	61d3      	str	r3, [r2, #28]
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <MX_GPIO_Init+0x160>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <MX_GPIO_Init+0x160>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4a45      	ldr	r2, [pc, #276]	; (8002864 <MX_GPIO_Init+0x160>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	61d3      	str	r3, [r2, #28]
 8002756:	4b43      	ldr	r3, [pc, #268]	; (8002864 <MX_GPIO_Init+0x160>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002762:	4b40      	ldr	r3, [pc, #256]	; (8002864 <MX_GPIO_Init+0x160>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <MX_GPIO_Init+0x160>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <MX_GPIO_Init+0x160>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800277a:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <MX_GPIO_Init+0x160>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	4a39      	ldr	r2, [pc, #228]	; (8002864 <MX_GPIO_Init+0x160>)
 8002780:	f043 0310 	orr.w	r3, r3, #16
 8002784:	61d3      	str	r3, [r2, #28]
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <MX_GPIO_Init+0x160>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <MX_GPIO_Init+0x160>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a33      	ldr	r2, [pc, #204]	; (8002864 <MX_GPIO_Init+0x160>)
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <MX_GPIO_Init+0x160>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	21e0      	movs	r1, #224	; 0xe0
 80027ae:	482e      	ldr	r0, [pc, #184]	; (8002868 <MX_GPIO_Init+0x164>)
 80027b0:	f005 fc79 	bl	80080a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 80027b4:	2200      	movs	r2, #0
 80027b6:	211f      	movs	r1, #31
 80027b8:	482c      	ldr	r0, [pc, #176]	; (800286c <MX_GPIO_Init+0x168>)
 80027ba:	f005 fc74 	bl	80080a6 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SD_CS_Pin, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c4:	482a      	ldr	r0, [pc, #168]	; (8002870 <MX_GPIO_Init+0x16c>)
 80027c6:	f005 fc6e 	bl	80080a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin;
 80027ca:	23e0      	movs	r3, #224	; 0xe0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	4821      	ldr	r0, [pc, #132]	; (8002868 <MX_GPIO_Init+0x164>)
 80027e2:	f005 fabb 	bl	8007d5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 80027e6:	231f      	movs	r3, #31
 80027e8:	61fb      	str	r3, [r7, #28]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	4619      	mov	r1, r3
 80027fc:	481b      	ldr	r0, [pc, #108]	; (800286c <MX_GPIO_Init+0x168>)
 80027fe:	f005 faad 	bl	8007d5c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SPI1_SD_CS_Pin;
 8002802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4815      	ldr	r0, [pc, #84]	; (8002870 <MX_GPIO_Init+0x16c>)
 800281c:	f005 fa9e 	bl	8007d5c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = INT_IMU_Pin;
 8002820:	2301      	movs	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MX_GPIO_Init+0x170>)
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	4811      	ldr	r0, [pc, #68]	; (8002878 <MX_GPIO_Init+0x174>)
 8002834:	f005 fa92 	bl	8007d5c <HAL_GPIO_Init>

  // Выход тактовой частоты MCO
  GPIO_InitStruct.Pin = MCO_Pin;
 8002838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	4809      	ldr	r0, [pc, #36]	; (800287c <MX_GPIO_Init+0x178>)
 8002856:	f005 fa81 	bl	8007d5c <HAL_GPIO_Init>

}
 800285a:	bf00      	nop
 800285c:	3730      	adds	r7, #48	; 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40021000 	.word	0x40021000
 800286c:	40020800 	.word	0x40020800
 8002870:	40020400 	.word	0x40020400
 8002874:	10110000 	.word	0x10110000
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40020000 	.word	0x40020000

08002880 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

//======================================================================================
void MX_I2C1_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <MX_I2C1_Init+0x54>)
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <MX_I2C1_Init+0x58>)
 8002888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <MX_I2C1_Init+0x54>)
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <MX_I2C1_Init+0x5c>)
 800288e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_I2C1_Init+0x54>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <MX_I2C1_Init+0x54>)
 8002898:	2200      	movs	r2, #0
 800289a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <MX_I2C1_Init+0x54>)
 800289e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_I2C1_Init+0x54>)
 80028be:	f005 fc23 	bl	8008108 <HAL_I2C_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <MX_I2C1_Init+0x4e>
  {
    Error_Handler(7);
 80028c8:	2007      	movs	r0, #7
 80028ca:	f001 f8a5 	bl	8003a18 <Error_Handler>
  }

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20008cc4 	.word	0x20008cc4
 80028d8:	40005400 	.word	0x40005400
 80028dc:	00061a80 	.word	0x00061a80

080028e0 <HAL_I2C_MspInit>:
//======================================================================================
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_I2C_MspInit+0x7c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d128      	bne.n	8002954 <HAL_I2C_MspInit+0x74>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800291a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002920:	2312      	movs	r3, #18
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002924:	2301      	movs	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800292c:	2304      	movs	r3, #4
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	480b      	ldr	r0, [pc, #44]	; (8002964 <HAL_I2C_MspInit+0x84>)
 8002938:	f005 fa10 	bl	8007d5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_I2C_MspInit+0x80>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_I2C_MspInit+0x80>)
 8002942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002946:	6253      	str	r3, [r2, #36]	; 0x24
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_I2C_MspInit+0x80>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
  }
}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40005400 	.word	0x40005400
 8002960:	40023800 	.word	0x40023800
 8002964:	40020400 	.word	0x40020400

08002968 <Keys_Init>:
 */
#include "keys.h"

//=======================================================================================
void  Keys_Init(void)																	// Настройка GPIO портов для кнопок
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08c      	sub	sp, #48	; 0x30
 800296c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <Keys_Init+0x134>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a4a      	ldr	r2, [pc, #296]	; (8002a9c <Keys_Init+0x134>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	61d3      	str	r3, [r2, #28]
 800297a:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <Keys_Init+0x134>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b45      	ldr	r3, [pc, #276]	; (8002a9c <Keys_Init+0x134>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a44      	ldr	r2, [pc, #272]	; (8002a9c <Keys_Init+0x134>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	61d3      	str	r3, [r2, #28]
 8002992:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <Keys_Init+0x134>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <Keys_Init+0x134>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a3e      	ldr	r2, [pc, #248]	; (8002a9c <Keys_Init+0x134>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	61d3      	str	r3, [r2, #28]
 80029aa:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <Keys_Init+0x134>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <Keys_Init+0x134>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <Keys_Init+0x134>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	61d3      	str	r3, [r2, #28]
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <Keys_Init+0x134>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80029ce:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <Keys_Init+0x134>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a32      	ldr	r2, [pc, #200]	; (8002a9c <Keys_Init+0x134>)
 80029d4:	f043 0310 	orr.w	r3, r3, #16
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <Keys_Init+0x134>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <Keys_Init+0x134>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <Keys_Init+0x134>)
 80029ec:	f043 0320 	orr.w	r3, r3, #32
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <Keys_Init+0x134>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;


	// BTN_START
	GPIO_InitStruct.Pin 		= BTN_START_Pin;
 80029fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a04:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <Keys_Init+0x138>)
 8002a06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 031c 	add.w	r3, r7, #28
 8002a14:	4619      	mov	r1, r3
 8002a16:	4823      	ldr	r0, [pc, #140]	; (8002aa4 <Keys_Init+0x13c>)
 8002a18:	f005 f9a0 	bl	8007d5c <HAL_GPIO_Init>


	// BTN_STOP
	GPIO_InitStruct.Pin 		= BTN_STOP_Pin;
 8002a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <Keys_Init+0x138>)
 8002a24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_STOP_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	4619      	mov	r1, r3
 8002a34:	481b      	ldr	r0, [pc, #108]	; (8002aa4 <Keys_Init+0x13c>)
 8002a36:	f005 f991 	bl	8007d5c <HAL_GPIO_Init>

	// BTN_MOTOR
	GPIO_InitStruct.Pin 		= BTN_MOTOR_Pin;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <Keys_Init+0x138>)
 8002a42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <Keys_Init+0x13c>)
 8002a54:	f005 f982 	bl	8007d5c <HAL_GPIO_Init>

	// Вход переключателя МОТОР ВПЕРЕД
	GPIO_InitStruct.Pin 		= BTN_FWD_Pin;
 8002a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <Keys_Init+0x138>)
 8002a60:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_FWD_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <Keys_Init+0x13c>)
 8002a72:	f005 f973 	bl	8007d5c <HAL_GPIO_Init>

	// Вход переключателя МОТОР НАЗАД
	GPIO_InitStruct.Pin 		= BTN_BWD_Pin;
 8002a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <Keys_Init+0x138>)
 8002a7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002a84:	2301      	movs	r3, #1
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_BWD_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <Keys_Init+0x13c>)
 8002a90:	f005 f964 	bl	8007d5c <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 8002a94:	bf00      	nop
 8002a96:	3730      	adds	r7, #48	; 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	10210000 	.word	0x10210000
 8002aa4:	40020c00 	.word	0x40020c00

08002aa8 <MX_SPI1_Init>:

DMA_HandleTypeDef hdma_spi2_tx;

//======================================================================================
void MX_SPI1_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002aae:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <MX_SPI1_Init+0x6c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002af4:	220a      	movs	r2, #10
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_SPI1_Init+0x68>)
 8002afa:	f007 fd73 	bl	800a5e4 <HAL_SPI_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <MX_SPI1_Init+0x62>
  {
    Error_Handler(6);
 8002b04:	2006      	movs	r0, #6
 8002b06:	f000 ff87 	bl	8003a18 <Error_Handler>
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20008d70 	.word	0x20008d70
 8002b14:	40013000 	.word	0x40013000

08002b18 <MX_SPI2_Init>:
//======================================================================================
void MX_SPI2_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b1e:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <MX_SPI2_Init+0x6c>)
 8002b20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b64:	220a      	movs	r2, #10
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b68:	4805      	ldr	r0, [pc, #20]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b6a:	f007 fd3b 	bl	800a5e4 <HAL_SPI_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <MX_SPI2_Init+0x62>
  {
    Error_Handler(6);
 8002b74:	2006      	movs	r0, #6
 8002b76:	f000 ff4f 	bl	8003a18 <Error_Handler>
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20008d18 	.word	0x20008d18
 8002b84:	40003800 	.word	0x40003800

08002b88 <HAL_SPI_MspInit>:
//======================================================================================
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	; 0x30
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 031c 	add.w	r3, r7, #28
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a42      	ldr	r2, [pc, #264]	; (8002cb0 <HAL_SPI_MspInit+0x128>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d128      	bne.n	8002bfc <HAL_SPI_MspInit+0x74>
  {
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002baa:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	61d3      	str	r3, [r2, #28]
 8002bce:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_SCK_Pin|SPI1_SD_MISO_Pin|SPI1_SD_MOSI_Pin;
 8002bda:	23e0      	movs	r3, #224	; 0xe0
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	2303      	movs	r3, #3
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bea:	2305      	movs	r3, #5
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4830      	ldr	r0, [pc, #192]	; (8002cb8 <HAL_SPI_MspInit+0x130>)
 8002bf6:	f005 f8b1 	bl	8007d5c <HAL_GPIO_Init>
      Error_Handler(6);
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
  }
}
 8002bfa:	e055      	b.n	8002ca8 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_SPI_MspInit+0x134>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d150      	bne.n	8002ca8 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6253      	str	r3, [r2, #36]	; 0x24
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_SPI_MspInit+0x12c>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8002c36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c48:	2305      	movs	r3, #5
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	481b      	ldr	r0, [pc, #108]	; (8002cc0 <HAL_SPI_MspInit+0x138>)
 8002c54:	f005 f882 	bl	8007d5c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c5a:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <HAL_SPI_MspInit+0x140>)
 8002c5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c60:	2210      	movs	r2, #16
 8002c62:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6a:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002c8a:	480e      	ldr	r0, [pc, #56]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002c8c:	f004 ff02 	bl	8007a94 <HAL_DMA_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_MspInit+0x114>
      Error_Handler(6);
 8002c96:	2006      	movs	r0, #6
 8002c98:	f000 febe 	bl	8003a18 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002ca0:	649a      	str	r2, [r3, #72]	; 0x48
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_SPI_MspInit+0x13c>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002ca8:	bf00      	nop
 8002caa:	3730      	adds	r7, #48	; 0x30
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013000 	.word	0x40013000
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40003800 	.word	0x40003800
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	20008dc8 	.word	0x20008dc8
 8002cc8:	40026058 	.word	0x40026058

08002ccc <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

//======================================================================================
void MX_TIM3_Init(void)																	// обслуживание энкодера для меню
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f012 f8fa 	bl	8014ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]

  // Такая настройка дает 1 шаг счетчика энкодера на 1 тик энкодера в механике (дефолтная дает 4 шага на 1 механический тик)
  htim3.Instance 				= TIM3;
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cea:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <MX_TIM3_Init+0xa0>)
 8002cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler 			= 1;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode		= TIM_COUNTERMODE_UP;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period 			= ENCODER_VAL_PERIOD;
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002cfc:	2214      	movs	r2, #20
 8002cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision 		= TIM_CLOCKDIVISION_DIV1;
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode 			= TIM_ENCODERMODE_TI2;	// для grayhill энкодера - счет по обоим фронтам, 32 тика на оборот
 8002d06:	2302      	movs	r3, #2
 8002d08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity 			= TIM_ICPOLARITY_FALLING;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection 			= TIM_ICSELECTION_DIRECTTI;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler 			= TIM_ICPSC_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter 			= 16;
 8002d16:	2310      	movs	r3, #16
 8002d18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity 			= TIM_ICPOLARITY_FALLING;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection 			= TIM_ICSELECTION_DIRECTTI;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler 			= TIM_ICPSC_DIV1;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter 			= 16;
 8002d26:	2310      	movs	r3, #16
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c


  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002d32:	f008 f9f7 	bl	800b124 <HAL_TIM_Encoder_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <MX_TIM3_Init+0x76>
  {
    Error_Handler(4);
 8002d3c:	2004      	movs	r0, #4
 8002d3e:	f000 fe6b 	bl	8003a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4806      	ldr	r0, [pc, #24]	; (8002d68 <MX_TIM3_Init+0x9c>)
 8002d50:	f009 f944 	bl	800bfdc <HAL_TIMEx_MasterConfigSynchronization>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <MX_TIM3_Init+0x94>
  {
    Error_Handler(4);
 8002d5a:	2004      	movs	r0, #4
 8002d5c:	f000 fe5c 	bl	8003a18 <Error_Handler>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3730      	adds	r7, #48	; 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20008e8c 	.word	0x20008e8c
 8002d6c:	40000400 	.word	0x40000400

08002d70 <MX_TIM4_Init>:
//======================================================================================
void MX_TIM4_Init(void)																	// Для рассчета периода сигнала от магнитного датчика оборотов бака (скорость оборотов)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]

	  htim4.Instance = TIM4;
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <MX_TIM4_Init+0xec>)
 8002d9e:	601a      	str	r2, [r3, #0]
	  htim4.Init.Prescaler = 32000 - 1;													// точность счета по 100мкс
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002da2:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002da6:	605a      	str	r2, [r3, #4]
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
	  htim4.Init.Period = 3000; 														// переполнение за 3 сек (до 20 оборотов в минуту считаем нулевой скоростью)
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002db0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002db4:	60da      	str	r2, [r3, #12]
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbc:	611a      	str	r2, [r3, #16]
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dc4:	4824      	ldr	r0, [pc, #144]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002dc6:	f007 fe9d 	bl	800ab04 <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <MX_TIM4_Init+0x66>
	  {
	    Error_Handler(4);
 8002dd0:	2004      	movs	r0, #4
 8002dd2:	f000 fe21 	bl	8003a18 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dda:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ddc:	f107 0318 	add.w	r3, r7, #24
 8002de0:	4619      	mov	r1, r3
 8002de2:	481d      	ldr	r0, [pc, #116]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002de4:	f008 fcf4 	bl	800b7d0 <HAL_TIM_ConfigClockSource>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <MX_TIM4_Init+0x84>
	  {
	    Error_Handler(4);
 8002dee:	2004      	movs	r0, #4
 8002df0:	f000 fe12 	bl	8003a18 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002df4:	4818      	ldr	r0, [pc, #96]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002df6:	f008 f883 	bl	800af00 <HAL_TIM_IC_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <MX_TIM4_Init+0x96>
	  {
	    Error_Handler(4);
 8002e00:	2004      	movs	r0, #4
 8002e02:	f000 fe09 	bl	8003a18 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e0e:	f107 0310 	add.w	r3, r7, #16
 8002e12:	4619      	mov	r1, r3
 8002e14:	4810      	ldr	r0, [pc, #64]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002e16:	f009 f8e1 	bl	800bfdc <HAL_TIMEx_MasterConfigSynchronization>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <MX_TIM4_Init+0xb6>
	  {
	    Error_Handler(4);
 8002e20:	2004      	movs	r0, #4
 8002e22:	f000 fdf9 	bl	8003a18 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e26:	2300      	movs	r3, #0
 8002e28:	603b      	str	r3, [r7, #0]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICFilter = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e36:	463b      	mov	r3, r7
 8002e38:	2200      	movs	r2, #0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4806      	ldr	r0, [pc, #24]	; (8002e58 <MX_TIM4_Init+0xe8>)
 8002e3e:	f008 fb74 	bl	800b52a <HAL_TIM_IC_ConfigChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <MX_TIM4_Init+0xde>
	  {
	    Error_Handler(4);
 8002e48:	2004      	movs	r0, #4
 8002e4a:	f000 fde5 	bl	8003a18 <Error_Handler>
//  {
//    Error_Handler(4);
//  }
//  HAL_TIM_MspPostInit(&htim4);

}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20008e0c 	.word	0x20008e0c
 8002e5c:	40000800 	.word	0x40000800

08002e60 <MX_TIM6_Init>:
//======================================================================================
void MX_TIM6_Init(void)																	// Для генерации звука на динамике (чтобы не хрипел от прерываний и RtOS)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler(4);
//  }
//
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <MX_TIM9_Init>:
//======================================================================================
void MX_TIM9_Init(void)																	// источник микросекундных тиков (для отладки FreeRTOS)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e80:	463b      	mov	r3, r7
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]

  htim9.Instance = TIM9;
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e8a:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <MX_TIM9_Init+0x9c>)
 8002e8c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32;
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e90:	2220      	movs	r2, #32
 8002e92:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002eae:	4815      	ldr	r0, [pc, #84]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002eb0:	f007 fe28 	bl	800ab04 <HAL_TIM_Base_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <MX_TIM9_Init+0x54>
  {
    Error_Handler(4);
 8002eba:	2004      	movs	r0, #4
 8002ebc:	f000 fdac 	bl	8003a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480d      	ldr	r0, [pc, #52]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002ece:	f008 fc7f 	bl	800b7d0 <HAL_TIM_ConfigClockSource>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <MX_TIM9_Init+0x72>
  {
    Error_Handler(4);
 8002ed8:	2004      	movs	r0, #4
 8002eda:	f000 fd9d 	bl	8003a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4806      	ldr	r0, [pc, #24]	; (8002f04 <MX_TIM9_Init+0x98>)
 8002eec:	f009 f876 	bl	800bfdc <HAL_TIMEx_MasterConfigSynchronization>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <MX_TIM9_Init+0x90>
  {
    Error_Handler(4);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f000 fd8e 	bl	8003a18 <Error_Handler>
  }

}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20008f4c 	.word	0x20008f4c
 8002f08:	40010800 	.word	0x40010800

08002f0c <MX_TIM10_Init>:
//======================================================================================
void MX_TIM10_Init(void)																	// источник микросекундных тиков (для DelayUS() )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f20:	463b      	mov	r3, r7
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]

  htim10.Instance = TIM10;
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <MX_TIM10_Init+0x9c>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 32;
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f30:	2220      	movs	r2, #32
 8002f32:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f40:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f4e:	4815      	ldr	r0, [pc, #84]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f50:	f007 fdd8 	bl	800ab04 <HAL_TIM_Base_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <MX_TIM10_Init+0x54>
  {
    Error_Handler(4);
 8002f5a:	2004      	movs	r0, #4
 8002f5c:	f000 fd5c 	bl	8003a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f6e:	f008 fc2f 	bl	800b7d0 <HAL_TIM_ConfigClockSource>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <MX_TIM10_Init+0x72>
  {
    Error_Handler(4);
 8002f78:	2004      	movs	r0, #4
 8002f7a:	f000 fd4d 	bl	8003a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8002f86:	463b      	mov	r3, r7
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <MX_TIM10_Init+0x98>)
 8002f8c:	f009 f826 	bl	800bfdc <HAL_TIMEx_MasterConfigSynchronization>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <MX_TIM10_Init+0x90>
  {
    Error_Handler(4);
 8002f96:	2004      	movs	r0, #4
 8002f98:	f000 fd3e 	bl	8003a18 <Error_Handler>
  }

}
 8002f9c:	bf00      	nop
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20008e4c 	.word	0x20008e4c
 8002fa8:	40010c00 	.word	0x40010c00

08002fac <MX_TIM11_Init>:
//======================================================================================

void MX_TIM11_Init(void)																// ШИМ управление оборотами мотора вентилятора охлаждения контроллера двигателя
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc0:	463b      	mov	r3, r7
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]

  htim11.Instance = TIM11;
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fce:	4a28      	ldr	r2, [pc, #160]	; (8003070 <MX_TIM11_Init+0xc4>)
 8002fd0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 32000;  														// Делим с тактовой процессора 32000000/32000 = 1000Гц на вход счетчика (1мс на 1 тик)
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fd4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002fd8:	605a      	str	r2, [r3, #4]
  htim11.Init.Period = 100;																// 100 тиков полный цикл = 100мс = 10Гц период ШИМ. В TIM11->CCR1 записывается сравнение 0..100 - получаем нужную скважность
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fdc:	2264      	movs	r2, #100	; 0x64
 8002fde:	60da      	str	r2, [r3, #12]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <MX_TIM11_Init+0xc0>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ff2:	481e      	ldr	r0, [pc, #120]	; (800306c <MX_TIM11_Init+0xc0>)
 8002ff4:	f007 fd86 	bl	800ab04 <HAL_TIM_Base_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <MX_TIM11_Init+0x58>
  {
    Error_Handler(4);
 8002ffe:	2004      	movs	r0, #4
 8003000:	f000 fd0a 	bl	8003a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	4619      	mov	r1, r3
 8003010:	4816      	ldr	r0, [pc, #88]	; (800306c <MX_TIM11_Init+0xc0>)
 8003012:	f008 fbdd 	bl	800b7d0 <HAL_TIM_ConfigClockSource>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <MX_TIM11_Init+0x76>
  {
    Error_Handler(4);
 800301c:	2004      	movs	r0, #4
 800301e:	f000 fcfb 	bl	8003a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003022:	4812      	ldr	r0, [pc, #72]	; (800306c <MX_TIM11_Init+0xc0>)
 8003024:	f007 fe8e 	bl	800ad44 <HAL_TIM_PWM_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <MX_TIM11_Init+0x88>
  {
    Error_Handler(4);
 800302e:	2004      	movs	r0, #4
 8003030:	f000 fcf2 	bl	8003a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003034:	2360      	movs	r3, #96	; 0x60
 8003036:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003044:	463b      	mov	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	4619      	mov	r1, r3
 800304a:	4808      	ldr	r0, [pc, #32]	; (800306c <MX_TIM11_Init+0xc0>)
 800304c:	f008 fb02 	bl	800b654 <HAL_TIM_PWM_ConfigChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <MX_TIM11_Init+0xb0>
  {
    Error_Handler(4);
 8003056:	2004      	movs	r0, #4
 8003058:	f000 fcde 	bl	8003a18 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800305c:	4803      	ldr	r0, [pc, #12]	; (800306c <MX_TIM11_Init+0xc0>)
 800305e:	f000 f8d1 	bl	8003204 <HAL_TIM_MspPostInit>

}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20008ecc 	.word	0x20008ecc
 8003070:	40011000 	.word	0x40011000

08003074 <HAL_TIM_Encoder_MspInit>:
//======================================================================================
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

//  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_encoderHandle->Instance==TIM3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_TIM_Encoder_MspInit+0x44>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d113      	bne.n	80030ae <HAL_TIM_Encoder_MspInit+0x3a>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_TIM_Encoder_MspInit+0x48>)
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_TIM_Encoder_MspInit+0x48>)
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	6253      	str	r3, [r2, #36]	; 0x24
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_TIM_Encoder_MspInit+0x48>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
//    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	201d      	movs	r0, #29
 80030a4:	f004 fbe1 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030a8:	201d      	movs	r0, #29
 80030aa:	f004 fbfa 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  }
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_TIM_Base_MspInit>:
//======================================================================================
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <HAL_TIM_Base_MspInit+0x128>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12f      	bne.n	8003142 <HAL_TIM_Base_MspInit+0x82>
  {
	/* TIM4 clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 80030e2:	4b42      	ldr	r3, [pc, #264]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	4a41      	ldr	r2, [pc, #260]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	6253      	str	r3, [r2, #36]	; 0x24
 80030ee:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	6a3b      	ldr	r3, [r7, #32]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	69fb      	ldr	r3, [r7, #28]
	/**TIM4 GPIO Configuration
	PB6     ------> TIM4_CH1
	*/
	GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003122:	2302      	movs	r3, #2
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312a:	4619      	mov	r1, r3
 800312c:	4830      	ldr	r0, [pc, #192]	; (80031f0 <HAL_TIM_Base_MspInit+0x130>)
 800312e:	f004 fe15 	bl	8007d5c <HAL_GPIO_Init>

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	201e      	movs	r0, #30
 8003138:	f004 fb97 	bl	800786a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800313c:	201e      	movs	r0, #30
 800313e:	f004 fbb0 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  }
  if(tim_baseHandle->Instance==TIM6)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <HAL_TIM_Base_MspInit+0x134>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d114      	bne.n	8003176 <HAL_TIM_Base_MspInit+0xb6>
  {
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003152:	f043 0310 	orr.w	r3, r3, #16
 8003156:	6253      	str	r3, [r2, #36]	; 0x24
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	69bb      	ldr	r3, [r7, #24]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	202b      	movs	r0, #43	; 0x2b
 800316a:	f004 fb7e 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800316e:	202b      	movs	r0, #43	; 0x2b
 8003170:	f004 fb97 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM11)
  {
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
  }
}
 8003174:	e034      	b.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM9)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_TIM_Base_MspInit+0x138>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10c      	bne.n	800319a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6213      	str	r3, [r2, #32]
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	697b      	ldr	r3, [r7, #20]
}
 8003198:	e022      	b.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM10)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a17      	ldr	r2, [pc, #92]	; (80031fc <HAL_TIM_Base_MspInit+0x13c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10c      	bne.n	80031be <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4a10      	ldr	r2, [pc, #64]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031aa:	f043 0308 	orr.w	r3, r3, #8
 80031ae:	6213      	str	r3, [r2, #32]
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	693b      	ldr	r3, [r7, #16]
}
 80031bc:	e010      	b.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM11)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_TIM_Base_MspInit+0x140>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10b      	bne.n	80031e0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031ce:	f043 0310 	orr.w	r3, r3, #16
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_TIM_Base_MspInit+0x12c>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3738      	adds	r7, #56	; 0x38
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40001000 	.word	0x40001000
 80031f8:	40010800 	.word	0x40010800
 80031fc:	40010c00 	.word	0x40010c00
 8003200:	40011000 	.word	0x40011000

08003204 <HAL_TIM_MspPostInit>:
//======================================================================================
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_TIM_MspPostInit+0xa8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d11c      	bne.n	8003260 <HAL_TIM_MspPostInit+0x5c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 800322c:	f043 0302 	orr.w	r3, r3, #2
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 800323e:	2340      	movs	r3, #64	; 0x40
 8003240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800324e:	2302      	movs	r3, #2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	4816      	ldr	r0, [pc, #88]	; (80032b4 <HAL_TIM_MspPostInit+0xb0>)
 800325a:	f004 fd7f 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
  }

}
 800325e:	e020      	b.n	80032a2 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM11)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_TIM_MspPostInit+0xb4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d11b      	bne.n	80032a2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003270:	f043 0310 	orr.w	r3, r3, #16
 8003274:	61d3      	str	r3, [r2, #28]
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_TIM_MspPostInit+0xac>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_COOLING_Pin;
 8003282:	2302      	movs	r3, #2
 8003284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003292:	2303      	movs	r3, #3
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	4807      	ldr	r0, [pc, #28]	; (80032bc <HAL_TIM_MspPostInit+0xb8>)
 800329e:	f004 fd5d 	bl	8007d5c <HAL_GPIO_Init>
}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40021000 	.word	0x40021000

080032c0 <Delay_us>:
    __HAL_RCC_TIM11_CLK_DISABLE();
  }
}
//======================================================================================
void Delay_us(uint16_t us)																// Микросекундные задержки 0 .. 65535 мкс
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
	// Таймер TIM10 настроен на тики равные 1 мкс
    __HAL_TIM_SET_COUNTER(&htim10, 0);													// обнуляем счётчик
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <Delay_us+0x34>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim10);
 80032d2:	4808      	ldr	r0, [pc, #32]	; (80032f4 <Delay_us+0x34>)
 80032d4:	f007 fc56 	bl	800ab84 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim10) <= us)								// ждем пока не натикает до
 80032d8:	bf00      	nop
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <Delay_us+0x34>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d9f9      	bls.n	80032da <Delay_us+0x1a>
    {
    }
    HAL_TIM_Base_Stop(&htim10);
 80032e6:	4803      	ldr	r0, [pc, #12]	; (80032f4 <Delay_us+0x34>)
 80032e8:	f007 fc96 	bl	800ac18 <HAL_TIM_Base_Stop>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20008e4c 	.word	0x20008e4c

080032f8 <__io_putchar>:
/**
  * @brief	Переопределение функции вывода симвода для того чтобы printf из стандартной C библиотеки выводил данные в виртуальный COM-порт через USART2
  * 		Retargets the C library printf function to the USART.
  */
PUTCHAR_PROTOTYPE
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* USART implementation of fputc  */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);		// вывод для отладки в виртуальный порт ПК		[115200bps 8N1]
 8003300:	1d39      	adds	r1, r7, #4
 8003302:	2364      	movs	r3, #100	; 0x64
 8003304:	2201      	movs	r2, #1
 8003306:	4804      	ldr	r0, [pc, #16]	; (8003318 <__io_putchar+0x20>)
 8003308:	f008 ff13 	bl	800c132 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 100);		// вывод для ПК									[115200bps 8N1]
//    huart2.Instance->DR = (uint8_t *)ch;
  return ch;
 800330c:	687b      	ldr	r3, [r7, #4]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000908c 	.word	0x2000908c

0800331c <MX_USART1_UART_Init>:
//=======================================================================================

//======================================================================================
void MX_USART1_UART_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <MX_USART1_UART_Init+0x50>)
 8003324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800332c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003342:	220c      	movs	r2, #12
 8003344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 800334e:	2200      	movs	r2, #0
 8003350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003352:	4805      	ldr	r0, [pc, #20]	; (8003368 <MX_USART1_UART_Init+0x4c>)
 8003354:	f008 fea0 	bl	800c098 <HAL_UART_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler(5);
 800335e:	2005      	movs	r0, #5
 8003360:	f000 fb5a 	bl	8003a18 <Error_Handler>
  }

}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	2000900c 	.word	0x2000900c
 800336c:	40013800 	.word	0x40013800

08003370 <MX_USART2_UART_Init>:
//======================================================================================
void MX_USART2_UART_Init(void)															// Virtual COM-Port возможность вывода сообщений с помощью простого printf (переопределен putc и заглушки к stdlib)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <MX_USART2_UART_Init+0x50>)
 8003378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 800337c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 800338a:	2200      	movs	r2, #0
 800338c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 8003396:	220c      	movs	r2, #12
 8003398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_USART2_UART_Init+0x4c>)
 80033a8:	f008 fe76 	bl	800c098 <HAL_UART_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(5);
 80033b2:	2005      	movs	r0, #5
 80033b4:	f000 fb30 	bl	8003a18 <Error_Handler>
  }

}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000908c 	.word	0x2000908c
 80033c0:	40004400 	.word	0x40004400

080033c4 <MX_USART3_UART_Init>:
//======================================================================================
void MX_USART3_UART_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <MX_USART3_UART_Init+0x50>)
 80033cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033ea:	220c      	movs	r2, #12
 80033ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033fa:	4805      	ldr	r0, [pc, #20]	; (8003410 <MX_USART3_UART_Init+0x4c>)
 80033fc:	f008 fe4c 	bl	800c098 <HAL_UART_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler(5);
 8003406:	2005      	movs	r0, #5
 8003408:	f000 fb06 	bl	8003a18 <Error_Handler>
  }

}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20008f8c 	.word	0x20008f8c
 8003414:	40004800 	.word	0x40004800

08003418 <MX_UART4_Init>:
//======================================================================================
void MX_UART4_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <MX_UART4_Init+0x4c>)
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <MX_UART4_Init+0x50>)
 8003420:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <MX_UART4_Init+0x4c>)
 8003424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003428:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <MX_UART4_Init+0x4c>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <MX_UART4_Init+0x4c>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <MX_UART4_Init+0x4c>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <MX_UART4_Init+0x4c>)
 800343e:	220c      	movs	r2, #12
 8003440:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <MX_UART4_Init+0x4c>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <MX_UART4_Init+0x4c>)
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800344e:	4805      	ldr	r0, [pc, #20]	; (8003464 <MX_UART4_Init+0x4c>)
 8003450:	f008 fe22 	bl	800c098 <HAL_UART_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <MX_UART4_Init+0x48>
  {
    Error_Handler(5);
 800345a:	2005      	movs	r0, #5
 800345c:	f000 fadc 	bl	8003a18 <Error_Handler>
  }

}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000904c 	.word	0x2000904c
 8003468:	40004c00 	.word	0x40004c00

0800346c <MX_UART5_Init>:
//======================================================================================
void MX_UART5_Init(void)																// Консоль MicroRL
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <MX_UART5_Init+0x50>)
 8003474:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800347c:	605a      	str	r2, [r3, #4]
//  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <MX_UART5_Init+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003492:	220c      	movs	r2, #12
 8003494:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <MX_UART5_Init+0x4c>)
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <MX_UART5_Init+0x4c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80034a2:	4805      	ldr	r0, [pc, #20]	; (80034b8 <MX_UART5_Init+0x4c>)
 80034a4:	f008 fdf8 	bl	800c098 <HAL_UART_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <MX_UART5_Init+0x48>
  {
    Error_Handler(5);
 80034ae:	2005      	movs	r0, #5
 80034b0:	f000 fab2 	bl	8003a18 <Error_Handler>
  }

}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20008fcc 	.word	0x20008fcc
 80034bc:	40005000 	.word	0x40005000

080034c0 <HAL_UART_MspInit>:
//======================================================================================
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b092      	sub	sp, #72	; 0x48
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]

  if(uartHandle->Instance==USART1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a97      	ldr	r2, [pc, #604]	; (800373c <HAL_UART_MspInit+0x27c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d131      	bne.n	8003546 <HAL_UART_MspInit+0x86>
  {
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e2:	4b97      	ldr	r3, [pc, #604]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a96      	ldr	r2, [pc, #600]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	4b94      	ldr	r3, [pc, #592]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	633b      	str	r3, [r7, #48]	; 0x30
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	4b91      	ldr	r3, [pc, #580]	; (8003740 <HAL_UART_MspInit+0x280>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a90      	ldr	r2, [pc, #576]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	61d3      	str	r3, [r2, #28]
 8003506:	4b8e      	ldr	r3, [pc, #568]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8003512:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003520:	2303      	movs	r3, #3
 8003522:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003524:	2307      	movs	r3, #7
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800352c:	4619      	mov	r1, r3
 800352e:	4885      	ldr	r0, [pc, #532]	; (8003744 <HAL_UART_MspInit+0x284>)
 8003530:	f004 fc14 	bl	8007d5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, PRIORITY_ISR_USART1, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	2109      	movs	r1, #9
 8003538:	2025      	movs	r0, #37	; 0x25
 800353a:	f004 f996 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800353e:	2025      	movs	r0, #37	; 0x25
 8003540:	f004 f9af 	bl	80078a2 <HAL_NVIC_EnableIRQ>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, PRIORITY_ISR_USART5_MainCPU, 0);
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  }
}
 8003544:	e0f5      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7f      	ldr	r2, [pc, #508]	; (8003748 <HAL_UART_MspInit+0x288>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d130      	bne.n	80035b2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003550:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	6253      	str	r3, [r2, #36]	; 0x24
 800355c:	4b78      	ldr	r3, [pc, #480]	; (8003740 <HAL_UART_MspInit+0x280>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003568:	4b75      	ldr	r3, [pc, #468]	; (8003740 <HAL_UART_MspInit+0x280>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a74      	ldr	r2, [pc, #464]	; (8003740 <HAL_UART_MspInit+0x280>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	61d3      	str	r3, [r2, #28]
 8003574:	4b72      	ldr	r3, [pc, #456]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003580:	230c      	movs	r3, #12
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003590:	2307      	movs	r3, #7
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003598:	4619      	mov	r1, r3
 800359a:	486a      	ldr	r0, [pc, #424]	; (8003744 <HAL_UART_MspInit+0x284>)
 800359c:	f004 fbde 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, PRIORITY_ISR_USART2, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2108      	movs	r1, #8
 80035a4:	2026      	movs	r0, #38	; 0x26
 80035a6:	f004 f960 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035aa:	2026      	movs	r0, #38	; 0x26
 80035ac:	f004 f979 	bl	80078a2 <HAL_NVIC_EnableIRQ>
}
 80035b0:	e0bf      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART3)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a65      	ldr	r2, [pc, #404]	; (800374c <HAL_UART_MspInit+0x28c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d131      	bne.n	8003620 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035bc:	4b60      	ldr	r3, [pc, #384]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	4a5f      	ldr	r2, [pc, #380]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c6:	6253      	str	r3, [r2, #36]	; 0x24
 80035c8:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d4:	4b5a      	ldr	r3, [pc, #360]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a59      	ldr	r2, [pc, #356]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	61d3      	str	r3, [r2, #28]
 80035e0:	4b57      	ldr	r3, [pc, #348]	; (8003740 <HAL_UART_MspInit+0x280>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 80035ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2303      	movs	r3, #3
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035fe:	2307      	movs	r3, #7
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003606:	4619      	mov	r1, r3
 8003608:	4851      	ldr	r0, [pc, #324]	; (8003750 <HAL_UART_MspInit+0x290>)
 800360a:	f004 fba7 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, PRIORITY_ISR_USART3, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2107      	movs	r1, #7
 8003612:	2027      	movs	r0, #39	; 0x27
 8003614:	f004 f929 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003618:	2027      	movs	r0, #39	; 0x27
 800361a:	f004 f942 	bl	80078a2 <HAL_NVIC_EnableIRQ>
}
 800361e:	e088      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART4)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_UART_MspInit+0x294>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d131      	bne.n	800368e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART4_CLK_ENABLE();
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <HAL_UART_MspInit+0x280>)
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	4a44      	ldr	r2, [pc, #272]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003634:	6253      	str	r3, [r2, #36]	; 0x24
 8003636:	4b42      	ldr	r3, [pc, #264]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a3e      	ldr	r2, [pc, #248]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	61d3      	str	r3, [r2, #28]
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <HAL_UART_MspInit+0x280>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 800365a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003660:	2302      	movs	r3, #2
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003664:	2301      	movs	r3, #1
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003668:	2303      	movs	r3, #3
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800366c:	2308      	movs	r3, #8
 800366e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003674:	4619      	mov	r1, r3
 8003676:	4838      	ldr	r0, [pc, #224]	; (8003758 <HAL_UART_MspInit+0x298>)
 8003678:	f004 fb70 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, PRIORITY_ISR_USART4, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2106      	movs	r1, #6
 8003680:	2030      	movs	r0, #48	; 0x30
 8003682:	f004 f8f2 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003686:	2030      	movs	r0, #48	; 0x30
 8003688:	f004 f90b 	bl	80078a2 <HAL_NVIC_EnableIRQ>
}
 800368c:	e051      	b.n	8003732 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART5)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_UART_MspInit+0x29c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d14c      	bne.n	8003732 <HAL_UART_MspInit+0x272>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003698:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_UART_MspInit+0x280>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_UART_MspInit+0x280>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	6253      	str	r3, [r2, #36]	; 0x24
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	61d3      	str	r3, [r2, #28]
 80036bc:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036ce:	f043 0308 	orr.w	r3, r3, #8
 80036d2:	61d3      	str	r3, [r2, #28]
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_UART_MspInit+0x280>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80036e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ea:	2301      	movs	r3, #1
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80036f2:	2308      	movs	r3, #8
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80036f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036fa:	4619      	mov	r1, r3
 80036fc:	4816      	ldr	r0, [pc, #88]	; (8003758 <HAL_UART_MspInit+0x298>)
 80036fe:	f004 fb2d 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8003702:	2304      	movs	r3, #4
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	2301      	movs	r3, #1
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003712:	2308      	movs	r3, #8
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8003716:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800371a:	4619      	mov	r1, r3
 800371c:	4810      	ldr	r0, [pc, #64]	; (8003760 <HAL_UART_MspInit+0x2a0>)
 800371e:	f004 fb1d 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, PRIORITY_ISR_USART5_MainCPU, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2105      	movs	r1, #5
 8003726:	2031      	movs	r0, #49	; 0x31
 8003728:	f004 f89f 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800372c:	2031      	movs	r0, #49	; 0x31
 800372e:	f004 f8b8 	bl	80078a2 <HAL_NVIC_EnableIRQ>
}
 8003732:	bf00      	nop
 8003734:	3748      	adds	r7, #72	; 0x48
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40013800 	.word	0x40013800
 8003740:	40023800 	.word	0x40023800
 8003744:	40020000 	.word	0x40020000
 8003748:	40004400 	.word	0x40004400
 800374c:	40004800 	.word	0x40004800
 8003750:	40020400 	.word	0x40020400
 8003754:	40004c00 	.word	0x40004c00
 8003758:	40020800 	.word	0x40020800
 800375c:	40005000 	.word	0x40005000
 8003760:	40020c00 	.word	0x40020c00

08003764 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
//======================================================================================
int main(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
	HAL_Init();																			// Настройка HAL
 8003768:	f003 f9eb 	bl	8006b42 <HAL_Init>
	SystemClock_Config();																// Настройка системы тактирования
 800376c:	f000 f894 	bl	8003898 <SystemClock_Config>

	MX_GPIO_Init();																		// Настройка пинов GPIO, не привязанных к блокам SPI, UART, I2C, keys, encoder, ADC, DAC
 8003770:	f7fe ffc8 	bl	8002704 <MX_GPIO_Init>
	MX_DMA_Init();																		// Настройка DMA
 8003774:	f7fd ffa4 	bl	80016c0 <MX_DMA_Init>
	MX_SPI1_Init();																		// Настройка SPI1 для работы с SD картой
 8003778:	f7ff f996 	bl	8002aa8 <MX_SPI1_Init>
	MX_SPI2_Init();																		// Настройка SPI2 для работы с LCD экраном ILI9488
 800377c:	f7ff f9cc 	bl	8002b18 <MX_SPI2_Init>
	MX_I2C1_Init();																		// Настройка I2C для работы с IMU
 8003780:	f7ff f87e 	bl	8002880 <MX_I2C1_Init>

	MX_USART1_UART_Init();																// Настройка USART1
 8003784:	f7ff fdca 	bl	800331c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();																// Настройка USART2 для Virtual COM-Port
 8003788:	f7ff fdf2 	bl	8003370 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();																// Настройка USART3
 800378c:	f7ff fe1a 	bl	80033c4 <MX_USART3_UART_Init>
	MX_UART4_Init();																	// Настройка UART4
 8003790:	f7ff fe42 	bl	8003418 <MX_UART4_Init>
	MX_UART5_Init();																	// Настройка UART5 терминальной связи с ПК
 8003794:	f7ff fe6a 	bl	800346c <MX_UART5_Init>

	MX_DAC_Init();																		// Настройка ЦАП для управления скоростью мотора
 8003798:	f7fd ff04 	bl	80015a4 <MX_DAC_Init>
	MX_ADC_Init();																		// Настройка АЦП для измерения токов, напряжений, регулятора скорости
 800379c:	f7fd fb88 	bl	8000eb0 <MX_ADC_Init>
	MX_TIM3_Init();																		// Настройка для работы энкодера
 80037a0:	f7ff fa94 	bl	8002ccc <MX_TIM3_Init>
	MX_TIM6_Init();																		// Настройка для работы динамика
 80037a4:	f7ff fb5c 	bl	8002e60 <MX_TIM6_Init>
	MX_TIM4_Init();																		// Настройка для работы тахометра оборотов бака
 80037a8:	f7ff fae2 	bl	8002d70 <MX_TIM4_Init>
	MX_TIM9_Init();																		// Настройка для отладки FreeRTOS
 80037ac:	f7ff fb5e 	bl	8002e6c <MX_TIM9_Init>
	MX_TIM10_Init();																	// Настройка источника микросекундных тиков (для DelayUS() со сбросом ) нужен для 1-Wire DS18B20
 80037b0:	f7ff fbac 	bl	8002f0c <MX_TIM10_Init>
	MX_TIM11_Init();																	// Настройка для ШИМ управления оборотами мотора вентилятора охлаждения контроллера двигателя
 80037b4:	f7ff fbfa 	bl	8002fac <MX_TIM11_Init>

	DS18B20_Init();																		// Инициализация термодатчиков
 80037b8:	f7fd ffa0 	bl	80016fc <DS18B20_Init>

	Encoder_Init();																		// Настройка энкодера (GPIO, Таймер, переменные)
 80037bc:	f7fe fc50 	bl	8002060 <Encoder_Init>

	MX_FATFS_Init();																	// Настройка для работы с файлами на SD Card
 80037c0:	f00b f9a0 	bl	800eb04 <MX_FATFS_Init>

	Keys_Init();																		// Настройка GPIO портов для кнопок
 80037c4:	f7ff f8d0 	bl	8002968 <Keys_Init>
	Encoder_Init();																		// Настройка GPIO портов для энкодера
 80037c8:	f7fe fc4a 	bl	8002060 <Encoder_Init>

	FAN_Init();																			// Настройка ШИМ-управления для двигателя вентилятора ихлажения
 80037cc:	f000 f9e2 	bl	8003b94 <FAN_Init>


	BUZZER_Init(BUZZER_STSTE_ON);														// Инициализация и включение пъезодинамика (пищалки/баззера)
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fd fddf 	bl	8001394 <BUZZER_Init>

  //  // фейковый трансмит для настройки SPI
  //  uint8_t data = 0;
  //  HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);

	HAL_Delay(100);
 80037d6:	2064      	movs	r0, #100	; 0x64
 80037d8:	f003 f9e8 	bl	8006bac <HAL_Delay>
	LCD9488_Init();	   																	// Инициализаци экрана LCD ILI9488
 80037dc:	f000 fc1a 	bl	8004014 <LCD9488_Init>
	HAL_Delay(100);
 80037e0:	2064      	movs	r0, #100	; 0x64
 80037e2:	f003 f9e3 	bl	8006bac <HAL_Delay>

	LCD9488_GUI_SetOrientation(1);														// Установка ориентации экрана
 80037e6:	2001      	movs	r0, #1
 80037e8:	f000 fece 	bl	8004588 <LCD9488_GUI_SetOrientation>
	HAL_Delay(100);
 80037ec:	2064      	movs	r0, #100	; 0x64
 80037ee:	f003 f9dd 	bl	8006bac <HAL_Delay>



	//подключаем в единую структуру все данные от переферии
	ExchangeStruct.Encoder_State =			&Encoder_State;							// структура с информацией от энкодера
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <main+0xf4>)
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <main+0xf8>)
 80037f6:	601a      	str	r2, [r3, #0]


	EEPROM_OptionsLoad();																// чтение настроек по умолчанию и чтение сознаненных настроек из EEPROM
 80037f8:	f7fe fc26 	bl	8002048 <EEPROM_OptionsLoad>

	BUZZER_Beep();
 80037fc:	f7fd fe76 	bl	80014ec <BUZZER_Beep>



	// Рисуем начальную заставку на UART2
	printf("\033[2J"); 																	// Очистка окна терминала.   //https://www.linux.org.ru/forum/development/628620
 8003800:	4817      	ldr	r0, [pc, #92]	; (8003860 <main+0xfc>)
 8003802:	f012 f99f 	bl	8015b44 <iprintf>
	printf("\033[0;0H"); 																// задает абсолютные координаты курсора (строка, столбец)  // https://www.opennet.ru/base/dev/console_ctl.txt.html
 8003806:	4817      	ldr	r0, [pc, #92]	; (8003864 <main+0x100>)
 8003808:	f012 f99c 	bl	8015b44 <iprintf>
	printf("Medogonka. Alex Shamilich\n");												// Строка приветствия
 800380c:	4816      	ldr	r0, [pc, #88]	; (8003868 <main+0x104>)
 800380e:	f012 fa0d 	bl	8015c2c <puts>
	printf("Version: %s\n", FIRMWARE_VER);
 8003812:	4916      	ldr	r1, [pc, #88]	; (800386c <main+0x108>)
 8003814:	4816      	ldr	r0, [pc, #88]	; (8003870 <main+0x10c>)
 8003816:	f012 f995 	bl	8015b44 <iprintf>
	printf("  Date: %s\n", __DATE__);
 800381a:	4916      	ldr	r1, [pc, #88]	; (8003874 <main+0x110>)
 800381c:	4816      	ldr	r0, [pc, #88]	; (8003878 <main+0x114>)
 800381e:	f012 f991 	bl	8015b44 <iprintf>
	printf("  Time: %s\n", __TIME__);
 8003822:	4916      	ldr	r1, [pc, #88]	; (800387c <main+0x118>)
 8003824:	4816      	ldr	r0, [pc, #88]	; (8003880 <main+0x11c>)
 8003826:	f012 f98d 	bl	8015b44 <iprintf>
	printf("FreeRTOS, MircoRL, ADC, DAC, 1-Wire\n");
 800382a:	4816      	ldr	r0, [pc, #88]	; (8003884 <main+0x120>)
 800382c:	f012 f9fe 	bl	8015c2c <puts>
	printf("UART2->Virtual_COM\n");
 8003830:	4815      	ldr	r0, [pc, #84]	; (8003888 <main+0x124>)
 8003832:	f012 f9fb 	bl	8015c2c <puts>
	printf("UART5->MicroRL\n");
 8003836:	4815      	ldr	r0, [pc, #84]	; (800388c <main+0x128>)
 8003838:	f012 f9f8 	bl	8015c2c <puts>
	printf("TIM4, TIM9, TIM10, TIM11 \n");
 800383c:	4814      	ldr	r0, [pc, #80]	; (8003890 <main+0x12c>)
 800383e:	f012 f9f5 	bl	8015c2c <puts>
	printf("18B20, Encoder\n");
 8003842:	4814      	ldr	r0, [pc, #80]	; (8003894 <main+0x130>)
 8003844:	f012 f9f2 	bl	8015c2c <puts>

//	main_test();																		// Тесты LCD

	osKernelInitialize();  																// Настройка планировщика FreeRTOS
 8003848:	f00d fc3c 	bl	80110c4 <osKernelInitialize>
	MX_FREERTOS_Init();																	// Настройка объектов FreeRTOS
 800384c:	f7fe fd12 	bl	8002274 <MX_FREERTOS_Init>
	osKernelStart();																	// Запуск планировщика FreeRTOS
 8003850:	f00d fc6a 	bl	8011128 <osKernelStart>



	// После старта планировщика сюда мы никогда не должны зайти, поэтому бесконечный цикл.
	while (1)
 8003854:	e7fe      	b.n	8003854 <main+0xf0>
 8003856:	bf00      	nop
 8003858:	20008c18 	.word	0x20008c18
 800385c:	20008b3c 	.word	0x20008b3c
 8003860:	08019d08 	.word	0x08019d08
 8003864:	08019d10 	.word	0x08019d10
 8003868:	08019d18 	.word	0x08019d18
 800386c:	08019d34 	.word	0x08019d34
 8003870:	08019d3c 	.word	0x08019d3c
 8003874:	08019d4c 	.word	0x08019d4c
 8003878:	08019d58 	.word	0x08019d58
 800387c:	08019d64 	.word	0x08019d64
 8003880:	08019d70 	.word	0x08019d70
 8003884:	08019d7c 	.word	0x08019d7c
 8003888:	08019da0 	.word	0x08019da0
 800388c:	08019db4 	.word	0x08019db4
 8003890:	08019dc4 	.word	0x08019dc4
 8003894:	08019de0 	.word	0x08019de0

08003898 <SystemClock_Config>:
	{
	}
}
//======================================================================================
void SystemClock_Config(void)															// System Clock Configuration
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b092      	sub	sp, #72	; 0x48
 800389c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	2234      	movs	r2, #52	; 0x34
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f011 fb14 	bl	8014ed4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038ac:	463b      	mov	r3, r7
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <SystemClock_Config+0xb0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80038c2:	4a21      	ldr	r2, [pc, #132]	; (8003948 <SystemClock_Config+0xb0>)
 80038c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038c8:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80038ca:	2303      	movs	r3, #3
 80038cc:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038d2:	2301      	movs	r3, #1
 80038d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038d6:	2310      	movs	r3, #16
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038da:	2302      	movs	r3, #2
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80038e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80038ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	4618      	mov	r0, r3
 80038f6:	f006 f84f 	bl	8009998 <HAL_RCC_OscConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <SystemClock_Config+0x6e>
	{
	Error_Handler(0);
 8003900:	2000      	movs	r0, #0
 8003902:	f000 f889 	bl	8003a18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003906:	230f      	movs	r3, #15
 8003908:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800390a:	2303      	movs	r3, #3
 800390c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800391a:	463b      	mov	r3, r7
 800391c:	2101      	movs	r1, #1
 800391e:	4618      	mov	r0, r3
 8003920:	f006 fb6a 	bl	8009ff8 <HAL_RCC_ClockConfig>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <SystemClock_Config+0x98>
	{
	Error_Handler(0);
 800392a:	2000      	movs	r0, #0
 800392c:	f000 f874 	bl	8003a18 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8003930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003934:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003938:	2000      	movs	r0, #0
 800393a:	f006 fc91 	bl	800a260 <HAL_RCC_MCOConfig>
}
 800393e:	bf00      	nop
 8003940:	3748      	adds	r7, #72	; 0x48
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40007000 	.word	0x40007000

0800394c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0c      	ldr	r2, [pc, #48]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d102      	bne.n	8003964 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	MotorSpeed_Period 	= 0;															// Если натикало больше чем период таймера (htim4.Init.Period), то считаем скорость мотора нулевой
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]
  }

  if (htim->Instance == TIM7)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    HAL_IncTick();
 800396e:	f003 f901 	bl	8006b74 <HAL_IncTick>
  }
  if (htim->Instance == TIM6)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <HAL_TIM_PeriodElapsedCallback+0x38>
  {
	BUZZER_INV;																			// меняем состояние пина баззера
 800397c:	2120      	movs	r1, #32
 800397e:	4807      	ldr	r0, [pc, #28]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003980:	f004 fba9 	bl	80080d6 <HAL_GPIO_TogglePin>
  }

}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40000800 	.word	0x40000800
 8003990:	20008a20 	.word	0x20008a20
 8003994:	40001400 	.word	0x40001400
 8003998:	40001000 	.word	0x40001000
 800399c:	40020400 	.word	0x40020400

080039a0 <HAL_TIM_IC_CaptureCallback>:
//======================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)															// Считаем скорость по интервалу импульсов от датчика скорости
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <HAL_TIM_IC_CaptureCallback+0x30>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d109      	bne.n	80039c6 <HAL_TIM_IC_CaptureCallback+0x26>
	{
		MotorSpeed_Period = __HAL_TIM_GET_COUNTER(&htim4);
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_TIM_IC_CaptureCallback+0x34>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80039bc:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_TIM_IC_CaptureCallback+0x34>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40000800 	.word	0x40000800
 80039d4:	20008e0c 	.word	0x20008e0c
 80039d8:	20008a20 	.word	0x20008a20

080039dc <Delay_for_errror>:
//======================================================================================
void Delay_for_errror(uint32_t ms) 														// должна работать вне зависимости от прерываний. Когда все рухнуло и нужно диодом показать код ошибки
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
    volatile uint32_t 	nCount;
    nCount = SystemCoreClock / 10000 * ms;
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <Delay_for_errror+0x34>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <Delay_for_errror+0x38>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0b5b      	lsrs	r3, r3, #13
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	60fb      	str	r3, [r7, #12]
    for (; nCount!=0; nCount--);
 80039f8:	e002      	b.n	8003a00 <Delay_for_errror+0x24>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f9      	bne.n	80039fa <Delay_for_errror+0x1e>
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	20000000 	.word	0x20000000
 8003a14:	d1b71759 	.word	0xd1b71759

08003a18 <Error_Handler>:
//=======================================================================================
void Error_Handler(uint8_t err_num)														// Обработчик ошибок
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  //gl_err_num = err_num;
  while(1)
  {
	LED_GREEN_SET;
 8003a22:	2201      	movs	r2, #1
 8003a24:	2110      	movs	r1, #16
 8003a26:	4817      	ldr	r0, [pc, #92]	; (8003a84 <Error_Handler+0x6c>)
 8003a28:	f004 fb3d 	bl	80080a6 <HAL_GPIO_WritePin>
	Delay_for_errror(500);
 8003a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a30:	f7ff ffd4 	bl	80039dc <Delay_for_errror>
	LED_GREEN_RESET;
 8003a34:	2200      	movs	r2, #0
 8003a36:	2110      	movs	r1, #16
 8003a38:	4812      	ldr	r0, [pc, #72]	; (8003a84 <Error_Handler+0x6c>)
 8003a3a:	f004 fb34 	bl	80080a6 <HAL_GPIO_WritePin>
    Delay_for_errror(500);
 8003a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a42:	f7ff ffcb 	bl	80039dc <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	e012      	b.n	8003a72 <Error_Handler+0x5a>
    {
    	LED_GREEN_SET;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	2110      	movs	r1, #16
 8003a50:	480c      	ldr	r0, [pc, #48]	; (8003a84 <Error_Handler+0x6c>)
 8003a52:	f004 fb28 	bl	80080a6 <HAL_GPIO_WritePin>
    	Delay_for_errror(130);
 8003a56:	2082      	movs	r0, #130	; 0x82
 8003a58:	f7ff ffc0 	bl	80039dc <Delay_for_errror>
    	LED_GREEN_RESET;
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2110      	movs	r1, #16
 8003a60:	4808      	ldr	r0, [pc, #32]	; (8003a84 <Error_Handler+0x6c>)
 8003a62:	f004 fb20 	bl	80080a6 <HAL_GPIO_WritePin>
        Delay_for_errror(130);
 8003a66:	2082      	movs	r0, #130	; 0x82
 8003a68:	f7ff ffb8 	bl	80039dc <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3e8      	bcc.n	8003a4c <Error_Handler+0x34>
    }
    Delay_for_errror(1000);
 8003a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a7e:	f7ff ffad 	bl	80039dc <Delay_for_errror>
	LED_GREEN_SET;
 8003a82:	e7ce      	b.n	8003a22 <Error_Handler+0xa>
 8003a84:	40020800 	.word	0x40020800

08003a88 <Motor_Scan_DirectionState>:
	osDelay(100);
	MOTOR_BWD_SET;
}
//=======================================================================================
void  Motor_Scan_DirectionState(void)													// Просканировать состояние переключателя направления мотора
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
	GPIO_PinState FWD = HAL_GPIO_ReadPin(BTN_FWD_GPIO_Port,  BTN_FWD_Pin);
 8003a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a92:	4824      	ldr	r0, [pc, #144]	; (8003b24 <Motor_Scan_DirectionState+0x9c>)
 8003a94:	f004 faf0 	bl	8008078 <HAL_GPIO_ReadPin>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState BWD = HAL_GPIO_ReadPin(BTN_BWD_GPIO_Port,  BTN_BWD_Pin);
 8003a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aa0:	4820      	ldr	r0, [pc, #128]	; (8003b24 <Motor_Scan_DirectionState+0x9c>)
 8003aa2:	f004 fae9 	bl	8008078 <HAL_GPIO_ReadPin>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	71bb      	strb	r3, [r7, #6]

	if ( (FWD == GPIO_PIN_SET) &
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <Motor_Scan_DirectionState+0x48>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_STOP;
 8003aca:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <Motor_Scan_DirectionState+0xa0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_SET) &
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	79bb      	ldrb	r3, [r7, #6]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <Motor_Scan_DirectionState+0x6e>
		 (BWD == GPIO_PIN_RESET) )
	{
		MotorDirection = MD_FWD;
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <Motor_Scan_DirectionState+0xa0>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_RESET) &
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	79bb      	ldrb	r3, [r7, #6]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <Motor_Scan_DirectionState+0x94>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_REV;
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <Motor_Scan_DirectionState+0xa0>)
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]
	}

}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40020c00 	.word	0x40020c00
 8003b28:	20008ba8 	.word	0x20008ba8

08003b2c <Motor_Set_DirectionState>:
//=======================================================================================
void  Motor_Set_DirectionState(TMotorDirection ADir)									// Установить направление мотора
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
	switch (ADir)
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d00f      	beq.n	8003b5c <Motor_Set_DirectionState+0x30>
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d018      	beq.n	8003b72 <Motor_Set_DirectionState+0x46>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d000      	beq.n	8003b46 <Motor_Set_DirectionState+0x1a>
			MOTOR_FWD_RESET;
			MOTOR_BWD_SET;
			break;
	}

}
 8003b44:	e020      	b.n	8003b88 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 8003b46:	2200      	movs	r2, #0
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	4811      	ldr	r0, [pc, #68]	; (8003b90 <Motor_Set_DirectionState+0x64>)
 8003b4c:	f004 faab 	bl	80080a6 <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 8003b50:	2200      	movs	r2, #0
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	480e      	ldr	r0, [pc, #56]	; (8003b90 <Motor_Set_DirectionState+0x64>)
 8003b56:	f004 faa6 	bl	80080a6 <HAL_GPIO_WritePin>
			break;
 8003b5a:	e015      	b.n	8003b88 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_SET;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	2140      	movs	r1, #64	; 0x40
 8003b60:	480b      	ldr	r0, [pc, #44]	; (8003b90 <Motor_Set_DirectionState+0x64>)
 8003b62:	f004 faa0 	bl	80080a6 <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 8003b66:	2200      	movs	r2, #0
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	4809      	ldr	r0, [pc, #36]	; (8003b90 <Motor_Set_DirectionState+0x64>)
 8003b6c:	f004 fa9b 	bl	80080a6 <HAL_GPIO_WritePin>
			break;
 8003b70:	e00a      	b.n	8003b88 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 8003b72:	2200      	movs	r2, #0
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	4806      	ldr	r0, [pc, #24]	; (8003b90 <Motor_Set_DirectionState+0x64>)
 8003b78:	f004 fa95 	bl	80080a6 <HAL_GPIO_WritePin>
			MOTOR_BWD_SET;
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	4803      	ldr	r0, [pc, #12]	; (8003b90 <Motor_Set_DirectionState+0x64>)
 8003b82:	f004 fa90 	bl	80080a6 <HAL_GPIO_WritePin>
			break;
 8003b86:	bf00      	nop
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000

08003b94 <FAN_Init>:
//=======================================================================================
void  FAN_Init(void)																	// Инициализация управления мотором вентилятора охлажения
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	MX_TIM11_Init();																	// Инициализация таймера для ШИМ
 8003b98:	f7ff fa08 	bl	8002fac <MX_TIM11_Init>

	FAN_Set_Start();																	// Включить мотор вентилятора охлажения
 8003b9c:	f000 f806 	bl	8003bac <FAN_Set_Start>
	FAN_Set_Speed(FAN_SPEED_DEFAULT);													// Установить скорость вентилятора по-умолчанию
 8003ba0:	2064      	movs	r0, #100	; 0x64
 8003ba2:	f000 f80d 	bl	8003bc0 <FAN_Set_Speed>
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <FAN_Set_Start>:
//=======================================================================================
void  FAN_Set_Start(void)																// Включить мотор вентилятора охлажения
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4802      	ldr	r0, [pc, #8]	; (8003bbc <FAN_Set_Start+0x10>)
 8003bb4:	f007 f90e 	bl	800add4 <HAL_TIM_PWM_Start>
}
 8003bb8:	bf00      	nop
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20008ecc 	.word	0x20008ecc

08003bc0 <FAN_Set_Speed>:
{
	HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
}
//=======================================================================================
void  FAN_Set_Speed(uint8_t APercent)													// Установить скорость мотора вентилятора охлажения
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, APercent);							// Т.к. период ШИМ таймера задан в (htim11.Init.Period = 100;),
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <FAN_Set_Speed+0x1c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	79fa      	ldrb	r2, [r7, #7]
 8003bd0:	635a      	str	r2, [r3, #52]	; 0x34
																						// скважность тут задаем от 0 до 100.
																						// Частота ШИМ определяется соотношением (htim11.Init.Prescaler = 32000;) с тактовой частотой
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	20008ecc 	.word	0x20008ecc

08003be0 <HAL_MspInit>:
  ******************************************************************************
  */
#include "main.h"

void HAL_MspInit(void)																	// Initializes the Global MSP.
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0

  __HAL_RCC_COMP_CLK_ENABLE();
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_MspInit+0x58>)
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <HAL_MspInit+0x58>)
 8003bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf0:	6253      	str	r3, [r2, #36]	; 0x24
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_MspInit+0x58>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_MspInit+0x58>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <HAL_MspInit+0x58>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6213      	str	r3, [r2, #32]
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_MspInit+0x58>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_MspInit+0x58>)
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <HAL_MspInit+0x58>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6253      	str	r3, [r2, #36]	; 0x24
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_MspInit+0x58>)
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]

}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40023800 	.word	0x40023800

08003c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	202c      	movs	r0, #44	; 0x2c
 8003c52:	f003 fe0a 	bl	800786a <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c56:	202c      	movs	r0, #44	; 0x2c
 8003c58:	f003 fe23 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_InitTick+0x9c>)
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_InitTick+0x9c>)
 8003c62:	f043 0320 	orr.w	r3, r3, #32
 8003c66:	6253      	str	r3, [r2, #36]	; 0x24
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_InitTick+0x9c>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c74:	f107 0210 	add.w	r2, r7, #16
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f006 fc20 	bl	800a4c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c84:	f006 fbf6 	bl	800a474 <HAL_RCC_GetPCLK1Freq>
 8003c88:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <HAL_InitTick+0xa0>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	0c9b      	lsrs	r3, r3, #18
 8003c94:	3b01      	subs	r3, #1
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_InitTick+0xa4>)
 8003c9a:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <HAL_InitTick+0xa8>)
 8003c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_InitTick+0xa4>)
 8003ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ca4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <HAL_InitTick+0xa4>)
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_InitTick+0xa4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_InitTick+0xa4>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003cb8:	4809      	ldr	r0, [pc, #36]	; (8003ce0 <HAL_InitTick+0xa4>)
 8003cba:	f006 ff23 	bl	800ab04 <HAL_TIM_Base_Init>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003cc4:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <HAL_InitTick+0xa4>)
 8003cc6:	f006 ffc5 	bl	800ac54 <HAL_TIM_Base_Start_IT>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	e000      	b.n	8003cd0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3730      	adds	r7, #48	; 0x30
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	431bde83 	.word	0x431bde83
 8003ce0:	200090cc 	.word	0x200090cc
 8003ce4:	40001400 	.word	0x40001400

08003ce8 <NMI_Handler>:
//======================================================================================
/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void)																	// Non maskable interrupt.
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <HardFault_Handler>:
//======================================================================================
void HardFault_Handler(void)															// Hard fault interrupt.
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  while (1)
 8003cf8:	e7fe      	b.n	8003cf8 <HardFault_Handler+0x4>

08003cfa <MemManage_Handler>:
  {
  }
}
//======================================================================================
void MemManage_Handler(void)															// Memory management fault.
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  while (1)
 8003cfe:	e7fe      	b.n	8003cfe <MemManage_Handler+0x4>

08003d00 <BusFault_Handler>:
  {
  }
}
//======================================================================================
void BusFault_Handler(void)																// Pre-fetch fault, memory access fault.
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  while (1)
 8003d04:	e7fe      	b.n	8003d04 <BusFault_Handler+0x4>

08003d06 <UsageFault_Handler>:
  {
  }
}
//======================================================================================
void UsageFault_Handler(void)															// Undefined instruction or illegal state.
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  while (1)
 8003d0a:	e7fe      	b.n	8003d0a <UsageFault_Handler+0x4>

08003d0c <DebugMon_Handler>:
//======================================================================================
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <DMA1_Channel5_IRQHandler>:
/* please refer to the startup file (startup_stm32l1xx.s).                    */
/******************************************************************************/

//======================================================================================
void DMA1_Channel5_IRQHandler(void)														// DMA1 channel5 global interrupt.
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003d1c:	4802      	ldr	r0, [pc, #8]	; (8003d28 <DMA1_Channel5_IRQHandler+0x10>)
 8003d1e:	f003 ff6e 	bl	8007bfe <HAL_DMA_IRQHandler>
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20008dc8 	.word	0x20008dc8

08003d2c <ADC1_IRQHandler>:
//======================================================================================
void ADC1_IRQHandler(void)																// ADC global interrupt.
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <ADC1_IRQHandler+0x10>)
 8003d32:	f003 f9c4 	bl	80070be <HAL_ADC_IRQHandler>
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20008b50 	.word	0x20008b50

08003d40 <USB_LP_IRQHandler>:
//======================================================================================
void USB_LP_IRQHandler(void)															// USB low priority interrupt.
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <USB_LP_IRQHandler+0x10>)
 8003d46:	f004 fc1b 	bl	8008580 <HAL_PCD_IRQHandler>
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20009b40 	.word	0x20009b40

08003d54 <USART1_IRQHandler>:
//======================================================================================
void USART1_IRQHandler(void)															// USART1 global interrupt.
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <USART1_IRQHandler+0x10>)
 8003d5a:	f008 fad7 	bl	800c30c <HAL_UART_IRQHandler>
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2000900c 	.word	0x2000900c

08003d68 <USART2_IRQHandler>:
//======================================================================================
void USART2_IRQHandler(void)															// USART2 global interrupt.
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <USART2_IRQHandler+0x10>)
 8003d6e:	f008 facd 	bl	800c30c <HAL_UART_IRQHandler>
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000908c 	.word	0x2000908c

08003d7c <USART3_IRQHandler>:
//======================================================================================
void USART3_IRQHandler(void)															// USART3 global interrupt.
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <USART3_IRQHandler+0x10>)
 8003d82:	f008 fac3 	bl	800c30c <HAL_UART_IRQHandler>
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20008f8c 	.word	0x20008f8c

08003d90 <UART4_IRQHandler>:
//======================================================================================
void UART4_IRQHandler(void)																// UART4 global interrupt.
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <UART4_IRQHandler+0x10>)
 8003d96:	f008 fab9 	bl	800c30c <HAL_UART_IRQHandler>
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	2000904c 	.word	0x2000904c

08003da4 <UART5_IRQHandler>:
//======================================================================================
void UART5_IRQHandler(void)																// UART5 global interrupt.
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart5);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <UART5_IRQHandler+0x10>)
 8003daa:	f008 faaf 	bl	800c30c <HAL_UART_IRQHandler>
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20008fcc 	.word	0x20008fcc

08003db8 <TIM3_IRQHandler>:
//======================================================================================
void TIM3_IRQHandler(void)																// TIM3 global interrupt.
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <TIM3_IRQHandler+0x10>)
 8003dbe:	f007 fad8 	bl	800b372 <HAL_TIM_IRQHandler>
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20008e8c 	.word	0x20008e8c

08003dcc <TIM4_IRQHandler>:
//======================================================================================
void TIM4_IRQHandler(void)																// TIM4 global interrupt.
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <TIM4_IRQHandler+0x10>)
 8003dd2:	f007 face 	bl	800b372 <HAL_TIM_IRQHandler>
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20008e0c 	.word	0x20008e0c

08003de0 <TIM6_IRQHandler>:
//======================================================================================
void TIM6_IRQHandler(void)																// TIM6 global interrupt.
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <TIM6_IRQHandler+0x10>)
 8003de6:	f007 fac4 	bl	800b372 <HAL_TIM_IRQHandler>
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20008f0c 	.word	0x20008f0c

08003df4 <TIM7_IRQHandler>:
//======================================================================================
void TIM7_IRQHandler(void)																// TIM7 global interrupt.
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <TIM7_IRQHandler+0x10>)
 8003dfa:	f007 faba 	bl	800b372 <HAL_TIM_IRQHandler>
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200090cc 	.word	0x200090cc

08003e08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e00a      	b.n	8003e30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e1a:	f3af 8000 	nop.w
 8003e1e:	4601      	mov	r1, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	60ba      	str	r2, [r7, #8]
 8003e26:	b2ca      	uxtb	r2, r1
 8003e28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf0      	blt.n	8003e1a <_read+0x12>
	}

return len;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_write>:

int _write(int file, char *ptr, int len)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e009      	b.n	8003e68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	60ba      	str	r2, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fa4b 	bl	80032f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3301      	adds	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	dbf1      	blt.n	8003e54 <_write+0x12>
	}
	return len;
 8003e70:	687b      	ldr	r3, [r7, #4]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <_close>:
	return (caddr_t) prev_heap_end;
}
*/

int _close(int file)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
	return -1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <_isatty>:

int _isatty(int file)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8003eb6:	2301      	movs	r3, #1
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
	return 0;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
	...

08003edc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <SystemInit+0x14>)
 8003ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <LCD9488_Init_GPIO>:
uint16_t LCD9488_Point_Color = 0x0000;
uint16_t LCD9488_Back_Color  = 0xFFFF;
uint16_t LCD9488_DeviceCode;
//=======================================================================================
void LCD9488_Init_GPIO(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efa:	f107 0314 	add.w	r3, r7, #20
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	60da      	str	r2, [r3, #12]
 8003f08:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	61d3      	str	r3, [r2, #28]
 8003f16:	4b3d      	ldr	r3, [pc, #244]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f22:	4b3a      	ldr	r3, [pc, #232]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4a39      	ldr	r2, [pc, #228]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	61d3      	str	r3, [r2, #28]
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3a:	4b34      	ldr	r3, [pc, #208]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	4a33      	ldr	r2, [pc, #204]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	61d3      	str	r3, [r2, #28]
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f52:	4b2e      	ldr	r3, [pc, #184]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4a2d      	ldr	r2, [pc, #180]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f58:	f043 0308 	orr.w	r3, r3, #8
 8003f5c:	61d3      	str	r3, [r2, #28]
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <LCD9488_Init_GPIO+0x118>)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD9488_DC_RS_GPIO_Port, 		LCD9488_DC_RS_Pin, 	GPIO_PIN_RESET);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4828      	ldr	r0, [pc, #160]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003f70:	f004 f899 	bl	80080a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_CS_GPIO_Port, 		LCD9488_CS_Pin, 	GPIO_PIN_RESET);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2104      	movs	r1, #4
 8003f78:	4825      	ldr	r0, [pc, #148]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003f7a:	f004 f894 	bl	80080a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_RST_GPIO_Port, 		LCD9488_RST_Pin, 	GPIO_PIN_RESET);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2102      	movs	r1, #2
 8003f82:	4823      	ldr	r0, [pc, #140]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003f84:	f004 f88f 	bl	80080a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_LED_GPIO_Port, 		LCD9488_LED_Pin, 	GPIO_PIN_RESET);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2108      	movs	r1, #8
 8003f8c:	4820      	ldr	r0, [pc, #128]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003f8e:	f004 f88a 	bl	80080a6 <HAL_GPIO_WritePin>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LCD9488_DC_RS_Pin;
 8003f92:	2301      	movs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_DC_RS_GPIO_Port, &GPIO_InitStruct);
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4819      	ldr	r0, [pc, #100]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003faa:	f003 fed7 	bl	8007d5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_CS_Pin;
 8003fae:	2304      	movs	r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_CS_GPIO_Port, &GPIO_InitStruct);
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4812      	ldr	r0, [pc, #72]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003fc6:	f003 fec9 	bl	8007d5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_RST_Pin;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_RST_GPIO_Port, &GPIO_InitStruct);
 8003fda:	f107 0314 	add.w	r3, r7, #20
 8003fde:	4619      	mov	r1, r3
 8003fe0:	480b      	ldr	r0, [pc, #44]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003fe2:	f003 febb 	bl	8007d5c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_LED_Pin;
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fea:	2301      	movs	r3, #1
 8003fec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_LED_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4804      	ldr	r0, [pc, #16]	; (8004010 <LCD9488_Init_GPIO+0x11c>)
 8003ffe:	f003 fead 	bl	8007d5c <HAL_GPIO_Init>
}
 8004002:	bf00      	nop
 8004004:	3728      	adds	r7, #40	; 0x28
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40020800 	.word	0x40020800

08004014 <LCD9488_Init>:
//=======================================================================================
void LCD9488_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 8004018:	f7fe fd7e 	bl	8002b18 <MX_SPI2_Init>
	HAL_Delay(100);
 800401c:	2064      	movs	r0, #100	; 0x64
 800401e:	f002 fdc5 	bl	8006bac <HAL_Delay>
	LCD9488_Init_GPIO();
 8004022:	f7ff ff67 	bl	8003ef4 <LCD9488_Init_GPIO>

	LCD9488_LED_SET;//Включить подсветку
 8004026:	2201      	movs	r2, #1
 8004028:	2108      	movs	r1, #8
 800402a:	4870      	ldr	r0, [pc, #448]	; (80041ec <LCD9488_Init+0x1d8>)
 800402c:	f004 f83b 	bl	80080a6 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8004030:	2064      	movs	r0, #100	; 0x64
 8004032:	f002 fdbb 	bl	8006bac <HAL_Delay>
 	LCD9488_RESET();
 8004036:	f000 fa3d 	bl	80044b4 <LCD9488_RESET>
 	HAL_Delay(100);
 800403a:	2064      	movs	r0, #100	; 0x64
 800403c:	f002 fdb6 	bl	8006bac <HAL_Delay>

	LCD9488_Transport_WR_REG(0XF7);
 8004040:	20f7      	movs	r0, #247	; 0xf7
 8004042:	f000 f8ed 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xA9);
 8004046:	20a9      	movs	r0, #169	; 0xa9
 8004048:	f000 f910 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x51);
 800404c:	2051      	movs	r0, #81	; 0x51
 800404e:	f000 f90d 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2C);
 8004052:	202c      	movs	r0, #44	; 0x2c
 8004054:	f000 f90a 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x82);
 8004058:	2082      	movs	r0, #130	; 0x82
 800405a:	f000 f907 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC0);
 800405e:	20c0      	movs	r0, #192	; 0xc0
 8004060:	f000 f8de 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x11);
 8004064:	2011      	movs	r0, #17
 8004066:	f000 f901 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 800406a:	2009      	movs	r0, #9
 800406c:	f000 f8fe 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC1);
 8004070:	20c1      	movs	r0, #193	; 0xc1
 8004072:	f000 f8d5 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x41);
 8004076:	2041      	movs	r0, #65	; 0x41
 8004078:	f000 f8f8 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XC5);
 800407c:	20c5      	movs	r0, #197	; 0xc5
 800407e:	f000 f8cf 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8004082:	2000      	movs	r0, #0
 8004084:	f000 f8f2 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8004088:	200a      	movs	r0, #10
 800408a:	f000 f8ef 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x80);
 800408e:	2080      	movs	r0, #128	; 0x80
 8004090:	f000 f8ec 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB1);
 8004094:	20b1      	movs	r0, #177	; 0xb1
 8004096:	f000 f8c3 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xB0);
 800409a:	20b0      	movs	r0, #176	; 0xb0
 800409c:	f000 f8e6 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x11);
 80040a0:	2011      	movs	r0, #17
 80040a2:	f000 f8e3 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB4);
 80040a6:	20b4      	movs	r0, #180	; 0xb4
 80040a8:	f000 f8ba 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 80040ac:	2002      	movs	r0, #2
 80040ae:	f000 f8dd 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB6);
 80040b2:	20b6      	movs	r0, #182	; 0xb6
 80040b4:	f000 f8b4 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 80040b8:	2002      	movs	r0, #2
 80040ba:	f000 f8d7 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x42);
 80040be:	2042      	movs	r0, #66	; 0x42
 80040c0:	f000 f8d4 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB7);
 80040c4:	20b7      	movs	r0, #183	; 0xb7
 80040c6:	f000 f8ab 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xc6);
 80040ca:	20c6      	movs	r0, #198	; 0xc6
 80040cc:	f000 f8ce 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xBE);
 80040d0:	20be      	movs	r0, #190	; 0xbe
 80040d2:	f000 f8a5 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 80040d6:	2000      	movs	r0, #0
 80040d8:	f000 f8c8 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 80040dc:	2004      	movs	r0, #4
 80040de:	f000 f8c5 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE9);
 80040e2:	20e9      	movs	r0, #233	; 0xe9
 80040e4:	f000 f89c 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f000 f8bf 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x36);
 80040ee:	2036      	movs	r0, #54	; 0x36
 80040f0:	f000 f896 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA((1<<3)|(0<<7)|(1<<6)|(1<<5));
 80040f4:	2068      	movs	r0, #104	; 0x68
 80040f6:	f000 f8b9 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x3A);
 80040fa:	203a      	movs	r0, #58	; 0x3a
 80040fc:	f000 f890 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x66);
 8004100:	2066      	movs	r0, #102	; 0x66
 8004102:	f000 f8b3 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE0);
 8004106:	20e0      	movs	r0, #224	; 0xe0
 8004108:	f000 f88a 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 800410c:	2000      	movs	r0, #0
 800410e:	f000 f8ad 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x07);
 8004112:	2007      	movs	r0, #7
 8004114:	f000 f8aa 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x10);
 8004118:	2010      	movs	r0, #16
 800411a:	f000 f8a7 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 800411e:	2009      	movs	r0, #9
 8004120:	f000 f8a4 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8004124:	2017      	movs	r0, #23
 8004126:	f000 f8a1 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0B);
 800412a:	200b      	movs	r0, #11
 800412c:	f000 f89e 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x41);
 8004130:	2041      	movs	r0, #65	; 0x41
 8004132:	f000 f89b 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x89);
 8004136:	2089      	movs	r0, #137	; 0x89
 8004138:	f000 f898 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x4B);
 800413c:	204b      	movs	r0, #75	; 0x4b
 800413e:	f000 f895 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8004142:	200a      	movs	r0, #10
 8004144:	f000 f892 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0C);
 8004148:	200c      	movs	r0, #12
 800414a:	f000 f88f 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 800414e:	200e      	movs	r0, #14
 8004150:	f000 f88c 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x18);
 8004154:	2018      	movs	r0, #24
 8004156:	f000 f889 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1B);
 800415a:	201b      	movs	r0, #27
 800415c:	f000 f886 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 8004160:	200f      	movs	r0, #15
 8004162:	f000 f883 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XE1);
 8004166:	20e1      	movs	r0, #225	; 0xe1
 8004168:	f000 f85a 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 800416c:	2000      	movs	r0, #0
 800416e:	f000 f87d 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8004172:	2017      	movs	r0, #23
 8004174:	f000 f87a 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1A);
 8004178:	201a      	movs	r0, #26
 800417a:	f000 f877 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 800417e:	2004      	movs	r0, #4
 8004180:	f000 f874 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 8004184:	200e      	movs	r0, #14
 8004186:	f000 f871 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x06);
 800418a:	2006      	movs	r0, #6
 800418c:	f000 f86e 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2F);
 8004190:	202f      	movs	r0, #47	; 0x2f
 8004192:	f000 f86b 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x45);
 8004196:	2045      	movs	r0, #69	; 0x45
 8004198:	f000 f868 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x43);
 800419c:	2043      	movs	r0, #67	; 0x43
 800419e:	f000 f865 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x02);
 80041a2:	2002      	movs	r0, #2
 80041a4:	f000 f862 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 80041a8:	200a      	movs	r0, #10
 80041aa:	f000 f85f 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 80041ae:	2009      	movs	r0, #9
 80041b0:	f000 f85c 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x32);
 80041b4:	2032      	movs	r0, #50	; 0x32
 80041b6:	f000 f859 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x36);
 80041ba:	2036      	movs	r0, #54	; 0x36
 80041bc:	f000 f856 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 80041c0:	200f      	movs	r0, #15
 80041c2:	f000 f853 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x11);
 80041c6:	2011      	movs	r0, #17
 80041c8:	f000 f82a 	bl	8004220 <LCD9488_Transport_WR_REG>
	HAL_Delay(120);
 80041cc:	2078      	movs	r0, #120	; 0x78
 80041ce:	f002 fced 	bl	8006bac <HAL_Delay>
	LCD9488_Transport_WR_REG(0x29);
 80041d2:	2029      	movs	r0, #41	; 0x29
 80041d4:	f000 f824 	bl	8004220 <LCD9488_Transport_WR_REG>

	LCD9488_GUI_SetOrientation(USE_HORIZONTAL);
 80041d8:	2000      	movs	r0, #0
 80041da:	f000 f9d5 	bl	8004588 <LCD9488_GUI_SetOrientation>
	LCD9488_GUI_Clear(WHITE);
 80041de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80041e2:	f000 f8f7 	bl	80043d4 <LCD9488_GUI_Clear>

}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40020800 	.word	0x40020800

080041f0 <LCD9488_Transport_SPI_WriteByte>:
//=======================================================================================
void LCD9488_Transport_SPI_WriteByte(uint8_t Byte)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80041fa:	bf00      	nop
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <LCD9488_Transport_SPI_WriteByte+0x2c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f8      	beq.n	80041fc <LCD9488_Transport_SPI_WriteByte+0xc>
		LCD_SPI.Instance->DR = Byte;
 800420a:	4b04      	ldr	r3, [pc, #16]	; (800421c <LCD9488_Transport_SPI_WriteByte+0x2c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	79fa      	ldrb	r2, [r7, #7]
 8004210:	60da      	str	r2, [r3, #12]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	20008d18 	.word	0x20008d18

08004220 <LCD9488_Transport_WR_REG>:
//=======================================================================================
void LCD9488_Transport_WR_REG(uint8_t data)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 800422a:	2200      	movs	r2, #0
 800422c:	2104      	movs	r1, #4
 800422e:	480d      	ldr	r0, [pc, #52]	; (8004264 <LCD9488_Transport_WR_REG+0x44>)
 8004230:	f003 ff39 	bl	80080a6 <HAL_GPIO_WritePin>
   LCD9488_RS_CLR;
 8004234:	2200      	movs	r2, #0
 8004236:	2101      	movs	r1, #1
 8004238:	480a      	ldr	r0, [pc, #40]	; (8004264 <LCD9488_Transport_WR_REG+0x44>)
 800423a:	f003 ff34 	bl	80080a6 <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ffd5 	bl	80041f0 <LCD9488_Transport_SPI_WriteByte>
   HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);
 8004246:	1df9      	adds	r1, r7, #7
 8004248:	230a      	movs	r3, #10
 800424a:	2201      	movs	r2, #1
 800424c:	4806      	ldr	r0, [pc, #24]	; (8004268 <LCD9488_Transport_WR_REG+0x48>)
 800424e:	f006 fa52 	bl	800a6f6 <HAL_SPI_Transmit>
   LCD9488_CS_SET;
 8004252:	2201      	movs	r2, #1
 8004254:	2104      	movs	r1, #4
 8004256:	4803      	ldr	r0, [pc, #12]	; (8004264 <LCD9488_Transport_WR_REG+0x44>)
 8004258:	f003 ff25 	bl	80080a6 <HAL_GPIO_WritePin>
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40020800 	.word	0x40020800
 8004268:	20008d18 	.word	0x20008d18

0800426c <LCD9488_Transport_WR_DATA>:
//=======================================================================================
void LCD9488_Transport_WR_DATA(uint8_t data)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 8004276:	2200      	movs	r2, #0
 8004278:	2104      	movs	r1, #4
 800427a:	480a      	ldr	r0, [pc, #40]	; (80042a4 <LCD9488_Transport_WR_DATA+0x38>)
 800427c:	f003 ff13 	bl	80080a6 <HAL_GPIO_WritePin>
   LCD9488_RS_SET;
 8004280:	2201      	movs	r2, #1
 8004282:	2101      	movs	r1, #1
 8004284:	4807      	ldr	r0, [pc, #28]	; (80042a4 <LCD9488_Transport_WR_DATA+0x38>)
 8004286:	f003 ff0e 	bl	80080a6 <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ffaf 	bl	80041f0 <LCD9488_Transport_SPI_WriteByte>
   LCD9488_CS_SET;
 8004292:	2201      	movs	r2, #1
 8004294:	2104      	movs	r1, #4
 8004296:	4803      	ldr	r0, [pc, #12]	; (80042a4 <LCD9488_Transport_WR_DATA+0x38>)
 8004298:	f003 ff05 	bl	80080a6 <HAL_GPIO_WritePin>
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40020800 	.word	0x40020800

080042a8 <LCD9488_WriteReg>:
//=======================================================================================
void LCD9488_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	460a      	mov	r2, r1
 80042b2:	71fb      	strb	r3, [r7, #7]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80bb      	strh	r3, [r7, #4]
	LCD9488_Transport_WR_REG(LCD_Reg);
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff ffb0 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(LCD_RegValue);
 80042c0:	88bb      	ldrh	r3, [r7, #4]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ffd1 	bl	800426c <LCD9488_Transport_WR_DATA>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <LCD9488_WriteRAM_Prepare>:
//=======================================================================================
void LCD9488_WriteRAM_Prepare(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
	LCD9488_Transport_WR_REG(LCD9488_DEV.WramCmd);
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <LCD9488_WriteRAM_Prepare+0x14>)
 80042da:	891b      	ldrh	r3, [r3, #8]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff9e 	bl	8004220 <LCD9488_Transport_WR_REG>
}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20009110 	.word	0x20009110

080042ec <LCD9488_WriteData_16Bit>:
//=======================================================================================
void LCD9488_WriteData_16Bit(uint16_t Data)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	80fb      	strh	r3, [r7, #6]
	uint8_t r = (Data>>8)&0xF8; 	// RED Color
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (Data>>3)&0xFC; 	// Green Color
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	08db      	lsrs	r3, r3, #3
 8004308:	b29b      	uxth	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f023 0303 	bic.w	r3, r3, #3
 8004310:	73bb      	strb	r3, [r7, #14]
	uint8_t b = Data<<3; 			// Blue Color
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	737b      	strb	r3, [r7, #13]

	LCD9488_CS_CLR;
 800431a:	2200      	movs	r2, #0
 800431c:	2104      	movs	r1, #4
 800431e:	481e      	ldr	r0, [pc, #120]	; (8004398 <LCD9488_WriteData_16Bit+0xac>)
 8004320:	f003 fec1 	bl	80080a6 <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 8004324:	2201      	movs	r2, #1
 8004326:	2101      	movs	r1, #1
 8004328:	481b      	ldr	r0, [pc, #108]	; (8004398 <LCD9488_WriteData_16Bit+0xac>)
 800432a:	f003 febc 	bl	80080a6 <HAL_GPIO_WritePin>
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800432e:	bf00      	nop
 8004330:	4b1a      	ldr	r3, [pc, #104]	; (800439c <LCD9488_WriteData_16Bit+0xb0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f8      	beq.n	8004330 <LCD9488_WriteData_16Bit+0x44>
		LCD_SPI.Instance->DR = r;
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <LCD9488_WriteData_16Bit+0xb0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004346:	bf00      	nop
 8004348:	4b14      	ldr	r3, [pc, #80]	; (800439c <LCD9488_WriteData_16Bit+0xb0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f8      	beq.n	8004348 <LCD9488_WriteData_16Bit+0x5c>
		LCD_SPI.Instance->DR = g;
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <LCD9488_WriteData_16Bit+0xb0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	7bba      	ldrb	r2, [r7, #14]
 800435c:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800435e:	bf00      	nop
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <LCD9488_WriteData_16Bit+0xb0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f8      	beq.n	8004360 <LCD9488_WriteData_16Bit+0x74>
		LCD_SPI.Instance->DR = b;
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <LCD9488_WriteData_16Bit+0xb0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	7b7a      	ldrb	r2, [r7, #13]
 8004374:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004376:	bf00      	nop
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <LCD9488_WriteData_16Bit+0xb0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f8      	beq.n	8004378 <LCD9488_WriteData_16Bit+0x8c>

	LCD9488_CS_SET;
 8004386:	2201      	movs	r2, #1
 8004388:	2104      	movs	r1, #4
 800438a:	4803      	ldr	r0, [pc, #12]	; (8004398 <LCD9488_WriteData_16Bit+0xac>)
 800438c:	f003 fe8b 	bl	80080a6 <HAL_GPIO_WritePin>
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40020800 	.word	0x40020800
 800439c:	20008d18 	.word	0x20008d18

080043a0 <LCD9488_GUI_Draw_Point>:
//=======================================================================================
void LCD9488_GUI_Draw_Point(uint16_t x,uint16_t y)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	460a      	mov	r2, r1
 80043aa:	80fb      	strh	r3, [r7, #6]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetCursor(x,y);
 80043b0:	88ba      	ldrh	r2, [r7, #4]
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f93e 	bl	8004638 <LCD9488_GUI_SetCursor>
	LCD9488_WriteData_16Bit(LCD9488_Point_Color);
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <LCD9488_GUI_Draw_Point+0x30>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff93 	bl	80042ec <LCD9488_WriteData_16Bit>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	2000034c 	.word	0x2000034c

080043d4 <LCD9488_GUI_Clear>:
//=======================================================================================
void LCD9488_GUI_Clear(uint16_t Color)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	80fb      	strh	r3, [r7, #6]
	LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <LCD9488_GUI_Clear+0xd4>)
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <LCD9488_GUI_Clear+0xd4>)
 80043e8:	885b      	ldrh	r3, [r3, #2]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2100      	movs	r1, #0
 80043f0:	2000      	movs	r0, #0
 80043f2:	f000 f875 	bl	80044e0 <LCD9488_GUI_SetWindows>
	LCD9488_CS_CLR;
 80043f6:	2200      	movs	r2, #0
 80043f8:	2104      	movs	r1, #4
 80043fa:	482c      	ldr	r0, [pc, #176]	; (80044ac <LCD9488_GUI_Clear+0xd8>)
 80043fc:	f003 fe53 	bl	80080a6 <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 8004400:	2201      	movs	r2, #1
 8004402:	2101      	movs	r1, #1
 8004404:	4829      	ldr	r0, [pc, #164]	; (80044ac <LCD9488_GUI_Clear+0xd8>)
 8004406:	f003 fe4e 	bl	80080a6 <HAL_GPIO_WritePin>
	uint32_t cnt = LCD9488_DEV.Height * LCD9488_DEV.Width;
 800440a:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <LCD9488_GUI_Clear+0xd4>)
 800440c:	885b      	ldrh	r3, [r3, #2]
 800440e:	461a      	mov	r2, r3
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <LCD9488_GUI_Clear+0xd4>)
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	fb03 f302 	mul.w	r3, r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
	uint8_t r = (Color>>8)&0xF8; 	// RED Color
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	b29b      	uxth	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	72fb      	strb	r3, [r7, #11]
	uint8_t g = (Color>>3)&0xFC; 	// Green Color
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	08db      	lsrs	r3, r3, #3
 800442c:	b29b      	uxth	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f023 0303 	bic.w	r3, r3, #3
 8004434:	72bb      	strb	r3, [r7, #10]
	uint8_t b = Color<<3; 			// Blue Color
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	727b      	strb	r3, [r7, #9]

	while (cnt)
 800443e:	e026      	b.n	800448e <LCD9488_GUI_Clear+0xba>
	{
		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004440:	bf00      	nop
 8004442:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <LCD9488_GUI_Clear+0xdc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f8      	beq.n	8004442 <LCD9488_GUI_Clear+0x6e>
			LCD_SPI.Instance->DR = r;//RED
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <LCD9488_GUI_Clear+0xdc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	7afa      	ldrb	r2, [r7, #11]
 8004456:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004458:	bf00      	nop
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <LCD9488_GUI_Clear+0xdc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f8      	beq.n	800445a <LCD9488_GUI_Clear+0x86>
			LCD_SPI.Instance->DR = g;//GREEN
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <LCD9488_GUI_Clear+0xdc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	7aba      	ldrb	r2, [r7, #10]
 800446e:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004470:	bf00      	nop
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <LCD9488_GUI_Clear+0xdc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f8      	beq.n	8004472 <LCD9488_GUI_Clear+0x9e>
			LCD_SPI.Instance->DR = b;//BLUE
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <LCD9488_GUI_Clear+0xdc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	7a7a      	ldrb	r2, [r7, #9]
 8004486:	60da      	str	r2, [r3, #12]

		cnt--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3b01      	subs	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
	while (cnt)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1d5      	bne.n	8004440 <LCD9488_GUI_Clear+0x6c>
	}
	LCD9488_CS_SET;
 8004494:	2201      	movs	r2, #1
 8004496:	2104      	movs	r1, #4
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <LCD9488_GUI_Clear+0xd8>)
 800449a:	f003 fe04 	bl	80080a6 <HAL_GPIO_WritePin>
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20009110 	.word	0x20009110
 80044ac:	40020800 	.word	0x40020800
 80044b0:	20008d18 	.word	0x20008d18

080044b4 <LCD9488_RESET>:

//=======================================================================================
void LCD9488_RESET(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	LCD9488_RST_CLR;
 80044b8:	2200      	movs	r2, #0
 80044ba:	2102      	movs	r1, #2
 80044bc:	4807      	ldr	r0, [pc, #28]	; (80044dc <LCD9488_RESET+0x28>)
 80044be:	f003 fdf2 	bl	80080a6 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80044c2:	2064      	movs	r0, #100	; 0x64
 80044c4:	f002 fb72 	bl	8006bac <HAL_Delay>
	LCD9488_RST_SET;
 80044c8:	2201      	movs	r2, #1
 80044ca:	2102      	movs	r1, #2
 80044cc:	4803      	ldr	r0, [pc, #12]	; (80044dc <LCD9488_RESET+0x28>)
 80044ce:	f003 fdea 	bl	80080a6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80044d2:	2032      	movs	r0, #50	; 0x32
 80044d4:	f002 fb6a 	bl	8006bac <HAL_Delay>
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40020800 	.word	0x40020800

080044e0 <LCD9488_GUI_SetWindows>:
//=======================================================================================
void LCD9488_GUI_SetWindows(uint16_t xStar, uint16_t yStar,uint16_t xEnd,uint16_t yEnd)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4604      	mov	r4, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	80fb      	strh	r3, [r7, #6]
 80044f2:	4603      	mov	r3, r0
 80044f4:	80bb      	strh	r3, [r7, #4]
 80044f6:	460b      	mov	r3, r1
 80044f8:	807b      	strh	r3, [r7, #2]
 80044fa:	4613      	mov	r3, r2
 80044fc:	803b      	strh	r3, [r7, #0]
	LCD9488_Transport_WR_REG(LCD9488_DEV.SetXcmd);
 80044fe:	4b21      	ldr	r3, [pc, #132]	; (8004584 <LCD9488_GUI_SetWindows+0xa4>)
 8004500:	895b      	ldrh	r3, [r3, #10]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fe8b 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(xStar>>8);
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	b29b      	uxth	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff feaa 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xStar);
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fea5 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(xEnd>>8);
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	b29b      	uxth	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fe9e 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xEnd);
 8004530:	887b      	ldrh	r3, [r7, #2]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fe99 	bl	800426c <LCD9488_Transport_WR_DATA>

	LCD9488_Transport_WR_REG(LCD9488_DEV.SetYcmd);
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <LCD9488_GUI_SetWindows+0xa4>)
 800453c:	899b      	ldrh	r3, [r3, #12]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fe6d 	bl	8004220 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(yStar>>8);
 8004546:	88bb      	ldrh	r3, [r7, #4]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	b29b      	uxth	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fe8c 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yStar);
 8004554:	88bb      	ldrh	r3, [r7, #4]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fe87 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(yEnd>>8);
 800455e:	883b      	ldrh	r3, [r7, #0]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	b29b      	uxth	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe80 	bl	800426c <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yEnd);
 800456c:	883b      	ldrh	r3, [r7, #0]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fe7b 	bl	800426c <LCD9488_Transport_WR_DATA>

	LCD9488_WriteRAM_Prepare();
 8004576:	f7ff fead 	bl	80042d4 <LCD9488_WriteRAM_Prepare>
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	bf00      	nop
 8004584:	20009110 	.word	0x20009110

08004588 <LCD9488_GUI_SetOrientation>:
//=======================================================================================
void LCD9488_GUI_SetOrientation(uint8_t direction)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
			LCD9488_DEV.SetXcmd=0x2A;
 8004592:	4b28      	ldr	r3, [pc, #160]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 8004594:	222a      	movs	r2, #42	; 0x2a
 8004596:	815a      	strh	r2, [r3, #10]
			LCD9488_DEV.SetYcmd=0x2B;
 8004598:	4b26      	ldr	r3, [pc, #152]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 800459a:	222b      	movs	r2, #43	; 0x2b
 800459c:	819a      	strh	r2, [r3, #12]
			LCD9488_DEV.WramCmd=0x2C;
 800459e:	4b25      	ldr	r3, [pc, #148]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 80045a0:	222c      	movs	r2, #44	; 0x2c
 80045a2:	811a      	strh	r2, [r3, #8]
	switch(direction){
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d83e      	bhi.n	8004628 <LCD9488_GUI_SetOrientation+0xa0>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <LCD9488_GUI_SetOrientation+0x28>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045db 	.word	0x080045db
 80045b8:	080045f5 	.word	0x080045f5
 80045bc:	0800460f 	.word	0x0800460f
		case 0:										// 0 degree
			LCD9488_DEV.Width=LCD_W;
 80045c0:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 80045c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045c6:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 80045ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045ce:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80045d0:	2108      	movs	r1, #8
 80045d2:	2036      	movs	r0, #54	; 0x36
 80045d4:	f7ff fe68 	bl	80042a8 <LCD9488_WriteReg>
		break;
 80045d8:	e027      	b.n	800462a <LCD9488_GUI_SetOrientation+0xa2>
		case 1:										// 90 degree
			LCD9488_DEV.Width=LCD_H;
 80045da:	4b16      	ldr	r3, [pc, #88]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 80045dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045e0:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 80045e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045e8:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80045ea:	2168      	movs	r1, #104	; 0x68
 80045ec:	2036      	movs	r0, #54	; 0x36
 80045ee:	f7ff fe5b 	bl	80042a8 <LCD9488_WriteReg>
		break;
 80045f2:	e01a      	b.n	800462a <LCD9488_GUI_SetOrientation+0xa2>
		case 2:										// 180 degree
			LCD9488_DEV.Width=LCD_W;
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 80045f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045fa:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 80045fe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004602:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8004604:	21c8      	movs	r1, #200	; 0xc8
 8004606:	2036      	movs	r0, #54	; 0x36
 8004608:	f7ff fe4e 	bl	80042a8 <LCD9488_WriteReg>
		break;
 800460c:	e00d      	b.n	800462a <LCD9488_GUI_SetOrientation+0xa2>
		case 3:										// 270 degree
			LCD9488_DEV.Width=LCD_H;
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 8004610:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004614:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <LCD9488_GUI_SetOrientation+0xac>)
 8004618:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800461c:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 800461e:	21a8      	movs	r1, #168	; 0xa8
 8004620:	2036      	movs	r0, #54	; 0x36
 8004622:	f7ff fe41 	bl	80042a8 <LCD9488_WriteReg>
		break;
 8004626:	e000      	b.n	800462a <LCD9488_GUI_SetOrientation+0xa2>
		default:break;
 8004628:	bf00      	nop
	}
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20009110 	.word	0x20009110

08004638 <LCD9488_GUI_SetCursor>:
//=======================================================================================
void LCD9488_GUI_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	460a      	mov	r2, r1
 8004642:	80fb      	strh	r3, [r7, #6]
 8004644:	4613      	mov	r3, r2
 8004646:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetWindows(Xpos,Ypos,Xpos,Ypos);										// Окно размером в 1 точку
 8004648:	88bb      	ldrh	r3, [r7, #4]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	88b9      	ldrh	r1, [r7, #4]
 800464e:	88f8      	ldrh	r0, [r7, #6]
 8004650:	f7ff ff46 	bl	80044e0 <LCD9488_GUI_SetWindows>
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <LCD9488_GUI_SetFont>:
		LCD9488_GUI_Fill(a,y,b,y,LCD9488_Point_Color);
	}
}
//=======================================================================================
void LCD9488_GUI_SetFont(unsigned char* AFont, uint16_t AFontColor, uint16_t ABackgroundColor) // Установить параметры для выбранного шрифта
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
 8004668:	4613      	mov	r3, r2
 800466a:	803b      	strh	r3, [r7, #0]
	LCD9488_CurrentFont = AFont;														// Указатель на массив с данными шрифта
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <LCD9488_GUI_SetFont+0x68>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
	LCD9488_Point_Color = AFontColor;													// Цвет пикселей рисования
 8004672:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <LCD9488_GUI_SetFont+0x6c>)
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	8013      	strh	r3, [r2, #0]
	LCD9488_Back_Color  = ABackgroundColor;												// Цвет фона
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <LCD9488_GUI_SetFont+0x70>)
 800467a:	883b      	ldrh	r3, [r7, #0]
 800467c:	8013      	strh	r3, [r2, #0]

	// Прочитать параметры шрифта
	LCD9488_CurrentFont_FirstChar		= LCD9488_CurrentFont[0];          				// Первый символ в наборе
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <LCD9488_GUI_SetFont+0x68>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <LCD9488_GUI_SetFont+0x74>)
 8004686:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_LastChar		= LCD9488_CurrentFont[1];          				// Последний символ в наборе
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <LCD9488_GUI_SetFont+0x68>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	785a      	ldrb	r2, [r3, #1]
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <LCD9488_GUI_SetFont+0x78>)
 8004690:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_Offset			= LCD9488_CurrentFont[2];          				// Число байтов на 1 символ в массиве шрифта
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <LCD9488_GUI_SetFont+0x68>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	789a      	ldrb	r2, [r3, #2]
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <LCD9488_GUI_SetFont+0x7c>)
 800469a:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixHoriz 		= LCD9488_CurrentFont[3];           			// Размер символов по горизонтали
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <LCD9488_GUI_SetFont+0x68>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	78da      	ldrb	r2, [r3, #3]
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <LCD9488_GUI_SetFont+0x80>)
 80046a4:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixVert 		= LCD9488_CurrentFont[4];                   	// Размер символов по вертикали
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <LCD9488_GUI_SetFont+0x68>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	791a      	ldrb	r2, [r3, #4]
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <LCD9488_GUI_SetFont+0x84>)
 80046ae:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_BytesPerLine	= LCD9488_CurrentFont[5];                   	// Число байт на 1 горизонтальную линию в символе
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <LCD9488_GUI_SetFont+0x68>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	795a      	ldrb	r2, [r3, #5]
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <LCD9488_GUI_SetFont+0x88>)
 80046b8:	701a      	strb	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	20008978 	.word	0x20008978
 80046c8:	2000034c 	.word	0x2000034c
 80046cc:	20000004 	.word	0x20000004
 80046d0:	20008aa0 	.word	0x20008aa0
 80046d4:	20008a04 	.word	0x20008a04
 80046d8:	20008a16 	.word	0x20008a16
 80046dc:	20008a15 	.word	0x20008a15
 80046e0:	20008a14 	.word	0x20008a14
 80046e4:	20008aa1 	.word	0x20008aa1

080046e8 <LCD9488_GUI_GotoXY>:
//=======================================================================================
void LCD9488_GUI_GotoXY(uint16_t x1, uint16_t y1)										// Установить координаты начала для печати символа или строки
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	460a      	mov	r2, r1
 80046f2:	80fb      	strh	r3, [r7, #6]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80bb      	strh	r3, [r7, #4]
	char_x = x1;
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	4a05      	ldr	r2, [pc, #20]	; (8004710 <LCD9488_GUI_GotoXY+0x28>)
 80046fc:	6013      	str	r3, [r2, #0]
	char_y = y1;
 80046fe:	88bb      	ldrh	r3, [r7, #4]
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <LCD9488_GUI_GotoXY+0x2c>)
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20008a10 	.word	0x20008a10
 8004714:	20008b38 	.word	0x20008b38

08004718 <LCD9488_GUI_Draw_Char>:
//=======================================================================================
void LCD9488_GUI_Draw_Char(uint16_t fc, uint16_t bc, uint8_t c, ADrawType Overlying)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	4623      	mov	r3, r4
 8004728:	80fb      	strh	r3, [r7, #6]
 800472a:	4603      	mov	r3, r0
 800472c:	80bb      	strh	r3, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	70fb      	strb	r3, [r7, #3]
 8004732:	4613      	mov	r3, r2
 8004734:	70bb      	strb	r3, [r7, #2]
    unsigned int b;
    unsigned char* CurCharBitmap;														// начало данных для текущего символа в массиве шрифта
    unsigned char z, cur_width;

    if ((c < LCD9488_CurrentFont_FirstChar) || (c > LCD9488_CurrentFont_LastChar))
 8004736:	4b74      	ldr	r3, [pc, #464]	; (8004908 <LCD9488_GUI_Draw_Char+0x1f0>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	429a      	cmp	r2, r3
 800473e:	f0c0 817b 	bcc.w	8004a38 <LCD9488_GUI_Draw_Char+0x320>
 8004742:	4b72      	ldr	r3, [pc, #456]	; (800490c <LCD9488_GUI_Draw_Char+0x1f4>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	429a      	cmp	r2, r3
 800474a:	f200 8175 	bhi.w	8004a38 <LCD9488_GUI_Draw_Char+0x320>
    {
    	return;  																		// работаем только с символами, которые есть в шрифте
    }

	c = c - LCD9488_CurrentFont_FirstChar; 												// сдвигаем до 1го символа в наборе (см ASCII таблицу)
 800474e:	4b6e      	ldr	r3, [pc, #440]	; (8004908 <LCD9488_GUI_Draw_Char+0x1f0>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	70fb      	strb	r3, [r7, #3]

    if (char_x + LCD9488_CurrentFont_PixHoriz > LCD9488_DEV.Width)
 8004758:	4b6d      	ldr	r3, [pc, #436]	; (8004910 <LCD9488_GUI_Draw_Char+0x1f8>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	4b6d      	ldr	r3, [pc, #436]	; (8004914 <LCD9488_GUI_Draw_Char+0x1fc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4413      	add	r3, r2
 8004764:	4a6c      	ldr	r2, [pc, #432]	; (8004918 <LCD9488_GUI_Draw_Char+0x200>)
 8004766:	8812      	ldrh	r2, [r2, #0]
 8004768:	4293      	cmp	r3, r2
 800476a:	d918      	bls.n	800479e <LCD9488_GUI_Draw_Char+0x86>
     {
         char_x = 0;
 800476c:	4b69      	ldr	r3, [pc, #420]	; (8004914 <LCD9488_GUI_Draw_Char+0x1fc>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
         char_y = char_y + LCD9488_CurrentFont_PixVert;
 8004772:	4b6a      	ldr	r3, [pc, #424]	; (800491c <LCD9488_GUI_Draw_Char+0x204>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	4b69      	ldr	r3, [pc, #420]	; (8004920 <LCD9488_GUI_Draw_Char+0x208>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4413      	add	r3, r2
 800477e:	4a68      	ldr	r2, [pc, #416]	; (8004920 <LCD9488_GUI_Draw_Char+0x208>)
 8004780:	6013      	str	r3, [r2, #0]
         if (char_y >= (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <LCD9488_GUI_Draw_Char+0x200>)
 8004784:	885b      	ldrh	r3, [r3, #2]
 8004786:	461a      	mov	r2, r3
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <LCD9488_GUI_Draw_Char+0x204>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	461a      	mov	r2, r3
 8004790:	4b63      	ldr	r3, [pc, #396]	; (8004920 <LCD9488_GUI_Draw_Char+0x208>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d802      	bhi.n	800479e <LCD9488_GUI_Draw_Char+0x86>
         {
             char_y = 0;
 8004798:	4b61      	ldr	r3, [pc, #388]	; (8004920 <LCD9488_GUI_Draw_Char+0x208>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
         }
     }

    CurCharBitmap = &LCD9488_CurrentFont[((c) * LCD9488_CurrentFont_Offset) + 6]; 		// начало массива текущего символа (с = номер символа; offset = сколько байтов на символ в шрифте; 6 = первые 6 байт во всем массиве - заголовок с параметрами шрифта)
 800479e:	4b61      	ldr	r3, [pc, #388]	; (8004924 <LCD9488_GUI_Draw_Char+0x20c>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	4960      	ldr	r1, [pc, #384]	; (8004928 <LCD9488_GUI_Draw_Char+0x210>)
 80047a6:	7809      	ldrb	r1, [r1, #0]
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	3306      	adds	r3, #6
 80047ae:	4413      	add	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

    cur_width = CurCharBitmap[0];                          								// ширина текущего символа - в начале каждого символа первый байт - его ширина
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	74fb      	strb	r3, [r7, #19]

    if (Overlying == DRAW_OVERLYING)													// Если режим наложения - рисуем только значащие точки символа поверх того что уже нарисовано (медленно)
 80047b8:	78bb      	ldrb	r3, [r7, #2]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d150      	bne.n	8004860 <LCD9488_GUI_Draw_Char+0x148>
    {
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80047be:	2300      	movs	r3, #0
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e03c      	b.n	800483e <LCD9488_GUI_Draw_Char+0x126>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80047c4:	2300      	movs	r3, #0
 80047c6:	77bb      	strb	r3, [r7, #30]
 80047c8:	e031      	b.n	800482e <LCD9488_GUI_Draw_Char+0x116>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3) + 1];
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <LCD9488_GUI_Draw_Char+0x214>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	7fbb      	ldrb	r3, [r7, #30]
 80047d2:	fb03 f302 	mul.w	r3, r3, r2
 80047d6:	7ffa      	ldrb	r2, [r7, #31]
 80047d8:	08d2      	lsrs	r2, r2, #3
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	4413      	add	r3, r2
 80047de:	3301      	adds	r3, #1
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4413      	add	r3, r2
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	74bb      	strb	r3, [r7, #18]

               b = 1 << (cur_y & 0x07);
 80047e8:	7ffb      	ldrb	r3, [r7, #31]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	2201      	movs	r2, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 80047f6:	7cba      	ldrb	r2, [r7, #18]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <LCD9488_GUI_Draw_Char+0x110>
               {

               }
               else																		// точка изображения символа
               {
            	   LCD9488_Point_Color = fc;											// устанавливаем цвет точки
 8004800:	4a4b      	ldr	r2, [pc, #300]	; (8004930 <LCD9488_GUI_Draw_Char+0x218>)
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	8013      	strh	r3, [r2, #0]
            	   LCD9488_GUI_Draw_Point(char_x + cur_x, char_y + cur_y);				// Рисуем точку по координатам
 8004806:	7fbb      	ldrb	r3, [r7, #30]
 8004808:	b29a      	uxth	r2, r3
 800480a:	4b42      	ldr	r3, [pc, #264]	; (8004914 <LCD9488_GUI_Draw_Char+0x1fc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	4413      	add	r3, r2
 8004812:	b298      	uxth	r0, r3
 8004814:	7ffb      	ldrb	r3, [r7, #31]
 8004816:	b29a      	uxth	r2, r3
 8004818:	4b41      	ldr	r3, [pc, #260]	; (8004920 <LCD9488_GUI_Draw_Char+0x208>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	4413      	add	r3, r2
 8004820:	b29b      	uxth	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	f7ff fdbc 	bl	80043a0 <LCD9488_GUI_Draw_Point>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 8004828:	7fbb      	ldrb	r3, [r7, #30]
 800482a:	3301      	adds	r3, #1
 800482c:	77bb      	strb	r3, [r7, #30]
 800482e:	4b38      	ldr	r3, [pc, #224]	; (8004910 <LCD9488_GUI_Draw_Char+0x1f8>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	7fba      	ldrb	r2, [r7, #30]
 8004834:	429a      	cmp	r2, r3
 8004836:	d3c8      	bcc.n	80047ca <LCD9488_GUI_Draw_Char+0xb2>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8004838:	7ffb      	ldrb	r3, [r7, #31]
 800483a:	3301      	adds	r3, #1
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <LCD9488_GUI_Draw_Char+0x204>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	7ffa      	ldrb	r2, [r7, #31]
 8004844:	429a      	cmp	r2, r3
 8004846:	d3bd      	bcc.n	80047c4 <LCD9488_GUI_Draw_Char+0xac>
               }


           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 8004848:	4b33      	ldr	r3, [pc, #204]	; (8004918 <LCD9488_GUI_Draw_Char+0x200>)
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	4b31      	ldr	r3, [pc, #196]	; (8004918 <LCD9488_GUI_Draw_Char+0x200>)
 8004852:	885b      	ldrh	r3, [r3, #2]
 8004854:	3b01      	subs	r3, #1
 8004856:	b29b      	uxth	r3, r3
 8004858:	2100      	movs	r1, #0
 800485a:	2000      	movs	r0, #0
 800485c:	f7ff fe40 	bl	80044e0 <LCD9488_GUI_SetWindows>

    }
    if (Overlying == DRAW_NO_OVERLYING)													// Если НЕ режим наложения - рисуем символ цветом fc на фоне bc
 8004860:	78bb      	ldrb	r3, [r7, #2]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 80d1 	bne.w	8004a0a <LCD9488_GUI_Draw_Char+0x2f2>
    {
    	uint8_t red, green, blue;														// цветовые компопнеты точки

        LCD9488_GUI_SetWindows(char_x, char_y, char_x + LCD9488_CurrentFont_PixHoriz - 1, char_y + LCD9488_CurrentFont_PixVert);
 8004868:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <LCD9488_GUI_Draw_Char+0x1fc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b298      	uxth	r0, r3
 800486e:	4b2c      	ldr	r3, [pc, #176]	; (8004920 <LCD9488_GUI_Draw_Char+0x208>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	b299      	uxth	r1, r3
 8004874:	4b26      	ldr	r3, [pc, #152]	; (8004910 <LCD9488_GUI_Draw_Char+0x1f8>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b29a      	uxth	r2, r3
 800487a:	4b26      	ldr	r3, [pc, #152]	; (8004914 <LCD9488_GUI_Draw_Char+0x1fc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	4413      	add	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29c      	uxth	r4, r3
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <LCD9488_GUI_Draw_Char+0x204>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <LCD9488_GUI_Draw_Char+0x208>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	4413      	add	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	4622      	mov	r2, r4
 800489a:	f7ff fe21 	bl	80044e0 <LCD9488_GUI_SetWindows>

        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 800489e:	2300      	movs	r3, #0
 80048a0:	76bb      	strb	r3, [r7, #26]
 80048a2:	e0a0      	b.n	80049e6 <LCD9488_GUI_Draw_Char+0x2ce>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80048a4:	2300      	movs	r3, #0
 80048a6:	767b      	strb	r3, [r7, #25]
 80048a8:	e094      	b.n	80049d4 <LCD9488_GUI_Draw_Char+0x2bc>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3)+1];
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <LCD9488_GUI_Draw_Char+0x214>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	7e7b      	ldrb	r3, [r7, #25]
 80048b2:	fb03 f302 	mul.w	r3, r3, r2
 80048b6:	7eba      	ldrb	r2, [r7, #26]
 80048b8:	08d2      	lsrs	r2, r2, #3
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	4413      	add	r3, r2
 80048be:	3301      	adds	r3, #1
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4413      	add	r3, r2
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	74bb      	strb	r3, [r7, #18]
               b = 1 << (cur_y & 0x07);
 80048c8:	7ebb      	ldrb	r3, [r7, #26]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2201      	movs	r2, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 80048d6:	7cba      	ldrb	r2, [r7, #18]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d129      	bne.n	8004934 <LCD9488_GUI_Draw_Char+0x21c>
               {
            	   red		= (bc>>8)&0xF8;
 80048e0:	88bb      	ldrh	r3, [r7, #4]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f023 0307 	bic.w	r3, r3, #7
 80048ec:	777b      	strb	r3, [r7, #29]
            	   green 	= (bc>>3)&0xFC;
 80048ee:	88bb      	ldrh	r3, [r7, #4]
 80048f0:	08db      	lsrs	r3, r3, #3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f023 0303 	bic.w	r3, r3, #3
 80048fa:	773b      	strb	r3, [r7, #28]
            	   blue	= bc<<3;
 80048fc:	88bb      	ldrh	r3, [r7, #4]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	e028      	b.n	8004958 <LCD9488_GUI_Draw_Char+0x240>
 8004906:	bf00      	nop
 8004908:	20008aa0 	.word	0x20008aa0
 800490c:	20008a04 	.word	0x20008a04
 8004910:	20008a15 	.word	0x20008a15
 8004914:	20008a10 	.word	0x20008a10
 8004918:	20009110 	.word	0x20009110
 800491c:	20008a14 	.word	0x20008a14
 8004920:	20008b38 	.word	0x20008b38
 8004924:	20008978 	.word	0x20008978
 8004928:	20008a16 	.word	0x20008a16
 800492c:	20008aa1 	.word	0x20008aa1
 8004930:	2000034c 	.word	0x2000034c
               }
               else																		// точка изображения символа
               {
                  	red		= (fc>>8)&0xF8;
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	b29b      	uxth	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f023 0307 	bic.w	r3, r3, #7
 8004940:	777b      	strb	r3, [r7, #29]
                  	green 	= (fc>>3)&0xFC;
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	b29b      	uxth	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	773b      	strb	r3, [r7, #28]
                  	blue	= fc<<3;
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	76fb      	strb	r3, [r7, #27]
               }
               // Пишет компонеты цветов для текущей точик в символе
               LCD9488_CS_CLR;
 8004958:	2200      	movs	r2, #0
 800495a:	2104      	movs	r1, #4
 800495c:	4838      	ldr	r0, [pc, #224]	; (8004a40 <LCD9488_GUI_Draw_Char+0x328>)
 800495e:	f003 fba2 	bl	80080a6 <HAL_GPIO_WritePin>
               LCD9488_RS_SET;
 8004962:	2201      	movs	r2, #1
 8004964:	2101      	movs	r1, #1
 8004966:	4836      	ldr	r0, [pc, #216]	; (8004a40 <LCD9488_GUI_Draw_Char+0x328>)
 8004968:	f003 fb9d 	bl	80080a6 <HAL_GPIO_WritePin>
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800496c:	bf00      	nop
 800496e:	4b35      	ldr	r3, [pc, #212]	; (8004a44 <LCD9488_GUI_Draw_Char+0x32c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f8      	beq.n	800496e <LCD9488_GUI_Draw_Char+0x256>
               	   LCD_SPI.Instance->DR = red;
 800497c:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <LCD9488_GUI_Draw_Char+0x32c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	7f7a      	ldrb	r2, [r7, #29]
 8004982:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004984:	bf00      	nop
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <LCD9488_GUI_Draw_Char+0x32c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f8      	beq.n	8004986 <LCD9488_GUI_Draw_Char+0x26e>
               	   LCD_SPI.Instance->DR = green;
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <LCD9488_GUI_Draw_Char+0x32c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	7f3a      	ldrb	r2, [r7, #28]
 800499a:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800499c:	bf00      	nop
 800499e:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <LCD9488_GUI_Draw_Char+0x32c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f8      	beq.n	800499e <LCD9488_GUI_Draw_Char+0x286>
               	   LCD_SPI.Instance->DR = blue;
 80049ac:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <LCD9488_GUI_Draw_Char+0x32c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	7efa      	ldrb	r2, [r7, #27]
 80049b2:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80049b4:	bf00      	nop
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <LCD9488_GUI_Draw_Char+0x32c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f8      	beq.n	80049b6 <LCD9488_GUI_Draw_Char+0x29e>

               LCD9488_CS_SET;
 80049c4:	2201      	movs	r2, #1
 80049c6:	2104      	movs	r1, #4
 80049c8:	481d      	ldr	r0, [pc, #116]	; (8004a40 <LCD9488_GUI_Draw_Char+0x328>)
 80049ca:	f003 fb6c 	bl	80080a6 <HAL_GPIO_WritePin>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80049ce:	7e7b      	ldrb	r3, [r7, #25]
 80049d0:	3301      	adds	r3, #1
 80049d2:	767b      	strb	r3, [r7, #25]
 80049d4:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <LCD9488_GUI_Draw_Char+0x330>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	7e7a      	ldrb	r2, [r7, #25]
 80049da:	429a      	cmp	r2, r3
 80049dc:	f4ff af65 	bcc.w	80048aa <LCD9488_GUI_Draw_Char+0x192>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80049e0:	7ebb      	ldrb	r3, [r7, #26]
 80049e2:	3301      	adds	r3, #1
 80049e4:	76bb      	strb	r3, [r7, #26]
 80049e6:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <LCD9488_GUI_Draw_Char+0x334>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	7eba      	ldrb	r2, [r7, #26]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	f4ff af59 	bcc.w	80048a4 <LCD9488_GUI_Draw_Char+0x18c>
           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 80049f2:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <LCD9488_GUI_Draw_Char+0x338>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <LCD9488_GUI_Draw_Char+0x338>)
 80049fc:	885b      	ldrh	r3, [r3, #2]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2100      	movs	r1, #0
 8004a04:	2000      	movs	r0, #0
 8004a06:	f7ff fd6b 	bl	80044e0 <LCD9488_GUI_SetWindows>
    }

    // Сдвигаем позицию (char_x, char_y) для печати следующего символа
    if ((cur_width + 2) < LCD9488_CurrentFont_PixHoriz)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <LCD9488_GUI_Draw_Char+0x330>)
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	da07      	bge.n	8004a26 <LCD9488_GUI_Draw_Char+0x30e>
    {
        char_x = char_x + cur_width + 2;
 8004a16:	7cfa      	ldrb	r2, [r7, #19]
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	e009      	b.n	8004a3a <LCD9488_GUI_Draw_Char+0x322>
    }
    else
    {
    	char_x = char_x + LCD9488_CurrentFont_PixHoriz;
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <LCD9488_GUI_Draw_Char+0x330>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4413      	add	r3, r2
 8004a32:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <LCD9488_GUI_Draw_Char+0x33c>)
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e000      	b.n	8004a3a <LCD9488_GUI_Draw_Char+0x322>
    	return;  																		// работаем только с символами, которые есть в шрифте
 8004a38:	bf00      	nop
    }
}
 8004a3a:	3724      	adds	r7, #36	; 0x24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	40020800 	.word	0x40020800
 8004a44:	20008d18 	.word	0x20008d18
 8004a48:	20008a15 	.word	0x20008a15
 8004a4c:	20008a14 	.word	0x20008a14
 8004a50:	20009110 	.word	0x20009110
 8004a54:	20008a10 	.word	0x20008a10

08004a58 <LCD9488_GUI_Draw_StringColor>:
        p++;
    }
}
//=======================================================================================
void LCD9488_GUI_Draw_StringColor(uint16_t x, uint16_t y, char* str, unsigned char* font, uint16_t fontcolor, uint16_t bgcolor, ADrawType Overlying)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60ba      	str	r2, [r7, #8]
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	4603      	mov	r3, r0
 8004a64:	81fb      	strh	r3, [r7, #14]
 8004a66:	460b      	mov	r3, r1
 8004a68:	81bb      	strh	r3, [r7, #12]
	uint16_t x0 = x;
 8004a6a:	89fb      	ldrh	r3, [r7, #14]
 8004a6c:	82fb      	strh	r3, [r7, #22]

  	LCD9488_GUI_SetFont(font, fontcolor, bgcolor);
 8004a6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a70:	8c3b      	ldrh	r3, [r7, #32]
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fdf1 	bl	800465c <LCD9488_GUI_SetFont>
  	LCD9488_GUI_GotoXY(x, y);
 8004a7a:	89ba      	ldrh	r2, [r7, #12]
 8004a7c:	89fb      	ldrh	r3, [r7, #14]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fe31 	bl	80046e8 <LCD9488_GUI_GotoXY>
    while(*str != 0)
 8004a86:	e030      	b.n	8004aea <LCD9488_GUI_Draw_StringColor+0x92>
    {
		if( x > (LCD9488_DEV.Width - LCD9488_CurrentFont_PixHoriz/2) || y > (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 8004a88:	89fa      	ldrh	r2, [r7, #14]
 8004a8a:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <LCD9488_GUI_Draw_StringColor+0xa4>)
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <LCD9488_GUI_Draw_StringColor+0xa8>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	1acb      	subs	r3, r1, r3
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	dc2a      	bgt.n	8004af4 <LCD9488_GUI_Draw_StringColor+0x9c>
 8004a9e:	89ba      	ldrh	r2, [r7, #12]
 8004aa0:	4b16      	ldr	r3, [pc, #88]	; (8004afc <LCD9488_GUI_Draw_StringColor+0xa4>)
 8004aa2:	885b      	ldrh	r3, [r3, #2]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <LCD9488_GUI_Draw_StringColor+0xac>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	429a      	cmp	r2, r3
 8004aae:	dc21      	bgt.n	8004af4 <LCD9488_GUI_Draw_StringColor+0x9c>
			return;

		if(*str == 0x0D)															// конец строки, перевод на новую строку
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b0d      	cmp	r3, #13
 8004ab6:	d10b      	bne.n	8004ad0 <LCD9488_GUI_Draw_StringColor+0x78>
        {
            y = y + LCD9488_CurrentFont_PixVert;
 8004ab8:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <LCD9488_GUI_Draw_StringColor+0xac>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	89bb      	ldrh	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	81bb      	strh	r3, [r7, #12]
			x = x0;
 8004ac4:	8afb      	ldrh	r3, [r7, #22]
 8004ac6:	81fb      	strh	r3, [r7, #14]
            str++;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	e009      	b.n	8004ae4 <LCD9488_GUI_Draw_StringColor+0x8c>
        }
        else
		{
        	LCD9488_GUI_Draw_Char(LCD9488_Point_Color,LCD9488_Back_Color,*str, Overlying);
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <LCD9488_GUI_Draw_StringColor+0xb0>)
 8004ad2:	8818      	ldrh	r0, [r3, #0]
 8004ad4:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <LCD9488_GUI_Draw_StringColor+0xb4>)
 8004ad6:	8819      	ldrh	r1, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ae0:	f7ff fe1a 	bl	8004718 <LCD9488_GUI_Draw_Char>
		}
		str++;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
    while(*str != 0)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1ca      	bne.n	8004a88 <LCD9488_GUI_Draw_StringColor+0x30>
 8004af2:	e000      	b.n	8004af6 <LCD9488_GUI_Draw_StringColor+0x9e>
			return;
 8004af4:	bf00      	nop
    }
}
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20009110 	.word	0x20009110
 8004b00:	20008a15 	.word	0x20008a15
 8004b04:	20008a14 	.word	0x20008a14
 8004b08:	2000034c 	.word	0x2000034c
 8004b0c:	20000004 	.word	0x20000004

08004b10 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	5c8a      	ldrb	r2, [r1, r2]
 8004b24:	4413      	add	r3, r2
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b3f      	cmp	r3, #63	; 0x3f
 8004b2e:	dd02      	ble.n	8004b36 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b40      	subs	r3, #64	; 0x40
 8004b34:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	5cd3      	ldrb	r3, [r2, r3]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <hist_is_space_for_new+0x1a>
		return true;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e01e      	b.n	8004b9e <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	db0c      	blt.n	8004b86 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	4413      	add	r3, r2
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	da0c      	bge.n	8004b9c <hist_is_space_for_new+0x56>
			return true;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e00b      	b.n	8004b9e <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	da01      	bge.n	8004b9c <hist_is_space_for_new+0x56>
			return true;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <hist_is_space_for_new+0x58>
	}
	return false;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb8:	dc61      	bgt.n	8004c7e <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8004bba:	e002      	b.n	8004bc2 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff ffa7 	bl	8004b10 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff ffbe 	bl	8004b46 <hist_is_space_for_new>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f5      	beq.n	8004bbc <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	b2d1      	uxtb	r1, r2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bec:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	da0a      	bge.n	8004c0c <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	4413      	add	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f010 f941 	bl	8014e8c <memcpy>
 8004c0a:	e018      	b.n	8004c3e <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004c14:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f010 f931 	bl	8014e8c <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	18d1      	adds	r1, r2, r3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f010 f927 	bl	8014e8c <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	b2d1      	uxtb	r1, r2
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4413      	add	r3, r2
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	2b3f      	cmp	r3, #63	; 0x3f
 8004c5e:	dd05      	ble.n	8004c6c <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	2100      	movs	r1, #0
 8004c74:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	649a      	str	r2, [r3, #72]	; 0x48
 8004c7c:	e000      	b.n	8004c80 <hist_save_line+0xd8>
		return;
 8004c7e:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08c      	sub	sp, #48	; 0x30
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8004c9c:	e010      	b.n	8004cc0 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004caa:	4413      	add	r3, r2
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	2b3f      	cmp	r3, #63	; 0x3f
 8004cb2:	dd02      	ble.n	8004cba <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	3b40      	subs	r3, #64	; 0x40
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	4413      	add	r3, r2
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e8      	bne.n	8004c9e <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d176      	bne.n	8004dc0 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	f2c0 80d6 	blt.w	8004e8a <hist_restore_line+0x204>
			int header = pThis->begin;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004ce8:	e010      	b.n	8004d0c <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	4413      	add	r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	4413      	add	r3, r2
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	2b3f      	cmp	r3, #63	; 0x3f
 8004cfe:	dd02      	ble.n	8004d06 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	3b40      	subs	r3, #64	; 0x40
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	4413      	add	r3, r2
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <hist_restore_line+0xa2>
 8004d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d1e0      	bne.n	8004cea <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	4413      	add	r3, r2
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80aa 	beq.w	8004e8a <hist_restore_line+0x204>
					pThis->cur++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	4413      	add	r3, r2
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	4413      	add	r3, r2
 8004d4e:	2b3f      	cmp	r3, #63	; 0x3f
 8004d50:	dc11      	bgt.n	8004d76 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8004d52:	2265      	movs	r2, #101	; 0x65
 8004d54:	2100      	movs	r1, #0
 8004d56:	68b8      	ldr	r0, [r7, #8]
 8004d58:	f010 f8bc 	bl	8014ed4 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	3301      	adds	r3, #1
 8004d62:	18d1      	adds	r1, r2, r3
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	4413      	add	r3, r2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68b8      	ldr	r0, [r7, #8]
 8004d70:	f010 f88c 	bl	8014e8c <memcpy>
 8004d74:	e01f      	b.n	8004db6 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004d7c:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8004d7e:	2265      	movs	r2, #101	; 0x65
 8004d80:	2100      	movs	r1, #0
 8004d82:	68b8      	ldr	r0, [r7, #8]
 8004d84:	f010 f8a6 	bl	8014ed4 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4619      	mov	r1, r3
 8004d94:	68b8      	ldr	r0, [r7, #8]
 8004d96:	f010 f879 	bl	8014e8c <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	18d0      	adds	r0, r2, r3
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	4413      	add	r3, r2
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	f010 f86b 	bl	8014e8c <memcpy>
				}
				return pThis->ring_buf[header];
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	4413      	add	r3, r2
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	e066      	b.n	8004e8e <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dd5e      	ble.n	8004e86 <hist_restore_line+0x200>
				pThis->cur--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004ddc:	e010      	b.n	8004e00 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b3f      	cmp	r3, #63	; 0x3f
 8004df2:	dd02      	ble.n	8004dfa <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3b40      	subs	r3, #64	; 0x40
 8004df8:	61fb      	str	r3, [r7, #28]
				j++;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d006      	beq.n	8004e1a <hist_restore_line+0x194>
 8004e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	1ad2      	subs	r2, r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d1e1      	bne.n	8004dde <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	2b3f      	cmp	r3, #63	; 0x3f
 8004e2a:	dc0c      	bgt.n	8004e46 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3301      	adds	r3, #1
 8004e32:	18d1      	adds	r1, r2, r3
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68b8      	ldr	r0, [r7, #8]
 8004e40:	f010 f824 	bl	8014e8c <memcpy>
 8004e44:	e01a      	b.n	8004e7c <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004e4c:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68b8      	ldr	r0, [r7, #8]
 8004e5c:	f010 f816 	bl	8014e8c <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	18d0      	adds	r0, r2, r3
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	f010 f808 	bl	8014e8c <memcpy>
			}
			return pThis->ring_buf[header];
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	e003      	b.n	8004e8e <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e001      	b.n	8004e8e <hist_restore_line+0x208>
		}
	}
	return -1;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3730      	adds	r7, #48	; 0x30
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
	int i = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004eaa:	e002      	b.n	8004eb2 <split+0x1c>
			ind++;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3354      	adds	r3, #84	; 0x54
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <split+0x32>
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	dbf1      	blt.n	8004eac <split+0x16>
		}
		if (!(ind < limit)) return i;
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	db01      	blt.n	8004ed4 <split+0x3e>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	e024      	b.n	8004f1e <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1c58      	adds	r0, r3, #1
 8004ee0:	6178      	str	r0, [r7, #20]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4403      	add	r3, r0
 8004ee8:	440a      	add	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b07      	cmp	r3, #7
 8004ef0:	dd05      	ble.n	8004efe <split+0x68>
			return -1;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	e012      	b.n	8004f1e <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	3301      	adds	r3, #1
 8004efc:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	3354      	adds	r3, #84	; 0x54
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <split+0x7e>
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	dbf1      	blt.n	8004ef8 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	dbca      	blt.n	8004eb2 <split+0x1c>
 8004f1c:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4798      	blx	r3
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <terminal_backspace+0x30>)
 8004f52:	7b5b      	ldrb	r3, [r3, #13]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <terminal_backspace+0x1c>
	{
		pThis->print (ENDL);    // new line
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f5e:	4807      	ldr	r0, [pc, #28]	; (8004f7c <terminal_backspace+0x34>)
 8004f60:	4798      	blx	r3
	else
	{
		pThis->print ("\033[D \033[D");
	}

}
 8004f62:	e004      	b.n	8004f6e <terminal_backspace+0x26>
		pThis->print ("\033[D \033[D");
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f6a:	4805      	ldr	r0, [pc, #20]	; (8004f80 <terminal_backspace+0x38>)
 8004f6c:	4798      	blx	r3
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20008c18 	.word	0x20008c18
 8004f7c:	08019df8 	.word	0x08019df8
 8004f80:	08019dfc 	.word	0x08019dfc

08004f84 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f92:	4803      	ldr	r0, [pc, #12]	; (8004fa0 <terminal_newline+0x1c>)
 8004f94:	4798      	blx	r3
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	08019df8 	.word	0x08019df8

08004fa4 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	809a      	strh	r2, [r3, #4]
	int i = 0, j;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d235      	bcs.n	8005030 <u16bit_to_str+0x8c>
		while (nmb > 0) {
 8004fc4:	e01a      	b.n	8004ffc <u16bit_to_str+0x58>
			tmp_str[i++] = (nmb % 10) + '0';
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <u16bit_to_str+0xa0>)
 8004fca:	fba3 2301 	umull	r2, r3, r3, r1
 8004fce:	08da      	lsrs	r2, r3, #3
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	1aca      	subs	r2, r1, r3
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	6179      	str	r1, [r7, #20]
 8004fe2:	3230      	adds	r2, #48	; 0x30
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	f107 0118 	add.w	r1, r7, #24
 8004fea:	440b      	add	r3, r1
 8004fec:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a14      	ldr	r2, [pc, #80]	; (8005044 <u16bit_to_str+0xa0>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e1      	bne.n	8004fc6 <u16bit_to_str+0x22>
		}
		for (j = 0; j < i; ++j)
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	e00f      	b.n	8005028 <u16bit_to_str+0x84>
			*(buf++) = tmp_str [i-j-1];
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	6039      	str	r1, [r7, #0]
 8005016:	f107 0118 	add.w	r1, r7, #24
 800501a:	440a      	add	r2, r1
 800501c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005020:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	3301      	adds	r3, #1
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	dbeb      	blt.n	8005008 <u16bit_to_str+0x64>
	}
	*buf = '\0';
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
	return buf;
 8005036:	683b      	ldr	r3, [r7, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	cccccccd 	.word	0xcccccccd

08005048 <terminal_move_cursor>:
#endif

//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <terminal_move_cursor+0xa4>)
 8005054:	7b5b      	ldrb	r3, [r3, #13]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <terminal_move_cursor+0x1e>
	{
		pThis->print (ENDL);    // new line
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005060:	4823      	ldr	r0, [pc, #140]	; (80050f0 <terminal_move_cursor+0xa8>)
 8005062:	4798      	blx	r3
 8005064:	e03f      	b.n	80050e6 <terminal_move_cursor+0x9e>
	}
	else
	{
		char str[16] = {0,};
 8005066:	f107 030c 	add.w	r3, r7, #12
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	60da      	str	r2, [r3, #12]
			} else if (offset < 0) {
				snprintf (str, 16, "\033[%dD", -(offset));
			}
		#else
			char *endstr;
			strcpy (str, "\033[");
 8005074:	f107 030c 	add.w	r3, r7, #12
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <terminal_move_cursor+0xac>)
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	4611      	mov	r1, r2
 800507e:	8019      	strh	r1, [r3, #0]
 8005080:	3302      	adds	r3, #2
 8005082:	0c12      	lsrs	r2, r2, #16
 8005084:	701a      	strb	r2, [r3, #0]
			if (offset > 0) {
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	dd0f      	ble.n	80050ac <terminal_move_cursor+0x64>
				endstr = u16bit_to_str (offset, str+2);
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	3302      	adds	r3, #2
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f7ff ff84 	bl	8004fa4 <u16bit_to_str>
 800509c:	61f8      	str	r0, [r7, #28]
				strcpy (endstr, "C");
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4915      	ldr	r1, [pc, #84]	; (80050f8 <terminal_move_cursor+0xb0>)
 80050a2:	461a      	mov	r2, r3
 80050a4:	460b      	mov	r3, r1
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	8013      	strh	r3, [r2, #0]
 80050aa:	e013      	b.n	80050d4 <terminal_move_cursor+0x8c>
			} else if (offset < 0) {
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	da18      	bge.n	80050e4 <terminal_move_cursor+0x9c>
				endstr = u16bit_to_str (-(offset), str+2);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	425b      	negs	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	3302      	adds	r3, #2
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f7ff ff6f 	bl	8004fa4 <u16bit_to_str>
 80050c6:	61f8      	str	r0, [r7, #28]
				strcpy (endstr, "D");
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	490c      	ldr	r1, [pc, #48]	; (80050fc <terminal_move_cursor+0xb4>)
 80050cc:	461a      	mov	r2, r3
 80050ce:	460b      	mov	r3, r1
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	8013      	strh	r3, [r2, #0]
			} else
				return;
		#endif
			pThis->print (str);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80050da:	f107 020c 	add.w	r2, r7, #12
 80050de:	4610      	mov	r0, r2
 80050e0:	4798      	blx	r3
 80050e2:	e000      	b.n	80050e6 <terminal_move_cursor+0x9e>
				return;
 80050e4:	bf00      	nop
	}
}
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20008c18 	.word	0x20008c18
 80050f0:	08019df8 	.word	0x08019df8
 80050f4:	08019e04 	.word	0x08019e04
 80050f8:	08019e08 	.word	0x08019e08
 80050fc:	08019e0c 	.word	0x08019e0c

08005100 <terminal_reset_cursor>:
//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	char str[16];
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <terminal_reset_cursor+0x78>)
 800510a:	7b5b      	ldrb	r3, [r3, #13]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <terminal_reset_cursor+0x1c>
	{
		pThis->print (ENDL);    // new line
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005116:	4819      	ldr	r0, [pc, #100]	; (800517c <terminal_reset_cursor+0x7c>)
 8005118:	4798      	blx	r3
			endstr = u16bit_to_str (_PROMPT_LEN, endstr);
			strcpy (endstr, "C");
		#endif
			pThis->print (str);
	}
}
 800511a:	e029      	b.n	8005170 <terminal_reset_cursor+0x70>
			strcpy (str, "\033[");
 800511c:	f107 030c 	add.w	r3, r7, #12
 8005120:	4a17      	ldr	r2, [pc, #92]	; (8005180 <terminal_reset_cursor+0x80>)
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	4611      	mov	r1, r2
 8005126:	8019      	strh	r1, [r3, #0]
 8005128:	3302      	adds	r3, #2
 800512a:	0c12      	lsrs	r2, r2, #16
 800512c:	701a      	strb	r2, [r3, #0]
			endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	3302      	adds	r3, #2
 8005134:	4619      	mov	r1, r3
 8005136:	206c      	movs	r0, #108	; 0x6c
 8005138:	f7ff ff34 	bl	8004fa4 <u16bit_to_str>
 800513c:	61f8      	str	r0, [r7, #28]
			strcpy (endstr, "D\033["); endstr += 3;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4a10      	ldr	r2, [pc, #64]	; (8005184 <terminal_reset_cursor+0x84>)
 8005142:	6810      	ldr	r0, [r2, #0]
 8005144:	6018      	str	r0, [r3, #0]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3303      	adds	r3, #3
 800514a:	61fb      	str	r3, [r7, #28]
			endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 800514c:	69f9      	ldr	r1, [r7, #28]
 800514e:	2005      	movs	r0, #5
 8005150:	f7ff ff28 	bl	8004fa4 <u16bit_to_str>
 8005154:	61f8      	str	r0, [r7, #28]
			strcpy (endstr, "C");
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	490b      	ldr	r1, [pc, #44]	; (8005188 <terminal_reset_cursor+0x88>)
 800515a:	461a      	mov	r2, r3
 800515c:	460b      	mov	r3, r1
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	8013      	strh	r3, [r2, #0]
			pThis->print (str);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005168:	f107 020c 	add.w	r2, r7, #12
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
}
 8005170:	bf00      	nop
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20008c18 	.word	0x20008c18
 800517c:	08019df8 	.word	0x08019df8
 8005180:	08019e04 	.word	0x08019e04
 8005184:	08019e10 	.word	0x08019e10
 8005188:	08019e08 	.word	0x08019e08

0800518c <terminal_print_line>:
//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 8005198:	4b22      	ldr	r3, [pc, #136]	; (8005224 <terminal_print_line+0x98>)
 800519a:	7b5b      	ldrb	r3, [r3, #13]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <terminal_print_line+0x20>
	{
		pThis->print (ENDL);    // new line
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80051a6:	4820      	ldr	r0, [pc, #128]	; (8005228 <terminal_print_line+0x9c>)
 80051a8:	4798      	blx	r3
 80051aa:	e004      	b.n	80051b6 <terminal_print_line+0x2a>
	}
	else
	{
		pThis->print ("\033[K");    // delete all from cursor to end
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80051b2:	481e      	ldr	r0, [pc, #120]	; (800522c <terminal_print_line+0xa0>)
 80051b4:	4798      	blx	r3
	}

	char nch [] = {0,0};
 80051b6:	2300      	movs	r3, #0
 80051b8:	743b      	strb	r3, [r7, #16]
 80051ba:	2300      	movs	r3, #0
 80051bc:	747b      	strb	r3, [r7, #17]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e014      	b.n	80051ee <terminal_print_line+0x62>
		nch [0] = pThis->cmdline [i];
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4413      	add	r3, r2
 80051ca:	3354      	adds	r3, #84	; 0x54
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80051d0:	7c3b      	ldrb	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <terminal_print_line+0x4e>
			nch[0] = ' ';
 80051d6:	2320      	movs	r3, #32
 80051d8:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80051e0:	f107 0210 	add.w	r2, r7, #16
 80051e4:	4610      	mov	r0, r2
 80051e6:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3301      	adds	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	dbe4      	blt.n	80051c4 <terminal_print_line+0x38>
	}
	
	if (ExchangeStruct.TerminalFormat != TERMINALFORMAT_HUMAN)
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <terminal_print_line+0x98>)
 80051fc:	7b5b      	ldrb	r3, [r3, #13]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <terminal_print_line+0x82>
	{
		pThis->print (ENDL);    // new line
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005208:	4807      	ldr	r0, [pc, #28]	; (8005228 <terminal_print_line+0x9c>)
 800520a:	4798      	blx	r3
	else
	{
		terminal_reset_cursor (pThis);
		terminal_move_cursor (pThis, cursor);
	}
}
 800520c:	e006      	b.n	800521c <terminal_print_line+0x90>
		terminal_reset_cursor (pThis);
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f7ff ff76 	bl	8005100 <terminal_reset_cursor>
		terminal_move_cursor (pThis, cursor);
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff ff16 	bl	8005048 <terminal_move_cursor>
}
 800521c:	bf00      	nop
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20008c18 	.word	0x20008c18
 8005228:	08019df8 	.word	0x08019df8
 800522c:	08019e14 	.word	0x08019e14

08005230 <microrl_init>:
//	terminal_reset_cursor (pThis);
//	terminal_move_cursor (pThis, cursor);
//}

void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3354      	adds	r3, #84	; 0x54
 800523e:	2265      	movs	r2, #101	; 0x65
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f00f fe46 	bl	8014ed4 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f00f fe3f 	bl	8014ed4 <memset>
	pThis->ring_hist.begin = 0;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <microrl_init+0x88>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	pThis->print(ENDL);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80052a6:	4805      	ldr	r0, [pc, #20]	; (80052bc <microrl_init+0x8c>)
 80052a8:	4798      	blx	r3
	print_prompt (pThis);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fe3c 	bl	8004f28 <print_prompt>
#endif
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000008 	.word	0x20000008
 80052bc:	08019df8 	.word	0x08019df8

080052c0 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <hist_search>:
#endif

#ifdef _USE_ESC_SEQ
static void hist_search (microrl_t * pThis, int dir)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	1d18      	adds	r0, r3, #4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3354      	adds	r3, #84	; 0x54
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	f7ff fcac 	bl	8004c86 <hist_restore_line>
 800532e:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	db14      	blt.n	8005360 <hist_search+0x4c>
		pThis->cursor = pThis->cmdlen = len;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fed8 	bl	8005100 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005356:	461a      	mov	r2, r3
 8005358:	2100      	movs	r1, #0
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ff16 	bl	800518c <terminal_print_line>
	}
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <escape_process>:

//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b5b      	cmp	r3, #91	; 0x5b
 8005378:	d104      	bne.n	8005384 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
		return 0;
 8005380:	2300      	movs	r3, #0
 8005382:	e07b      	b.n	800547c <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d14f      	bne.n	800542c <escape_process+0xc4>
		if (ch == 'A') {
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	2b41      	cmp	r3, #65	; 0x41
 8005390:	d105      	bne.n	800539e <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8005392:	2100      	movs	r1, #0
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ffbd 	bl	8005314 <hist_search>
#endif
			return 1;
 800539a:	2301      	movs	r3, #1
 800539c:	e06e      	b.n	800547c <escape_process+0x114>
		} else if (ch == 'B') {
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	2b42      	cmp	r3, #66	; 0x42
 80053a2:	d105      	bne.n	80053b0 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80053a4:	2101      	movs	r1, #1
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff ffb4 	bl	8005314 <hist_search>
#endif
			return 1;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e065      	b.n	800547c <escape_process+0x114>
		} else if (ch == 'C') {
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	2b43      	cmp	r3, #67	; 0x43
 80053b4:	d114      	bne.n	80053e0 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80053c2:	429a      	cmp	r2, r3
 80053c4:	da0a      	bge.n	80053dc <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80053c6:	2101      	movs	r1, #1
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fe3d 	bl	8005048 <terminal_move_cursor>
				pThis->cursor++;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 80053dc:	2301      	movs	r3, #1
 80053de:	e04d      	b.n	800547c <escape_process+0x114>
		} else if (ch == 'D') {
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	2b44      	cmp	r3, #68	; 0x44
 80053e4:	d112      	bne.n	800540c <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dd0b      	ble.n	8005408 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 80053f0:	f04f 31ff 	mov.w	r1, #4294967295
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fe27 	bl	8005048 <terminal_move_cursor>
				pThis->cursor--;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005400:	1e5a      	subs	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8005408:	2301      	movs	r3, #1
 800540a:	e037      	b.n	800547c <escape_process+0x114>
		} else if (ch == '7') {
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	2b37      	cmp	r3, #55	; 0x37
 8005410:	d104      	bne.n	800541c <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	701a      	strb	r2, [r3, #0]
			return 0;
 8005418:	2300      	movs	r3, #0
 800541a:	e02f      	b.n	800547c <escape_process+0x114>
		} else if (ch == '8') {
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	2b38      	cmp	r3, #56	; 0x38
 8005420:	d12b      	bne.n	800547a <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2203      	movs	r2, #3
 8005426:	701a      	strb	r2, [r3, #0]
			return 0;
 8005428:	2300      	movs	r3, #0
 800542a:	e027      	b.n	800547c <escape_process+0x114>
		} 
	} else if (ch == '~') {
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b7e      	cmp	r3, #126	; 0x7e
 8005430:	d123      	bne.n	800547a <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d108      	bne.n	800544c <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fe60 	bl	8005100 <terminal_reset_cursor>
			pThis->cursor = 0;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8005448:	2301      	movs	r3, #1
 800544a:	e017      	b.n	800547c <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d112      	bne.n	800547a <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fdef 	bl	8005048 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 800547a:	2301      	movs	r3, #1
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	2b64      	cmp	r3, #100	; 0x64
 800549c:	dc60      	bgt.n	8005560 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054aa:	4619      	mov	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	440b      	add	r3, r1
 80054b0:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3354      	adds	r3, #84	; 0x54
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 80054bc:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054ca:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80054cc:	461a      	mov	r2, r3
 80054ce:	f00f fce8 	bl	8014ea2 <memmove>
		for (i = 0; i < len; i++) {
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e025      	b.n	8005524 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	440b      	add	r3, r1
 80054e8:	7811      	ldrb	r1, [r2, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	460a      	mov	r2, r1
 80054f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005506:	2b20      	cmp	r3, #32
 8005508:	d109      	bne.n	800551e <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4413      	add	r3, r2
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	3301      	adds	r3, #1
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	dbd5      	blt.n	80054d8 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <microrl_insert_text+0xde>
	}
	return false;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005578:	2b00      	cmp	r3, #0
 800557a:	dd31      	ble.n	80055e0 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff fce3 	bl	8004f48 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800558e:	3b01      	subs	r3, #1
 8005590:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3354      	adds	r3, #84	; 0x54
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 800559c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80055ae:	461a      	mov	r2, r3
 80055b0:	f00f fc77 	bl	8014ea2 <memmove>
		pThis->cursor--;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055ba:	1e5a      	subs	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	int len = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
	int i = 1;
 80055f4:	2301      	movs	r3, #1
 80055f6:	60bb      	str	r3, [r7, #8]
	while (1) {
		while (arr[i]!=NULL) {
 80055f8:	e030      	b.n	800565c <common_len+0x74>
			if ((arr[i][len] != arr[i-1][len]) || 
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005610:	3b01      	subs	r3, #1
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	440b      	add	r3, r1
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	440b      	add	r3, r1
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d116      	bne.n	8005652 <common_len+0x6a>
					(arr[i][len] == '\0') || 
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	781b      	ldrb	r3, [r3, #0]
			if ((arr[i][len] != arr[i-1][len]) || 
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00c      	beq.n	8005652 <common_len+0x6a>
					(arr[i-1][len]=='\0')) 
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800563e:	3b01      	subs	r3, #1
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	781b      	ldrb	r3, [r3, #0]
					(arr[i][len] == '\0') || 
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <common_len+0x6e>
				return len;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	e00d      	b.n	8005672 <common_len+0x8a>
			len++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
		while (arr[i]!=NULL) {
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1c7      	bne.n	80055fa <common_len+0x12>
		}
		i++;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	3301      	adds	r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
		while (arr[i]!=NULL) {
 8005670:	e7f4      	b.n	800565c <common_len+0x74>
	}
	return 0;
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 800567c:	b5b0      	push	{r4, r5, r7, lr}
 800567e:	b08e      	sub	sp, #56	; 0x38
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 809c 	beq.w	80057c8 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005696:	f107 0208 	add.w	r2, r7, #8
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fbfa 	bl	8004e96 <split>
 80056a2:	6378      	str	r0, [r7, #52]	; 0x34
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056aa:	3b01      	subs	r3, #1
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	637a      	str	r2, [r7, #52]	; 0x34
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056c4:	4413      	add	r3, r2
 80056c6:	4a42      	ldr	r2, [pc, #264]	; (80057d0 <microrl_get_complite+0x154>)
 80056c8:	f843 2c30 	str.w	r2, [r3, #-48]
	compl_token = pThis->get_completion (status, tkn_arr);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80056d2:	f107 0208 	add.w	r2, r7, #8
 80056d6:	4611      	mov	r1, r2
 80056d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056da:	4798      	blx	r3
 80056dc:	62b8      	str	r0, [r7, #40]	; 0x28
	if (compl_token[0] != NULL) {
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d071      	beq.n	80057ca <microrl_get_complite+0x14e>
		int i = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
		int len;

		if (compl_token[1] == NULL) {
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	3304      	adds	r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fa fd4b 	bl	8000194 <strlen>
 80056fe:	4603      	mov	r3, r0
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005702:	e026      	b.n	8005752 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8005704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005706:	f7ff ff6f 	bl	80055e8 <common_len>
 800570a:	62f8      	str	r0, [r7, #44]	; 0x2c
			terminal_newline (pThis);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff fc39 	bl	8004f84 <terminal_newline>
			while (compl_token [i] != NULL) {
 8005712:	e011      	b.n	8005738 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005720:	440a      	add	r2, r1
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
				pThis->print (" ");
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800572e:	4829      	ldr	r0, [pc, #164]	; (80057d4 <microrl_get_complite+0x158>)
 8005730:	4798      	blx	r3
				i++;
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	3301      	adds	r3, #1
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
			while (compl_token [i] != NULL) {
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573e:	4413      	add	r3, r2
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e6      	bne.n	8005714 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fc1c 	bl	8004f84 <terminal_newline>
			print_prompt (pThis);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fbeb 	bl	8004f28 <print_prompt>
		}
		
		if (len) {
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02b      	beq.n	80057b0 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	681c      	ldr	r4, [r3, #0]
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	3b01      	subs	r3, #1
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005766:	4413      	add	r3, r2
 8005768:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800576c:	4618      	mov	r0, r3
 800576e:	f7fa fd11 	bl	8000194 <strlen>
 8005772:	4603      	mov	r3, r0
 8005774:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8005776:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	3b01      	subs	r3, #1
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005782:	4413      	add	r3, r2
 8005784:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fd03 	bl	8000194 <strlen>
 800578e:	4603      	mov	r3, r0
 8005790:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8005792:	461a      	mov	r2, r3
 8005794:	4629      	mov	r1, r5
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff fe74 	bl	8005484 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	3304      	adds	r3, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80057a6:	2201      	movs	r2, #1
 80057a8:	490a      	ldr	r1, [pc, #40]	; (80057d4 <microrl_get_complite+0x158>)
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fe6a 	bl	8005484 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fca5 	bl	8005100 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057bc:	461a      	mov	r2, r3
 80057be:	2100      	movs	r1, #0
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fce3 	bl	800518c <terminal_print_line>
 80057c6:	e000      	b.n	80057ca <microrl_get_complite+0x14e>
		return;
 80057c8:	bf00      	nop
	} 
}
 80057ca:	3738      	adds	r7, #56	; 0x38
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bdb0      	pop	{r4, r5, r7, pc}
 80057d0:	08019e18 	.word	0x08019e18
 80057d4:	08019e1c 	.word	0x08019e1c

080057d8 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08c      	sub	sp, #48	; 0x30
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fbcf 	bl	8004f84 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	dd0a      	ble.n	8005806 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1d18      	adds	r0, r3, #4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005800:	461a      	mov	r2, r3
 8005802:	f7ff f9d1 	bl	8004ba8 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800580c:	f107 020c 	add.w	r2, r7, #12
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fb3f 	bl	8004e96 <split>
 8005818:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (status == -1){
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d109      	bne.n	8005836 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005828:	4817      	ldr	r0, [pc, #92]	; (8005888 <new_line_handler+0xb0>)
 800582a:	4798      	blx	r3
		pThis->print (ENDL);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005832:	4816      	ldr	r0, [pc, #88]	; (800588c <new_line_handler+0xb4>)
 8005834:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	dd0c      	ble.n	8005856 <new_line_handler+0x7e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800584c:	f107 020c 	add.w	r2, r7, #12
 8005850:	4611      	mov	r1, r2
 8005852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005854:	4798      	blx	r3
	print_prompt (pThis);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fb66 	bl	8004f28 <print_prompt>
	pThis->cmdlen = 0;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3354      	adds	r3, #84	; 0x54
 8005870:	2265      	movs	r2, #101	; 0x65
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f00f fb2d 	bl	8014ed4 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8005880:	bf00      	nop
 8005882:	3730      	adds	r7, #48	; 0x30
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	08019e20 	.word	0x08019e20
 800588c:	08019df8 	.word	0x08019df8

08005890 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff fd5d 	bl	8005368 <escape_process>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 81c1 	beq.w	8005c38 <microrl_insert_char+0x3a8>
			pThis->escape = 0;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80058bc:	e1bc      	b.n	8005c38 <microrl_insert_char+0x3a8>
		switch (ch) {
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	2b7e      	cmp	r3, #126	; 0x7e
 80058c4:	f200 818d 	bhi.w	8005be2 <microrl_insert_char+0x352>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <microrl_insert_char+0x40>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	08005b43 	.word	0x08005b43
 80058d4:	08005b7b 	.word	0x08005b7b
 80058d8:	08005bcf 	.word	0x08005bcf
 80058dc:	08005be3 	.word	0x08005be3
 80058e0:	08005b1f 	.word	0x08005b1f
 80058e4:	08005b53 	.word	0x08005b53
 80058e8:	08005be3 	.word	0x08005be3
 80058ec:	08005bb3 	.word	0x08005bb3
 80058f0:	08005ad5 	.word	0x08005ad5
 80058f4:	08005c23 	.word	0x08005c23
 80058f8:	08005b07 	.word	0x08005b07
 80058fc:	08005be3 	.word	0x08005be3
 8005900:	08005acd 	.word	0x08005acd
 8005904:	08005ba9 	.word	0x08005ba9
 8005908:	08005be3 	.word	0x08005be3
 800590c:	08005b9f 	.word	0x08005b9f
 8005910:	08005be3 	.word	0x08005be3
 8005914:	08005be3 	.word	0x08005be3
 8005918:	08005be3 	.word	0x08005be3
 800591c:	08005be3 	.word	0x08005be3
 8005920:	08005aeb 	.word	0x08005aeb
 8005924:	08005be3 	.word	0x08005be3
 8005928:	08005be3 	.word	0x08005be3
 800592c:	08005be3 	.word	0x08005be3
 8005930:	08005be3 	.word	0x08005be3
 8005934:	08005be3 	.word	0x08005be3
 8005938:	08005add 	.word	0x08005add
 800593c:	08005be3 	.word	0x08005be3
 8005940:	08005be3 	.word	0x08005be3
 8005944:	08005be3 	.word	0x08005be3
 8005948:	08005be3 	.word	0x08005be3
 800594c:	08005be3 	.word	0x08005be3
 8005950:	08005be3 	.word	0x08005be3
 8005954:	08005be3 	.word	0x08005be3
 8005958:	08005be3 	.word	0x08005be3
 800595c:	08005be3 	.word	0x08005be3
 8005960:	08005be3 	.word	0x08005be3
 8005964:	08005be3 	.word	0x08005be3
 8005968:	08005be3 	.word	0x08005be3
 800596c:	08005be3 	.word	0x08005be3
 8005970:	08005be3 	.word	0x08005be3
 8005974:	08005be3 	.word	0x08005be3
 8005978:	08005be3 	.word	0x08005be3
 800597c:	08005be3 	.word	0x08005be3
 8005980:	08005be3 	.word	0x08005be3
 8005984:	08005be3 	.word	0x08005be3
 8005988:	08005be3 	.word	0x08005be3
 800598c:	08005be3 	.word	0x08005be3
 8005990:	08005be3 	.word	0x08005be3
 8005994:	08005be3 	.word	0x08005be3
 8005998:	08005be3 	.word	0x08005be3
 800599c:	08005be3 	.word	0x08005be3
 80059a0:	08005be3 	.word	0x08005be3
 80059a4:	08005be3 	.word	0x08005be3
 80059a8:	08005be3 	.word	0x08005be3
 80059ac:	08005be3 	.word	0x08005be3
 80059b0:	08005be3 	.word	0x08005be3
 80059b4:	08005be3 	.word	0x08005be3
 80059b8:	08005be3 	.word	0x08005be3
 80059bc:	08005be3 	.word	0x08005be3
 80059c0:	08005be3 	.word	0x08005be3
 80059c4:	08005be3 	.word	0x08005be3
 80059c8:	08005be3 	.word	0x08005be3
 80059cc:	08005be3 	.word	0x08005be3
 80059d0:	08005be3 	.word	0x08005be3
 80059d4:	08005be3 	.word	0x08005be3
 80059d8:	08005be3 	.word	0x08005be3
 80059dc:	08005be3 	.word	0x08005be3
 80059e0:	08005be3 	.word	0x08005be3
 80059e4:	08005be3 	.word	0x08005be3
 80059e8:	08005be3 	.word	0x08005be3
 80059ec:	08005be3 	.word	0x08005be3
 80059f0:	08005be3 	.word	0x08005be3
 80059f4:	08005be3 	.word	0x08005be3
 80059f8:	08005be3 	.word	0x08005be3
 80059fc:	08005be3 	.word	0x08005be3
 8005a00:	08005be3 	.word	0x08005be3
 8005a04:	08005be3 	.word	0x08005be3
 8005a08:	08005be3 	.word	0x08005be3
 8005a0c:	08005be3 	.word	0x08005be3
 8005a10:	08005be3 	.word	0x08005be3
 8005a14:	08005be3 	.word	0x08005be3
 8005a18:	08005be3 	.word	0x08005be3
 8005a1c:	08005be3 	.word	0x08005be3
 8005a20:	08005be3 	.word	0x08005be3
 8005a24:	08005be3 	.word	0x08005be3
 8005a28:	08005be3 	.word	0x08005be3
 8005a2c:	08005be3 	.word	0x08005be3
 8005a30:	08005be3 	.word	0x08005be3
 8005a34:	08005be3 	.word	0x08005be3
 8005a38:	08005be3 	.word	0x08005be3
 8005a3c:	08005be3 	.word	0x08005be3
 8005a40:	08005be3 	.word	0x08005be3
 8005a44:	08005be3 	.word	0x08005be3
 8005a48:	08005be3 	.word	0x08005be3
 8005a4c:	08005be3 	.word	0x08005be3
 8005a50:	08005be3 	.word	0x08005be3
 8005a54:	08005be3 	.word	0x08005be3
 8005a58:	08005be3 	.word	0x08005be3
 8005a5c:	08005be3 	.word	0x08005be3
 8005a60:	08005be3 	.word	0x08005be3
 8005a64:	08005be3 	.word	0x08005be3
 8005a68:	08005be3 	.word	0x08005be3
 8005a6c:	08005be3 	.word	0x08005be3
 8005a70:	08005be3 	.word	0x08005be3
 8005a74:	08005be3 	.word	0x08005be3
 8005a78:	08005be3 	.word	0x08005be3
 8005a7c:	08005be3 	.word	0x08005be3
 8005a80:	08005be3 	.word	0x08005be3
 8005a84:	08005be3 	.word	0x08005be3
 8005a88:	08005be3 	.word	0x08005be3
 8005a8c:	08005be3 	.word	0x08005be3
 8005a90:	08005be3 	.word	0x08005be3
 8005a94:	08005be3 	.word	0x08005be3
 8005a98:	08005be3 	.word	0x08005be3
 8005a9c:	08005be3 	.word	0x08005be3
 8005aa0:	08005be3 	.word	0x08005be3
 8005aa4:	08005be3 	.word	0x08005be3
 8005aa8:	08005be3 	.word	0x08005be3
 8005aac:	08005be3 	.word	0x08005be3
 8005ab0:	08005be3 	.word	0x08005be3
 8005ab4:	08005be3 	.word	0x08005be3
 8005ab8:	08005be3 	.word	0x08005be3
 8005abc:	08005be3 	.word	0x08005be3
 8005ac0:	08005be3 	.word	0x08005be3
 8005ac4:	08005be3 	.word	0x08005be3
 8005ac8:	08005bb3 	.word	0x08005bb3
				new_line_handler(pThis);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fe83 	bl	80057d8 <new_line_handler>
			break;
 8005ad2:	e0b1      	b.n	8005c38 <microrl_insert_char+0x3a8>
				microrl_get_complite (pThis);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fdd1 	bl	800567c <microrl_get_complite>
			break;
 8005ada:	e0ad      	b.n	8005c38 <microrl_insert_char+0x3a8>
				pThis->escape = 1;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	705a      	strb	r2, [r3, #1]
			break;
 8005ae2:	e0a9      	b.n	8005c38 <microrl_insert_char+0x3a8>
					microrl_backspace (pThis);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fd40 	bl	800556a <microrl_backspace>
					while (pThis->cursor > 0) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	dcf7      	bgt.n	8005ae4 <microrl_insert_char+0x254>
				terminal_print_line (pThis, 0, pThis->cursor);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005afa:	461a      	mov	r2, r3
 8005afc:	2100      	movs	r1, #0
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff fb44 	bl	800518c <terminal_print_line>
			break;
 8005b04:	e098      	b.n	8005c38 <microrl_insert_char+0x3a8>
				pThis->print ("\033[K");
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005b0c:	484c      	ldr	r0, [pc, #304]	; (8005c40 <microrl_insert_char+0x3b0>)
 8005b0e:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 8005b1c:	e08c      	b.n	8005c38 <microrl_insert_char+0x3a8>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fa8a 	bl	8005048 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005b40:	e07a      	b.n	8005c38 <microrl_insert_char+0x3a8>
				terminal_reset_cursor (pThis);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fadc 	bl	8005100 <terminal_reset_cursor>
				pThis->cursor = 0;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005b50:	e072      	b.n	8005c38 <microrl_insert_char+0x3a8>
			if (pThis->cursor < pThis->cmdlen) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	da61      	bge.n	8005c26 <microrl_insert_char+0x396>
				terminal_move_cursor (pThis, 1);
 8005b62:	2101      	movs	r1, #1
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fa6f 	bl	8005048 <terminal_move_cursor>
				pThis->cursor++;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005b78:	e055      	b.n	8005c26 <microrl_insert_char+0x396>
			if (pThis->cursor) {
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d052      	beq.n	8005c2a <microrl_insert_char+0x39a>
				terminal_move_cursor (pThis, -1);
 8005b84:	f04f 31ff 	mov.w	r1, #4294967295
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff fa5d 	bl	8005048 <terminal_move_cursor>
				pThis->cursor--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b94:	1e5a      	subs	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8005b9c:	e045      	b.n	8005c2a <microrl_insert_char+0x39a>
			hist_search (pThis, _HIST_UP);
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff fbb7 	bl	8005314 <hist_search>
			break;
 8005ba6:	e047      	b.n	8005c38 <microrl_insert_char+0x3a8>
			hist_search (pThis, _HIST_DOWN);
 8005ba8:	2101      	movs	r1, #1
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fbb2 	bl	8005314 <hist_search>
			break;
 8005bb0:	e042      	b.n	8005c38 <microrl_insert_char+0x3a8>
				microrl_backspace (pThis);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fcd9 	bl	800556a <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fae0 	bl	800518c <terminal_print_line>
			break;
 8005bcc:	e034      	b.n	8005c38 <microrl_insert_char+0x3a8>
			if (pThis->sigint != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02a      	beq.n	8005c2e <microrl_insert_char+0x39e>
				pThis->sigint();
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005bde:	4798      	blx	r3
			break;
 8005be0:	e025      	b.n	8005c2e <microrl_insert_char+0x39e>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d104      	bne.n	8005bf2 <microrl_insert_char+0x362>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d01f      	beq.n	8005c32 <microrl_insert_char+0x3a2>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b1f      	cmp	r3, #31
 8005bf6:	dd1c      	ble.n	8005c32 <microrl_insert_char+0x3a2>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fc40 	bl	8005484 <microrl_insert_text>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d015      	beq.n	8005c36 <microrl_insert_char+0x3a6>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c10:	1e59      	subs	r1, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fab6 	bl	800518c <terminal_print_line>
			break;
 8005c20:	e009      	b.n	8005c36 <microrl_insert_char+0x3a6>
			break;
 8005c22:	bf00      	nop
 8005c24:	e008      	b.n	8005c38 <microrl_insert_char+0x3a8>
			break;
 8005c26:	bf00      	nop
 8005c28:	e006      	b.n	8005c38 <microrl_insert_char+0x3a8>
			break;
 8005c2a:	bf00      	nop
 8005c2c:	e004      	b.n	8005c38 <microrl_insert_char+0x3a8>
			break;
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <microrl_insert_char+0x3a8>
	}
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <microrl_insert_char+0x3a8>
			break;
 8005c36:	bf00      	nop
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	08019e14 	.word	0x08019e14

08005c44 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005c48:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <__NVIC_SystemReset+0x20>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005c54:	4903      	ldr	r1, [pc, #12]	; (8005c64 <__NVIC_SystemReset+0x20>)
 8005c56:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <__NVIC_SystemReset+0x24>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60cb      	str	r3, [r1, #12]
 8005c5c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <__NVIC_SystemReset+0x1c>
 8005c64:	e000ed00 	.word	0xe000ed00
 8005c68:	05fa0004 	.word	0x05fa0004

08005c6c <microrl_terminalInit>:
static char str[255];																			//  буфер sprintf для вывода сообщений в терминал
int terminalFuncArrayIndex = 0;

//=======================================================================================
void microrl_terminalInit()
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
	prv_registerBasicTerminalFuncs();
 8005c70:	f000 f89a 	bl	8005da8 <prv_registerBasicTerminalFuncs>

	if (ExchangeStruct.TerminalFormat == TERMINALFORMAT_HUMAN)
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <microrl_terminalInit+0x50>)
 8005c76:	7b5b      	ldrb	r3, [r3, #13]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <microrl_terminalInit+0x1c>
	{
		prv_TerminalFunc_about(0, NULL);												// вывести строку из "About..."
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	2000      	movs	r0, #0
 8005c80:	f000 f9a2 	bl	8005fc8 <prv_TerminalFunc_about>
		prv_printMainHelp();															// подсказку с помощью
 8005c84:	f000 fc18 	bl	80064b8 <prv_printMainHelp>
	}

	microrl_init(prl, microrl_sendString);
 8005c88:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <microrl_terminalInit+0x54>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	490d      	ldr	r1, [pc, #52]	; (8005cc4 <microrl_terminalInit+0x58>)
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff face 	bl	8005230 <microrl_init>
	microrl_set_execute_callback (prl, prv_execute);
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <microrl_terminalInit+0x54>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	490b      	ldr	r1, [pc, #44]	; (8005cc8 <microrl_terminalInit+0x5c>)
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fb1e 	bl	80052dc <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
		microrl_set_complete_callback (prl, prv_complet);
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <microrl_terminalInit+0x54>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4909      	ldr	r1, [pc, #36]	; (8005ccc <microrl_terminalInit+0x60>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fb0a 	bl	80052c0 <microrl_set_complete_callback>
	#endif

	#ifdef _USE_CTLR_C
		microrl_set_sigint_callback (prl, prv_sigint);
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <microrl_terminalInit+0x54>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4907      	ldr	r1, [pc, #28]	; (8005cd0 <microrl_terminalInit+0x64>)
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fb20 	bl	80052f8 <microrl_set_sigint_callback>
	#endif
}
 8005cb8:	bf00      	nop
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20008c18 	.word	0x20008c18
 8005cc0:	2000000c 	.word	0x2000000c
 8005cc4:	08006a1d 	.word	0x08006a1d
 8005cc8:	08005eb5 	.word	0x08005eb5
 8005ccc:	08005f15 	.word	0x08005f15
 8005cd0:	08005fc1 	.word	0x08005fc1

08005cd4 <microrl_terminalProcess>:
//=======================================================================================
void microrl_terminalProcess()
{
 8005cd4:	b598      	push	{r3, r4, r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
	microrl_insert_char(prl, microrl_getChar());
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <microrl_terminalProcess+0x1c>)
 8005cda:	681c      	ldr	r4, [r3, #0]
 8005cdc:	f000 fefc 	bl	8006ad8 <MICRORL_UART_GetCharBlocking>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f7ff fdd3 	bl	8005890 <microrl_insert_char>
}
 8005cea:	bf00      	nop
 8005cec:	bd98      	pop	{r3, r4, r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	2000000c 	.word	0x2000000c

08005cf4 <microrl_registerExecuteFunc>:
//=======================================================================================
void microrl_registerExecuteFunc(int (*func)(int, const char* const*), const char* name, const char* help)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
	assert_param(terminalFuncArrayIndex < microrlNUM_OF_TERMINAL_FUNC);

	terminalFuncArray[terminalFuncArrayIndex].func = func;
 8005d00:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <microrl_registerExecuteFunc+0x60>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4914      	ldr	r1, [pc, #80]	; (8005d58 <microrl_registerExecuteFunc+0x64>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3308      	adds	r3, #8
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	601a      	str	r2, [r3, #0]
	terminalFuncArray[terminalFuncArrayIndex].name = name;
 8005d16:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <microrl_registerExecuteFunc+0x60>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	490f      	ldr	r1, [pc, #60]	; (8005d58 <microrl_registerExecuteFunc+0x64>)
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	601a      	str	r2, [r3, #0]
	terminalFuncArray[terminalFuncArrayIndex].help = help;
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <microrl_registerExecuteFunc+0x60>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	490a      	ldr	r1, [pc, #40]	; (8005d58 <microrl_registerExecuteFunc+0x64>)
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	440b      	add	r3, r1
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	601a      	str	r2, [r3, #0]

	terminalFuncArrayIndex++;
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <microrl_registerExecuteFunc+0x60>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	4a03      	ldr	r2, [pc, #12]	; (8005d54 <microrl_registerExecuteFunc+0x60>)
 8005d48:	6013      	str	r3, [r2, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	20000350 	.word	0x20000350
 8005d58:	20008a28 	.word	0x20008a28

08005d5c <microrl_printString>:
//=======================================================================================
void microrl_printString(const char *str)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	microrl_sendString(str);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fe59 	bl	8006a1c <MICRORL_UART_SendString>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <microrl_printStringWithEndl>:
//=======================================================================================
void microrl_printStringWithEndl(const char *str)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	microrl_sendString(str);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fe4d 	bl	8006a1c <MICRORL_UART_SendString>
	microrl_sendString(ENDL);
 8005d82:	4803      	ldr	r0, [pc, #12]	; (8005d90 <microrl_printStringWithEndl+0x1c>)
 8005d84:	f000 fe4a 	bl	8006a1c <MICRORL_UART_SendString>
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	08019e38 	.word	0x08019e38

08005d94 <microrl_printEndl>:
//=======================================================================================
void microrl_printEndl()
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
	microrl_sendString(ENDL);
 8005d98:	4802      	ldr	r0, [pc, #8]	; (8005da4 <microrl_printEndl+0x10>)
 8005d9a:	f000 fe3f 	bl	8006a1c <MICRORL_UART_SendString>
}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	08019e38 	.word	0x08019e38

08005da8 <prv_registerBasicTerminalFuncs>:
//=======================================================================================
static void prv_registerBasicTerminalFuncs()
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
	microrl_registerExecuteFunc(prv_TerminalFunc_about, 	"about", 		"Version Info");
 8005dac:	4a14      	ldr	r2, [pc, #80]	; (8005e00 <prv_registerBasicTerminalFuncs+0x58>)
 8005dae:	4915      	ldr	r1, [pc, #84]	; (8005e04 <prv_registerBasicTerminalFuncs+0x5c>)
 8005db0:	4815      	ldr	r0, [pc, #84]	; (8005e08 <prv_registerBasicTerminalFuncs+0x60>)
 8005db2:	f7ff ff9f 	bl	8005cf4 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_help, 		"help", 		"View the available commands and their descriptions");
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <prv_registerBasicTerminalFuncs+0x64>)
 8005db8:	4915      	ldr	r1, [pc, #84]	; (8005e10 <prv_registerBasicTerminalFuncs+0x68>)
 8005dba:	4816      	ldr	r0, [pc, #88]	; (8005e14 <prv_registerBasicTerminalFuncs+0x6c>)
 8005dbc:	f7ff ff9a 	bl	8005cf4 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_clear, 	"clear", 		"Clears the screen.");
 8005dc0:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <prv_registerBasicTerminalFuncs+0x70>)
 8005dc2:	4916      	ldr	r1, [pc, #88]	; (8005e1c <prv_registerBasicTerminalFuncs+0x74>)
 8005dc4:	4816      	ldr	r0, [pc, #88]	; (8005e20 <prv_registerBasicTerminalFuncs+0x78>)
 8005dc6:	f7ff ff95 	bl	8005cf4 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_get, 		"get", 			"Type 'get' without parameters for help");
 8005dca:	4a16      	ldr	r2, [pc, #88]	; (8005e24 <prv_registerBasicTerminalFuncs+0x7c>)
 8005dcc:	4916      	ldr	r1, [pc, #88]	; (8005e28 <prv_registerBasicTerminalFuncs+0x80>)
 8005dce:	4817      	ldr	r0, [pc, #92]	; (8005e2c <prv_registerBasicTerminalFuncs+0x84>)
 8005dd0:	f7ff ff90 	bl	8005cf4 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_set, 		"set", 			"Type 'set' without parameters for help");
 8005dd4:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <prv_registerBasicTerminalFuncs+0x88>)
 8005dd6:	4917      	ldr	r1, [pc, #92]	; (8005e34 <prv_registerBasicTerminalFuncs+0x8c>)
 8005dd8:	4817      	ldr	r0, [pc, #92]	; (8005e38 <prv_registerBasicTerminalFuncs+0x90>)
 8005dda:	f7ff ff8b 	bl	8005cf4 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_reset,		"reset", 		"Type 'reset' without parameters for help");
 8005dde:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <prv_registerBasicTerminalFuncs+0x94>)
 8005de0:	4917      	ldr	r1, [pc, #92]	; (8005e40 <prv_registerBasicTerminalFuncs+0x98>)
 8005de2:	4818      	ldr	r0, [pc, #96]	; (8005e44 <prv_registerBasicTerminalFuncs+0x9c>)
 8005de4:	f7ff ff86 	bl	8005cf4 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_calibrate, "calibrate", 	"Calibrate compass");
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <prv_registerBasicTerminalFuncs+0xa0>)
 8005dea:	4918      	ldr	r1, [pc, #96]	; (8005e4c <prv_registerBasicTerminalFuncs+0xa4>)
 8005dec:	4818      	ldr	r0, [pc, #96]	; (8005e50 <prv_registerBasicTerminalFuncs+0xa8>)
 8005dee:	f7ff ff81 	bl	8005cf4 <microrl_registerExecuteFunc>
	microrl_registerExecuteFunc(prv_TerminalFunc_pwroff,    "pwroff", 		"Unlock main power switch to gracefull shutdown");
 8005df2:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <prv_registerBasicTerminalFuncs+0xac>)
 8005df4:	4918      	ldr	r1, [pc, #96]	; (8005e58 <prv_registerBasicTerminalFuncs+0xb0>)
 8005df6:	4819      	ldr	r0, [pc, #100]	; (8005e5c <prv_registerBasicTerminalFuncs+0xb4>)
 8005df8:	f7ff ff7c 	bl	8005cf4 <microrl_registerExecuteFunc>
}
 8005dfc:	bf00      	nop
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08019e3c 	.word	0x08019e3c
 8005e04:	08019e4c 	.word	0x08019e4c
 8005e08:	08005fc9 	.word	0x08005fc9
 8005e0c:	08019e54 	.word	0x08019e54
 8005e10:	08019e88 	.word	0x08019e88
 8005e14:	08006455 	.word	0x08006455
 8005e18:	08019e90 	.word	0x08019e90
 8005e1c:	08019ea4 	.word	0x08019ea4
 8005e20:	08006061 	.word	0x08006061
 8005e24:	08019eac 	.word	0x08019eac
 8005e28:	08019ed4 	.word	0x08019ed4
 8005e2c:	08006089 	.word	0x08006089
 8005e30:	08019ed8 	.word	0x08019ed8
 8005e34:	08019f00 	.word	0x08019f00
 8005e38:	08006715 	.word	0x08006715
 8005e3c:	08019f04 	.word	0x08019f04
 8005e40:	08019f30 	.word	0x08019f30
 8005e44:	08006605 	.word	0x08006605
 8005e48:	08019f38 	.word	0x08019f38
 8005e4c:	08019f4c 	.word	0x08019f4c
 8005e50:	08006049 	.word	0x08006049
 8005e54:	08019f58 	.word	0x08019f58
 8005e58:	08019f88 	.word	0x08019f88
 8005e5c:	080065c5 	.word	0x080065c5

08005e60 <prv_getFuncArrayIndex>:
//=======================================================================================
int prv_getFuncArrayIndex(const char * name)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e013      	b.n	8005e96 <prv_getFuncArrayIndex+0x36>
		if (strcmp(name, terminalFuncArray[i].name) == 0)	{
 8005e6e:	490f      	ldr	r1, [pc, #60]	; (8005eac <prv_getFuncArrayIndex+0x4c>)
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4613      	mov	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fa f97d 	bl	8000180 <strcmp>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <prv_getFuncArrayIndex+0x30>
			return i;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	e009      	b.n	8005ea4 <prv_getFuncArrayIndex+0x44>
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <prv_getFuncArrayIndex+0x50>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	dbe6      	blt.n	8005e6e <prv_getFuncArrayIndex+0xe>
		}
	}
	return (-1);
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20008a28 	.word	0x20008a28
 8005eb0:	20000350 	.word	0x20000350

08005eb4 <prv_execute>:
//=======================================================================================
static int prv_execute(int argc, const char * const * argv)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
	int funcIndex;

	funcIndex = prv_getFuncArrayIndex(argv[0]);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ffcc 	bl	8005e60 <prv_getFuncArrayIndex>
 8005ec8:	60f8      	str	r0, [r7, #12]
	if (funcIndex == (-1))	{
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d105      	bne.n	8005ede <prv_execute+0x2a>
		microrl_printStringWithEndl("Unknown command. Type \"help\" to see available commands");
 8005ed2:	480e      	ldr	r0, [pc, #56]	; (8005f0c <prv_execute+0x58>)
 8005ed4:	f7ff ff4e 	bl	8005d74 <microrl_printStringWithEndl>
		return (-1);
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	e012      	b.n	8005f04 <prv_execute+0x50>
	}
	return terminalFuncArray[funcIndex].func(--argc, ++argv);
 8005ede:	490c      	ldr	r1, [pc, #48]	; (8005f10 <prv_execute+0x5c>)
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3308      	adds	r3, #8
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	3a01      	subs	r2, #1
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	3204      	adds	r2, #4
 8005efa:	603a      	str	r2, [r7, #0]
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
 8005f02:	4603      	mov	r3, r0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	08019f90 	.word	0x08019f90
 8005f10:	20008a28 	.word	0x20008a28

08005f14 <prv_complet>:
//=======================================================================================
#ifdef _USE_COMPLETE
//TODO simplify this. Quite difficult.
static char ** prv_complet (int argc, const char * const * argv)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	static char * compl_world [microrlNUM_OF_TERMINAL_FUNC + 1];
	int j = 0, i;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
	compl_world[0] = NULL;
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <prv_complet+0xa0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
	if (argc == 1)	{
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d137      	bne.n	8005f9e <prv_complet+0x8a>
		char * bit = (char*)argv [argc-1];
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f34:	3b01      	subs	r3, #1
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < terminalFuncArrayIndex; i++) {
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	e026      	b.n	8005f94 <prv_complet+0x80>
			if (strstr(terminalFuncArray[i].name, bit) == terminalFuncArray[i].name) {
 8005f46:	491c      	ldr	r1, [pc, #112]	; (8005fb8 <prv_complet+0xa4>)
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f00f ff1c 	bl	8015d96 <strstr>
 8005f5e:	4916      	ldr	r1, [pc, #88]	; (8005fb8 <prv_complet+0xa4>)
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4298      	cmp	r0, r3
 8005f70:	d10d      	bne.n	8005f8e <prv_complet+0x7a>
				compl_world [j++] = (char*)(terminalFuncArray[i].name);
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	1c53      	adds	r3, r2, #1
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	480f      	ldr	r0, [pc, #60]	; (8005fb8 <prv_complet+0xa4>)
 8005f7a:	6939      	ldr	r1, [r7, #16]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	440b      	add	r3, r1
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4403      	add	r3, r0
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	490a      	ldr	r1, [pc, #40]	; (8005fb4 <prv_complet+0xa0>)
 8005f8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		for (i = 0; i < terminalFuncArrayIndex; i++) {
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3301      	adds	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <prv_complet+0xa8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	dbd3      	blt.n	8005f46 <prv_complet+0x32>
			}
		}
	}
	compl_world [j] = NULL;
 8005f9e:	4a05      	ldr	r2, [pc, #20]	; (8005fb4 <prv_complet+0xa0>)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return compl_world;
 8005fa8:	4b02      	ldr	r3, [pc, #8]	; (8005fb4 <prv_complet+0xa0>)
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000354 	.word	0x20000354
 8005fb8:	20008a28 	.word	0x20008a28
 8005fbc:	20000350 	.word	0x20000350

08005fc0 <prv_sigint>:
#endif
//=======================================================================================
#ifdef _USE_CTLR_C
static void prv_sigint (void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 8005fc4:	f7ff fe3e 	bl	8005c44 <__NVIC_SystemReset>

08005fc8 <prv_TerminalFunc_about>:
//	microrl_printStringWithEndl(MICRORL_LIB_VER);
//	return 0;
//}
//=======================================================================================
int prv_TerminalFunc_about(int argc, const char * const * argv)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
	UNUSED(argc);
	UNUSED(argv);
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);								// ждем пока не освободиться порт терминала на передачу
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <prv_TerminalFunc_about+0x60>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f00b fa4a 	bl	8011474 <osMutexAcquire>
 8005fe0:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d119      	bne.n	800601c <prv_TerminalFunc_about+0x54>
	{
		microrl_printString("Medogonka. Version: ");
 8005fe8:	4810      	ldr	r0, [pc, #64]	; (800602c <prv_TerminalFunc_about+0x64>)
 8005fea:	f7ff feb7 	bl	8005d5c <microrl_printString>
		microrl_printString(FIRMWARE_VER);
 8005fee:	4810      	ldr	r0, [pc, #64]	; (8006030 <prv_TerminalFunc_about+0x68>)
 8005ff0:	f7ff feb4 	bl	8005d5c <microrl_printString>
		microrl_printString("  ( ");
 8005ff4:	480f      	ldr	r0, [pc, #60]	; (8006034 <prv_TerminalFunc_about+0x6c>)
 8005ff6:	f7ff feb1 	bl	8005d5c <microrl_printString>
		microrl_printString(__DATE__);
 8005ffa:	480f      	ldr	r0, [pc, #60]	; (8006038 <prv_TerminalFunc_about+0x70>)
 8005ffc:	f7ff feae 	bl	8005d5c <microrl_printString>
		microrl_printString("  ");
 8006000:	480e      	ldr	r0, [pc, #56]	; (800603c <prv_TerminalFunc_about+0x74>)
 8006002:	f7ff feab 	bl	8005d5c <microrl_printString>
		microrl_printString(__TIME__);
 8006006:	480e      	ldr	r0, [pc, #56]	; (8006040 <prv_TerminalFunc_about+0x78>)
 8006008:	f7ff fea8 	bl	8005d5c <microrl_printString>
		microrl_printStringWithEndl(" )");
 800600c:	480d      	ldr	r0, [pc, #52]	; (8006044 <prv_TerminalFunc_about+0x7c>)
 800600e:	f7ff feb1 	bl	8005d74 <microrl_printStringWithEndl>
		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006012:	4b05      	ldr	r3, [pc, #20]	; (8006028 <prv_TerminalFunc_about+0x60>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f00b fa8a 	bl	8011530 <osMutexRelease>
	}

	return 0;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20008a24 	.word	0x20008a24
 800602c:	0801a000 	.word	0x0801a000
 8006030:	0801a018 	.word	0x0801a018
 8006034:	0801a020 	.word	0x0801a020
 8006038:	0801a028 	.word	0x0801a028
 800603c:	0801a034 	.word	0x0801a034
 8006040:	0801a038 	.word	0x0801a038
 8006044:	0801a044 	.word	0x0801a044

08006048 <prv_TerminalFunc_calibrate>:
extern char str[255];

//=======================================================================================

int prv_TerminalFunc_calibrate(int argc, const char * const * argv)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
//			break;
//		}
//
//		osMutexRelease(MircoRL_Tx_MutexHandle);
//	}
	return 0;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
	...

08006060 <prv_TerminalFunc_clear>:
//=======================================================================================
#define UNUSED(x) ((void)(x))

//=======================================================================================
int prv_TerminalFunc_clear(int argc, const char * const * argv)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	UNUSED(argc);
	UNUSED(argv);

	microrl_printString ("\033[2J");    // ESC seq for clear entire screen
 800606a:	4805      	ldr	r0, [pc, #20]	; (8006080 <prv_TerminalFunc_clear+0x20>)
 800606c:	f7ff fe76 	bl	8005d5c <microrl_printString>
	microrl_printString ("\033[H");     // ESC seq for move cursor at left-top corner
 8006070:	4804      	ldr	r0, [pc, #16]	; (8006084 <prv_TerminalFunc_clear+0x24>)
 8006072:	f7ff fe73 	bl	8005d5c <microrl_printString>
	return 0;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	0801a048 	.word	0x0801a048
 8006084:	0801a050 	.word	0x0801a050

08006088 <prv_TerminalFunc_get>:

extern char str[255];

//=======================================================================================
int prv_TerminalFunc_get(int argc, const char * const * argv)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Get something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <prv_TerminalFunc_get+0x5c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f04f 31ff 	mov.w	r1, #4294967295
 800609a:	4618      	mov	r0, r3
 800609c:	f00b f9ea 	bl	8011474 <osMutexAcquire>
 80060a0:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d117      	bne.n	80060d8 <prv_TerminalFunc_get+0x50>
	{
		switch (argc)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <prv_TerminalFunc_get+0x2c>
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d003      	beq.n	80060ba <prv_TerminalFunc_get+0x32>
 80060b2:	e008      	b.n	80060c6 <prv_TerminalFunc_get+0x3e>
		{
		case 0:																				// если вызвали get без параметра - показать help
			prv_printHelpGet();
 80060b4:	f000 f81a 	bl	80060ec <prv_printHelpGet>
			break;
 80060b8:	e009      	b.n	80060ce <prv_TerminalFunc_get+0x46>
		case 1:
			prv_TerminalFuncGetParams(argv[0]);												// реакция на параметры в get
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f866 	bl	8006190 <prv_TerminalFuncGetParams>

			break;
 80060c4:	e003      	b.n	80060ce <prv_TerminalFunc_get+0x46>
		default:																			// тройной уровень параметров не сделан (пока)
			microrl_printStringWithEndl("Get is available only for high-level commands, yet (Ex:  '>get gps'");
 80060c6:	4808      	ldr	r0, [pc, #32]	; (80060e8 <prv_TerminalFunc_get+0x60>)
 80060c8:	f7ff fe54 	bl	8005d74 <microrl_printStringWithEndl>
			break;
 80060cc:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <prv_TerminalFunc_get+0x5c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f00b fa2c 	bl	8011530 <osMutexRelease>
	}


	return 0;
 80060d8:	2300      	movs	r3, #0

}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20008a24 	.word	0x20008a24
 80060e8:	0801a054 	.word	0x0801a054

080060ec <prv_printHelpGet>:
//=======================================================================================
void prv_printHelpGet(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у get
	microrl_printStringWithEndl("get <parameter>");
 80060f0:	4818      	ldr	r0, [pc, #96]	; (8006154 <prv_printHelpGet+0x68>)
 80060f2:	f7ff fe3f 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  all		- All info");
 80060f6:	4818      	ldr	r0, [pc, #96]	; (8006158 <prv_printHelpGet+0x6c>)
 80060f8:	f7ff fe3c 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  bat		- Battery level");
 80060fc:	4817      	ldr	r0, [pc, #92]	; (800615c <prv_printHelpGet+0x70>)
 80060fe:	f7ff fe39 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  buzzer	- Buzzer state (on|off)");
 8006102:	4817      	ldr	r0, [pc, #92]	; (8006160 <prv_printHelpGet+0x74>)
 8006104:	f7ff fe36 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  calbat	- Battery calibration constants");
 8006108:	4816      	ldr	r0, [pc, #88]	; (8006164 <prv_printHelpGet+0x78>)
 800610a:	f7ff fe33 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  compass	- Compass (Heading, Roll, Pitch, Temperature)");
 800610e:	4816      	ldr	r0, [pc, #88]	; (8006168 <prv_printHelpGet+0x7c>)
 8006110:	f7ff fe30 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  fire		- Measure the renge by LRF & get target info");
 8006114:	4815      	ldr	r0, [pc, #84]	; (800616c <prv_printHelpGet+0x80>)
 8006116:	f7ff fe2d 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  gps		- GPS/GLONASS info");
 800611a:	4815      	ldr	r0, [pc, #84]	; (8006170 <prv_printHelpGet+0x84>)
 800611c:	f7ff fe2a 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  keys		- Keyboard & encoder state");
 8006120:	4814      	ldr	r0, [pc, #80]	; (8006174 <prv_printHelpGet+0x88>)
 8006122:	f7ff fe27 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  lrf		- Laser Range Finder state");
 8006126:	4814      	ldr	r0, [pc, #80]	; (8006178 <prv_printHelpGet+0x8c>)
 8006128:	f7ff fe24 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode		- AUTO or by requests");
 800612c:	4813      	ldr	r0, [pc, #76]	; (800617c <prv_printHelpGet+0x90>)
 800612e:	f7ff fe21 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwr		- Power status");
 8006132:	4813      	ldr	r0, [pc, #76]	; (8006180 <prv_printHelpGet+0x94>)
 8006134:	f7ff fe1e 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  serial	- Device Serial Number");
 8006138:	4812      	ldr	r0, [pc, #72]	; (8006184 <prv_printHelpGet+0x98>)
 800613a:	f7ff fe1b 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  target	- Target info (if GPS & LRF data available");
 800613e:	4812      	ldr	r0, [pc, #72]	; (8006188 <prv_printHelpGet+0x9c>)
 8006140:	f7ff fe18 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  time		- Date/Time from GPS/GLONASS [UTC]");
 8006144:	4811      	ldr	r0, [pc, #68]	; (800618c <prv_printHelpGet+0xa0>)
 8006146:	f7ff fe15 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printEndl();
 800614a:	f7ff fe23 	bl	8005d94 <microrl_printEndl>
}
 800614e:	bf00      	nop
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	0801a098 	.word	0x0801a098
 8006158:	0801a0a8 	.word	0x0801a0a8
 800615c:	0801a0bc 	.word	0x0801a0bc
 8006160:	0801a0d4 	.word	0x0801a0d4
 8006164:	0801a0f8 	.word	0x0801a0f8
 8006168:	0801a124 	.word	0x0801a124
 800616c:	0801a15c 	.word	0x0801a15c
 8006170:	0801a194 	.word	0x0801a194
 8006174:	0801a1b0 	.word	0x0801a1b0
 8006178:	0801a1d4 	.word	0x0801a1d4
 800617c:	0801a1f8 	.word	0x0801a1f8
 8006180:	0801a218 	.word	0x0801a218
 8006184:	0801a230 	.word	0x0801a230
 8006188:	0801a250 	.word	0x0801a250
 800618c:	0801a284 	.word	0x0801a284

08006190 <prv_TerminalFuncGetParams>:
//=======================================================================================

void prv_TerminalFuncGetParams(const char *name)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
//	microrl_printString("Command: ");
//	microrl_printStringWithEndl(name);

	if (strncmp(name, "all", 3) == 0)
 8006198:	2203      	movs	r2, #3
 800619a:	495f      	ldr	r1, [pc, #380]	; (8006318 <prv_TerminalFuncGetParams+0x188>)
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f00f fde8 	bl	8015d72 <strncmp>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d121      	bne.n	80061ec <prv_TerminalFuncGetParams+0x5c>
	{
		osStatus statusCMD = osMutexWait(MircoRL_TxCMD_MutexHandle, portMAX_DELAY);						// для защиты от вклинивкания в цельный блок "get all" сообщений от кнопок, энкодера и дальномера
 80061a8:	4b5c      	ldr	r3, [pc, #368]	; (800631c <prv_TerminalFuncGetParams+0x18c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f04f 31ff 	mov.w	r1, #4294967295
 80061b0:	4618      	mov	r0, r3
 80061b2:	f00b f95f 	bl	8011474 <osMutexAcquire>
 80061b6:	60f8      	str	r0, [r7, #12]

	    if (statusCMD == osOK)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f040 80a8 	bne.w	8006310 <prv_TerminalFuncGetParams+0x180>
	    {
			TerminalPrintGet_GPS();
 80061c0:	f000 f8dc 	bl	800637c <TerminalPrintGet_GPS>
	//		TerminalPrintGet_TIME();
			TerminalPrintGet_LRF();
 80061c4:	f000 f8e6 	bl	8006394 <TerminalPrintGet_LRF>
			TerminalPrintGet_TARGET();
 80061c8:	f000 f8ea 	bl	80063a0 <TerminalPrintGet_TARGET>
			TerminalPrintGet_COMPASS();
 80061cc:	f000 f8ca 	bl	8006364 <TerminalPrintGet_COMPASS>
			TerminalPrintGet_KEYS();
 80061d0:	f000 f8ce 	bl	8006370 <TerminalPrintGet_KEYS>
			TerminalPrintGet_PWR();
 80061d4:	f000 f8c0 	bl	8006358 <TerminalPrintGet_PWR>
			TerminalPrintGet_BAT();
 80061d8:	f000 f916 	bl	8006408 <TerminalPrintGet_BAT>
			TerminalPrintGet_MODE();
 80061dc:	f000 f8ec 	bl	80063b8 <TerminalPrintGet_MODE>

			osMutexRelease(MircoRL_TxCMD_MutexHandle);
 80061e0:	4b4e      	ldr	r3, [pc, #312]	; (800631c <prv_TerminalFuncGetParams+0x18c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f00b f9a3 	bl	8011530 <osMutexRelease>
//	}
//	else
//	{
//		microrl_printStringWithEndl("Help is not available for this command.");
//	}
}
 80061ea:	e091      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "pwr", 3) == 0)
 80061ec:	2203      	movs	r2, #3
 80061ee:	494c      	ldr	r1, [pc, #304]	; (8006320 <prv_TerminalFuncGetParams+0x190>)
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f00f fdbe 	bl	8015d72 <strncmp>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <prv_TerminalFuncGetParams+0x72>
		TerminalPrintGet_PWR();
 80061fc:	f000 f8ac 	bl	8006358 <TerminalPrintGet_PWR>
}
 8006200:	e086      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "bat", 3) == 0)
 8006202:	2203      	movs	r2, #3
 8006204:	4947      	ldr	r1, [pc, #284]	; (8006324 <prv_TerminalFuncGetParams+0x194>)
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f00f fdb3 	bl	8015d72 <strncmp>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <prv_TerminalFuncGetParams+0x88>
		TerminalPrintGet_BAT();
 8006212:	f000 f8f9 	bl	8006408 <TerminalPrintGet_BAT>
}
 8006216:	e07b      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "calbat", 6) == 0)
 8006218:	2206      	movs	r2, #6
 800621a:	4943      	ldr	r1, [pc, #268]	; (8006328 <prv_TerminalFuncGetParams+0x198>)
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f00f fda8 	bl	8015d72 <strncmp>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <prv_TerminalFuncGetParams+0x9e>
		TerminalPrintGet_BATCatlibration();
 8006228:	f000 f8f4 	bl	8006414 <TerminalPrintGet_BATCatlibration>
}
 800622c:	e070      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "compass", 3) == 0)
 800622e:	2203      	movs	r2, #3
 8006230:	493e      	ldr	r1, [pc, #248]	; (800632c <prv_TerminalFuncGetParams+0x19c>)
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f00f fd9d 	bl	8015d72 <strncmp>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <prv_TerminalFuncGetParams+0xb4>
		TerminalPrintGet_COMPASS();
 800623e:	f000 f891 	bl	8006364 <TerminalPrintGet_COMPASS>
}
 8006242:	e065      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "keys", 3) == 0)
 8006244:	2203      	movs	r2, #3
 8006246:	493a      	ldr	r1, [pc, #232]	; (8006330 <prv_TerminalFuncGetParams+0x1a0>)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f00f fd92 	bl	8015d72 <strncmp>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d102      	bne.n	800625a <prv_TerminalFuncGetParams+0xca>
		TerminalPrintGet_KEYS();
 8006254:	f000 f88c 	bl	8006370 <TerminalPrintGet_KEYS>
}
 8006258:	e05a      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "gps", 3) == 0)
 800625a:	2203      	movs	r2, #3
 800625c:	4935      	ldr	r1, [pc, #212]	; (8006334 <prv_TerminalFuncGetParams+0x1a4>)
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f00f fd87 	bl	8015d72 <strncmp>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <prv_TerminalFuncGetParams+0xe0>
		TerminalPrintGet_GPS();
 800626a:	f000 f887 	bl	800637c <TerminalPrintGet_GPS>
}
 800626e:	e04f      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "time", 3) == 0)
 8006270:	2203      	movs	r2, #3
 8006272:	4931      	ldr	r1, [pc, #196]	; (8006338 <prv_TerminalFuncGetParams+0x1a8>)
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f00f fd7c 	bl	8015d72 <strncmp>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <prv_TerminalFuncGetParams+0xf6>
		TerminalPrintGet_TIME();
 8006280:	f000 f882 	bl	8006388 <TerminalPrintGet_TIME>
}
 8006284:	e044      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "lrf", 3) == 0)
 8006286:	2203      	movs	r2, #3
 8006288:	492c      	ldr	r1, [pc, #176]	; (800633c <prv_TerminalFuncGetParams+0x1ac>)
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f00f fd71 	bl	8015d72 <strncmp>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <prv_TerminalFuncGetParams+0x10c>
		TerminalPrintGet_LRF();
 8006296:	f000 f87d 	bl	8006394 <TerminalPrintGet_LRF>
}
 800629a:	e039      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "fire", 3) == 0)
 800629c:	2203      	movs	r2, #3
 800629e:	4928      	ldr	r1, [pc, #160]	; (8006340 <prv_TerminalFuncGetParams+0x1b0>)
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f00f fd66 	bl	8015d72 <strncmp>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <prv_TerminalFuncGetParams+0x122>
		TerminalPrintGet_FIRE();
 80062ac:	f000 f87e 	bl	80063ac <TerminalPrintGet_FIRE>
}
 80062b0:	e02e      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "target", 3) == 0)
 80062b2:	2203      	movs	r2, #3
 80062b4:	4923      	ldr	r1, [pc, #140]	; (8006344 <prv_TerminalFuncGetParams+0x1b4>)
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f00f fd5b 	bl	8015d72 <strncmp>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <prv_TerminalFuncGetParams+0x138>
		TerminalPrintGet_TARGET();
 80062c2:	f000 f86d 	bl	80063a0 <TerminalPrintGet_TARGET>
}
 80062c6:	e023      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "mode", 3) == 0)
 80062c8:	2203      	movs	r2, #3
 80062ca:	491f      	ldr	r1, [pc, #124]	; (8006348 <prv_TerminalFuncGetParams+0x1b8>)
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f00f fd50 	bl	8015d72 <strncmp>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <prv_TerminalFuncGetParams+0x14e>
		TerminalPrintGet_MODE();
 80062d8:	f000 f86e 	bl	80063b8 <TerminalPrintGet_MODE>
}
 80062dc:	e018      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "serial", 3) == 0)
 80062de:	2203      	movs	r2, #3
 80062e0:	491a      	ldr	r1, [pc, #104]	; (800634c <prv_TerminalFuncGetParams+0x1bc>)
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f00f fd45 	bl	8015d72 <strncmp>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <prv_TerminalFuncGetParams+0x164>
		TerminalPrintGet_SERIAL();
 80062ee:	f000 f87d 	bl	80063ec <TerminalPrintGet_SERIAL>
}
 80062f2:	e00d      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
	else if (strncmp(name, "buzzer", 3) == 0)
 80062f4:	2203      	movs	r2, #3
 80062f6:	4916      	ldr	r1, [pc, #88]	; (8006350 <prv_TerminalFuncGetParams+0x1c0>)
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f00f fd3a 	bl	8015d72 <strncmp>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <prv_TerminalFuncGetParams+0x17a>
		TerminalPrintGet_BUZZER();
 8006304:	f000 f88c 	bl	8006420 <TerminalPrintGet_BUZZER>
}
 8006308:	e002      	b.n	8006310 <prv_TerminalFuncGetParams+0x180>
		microrl_printStringWithEndl("Unknown parameter for command 'GET'");
 800630a:	4812      	ldr	r0, [pc, #72]	; (8006354 <prv_TerminalFuncGetParams+0x1c4>)
 800630c:	f7ff fd32 	bl	8005d74 <microrl_printStringWithEndl>
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	0801a2b0 	.word	0x0801a2b0
 800631c:	20008ba4 	.word	0x20008ba4
 8006320:	0801a2b4 	.word	0x0801a2b4
 8006324:	0801a2b8 	.word	0x0801a2b8
 8006328:	0801a2bc 	.word	0x0801a2bc
 800632c:	0801a2c4 	.word	0x0801a2c4
 8006330:	0801a2cc 	.word	0x0801a2cc
 8006334:	0801a2d4 	.word	0x0801a2d4
 8006338:	0801a2d8 	.word	0x0801a2d8
 800633c:	0801a2e0 	.word	0x0801a2e0
 8006340:	0801a2e4 	.word	0x0801a2e4
 8006344:	0801a2ec 	.word	0x0801a2ec
 8006348:	0801a2f4 	.word	0x0801a2f4
 800634c:	0801a2fc 	.word	0x0801a2fc
 8006350:	0801a304 	.word	0x0801a304
 8006354:	0801a30c 	.word	0x0801a30c

08006358 <TerminalPrintGet_PWR>:
//=======================================================================================


//=======================================================================================
void TerminalPrintGet_PWR(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
//	sprintf(str, "PWR_EOP=%s\n", 		((ExchangeStruct.Power_State->EN_EOP 	 == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_ENCODER=%s\n", 	((ExchangeStruct.Power_State->EN_ENCODER  == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_CPU=%s\n", 	 	((ExchangeStruct.Power_State->EN_MAIN_CPU == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	sprintf(str, "PWR_CPLD=%s\n",	 	((ExchangeStruct.Power_State->EN_CPLD     == POWERSTATE_DISABLE)?("OFF"):("ON")) );	microrl_printString(str);
//	TerminalPrintGet_PWRSource();
}
 800635c:	bf00      	nop
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr

08006364 <TerminalPrintGet_COMPASS>:
//	}
}
//=======================================================================================

void TerminalPrintGet_COMPASS(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
//	sprintf(str, "COMPASS_HEADING=%+3.1f\n", 		ExchangeStruct.HMC6343_ResultAll->Heading );		microrl_printString(str);
//	sprintf(str, "COMPASS_ROLL=%+3.1f\n", 			ExchangeStruct.HMC6343_ResultAll->Roll );		microrl_printString(str);
//	sprintf(str, "COMPASS_PITCH=%+3.1f\n", 			ExchangeStruct.HMC6343_ResultAll->Pitch );		microrl_printString(str);
//	sprintf(str, "COMPASS_TEMPERATURE=%+3.1f\n", 	ExchangeStruct.HMC6343_ResultAll->Temperature );	microrl_printString(str);

}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <TerminalPrintGet_KEYS>:
//=======================================================================================
void TerminalPrintGet_KEYS(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
//	sprintf(str, "STATE=0x%04X\n", ExchangeStruct.Keys_State->Buttons);																microrl_printString(str);
//	//sprintf(str, "ENCODER_VAL=%d\n", 				(int8_t)(MP_ExchangeStruct.Encoder_State->MP_Encoder_Value - ENCODER_VAL_DEFAULT));	microrl_printString(str);
//	sprintf(str, "ENCODER_VAL=%u\n", 				(uint8_t)(ExchangeStruct.Encoder_State->MP_Encoder_Value));						microrl_printString(str);
//	sprintf(str, "ENCODER_DIR=%lu\n", 				ExchangeStruct.Encoder_State->MP_Encoder_Dir);									microrl_printString(str);
//	sprintf(str, "ENCODER_DELTA=%d\n", 				(int8_t)ExchangeStruct.Encoder_State->MP_Encoder_Delta);							microrl_printString(str);
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <TerminalPrintGet_GPS>:
//=======================================================================================
void TerminalPrintGet_GPS(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
//	// Количество спутников [используемых/всего]
//	sprintf(str, "GPS_SATS_ALL_INUSE=%02d\n", ExchangeStruct.GPS_info->satinuse);microrl_printString(str); //GPS+GLONASS - будет показывать больше чем 12
//	sprintf(str, "GPS_SATS_ALL_INVIEW=%02d\n", ExchangeStruct.GPS_info->satinfo.inview);microrl_printString(str);
//	//sprintf(str, "GPS_SATS_ALL_INVIEW=%02d\n", 24);microrl_printString(str);
//
}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr

08006388 <TerminalPrintGet_TIME>:
//=======================================================================================
void TerminalPrintGet_TIME(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
//	microrl_printStringWithEndl("TIME by GPS/GLONASS:");
//	sprintf(str, "GPS_DATE = %04d-%02d-%02d\nGPS_TIME =   %02d:%02d:%02d\n", 1900 + ExchangeStruct.GPS_info->utc.year, GPS_info.utc.mon, ExchangeStruct.GPS_info->utc.day, ExchangeStruct.GPS_info->utc.hour + TIME_ZONE, ExchangeStruct.GPS_info->utc.min, ExchangeStruct.GPS_info->utc.sec);
//	microrl_printStringWithEndl(str);
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr

08006394 <TerminalPrintGet_LRF>:
//=======================================================================================
void TerminalPrintGet_LRF(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
//	sprintf(str, "LRF_TARGET_DIST_LAST=%d\n", ExchangeStruct.LRF1502_State->Target1Last);			microrl_printString(str);
//	sprintf(str, "LRF_TARGET_NUM=%d\n", ExchangeStruct.LRF1502_State->TargetsNum);					microrl_printString(str);
//	sprintf(str, "LRF_TARGET_DIST=%d\n", ExchangeStruct.LRF1502_State->Target1);						microrl_printString(str);
//	sprintf(str, "LRF_NEW_DATA=%d\n", ExchangeStruct.LRF1502_State->NewDataAvailable);				microrl_printString(str);
//	sprintf(str, "LRF_SHOTS_COUNT=%lu\n", ExchangeStruct.LRF1502_Maintenance->ShotCount);			microrl_printString(str);
}
 8006398:	bf00      	nop
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <TerminalPrintGet_TARGET>:
//=======================================================================================
void TerminalPrintGet_TARGET(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
//
////		sprintf(str, "POSN=%2.8fN %03.8fE\n", Degrees(pt1[0]), Degrees(pt1[1]));  						microrl_printString(str);		// Google, YandexMaps
////		sprintf(str, "TARG=%2.8fN %03.8fE\n", Degrees(pt2[0]), Degrees(pt2[1]));  						microrl_printString(str);		// Google, YandexMaps
//
//	}
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <TerminalPrintGet_FIRE>:
//=======================================================================================
void TerminalPrintGet_FIRE(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
//	osTimerStart(LRF_POWER_TimerHandle, TIMER_LRF_POWER_TIMEOUT);						// еще раз запускаем таймер обратного отсчета для времени работы основного источника, чтобы таймаут шел уже от измерения
//	osTimerStart(LRF_HVPS_TimerHandle,  TIMER_LRF_HVPS_TIMEOUT);						// еще раз запускаем таймер обратного отсчета для времени работы HVPS, чтобы таймаут шел уже от измерения
//
//
//	TerminalPrintGet_TARGET();
}
 80063b0:	bf00      	nop
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <TerminalPrintGet_MODE>:
//=======================================================================================
void TerminalPrintGet_MODE(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
	microrl_printString("MODE=");
 80063bc:	4807      	ldr	r0, [pc, #28]	; (80063dc <TerminalPrintGet_MODE+0x24>)
 80063be:	f7ff fccd 	bl	8005d5c <microrl_printString>
	if (ExchangeStruct.TerminalMode)
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <TerminalPrintGet_MODE+0x28>)
 80063c4:	7b9b      	ldrb	r3, [r3, #14]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <TerminalPrintGet_MODE+0x1a>
		microrl_printStringWithEndl("COMMAND");
 80063ca:	4806      	ldr	r0, [pc, #24]	; (80063e4 <TerminalPrintGet_MODE+0x2c>)
 80063cc:	f7ff fcd2 	bl	8005d74 <microrl_printStringWithEndl>
	else
		microrl_printStringWithEndl("AUTO");
}
 80063d0:	e002      	b.n	80063d8 <TerminalPrintGet_MODE+0x20>
		microrl_printStringWithEndl("AUTO");
 80063d2:	4805      	ldr	r0, [pc, #20]	; (80063e8 <TerminalPrintGet_MODE+0x30>)
 80063d4:	f7ff fcce 	bl	8005d74 <microrl_printStringWithEndl>
}
 80063d8:	bf00      	nop
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	0801a330 	.word	0x0801a330
 80063e0:	20008c18 	.word	0x20008c18
 80063e4:	0801a338 	.word	0x0801a338
 80063e8:	0801a340 	.word	0x0801a340

080063ec <TerminalPrintGet_SERIAL>:
//=======================================================================================
void TerminalPrintGet_SERIAL(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
	microrl_printString("SERIAL_NUMBER=");
 80063f0:	4803      	ldr	r0, [pc, #12]	; (8006400 <TerminalPrintGet_SERIAL+0x14>)
 80063f2:	f7ff fcb3 	bl	8005d5c <microrl_printString>
	microrl_printStringWithEndl(ExchangeStruct.DeviceSerialNumber);
 80063f6:	4803      	ldr	r0, [pc, #12]	; (8006404 <TerminalPrintGet_SERIAL+0x18>)
 80063f8:	f7ff fcbc 	bl	8005d74 <microrl_printStringWithEndl>
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	0801a348 	.word	0x0801a348
 8006404:	20008c1c 	.word	0x20008c1c

08006408 <TerminalPrintGet_BAT>:
//=======================================================================================
void TerminalPrintGet_BAT(void)
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
////		sprintf(str, "PWR_BAT_RAW=0\n"); 		microrl_printString(str);
////		sprintf(str, "PWR_BAT_VOLT=0\n"); 		microrl_printString(str);
////		sprintf(str, "PWR_BAT_CHG=0\n"); 		microrl_printString(str);
////
////	}
}
 800640c:	bf00      	nop
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr

08006414 <TerminalPrintGet_BATCatlibration>:
//=======================================================================================
void TerminalPrintGet_BATCatlibration(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
//
//	sprintf(str, "Bat cal: 3V3 =  %02.4lf\n", ExchangeStruct.Battery_State->ADC_Ref_Voltage );		microrl_printString(str);
//	sprintf(str, "Bat cal: 12V = %02.4lf\n",  ExchangeStruct.Battery_State->ADC_12V_Voltage );		microrl_printString(str);
}
 8006418:	bf00      	nop
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr

08006420 <TerminalPrintGet_BUZZER>:
//=======================================================================================
void TerminalPrintGet_BUZZER(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
	microrl_printString("BUZZER=");
 8006424:	4807      	ldr	r0, [pc, #28]	; (8006444 <TerminalPrintGet_BUZZER+0x24>)
 8006426:	f7ff fc99 	bl	8005d5c <microrl_printString>
	if (BUZZER_BuzzerState)
 800642a:	4b07      	ldr	r3, [pc, #28]	; (8006448 <TerminalPrintGet_BUZZER+0x28>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <TerminalPrintGet_BUZZER+0x1a>
		microrl_printStringWithEndl("ON");
 8006432:	4806      	ldr	r0, [pc, #24]	; (800644c <TerminalPrintGet_BUZZER+0x2c>)
 8006434:	f7ff fc9e 	bl	8005d74 <microrl_printStringWithEndl>
	else
		microrl_printStringWithEndl("OFF");

}
 8006438:	e002      	b.n	8006440 <TerminalPrintGet_BUZZER+0x20>
		microrl_printStringWithEndl("OFF");
 800643a:	4805      	ldr	r0, [pc, #20]	; (8006450 <TerminalPrintGet_BUZZER+0x30>)
 800643c:	f7ff fc9a 	bl	8005d74 <microrl_printStringWithEndl>
}
 8006440:	bf00      	nop
 8006442:	bd80      	pop	{r7, pc}
 8006444:	0801a358 	.word	0x0801a358
 8006448:	20008c00 	.word	0x20008c00
 800644c:	0801a360 	.word	0x0801a360
 8006450:	0801a364 	.word	0x0801a364

08006454 <prv_TerminalFunc_help>:
//=======================================================================================


//=======================================================================================
int prv_TerminalFunc_help(int argc, const char * const * argv)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);				// ждем пока не освободиться порт терминала на передачу
 800645e:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <prv_TerminalFunc_help+0x5c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f04f 31ff 	mov.w	r1, #4294967295
 8006466:	4618      	mov	r0, r3
 8006468:	f00b f804 	bl	8011474 <osMutexAcquire>
 800646c:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d117      	bne.n	80064a4 <prv_TerminalFunc_help+0x50>
	{
		switch (argc)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <prv_TerminalFunc_help+0x2c>
 800647a:	2b01      	cmp	r3, #1
 800647c:	d003      	beq.n	8006486 <prv_TerminalFunc_help+0x32>
 800647e:	e008      	b.n	8006492 <prv_TerminalFunc_help+0x3e>
		{
		case 0:
			prv_printMainHelp();
 8006480:	f000 f81a 	bl	80064b8 <prv_printMainHelp>
			break;
 8006484:	e009      	b.n	800649a <prv_TerminalFunc_help+0x46>
		case 1:
			prv_printTerminalFuncHelp(argv[0]);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f866 	bl	800655c <prv_printTerminalFuncHelp>
			break;
 8006490:	e003      	b.n	800649a <prv_TerminalFunc_help+0x46>
		default:
			microrl_printStringWithEndl("Help is available only for high-level commands. It isn't available for subcommands.");
 8006492:	4808      	ldr	r0, [pc, #32]	; (80064b4 <prv_TerminalFunc_help+0x60>)
 8006494:	f7ff fc6e 	bl	8005d74 <microrl_printStringWithEndl>
			break;
 8006498:	bf00      	nop
		}
		osMutexRelease(MircoRL_Tx_MutexHandle);
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <prv_TerminalFunc_help+0x5c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f00b f846 	bl	8011530 <osMutexRelease>
	}

	return 0;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20008a24 	.word	0x20008a24
 80064b4:	0801a368 	.word	0x0801a368

080064b8 <prv_printMainHelp>:
//=======================================================================================
void prv_printMainHelp()
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
	microrl_printStringWithEndl("Hint: Use <TAB> key for auto-completion");
 80064be:	481f      	ldr	r0, [pc, #124]	; (800653c <prv_printMainHelp+0x84>)
 80064c0:	f7ff fc58 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("Hint: Use <Ctrl+C> keys to system reset");
 80064c4:	481e      	ldr	r0, [pc, #120]	; (8006540 <prv_printMainHelp+0x88>)
 80064c6:	f7ff fc55 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("Type \"help\" <command> for more details.");
 80064ca:	481e      	ldr	r0, [pc, #120]	; (8006544 <prv_printMainHelp+0x8c>)
 80064cc:	f7ff fc52 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printEndl();
 80064d0:	f7ff fc60 	bl	8005d94 <microrl_printEndl>
	microrl_printStringWithEndl("Available commands:");
 80064d4:	481c      	ldr	r0, [pc, #112]	; (8006548 <prv_printMainHelp+0x90>)
 80064d6:	f7ff fc4d 	bl	8005d74 <microrl_printStringWithEndl>
	int i;
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
 80064de:	e021      	b.n	8006524 <prv_printMainHelp+0x6c>
		microrl_printString("  ");
 80064e0:	481a      	ldr	r0, [pc, #104]	; (800654c <prv_printMainHelp+0x94>)
 80064e2:	f7ff fc3b 	bl	8005d5c <microrl_printString>
		microrl_printString(terminalFuncArray[i].name);
 80064e6:	491a      	ldr	r1, [pc, #104]	; (8006550 <prv_printMainHelp+0x98>)
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fc30 	bl	8005d5c <microrl_printString>
		microrl_printString("\033[20G");												//  подвинуть курсор в 20ю позицию текущей строки (https://www.opennet.ru/base/dev/console_ctl.txt.html)
 80064fc:	4815      	ldr	r0, [pc, #84]	; (8006554 <prv_printMainHelp+0x9c>)
 80064fe:	f7ff fc2d 	bl	8005d5c <microrl_printString>
		microrl_printString(terminalFuncArray[i].help);
 8006502:	4913      	ldr	r1, [pc, #76]	; (8006550 <prv_printMainHelp+0x98>)
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3304      	adds	r3, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fc21 	bl	8005d5c <microrl_printString>
		microrl_printEndl();
 800651a:	f7ff fc3b 	bl	8005d94 <microrl_printEndl>
	for (i = 0; i < terminalFuncArrayIndex; ++i) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3301      	adds	r3, #1
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <prv_printMainHelp+0xa0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	429a      	cmp	r2, r3
 800652c:	dbd8      	blt.n	80064e0 <prv_printMainHelp+0x28>
		//microrl_printString(" ");
	}
	microrl_printEndl();
 800652e:	f7ff fc31 	bl	8005d94 <microrl_printEndl>
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	0801a3bc 	.word	0x0801a3bc
 8006540:	0801a3e4 	.word	0x0801a3e4
 8006544:	0801a40c 	.word	0x0801a40c
 8006548:	0801a434 	.word	0x0801a434
 800654c:	0801a448 	.word	0x0801a448
 8006550:	20008a28 	.word	0x20008a28
 8006554:	0801a44c 	.word	0x0801a44c
 8006558:	20000350 	.word	0x20000350

0800655c <prv_printTerminalFuncHelp>:
//=======================================================================================
void prv_printTerminalFuncHelp(const char *name)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	int funcIndex = prv_getFuncArrayIndex(name);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fc7b 	bl	8005e60 <prv_getFuncArrayIndex>
 800656a:	60f8      	str	r0, [r7, #12]
	if (funcIndex == (-1))	{
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d103      	bne.n	800657c <prv_printTerminalFuncHelp+0x20>
		microrl_printStringWithEndl("Command not found.");
 8006574:	4810      	ldr	r0, [pc, #64]	; (80065b8 <prv_printTerminalFuncHelp+0x5c>)
 8006576:	f7ff fbfd 	bl	8005d74 <microrl_printStringWithEndl>
		return;
 800657a:	e01a      	b.n	80065b2 <prv_printTerminalFuncHelp+0x56>
	}
	if (terminalFuncArray[funcIndex].help != NULL)	{
 800657c:	490f      	ldr	r1, [pc, #60]	; (80065bc <prv_printTerminalFuncHelp+0x60>)
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4613      	mov	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	3304      	adds	r3, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00c      	beq.n	80065ac <prv_printTerminalFuncHelp+0x50>
		microrl_printStringWithEndl(terminalFuncArray[funcIndex].help);
 8006592:	490a      	ldr	r1, [pc, #40]	; (80065bc <prv_printTerminalFuncHelp+0x60>)
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	3304      	adds	r3, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fbe5 	bl	8005d74 <microrl_printStringWithEndl>
 80065aa:	e002      	b.n	80065b2 <prv_printTerminalFuncHelp+0x56>
	}
	else	{
		microrl_printStringWithEndl("Help is not available for this command.");
 80065ac:	4804      	ldr	r0, [pc, #16]	; (80065c0 <prv_printTerminalFuncHelp+0x64>)
 80065ae:	f7ff fbe1 	bl	8005d74 <microrl_printStringWithEndl>
	}
}
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	0801a454 	.word	0x0801a454
 80065bc:	20008a28 	.word	0x20008a28
 80065c0:	0801a468 	.word	0x0801a468

080065c4 <prv_TerminalFunc_pwroff>:
#include "FreeRTOSUser.h"
//#include "MP_Power.h"

//=======================================================================================
int prv_TerminalFunc_pwroff(int argc, const char * const * argv)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
//
//		osMutexRelease(MircoRL_Tx_MutexHandle);
//	}
//
//
	return 0;
 80065ce:	2300      	movs	r3, #0

}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
	...

080065dc <__NVIC_SystemReset>:
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
 80065e0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <__NVIC_SystemReset+0x20>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80065ec:	4903      	ldr	r1, [pc, #12]	; (80065fc <__NVIC_SystemReset+0x20>)
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <__NVIC_SystemReset+0x24>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60cb      	str	r3, [r1, #12]
 80065f4:	f3bf 8f4f 	dsb	sy
    __NOP();
 80065f8:	bf00      	nop
 80065fa:	e7fd      	b.n	80065f8 <__NVIC_SystemReset+0x1c>
 80065fc:	e000ed00 	.word	0xe000ed00
 8006600:	05fa0004 	.word	0x05fa0004

08006604 <prv_TerminalFunc_reset>:



//=======================================================================================
int prv_TerminalFunc_reset(int argc, const char * const * argv)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Set something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 800660e:	4b19      	ldr	r3, [pc, #100]	; (8006674 <prv_TerminalFunc_reset+0x70>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f04f 31ff 	mov.w	r1, #4294967295
 8006616:	4618      	mov	r0, r3
 8006618:	f00a ff2c 	bl	8011474 <osMutexAcquire>
 800661c:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d122      	bne.n	800666a <prv_TerminalFunc_reset+0x66>
	{
		switch (argc)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d006      	beq.n	8006638 <prv_TerminalFunc_reset+0x34>
 800662a:	2b02      	cmp	r3, #2
 800662c:	d00a      	beq.n	8006644 <prv_TerminalFunc_reset+0x40>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d112      	bne.n	8006658 <prv_TerminalFunc_reset+0x54>
		{
		case 0:																				// если вызвали reset без параметра - показать help
			prv_printHelpReset();
 8006632:	f000 f823 	bl	800667c <prv_printHelpReset>
			break;
 8006636:	e013      	b.n	8006660 <prv_TerminalFunc_reset+0x5c>
		case 1:
			prv_TerminalFuncResetParams(argv[0]);											// реакция на параметры в reset
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 f82d 	bl	800669c <prv_TerminalFuncResetParams>
			break;
 8006642:	e00d      	b.n	8006660 <prv_TerminalFunc_reset+0x5c>
		case 2:
			prv_TerminalFuncResetParamsArg(argv[0], argv[1]);								// реакция на параметры с 1 аргументом в set
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	3304      	adds	r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f000 f855 	bl	8006700 <prv_TerminalFuncResetParamsArg>
			break;
 8006656:	e003      	b.n	8006660 <prv_TerminalFunc_reset+0x5c>
		default:																			// двойной уровень параметров не сделан
			microrl_printStringWithEndl("Reset is available only for 1-level commands, yet (Ex:  '>reset all', '>reset gps'");
 8006658:	4807      	ldr	r0, [pc, #28]	; (8006678 <prv_TerminalFunc_reset+0x74>)
 800665a:	f7ff fb8b 	bl	8005d74 <microrl_printStringWithEndl>
			break;
 800665e:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <prv_TerminalFunc_reset+0x70>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f00a ff63 	bl	8011530 <osMutexRelease>
	}


	return 0;
 800666a:	2300      	movs	r3, #0

}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20008a24 	.word	0x20008a24
 8006678:	0801a490 	.word	0x0801a490

0800667c <prv_printHelpReset>:
//=======================================================================================
void prv_printHelpReset(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у set
	microrl_printStringWithEndl("reset <parameter>");
 8006680:	4804      	ldr	r0, [pc, #16]	; (8006694 <prv_printHelpReset+0x18>)
 8006682:	f7ff fb77 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  all           - reset periferial cpu (STM)");
 8006686:	4804      	ldr	r0, [pc, #16]	; (8006698 <prv_printHelpReset+0x1c>)
 8006688:	f7ff fb74 	bl	8005d74 <microrl_printStringWithEndl>
//	microrl_printStringWithEndl("  cpu           - reset main CPU");
//	microrl_printStringWithEndl("  gps           - reset GPS receiver");
	microrl_printEndl();
 800668c:	f7ff fb82 	bl	8005d94 <microrl_printEndl>
}
 8006690:	bf00      	nop
 8006692:	bd80      	pop	{r7, pc}
 8006694:	0801a4e4 	.word	0x0801a4e4
 8006698:	0801a4f8 	.word	0x0801a4f8

0800669c <prv_TerminalFuncResetParams>:
//=======================================================================================
void prv_TerminalFuncResetParams(const char *name)									// set для 1 параметра
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
	UNUSED(name);
//	microrl_printString("Command: ");
//	microrl_printStringWithEndl(name);

	if (strncmp(name, "all", 3) == 0)
 80066a4:	2203      	movs	r2, #3
 80066a6:	4912      	ldr	r1, [pc, #72]	; (80066f0 <prv_TerminalFuncResetParams+0x54>)
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f00f fb62 	bl	8015d72 <strncmp>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <prv_TerminalFuncResetParams+0x1c>
	{
		NVIC_SystemReset();
 80066b4:	f7ff ff92 	bl	80065dc <__NVIC_SystemReset>
	}
	else if (strncmp(name, "gps", 3) == 0)
 80066b8:	2203      	movs	r2, #3
 80066ba:	490e      	ldr	r1, [pc, #56]	; (80066f4 <prv_TerminalFuncResetParams+0x58>)
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f00f fb58 	bl	8015d72 <strncmp>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <prv_TerminalFuncResetParams+0x34>
	{
		microrl_printStringWithEndl("not realised yet");
 80066c8:	480b      	ldr	r0, [pc, #44]	; (80066f8 <prv_TerminalFuncResetParams+0x5c>)
 80066ca:	f7ff fb53 	bl	8005d74 <microrl_printStringWithEndl>
//	else if (strncmp(name, "serial", 3) == 0)
//		TerminalPrintGet_SERIAL();
//	else
//		microrl_printStringWithEndl("Unknown parameter for command 'GET'");

}
 80066ce:	e00a      	b.n	80066e6 <prv_TerminalFuncResetParams+0x4a>
	else if (strncmp(name, "cpu", 3) == 0)
 80066d0:	2203      	movs	r2, #3
 80066d2:	490a      	ldr	r1, [pc, #40]	; (80066fc <prv_TerminalFuncResetParams+0x60>)
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f00f fb4c 	bl	8015d72 <strncmp>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <prv_TerminalFuncResetParams+0x4a>
		microrl_printStringWithEndl("not realised yet");
 80066e0:	4805      	ldr	r0, [pc, #20]	; (80066f8 <prv_TerminalFuncResetParams+0x5c>)
 80066e2:	f7ff fb47 	bl	8005d74 <microrl_printStringWithEndl>
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	0801a528 	.word	0x0801a528
 80066f4:	0801a52c 	.word	0x0801a52c
 80066f8:	0801a530 	.word	0x0801a530
 80066fc:	0801a544 	.word	0x0801a544

08006700 <prv_TerminalFuncResetParamsArg>:
//=======================================================================================

void prv_TerminalFuncResetParamsArg(const char *name, const char *param)			// set для 2 параметров
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]





}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <prv_TerminalFunc_set>:
static char str[255];


//=======================================================================================
int prv_TerminalFunc_set(int argc, const char * const * argv)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
//	microrl_printString ("Set something...");
//	microrl_printEndl();
	osStatus status = osMutexWait(MircoRL_Tx_MutexHandle, portMAX_DELAY);					// ждем пока не освободиться порт терминала на передачу
 800671e:	4b45      	ldr	r3, [pc, #276]	; (8006834 <prv_TerminalFunc_set+0x120>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f04f 31ff 	mov.w	r1, #4294967295
 8006726:	4618      	mov	r0, r3
 8006728:	f00a fea4 	bl	8011474 <osMutexAcquire>
 800672c:	60f8      	str	r0, [r7, #12]

	if (status == osOK)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d17a      	bne.n	800682a <prv_TerminalFunc_set+0x116>
	{
		switch (argc)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b03      	cmp	r3, #3
 8006738:	d86d      	bhi.n	8006816 <prv_TerminalFunc_set+0x102>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <prv_TerminalFunc_set+0x2c>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006751 	.word	0x08006751
 8006744:	08006757 	.word	0x08006757
 8006748:	08006763 	.word	0x08006763
 800674c:	08006777 	.word	0x08006777
		{
		case 0:																				// если вызвали get без параметра - показать help
			prv_printHelpSet();
 8006750:	f000 f888 	bl	8006864 <prv_printHelpSet>
			break;
 8006754:	e064      	b.n	8006820 <prv_TerminalFunc_set+0x10c>
		case 1:
			prv_TerminalFuncSetParams(argv[0]);												// реакция на параметры в set
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f8c0 	bl	80068e0 <prv_TerminalFuncSetParams>
//			EEPROM_OptionsSave();
			break;
 8006760:	e05e      	b.n	8006820 <prv_TerminalFunc_set+0x10c>
		case 2:
			prv_TerminalFuncSetParamsArg(argv[0], argv[1]);									// реакция на параметры с 1 аргументом в set
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	3304      	adds	r3, #4
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f000 f8c0 	bl	80068f4 <prv_TerminalFuncSetParamsArg>
//			EEPROM_OptionsSave();
			break;
 8006774:	e054      	b.n	8006820 <prv_TerminalFunc_set+0x10c>
		case 3:																				// реакция на параметры с 2 аргументами в set
			if ( (strncmp(argv[0], "pwroff", 5) == 0) && (strncmp(argv[1], "5v", 2) == 0))	// отложенное выключение питания +5V, чтобы raspberry успел завершить работу
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2205      	movs	r2, #5
 800677c:	492e      	ldr	r1, [pc, #184]	; (8006838 <prv_TerminalFunc_set+0x124>)
 800677e:	4618      	mov	r0, r3
 8006780:	f00f faf7 	bl	8015d72 <strncmp>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d107      	bne.n	800679a <prv_TerminalFunc_set+0x86>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	3304      	adds	r3, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2202      	movs	r2, #2
 8006792:	492a      	ldr	r1, [pc, #168]	; (800683c <prv_TerminalFunc_set+0x128>)
 8006794:	4618      	mov	r0, r3
 8006796:	f00f faec 	bl	8015d72 <strncmp>
//				{
//					osDelay(Delay*1000);
//					MP_Power_Set_5V0(POWERSTATE_DISABLE);
//				}
			}
			if ( (strncmp(argv[0], "mode", 5) == 0) && (strncmp(argv[1], "auto", 2) == 0))	// время для интервала отсылки данных в автоматическом режиме (в миллисекундах)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2205      	movs	r2, #5
 80067a0:	4927      	ldr	r1, [pc, #156]	; (8006840 <prv_TerminalFunc_set+0x12c>)
 80067a2:	4618      	mov	r0, r3
 80067a4:	f00f fae5 	bl	8015d72 <strncmp>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d137      	bne.n	800681e <prv_TerminalFunc_set+0x10a>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2202      	movs	r2, #2
 80067b6:	4923      	ldr	r1, [pc, #140]	; (8006844 <prv_TerminalFunc_set+0x130>)
 80067b8:	4618      	mov	r0, r3
 80067ba:	f00f fada 	bl	8015d72 <strncmp>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d12c      	bne.n	800681e <prv_TerminalFunc_set+0x10a>
			{
				uint32_t  Interval = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60bb      	str	r3, [r7, #8]
				if ( (sscanf(argv[2], "%lu", &Interval) == EOF) || (Interval <100 ) || (Interval > 100000) )
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	3308      	adds	r3, #8
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f107 0208 	add.w	r2, r7, #8
 80067d2:	491d      	ldr	r1, [pc, #116]	; (8006848 <prv_TerminalFunc_set+0x134>)
 80067d4:	4618      	mov	r0, r3
 80067d6:	f00f fa55 	bl	8015c84 <siscanf>
 80067da:	4603      	mov	r3, r0
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d006      	beq.n	80067f0 <prv_TerminalFunc_set+0xdc>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b63      	cmp	r3, #99	; 0x63
 80067e6:	d903      	bls.n	80067f0 <prv_TerminalFunc_set+0xdc>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4a18      	ldr	r2, [pc, #96]	; (800684c <prv_TerminalFunc_set+0x138>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d904      	bls.n	80067fa <prv_TerminalFunc_set+0xe6>
				{
					microrl_printStringWithEndl("Incorrect value for automode interval (100..100000 msec)");
 80067f0:	4817      	ldr	r0, [pc, #92]	; (8006850 <prv_TerminalFunc_set+0x13c>)
 80067f2:	f7ff fabf 	bl	8005d74 <microrl_printStringWithEndl>
					return 1;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e018      	b.n	800682c <prv_TerminalFunc_set+0x118>
				}
				else
				{
					ExchangeStruct.TerminalModeAuto_interval = Interval;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4a15      	ldr	r2, [pc, #84]	; (8006854 <prv_TerminalFunc_set+0x140>)
 80067fe:	6113      	str	r3, [r2, #16]
					sprintf(str, "Auto mode interval = %lu msec.\n",	 	ExchangeStruct.TerminalModeAuto_interval );				microrl_printString(str);
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <prv_TerminalFunc_set+0x140>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	461a      	mov	r2, r3
 8006806:	4914      	ldr	r1, [pc, #80]	; (8006858 <prv_TerminalFunc_set+0x144>)
 8006808:	4814      	ldr	r0, [pc, #80]	; (800685c <prv_TerminalFunc_set+0x148>)
 800680a:	f00f fa1b 	bl	8015c44 <siprintf>
 800680e:	4813      	ldr	r0, [pc, #76]	; (800685c <prv_TerminalFunc_set+0x148>)
 8006810:	f7ff faa4 	bl	8005d5c <microrl_printString>
				}

			}
//			EEPROM_OptionsSave();
			break;
 8006814:	e003      	b.n	800681e <prv_TerminalFunc_set+0x10a>
		default:																			// тройной уровень параметров не сделан (пока)
			microrl_printStringWithEndl("Set is available only for 1,2-level commands, yet (Ex:  '>set pwr', '>set pwr on'");
 8006816:	4812      	ldr	r0, [pc, #72]	; (8006860 <prv_TerminalFunc_set+0x14c>)
 8006818:	f7ff faac 	bl	8005d74 <microrl_printStringWithEndl>
			break;
 800681c:	e000      	b.n	8006820 <prv_TerminalFunc_set+0x10c>
			break;
 800681e:	bf00      	nop
		}

		osMutexRelease(MircoRL_Tx_MutexHandle);
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <prv_TerminalFunc_set+0x120>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f00a fe83 	bl	8011530 <osMutexRelease>
	}


	return 0;
 800682a:	2300      	movs	r3, #0

}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20008a24 	.word	0x20008a24
 8006838:	0801a548 	.word	0x0801a548
 800683c:	0801a550 	.word	0x0801a550
 8006840:	0801a554 	.word	0x0801a554
 8006844:	0801a55c 	.word	0x0801a55c
 8006848:	0801a564 	.word	0x0801a564
 800684c:	000186a0 	.word	0x000186a0
 8006850:	0801a568 	.word	0x0801a568
 8006854:	20008c18 	.word	0x20008c18
 8006858:	0801a5a4 	.word	0x0801a5a4
 800685c:	20000380 	.word	0x20000380
 8006860:	0801a5c4 	.word	0x0801a5c4

08006864 <prv_printHelpSet>:
//=======================================================================================
void prv_printHelpSet(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
	// здесь нужно расписать какие есть параметры у set
	microrl_printStringWithEndl("set <parameter>");
 8006868:	4812      	ldr	r0, [pc, #72]	; (80068b4 <prv_printHelpSet+0x50>)
 800686a:	f7ff fa83 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  buzzer X      - Set buzzer state (on|off)");
 800686e:	4812      	ldr	r0, [pc, #72]	; (80068b8 <prv_printHelpSet+0x54>)
 8006870:	f7ff fa80 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  defaults      - Set factory default settings");
 8006874:	4811      	ldr	r0, [pc, #68]	; (80068bc <prv_printHelpSet+0x58>)
 8006876:	f7ff fa7d 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode X        - AUTO or by requests (auto|cmd)");
 800687a:	4811      	ldr	r0, [pc, #68]	; (80068c0 <prv_printHelpSet+0x5c>)
 800687c:	f7ff fa7a 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  mode auto X   - AUTO mode interval (100..100 000 msec)");
 8006880:	4810      	ldr	r0, [pc, #64]	; (80068c4 <prv_printHelpSet+0x60>)
 8006882:	f7ff fa77 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  options       - Manage options in EEPROM (format|defaults|load|save)");
 8006886:	4810      	ldr	r0, [pc, #64]	; (80068c8 <prv_printHelpSet+0x64>)
 8006888:	f7ff fa74 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwrcalref1 X  - Set ADC battery calibration: REF voltage  3.3V (0..10 volts)");
 800688c:	480f      	ldr	r0, [pc, #60]	; (80068cc <prv_printHelpSet+0x68>)
 800688e:	f7ff fa71 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwrcalref2 X  - Set ADC battery calibration: REF voltage 12.0V (0..20 volts)");
 8006892:	480f      	ldr	r0, [pc, #60]	; (80068d0 <prv_printHelpSet+0x6c>)
 8006894:	f7ff fa6e 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwron X       - Set power state ON  (5v|10v|eop|encoder|hvps|cpu|cpld)");
 8006898:	480e      	ldr	r0, [pc, #56]	; (80068d4 <prv_printHelpSet+0x70>)
 800689a:	f7ff fa6b 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwroff X      - Set power state OFF (5v|10v|eop|encoder|hvps|cpu|cpld)");
 800689e:	480e      	ldr	r0, [pc, #56]	; (80068d8 <prv_printHelpSet+0x74>)
 80068a0:	f7ff fa68 	bl	8005d74 <microrl_printStringWithEndl>
	microrl_printStringWithEndl("  pwroff 5v X   - Set power OFF with timeout (1..1000 sec)");
 80068a4:	480d      	ldr	r0, [pc, #52]	; (80068dc <prv_printHelpSet+0x78>)
 80068a6:	f7ff fa65 	bl	8005d74 <microrl_printStringWithEndl>

	//microrl_printStringWithEndl("  gps			- Set gps mode - (GPS/GLONASS)");
	//microrl_printStringWithEndl("  bat			- Battery calibration constants");

	//microrl_printStringWithEndl("  serial	- set serial number");	//undocumented command
	microrl_printEndl();
 80068aa:	f7ff fa73 	bl	8005d94 <microrl_printEndl>
}
 80068ae:	bf00      	nop
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	0801a618 	.word	0x0801a618
 80068b8:	0801a628 	.word	0x0801a628
 80068bc:	0801a654 	.word	0x0801a654
 80068c0:	0801a684 	.word	0x0801a684
 80068c4:	0801a6b8 	.word	0x0801a6b8
 80068c8:	0801a6f4 	.word	0x0801a6f4
 80068cc:	0801a73c 	.word	0x0801a73c
 80068d0:	0801a78c 	.word	0x0801a78c
 80068d4:	0801a7dc 	.word	0x0801a7dc
 80068d8:	0801a828 	.word	0x0801a828
 80068dc:	0801a874 	.word	0x0801a874

080068e0 <prv_TerminalFuncSetParams>:
//=======================================================================================
void prv_TerminalFuncSetParams(const char *name)									// set для 1 параметра
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
//	else if (strncmp(name, "serial", 3) == 0)
//		TerminalPrintGet_SERIAL();
//	else
//		microrl_printStringWithEndl("Unknown parameter for command 'GET'");

}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr
	...

080068f4 <prv_TerminalFuncSetParamsArg>:
//=======================================================================================

void prv_TerminalFuncSetParamsArg(const char *name, const char *param)			// set для 2 параметров
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
//	microrl_printStringWithEndl(name);
//	microrl_printString("Param: ");
//	microrl_printStringWithEndl(param);


	if (strncmp(name, "mode", 3) == 0)
 80068fe:	2203      	movs	r2, #3
 8006900:	4938      	ldr	r1, [pc, #224]	; (80069e4 <prv_TerminalFuncSetParamsArg+0xf0>)
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f00f fa35 	bl	8015d72 <strncmp>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d11e      	bne.n	800694c <prv_TerminalFuncSetParamsArg+0x58>
	{
		if (strncmp(param, "auto", 3) == 0)
 800690e:	2203      	movs	r2, #3
 8006910:	4935      	ldr	r1, [pc, #212]	; (80069e8 <prv_TerminalFuncSetParamsArg+0xf4>)
 8006912:	6838      	ldr	r0, [r7, #0]
 8006914:	f00f fa2d 	bl	8015d72 <strncmp>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d105      	bne.n	800692a <prv_TerminalFuncSetParamsArg+0x36>
		{
			ExchangeStruct.TerminalMode = TERMINALMODE_AUTO;
 800691e:	4b33      	ldr	r3, [pc, #204]	; (80069ec <prv_TerminalFuncSetParamsArg+0xf8>)
 8006920:	2200      	movs	r2, #0
 8006922:	739a      	strb	r2, [r3, #14]
			EEPROM_OptionsSave();
 8006924:	f7fb fb96 	bl	8002054 <EEPROM_OptionsSave>
 8006928:	e010      	b.n	800694c <prv_TerminalFuncSetParamsArg+0x58>
		}
		else if (strncmp(param, "cmd", 3) == 0)
 800692a:	2203      	movs	r2, #3
 800692c:	4930      	ldr	r1, [pc, #192]	; (80069f0 <prv_TerminalFuncSetParamsArg+0xfc>)
 800692e:	6838      	ldr	r0, [r7, #0]
 8006930:	f00f fa1f 	bl	8015d72 <strncmp>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <prv_TerminalFuncSetParamsArg+0x52>
		{
			ExchangeStruct.TerminalMode = TERMINALMODE_COMMAND;
 800693a:	4b2c      	ldr	r3, [pc, #176]	; (80069ec <prv_TerminalFuncSetParamsArg+0xf8>)
 800693c:	2201      	movs	r2, #1
 800693e:	739a      	strb	r2, [r3, #14]
			EEPROM_OptionsSave();
 8006940:	f7fb fb88 	bl	8002054 <EEPROM_OptionsSave>
 8006944:	e002      	b.n	800694c <prv_TerminalFuncSetParamsArg+0x58>
		}
		else
			microrl_printStringWithEndl("Unknown argument for parameter: mode");
 8006946:	482b      	ldr	r0, [pc, #172]	; (80069f4 <prv_TerminalFuncSetParamsArg+0x100>)
 8006948:	f7ff fa14 	bl	8005d74 <microrl_printStringWithEndl>
	}
	if (strncmp(name, "buzzer", 3) == 0)
 800694c:	2203      	movs	r2, #3
 800694e:	492a      	ldr	r1, [pc, #168]	; (80069f8 <prv_TerminalFuncSetParamsArg+0x104>)
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f00f fa0e 	bl	8015d72 <strncmp>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d03f      	beq.n	80069dc <prv_TerminalFuncSetParamsArg+0xe8>
//			EEPROM_OptionsSave();
//		}
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: mode");
	}
	else if (strncmp(name, "pwron", 5) == 0)
 800695c:	2205      	movs	r2, #5
 800695e:	4927      	ldr	r1, [pc, #156]	; (80069fc <prv_TerminalFuncSetParamsArg+0x108>)
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f00f fa06 	bl	8015d72 <strncmp>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d037      	beq.n	80069dc <prv_TerminalFuncSetParamsArg+0xe8>
//		else if (strncmp(param, "cpld", 4) == 0)
//			MP_Power_Set_CPLD(POWERSTATE_ENABLE);
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: pwron (5v|10V|eop|encoder|HVPS|cpu|cpld)");
	}
	else if (strncmp(name, "pwroff", 5) == 0)
 800696c:	2205      	movs	r2, #5
 800696e:	4924      	ldr	r1, [pc, #144]	; (8006a00 <prv_TerminalFuncSetParamsArg+0x10c>)
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f00f f9fe 	bl	8015d72 <strncmp>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d02f      	beq.n	80069dc <prv_TerminalFuncSetParamsArg+0xe8>
//		else if (strncmp(param, "cpld", 4) == 0)
//			MP_Power_Set_CPLD(POWERSTATE_DISABLE);
//		else
//			microrl_printStringWithEndl("Unknown argument for parameter: pwroff (5v|10V|eop|encoder|HVPS|cpu|cpld)");
	}
	else if (strncmp(name, "serial", 3) == 0)
 800697c:	2203      	movs	r2, #3
 800697e:	4921      	ldr	r1, [pc, #132]	; (8006a04 <prv_TerminalFuncSetParamsArg+0x110>)
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f00f f9f6 	bl	8015d72 <strncmp>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d112      	bne.n	80069b2 <prv_TerminalFuncSetParamsArg+0xbe>
	{
		if (strlen(param) == 8)
 800698c:	6838      	ldr	r0, [r7, #0]
 800698e:	f7f9 fc01 	bl	8000194 <strlen>
 8006992:	4603      	mov	r3, r0
 8006994:	2b08      	cmp	r3, #8
 8006996:	d108      	bne.n	80069aa <prv_TerminalFuncSetParamsArg+0xb6>
		{
			strcpy(ExchangeStruct.DeviceSerialNumber, param);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	481b      	ldr	r0, [pc, #108]	; (8006a08 <prv_TerminalFuncSetParamsArg+0x114>)
 800699c:	f00f f9e1 	bl	8015d62 <strcpy>
			TerminalPrintGet_SERIAL();
 80069a0:	f7ff fd24 	bl	80063ec <TerminalPrintGet_SERIAL>
			EEPROM_OptionsSave();
 80069a4:	f7fb fb56 	bl	8002054 <EEPROM_OptionsSave>
//			microrl_printStringWithEndl("Unknown argument for 'set options'");
	}



}
 80069a8:	e018      	b.n	80069dc <prv_TerminalFuncSetParamsArg+0xe8>
			microrl_printStringWithEndl("Illegal format for serial number. (8 chars/digits)");
 80069aa:	4818      	ldr	r0, [pc, #96]	; (8006a0c <prv_TerminalFuncSetParamsArg+0x118>)
 80069ac:	f7ff f9e2 	bl	8005d74 <microrl_printStringWithEndl>
}
 80069b0:	e014      	b.n	80069dc <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "pwrcalref1", 10) == 0)										// калибровка батареи - опорное напряжение АЦП 3.3V
 80069b2:	220a      	movs	r2, #10
 80069b4:	4916      	ldr	r1, [pc, #88]	; (8006a10 <prv_TerminalFuncSetParamsArg+0x11c>)
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f00f f9db 	bl	8015d72 <strncmp>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "pwrcalref2", 10) == 0)										// калибровка батареи - напряжение 12V
 80069c2:	220a      	movs	r2, #10
 80069c4:	4913      	ldr	r1, [pc, #76]	; (8006a14 <prv_TerminalFuncSetParamsArg+0x120>)
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f00f f9d3 	bl	8015d72 <strncmp>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d004      	beq.n	80069dc <prv_TerminalFuncSetParamsArg+0xe8>
	else if (strncmp(name, "optinos", 3) == 0)										// калибровка батареи - напряжение 12V
 80069d2:	2203      	movs	r2, #3
 80069d4:	4910      	ldr	r1, [pc, #64]	; (8006a18 <prv_TerminalFuncSetParamsArg+0x124>)
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f00f f9cb 	bl	8015d72 <strncmp>
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	0801a554 	.word	0x0801a554
 80069e8:	0801a55c 	.word	0x0801a55c
 80069ec:	20008c18 	.word	0x20008c18
 80069f0:	0801a8b0 	.word	0x0801a8b0
 80069f4:	0801a8b4 	.word	0x0801a8b4
 80069f8:	0801a8dc 	.word	0x0801a8dc
 80069fc:	0801a8e4 	.word	0x0801a8e4
 8006a00:	0801a548 	.word	0x0801a548
 8006a04:	0801a8ec 	.word	0x0801a8ec
 8006a08:	20008c1c 	.word	0x20008c1c
 8006a0c:	0801a8f4 	.word	0x0801a8f4
 8006a10:	0801a928 	.word	0x0801a928
 8006a14:	0801a934 	.word	0x0801a934
 8006a18:	0801a940 	.word	0x0801a940

08006a1c <MICRORL_UART_SendString>:

	xSemaphoreGive(MicroRL_xTxSemaphore);
}
//=======================================================================================
void MICRORL_UART_SendString(const char *str)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(MicroRL_xTxSemaphore, portMAX_DELAY);
 8006a24:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <MICRORL_UART_SendString+0x60>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f04f 31ff 	mov.w	r1, #4294967295
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f00b fc4b 	bl	80122c8 <xQueueSemaphoreTake>
	int i = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
	while (str[i] != 0)
 8006a36:	e00f      	b.n	8006a58 <MICRORL_UART_SendString+0x3c>
	{
//		prv_SendChar(str[i]);
		while(!(MICRORL_USART->SR & USART_SR_TC)); 										//Ждем установки флага TC - завершения передачи
 8006a38:	bf00      	nop
 8006a3a:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <MICRORL_UART_SendString+0x64>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f9      	beq.n	8006a3a <MICRORL_UART_SendString+0x1e>
		MICRORL_USART->DR = str[i];
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <MICRORL_UART_SendString+0x64>)
 8006a50:	605a      	str	r2, [r3, #4]
		i++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
	while (str[i] != 0)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e9      	bne.n	8006a38 <MICRORL_UART_SendString+0x1c>
	}
	xSemaphoreGive(MicroRL_xTxSemaphore);
 8006a64:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <MICRORL_UART_SendString+0x60>)
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	f00b f937 	bl	8011ce0 <xQueueGenericSend>
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20008a08 	.word	0x20008a08
 8006a80:	40005000 	.word	0x40005000

08006a84 <MICRORL_UART_GetChar>:
//=======================================================================================
int MICRORL_UART_GetChar()
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
	uint8_t data;
	if (MircoRL_sRxRingBuf.wrIdx != MircoRL_sRxRingBuf.rdIdx)
 8006a8a:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <MICRORL_UART_GetChar+0x50>)
 8006a8c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <MICRORL_UART_GetChar+0x50>)
 8006a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d014      	beq.n	8006ac4 <MICRORL_UART_GetChar+0x40>
	{
		data = MircoRL_sRxRingBuf.data[MircoRL_sRxRingBuf.rdIdx++];
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <MICRORL_UART_GetChar+0x50>)
 8006a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	490c      	ldr	r1, [pc, #48]	; (8006ad4 <MICRORL_UART_GetChar+0x50>)
 8006aa4:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 8006aa8:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <MICRORL_UART_GetChar+0x50>)
 8006aaa:	5cd3      	ldrb	r3, [r2, r3]
 8006aac:	71fb      	strb	r3, [r7, #7]
		if (MircoRL_sRxRingBuf.rdIdx >= MICRORL_uartSIZE_OF_RING_BUFFER)
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <MICRORL_UART_GetChar+0x50>)
 8006ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab6:	dd03      	ble.n	8006ac0 <MICRORL_UART_GetChar+0x3c>
		{
			MircoRL_sRxRingBuf.rdIdx = 0;
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <MICRORL_UART_GetChar+0x50>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}
		return (int)data;
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	e001      	b.n	8006ac8 <MICRORL_UART_GetChar+0x44>
	}
	else
	{
		return (MICRORL_UART_NO_DATA);
 8006ac4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	2000897c 	.word	0x2000897c

08006ad8 <MICRORL_UART_GetCharBlocking>:
//=======================================================================================
int MICRORL_UART_GetCharBlocking()
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
	xSemaphoreTake(MicroRL_xRxSemaphore, portMAX_DELAY);
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <MICRORL_UART_GetCharBlocking+0x1c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f00b fbef 	bl	80122c8 <xQueueSemaphoreTake>
	return MICRORL_UART_GetChar();
 8006aea:	f7ff ffcb 	bl	8006a84 <MICRORL_UART_GetChar>
 8006aee:	4603      	mov	r3, r0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20008958 	.word	0x20008958

08006af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006af8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006afa:	e003      	b.n	8006b04 <LoopCopyDataInit>

08006afc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006afe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006b00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006b02:	3104      	adds	r1, #4

08006b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006b04:	480a      	ldr	r0, [pc, #40]	; (8006b30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006b08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006b0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006b0c:	d3f6      	bcc.n	8006afc <CopyDataInit>
  ldr r2, =_sbss
 8006b0e:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006b10:	e002      	b.n	8006b18 <LoopFillZerobss>

08006b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006b12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006b14:	f842 3b04 	str.w	r3, [r2], #4

08006b18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006b1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006b1c:	d3f9      	bcc.n	8006b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b1e:	f7fd f9dd 	bl	8003edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b22:	f00e f98f 	bl	8014e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b26:	f7fc fe1d 	bl	8003764 <main>
  bx lr
 8006b2a:	4770      	bx	lr
  ldr r3, =_sidata
 8006b2c:	0801e964 	.word	0x0801e964
  ldr r0, =_sdata
 8006b30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006b34:	20000318 	.word	0x20000318
  ldr r2, =_sbss
 8006b38:	20000318 	.word	0x20000318
  ldr r3, = _ebss
 8006b3c:	20009e30 	.word	0x20009e30

08006b40 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b40:	e7fe      	b.n	8006b40 <COMP_ACQ_IRQHandler>

08006b42 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b4c:	2003      	movs	r0, #3
 8006b4e:	f000 fe81 	bl	8007854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b52:	2000      	movs	r0, #0
 8006b54:	f7fd f872 	bl	8003c3c <HAL_InitTick>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	71fb      	strb	r3, [r7, #7]
 8006b62:	e001      	b.n	8006b68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b64:	f7fd f83c 	bl	8003be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b68:	79fb      	ldrb	r3, [r7, #7]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b78:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <HAL_IncTick+0x1c>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <HAL_IncTick+0x20>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4413      	add	r3, r2
 8006b82:	4a03      	ldr	r2, [pc, #12]	; (8006b90 <HAL_IncTick+0x1c>)
 8006b84:	6013      	str	r3, [r2, #0]
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	200091f4 	.word	0x200091f4
 8006b94:	20000014 	.word	0x20000014

08006b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <HAL_GetTick+0x10>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr
 8006ba8:	200091f4 	.word	0x200091f4

08006bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bb4:	f7ff fff0 	bl	8006b98 <HAL_GetTick>
 8006bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d004      	beq.n	8006bd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <HAL_Delay+0x40>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006bd0:	bf00      	nop
 8006bd2:	f7ff ffe1 	bl	8006b98 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d8f7      	bhi.n	8006bd2 <HAL_Delay+0x26>
  {
  }
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000014 	.word	0x20000014

08006bf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	; 0x38
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e127      	b.n	8006e60 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d115      	bne.n	8006c4a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c2c:	4b8e      	ldr	r3, [pc, #568]	; (8006e68 <HAL_ADC_Init+0x278>)
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	4a8d      	ldr	r2, [pc, #564]	; (8006e68 <HAL_ADC_Init+0x278>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6213      	str	r3, [r2, #32]
 8006c38:	4b8b      	ldr	r3, [pc, #556]	; (8006e68 <HAL_ADC_Init+0x278>)
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fa f98d 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f040 80ff 	bne.w	8006e56 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c60:	f023 0302 	bic.w	r3, r3, #2
 8006c64:	f043 0202 	orr.w	r2, r3, #2
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8006c6c:	4b7f      	ldr	r3, [pc, #508]	; (8006e6c <HAL_ADC_Init+0x27c>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	497c      	ldr	r1, [pc, #496]	; (8006e6c <HAL_ADC_Init+0x27c>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006c86:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c8e:	4619      	mov	r1, r3
 8006c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c94:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	fa93 f3a3 	rbit	r3, r3
 8006c9c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	fab3 f383 	clz	r3, r3
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8006caa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006cb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cb8:	4619      	mov	r1, r3
 8006cba:	2302      	movs	r3, #2
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	fa93 f3a3 	rbit	r3, r3
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	fab3 f383 	clz	r3, r3
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8006cd2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8006cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d007      	beq.n	8006cf2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8006cea:	4313      	orrs	r3, r2
 8006cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	d04f      	beq.n	8006da0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d06:	4313      	orrs	r3, r2
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006d12:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6912      	ldr	r2, [r2, #16]
 8006d18:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006d1c:	d003      	beq.n	8006d26 <HAL_ADC_Init+0x136>
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6912      	ldr	r2, [r2, #16]
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	d102      	bne.n	8006d2c <HAL_ADC_Init+0x13c>
 8006d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d2a:	e000      	b.n	8006d2e <HAL_ADC_Init+0x13e>
 8006d2c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8006d2e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8006d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d32:	4313      	orrs	r3, r2
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d125      	bne.n	8006d8c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d114      	bne.n	8006d74 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006d54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	fa92 f2a2 	rbit	r2, r2
 8006d5c:	617a      	str	r2, [r7, #20]
  return result;
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	fab2 f282 	clz	r2, r2
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	4093      	lsls	r3, r2
 8006d68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
 8006d72:	e00b      	b.n	8006d8c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d84:	f043 0201 	orr.w	r2, r3, #1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	4b37      	ldr	r3, [pc, #220]	; (8006e70 <HAL_ADC_Init+0x280>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	4b33      	ldr	r3, [pc, #204]	; (8006e74 <HAL_ADC_Init+0x284>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbc:	d003      	beq.n	8006dc6 <HAL_ADC_Init+0x1d6>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d119      	bne.n	8006dfa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dcc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8006dda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	fa92 f2a2 	rbit	r2, r2
 8006de2:	60fa      	str	r2, [r7, #12]
  return result;
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	fab2 f282 	clz	r2, r2
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	fa03 f202 	lsl.w	r2, r3, r2
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
 8006df8:	e007      	b.n	8006e0a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <HAL_ADC_Init+0x288>)
 8006e12:	4013      	ands	r3, r2
 8006e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d10b      	bne.n	8006e32 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e24:	f023 0303 	bic.w	r3, r3, #3
 8006e28:	f043 0201 	orr.w	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e30:	e014      	b.n	8006e5c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e36:	f023 0312 	bic.w	r3, r3, #18
 8006e3a:	f043 0210 	orr.w	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e46:	f043 0201 	orr.w	r2, r3, #1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006e54:	e002      	b.n	8006e5c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3738      	adds	r7, #56	; 0x38
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40012700 	.word	0x40012700
 8006e70:	fcfc16ff 	.word	0xfcfc16ff
 8006e74:	c0fff189 	.word	0xc0fff189
 8006e78:	bf80fffe 	.word	0xbf80fffe

08006e7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_ADC_Start+0x1a>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e04e      	b.n	8006f34 <HAL_ADC_Start+0xb8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fb94 	bl	80075cc <ADC_Enable>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d141      	bne.n	8006f32 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ed8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eec:	d106      	bne.n	8006efc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef2:	f023 0206 	bic.w	r2, r3, #6
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8006efa:	e002      	b.n	8006f02 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f12:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f30:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_ADC_Stop+0x1a>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e01a      	b.n	8006f8c <HAL_ADC_Stop+0x50>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb8a 	bl	8007678 <ADC_ConversionStop_Disable>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d109      	bne.n	8006f82 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	f043 0201 	orr.w	r2, r3, #1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb0:	d113      	bne.n	8006fda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc0:	d10b      	bne.n	8006fda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	f043 0220 	orr.w	r2, r3, #32
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e061      	b.n	800709e <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006fda:	f7ff fddd 	bl	8006b98 <HAL_GetTick>
 8006fde:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006fe0:	e01a      	b.n	8007018 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d016      	beq.n	8007018 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d007      	beq.n	8007000 <HAL_ADC_PollForConversion+0x6c>
 8006ff0:	f7ff fdd2 	bl	8006b98 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d20b      	bcs.n	8007018 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007004:	f043 0204 	orr.w	r2, r3, #4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e042      	b.n	800709e <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0dd      	beq.n	8006fe2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f06f 0212 	mvn.w	r2, #18
 8007036:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d124      	bne.n	800709c <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007058:	2b00      	cmp	r3, #0
 800705a:	d11f      	bne.n	800709c <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007066:	2b00      	cmp	r3, #0
 8007068:	d006      	beq.n	8007078 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007074:	2b00      	cmp	r3, #0
 8007076:	d111      	bne.n	800709c <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d105      	bne.n	800709c <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	f043 0201 	orr.w	r2, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d14e      	bne.n	8007172 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d147      	bne.n	8007172 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d105      	bne.n	80070fa <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d12c      	bne.n	8007162 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800710e:	2b00      	cmp	r3, #0
 8007110:	d127      	bne.n	8007162 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800712a:	2b00      	cmp	r3, #0
 800712c:	d119      	bne.n	8007162 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0220 	bic.w	r2, r2, #32
 800713c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f043 0201 	orr.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f8ab 	bl	80072be <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0212 	mvn.w	r2, #18
 8007170:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d15c      	bne.n	800723a <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b04      	cmp	r3, #4
 800718c:	d155      	bne.n	800723a <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d13a      	bne.n	800722a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d006      	beq.n	80071d0 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d12c      	bne.n	800722a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d125      	bne.n	800722a <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d11e      	bne.n	800722a <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d119      	bne.n	800722a <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007204:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	f043 0201 	orr.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa5e 	bl	80076ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 020c 	mvn.w	r2, #12
 8007238:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d114      	bne.n	8007272 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b01      	cmp	r3, #1
 8007254:	d10d      	bne.n	8007272 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f834 	bl	80072d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0201 	mvn.w	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800727c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007280:	d119      	bne.n	80072b6 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0320 	and.w	r3, r3, #32
 800728c:	2b20      	cmp	r3, #32
 800728e:	d112      	bne.n	80072b6 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007294:	f043 0202 	orr.w	r2, r3, #2
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0220 	mvn.w	r2, #32
 80072a4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f81b 	bl	80072e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0220 	mvn.w	r2, #32
 80072b4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr

080072e2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_ADC_ConfigChannel+0x20>
 8007310:	2302      	movs	r3, #2
 8007312:	e14f      	b.n	80075b4 <HAL_ADC_ConfigChannel+0x2c0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b06      	cmp	r3, #6
 8007322:	d81c      	bhi.n	800735e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	3b05      	subs	r3, #5
 8007336:	221f      	movs	r2, #31
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	4019      	ands	r1, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	3b05      	subs	r3, #5
 8007350:	fa00 f203 	lsl.w	r2, r0, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	641a      	str	r2, [r3, #64]	; 0x40
 800735c:	e07e      	b.n	800745c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b0c      	cmp	r3, #12
 8007364:	d81c      	bhi.n	80073a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	3b23      	subs	r3, #35	; 0x23
 8007378:	221f      	movs	r2, #31
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	43db      	mvns	r3, r3
 8007380:	4019      	ands	r1, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	3b23      	subs	r3, #35	; 0x23
 8007392:	fa00 f203 	lsl.w	r2, r0, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	63da      	str	r2, [r3, #60]	; 0x3c
 800739e:	e05d      	b.n	800745c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b12      	cmp	r3, #18
 80073a6:	d81c      	bhi.n	80073e2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	3b41      	subs	r3, #65	; 0x41
 80073ba:	221f      	movs	r2, #31
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	4019      	ands	r1, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	3b41      	subs	r3, #65	; 0x41
 80073d4:	fa00 f203 	lsl.w	r2, r0, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
 80073e0:	e03c      	b.n	800745c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b18      	cmp	r3, #24
 80073e8:	d81c      	bhi.n	8007424 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	3b5f      	subs	r3, #95	; 0x5f
 80073fc:	221f      	movs	r2, #31
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43db      	mvns	r3, r3
 8007404:	4019      	ands	r1, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	3b5f      	subs	r3, #95	; 0x5f
 8007416:	fa00 f203 	lsl.w	r2, r0, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	635a      	str	r2, [r3, #52]	; 0x34
 8007422:	e01b      	b.n	800745c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	3b7d      	subs	r3, #125	; 0x7d
 8007436:	221f      	movs	r2, #31
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	43db      	mvns	r3, r3
 800743e:	4019      	ands	r1, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	6818      	ldr	r0, [r3, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	3b7d      	subs	r3, #125	; 0x7d
 8007450:	fa00 f203 	lsl.w	r2, r0, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b09      	cmp	r3, #9
 8007462:	d81a      	bhi.n	800749a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6959      	ldr	r1, [r3, #20]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	2207      	movs	r2, #7
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	43db      	mvns	r3, r3
 800747c:	4019      	ands	r1, r3
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6898      	ldr	r0, [r3, #8]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4613      	mov	r3, r2
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4413      	add	r3, r2
 800748c:	fa00 f203 	lsl.w	r2, r0, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	615a      	str	r2, [r3, #20]
 8007498:	e05d      	b.n	8007556 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b13      	cmp	r3, #19
 80074a0:	d81c      	bhi.n	80074dc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6919      	ldr	r1, [r3, #16]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	3b1e      	subs	r3, #30
 80074b4:	2207      	movs	r2, #7
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43db      	mvns	r3, r3
 80074bc:	4019      	ands	r1, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6898      	ldr	r0, [r3, #8]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4413      	add	r3, r2
 80074cc:	3b1e      	subs	r3, #30
 80074ce:	fa00 f203 	lsl.w	r2, r0, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	611a      	str	r2, [r3, #16]
 80074da:	e03c      	b.n	8007556 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b1d      	cmp	r3, #29
 80074e2:	d81c      	bhi.n	800751e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68d9      	ldr	r1, [r3, #12]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	4413      	add	r3, r2
 80074f4:	3b3c      	subs	r3, #60	; 0x3c
 80074f6:	2207      	movs	r2, #7
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	43db      	mvns	r3, r3
 80074fe:	4019      	ands	r1, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6898      	ldr	r0, [r3, #8]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	4613      	mov	r3, r2
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	4413      	add	r3, r2
 800750e:	3b3c      	subs	r3, #60	; 0x3c
 8007510:	fa00 f203 	lsl.w	r2, r0, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	60da      	str	r2, [r3, #12]
 800751c:	e01b      	b.n	8007556 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	3b5a      	subs	r3, #90	; 0x5a
 8007530:	2207      	movs	r2, #7
 8007532:	fa02 f303 	lsl.w	r3, r2, r3
 8007536:	43db      	mvns	r3, r3
 8007538:	4019      	ands	r1, r3
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6898      	ldr	r0, [r3, #8]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4613      	mov	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4413      	add	r3, r2
 8007548:	3b5a      	subs	r3, #90	; 0x5a
 800754a:	fa00 f203 	lsl.w	r2, r0, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b10      	cmp	r3, #16
 800755c:	d003      	beq.n	8007566 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007562:	2b11      	cmp	r3, #17
 8007564:	d121      	bne.n	80075aa <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8007566:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <HAL_ADC_ConfigChannel+0x2cc>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d11b      	bne.n	80075aa <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8007572:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <HAL_ADC_ConfigChannel+0x2cc>)
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <HAL_ADC_ConfigChannel+0x2cc>)
 8007578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800757c:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b10      	cmp	r3, #16
 8007584:	d111      	bne.n	80075aa <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <HAL_ADC_ConfigChannel+0x2d0>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a0f      	ldr	r2, [pc, #60]	; (80075c8 <HAL_ADC_ConfigChannel+0x2d4>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	0c9a      	lsrs	r2, r3, #18
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800759c:	e002      	b.n	80075a4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f9      	bne.n	800759e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40012700 	.word	0x40012700
 80075c4:	20000000 	.word	0x20000000
 80075c8:	431bde83 	.word	0x431bde83

080075cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d03c      	beq.n	8007664 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0201 	orr.w	r2, r2, #1
 80075f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <ADC_Enable+0xa4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <ADC_Enable+0xa8>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	0c9a      	lsrs	r2, r3, #18
 8007606:	4613      	mov	r3, r2
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	4413      	add	r3, r2
 800760c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800760e:	e002      	b.n	8007616 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3b01      	subs	r3, #1
 8007614:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f9      	bne.n	8007610 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800761c:	f7ff fabc 	bl	8006b98 <HAL_GetTick>
 8007620:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007622:	e018      	b.n	8007656 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8007624:	f7ff fab8 	bl	8006b98 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d911      	bls.n	8007656 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007636:	f043 0210 	orr.w	r2, r3, #16
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007642:	f043 0201 	orr.w	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e007      	b.n	8007666 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	d1df      	bne.n	8007624 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000000 	.word	0x20000000
 8007674:	431bde83 	.word	0x431bde83

08007678 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d127      	bne.n	80076e2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80076a2:	f7ff fa79 	bl	8006b98 <HAL_GetTick>
 80076a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80076a8:	e014      	b.n	80076d4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80076aa:	f7ff fa75 	bl	8006b98 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d90d      	bls.n	80076d4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076bc:	f043 0210 	orr.w	r2, r3, #16
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c8:	f043 0201 	orr.w	r2, r3, #1
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e007      	b.n	80076e4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d0e3      	beq.n	80076aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr
	...

08007700 <__NVIC_SetPriorityGrouping>:
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <__NVIC_SetPriorityGrouping+0x44>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800771c:	4013      	ands	r3, r2
 800771e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800772c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <__NVIC_SetPriorityGrouping+0x44>)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	60d3      	str	r3, [r2, #12]
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	e000ed00 	.word	0xe000ed00

08007748 <__NVIC_GetPriorityGrouping>:
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <__NVIC_GetPriorityGrouping+0x18>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	f003 0307 	and.w	r3, r3, #7
}
 8007756:	4618      	mov	r0, r3
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000ed00 	.word	0xe000ed00

08007764 <__NVIC_EnableIRQ>:
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800776e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007772:	2b00      	cmp	r3, #0
 8007774:	db0b      	blt.n	800778e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	f003 021f 	and.w	r2, r3, #31
 800777c:	4906      	ldr	r1, [pc, #24]	; (8007798 <__NVIC_EnableIRQ+0x34>)
 800777e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2001      	movs	r0, #1
 8007786:	fa00 f202 	lsl.w	r2, r0, r2
 800778a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr
 8007798:	e000e100 	.word	0xe000e100

0800779c <__NVIC_SetPriority>:
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	6039      	str	r1, [r7, #0]
 80077a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	db0a      	blt.n	80077c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	490c      	ldr	r1, [pc, #48]	; (80077e8 <__NVIC_SetPriority+0x4c>)
 80077b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ba:	0112      	lsls	r2, r2, #4
 80077bc:	b2d2      	uxtb	r2, r2
 80077be:	440b      	add	r3, r1
 80077c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077c4:	e00a      	b.n	80077dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	4908      	ldr	r1, [pc, #32]	; (80077ec <__NVIC_SetPriority+0x50>)
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	3b04      	subs	r3, #4
 80077d4:	0112      	lsls	r2, r2, #4
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	440b      	add	r3, r1
 80077da:	761a      	strb	r2, [r3, #24]
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	e000e100 	.word	0xe000e100
 80077ec:	e000ed00 	.word	0xe000ed00

080077f0 <NVIC_EncodePriority>:
{
 80077f0:	b480      	push	{r7}
 80077f2:	b089      	sub	sp, #36	; 0x24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f1c3 0307 	rsb	r3, r3, #7
 800780a:	2b04      	cmp	r3, #4
 800780c:	bf28      	it	cs
 800780e:	2304      	movcs	r3, #4
 8007810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	3304      	adds	r3, #4
 8007816:	2b06      	cmp	r3, #6
 8007818:	d902      	bls.n	8007820 <NVIC_EncodePriority+0x30>
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	3b03      	subs	r3, #3
 800781e:	e000      	b.n	8007822 <NVIC_EncodePriority+0x32>
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007824:	f04f 32ff 	mov.w	r2, #4294967295
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	43da      	mvns	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	401a      	ands	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007838:	f04f 31ff 	mov.w	r1, #4294967295
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	43d9      	mvns	r1, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007848:	4313      	orrs	r3, r2
}
 800784a:	4618      	mov	r0, r3
 800784c:	3724      	adds	r7, #36	; 0x24
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr

08007854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ff4f 	bl	8007700 <__NVIC_SetPriorityGrouping>
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b086      	sub	sp, #24
 800786e:	af00      	add	r7, sp, #0
 8007870:	4603      	mov	r3, r0
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800787c:	f7ff ff64 	bl	8007748 <__NVIC_GetPriorityGrouping>
 8007880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	6978      	ldr	r0, [r7, #20]
 8007888:	f7ff ffb2 	bl	80077f0 <NVIC_EncodePriority>
 800788c:	4602      	mov	r2, r0
 800788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007892:	4611      	mov	r1, r2
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff81 	bl	800779c <__NVIC_SetPriority>
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	4603      	mov	r3, r0
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff ff57 	bl	8007764 <__NVIC_EnableIRQ>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e014      	b.n	80078fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	791b      	ldrb	r3, [r3, #4]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7f9 fe8b 	bl	80015fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	795b      	ldrb	r3, [r3, #5]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_DAC_Start+0x16>
 8007914:	2302      	movs	r3, #2
 8007916:	e03e      	b.n	8007996 <HAL_DAC_Start+0x94>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	2201      	movs	r2, #1
 8007932:	409a      	lsls	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10f      	bne.n	8007962 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800794c:	2b3c      	cmp	r3, #60	; 0x3c
 800794e:	d11b      	bne.n	8007988 <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	e012      	b.n	8007988 <HAL_DAC_Start+0x86>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800796c:	213c      	movs	r1, #60	; 0x3c
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	fa01 f303 	lsl.w	r3, r1, r3
 8007974:	429a      	cmp	r2, r3
 8007976:	d107      	bne.n	8007988 <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0202 	orr.w	r2, r2, #2
 8007986:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	3308      	adds	r3, #8
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e004      	b.n	80079d4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	3314      	adds	r3, #20
 80079d2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	461a      	mov	r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr

080079e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	795b      	ldrb	r3, [r3, #5]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_DAC_ConfigChannel+0x18>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e044      	b.n	8007a8a <HAL_DAC_ConfigChannel+0xa2>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8007a14:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4013      	ands	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6819      	ldr	r1, [r3, #0]
 8007a4e:	22c0      	movs	r2, #192	; 0xc0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43da      	mvns	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	400a      	ands	r2, r1
 8007a5e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6819      	ldr	r1, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	22c0      	movs	r2, #192	; 0xc0
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43da      	mvns	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	400a      	ands	r2, r1
 8007a7a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e059      	b.n	8007b5a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <HAL_DMA_Init+0xd0>)
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d80f      	bhi.n	8007ad2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4b2b      	ldr	r3, [pc, #172]	; (8007b68 <HAL_DMA_Init+0xd4>)
 8007aba:	4413      	add	r3, r2
 8007abc:	4a2b      	ldr	r2, [pc, #172]	; (8007b6c <HAL_DMA_Init+0xd8>)
 8007abe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac2:	091b      	lsrs	r3, r3, #4
 8007ac4:	009a      	lsls	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a28      	ldr	r2, [pc, #160]	; (8007b70 <HAL_DMA_Init+0xdc>)
 8007ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ad0:	e00e      	b.n	8007af0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	4b26      	ldr	r3, [pc, #152]	; (8007b74 <HAL_DMA_Init+0xe0>)
 8007ada:	4413      	add	r3, r2
 8007adc:	4a23      	ldr	r2, [pc, #140]	; (8007b6c <HAL_DMA_Init+0xd8>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	091b      	lsrs	r3, r3, #4
 8007ae4:	009a      	lsls	r2, r3, #2
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a22      	ldr	r2, [pc, #136]	; (8007b78 <HAL_DMA_Init+0xe4>)
 8007aee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr
 8007b64:	40026407 	.word	0x40026407
 8007b68:	bffd9ff8 	.word	0xbffd9ff8
 8007b6c:	cccccccd 	.word	0xcccccccd
 8007b70:	40026000 	.word	0x40026000
 8007b74:	bffd9bf8 	.word	0xbffd9bf8
 8007b78:	40026400 	.word	0x40026400

08007b7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d005      	beq.n	8007ba0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2204      	movs	r2, #4
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
 8007b9e:	e029      	b.n	8007bf4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 020e 	bic.w	r2, r2, #14
 8007bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0201 	bic.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	f003 021c 	and.w	r2, r3, #28
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	2101      	movs	r1, #1
 8007bce:	fa01 f202 	lsl.w	r2, r1, r2
 8007bd2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	4798      	blx	r3
    }
  }
  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	f003 031c 	and.w	r3, r3, #28
 8007c1e:	2204      	movs	r2, #4
 8007c20:	409a      	lsls	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d026      	beq.n	8007c78 <HAL_DMA_IRQHandler+0x7a>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d021      	beq.n	8007c78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0204 	bic.w	r2, r2, #4
 8007c50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f003 021c 	and.w	r2, r3, #28
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	2104      	movs	r1, #4
 8007c60:	fa01 f202 	lsl.w	r2, r1, r2
 8007c64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d071      	beq.n	8007d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007c76:	e06c      	b.n	8007d52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	f003 031c 	and.w	r3, r3, #28
 8007c80:	2202      	movs	r2, #2
 8007c82:	409a      	lsls	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02e      	beq.n	8007cea <HAL_DMA_IRQHandler+0xec>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d029      	beq.n	8007cea <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10b      	bne.n	8007cbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 020a 	bic.w	r2, r2, #10
 8007cb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	f003 021c 	and.w	r2, r3, #28
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc8:	2102      	movs	r1, #2
 8007cca:	fa01 f202 	lsl.w	r2, r1, r2
 8007cce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d038      	beq.n	8007d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007ce8:	e033      	b.n	8007d52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f003 031c 	and.w	r3, r3, #28
 8007cf2:	2208      	movs	r2, #8
 8007cf4:	409a      	lsls	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02a      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x156>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d025      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 020e 	bic.w	r2, r2, #14
 8007d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	f003 021c 	and.w	r2, r3, #28
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	2101      	movs	r1, #1
 8007d26:	fa01 f202 	lsl.w	r2, r1, r2
 8007d2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
}
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007d72:	e160      	b.n	8008036 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	2101      	movs	r1, #1
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d80:	4013      	ands	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 8152 	beq.w	8008030 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d00b      	beq.n	8007dac <HAL_GPIO_Init+0x50>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d007      	beq.n	8007dac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007da0:	2b11      	cmp	r3, #17
 8007da2:	d003      	beq.n	8007dac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2b12      	cmp	r3, #18
 8007daa:	d130      	bne.n	8007e0e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	2203      	movs	r2, #3
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8007de2:	2201      	movs	r2, #1
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	43db      	mvns	r3, r3
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4013      	ands	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	091b      	lsrs	r3, r3, #4
 8007df8:	f003 0201 	and.w	r2, r3, #1
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	2203      	movs	r2, #3
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4013      	ands	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d003      	beq.n	8007e4e <HAL_GPIO_Init+0xf2>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b12      	cmp	r3, #18
 8007e4c:	d123      	bne.n	8007e96 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	08da      	lsrs	r2, r3, #3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3208      	adds	r2, #8
 8007e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	220f      	movs	r2, #15
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	691a      	ldr	r2, [r3, #16]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	08da      	lsrs	r2, r3, #3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3208      	adds	r2, #8
 8007e90:	6939      	ldr	r1, [r7, #16]
 8007e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f003 0203 	and.w	r2, r3, #3
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80ac 	beq.w	8008030 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ed8:	4b5d      	ldr	r3, [pc, #372]	; (8008050 <HAL_GPIO_Init+0x2f4>)
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	4a5c      	ldr	r2, [pc, #368]	; (8008050 <HAL_GPIO_Init+0x2f4>)
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	6213      	str	r3, [r2, #32]
 8007ee4:	4b5a      	ldr	r3, [pc, #360]	; (8008050 <HAL_GPIO_Init+0x2f4>)
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8007ef0:	4a58      	ldr	r2, [pc, #352]	; (8008054 <HAL_GPIO_Init+0x2f8>)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	089b      	lsrs	r3, r3, #2
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	220f      	movs	r2, #15
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4013      	ands	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a50      	ldr	r2, [pc, #320]	; (8008058 <HAL_GPIO_Init+0x2fc>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d025      	beq.n	8007f68 <HAL_GPIO_Init+0x20c>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a4f      	ldr	r2, [pc, #316]	; (800805c <HAL_GPIO_Init+0x300>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d01f      	beq.n	8007f64 <HAL_GPIO_Init+0x208>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a4e      	ldr	r2, [pc, #312]	; (8008060 <HAL_GPIO_Init+0x304>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d019      	beq.n	8007f60 <HAL_GPIO_Init+0x204>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a4d      	ldr	r2, [pc, #308]	; (8008064 <HAL_GPIO_Init+0x308>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <HAL_GPIO_Init+0x200>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a4c      	ldr	r2, [pc, #304]	; (8008068 <HAL_GPIO_Init+0x30c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00d      	beq.n	8007f58 <HAL_GPIO_Init+0x1fc>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a4b      	ldr	r2, [pc, #300]	; (800806c <HAL_GPIO_Init+0x310>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d007      	beq.n	8007f54 <HAL_GPIO_Init+0x1f8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a4a      	ldr	r2, [pc, #296]	; (8008070 <HAL_GPIO_Init+0x314>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d101      	bne.n	8007f50 <HAL_GPIO_Init+0x1f4>
 8007f4c:	2306      	movs	r3, #6
 8007f4e:	e00c      	b.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f50:	2307      	movs	r3, #7
 8007f52:	e00a      	b.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f54:	2305      	movs	r3, #5
 8007f56:	e008      	b.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f58:	2304      	movs	r3, #4
 8007f5a:	e006      	b.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e004      	b.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e002      	b.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	f002 0203 	and.w	r2, r2, #3
 8007f70:	0092      	lsls	r2, r2, #2
 8007f72:	4093      	lsls	r3, r2
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007f7a:	4936      	ldr	r1, [pc, #216]	; (8008054 <HAL_GPIO_Init+0x2f8>)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	089b      	lsrs	r3, r3, #2
 8007f80:	3302      	adds	r3, #2
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f88:	4b3a      	ldr	r3, [pc, #232]	; (8008074 <HAL_GPIO_Init+0x318>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	43db      	mvns	r3, r3
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	4013      	ands	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007fac:	4a31      	ldr	r2, [pc, #196]	; (8008074 <HAL_GPIO_Init+0x318>)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007fb2:	4b30      	ldr	r3, [pc, #192]	; (8008074 <HAL_GPIO_Init+0x318>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007fd6:	4a27      	ldr	r2, [pc, #156]	; (8008074 <HAL_GPIO_Init+0x318>)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fdc:	4b25      	ldr	r3, [pc, #148]	; (8008074 <HAL_GPIO_Init+0x318>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008000:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <HAL_GPIO_Init+0x318>)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008006:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <HAL_GPIO_Init+0x318>)
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	43db      	mvns	r3, r3
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4013      	ands	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <HAL_GPIO_Init+0x318>)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	3301      	adds	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	f47f ae97 	bne.w	8007d74 <HAL_GPIO_Init+0x18>
  }
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr
 8008050:	40023800 	.word	0x40023800
 8008054:	40010000 	.word	0x40010000
 8008058:	40020000 	.word	0x40020000
 800805c:	40020400 	.word	0x40020400
 8008060:	40020800 	.word	0x40020800
 8008064:	40020c00 	.word	0x40020c00
 8008068:	40021000 	.word	0x40021000
 800806c:	40021400 	.word	0x40021400
 8008070:	40021800 	.word	0x40021800
 8008074:	40010400 	.word	0x40010400

08008078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	887b      	ldrh	r3, [r7, #2]
 800808a:	4013      	ands	r3, r2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e001      	b.n	800809a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	807b      	strh	r3, [r7, #2]
 80080b2:	4613      	mov	r3, r2
 80080b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080b6:	787b      	ldrb	r3, [r7, #1]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080bc:	887a      	ldrh	r2, [r7, #2]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80080c2:	e003      	b.n	80080cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80080c4:	887b      	ldrh	r3, [r7, #2]
 80080c6:	041a      	lsls	r2, r3, #16
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	619a      	str	r2, [r3, #24]
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080e8:	887a      	ldrh	r2, [r7, #2]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4013      	ands	r3, r2
 80080ee:	041a      	lsls	r2, r3, #16
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	43d9      	mvns	r1, r3
 80080f4:	887b      	ldrh	r3, [r7, #2]
 80080f6:	400b      	ands	r3, r1
 80080f8:	431a      	orrs	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	619a      	str	r2, [r3, #24]
}
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr

08008108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e11f      	b.n	800835a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fa fbd6 	bl	80028e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2224      	movs	r2, #36	; 0x24
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800815a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800816a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800816c:	f002 f982 	bl	800a474 <HAL_RCC_GetPCLK1Freq>
 8008170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	4a7b      	ldr	r2, [pc, #492]	; (8008364 <HAL_I2C_Init+0x25c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d807      	bhi.n	800818c <HAL_I2C_Init+0x84>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4a7a      	ldr	r2, [pc, #488]	; (8008368 <HAL_I2C_Init+0x260>)
 8008180:	4293      	cmp	r3, r2
 8008182:	bf94      	ite	ls
 8008184:	2301      	movls	r3, #1
 8008186:	2300      	movhi	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	e006      	b.n	800819a <HAL_I2C_Init+0x92>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4a77      	ldr	r2, [pc, #476]	; (800836c <HAL_I2C_Init+0x264>)
 8008190:	4293      	cmp	r3, r2
 8008192:	bf94      	ite	ls
 8008194:	2301      	movls	r3, #1
 8008196:	2300      	movhi	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e0db      	b.n	800835a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a72      	ldr	r2, [pc, #456]	; (8008370 <HAL_I2C_Init+0x268>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	0c9b      	lsrs	r3, r3, #18
 80081ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a64      	ldr	r2, [pc, #400]	; (8008364 <HAL_I2C_Init+0x25c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d802      	bhi.n	80081dc <HAL_I2C_Init+0xd4>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3301      	adds	r3, #1
 80081da:	e009      	b.n	80081f0 <HAL_I2C_Init+0xe8>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	4a63      	ldr	r2, [pc, #396]	; (8008374 <HAL_I2C_Init+0x26c>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	099b      	lsrs	r3, r3, #6
 80081ee:	3301      	adds	r3, #1
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	430b      	orrs	r3, r1
 80081f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	4956      	ldr	r1, [pc, #344]	; (8008364 <HAL_I2C_Init+0x25c>)
 800820c:	428b      	cmp	r3, r1
 800820e:	d80d      	bhi.n	800822c <HAL_I2C_Init+0x124>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	1e59      	subs	r1, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	fbb1 f3f3 	udiv	r3, r1, r3
 800821e:	3301      	adds	r3, #1
 8008220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008224:	2b04      	cmp	r3, #4
 8008226:	bf38      	it	cc
 8008228:	2304      	movcc	r3, #4
 800822a:	e04f      	b.n	80082cc <HAL_I2C_Init+0x1c4>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d111      	bne.n	8008258 <HAL_I2C_Init+0x150>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1e58      	subs	r0, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	440b      	add	r3, r1
 8008242:	fbb0 f3f3 	udiv	r3, r0, r3
 8008246:	3301      	adds	r3, #1
 8008248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800824c:	2b00      	cmp	r3, #0
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	e012      	b.n	800827e <HAL_I2C_Init+0x176>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	1e58      	subs	r0, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6859      	ldr	r1, [r3, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	0099      	lsls	r1, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	fbb0 f3f3 	udiv	r3, r0, r3
 800826e:	3301      	adds	r3, #1
 8008270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf0c      	ite	eq
 8008278:	2301      	moveq	r3, #1
 800827a:	2300      	movne	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_I2C_Init+0x17e>
 8008282:	2301      	movs	r3, #1
 8008284:	e022      	b.n	80082cc <HAL_I2C_Init+0x1c4>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10e      	bne.n	80082ac <HAL_I2C_Init+0x1a4>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1e58      	subs	r0, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6859      	ldr	r1, [r3, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	440b      	add	r3, r1
 800829c:	fbb0 f3f3 	udiv	r3, r0, r3
 80082a0:	3301      	adds	r3, #1
 80082a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082aa:	e00f      	b.n	80082cc <HAL_I2C_Init+0x1c4>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1e58      	subs	r0, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	0099      	lsls	r1, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	fbb0 f3f3 	udiv	r3, r0, r3
 80082c2:	3301      	adds	r3, #1
 80082c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	6809      	ldr	r1, [r1, #0]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69da      	ldr	r2, [r3, #28]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	6911      	ldr	r1, [r2, #16]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	68d2      	ldr	r2, [r2, #12]
 8008306:	4311      	orrs	r1, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	430b      	orrs	r3, r1
 800830e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695a      	ldr	r2, [r3, #20]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	000186a0 	.word	0x000186a0
 8008368:	001e847f 	.word	0x001e847f
 800836c:	003d08ff 	.word	0x003d08ff
 8008370:	431bde83 	.word	0x431bde83
 8008374:	10624dd3 	.word	0x10624dd3

08008378 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837a:	b08b      	sub	sp, #44	; 0x2c
 800837c:	af06      	add	r7, sp, #24
 800837e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e0d0      	b.n	800852c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f00c fa9a 	bl	80148d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2203      	movs	r2, #3
 80083a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f004 fb21 	bl	800c9f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
 80083ba:	e04c      	b.n	8008456 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	440b      	add	r3, r1
 80083cc:	3301      	adds	r3, #1
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	4613      	mov	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	440b      	add	r3, r1
 80083e2:	7bfa      	ldrb	r2, [r7, #15]
 80083e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083e6:	7bfa      	ldrb	r2, [r7, #15]
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	b298      	uxth	r0, r3
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	440b      	add	r3, r1
 80083f8:	3336      	adds	r3, #54	; 0x36
 80083fa:	4602      	mov	r2, r0
 80083fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	440b      	add	r3, r1
 800840e:	3303      	adds	r3, #3
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008414:	7bfa      	ldrb	r2, [r7, #15]
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	440b      	add	r3, r1
 8008422:	3338      	adds	r3, #56	; 0x38
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008428:	7bfa      	ldrb	r2, [r7, #15]
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	440b      	add	r3, r1
 8008436:	333c      	adds	r3, #60	; 0x3c
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800843c:	7bfa      	ldrb	r2, [r7, #15]
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	440b      	add	r3, r1
 800844a:	3340      	adds	r3, #64	; 0x40
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	3301      	adds	r3, #1
 8008454:	73fb      	strb	r3, [r7, #15]
 8008456:	7bfa      	ldrb	r2, [r7, #15]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d3ad      	bcc.n	80083bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
 8008464:	e044      	b.n	80084f0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008466:	7bfa      	ldrb	r2, [r7, #15]
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	440b      	add	r3, r1
 8008474:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800847c:	7bfa      	ldrb	r2, [r7, #15]
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4613      	mov	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	440b      	add	r3, r1
 800848a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800848e:	7bfa      	ldrb	r2, [r7, #15]
 8008490:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008492:	7bfa      	ldrb	r2, [r7, #15]
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	440b      	add	r3, r1
 80084a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80084a8:	7bfa      	ldrb	r2, [r7, #15]
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	440b      	add	r3, r1
 80084b6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084be:	7bfa      	ldrb	r2, [r7, #15]
 80084c0:	6879      	ldr	r1, [r7, #4]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	440b      	add	r3, r1
 80084cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80084d0:	2200      	movs	r2, #0
 80084d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084d4:	7bfa      	ldrb	r2, [r7, #15]
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	440b      	add	r3, r1
 80084e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80084e6:	2200      	movs	r2, #0
 80084e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	3301      	adds	r3, #1
 80084ee:	73fb      	strb	r3, [r7, #15]
 80084f0:	7bfa      	ldrb	r2, [r7, #15]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3b5      	bcc.n	8008466 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	687e      	ldr	r6, [r7, #4]
 8008502:	466d      	mov	r5, sp
 8008504:	f106 0410 	add.w	r4, r6, #16
 8008508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800850a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	1d33      	adds	r3, r6, #4
 8008512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008514:	6838      	ldr	r0, [r7, #0]
 8008516:	f004 fa89 	bl	800ca2c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008534 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008542:	2b01      	cmp	r3, #1
 8008544:	d101      	bne.n	800854a <HAL_PCD_Start+0x16>
 8008546:	2302      	movs	r3, #2
 8008548:	e016      	b.n	8008578 <HAL_PCD_Start+0x44>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f004 fa38 	bl	800c9cc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800855c:	2101      	movs	r1, #1
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fa0e 	bl	8009980 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f006 fa14 	bl	800e996 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f006 fa0c 	bl	800e9aa <USB_ReadInterrupts>
 8008592:	4603      	mov	r3, r0
 8008594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800859c:	d102      	bne.n	80085a4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fb0f 	bl	8008bc2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f006 f9fe 	bl	800e9aa <USB_ReadInterrupts>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b8:	d112      	bne.n	80085e0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085cc:	b292      	uxth	r2, r2
 80085ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f00c f9fb 	bl	80149ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80085d8:	2100      	movs	r1, #0
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f8c7 	bl	800876e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f006 f9e0 	bl	800e9aa <USB_ReadInterrupts>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085f4:	d10b      	bne.n	800860e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008608:	b292      	uxth	r2, r2
 800860a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f006 f9c9 	bl	800e9aa <USB_ReadInterrupts>
 8008618:	4603      	mov	r3, r0
 800861a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800861e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008622:	d10b      	bne.n	800863c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008636:	b292      	uxth	r2, r2
 8008638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f006 f9b2 	bl	800e9aa <USB_ReadInterrupts>
 8008646:	4603      	mov	r3, r0
 8008648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800864c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008650:	d126      	bne.n	80086a0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0204 	bic.w	r2, r2, #4
 8008664:	b292      	uxth	r2, r2
 8008666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0208 	bic.w	r2, r2, #8
 800867c:	b292      	uxth	r2, r2
 800867e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f00c f9dc 	bl	8014a40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008690:	b29a      	uxth	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800869a:	b292      	uxth	r2, r2
 800869c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f006 f980 	bl	800e9aa <USB_ReadInterrupts>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b4:	d126      	bne.n	8008704 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0208 	orr.w	r2, r2, #8
 80086c8:	b292      	uxth	r2, r2
 80086ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086e0:	b292      	uxth	r2, r2
 80086e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f042 0204 	orr.w	r2, r2, #4
 80086f8:	b292      	uxth	r2, r2
 80086fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f00c f984 	bl	8014a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4618      	mov	r0, r3
 800870a:	f006 f94e 	bl	800e9aa <USB_ReadInterrupts>
 800870e:	4603      	mov	r3, r0
 8008710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008718:	d10e      	bne.n	8008738 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008722:	b29a      	uxth	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800872c:	b292      	uxth	r2, r2
 800872e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f00c f93d 	bl	80149b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f006 f934 	bl	800e9aa <USB_ReadInterrupts>
 8008742:	4603      	mov	r3, r0
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874c:	d10b      	bne.n	8008766 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008760:	b292      	uxth	r2, r2
 8008762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_PCD_SetAddress+0x1a>
 8008784:	2302      	movs	r3, #2
 8008786:	e013      	b.n	80087b0 <HAL_PCD_SetAddress+0x42>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f006 f8e5 	bl	800e970 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	4608      	mov	r0, r1
 80087c2:	4611      	mov	r1, r2
 80087c4:	461a      	mov	r2, r3
 80087c6:	4603      	mov	r3, r0
 80087c8:	70fb      	strb	r3, [r7, #3]
 80087ca:	460b      	mov	r3, r1
 80087cc:	803b      	strh	r3, [r7, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	da0e      	bge.n	80087fc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	705a      	strb	r2, [r3, #1]
 80087fa:	e00e      	b.n	800881a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	f003 0207 	and.w	r2, r3, #7
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	b2da      	uxtb	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008826:	883a      	ldrh	r2, [r7, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	78ba      	ldrb	r2, [r7, #2]
 8008830:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	b29a      	uxth	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008844:	78bb      	ldrb	r3, [r7, #2]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d102      	bne.n	8008850 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_PCD_EP_Open+0xa6>
 800885a:	2302      	movs	r3, #2
 800885c:	e00e      	b.n	800887c <HAL_PCD_EP_Open+0xc4>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	4618      	mov	r0, r3
 800886e:	f004 f8fd 	bl	800ca6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800887a:	7afb      	ldrb	r3, [r7, #11]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008894:	2b00      	cmp	r3, #0
 8008896:	da0e      	bge.n	80088b6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	4413      	add	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	705a      	strb	r2, [r3, #1]
 80088b4:	e00e      	b.n	80088d4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	f003 0207 	and.w	r2, r3, #7
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	4413      	add	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <HAL_PCD_EP_Close+0x6a>
 80088ea:	2302      	movs	r3, #2
 80088ec:	e00e      	b.n	800890c <HAL_PCD_EP_Close+0x88>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f004 fc1f 	bl	800d140 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	607a      	str	r2, [r7, #4]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	460b      	mov	r3, r1
 8008922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	f003 0207 	and.w	r2, r3, #7
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2200      	movs	r2, #0
 800894c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2200      	movs	r2, #0
 8008952:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	b2da      	uxtb	r2, r3
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	f003 0307 	and.w	r3, r3, #7
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6979      	ldr	r1, [r7, #20]
 8008970:	4618      	mov	r0, r3
 8008972:	f004 fdd1 	bl	800d518 <USB_EPStartXfer>
 8008976:	e005      	b.n	8008984 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6979      	ldr	r1, [r7, #20]
 800897e:	4618      	mov	r0, r3
 8008980:	f004 fdca 	bl	800d518 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	460b      	mov	r3, r1
 8008998:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	f003 0207 	and.w	r2, r3, #7
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	440b      	add	r3, r1
 80089ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80089b0:	681b      	ldr	r3, [r3, #0]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bc80      	pop	{r7}
 80089ba:	4770      	bx	lr

080089bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	460b      	mov	r3, r1
 80089ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2200      	movs	r2, #0
 8008a00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2201      	movs	r2, #1
 8008a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6979      	ldr	r1, [r7, #20]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f004 fd77 	bl	800d518 <USB_EPStartXfer>
 8008a2a:	e005      	b.n	8008a38 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6979      	ldr	r1, [r7, #20]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f004 fd70 	bl	800d518 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	f003 0207 	and.w	r2, r3, #7
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d901      	bls.n	8008a60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e04c      	b.n	8008afa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da0e      	bge.n	8008a86 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	705a      	strb	r2, [r3, #1]
 8008a84:	e00c      	b.n	8008aa0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a86:	78fa      	ldrb	r2, [r7, #3]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4413      	add	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_PCD_EP_SetStall+0x7e>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e01c      	b.n	8008afa <HAL_PCD_EP_SetStall+0xb8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68f9      	ldr	r1, [r7, #12]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f005 fe51 	bl	800e776 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d108      	bne.n	8008af0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f005 ff6c 	bl	800e9c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	f003 020f 	and.w	r2, r3, #15
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d901      	bls.n	8008b20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e040      	b.n	8008ba2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	da0e      	bge.n	8008b46 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	705a      	strb	r2, [r3, #1]
 8008b44:	e00e      	b.n	8008b64 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	f003 0207 	and.w	r2, r3, #7
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	f003 0307 	and.w	r3, r3, #7
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_PCD_EP_ClrStall+0x82>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e00e      	b.n	8008ba2 <HAL_PCD_EP_ClrStall+0xa0>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68f9      	ldr	r1, [r7, #12]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f005 fe3f 	bl	800e816 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr

08008bc2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b08e      	sub	sp, #56	; 0x38
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008bca:	e2df      	b.n	800918c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008bd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8008be2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f040 8158 	bne.w	8008e9c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008bec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d152      	bne.n	8008c9c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c06:	81fb      	strh	r3, [r7, #14]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	89fb      	ldrh	r3, [r7, #14]
 8008c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	3328      	adds	r3, #40	; 0x28
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	4413      	add	r3, r2
 8008c34:	3302      	adds	r3, #2
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	695a      	ldr	r2, [r3, #20]
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	441a      	add	r2, r3
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f00b fe8e 	bl	801497e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 828e 	beq.w	800918c <PCD_EP_ISR_Handler+0x5ca>
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 8289 	bne.w	800918c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	b292      	uxth	r2, r2
 8008c8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008c9a:	e277      	b.n	800918c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008cac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d034      	beq.n	8008d20 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	4413      	add	r3, r2
 8008cca:	3306      	adds	r3, #6
 8008ccc:	005b      	lsls	r3, r3, #1
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f005 feb6 	bl	800ea66 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008d06:	4013      	ands	r3, r2
 8008d08:	823b      	strh	r3, [r7, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	8a3a      	ldrh	r2, [r7, #16]
 8008d10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d14:	b292      	uxth	r2, r2
 8008d16:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f00b fe03 	bl	8014924 <HAL_PCD_SetupStageCallback>
 8008d1e:	e235      	b.n	800918c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008d20:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f280 8231 	bge.w	800918c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008d36:	4013      	ands	r3, r2
 8008d38:	83bb      	strh	r3, [r7, #28]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	8bba      	ldrh	r2, [r7, #28]
 8008d40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d44:	b292      	uxth	r2, r2
 8008d46:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	3306      	adds	r3, #6
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6812      	ldr	r2, [r2, #0]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d019      	beq.n	8008db0 <PCD_EP_ISR_Handler+0x1ee>
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d015      	beq.n	8008db0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	6959      	ldr	r1, [r3, #20]
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f005 fe66 	bl	800ea66 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	695a      	ldr	r2, [r3, #20]
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	441a      	add	r2, r3
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f00b fdcc 	bl	8014948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	61bb      	str	r3, [r7, #24]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d112      	bne.n	8008dfe <PCD_EP_ISR_Handler+0x23c>
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	801a      	strh	r2, [r3, #0]
 8008dfc:	e02f      	b.n	8008e5e <PCD_EP_ISR_Handler+0x29c>
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b3e      	cmp	r3, #62	; 0x3e
 8008e04:	d813      	bhi.n	8008e2e <PCD_EP_ISR_Handler+0x26c>
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <PCD_EP_ISR_Handler+0x25e>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	029b      	lsls	r3, r3, #10
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	e017      	b.n	8008e5e <PCD_EP_ISR_Handler+0x29c>
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	095b      	lsrs	r3, r3, #5
 8008e34:	633b      	str	r3, [r7, #48]	; 0x30
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <PCD_EP_ISR_Handler+0x286>
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	3b01      	subs	r3, #1
 8008e46:	633b      	str	r3, [r7, #48]	; 0x30
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	029b      	lsls	r3, r3, #10
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e6e:	827b      	strh	r3, [r7, #18]
 8008e70:	8a7b      	ldrh	r3, [r7, #18]
 8008e72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e76:	827b      	strh	r3, [r7, #18]
 8008e78:	8a7b      	ldrh	r3, [r7, #18]
 8008e7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e7e:	827b      	strh	r3, [r7, #18]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	8a7b      	ldrh	r3, [r7, #18]
 8008e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	8013      	strh	r3, [r2, #0]
 8008e9a:	e177      	b.n	800918c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008eae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f280 80ea 	bge.w	800908c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008ece:	4013      	ands	r3, r2
 8008ed0:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ee6:	b292      	uxth	r2, r2
 8008ee8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008eea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	7b1b      	ldrb	r3, [r3, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d122      	bne.n	8008f4e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	3306      	adds	r3, #6
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	6812      	ldr	r2, [r2, #0]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f30:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8008f32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 8087 	beq.w	8009048 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	6959      	ldr	r1, [r3, #20]
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	88da      	ldrh	r2, [r3, #6]
 8008f46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f48:	f005 fd8d 	bl	800ea66 <USB_ReadPMA>
 8008f4c:	e07c      	b.n	8009048 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	78db      	ldrb	r3, [r3, #3]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d108      	bne.n	8008f68 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008f56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f923 	bl	80091a8 <HAL_PCD_EP_DB_Receive>
 8008f62:	4603      	mov	r3, r0
 8008f64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008f66:	e06f      	b.n	8009048 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f82:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d021      	beq.n	8009006 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	3302      	adds	r3, #2
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6812      	ldr	r2, [r2, #0]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8008fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d02a      	beq.n	8009048 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	6959      	ldr	r1, [r3, #20]
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	891a      	ldrh	r2, [r3, #8]
 8008ffe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009000:	f005 fd31 	bl	800ea66 <USB_ReadPMA>
 8009004:	e020      	b.n	8009048 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800900e:	b29b      	uxth	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	3306      	adds	r3, #6
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	6812      	ldr	r2, [r2, #0]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800902e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8009030:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009032:	2b00      	cmp	r3, #0
 8009034:	d008      	beq.n	8009048 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	6959      	ldr	r1, [r3, #20]
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	895a      	ldrh	r2, [r3, #10]
 8009042:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009044:	f005 fd0f 	bl	800ea66 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800904e:	441a      	add	r2, r3
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	695a      	ldr	r2, [r3, #20]
 8009058:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800905a:	441a      	add	r2, r3
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <PCD_EP_ISR_Handler+0x4b0>
 8009068:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d206      	bcs.n	8009080 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f00b fc65 	bl	8014948 <HAL_PCD_DataOutStageCallback>
 800907e:	e005      	b.n	800908c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009086:	4618      	mov	r0, r3
 8009088:	f004 fa46 	bl	800d518 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800908c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b00      	cmp	r3, #0
 8009094:	d07a      	beq.n	800918c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8009096:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80090c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c4:	843b      	strh	r3, [r7, #32]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	441a      	add	r2, r3
 80090d4:	8c3b      	ldrh	r3, [r7, #32]
 80090d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090de:	b29b      	uxth	r3, r3
 80090e0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	78db      	ldrb	r3, [r3, #3]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d108      	bne.n	80090fc <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d146      	bne.n	8009180 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80090f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d141      	bne.n	8009180 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009104:	b29b      	uxth	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	4413      	add	r3, r2
 8009110:	3302      	adds	r3, #2
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009124:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	8bfb      	ldrh	r3, [r7, #30]
 800912c:	429a      	cmp	r2, r3
 800912e:	d906      	bls.n	800913e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	699a      	ldr	r2, [r3, #24]
 8009134:	8bfb      	ldrh	r3, [r7, #30]
 8009136:	1ad2      	subs	r2, r2, r3
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	619a      	str	r2, [r3, #24]
 800913c:	e002      	b.n	8009144 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	2200      	movs	r2, #0
 8009142:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f00b fc13 	bl	801497e <HAL_PCD_DataInStageCallback>
 8009158:	e018      	b.n	800918c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	695a      	ldr	r2, [r3, #20]
 800915e:	8bfb      	ldrh	r3, [r7, #30]
 8009160:	441a      	add	r2, r3
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	69da      	ldr	r2, [r3, #28]
 800916a:	8bfb      	ldrh	r3, [r7, #30]
 800916c:	441a      	add	r2, r3
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009178:	4618      	mov	r0, r3
 800917a:	f004 f9cd 	bl	800d518 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800917e:	e005      	b.n	800918c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009180:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009182:	461a      	mov	r2, r3
 8009184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f91b 	bl	80093c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009194:	b29b      	uxth	r3, r3
 8009196:	b21b      	sxth	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	f6ff ad17 	blt.w	8008bcc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3738      	adds	r7, #56	; 0x38
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d07e      	beq.n	80092be <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4413      	add	r3, r2
 80091d4:	3302      	adds	r3, #2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	6812      	ldr	r2, [r2, #0]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	8b7b      	ldrh	r3, [r7, #26]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d306      	bcc.n	8009202 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	8b7b      	ldrh	r3, [r7, #26]
 80091fa:	1ad2      	subs	r2, r2, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	619a      	str	r2, [r3, #24]
 8009200:	e002      	b.n	8009208 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d123      	bne.n	8009258 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922a:	833b      	strh	r3, [r7, #24]
 800922c:	8b3b      	ldrh	r3, [r7, #24]
 800922e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009232:	833b      	strh	r3, [r7, #24]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	441a      	add	r2, r3
 8009242:	8b3b      	ldrh	r3, [r7, #24]
 8009244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800924c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009254:	b29b      	uxth	r3, r3
 8009256:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01f      	beq.n	80092a2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	82fb      	strh	r3, [r7, #22]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	441a      	add	r2, r3
 800928c:	8afb      	ldrh	r3, [r7, #22]
 800928e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800929e:	b29b      	uxth	r3, r3
 80092a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80092a2:	8b7b      	ldrh	r3, [r7, #26]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8087 	beq.w	80093b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	6959      	ldr	r1, [r3, #20]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	891a      	ldrh	r2, [r3, #8]
 80092b6:	8b7b      	ldrh	r3, [r7, #26]
 80092b8:	f005 fbd5 	bl	800ea66 <USB_ReadPMA>
 80092bc:	e07c      	b.n	80093b8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	4413      	add	r3, r2
 80092d2:	3306      	adds	r3, #6
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	6812      	ldr	r2, [r2, #0]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	699a      	ldr	r2, [r3, #24]
 80092ec:	8b7b      	ldrh	r3, [r7, #26]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d306      	bcc.n	8009300 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	699a      	ldr	r2, [r3, #24]
 80092f6:	8b7b      	ldrh	r3, [r7, #26]
 80092f8:	1ad2      	subs	r2, r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	619a      	str	r2, [r3, #24]
 80092fe:	e002      	b.n	8009306 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2200      	movs	r2, #0
 8009304:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d123      	bne.n	8009356 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29b      	uxth	r3, r3
 8009320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009328:	83fb      	strh	r3, [r7, #30]
 800932a:	8bfb      	ldrh	r3, [r7, #30]
 800932c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009330:	83fb      	strh	r3, [r7, #30]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	441a      	add	r2, r3
 8009340:	8bfb      	ldrh	r3, [r7, #30]
 8009342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009352:	b29b      	uxth	r3, r3
 8009354:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d11f      	bne.n	80093a0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937a:	83bb      	strh	r3, [r7, #28]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	441a      	add	r2, r3
 800938a:	8bbb      	ldrh	r3, [r7, #28]
 800938c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800939c:	b29b      	uxth	r3, r3
 800939e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80093a0:	8b7b      	ldrh	r3, [r7, #26]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d008      	beq.n	80093b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6959      	ldr	r1, [r3, #20]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	895a      	ldrh	r2, [r3, #10]
 80093b2:	8b7b      	ldrh	r3, [r7, #26]
 80093b4:	f005 fb57 	bl	800ea66 <USB_ReadPMA>
    }
  }

  return count;
 80093b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3720      	adds	r7, #32
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b092      	sub	sp, #72	; 0x48
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	4613      	mov	r3, r2
 80093ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80093d0:	88fb      	ldrh	r3, [r7, #6]
 80093d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 8132 	beq.w	8009640 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	461a      	mov	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	4413      	add	r3, r2
 80093f0:	3302      	adds	r3, #2
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	6812      	ldr	r2, [r2, #0]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009404:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	699a      	ldr	r2, [r3, #24]
 800940a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800940c:	429a      	cmp	r2, r3
 800940e:	d906      	bls.n	800941e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009416:	1ad2      	subs	r2, r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	619a      	str	r2, [r3, #24]
 800941c:	e002      	b.n	8009424 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2200      	movs	r2, #0
 8009422:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d12c      	bne.n	8009486 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	4619      	mov	r1, r3
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f00b faa3 	bl	801497e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009438:	88fb      	ldrh	r3, [r7, #6]
 800943a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 822f 	beq.w	80098a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800945a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945e:	827b      	strh	r3, [r7, #18]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	441a      	add	r2, r3
 800946e:	8a7b      	ldrh	r3, [r7, #18]
 8009470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800947c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009480:	b29b      	uxth	r3, r3
 8009482:	8013      	strh	r3, [r2, #0]
 8009484:	e20d      	b.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01f      	beq.n	80094d0 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	441a      	add	r2, r3
 80094ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	f040 81e3 	bne.w	80098a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	695a      	ldr	r2, [r3, #20]
 80094e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094e2:	441a      	add	r2, r3
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094ee:	441a      	add	r2, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6a1a      	ldr	r2, [r3, #32]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d309      	bcc.n	8009514 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6a1a      	ldr	r2, [r3, #32]
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	1ad2      	subs	r2, r2, r3
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	621a      	str	r2, [r3, #32]
 8009512:	e014      	b.n	800953e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d106      	bne.n	800952a <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800951c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800951e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009528:	e009      	b.n	800953e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2200      	movs	r2, #0
 800953c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d155      	bne.n	80095f2 <HAL_PCD_EP_DB_Transmit+0x230>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	61bb      	str	r3, [r7, #24]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009554:	b29b      	uxth	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	4413      	add	r3, r2
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	011a      	lsls	r2, r3, #4
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	4413      	add	r3, r2
 8009568:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	2b00      	cmp	r3, #0
 8009572:	d112      	bne.n	800959a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800957e:	b29a      	uxth	r2, r3
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29b      	uxth	r3, r3
 800958a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009592:	b29a      	uxth	r2, r3
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	e047      	b.n	800962a <HAL_PCD_EP_DB_Transmit+0x268>
 800959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959c:	2b3e      	cmp	r3, #62	; 0x3e
 800959e:	d811      	bhi.n	80095c4 <HAL_PCD_EP_DB_Transmit+0x202>
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	3301      	adds	r3, #1
 80095b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	029b      	lsls	r3, r3, #10
 80095bc:	b29a      	uxth	r2, r3
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	801a      	strh	r2, [r3, #0]
 80095c2:	e032      	b.n	800962a <HAL_PCD_EP_DB_Transmit+0x268>
 80095c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <HAL_PCD_EP_DB_Transmit+0x218>
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	3b01      	subs	r3, #1
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	b29b      	uxth	r3, r3
 80095de:	029b      	lsls	r3, r3, #10
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	801a      	strh	r2, [r3, #0]
 80095f0:	e01b      	b.n	800962a <HAL_PCD_EP_DB_Transmit+0x268>
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d117      	bne.n	800962a <HAL_PCD_EP_DB_Transmit+0x268>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	623b      	str	r3, [r7, #32]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009608:	b29b      	uxth	r3, r3
 800960a:	461a      	mov	r2, r3
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	4413      	add	r3, r2
 8009610:	623b      	str	r3, [r7, #32]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	011a      	lsls	r2, r3, #4
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	4413      	add	r3, r2
 800961c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	b29a      	uxth	r2, r3
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6959      	ldr	r1, [r3, #20]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	891a      	ldrh	r2, [r3, #8]
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	b29b      	uxth	r3, r3
 800963a:	f005 f9d0 	bl	800e9de <USB_WritePMA>
 800963e:	e130      	b.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009648:	b29b      	uxth	r3, r3
 800964a:	461a      	mov	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4413      	add	r3, r2
 8009654:	3306      	adds	r3, #6
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	6812      	ldr	r2, [r2, #0]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009668:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009670:	429a      	cmp	r2, r3
 8009672:	d306      	bcc.n	8009682 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	699a      	ldr	r2, [r3, #24]
 8009678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800967a:	1ad2      	subs	r2, r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	619a      	str	r2, [r3, #24]
 8009680:	e002      	b.n	8009688 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2200      	movs	r2, #0
 8009686:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d12c      	bne.n	80096ea <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	4619      	mov	r1, r3
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f00b f971 	bl	801497e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 80fd 	bne.w	80098a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	441a      	add	r2, r3
 80096d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	8013      	strh	r3, [r2, #0]
 80096e8:	e0db      	b.n	80098a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d11f      	bne.n	8009734 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	461a      	mov	r2, r3
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b29b      	uxth	r3, r3
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	441a      	add	r2, r3
 800971e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800972c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009730:	b29b      	uxth	r3, r3
 8009732:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800973a:	2b01      	cmp	r3, #1
 800973c:	f040 80b1 	bne.w	80098a2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	695a      	ldr	r2, [r3, #20]
 8009744:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009746:	441a      	add	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	69da      	ldr	r2, [r3, #28]
 8009750:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009752:	441a      	add	r2, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	6a1a      	ldr	r2, [r3, #32]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	429a      	cmp	r2, r3
 8009762:	d309      	bcc.n	8009778 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6a1a      	ldr	r2, [r3, #32]
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	1ad2      	subs	r2, r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	621a      	str	r2, [r3, #32]
 8009776:	e014      	b.n	80097a2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8009780:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009782:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800978c:	e009      	b.n	80097a2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2200      	movs	r2, #0
 8009798:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	785b      	ldrb	r3, [r3, #1]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d155      	bne.n	800985c <HAL_PCD_EP_DB_Transmit+0x49a>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	647b      	str	r3, [r7, #68]	; 0x44
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097be:	b29b      	uxth	r3, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c4:	4413      	add	r3, r2
 80097c6:	647b      	str	r3, [r7, #68]	; 0x44
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	011a      	lsls	r2, r3, #4
 80097ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d0:	4413      	add	r3, r2
 80097d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097d6:	643b      	str	r3, [r7, #64]	; 0x40
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d112      	bne.n	8009804 <HAL_PCD_EP_DB_Transmit+0x442>
 80097de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	e044      	b.n	800988e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8009804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009806:	2b3e      	cmp	r3, #62	; 0x3e
 8009808:	d811      	bhi.n	800982e <HAL_PCD_EP_DB_Transmit+0x46c>
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <HAL_PCD_EP_DB_Transmit+0x45e>
 800981a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981c:	3301      	adds	r3, #1
 800981e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009822:	b29b      	uxth	r3, r3
 8009824:	029b      	lsls	r3, r3, #10
 8009826:	b29a      	uxth	r2, r3
 8009828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	e02f      	b.n	800988e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	095b      	lsrs	r3, r3, #5
 8009832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	f003 031f 	and.w	r3, r3, #31
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <HAL_PCD_EP_DB_Transmit+0x482>
 800983e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009840:	3b01      	subs	r3, #1
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009846:	b29b      	uxth	r3, r3
 8009848:	029b      	lsls	r3, r3, #10
 800984a:	b29b      	uxth	r3, r3
 800984c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009854:	b29a      	uxth	r2, r3
 8009856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009858:	801a      	strh	r2, [r3, #0]
 800985a:	e018      	b.n	800988e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	785b      	ldrb	r3, [r3, #1]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d114      	bne.n	800988e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800986c:	b29b      	uxth	r3, r3
 800986e:	461a      	mov	r2, r3
 8009870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009872:	4413      	add	r3, r2
 8009874:	637b      	str	r3, [r7, #52]	; 0x34
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	011a      	lsls	r2, r3, #4
 800987c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987e:	4413      	add	r3, r2
 8009880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009884:	633b      	str	r3, [r7, #48]	; 0x30
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	b29a      	uxth	r2, r3
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	6959      	ldr	r1, [r3, #20]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	895a      	ldrh	r2, [r3, #10]
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	b29b      	uxth	r3, r3
 800989e:	f005 f89e 	bl	800e9de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098bc:	823b      	strh	r3, [r7, #16]
 80098be:	8a3b      	ldrh	r3, [r7, #16]
 80098c0:	f083 0310 	eor.w	r3, r3, #16
 80098c4:	823b      	strh	r3, [r7, #16]
 80098c6:	8a3b      	ldrh	r3, [r7, #16]
 80098c8:	f083 0320 	eor.w	r3, r3, #32
 80098cc:	823b      	strh	r3, [r7, #16]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	441a      	add	r2, r3
 80098dc:	8a3b      	ldrh	r3, [r7, #16]
 80098de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3748      	adds	r7, #72	; 0x48
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	607b      	str	r3, [r7, #4]
 8009906:	460b      	mov	r3, r1
 8009908:	817b      	strh	r3, [r7, #10]
 800990a:	4613      	mov	r3, r2
 800990c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800990e:	897b      	ldrh	r3, [r7, #10]
 8009910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009914:	b29b      	uxth	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00b      	beq.n	8009932 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800991a:	897b      	ldrh	r3, [r7, #10]
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	4613      	mov	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e009      	b.n	8009946 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009932:	897a      	ldrh	r2, [r7, #10]
 8009934:	4613      	mov	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4413      	add	r3, r2
 8009944:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009946:	893b      	ldrh	r3, [r7, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d107      	bne.n	800995c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2200      	movs	r2, #0
 8009950:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	b29a      	uxth	r2, r3
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	80da      	strh	r2, [r3, #6]
 800995a:	e00b      	b.n	8009974 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2201      	movs	r2, #1
 8009960:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	b29a      	uxth	r2, r3
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	0c1b      	lsrs	r3, r3, #16
 800996e:	b29a      	uxth	r2, r3
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	bc80      	pop	{r7}
 800997e:	4770      	bx	lr

08009980 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	bc80      	pop	{r7}
 8009994:	4770      	bx	lr
	...

08009998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e31d      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099aa:	4b94      	ldr	r3, [pc, #592]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f003 030c 	and.w	r3, r3, #12
 80099b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099b4:	4b91      	ldr	r3, [pc, #580]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099bc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d07b      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d006      	beq.n	80099de <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2b0c      	cmp	r3, #12
 80099d4:	d10f      	bne.n	80099f6 <HAL_RCC_OscConfig+0x5e>
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099dc:	d10b      	bne.n	80099f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099de:	4b87      	ldr	r3, [pc, #540]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d06a      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x128>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d166      	bne.n	8009ac0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e2f7      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d106      	bne.n	8009a0c <HAL_RCC_OscConfig+0x74>
 80099fe:	4b7f      	ldr	r3, [pc, #508]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a7e      	ldr	r2, [pc, #504]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	e02d      	b.n	8009a68 <HAL_RCC_OscConfig+0xd0>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10c      	bne.n	8009a2e <HAL_RCC_OscConfig+0x96>
 8009a14:	4b79      	ldr	r3, [pc, #484]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a78      	ldr	r2, [pc, #480]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	4b76      	ldr	r3, [pc, #472]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a75      	ldr	r2, [pc, #468]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	e01c      	b.n	8009a68 <HAL_RCC_OscConfig+0xd0>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d10c      	bne.n	8009a50 <HAL_RCC_OscConfig+0xb8>
 8009a36:	4b71      	ldr	r3, [pc, #452]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a70      	ldr	r2, [pc, #448]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	4b6e      	ldr	r3, [pc, #440]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a6d      	ldr	r2, [pc, #436]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	e00b      	b.n	8009a68 <HAL_RCC_OscConfig+0xd0>
 8009a50:	4b6a      	ldr	r3, [pc, #424]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a69      	ldr	r2, [pc, #420]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	4b67      	ldr	r3, [pc, #412]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a66      	ldr	r2, [pc, #408]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d013      	beq.n	8009a98 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a70:	f7fd f892 	bl	8006b98 <HAL_GetTick>
 8009a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a76:	e008      	b.n	8009a8a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a78:	f7fd f88e 	bl	8006b98 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	2b64      	cmp	r3, #100	; 0x64
 8009a84:	d901      	bls.n	8009a8a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e2ad      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a8a:	4b5c      	ldr	r3, [pc, #368]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0f0      	beq.n	8009a78 <HAL_RCC_OscConfig+0xe0>
 8009a96:	e014      	b.n	8009ac2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a98:	f7fd f87e 	bl	8006b98 <HAL_GetTick>
 8009a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009aa0:	f7fd f87a 	bl	8006b98 <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b64      	cmp	r3, #100	; 0x64
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e299      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ab2:	4b52      	ldr	r3, [pc, #328]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f0      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x108>
 8009abe:	e000      	b.n	8009ac2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d05a      	beq.n	8009b84 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d005      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	2b0c      	cmp	r3, #12
 8009ad8:	d119      	bne.n	8009b0e <HAL_RCC_OscConfig+0x176>
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d116      	bne.n	8009b0e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ae0:	4b46      	ldr	r3, [pc, #280]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d005      	beq.n	8009af8 <HAL_RCC_OscConfig+0x160>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d001      	beq.n	8009af8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e276      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009af8:	4b40      	ldr	r3, [pc, #256]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	021b      	lsls	r3, r3, #8
 8009b06:	493d      	ldr	r1, [pc, #244]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b0c:	e03a      	b.n	8009b84 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d020      	beq.n	8009b58 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b16:	4b3a      	ldr	r3, [pc, #232]	; (8009c00 <HAL_RCC_OscConfig+0x268>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b1c:	f7fd f83c 	bl	8006b98 <HAL_GetTick>
 8009b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b22:	e008      	b.n	8009b36 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b24:	f7fd f838 	bl	8006b98 <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d901      	bls.n	8009b36 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e257      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b36:	4b31      	ldr	r3, [pc, #196]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f0      	beq.n	8009b24 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b42:	4b2e      	ldr	r3, [pc, #184]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	492a      	ldr	r1, [pc, #168]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	604b      	str	r3, [r1, #4]
 8009b56:	e015      	b.n	8009b84 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b58:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <HAL_RCC_OscConfig+0x268>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b5e:	f7fd f81b 	bl	8006b98 <HAL_GetTick>
 8009b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b64:	e008      	b.n	8009b78 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b66:	f7fd f817 	bl	8006b98 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d901      	bls.n	8009b78 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e236      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b78:	4b20      	ldr	r3, [pc, #128]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f0      	bne.n	8009b66 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0310 	and.w	r3, r3, #16
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 80b8 	beq.w	8009d02 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d170      	bne.n	8009c7a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009b98:	4b18      	ldr	r3, [pc, #96]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x218>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e21a      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a1a      	ldr	r2, [r3, #32]
 8009bb4:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d921      	bls.n	8009c04 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fcad 	bl	800a524 <RCC_SetFlashLatencyFromMSIRange>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e208      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009bd4:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	4906      	ldr	r1, [pc, #24]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009be6:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	061b      	lsls	r3, r3, #24
 8009bf4:	4901      	ldr	r1, [pc, #4]	; (8009bfc <HAL_RCC_OscConfig+0x264>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	604b      	str	r3, [r1, #4]
 8009bfa:	e020      	b.n	8009c3e <HAL_RCC_OscConfig+0x2a6>
 8009bfc:	40023800 	.word	0x40023800
 8009c00:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c04:	4ba4      	ldr	r3, [pc, #656]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	49a1      	ldr	r1, [pc, #644]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c16:	4ba0      	ldr	r3, [pc, #640]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	061b      	lsls	r3, r3, #24
 8009c24:	499c      	ldr	r1, [pc, #624]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fc78 	bl	800a524 <RCC_SetFlashLatencyFromMSIRange>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e1d3      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	0b5b      	lsrs	r3, r3, #13
 8009c44:	3301      	adds	r3, #1
 8009c46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009c4a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009c4e:	4a92      	ldr	r2, [pc, #584]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009c50:	6892      	ldr	r2, [r2, #8]
 8009c52:	0912      	lsrs	r2, r2, #4
 8009c54:	f002 020f 	and.w	r2, r2, #15
 8009c58:	4990      	ldr	r1, [pc, #576]	; (8009e9c <HAL_RCC_OscConfig+0x504>)
 8009c5a:	5c8a      	ldrb	r2, [r1, r2]
 8009c5c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009c5e:	4a90      	ldr	r2, [pc, #576]	; (8009ea0 <HAL_RCC_OscConfig+0x508>)
 8009c60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009c62:	4b90      	ldr	r3, [pc, #576]	; (8009ea4 <HAL_RCC_OscConfig+0x50c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f9 ffe8 	bl	8003c3c <HAL_InitTick>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d045      	beq.n	8009d02 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
 8009c78:	e1b5      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d029      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009c82:	4b89      	ldr	r3, [pc, #548]	; (8009ea8 <HAL_RCC_OscConfig+0x510>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c88:	f7fc ff86 	bl	8006b98 <HAL_GetTick>
 8009c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009c8e:	e008      	b.n	8009ca2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c90:	f7fc ff82 	bl	8006b98 <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e1a1      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009ca2:	4b7d      	ldr	r3, [pc, #500]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0f0      	beq.n	8009c90 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cae:	4b7a      	ldr	r3, [pc, #488]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	4977      	ldr	r1, [pc, #476]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cc0:	4b75      	ldr	r3, [pc, #468]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	061b      	lsls	r3, r3, #24
 8009cce:	4972      	ldr	r1, [pc, #456]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	604b      	str	r3, [r1, #4]
 8009cd4:	e015      	b.n	8009d02 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009cd6:	4b74      	ldr	r3, [pc, #464]	; (8009ea8 <HAL_RCC_OscConfig+0x510>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cdc:	f7fc ff5c 	bl	8006b98 <HAL_GetTick>
 8009ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ce4:	f7fc ff58 	bl	8006b98 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e177      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009cf6:	4b68      	ldr	r3, [pc, #416]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0308 	and.w	r3, r3, #8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d030      	beq.n	8009d70 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d016      	beq.n	8009d44 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d16:	4b65      	ldr	r3, [pc, #404]	; (8009eac <HAL_RCC_OscConfig+0x514>)
 8009d18:	2201      	movs	r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d1c:	f7fc ff3c 	bl	8006b98 <HAL_GetTick>
 8009d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d22:	e008      	b.n	8009d36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d24:	f7fc ff38 	bl	8006b98 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d901      	bls.n	8009d36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e157      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d36:	4b58      	ldr	r3, [pc, #352]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0f0      	beq.n	8009d24 <HAL_RCC_OscConfig+0x38c>
 8009d42:	e015      	b.n	8009d70 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d44:	4b59      	ldr	r3, [pc, #356]	; (8009eac <HAL_RCC_OscConfig+0x514>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d4a:	f7fc ff25 	bl	8006b98 <HAL_GetTick>
 8009d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d50:	e008      	b.n	8009d64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d52:	f7fc ff21 	bl	8006b98 <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d901      	bls.n	8009d64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e140      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d64:	4b4c      	ldr	r3, [pc, #304]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1f0      	bne.n	8009d52 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 80b5 	beq.w	8009ee8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d82:	4b45      	ldr	r3, [pc, #276]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10d      	bne.n	8009daa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d8e:	4b42      	ldr	r3, [pc, #264]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	4a41      	ldr	r2, [pc, #260]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d98:	6253      	str	r3, [r2, #36]	; 0x24
 8009d9a:	4b3f      	ldr	r3, [pc, #252]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da2:	60bb      	str	r3, [r7, #8]
 8009da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009da6:	2301      	movs	r3, #1
 8009da8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009daa:	4b41      	ldr	r3, [pc, #260]	; (8009eb0 <HAL_RCC_OscConfig+0x518>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d118      	bne.n	8009de8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009db6:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <HAL_RCC_OscConfig+0x518>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a3d      	ldr	r2, [pc, #244]	; (8009eb0 <HAL_RCC_OscConfig+0x518>)
 8009dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009dc2:	f7fc fee9 	bl	8006b98 <HAL_GetTick>
 8009dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dc8:	e008      	b.n	8009ddc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dca:	f7fc fee5 	bl	8006b98 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	2b64      	cmp	r3, #100	; 0x64
 8009dd6:	d901      	bls.n	8009ddc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e104      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ddc:	4b34      	ldr	r3, [pc, #208]	; (8009eb0 <HAL_RCC_OscConfig+0x518>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d0f0      	beq.n	8009dca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d106      	bne.n	8009dfe <HAL_RCC_OscConfig+0x466>
 8009df0:	4b29      	ldr	r3, [pc, #164]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	4a28      	ldr	r2, [pc, #160]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dfa:	6353      	str	r3, [r2, #52]	; 0x34
 8009dfc:	e02d      	b.n	8009e5a <HAL_RCC_OscConfig+0x4c2>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10c      	bne.n	8009e20 <HAL_RCC_OscConfig+0x488>
 8009e06:	4b24      	ldr	r3, [pc, #144]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0a:	4a23      	ldr	r2, [pc, #140]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e10:	6353      	str	r3, [r2, #52]	; 0x34
 8009e12:	4b21      	ldr	r3, [pc, #132]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	4a20      	ldr	r2, [pc, #128]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e1c:	6353      	str	r3, [r2, #52]	; 0x34
 8009e1e:	e01c      	b.n	8009e5a <HAL_RCC_OscConfig+0x4c2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	2b05      	cmp	r3, #5
 8009e26:	d10c      	bne.n	8009e42 <HAL_RCC_OscConfig+0x4aa>
 8009e28:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	4a1a      	ldr	r2, [pc, #104]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e32:	6353      	str	r3, [r2, #52]	; 0x34
 8009e34:	4b18      	ldr	r3, [pc, #96]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e38:	4a17      	ldr	r2, [pc, #92]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e3e:	6353      	str	r3, [r2, #52]	; 0x34
 8009e40:	e00b      	b.n	8009e5a <HAL_RCC_OscConfig+0x4c2>
 8009e42:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	4a14      	ldr	r2, [pc, #80]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e4c:	6353      	str	r3, [r2, #52]	; 0x34
 8009e4e:	4b12      	ldr	r3, [pc, #72]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e52:	4a11      	ldr	r2, [pc, #68]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e58:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d015      	beq.n	8009e8e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e62:	f7fc fe99 	bl	8006b98 <HAL_GetTick>
 8009e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e68:	e00a      	b.n	8009e80 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e6a:	f7fc fe95 	bl	8006b98 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d901      	bls.n	8009e80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e0b2      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e80:	4b05      	ldr	r3, [pc, #20]	; (8009e98 <HAL_RCC_OscConfig+0x500>)
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0ee      	beq.n	8009e6a <HAL_RCC_OscConfig+0x4d2>
 8009e8c:	e023      	b.n	8009ed6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e8e:	f7fc fe83 	bl	8006b98 <HAL_GetTick>
 8009e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e94:	e019      	b.n	8009eca <HAL_RCC_OscConfig+0x532>
 8009e96:	bf00      	nop
 8009e98:	40023800 	.word	0x40023800
 8009e9c:	0801ab24 	.word	0x0801ab24
 8009ea0:	20000000 	.word	0x20000000
 8009ea4:	20000010 	.word	0x20000010
 8009ea8:	42470020 	.word	0x42470020
 8009eac:	42470680 	.word	0x42470680
 8009eb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009eb4:	f7fc fe70 	bl	8006b98 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d901      	bls.n	8009eca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e08d      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009eca:	4b49      	ldr	r3, [pc, #292]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1ee      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ed6:	7ffb      	ldrb	r3, [r7, #31]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d105      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009edc:	4b44      	ldr	r3, [pc, #272]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	4a43      	ldr	r2, [pc, #268]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ee6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d079      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	2b0c      	cmp	r3, #12
 8009ef4:	d056      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d13b      	bne.n	8009f76 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009efe:	4b3d      	ldr	r3, [pc, #244]	; (8009ff4 <HAL_RCC_OscConfig+0x65c>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f04:	f7fc fe48 	bl	8006b98 <HAL_GetTick>
 8009f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f0c:	f7fc fe44 	bl	8006b98 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e063      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f1e:	4b34      	ldr	r3, [pc, #208]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1f0      	bne.n	8009f0c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f2a:	4b31      	ldr	r3, [pc, #196]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3a:	4319      	orrs	r1, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f40:	430b      	orrs	r3, r1
 8009f42:	492b      	ldr	r1, [pc, #172]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009f44:	4313      	orrs	r3, r2
 8009f46:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f48:	4b2a      	ldr	r3, [pc, #168]	; (8009ff4 <HAL_RCC_OscConfig+0x65c>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f4e:	f7fc fe23 	bl	8006b98 <HAL_GetTick>
 8009f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f54:	e008      	b.n	8009f68 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f56:	f7fc fe1f 	bl	8006b98 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d901      	bls.n	8009f68 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e03e      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f68:	4b21      	ldr	r3, [pc, #132]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0f0      	beq.n	8009f56 <HAL_RCC_OscConfig+0x5be>
 8009f74:	e036      	b.n	8009fe4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f76:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <HAL_RCC_OscConfig+0x65c>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f7c:	f7fc fe0c 	bl	8006b98 <HAL_GetTick>
 8009f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f84:	f7fc fe08 	bl	8006b98 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e027      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f96:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f0      	bne.n	8009f84 <HAL_RCC_OscConfig+0x5ec>
 8009fa2:	e01f      	b.n	8009fe4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d101      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e01a      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009fb0:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <HAL_RCC_OscConfig+0x658>)
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d10d      	bne.n	8009fe0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d106      	bne.n	8009fe0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d001      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	40023800 	.word	0x40023800
 8009ff4:	42470060 	.word	0x42470060

08009ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e11a      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a00c:	4b8f      	ldr	r3, [pc, #572]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d919      	bls.n	800a04e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d105      	bne.n	800a02c <HAL_RCC_ClockConfig+0x34>
 800a020:	4b8a      	ldr	r3, [pc, #552]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a89      	ldr	r2, [pc, #548]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a026:	f043 0304 	orr.w	r3, r3, #4
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	4b87      	ldr	r3, [pc, #540]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f023 0201 	bic.w	r2, r3, #1
 800a034:	4985      	ldr	r1, [pc, #532]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	4313      	orrs	r3, r2
 800a03a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a03c:	4b83      	ldr	r3, [pc, #524]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	429a      	cmp	r2, r3
 800a048:	d001      	beq.n	800a04e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e0f9      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b00      	cmp	r3, #0
 800a058:	d008      	beq.n	800a06c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a05a:	4b7d      	ldr	r3, [pc, #500]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	497a      	ldr	r1, [pc, #488]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 808e 	beq.w	800a196 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d107      	bne.n	800a092 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a082:	4b73      	ldr	r3, [pc, #460]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d121      	bne.n	800a0d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e0d7      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	2b03      	cmp	r3, #3
 800a098:	d107      	bne.n	800a0aa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a09a:	4b6d      	ldr	r3, [pc, #436]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d115      	bne.n	800a0d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e0cb      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d107      	bne.n	800a0c2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0b2:	4b67      	ldr	r3, [pc, #412]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e0bf      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a0c2:	4b63      	ldr	r3, [pc, #396]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e0b7      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0d2:	4b5f      	ldr	r3, [pc, #380]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f023 0203 	bic.w	r2, r3, #3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	495c      	ldr	r1, [pc, #368]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0e4:	f7fc fd58 	bl	8006b98 <HAL_GetTick>
 800a0e8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d112      	bne.n	800a118 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0f2:	e00a      	b.n	800a10a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0f4:	f7fc fd50 	bl	8006b98 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a102:	4293      	cmp	r3, r2
 800a104:	d901      	bls.n	800a10a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e09b      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a10a:	4b51      	ldr	r3, [pc, #324]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f003 030c 	and.w	r3, r3, #12
 800a112:	2b08      	cmp	r3, #8
 800a114:	d1ee      	bne.n	800a0f4 <HAL_RCC_ClockConfig+0xfc>
 800a116:	e03e      	b.n	800a196 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d112      	bne.n	800a146 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a120:	e00a      	b.n	800a138 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a122:	f7fc fd39 	bl	8006b98 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a130:	4293      	cmp	r3, r2
 800a132:	d901      	bls.n	800a138 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e084      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a138:	4b45      	ldr	r3, [pc, #276]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 030c 	and.w	r3, r3, #12
 800a140:	2b0c      	cmp	r3, #12
 800a142:	d1ee      	bne.n	800a122 <HAL_RCC_ClockConfig+0x12a>
 800a144:	e027      	b.n	800a196 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d11d      	bne.n	800a18a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a14e:	e00a      	b.n	800a166 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a150:	f7fc fd22 	bl	8006b98 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15e:	4293      	cmp	r3, r2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e06d      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a166:	4b3a      	ldr	r3, [pc, #232]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f003 030c 	and.w	r3, r3, #12
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d1ee      	bne.n	800a150 <HAL_RCC_ClockConfig+0x158>
 800a172:	e010      	b.n	800a196 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a174:	f7fc fd10 	bl	8006b98 <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a182:	4293      	cmp	r3, r2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e05b      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a18a:	4b31      	ldr	r3, [pc, #196]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 030c 	and.w	r3, r3, #12
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1ee      	bne.n	800a174 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a196:	4b2d      	ldr	r3, [pc, #180]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d219      	bcs.n	800a1d8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d105      	bne.n	800a1b6 <HAL_RCC_ClockConfig+0x1be>
 800a1aa:	4b28      	ldr	r3, [pc, #160]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a27      	ldr	r2, [pc, #156]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a1b0:	f043 0304 	orr.w	r3, r3, #4
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	4b25      	ldr	r3, [pc, #148]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f023 0201 	bic.w	r2, r3, #1
 800a1be:	4923      	ldr	r1, [pc, #140]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1c6:	4b21      	ldr	r3, [pc, #132]	; (800a24c <HAL_RCC_ClockConfig+0x254>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d001      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e034      	b.n	800a242 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d008      	beq.n	800a1f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1e4:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	4917      	ldr	r1, [pc, #92]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0308 	and.w	r3, r3, #8
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d009      	beq.n	800a216 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a202:	4b13      	ldr	r3, [pc, #76]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	490f      	ldr	r1, [pc, #60]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a212:	4313      	orrs	r3, r2
 800a214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a216:	f000 f859 	bl	800a2cc <HAL_RCC_GetSysClockFreq>
 800a21a:	4601      	mov	r1, r0
 800a21c:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <HAL_RCC_ClockConfig+0x258>)
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	091b      	lsrs	r3, r3, #4
 800a222:	f003 030f 	and.w	r3, r3, #15
 800a226:	4a0b      	ldr	r2, [pc, #44]	; (800a254 <HAL_RCC_ClockConfig+0x25c>)
 800a228:	5cd3      	ldrb	r3, [r2, r3]
 800a22a:	fa21 f303 	lsr.w	r3, r1, r3
 800a22e:	4a0a      	ldr	r2, [pc, #40]	; (800a258 <HAL_RCC_ClockConfig+0x260>)
 800a230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a232:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <HAL_RCC_ClockConfig+0x264>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f7f9 fd00 	bl	8003c3c <HAL_InitTick>
 800a23c:	4603      	mov	r3, r0
 800a23e:	72fb      	strb	r3, [r7, #11]

  return status;
 800a240:	7afb      	ldrb	r3, [r7, #11]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	40023c00 	.word	0x40023c00
 800a250:	40023800 	.word	0x40023800
 800a254:	0801ab24 	.word	0x0801ab24
 800a258:	20000000 	.word	0x20000000
 800a25c:	20000010 	.word	0x20000010

0800a260 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08a      	sub	sp, #40	; 0x28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800a26c:	2302      	movs	r3, #2
 800a26e:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a270:	2302      	movs	r3, #2
 800a272:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800a278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a27c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800a27e:	2300      	movs	r3, #0
 800a280:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800a282:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <HAL_RCC_MCOConfig+0x64>)
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	4a0f      	ldr	r2, [pc, #60]	; (800a2c4 <HAL_RCC_MCOConfig+0x64>)
 800a288:	f043 0301 	orr.w	r3, r3, #1
 800a28c:	61d3      	str	r3, [r2, #28]
 800a28e:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <HAL_RCC_MCOConfig+0x64>)
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	613b      	str	r3, [r7, #16]
 800a298:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800a29a:	f107 0314 	add.w	r3, r7, #20
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4809      	ldr	r0, [pc, #36]	; (800a2c8 <HAL_RCC_MCOConfig+0x68>)
 800a2a2:	f7fd fd5b 	bl	8007d5c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <HAL_RCC_MCOConfig+0x64>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	430b      	orrs	r3, r1
 800a2b4:	4903      	ldr	r1, [pc, #12]	; (800a2c4 <HAL_RCC_MCOConfig+0x64>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	608b      	str	r3, [r1, #8]
}
 800a2ba:	bf00      	nop
 800a2bc:	3728      	adds	r7, #40	; 0x28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	40023800 	.word	0x40023800
 800a2c8:	40020000 	.word	0x40020000

0800a2cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800a2d2:	4b5f      	ldr	r3, [pc, #380]	; (800a450 <HAL_RCC_GetSysClockFreq+0x184>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 030c 	and.w	r3, r3, #12
 800a2de:	2b08      	cmp	r3, #8
 800a2e0:	d007      	beq.n	800a2f2 <HAL_RCC_GetSysClockFreq+0x26>
 800a2e2:	2b0c      	cmp	r3, #12
 800a2e4:	d008      	beq.n	800a2f8 <HAL_RCC_GetSysClockFreq+0x2c>
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	f040 809f 	bne.w	800a42a <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a2ec:	4b59      	ldr	r3, [pc, #356]	; (800a454 <HAL_RCC_GetSysClockFreq+0x188>)
 800a2ee:	613b      	str	r3, [r7, #16]
      break;
 800a2f0:	e0a9      	b.n	800a446 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a2f2:	4b59      	ldr	r3, [pc, #356]	; (800a458 <HAL_RCC_GetSysClockFreq+0x18c>)
 800a2f4:	613b      	str	r3, [r7, #16]
      break;
 800a2f6:	e0a6      	b.n	800a446 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	0c9b      	lsrs	r3, r3, #18
 800a2fc:	f003 030f 	and.w	r3, r3, #15
 800a300:	4a56      	ldr	r2, [pc, #344]	; (800a45c <HAL_RCC_GetSysClockFreq+0x190>)
 800a302:	5cd3      	ldrb	r3, [r2, r3]
 800a304:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	0d9b      	lsrs	r3, r3, #22
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	3301      	adds	r3, #1
 800a310:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a312:	4b4f      	ldr	r3, [pc, #316]	; (800a450 <HAL_RCC_GetSysClockFreq+0x184>)
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d041      	beq.n	800a3a2 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	461d      	mov	r5, r3
 800a322:	f04f 0600 	mov.w	r6, #0
 800a326:	4629      	mov	r1, r5
 800a328:	4632      	mov	r2, r6
 800a32a:	f04f 0300 	mov.w	r3, #0
 800a32e:	f04f 0400 	mov.w	r4, #0
 800a332:	0154      	lsls	r4, r2, #5
 800a334:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a338:	014b      	lsls	r3, r1, #5
 800a33a:	4619      	mov	r1, r3
 800a33c:	4622      	mov	r2, r4
 800a33e:	1b49      	subs	r1, r1, r5
 800a340:	eb62 0206 	sbc.w	r2, r2, r6
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	f04f 0400 	mov.w	r4, #0
 800a34c:	0194      	lsls	r4, r2, #6
 800a34e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a352:	018b      	lsls	r3, r1, #6
 800a354:	1a5b      	subs	r3, r3, r1
 800a356:	eb64 0402 	sbc.w	r4, r4, r2
 800a35a:	f04f 0100 	mov.w	r1, #0
 800a35e:	f04f 0200 	mov.w	r2, #0
 800a362:	00e2      	lsls	r2, r4, #3
 800a364:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a368:	00d9      	lsls	r1, r3, #3
 800a36a:	460b      	mov	r3, r1
 800a36c:	4614      	mov	r4, r2
 800a36e:	195b      	adds	r3, r3, r5
 800a370:	eb44 0406 	adc.w	r4, r4, r6
 800a374:	f04f 0100 	mov.w	r1, #0
 800a378:	f04f 0200 	mov.w	r2, #0
 800a37c:	0262      	lsls	r2, r4, #9
 800a37e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a382:	0259      	lsls	r1, r3, #9
 800a384:	460b      	mov	r3, r1
 800a386:	4614      	mov	r4, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	4621      	mov	r1, r4
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f04f 0400 	mov.w	r4, #0
 800a392:	461a      	mov	r2, r3
 800a394:	4623      	mov	r3, r4
 800a396:	f7f6 fc09 	bl	8000bac <__aeabi_uldivmod>
 800a39a:	4603      	mov	r3, r0
 800a39c:	460c      	mov	r4, r1
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e040      	b.n	800a424 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	461d      	mov	r5, r3
 800a3a6:	f04f 0600 	mov.w	r6, #0
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	f04f 0300 	mov.w	r3, #0
 800a3b2:	f04f 0400 	mov.w	r4, #0
 800a3b6:	0154      	lsls	r4, r2, #5
 800a3b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a3bc:	014b      	lsls	r3, r1, #5
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	1b49      	subs	r1, r1, r5
 800a3c4:	eb62 0206 	sbc.w	r2, r2, r6
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	f04f 0400 	mov.w	r4, #0
 800a3d0:	0194      	lsls	r4, r2, #6
 800a3d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a3d6:	018b      	lsls	r3, r1, #6
 800a3d8:	1a5b      	subs	r3, r3, r1
 800a3da:	eb64 0402 	sbc.w	r4, r4, r2
 800a3de:	f04f 0100 	mov.w	r1, #0
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	00e2      	lsls	r2, r4, #3
 800a3e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a3ec:	00d9      	lsls	r1, r3, #3
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	195b      	adds	r3, r3, r5
 800a3f4:	eb44 0406 	adc.w	r4, r4, r6
 800a3f8:	f04f 0100 	mov.w	r1, #0
 800a3fc:	f04f 0200 	mov.w	r2, #0
 800a400:	02a2      	lsls	r2, r4, #10
 800a402:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a406:	0299      	lsls	r1, r3, #10
 800a408:	460b      	mov	r3, r1
 800a40a:	4614      	mov	r4, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	4621      	mov	r1, r4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f04f 0400 	mov.w	r4, #0
 800a416:	461a      	mov	r2, r3
 800a418:	4623      	mov	r3, r4
 800a41a:	f7f6 fbc7 	bl	8000bac <__aeabi_uldivmod>
 800a41e:	4603      	mov	r3, r0
 800a420:	460c      	mov	r4, r1
 800a422:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	613b      	str	r3, [r7, #16]
      break;
 800a428:	e00d      	b.n	800a446 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a42a:	4b09      	ldr	r3, [pc, #36]	; (800a450 <HAL_RCC_GetSysClockFreq+0x184>)
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	0b5b      	lsrs	r3, r3, #13
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a43e:	fa02 f303 	lsl.w	r3, r2, r3
 800a442:	613b      	str	r3, [r7, #16]
      break;
 800a444:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a446:	693b      	ldr	r3, [r7, #16]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	371c      	adds	r7, #28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a450:	40023800 	.word	0x40023800
 800a454:	00f42400 	.word	0x00f42400
 800a458:	007a1200 	.word	0x007a1200
 800a45c:	0801ab18 	.word	0x0801ab18

0800a460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a460:	b480      	push	{r7}
 800a462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <HAL_RCC_GetHCLKFreq+0x10>)
 800a466:	681b      	ldr	r3, [r3, #0]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bc80      	pop	{r7}
 800a46e:	4770      	bx	lr
 800a470:	20000000 	.word	0x20000000

0800a474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a478:	f7ff fff2 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800a47c:	4601      	mov	r1, r0
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	0a1b      	lsrs	r3, r3, #8
 800a484:	f003 0307 	and.w	r3, r3, #7
 800a488:	4a03      	ldr	r2, [pc, #12]	; (800a498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a48a:	5cd3      	ldrb	r3, [r2, r3]
 800a48c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a490:	4618      	mov	r0, r3
 800a492:	bd80      	pop	{r7, pc}
 800a494:	40023800 	.word	0x40023800
 800a498:	0801ab34 	.word	0x0801ab34

0800a49c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a4a0:	f7ff ffde 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800a4a4:	4601      	mov	r1, r0
 800a4a6:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	0adb      	lsrs	r3, r3, #11
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	4a03      	ldr	r2, [pc, #12]	; (800a4c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4b2:	5cd3      	ldrb	r3, [r2, r3]
 800a4b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	40023800 	.word	0x40023800
 800a4c0:	0801ab34 	.word	0x0801ab34

0800a4c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	220f      	movs	r2, #15
 800a4d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a4d4:	4b11      	ldr	r3, [pc, #68]	; (800a51c <HAL_RCC_GetClockConfig+0x58>)
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f003 0203 	and.w	r2, r3, #3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a4e0:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <HAL_RCC_GetClockConfig+0x58>)
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <HAL_RCC_GetClockConfig+0x58>)
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a4f8:	4b08      	ldr	r3, [pc, #32]	; (800a51c <HAL_RCC_GetClockConfig+0x58>)
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	08db      	lsrs	r3, r3, #3
 800a4fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <HAL_RCC_GetClockConfig+0x5c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0201 	and.w	r2, r3, #1
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	601a      	str	r2, [r3, #0]
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr
 800a51c:	40023800 	.word	0x40023800
 800a520:	40023c00 	.word	0x40023c00

0800a524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a52c:	2300      	movs	r3, #0
 800a52e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a530:	4b29      	ldr	r3, [pc, #164]	; (800a5d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d12c      	bne.n	800a596 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a53c:	4b26      	ldr	r3, [pc, #152]	; (800a5d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d005      	beq.n	800a554 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a548:	4b24      	ldr	r3, [pc, #144]	; (800a5dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800a550:	617b      	str	r3, [r7, #20]
 800a552:	e016      	b.n	800a582 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a554:	4b20      	ldr	r3, [pc, #128]	; (800a5d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	4a1f      	ldr	r2, [pc, #124]	; (800a5d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a55a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a55e:	6253      	str	r3, [r2, #36]	; 0x24
 800a560:	4b1d      	ldr	r3, [pc, #116]	; (800a5d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a56c:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800a574:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a576:	4b18      	ldr	r3, [pc, #96]	; (800a5d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	4a17      	ldr	r2, [pc, #92]	; (800a5d8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a57c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a580:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800a588:	d105      	bne.n	800a596 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a590:	d101      	bne.n	800a596 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800a592:	2301      	movs	r3, #1
 800a594:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d105      	bne.n	800a5a8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800a59c:	4b10      	ldr	r3, [pc, #64]	; (800a5e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a0f      	ldr	r2, [pc, #60]	; (800a5e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5a2:	f043 0304 	orr.w	r3, r3, #4
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f023 0201 	bic.w	r2, r3, #1
 800a5b0:	490b      	ldr	r1, [pc, #44]	; (800a5e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a5b8:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d001      	beq.n	800a5ca <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	371c      	adds	r7, #28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bc80      	pop	{r7}
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	40023800 	.word	0x40023800
 800a5dc:	40007000 	.word	0x40007000
 800a5e0:	40023c00 	.word	0x40023c00

0800a5e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e07b      	b.n	800a6ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d108      	bne.n	800a610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a606:	d009      	beq.n	800a61c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	61da      	str	r2, [r3, #28]
 800a60e:	e005      	b.n	800a61c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7f8 faa6 	bl	8002b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a652:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a66e:	431a      	orrs	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	f003 0302 	and.w	r3, r3, #2
 800a678:	431a      	orrs	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	431a      	orrs	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a696:	431a      	orrs	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a1b      	ldr	r3, [r3, #32]
 800a69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a0:	ea42 0103 	orr.w	r1, r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	0c1b      	lsrs	r3, r3, #16
 800a6ba:	f003 0104 	and.w	r1, r3, #4
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	f003 0210 	and.w	r2, r3, #16
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69da      	ldr	r2, [r3, #28]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b088      	sub	sp, #32
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	60f8      	str	r0, [r7, #12]
 800a6fe:	60b9      	str	r1, [r7, #8]
 800a700:	603b      	str	r3, [r7, #0]
 800a702:	4613      	mov	r3, r2
 800a704:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a710:	2b01      	cmp	r3, #1
 800a712:	d101      	bne.n	800a718 <HAL_SPI_Transmit+0x22>
 800a714:	2302      	movs	r3, #2
 800a716:	e126      	b.n	800a966 <HAL_SPI_Transmit+0x270>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a720:	f7fc fa3a 	bl	8006b98 <HAL_GetTick>
 800a724:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a726:	88fb      	ldrh	r3, [r7, #6]
 800a728:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b01      	cmp	r3, #1
 800a734:	d002      	beq.n	800a73c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a736:	2302      	movs	r3, #2
 800a738:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a73a:	e10b      	b.n	800a954 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d002      	beq.n	800a748 <HAL_SPI_Transmit+0x52>
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d102      	bne.n	800a74e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a74c:	e102      	b.n	800a954 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2203      	movs	r2, #3
 800a752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	88fa      	ldrh	r2, [r7, #6]
 800a766:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	88fa      	ldrh	r2, [r7, #6]
 800a76c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a794:	d10f      	bne.n	800a7b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	d007      	beq.n	800a7d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7dc:	d14b      	bne.n	800a876 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <HAL_SPI_Transmit+0xf6>
 800a7e6:	8afb      	ldrh	r3, [r7, #22]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d13e      	bne.n	800a86a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	881a      	ldrh	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fc:	1c9a      	adds	r2, r3, #2
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a806:	b29b      	uxth	r3, r3
 800a808:	3b01      	subs	r3, #1
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a810:	e02b      	b.n	800a86a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d112      	bne.n	800a846 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a824:	881a      	ldrh	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a830:	1c9a      	adds	r2, r3, #2
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	86da      	strh	r2, [r3, #54]	; 0x36
 800a844:	e011      	b.n	800a86a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a846:	f7fc f9a7 	bl	8006b98 <HAL_GetTick>
 800a84a:	4602      	mov	r2, r0
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d803      	bhi.n	800a85e <HAL_SPI_Transmit+0x168>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d102      	bne.n	800a864 <HAL_SPI_Transmit+0x16e>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d102      	bne.n	800a86a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a868:	e074      	b.n	800a954 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a86e:	b29b      	uxth	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1ce      	bne.n	800a812 <HAL_SPI_Transmit+0x11c>
 800a874:	e04c      	b.n	800a910 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <HAL_SPI_Transmit+0x18e>
 800a87e:	8afb      	ldrh	r3, [r7, #22]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d140      	bne.n	800a906 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	330c      	adds	r3, #12
 800a88e:	7812      	ldrb	r2, [r2, #0]
 800a890:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a8aa:	e02c      	b.n	800a906 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d113      	bne.n	800a8e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	330c      	adds	r3, #12
 800a8c4:	7812      	ldrb	r2, [r2, #0]
 800a8c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	86da      	strh	r2, [r3, #54]	; 0x36
 800a8e0:	e011      	b.n	800a906 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8e2:	f7fc f959 	bl	8006b98 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d803      	bhi.n	800a8fa <HAL_SPI_Transmit+0x204>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f8:	d102      	bne.n	800a900 <HAL_SPI_Transmit+0x20a>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a904:	e026      	b.n	800a954 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1cd      	bne.n	800a8ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 f8b3 	bl	800aa80 <SPI_EndRxTxTransaction>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2220      	movs	r2, #32
 800a924:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	613b      	str	r3, [r7, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	77fb      	strb	r3, [r7, #31]
 800a950:	e000      	b.n	800a954 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a964:	7ffb      	ldrb	r3, [r7, #31]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	4613      	mov	r3, r2
 800a97e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a980:	f7fc f90a 	bl	8006b98 <HAL_GetTick>
 800a984:	4602      	mov	r2, r0
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	1a9b      	subs	r3, r3, r2
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	4413      	add	r3, r2
 800a98e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a990:	f7fc f902 	bl	8006b98 <HAL_GetTick>
 800a994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a996:	4b39      	ldr	r3, [pc, #228]	; (800aa7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	015b      	lsls	r3, r3, #5
 800a99c:	0d1b      	lsrs	r3, r3, #20
 800a99e:	69fa      	ldr	r2, [r7, #28]
 800a9a0:	fb02 f303 	mul.w	r3, r2, r3
 800a9a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9a6:	e054      	b.n	800aa52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ae:	d050      	beq.n	800aa52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9b0:	f7fc f8f2 	bl	8006b98 <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	69fa      	ldr	r2, [r7, #28]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d902      	bls.n	800a9c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d13d      	bne.n	800aa42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a9d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9de:	d111      	bne.n	800aa04 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e8:	d004      	beq.n	800a9f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f2:	d107      	bne.n	800aa04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0c:	d10f      	bne.n	800aa2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e017      	b.n	800aa72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	bf0c      	ite	eq
 800aa62:	2301      	moveq	r3, #1
 800aa64:	2300      	movne	r3, #0
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	461a      	mov	r2, r3
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d19b      	bne.n	800a9a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20000000 	.word	0x20000000

0800aa80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af02      	add	r7, sp, #8
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aa8c:	4b1b      	ldr	r3, [pc, #108]	; (800aafc <SPI_EndRxTxTransaction+0x7c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a1b      	ldr	r2, [pc, #108]	; (800ab00 <SPI_EndRxTxTransaction+0x80>)
 800aa92:	fba2 2303 	umull	r2, r3, r2, r3
 800aa96:	0d5b      	lsrs	r3, r3, #21
 800aa98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa9c:	fb02 f303 	mul.w	r3, r2, r3
 800aaa0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aaaa:	d112      	bne.n	800aad2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2200      	movs	r2, #0
 800aab4:	2180      	movs	r1, #128	; 0x80
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff ff5a 	bl	800a970 <SPI_WaitFlagStateUntilTimeout>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d016      	beq.n	800aaf0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac6:	f043 0220 	orr.w	r2, r3, #32
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e00f      	b.n	800aaf2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	3b01      	subs	r3, #1
 800aadc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aae8:	2b80      	cmp	r3, #128	; 0x80
 800aaea:	d0f2      	beq.n	800aad2 <SPI_EndRxTxTransaction+0x52>
 800aaec:	e000      	b.n	800aaf0 <SPI_EndRxTxTransaction+0x70>
        break;
 800aaee:	bf00      	nop
  }

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3718      	adds	r7, #24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20000000 	.word	0x20000000
 800ab00:	165e9f81 	.word	0x165e9f81

0800ab04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e031      	b.n	800ab7a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7f8 fac8 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2202      	movs	r2, #2
 800ab34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4619      	mov	r1, r3
 800ab42:	4610      	mov	r0, r2
 800ab44:	f000 ff16 	bl	800b974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d001      	beq.n	800ab9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e032      	b.n	800ac02 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abac:	d00e      	beq.n	800abcc <HAL_TIM_Base_Start+0x48>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a16      	ldr	r2, [pc, #88]	; (800ac0c <HAL_TIM_Base_Start+0x88>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d009      	beq.n	800abcc <HAL_TIM_Base_Start+0x48>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a14      	ldr	r2, [pc, #80]	; (800ac10 <HAL_TIM_Base_Start+0x8c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d004      	beq.n	800abcc <HAL_TIM_Base_Start+0x48>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a13      	ldr	r2, [pc, #76]	; (800ac14 <HAL_TIM_Base_Start+0x90>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d111      	bne.n	800abf0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b06      	cmp	r3, #6
 800abdc:	d010      	beq.n	800ac00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f042 0201 	orr.w	r2, r2, #1
 800abec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abee:	e007      	b.n	800ac00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f042 0201 	orr.w	r2, r2, #1
 800abfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bc80      	pop	{r7}
 800ac0a:	4770      	bx	lr
 800ac0c:	40000400 	.word	0x40000400
 800ac10:	40000800 	.word	0x40000800
 800ac14:	40010800 	.word	0x40010800

0800ac18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6a1a      	ldr	r2, [r3, #32]
 800ac26:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d107      	bne.n	800ac40 <HAL_TIM_Base_Stop+0x28>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 0201 	bic.w	r2, r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bc80      	pop	{r7}
 800ac52:	4770      	bx	lr

0800ac54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d001      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e03a      	b.n	800ace2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0201 	orr.w	r2, r2, #1
 800ac82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac8c:	d00e      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x58>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a16      	ldr	r2, [pc, #88]	; (800acec <HAL_TIM_Base_Start_IT+0x98>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d009      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x58>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a14      	ldr	r2, [pc, #80]	; (800acf0 <HAL_TIM_Base_Start_IT+0x9c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x58>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a13      	ldr	r2, [pc, #76]	; (800acf4 <HAL_TIM_Base_Start_IT+0xa0>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d111      	bne.n	800acd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b06      	cmp	r3, #6
 800acbc:	d010      	beq.n	800ace0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f042 0201 	orr.w	r2, r2, #1
 800accc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acce:	e007      	b.n	800ace0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f042 0201 	orr.w	r2, r2, #1
 800acde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bc80      	pop	{r7}
 800acea:	4770      	bx	lr
 800acec:	40000400 	.word	0x40000400
 800acf0:	40000800 	.word	0x40000800
 800acf4:	40010800 	.word	0x40010800

0800acf8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68da      	ldr	r2, [r3, #12]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 0201 	bic.w	r2, r2, #1
 800ad0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6a1a      	ldr	r2, [r3, #32]
 800ad16:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d107      	bne.n	800ad30 <HAL_TIM_Base_Stop_IT+0x38>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f022 0201 	bic.w	r2, r2, #1
 800ad2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bc80      	pop	{r7}
 800ad42:	4770      	bx	lr

0800ad44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e031      	b.n	800adba <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d106      	bne.n	800ad70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f829 	bl	800adc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f000 fdf6 	bl	800b974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800adca:	bf00      	nop
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	bc80      	pop	{r7}
 800add2:	4770      	bx	lr

0800add4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d109      	bne.n	800adf8 <HAL_TIM_PWM_Start+0x24>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b01      	cmp	r3, #1
 800adee:	bf14      	ite	ne
 800adf0:	2301      	movne	r3, #1
 800adf2:	2300      	moveq	r3, #0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	e022      	b.n	800ae3e <HAL_TIM_PWM_Start+0x6a>
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d109      	bne.n	800ae12 <HAL_TIM_PWM_Start+0x3e>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	bf14      	ite	ne
 800ae0a:	2301      	movne	r3, #1
 800ae0c:	2300      	moveq	r3, #0
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	e015      	b.n	800ae3e <HAL_TIM_PWM_Start+0x6a>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b08      	cmp	r3, #8
 800ae16:	d109      	bne.n	800ae2c <HAL_TIM_PWM_Start+0x58>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	bf14      	ite	ne
 800ae24:	2301      	movne	r3, #1
 800ae26:	2300      	moveq	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	e008      	b.n	800ae3e <HAL_TIM_PWM_Start+0x6a>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	bf14      	ite	ne
 800ae38:	2301      	movne	r3, #1
 800ae3a:	2300      	moveq	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e051      	b.n	800aeea <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d104      	bne.n	800ae56 <HAL_TIM_PWM_Start+0x82>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ae54:	e013      	b.n	800ae7e <HAL_TIM_PWM_Start+0xaa>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d104      	bne.n	800ae66 <HAL_TIM_PWM_Start+0x92>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800ae64:	e00b      	b.n	800ae7e <HAL_TIM_PWM_Start+0xaa>
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	2b08      	cmp	r3, #8
 800ae6a:	d104      	bne.n	800ae76 <HAL_TIM_PWM_Start+0xa2>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae74:	e003      	b.n	800ae7e <HAL_TIM_PWM_Start+0xaa>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2201      	movs	r2, #1
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f001 f883 	bl	800bf92 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae94:	d00e      	beq.n	800aeb4 <HAL_TIM_PWM_Start+0xe0>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a16      	ldr	r2, [pc, #88]	; (800aef4 <HAL_TIM_PWM_Start+0x120>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d009      	beq.n	800aeb4 <HAL_TIM_PWM_Start+0xe0>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a14      	ldr	r2, [pc, #80]	; (800aef8 <HAL_TIM_PWM_Start+0x124>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d004      	beq.n	800aeb4 <HAL_TIM_PWM_Start+0xe0>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a13      	ldr	r2, [pc, #76]	; (800aefc <HAL_TIM_PWM_Start+0x128>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d111      	bne.n	800aed8 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f003 0307 	and.w	r3, r3, #7
 800aebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b06      	cmp	r3, #6
 800aec4:	d010      	beq.n	800aee8 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f042 0201 	orr.w	r2, r2, #1
 800aed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed6:	e007      	b.n	800aee8 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f042 0201 	orr.w	r2, r2, #1
 800aee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	40000400 	.word	0x40000400
 800aef8:	40000800 	.word	0x40000800
 800aefc:	40010800 	.word	0x40010800

0800af00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e031      	b.n	800af76 <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d106      	bne.n	800af2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f829 	bl	800af7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3304      	adds	r3, #4
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f000 fd18 	bl	800b974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800af7e:	b480      	push	{r7}
 800af80:	b083      	sub	sp, #12
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800af86:	bf00      	nop
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bc80      	pop	{r7}
 800af8e:	4770      	bx	lr

0800af90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d104      	bne.n	800afaa <HAL_TIM_IC_Start_IT+0x1a>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	e013      	b.n	800afd2 <HAL_TIM_IC_Start_IT+0x42>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b04      	cmp	r3, #4
 800afae:	d104      	bne.n	800afba <HAL_TIM_IC_Start_IT+0x2a>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	e00b      	b.n	800afd2 <HAL_TIM_IC_Start_IT+0x42>
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b08      	cmp	r3, #8
 800afbe:	d104      	bne.n	800afca <HAL_TIM_IC_Start_IT+0x3a>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	e003      	b.n	800afd2 <HAL_TIM_IC_Start_IT+0x42>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d001      	beq.n	800afde <HAL_TIM_IC_Start_IT+0x4e>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e097      	b.n	800b10e <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d104      	bne.n	800afee <HAL_TIM_IC_Start_IT+0x5e>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800afec:	e013      	b.n	800b016 <HAL_TIM_IC_Start_IT+0x86>
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d104      	bne.n	800affe <HAL_TIM_IC_Start_IT+0x6e>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800affc:	e00b      	b.n	800b016 <HAL_TIM_IC_Start_IT+0x86>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b08      	cmp	r3, #8
 800b002:	d104      	bne.n	800b00e <HAL_TIM_IC_Start_IT+0x7e>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b00c:	e003      	b.n	800b016 <HAL_TIM_IC_Start_IT+0x86>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2202      	movs	r2, #2
 800b012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b0c      	cmp	r3, #12
 800b01a:	d841      	bhi.n	800b0a0 <HAL_TIM_IC_Start_IT+0x110>
 800b01c:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <HAL_TIM_IC_Start_IT+0x94>)
 800b01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b022:	bf00      	nop
 800b024:	0800b059 	.word	0x0800b059
 800b028:	0800b0a1 	.word	0x0800b0a1
 800b02c:	0800b0a1 	.word	0x0800b0a1
 800b030:	0800b0a1 	.word	0x0800b0a1
 800b034:	0800b06b 	.word	0x0800b06b
 800b038:	0800b0a1 	.word	0x0800b0a1
 800b03c:	0800b0a1 	.word	0x0800b0a1
 800b040:	0800b0a1 	.word	0x0800b0a1
 800b044:	0800b07d 	.word	0x0800b07d
 800b048:	0800b0a1 	.word	0x0800b0a1
 800b04c:	0800b0a1 	.word	0x0800b0a1
 800b050:	0800b0a1 	.word	0x0800b0a1
 800b054:	0800b08f 	.word	0x0800b08f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68da      	ldr	r2, [r3, #12]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f042 0202 	orr.w	r2, r2, #2
 800b066:	60da      	str	r2, [r3, #12]
      break;
 800b068:	e01b      	b.n	800b0a2 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f042 0204 	orr.w	r2, r2, #4
 800b078:	60da      	str	r2, [r3, #12]
      break;
 800b07a:	e012      	b.n	800b0a2 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0208 	orr.w	r2, r2, #8
 800b08a:	60da      	str	r2, [r3, #12]
      break;
 800b08c:	e009      	b.n	800b0a2 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68da      	ldr	r2, [r3, #12]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f042 0210 	orr.w	r2, r2, #16
 800b09c:	60da      	str	r2, [r3, #12]
      break;
 800b09e:	e000      	b.n	800b0a2 <HAL_TIM_IC_Start_IT+0x112>
    }

    default:
      break;
 800b0a0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 ff71 	bl	800bf92 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b8:	d00e      	beq.n	800b0d8 <HAL_TIM_IC_Start_IT+0x148>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a16      	ldr	r2, [pc, #88]	; (800b118 <HAL_TIM_IC_Start_IT+0x188>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d009      	beq.n	800b0d8 <HAL_TIM_IC_Start_IT+0x148>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a14      	ldr	r2, [pc, #80]	; (800b11c <HAL_TIM_IC_Start_IT+0x18c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d004      	beq.n	800b0d8 <HAL_TIM_IC_Start_IT+0x148>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a13      	ldr	r2, [pc, #76]	; (800b120 <HAL_TIM_IC_Start_IT+0x190>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d111      	bne.n	800b0fc <HAL_TIM_IC_Start_IT+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2b06      	cmp	r3, #6
 800b0e8:	d010      	beq.n	800b10c <HAL_TIM_IC_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0201 	orr.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fa:	e007      	b.n	800b10c <HAL_TIM_IC_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0201 	orr.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	40000400 	.word	0x40000400
 800b11c:	40000800 	.word	0x40000800
 800b120:	40010800 	.word	0x40010800

0800b124 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e08f      	b.n	800b258 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7f7 ff91 	bl	8003074 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2202      	movs	r2, #2
 800b156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6812      	ldr	r2, [r2, #0]
 800b164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b168:	f023 0307 	bic.w	r3, r3, #7
 800b16c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3304      	adds	r3, #4
 800b176:	4619      	mov	r1, r3
 800b178:	4610      	mov	r0, r2
 800b17a:	f000 fbfb 	bl	800b974 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b1c4:	f023 030c 	bic.w	r3, r3, #12
 800b1c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	021b      	lsls	r3, r3, #8
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	011a      	lsls	r2, r3, #4
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	031b      	lsls	r3, r3, #12
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b202:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b20a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	011b      	lsls	r3, r3, #4
 800b216:	4313      	orrs	r3, r2
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b270:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800b278:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <HAL_TIM_Encoder_Start_IT+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b280:	7bfb      	ldrb	r3, [r7, #15]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d001      	beq.n	800b28a <HAL_TIM_Encoder_Start_IT+0x2a>
    {
      return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e06f      	b.n	800b36a <HAL_TIM_Encoder_Start_IT+0x10a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800b292:	e01c      	b.n	800b2ce <HAL_TIM_Encoder_Start_IT+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b04      	cmp	r3, #4
 800b298:	d109      	bne.n	800b2ae <HAL_TIM_Encoder_Start_IT+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d001      	beq.n	800b2a4 <HAL_TIM_Encoder_Start_IT+0x44>
    {
      return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e062      	b.n	800b36a <HAL_TIM_Encoder_Start_IT+0x10a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800b2ac:	e00f      	b.n	800b2ce <HAL_TIM_Encoder_Start_IT+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d102      	bne.n	800b2ba <HAL_TIM_Encoder_Start_IT+0x5a>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d001      	beq.n	800b2be <HAL_TIM_Encoder_Start_IT+0x5e>
    {
      return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e055      	b.n	800b36a <HAL_TIM_Encoder_Start_IT+0x10a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <HAL_TIM_Encoder_Start_IT+0x7a>
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d010      	beq.n	800b2fa <HAL_TIM_Encoder_Start_IT+0x9a>
 800b2d8:	e01f      	b.n	800b31a <HAL_TIM_Encoder_Start_IT+0xba>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 fe55 	bl	800bf92 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f042 0202 	orr.w	r2, r2, #2
 800b2f6:	60da      	str	r2, [r3, #12]
      break;
 800b2f8:	e02e      	b.n	800b358 <HAL_TIM_Encoder_Start_IT+0xf8>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2201      	movs	r2, #1
 800b300:	2104      	movs	r1, #4
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fe45 	bl	800bf92 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f042 0204 	orr.w	r2, r2, #4
 800b316:	60da      	str	r2, [r3, #12]
      break;
 800b318:	e01e      	b.n	800b358 <HAL_TIM_Encoder_Start_IT+0xf8>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2201      	movs	r2, #1
 800b320:	2100      	movs	r1, #0
 800b322:	4618      	mov	r0, r3
 800b324:	f000 fe35 	bl	800bf92 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2201      	movs	r2, #1
 800b32e:	2104      	movs	r1, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f000 fe2e 	bl	800bf92 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f042 0202 	orr.w	r2, r2, #2
 800b344:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f042 0204 	orr.w	r2, r2, #4
 800b354:	60da      	str	r2, [r3, #12]
      break;
 800b356:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f042 0201 	orr.w	r2, r2, #1
 800b366:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	f003 0302 	and.w	r3, r3, #2
 800b384:	2b02      	cmp	r3, #2
 800b386:	d122      	bne.n	800b3ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f003 0302 	and.w	r3, r3, #2
 800b392:	2b02      	cmp	r3, #2
 800b394:	d11b      	bne.n	800b3ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f06f 0202 	mvn.w	r2, #2
 800b39e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	f003 0303 	and.w	r3, r3, #3
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d003      	beq.n	800b3bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7f8 faf3 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 800b3ba:	e005      	b.n	800b3c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fabe 	bl	800b93e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fac4 	bl	800b950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b04      	cmp	r3, #4
 800b3da:	d122      	bne.n	800b422 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f003 0304 	and.w	r3, r3, #4
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	d11b      	bne.n	800b422 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f06f 0204 	mvn.w	r2, #4
 800b3f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7f8 fac9 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 800b40e:	e005      	b.n	800b41c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fa94 	bl	800b93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fa9a 	bl	800b950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	f003 0308 	and.w	r3, r3, #8
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d122      	bne.n	800b476 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	f003 0308 	and.w	r3, r3, #8
 800b43a:	2b08      	cmp	r3, #8
 800b43c:	d11b      	bne.n	800b476 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f06f 0208 	mvn.w	r2, #8
 800b446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2204      	movs	r2, #4
 800b44c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	69db      	ldr	r3, [r3, #28]
 800b454:	f003 0303 	and.w	r3, r3, #3
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7f8 fa9f 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 800b462:	e005      	b.n	800b470 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fa6a 	bl	800b93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa70 	bl	800b950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	f003 0310 	and.w	r3, r3, #16
 800b480:	2b10      	cmp	r3, #16
 800b482:	d122      	bne.n	800b4ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f003 0310 	and.w	r3, r3, #16
 800b48e:	2b10      	cmp	r3, #16
 800b490:	d11b      	bne.n	800b4ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f06f 0210 	mvn.w	r2, #16
 800b49a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2208      	movs	r2, #8
 800b4a0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7f8 fa75 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 800b4b6:	e005      	b.n	800b4c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fa40 	bl	800b93e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fa46 	bl	800b950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f003 0301 	and.w	r3, r3, #1
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d10e      	bne.n	800b4f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d107      	bne.n	800b4f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f06f 0201 	mvn.w	r2, #1
 800b4ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7f8 fa2b 	bl	800394c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b500:	2b40      	cmp	r3, #64	; 0x40
 800b502:	d10e      	bne.n	800b522 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50e:	2b40      	cmp	r3, #64	; 0x40
 800b510:	d107      	bne.n	800b522 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fa20 	bl	800b962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d101      	bne.n	800b544 <HAL_TIM_IC_ConfigChannel+0x1a>
 800b540:	2302      	movs	r3, #2
 800b542:	e082      	b.n	800b64a <HAL_TIM_IC_ConfigChannel+0x120>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d11b      	bne.n	800b58a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6818      	ldr	r0, [r3, #0]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6819      	ldr	r1, [r3, #0]
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	f000 fb6d 	bl	800bc40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	699a      	ldr	r2, [r3, #24]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 020c 	bic.w	r2, r2, #12
 800b574:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6999      	ldr	r1, [r3, #24]
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	430a      	orrs	r2, r1
 800b586:	619a      	str	r2, [r3, #24]
 800b588:	e05a      	b.n	800b640 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b04      	cmp	r3, #4
 800b58e:	d11c      	bne.n	800b5ca <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6818      	ldr	r0, [r3, #0]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	6819      	ldr	r1, [r3, #0]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	f000 fbdc 	bl	800bd5c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	699a      	ldr	r2, [r3, #24]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b5b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6999      	ldr	r1, [r3, #24]
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	021a      	lsls	r2, r3, #8
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	619a      	str	r2, [r3, #24]
 800b5c8:	e03a      	b.n	800b640 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d11b      	bne.n	800b608 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6818      	ldr	r0, [r3, #0]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	6819      	ldr	r1, [r3, #0]
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	f000 fc27 	bl	800be32 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	69da      	ldr	r2, [r3, #28]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f022 020c 	bic.w	r2, r2, #12
 800b5f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	69d9      	ldr	r1, [r3, #28]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	430a      	orrs	r2, r1
 800b604:	61da      	str	r2, [r3, #28]
 800b606:	e01b      	b.n	800b640 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6819      	ldr	r1, [r3, #0]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	f000 fc46 	bl	800bea8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	69da      	ldr	r2, [r3, #28]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b62a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	69d9      	ldr	r1, [r3, #28]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	021a      	lsls	r2, r3, #8
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	430a      	orrs	r2, r1
 800b63e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b666:	2b01      	cmp	r3, #1
 800b668:	d101      	bne.n	800b66e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b66a:	2302      	movs	r3, #2
 800b66c:	e0ac      	b.n	800b7c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b0c      	cmp	r3, #12
 800b67a:	f200 809f 	bhi.w	800b7bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800b67e:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b6b9 	.word	0x0800b6b9
 800b688:	0800b7bd 	.word	0x0800b7bd
 800b68c:	0800b7bd 	.word	0x0800b7bd
 800b690:	0800b7bd 	.word	0x0800b7bd
 800b694:	0800b6f9 	.word	0x0800b6f9
 800b698:	0800b7bd 	.word	0x0800b7bd
 800b69c:	0800b7bd 	.word	0x0800b7bd
 800b6a0:	0800b7bd 	.word	0x0800b7bd
 800b6a4:	0800b73b 	.word	0x0800b73b
 800b6a8:	0800b7bd 	.word	0x0800b7bd
 800b6ac:	0800b7bd 	.word	0x0800b7bd
 800b6b0:	0800b7bd 	.word	0x0800b7bd
 800b6b4:	0800b77b 	.word	0x0800b77b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68b9      	ldr	r1, [r7, #8]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 f9c8 	bl	800ba54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f042 0208 	orr.w	r2, r2, #8
 800b6d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	699a      	ldr	r2, [r3, #24]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f022 0204 	bic.w	r2, r2, #4
 800b6e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6999      	ldr	r1, [r3, #24]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	619a      	str	r2, [r3, #24]
      break;
 800b6f6:	e062      	b.n	800b7be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68b9      	ldr	r1, [r7, #8]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 f9e4 	bl	800bacc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	699a      	ldr	r2, [r3, #24]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699a      	ldr	r2, [r3, #24]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6999      	ldr	r1, [r3, #24]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	021a      	lsls	r2, r3, #8
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	430a      	orrs	r2, r1
 800b736:	619a      	str	r2, [r3, #24]
      break;
 800b738:	e041      	b.n	800b7be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	4618      	mov	r0, r3
 800b742:	f000 fa01 	bl	800bb48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69da      	ldr	r2, [r3, #28]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0208 	orr.w	r2, r2, #8
 800b754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	69da      	ldr	r2, [r3, #28]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0204 	bic.w	r2, r2, #4
 800b764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69d9      	ldr	r1, [r3, #28]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	430a      	orrs	r2, r1
 800b776:	61da      	str	r2, [r3, #28]
      break;
 800b778:	e021      	b.n	800b7be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68b9      	ldr	r1, [r7, #8]
 800b780:	4618      	mov	r0, r3
 800b782:	f000 fa1e 	bl	800bbc2 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	69da      	ldr	r2, [r3, #28]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	69da      	ldr	r2, [r3, #28]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	69d9      	ldr	r1, [r3, #28]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	021a      	lsls	r2, r3, #8
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	61da      	str	r2, [r3, #28]
      break;
 800b7ba:	e000      	b.n	800b7be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b7bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d101      	bne.n	800b7e8 <HAL_TIM_ConfigClockSource+0x18>
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	e0a6      	b.n	800b936 <HAL_TIM_ConfigClockSource+0x166>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b80e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b40      	cmp	r3, #64	; 0x40
 800b81e:	d067      	beq.n	800b8f0 <HAL_TIM_ConfigClockSource+0x120>
 800b820:	2b40      	cmp	r3, #64	; 0x40
 800b822:	d80b      	bhi.n	800b83c <HAL_TIM_ConfigClockSource+0x6c>
 800b824:	2b10      	cmp	r3, #16
 800b826:	d073      	beq.n	800b910 <HAL_TIM_ConfigClockSource+0x140>
 800b828:	2b10      	cmp	r3, #16
 800b82a:	d802      	bhi.n	800b832 <HAL_TIM_ConfigClockSource+0x62>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d06f      	beq.n	800b910 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b830:	e078      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b832:	2b20      	cmp	r3, #32
 800b834:	d06c      	beq.n	800b910 <HAL_TIM_ConfigClockSource+0x140>
 800b836:	2b30      	cmp	r3, #48	; 0x30
 800b838:	d06a      	beq.n	800b910 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b83a:	e073      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b83c:	2b70      	cmp	r3, #112	; 0x70
 800b83e:	d00d      	beq.n	800b85c <HAL_TIM_ConfigClockSource+0x8c>
 800b840:	2b70      	cmp	r3, #112	; 0x70
 800b842:	d804      	bhi.n	800b84e <HAL_TIM_ConfigClockSource+0x7e>
 800b844:	2b50      	cmp	r3, #80	; 0x50
 800b846:	d033      	beq.n	800b8b0 <HAL_TIM_ConfigClockSource+0xe0>
 800b848:	2b60      	cmp	r3, #96	; 0x60
 800b84a:	d041      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b84c:	e06a      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b852:	d066      	beq.n	800b922 <HAL_TIM_ConfigClockSource+0x152>
 800b854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b858:	d017      	beq.n	800b88a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b85a:	e063      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	6899      	ldr	r1, [r3, #8]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	f000 fb72 	bl	800bf54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b87e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	609a      	str	r2, [r3, #8]
      break;
 800b888:	e04c      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6899      	ldr	r1, [r3, #8]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f000 fb5b 	bl	800bf54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8ac:	609a      	str	r2, [r3, #8]
      break;
 800b8ae:	e039      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	6859      	ldr	r1, [r3, #4]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f000 fa1f 	bl	800bd00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2150      	movs	r1, #80	; 0x50
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 fb29 	bl	800bf20 <TIM_ITRx_SetConfig>
      break;
 800b8ce:	e029      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	6859      	ldr	r1, [r3, #4]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	f000 fa79 	bl	800bdd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2160      	movs	r1, #96	; 0x60
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f000 fb19 	bl	800bf20 <TIM_ITRx_SetConfig>
      break;
 800b8ee:	e019      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6818      	ldr	r0, [r3, #0]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	6859      	ldr	r1, [r3, #4]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f000 f9ff 	bl	800bd00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2140      	movs	r1, #64	; 0x40
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 fb09 	bl	800bf20 <TIM_ITRx_SetConfig>
      break;
 800b90e:	e009      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4619      	mov	r1, r3
 800b91a:	4610      	mov	r0, r2
 800b91c:	f000 fb00 	bl	800bf20 <TIM_ITRx_SetConfig>
        break;
 800b920:	e000      	b.n	800b924 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b93e:	b480      	push	{r7}
 800b940:	b083      	sub	sp, #12
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b946:	bf00      	nop
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bc80      	pop	{r7}
 800b94e:	4770      	bx	lr

0800b950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bc80      	pop	{r7}
 800b960:	4770      	bx	lr

0800b962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	bc80      	pop	{r7}
 800b972:	4770      	bx	lr

0800b974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b98a:	d00f      	beq.n	800b9ac <TIM_Base_SetConfig+0x38>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a2b      	ldr	r2, [pc, #172]	; (800ba3c <TIM_Base_SetConfig+0xc8>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00b      	beq.n	800b9ac <TIM_Base_SetConfig+0x38>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a2a      	ldr	r2, [pc, #168]	; (800ba40 <TIM_Base_SetConfig+0xcc>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d007      	beq.n	800b9ac <TIM_Base_SetConfig+0x38>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a29      	ldr	r2, [pc, #164]	; (800ba44 <TIM_Base_SetConfig+0xd0>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d003      	beq.n	800b9ac <TIM_Base_SetConfig+0x38>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a28      	ldr	r2, [pc, #160]	; (800ba48 <TIM_Base_SetConfig+0xd4>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d108      	bne.n	800b9be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c4:	d017      	beq.n	800b9f6 <TIM_Base_SetConfig+0x82>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a1c      	ldr	r2, [pc, #112]	; (800ba3c <TIM_Base_SetConfig+0xc8>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d013      	beq.n	800b9f6 <TIM_Base_SetConfig+0x82>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a1b      	ldr	r2, [pc, #108]	; (800ba40 <TIM_Base_SetConfig+0xcc>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00f      	beq.n	800b9f6 <TIM_Base_SetConfig+0x82>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a1a      	ldr	r2, [pc, #104]	; (800ba44 <TIM_Base_SetConfig+0xd0>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00b      	beq.n	800b9f6 <TIM_Base_SetConfig+0x82>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a19      	ldr	r2, [pc, #100]	; (800ba48 <TIM_Base_SetConfig+0xd4>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d007      	beq.n	800b9f6 <TIM_Base_SetConfig+0x82>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a18      	ldr	r2, [pc, #96]	; (800ba4c <TIM_Base_SetConfig+0xd8>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d003      	beq.n	800b9f6 <TIM_Base_SetConfig+0x82>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a17      	ldr	r2, [pc, #92]	; (800ba50 <TIM_Base_SetConfig+0xdc>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d108      	bne.n	800ba08 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	615a      	str	r2, [r3, #20]
}
 800ba32:	bf00      	nop
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bc80      	pop	{r7}
 800ba3a:	4770      	bx	lr
 800ba3c:	40000400 	.word	0x40000400
 800ba40:	40000800 	.word	0x40000800
 800ba44:	40000c00 	.word	0x40000c00
 800ba48:	40010800 	.word	0x40010800
 800ba4c:	40010c00 	.word	0x40010c00
 800ba50:	40011000 	.word	0x40011000

0800ba54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	f023 0201 	bic.w	r2, r3, #1
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f023 0302 	bic.w	r3, r3, #2
 800ba9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	621a      	str	r2, [r3, #32]
}
 800bac2:	bf00      	nop
 800bac4:	371c      	adds	r7, #28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bc80      	pop	{r7}
 800baca:	4770      	bx	lr

0800bacc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bacc:	b480      	push	{r7}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	f023 0210 	bic.w	r2, r3, #16
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bafa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	021b      	lsls	r3, r3, #8
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f023 0320 	bic.w	r3, r3, #32
 800bb16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	011b      	lsls	r3, r3, #4
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	621a      	str	r2, [r3, #32]
}
 800bb3e:	bf00      	nop
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bc80      	pop	{r7}
 800bb46:	4770      	bx	lr

0800bb48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	69db      	ldr	r3, [r3, #28]
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	021b      	lsls	r3, r3, #8
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	621a      	str	r2, [r3, #32]
}
 800bbb8:	bf00      	nop
 800bbba:	371c      	adds	r7, #28
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bc80      	pop	{r7}
 800bbc0:	4770      	bx	lr

0800bbc2 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b087      	sub	sp, #28
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	69db      	ldr	r3, [r3, #28]
 800bbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbf8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	021b      	lsls	r3, r3, #8
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	031b      	lsls	r3, r3, #12
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	621a      	str	r2, [r3, #32]
}
 800bc34:	bf00      	nop
 800bc36:	371c      	adds	r7, #28
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bc80      	pop	{r7}
 800bc3c:	4770      	bx	lr
	...

0800bc40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	f023 0201 	bic.w	r2, r3, #1
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
 800bc64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc6c:	d00f      	beq.n	800bc8e <TIM_TI1_SetConfig+0x4e>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	4a1f      	ldr	r2, [pc, #124]	; (800bcf0 <TIM_TI1_SetConfig+0xb0>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d00b      	beq.n	800bc8e <TIM_TI1_SetConfig+0x4e>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4a1e      	ldr	r2, [pc, #120]	; (800bcf4 <TIM_TI1_SetConfig+0xb4>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d007      	beq.n	800bc8e <TIM_TI1_SetConfig+0x4e>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	4a1d      	ldr	r2, [pc, #116]	; (800bcf8 <TIM_TI1_SetConfig+0xb8>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d003      	beq.n	800bc8e <TIM_TI1_SetConfig+0x4e>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	4a1c      	ldr	r2, [pc, #112]	; (800bcfc <TIM_TI1_SetConfig+0xbc>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d101      	bne.n	800bc92 <TIM_TI1_SetConfig+0x52>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <TIM_TI1_SetConfig+0x54>
 800bc92:	2300      	movs	r3, #0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d008      	beq.n	800bcaa <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	617b      	str	r3, [r7, #20]
 800bca8:	e003      	b.n	800bcb2 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f043 0301 	orr.w	r3, r3, #1
 800bcb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bcb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	011b      	lsls	r3, r3, #4
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	f023 030a 	bic.w	r3, r3, #10
 800bccc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	f003 030a 	and.w	r3, r3, #10
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	621a      	str	r2, [r3, #32]
}
 800bce6:	bf00      	nop
 800bce8:	371c      	adds	r7, #28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr
 800bcf0:	40000400 	.word	0x40000400
 800bcf4:	40000800 	.word	0x40000800
 800bcf8:	40000c00 	.word	0x40000c00
 800bcfc:	40010800 	.word	0x40010800

0800bd00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	f023 0201 	bic.w	r2, r3, #1
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f023 030a 	bic.w	r3, r3, #10
 800bd3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	621a      	str	r2, [r3, #32]
}
 800bd52:	bf00      	nop
 800bd54:	371c      	adds	r7, #28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bc80      	pop	{r7}
 800bd5a:	4770      	bx	lr

0800bd5c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	f023 0210 	bic.w	r2, r3, #16
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	031b      	lsls	r3, r3, #12
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	621a      	str	r2, [r3, #32]
}
 800bdca:	bf00      	nop
 800bdcc:	371c      	adds	r7, #28
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bc80      	pop	{r7}
 800bdd2:	4770      	bx	lr

0800bdd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	f023 0210 	bic.w	r2, r3, #16
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	031b      	lsls	r3, r3, #12
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	4313      	orrs	r3, r2
 800be08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	011b      	lsls	r3, r3, #4
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	4313      	orrs	r3, r2
 800be1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	621a      	str	r2, [r3, #32]
}
 800be28:	bf00      	nop
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bc80      	pop	{r7}
 800be30:	4770      	bx	lr

0800be32 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be32:	b480      	push	{r7}
 800be34:	b087      	sub	sp, #28
 800be36:	af00      	add	r7, sp, #0
 800be38:	60f8      	str	r0, [r7, #12]
 800be3a:	60b9      	str	r1, [r7, #8]
 800be3c:	607a      	str	r2, [r7, #4]
 800be3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	69db      	ldr	r3, [r3, #28]
 800be50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	f023 0303 	bic.w	r3, r3, #3
 800be5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4313      	orrs	r3, r2
 800be66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	011b      	lsls	r3, r3, #4
 800be74:	b2db      	uxtb	r3, r3
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	4313      	orrs	r3, r2
 800be7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800be82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	021b      	lsls	r3, r3, #8
 800be88:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	4313      	orrs	r3, r2
 800be90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	693a      	ldr	r2, [r7, #16]
 800be9c:	621a      	str	r2, [r3, #32]
}
 800be9e:	bf00      	nop
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bc80      	pop	{r7}
 800bea6:	4770      	bx	lr

0800bea8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	69db      	ldr	r3, [r3, #28]
 800bec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6a1b      	ldr	r3, [r3, #32]
 800becc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bed4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	4313      	orrs	r3, r2
 800bede:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bee6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	031b      	lsls	r3, r3, #12
 800beec:	b29b      	uxth	r3, r3
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800befa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	031b      	lsls	r3, r3, #12
 800bf00:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	4313      	orrs	r3, r2
 800bf08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	693a      	ldr	r2, [r7, #16]
 800bf14:	621a      	str	r2, [r3, #32]
}
 800bf16:	bf00      	nop
 800bf18:	371c      	adds	r7, #28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bc80      	pop	{r7}
 800bf1e:	4770      	bx	lr

0800bf20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	f043 0307 	orr.w	r3, r3, #7
 800bf42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	609a      	str	r2, [r3, #8]
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bc80      	pop	{r7}
 800bf52:	4770      	bx	lr

0800bf54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	021a      	lsls	r2, r3, #8
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	431a      	orrs	r2, r3
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	609a      	str	r2, [r3, #8]
}
 800bf88:	bf00      	nop
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bc80      	pop	{r7}
 800bf90:	4770      	bx	lr

0800bf92 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b087      	sub	sp, #28
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	60f8      	str	r0, [r7, #12]
 800bf9a:	60b9      	str	r1, [r7, #8]
 800bf9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	f003 031f 	and.w	r3, r3, #31
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfaa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6a1a      	ldr	r2, [r3, #32]
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	43db      	mvns	r3, r3
 800bfb4:	401a      	ands	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6a1a      	ldr	r2, [r3, #32]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f003 031f 	and.w	r3, r3, #31
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	621a      	str	r2, [r3, #32]
}
 800bfd0:	bf00      	nop
 800bfd2:	371c      	adds	r7, #28
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr
	...

0800bfdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d101      	bne.n	800bff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bff0:	2302      	movs	r3, #2
 800bff2:	e046      	b.n	800c082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2202      	movs	r2, #2
 800c000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c01a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c036:	d00e      	beq.n	800c056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a13      	ldr	r2, [pc, #76]	; (800c08c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d009      	beq.n	800c056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a12      	ldr	r2, [pc, #72]	; (800c090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d004      	beq.n	800c056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a10      	ldr	r2, [pc, #64]	; (800c094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d10c      	bne.n	800c070 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c05c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	4313      	orrs	r3, r2
 800c066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	bc80      	pop	{r7}
 800c08a:	4770      	bx	lr
 800c08c:	40000400 	.word	0x40000400
 800c090:	40000800 	.word	0x40000800
 800c094:	40010800 	.word	0x40010800

0800c098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e03f      	b.n	800c12a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7f7 f9fe 	bl	80034c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2224      	movs	r2, #36	; 0x24
 800c0c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68da      	ldr	r2, [r3, #12]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fb91 	bl	800c804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	691a      	ldr	r2, [r3, #16]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	695a      	ldr	r2, [r3, #20]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2220      	movs	r2, #32
 800c11c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2220      	movs	r2, #32
 800c124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b088      	sub	sp, #32
 800c136:	af02      	add	r7, sp, #8
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	603b      	str	r3, [r7, #0]
 800c13e:	4613      	mov	r3, r2
 800c140:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b20      	cmp	r3, #32
 800c150:	f040 8083 	bne.w	800c25a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <HAL_UART_Transmit+0x2e>
 800c15a:	88fb      	ldrh	r3, [r7, #6]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	e07b      	b.n	800c25c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d101      	bne.n	800c172 <HAL_UART_Transmit+0x40>
 800c16e:	2302      	movs	r3, #2
 800c170:	e074      	b.n	800c25c <HAL_UART_Transmit+0x12a>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2221      	movs	r2, #33	; 0x21
 800c184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c188:	f7fa fd06 	bl	8006b98 <HAL_GetTick>
 800c18c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	88fa      	ldrh	r2, [r7, #6]
 800c192:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	88fa      	ldrh	r2, [r7, #6]
 800c198:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c1a2:	e042      	b.n	800c22a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ba:	d122      	bne.n	800c202 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	2180      	movs	r1, #128	; 0x80
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 f9b2 	bl	800c530 <UART_WaitOnFlagUntilTimeout>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c1d2:	2303      	movs	r3, #3
 800c1d4:	e042      	b.n	800c25c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	881b      	ldrh	r3, [r3, #0]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d103      	bne.n	800c1fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	3302      	adds	r3, #2
 800c1f6:	60bb      	str	r3, [r7, #8]
 800c1f8:	e017      	b.n	800c22a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	60bb      	str	r3, [r7, #8]
 800c200:	e013      	b.n	800c22a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2200      	movs	r2, #0
 800c20a:	2180      	movs	r1, #128	; 0x80
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 f98f 	bl	800c530 <UART_WaitOnFlagUntilTimeout>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d001      	beq.n	800c21c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e01f      	b.n	800c25c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	60ba      	str	r2, [r7, #8]
 800c222:	781a      	ldrb	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c22e:	b29b      	uxth	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1b7      	bne.n	800c1a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2200      	movs	r2, #0
 800c23c:	2140      	movs	r1, #64	; 0x40
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f000 f976 	bl	800c530 <UART_WaitOnFlagUntilTimeout>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e006      	b.n	800c25c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2220      	movs	r2, #32
 800c252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	e000      	b.n	800c25c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c25a:	2302      	movs	r3, #2
  }
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	4613      	mov	r3, r2
 800c270:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b20      	cmp	r3, #32
 800c27c:	d140      	bne.n	800c300 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <HAL_UART_Receive_IT+0x26>
 800c284:	88fb      	ldrh	r3, [r7, #6]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d101      	bne.n	800c28e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e039      	b.n	800c302 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c294:	2b01      	cmp	r3, #1
 800c296:	d101      	bne.n	800c29c <HAL_UART_Receive_IT+0x38>
 800c298:	2302      	movs	r3, #2
 800c29a:	e032      	b.n	800c302 <HAL_UART_Receive_IT+0x9e>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	68ba      	ldr	r2, [r7, #8]
 800c2a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	88fa      	ldrh	r2, [r7, #6]
 800c2ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	88fa      	ldrh	r2, [r7, #6]
 800c2b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2222      	movs	r2, #34	; 0x22
 800c2c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68da      	ldr	r2, [r3, #12]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	695a      	ldr	r2, [r3, #20]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0201 	orr.w	r2, r2, #1
 800c2ea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68da      	ldr	r2, [r3, #12]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f042 0220 	orr.w	r2, r2, #32
 800c2fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e000      	b.n	800c302 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c300:	2302      	movs	r3, #2
  }
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	bc80      	pop	{r7}
 800c30a:	4770      	bx	lr

0800c30c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c330:	2300      	movs	r3, #0
 800c332:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	f003 030f 	and.w	r3, r3, #15
 800c33a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10d      	bne.n	800c35e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	f003 0320 	and.w	r3, r3, #32
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d008      	beq.n	800c35e <HAL_UART_IRQHandler+0x52>
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	f003 0320 	and.w	r3, r3, #32
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f9d2 	bl	800c700 <UART_Receive_IT>
      return;
 800c35c:	e0d1      	b.n	800c502 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 80b0 	beq.w	800c4c6 <HAL_UART_IRQHandler+0x1ba>
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d105      	bne.n	800c37c <HAL_UART_IRQHandler+0x70>
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c376:	2b00      	cmp	r3, #0
 800c378:	f000 80a5 	beq.w	800c4c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00a      	beq.n	800c39c <HAL_UART_IRQHandler+0x90>
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d005      	beq.n	800c39c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c394:	f043 0201 	orr.w	r2, r3, #1
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	f003 0304 	and.w	r3, r3, #4
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00a      	beq.n	800c3bc <HAL_UART_IRQHandler+0xb0>
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d005      	beq.n	800c3bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b4:	f043 0202 	orr.w	r2, r3, #2
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	f003 0302 	and.w	r3, r3, #2
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00a      	beq.n	800c3dc <HAL_UART_IRQHandler+0xd0>
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d4:	f043 0204 	orr.w	r2, r3, #4
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	f003 0308 	and.w	r3, r3, #8
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00f      	beq.n	800c406 <HAL_UART_IRQHandler+0xfa>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	f003 0320 	and.w	r3, r3, #32
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d104      	bne.n	800c3fa <HAL_UART_IRQHandler+0xee>
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d005      	beq.n	800c406 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fe:	f043 0208 	orr.w	r2, r3, #8
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d078      	beq.n	800c500 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	f003 0320 	and.w	r3, r3, #32
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <HAL_UART_IRQHandler+0x11c>
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d002      	beq.n	800c428 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f96c 	bl	800c700 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	695b      	ldr	r3, [r3, #20]
 800c42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c432:	2b40      	cmp	r3, #64	; 0x40
 800c434:	bf0c      	ite	eq
 800c436:	2301      	moveq	r3, #1
 800c438:	2300      	movne	r3, #0
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c442:	f003 0308 	and.w	r3, r3, #8
 800c446:	2b00      	cmp	r3, #0
 800c448:	d102      	bne.n	800c450 <HAL_UART_IRQHandler+0x144>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d031      	beq.n	800c4b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f8b7 	bl	800c5c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c460:	2b40      	cmp	r3, #64	; 0x40
 800c462:	d123      	bne.n	800c4ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	695a      	ldr	r2, [r3, #20]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c472:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d013      	beq.n	800c4a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c480:	4a21      	ldr	r2, [pc, #132]	; (800c508 <HAL_UART_IRQHandler+0x1fc>)
 800c482:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fb fb77 	bl	8007b7c <HAL_DMA_Abort_IT>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d016      	beq.n	800c4c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c49e:	4610      	mov	r0, r2
 800c4a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a2:	e00e      	b.n	800c4c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f83a 	bl	800c51e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4aa:	e00a      	b.n	800c4c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f836 	bl	800c51e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b2:	e006      	b.n	800c4c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f832 	bl	800c51e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c4c0:	e01e      	b.n	800c500 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4c2:	bf00      	nop
    return;
 800c4c4:	e01c      	b.n	800c500 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d008      	beq.n	800c4e2 <HAL_UART_IRQHandler+0x1d6>
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f8a3 	bl	800c626 <UART_Transmit_IT>
    return;
 800c4e0:	e00f      	b.n	800c502 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00a      	beq.n	800c502 <HAL_UART_IRQHandler+0x1f6>
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d005      	beq.n	800c502 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f8ea 	bl	800c6d0 <UART_EndTransmit_IT>
    return;
 800c4fc:	bf00      	nop
 800c4fe:	e000      	b.n	800c502 <HAL_UART_IRQHandler+0x1f6>
    return;
 800c500:	bf00      	nop
  }
}
 800c502:	3720      	adds	r7, #32
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	0800c5ff 	.word	0x0800c5ff

0800c50c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	bc80      	pop	{r7}
 800c51c:	4770      	bx	lr

0800c51e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c51e:	b480      	push	{r7}
 800c520:	b083      	sub	sp, #12
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c526:	bf00      	nop
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bc80      	pop	{r7}
 800c52e:	4770      	bx	lr

0800c530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	603b      	str	r3, [r7, #0]
 800c53c:	4613      	mov	r3, r2
 800c53e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c540:	e02c      	b.n	800c59c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c548:	d028      	beq.n	800c59c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d007      	beq.n	800c560 <UART_WaitOnFlagUntilTimeout+0x30>
 800c550:	f7fa fb22 	bl	8006b98 <HAL_GetTick>
 800c554:	4602      	mov	r2, r0
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	69ba      	ldr	r2, [r7, #24]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d21d      	bcs.n	800c59c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c56e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	695a      	ldr	r2, [r3, #20]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f022 0201 	bic.w	r2, r2, #1
 800c57e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2220      	movs	r2, #32
 800c584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2220      	movs	r2, #32
 800c58c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e00f      	b.n	800c5bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	bf0c      	ite	eq
 800c5ac:	2301      	moveq	r3, #1
 800c5ae:	2300      	movne	r3, #0
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d0c3      	beq.n	800c542 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	695a      	ldr	r2, [r3, #20]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2220      	movs	r2, #32
 800c5f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bc80      	pop	{r7}
 800c5fc:	4770      	bx	lr

0800c5fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7ff ff80 	bl	800c51e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b21      	cmp	r3, #33	; 0x21
 800c638:	d144      	bne.n	800c6c4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c642:	d11a      	bne.n	800c67a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	461a      	mov	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c658:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	1c9a      	adds	r2, r3, #2
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	621a      	str	r2, [r3, #32]
 800c66c:	e00e      	b.n	800c68c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	621a      	str	r2, [r3, #32]
 800c678:	e008      	b.n	800c68c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	1c59      	adds	r1, r3, #1
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	6211      	str	r1, [r2, #32]
 800c684:	781a      	ldrb	r2, [r3, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c690:	b29b      	uxth	r3, r3
 800c692:	3b01      	subs	r3, #1
 800c694:	b29b      	uxth	r3, r3
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	4619      	mov	r1, r3
 800c69a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10f      	bne.n	800c6c0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68da      	ldr	r2, [r3, #12]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e000      	b.n	800c6c6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c6c4:	2302      	movs	r3, #2
  }
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bc80      	pop	{r7}
 800c6ce:	4770      	bx	lr

0800c6d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68da      	ldr	r2, [r3, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff ff0b 	bl	800c50c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b22      	cmp	r3, #34	; 0x22
 800c712:	d171      	bne.n	800c7f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c71c:	d123      	bne.n	800c766 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c722:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10e      	bne.n	800c74a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	b29b      	uxth	r3, r3
 800c734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c738:	b29a      	uxth	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c742:	1c9a      	adds	r2, r3, #2
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	629a      	str	r2, [r3, #40]	; 0x28
 800c748:	e029      	b.n	800c79e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	b29b      	uxth	r3, r3
 800c752:	b2db      	uxtb	r3, r3
 800c754:	b29a      	uxth	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	629a      	str	r2, [r3, #40]	; 0x28
 800c764:	e01b      	b.n	800c79e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	6858      	ldr	r0, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c778:	1c59      	adds	r1, r3, #1
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6291      	str	r1, [r2, #40]	; 0x28
 800c77e:	b2c2      	uxtb	r2, r0
 800c780:	701a      	strb	r2, [r3, #0]
 800c782:	e00c      	b.n	800c79e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c790:	1c58      	adds	r0, r3, #1
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	6288      	str	r0, [r1, #40]	; 0x28
 800c796:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d120      	bne.n	800c7f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68da      	ldr	r2, [r3, #12]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 0220 	bic.w	r2, r2, #32
 800c7c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68da      	ldr	r2, [r3, #12]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	695a      	ldr	r2, [r3, #20]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f022 0201 	bic.w	r2, r2, #1
 800c7e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2220      	movs	r2, #32
 800c7e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7f5 ff42 	bl	8002674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e002      	b.n	800c7fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e000      	b.n	800c7fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c7f8:	2302      	movs	r3, #2
  }
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68da      	ldr	r2, [r3, #12]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	430a      	orrs	r2, r1
 800c820:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	689a      	ldr	r2, [r3, #8]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	431a      	orrs	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	431a      	orrs	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	4313      	orrs	r3, r2
 800c838:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c844:	f023 030c 	bic.w	r3, r3, #12
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	6812      	ldr	r2, [r2, #0]
 800c84c:	68b9      	ldr	r1, [r7, #8]
 800c84e:	430b      	orrs	r3, r1
 800c850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	699a      	ldr	r2, [r3, #24]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	430a      	orrs	r2, r1
 800c866:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a55      	ldr	r2, [pc, #340]	; (800c9c4 <UART_SetConfig+0x1c0>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d103      	bne.n	800c87a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c872:	f7fd fe13 	bl	800a49c <HAL_RCC_GetPCLK2Freq>
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	e002      	b.n	800c880 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c87a:	f7fd fdfb 	bl	800a474 <HAL_RCC_GetPCLK1Freq>
 800c87e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c888:	d14c      	bne.n	800c924 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	009a      	lsls	r2, r3, #2
 800c894:	441a      	add	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a0:	4a49      	ldr	r2, [pc, #292]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8a6:	095b      	lsrs	r3, r3, #5
 800c8a8:	0119      	lsls	r1, r3, #4
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	009a      	lsls	r2, r3, #2
 800c8b4:	441a      	add	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8c0:	4b41      	ldr	r3, [pc, #260]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c8c2:	fba3 0302 	umull	r0, r3, r3, r2
 800c8c6:	095b      	lsrs	r3, r3, #5
 800c8c8:	2064      	movs	r0, #100	; 0x64
 800c8ca:	fb00 f303 	mul.w	r3, r0, r3
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	00db      	lsls	r3, r3, #3
 800c8d2:	3332      	adds	r3, #50	; 0x32
 800c8d4:	4a3c      	ldr	r2, [pc, #240]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8da:	095b      	lsrs	r3, r3, #5
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c8e2:	4419      	add	r1, r3
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	009a      	lsls	r2, r3, #2
 800c8ee:	441a      	add	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8fa:	4b33      	ldr	r3, [pc, #204]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c8fc:	fba3 0302 	umull	r0, r3, r3, r2
 800c900:	095b      	lsrs	r3, r3, #5
 800c902:	2064      	movs	r0, #100	; 0x64
 800c904:	fb00 f303 	mul.w	r3, r0, r3
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	3332      	adds	r3, #50	; 0x32
 800c90e:	4a2e      	ldr	r2, [pc, #184]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c910:	fba2 2303 	umull	r2, r3, r2, r3
 800c914:	095b      	lsrs	r3, r3, #5
 800c916:	f003 0207 	and.w	r2, r3, #7
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	440a      	add	r2, r1
 800c920:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c922:	e04a      	b.n	800c9ba <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	4613      	mov	r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	4413      	add	r3, r2
 800c92c:	009a      	lsls	r2, r3, #2
 800c92e:	441a      	add	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	fbb2 f3f3 	udiv	r3, r2, r3
 800c93a:	4a23      	ldr	r2, [pc, #140]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c93c:	fba2 2303 	umull	r2, r3, r2, r3
 800c940:	095b      	lsrs	r3, r3, #5
 800c942:	0119      	lsls	r1, r3, #4
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	4613      	mov	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	4413      	add	r3, r2
 800c94c:	009a      	lsls	r2, r3, #2
 800c94e:	441a      	add	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	fbb2 f2f3 	udiv	r2, r2, r3
 800c95a:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c95c:	fba3 0302 	umull	r0, r3, r3, r2
 800c960:	095b      	lsrs	r3, r3, #5
 800c962:	2064      	movs	r0, #100	; 0x64
 800c964:	fb00 f303 	mul.w	r3, r0, r3
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	3332      	adds	r3, #50	; 0x32
 800c96e:	4a16      	ldr	r2, [pc, #88]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c970:	fba2 2303 	umull	r2, r3, r2, r3
 800c974:	095b      	lsrs	r3, r3, #5
 800c976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c97a:	4419      	add	r1, r3
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	4613      	mov	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	009a      	lsls	r2, r3, #2
 800c986:	441a      	add	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c992:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c994:	fba3 0302 	umull	r0, r3, r3, r2
 800c998:	095b      	lsrs	r3, r3, #5
 800c99a:	2064      	movs	r0, #100	; 0x64
 800c99c:	fb00 f303 	mul.w	r3, r0, r3
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	011b      	lsls	r3, r3, #4
 800c9a4:	3332      	adds	r3, #50	; 0x32
 800c9a6:	4a08      	ldr	r2, [pc, #32]	; (800c9c8 <UART_SetConfig+0x1c4>)
 800c9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ac:	095b      	lsrs	r3, r3, #5
 800c9ae:	f003 020f 	and.w	r2, r3, #15
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	440a      	add	r2, r1
 800c9b8:	609a      	str	r2, [r3, #8]
}
 800c9ba:	bf00      	nop
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	40013800 	.word	0x40013800
 800c9c8:	51eb851f 	.word	0x51eb851f

0800c9cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c9dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c9e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bc80      	pop	{r7}
 800c9f6:	4770      	bx	lr

0800c9f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ca00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ca04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	43db      	mvns	r3, r3
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	4013      	ands	r3, r2
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bc80      	pop	{r7}
 800ca2a:	4770      	bx	lr

0800ca2c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ca2c:	b084      	sub	sp, #16
 800ca2e:	b480      	push	{r7}
 800ca30:	b083      	sub	sp, #12
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	f107 0014 	add.w	r0, r7, #20
 800ca3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bc80      	pop	{r7}
 800ca68:	b004      	add	sp, #16
 800ca6a:	4770      	bx	lr

0800ca6c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b09b      	sub	sp, #108	; 0x6c
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca76:	2300      	movs	r3, #0
 800ca78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ca8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	78db      	ldrb	r3, [r3, #3]
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d81f      	bhi.n	800cade <USB_ActivateEndpoint+0x72>
 800ca9e:	a201      	add	r2, pc, #4	; (adr r2, 800caa4 <USB_ActivateEndpoint+0x38>)
 800caa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa4:	0800cab5 	.word	0x0800cab5
 800caa8:	0800cad1 	.word	0x0800cad1
 800caac:	0800cae7 	.word	0x0800cae7
 800cab0:	0800cac3 	.word	0x0800cac3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cab4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cabc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800cac0:	e012      	b.n	800cae8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cac2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cac6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800caca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800cace:	e00b      	b.n	800cae8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cad0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cad8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800cadc:	e004      	b.n	800cae8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800cae4:	e000      	b.n	800cae8 <USB_ActivateEndpoint+0x7c>
      break;
 800cae6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	441a      	add	r2, r3
 800caf2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800caf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cafa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	441a      	add	r2, r3
 800cb38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800cb3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	7b1b      	ldrb	r3, [r3, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f040 8149 	bne.w	800cdec <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	785b      	ldrb	r3, [r3, #1]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 8084 	beq.w	800cc6c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	617b      	str	r3, [r7, #20]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	4413      	add	r3, r2
 800cb76:	617b      	str	r3, [r7, #20]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	011a      	lsls	r2, r3, #4
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	4413      	add	r3, r2
 800cb82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb86:	613b      	str	r3, [r7, #16]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	88db      	ldrh	r3, [r3, #6]
 800cb8c:	085b      	lsrs	r3, r3, #1
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	881b      	ldrh	r3, [r3, #0]
 800cba4:	81fb      	strh	r3, [r7, #14]
 800cba6:	89fb      	ldrh	r3, [r7, #14]
 800cba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01b      	beq.n	800cbe8 <USB_ActivateEndpoint+0x17c>
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	881b      	ldrh	r3, [r3, #0]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbc6:	81bb      	strh	r3, [r7, #12]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	441a      	add	r2, r3
 800cbd2:	89bb      	ldrh	r3, [r7, #12]
 800cbd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbe0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	78db      	ldrb	r3, [r3, #3]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d020      	beq.n	800cc32 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc06:	813b      	strh	r3, [r7, #8]
 800cc08:	893b      	ldrh	r3, [r7, #8]
 800cc0a:	f083 0320 	eor.w	r3, r3, #32
 800cc0e:	813b      	strh	r3, [r7, #8]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	441a      	add	r2, r3
 800cc1a:	893b      	ldrh	r3, [r7, #8]
 800cc1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	8013      	strh	r3, [r2, #0]
 800cc30:	e27f      	b.n	800d132 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc48:	817b      	strh	r3, [r7, #10]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	441a      	add	r2, r3
 800cc54:	897b      	ldrh	r3, [r7, #10]
 800cc56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	8013      	strh	r3, [r2, #0]
 800cc6a:	e262      	b.n	800d132 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	461a      	mov	r2, r3
 800cc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7c:	4413      	add	r3, r2
 800cc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	011a      	lsls	r2, r3, #4
 800cc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc88:	4413      	add	r3, r2
 800cc8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800cc8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	88db      	ldrh	r3, [r3, #6]
 800cc94:	085b      	lsrs	r3, r3, #1
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	627b      	str	r3, [r7, #36]	; 0x24
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	461a      	mov	r2, r3
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	4413      	add	r3, r2
 800ccb2:	627b      	str	r3, [r7, #36]	; 0x24
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	011a      	lsls	r2, r3, #4
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ccc2:	623b      	str	r3, [r7, #32]
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	691b      	ldr	r3, [r3, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d112      	bne.n	800ccf2 <USB_ActivateEndpoint+0x286>
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	881b      	ldrh	r3, [r3, #0]
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	801a      	strh	r2, [r3, #0]
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	801a      	strh	r2, [r3, #0]
 800ccf0:	e02f      	b.n	800cd52 <USB_ActivateEndpoint+0x2e6>
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	2b3e      	cmp	r3, #62	; 0x3e
 800ccf8:	d813      	bhi.n	800cd22 <USB_ActivateEndpoint+0x2b6>
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	085b      	lsrs	r3, r3, #1
 800cd00:	663b      	str	r3, [r7, #96]	; 0x60
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <USB_ActivateEndpoint+0x2a8>
 800cd0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd10:	3301      	adds	r3, #1
 800cd12:	663b      	str	r3, [r7, #96]	; 0x60
 800cd14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	029b      	lsls	r3, r3, #10
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	801a      	strh	r2, [r3, #0]
 800cd20:	e017      	b.n	800cd52 <USB_ActivateEndpoint+0x2e6>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	095b      	lsrs	r3, r3, #5
 800cd28:	663b      	str	r3, [r7, #96]	; 0x60
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	f003 031f 	and.w	r3, r3, #31
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d102      	bne.n	800cd3c <USB_ActivateEndpoint+0x2d0>
 800cd36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	663b      	str	r3, [r7, #96]	; 0x60
 800cd3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	029b      	lsls	r3, r3, #10
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	4413      	add	r3, r2
 800cd5c:	881b      	ldrh	r3, [r3, #0]
 800cd5e:	83fb      	strh	r3, [r7, #30]
 800cd60:	8bfb      	ldrh	r3, [r7, #30]
 800cd62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d01b      	beq.n	800cda2 <USB_ActivateEndpoint+0x336>
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd80:	83bb      	strh	r3, [r7, #28]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	441a      	add	r2, r3
 800cd8c:	8bbb      	ldrh	r3, [r7, #28]
 800cd8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	881b      	ldrh	r3, [r3, #0]
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdb8:	837b      	strh	r3, [r7, #26]
 800cdba:	8b7b      	ldrh	r3, [r7, #26]
 800cdbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cdc0:	837b      	strh	r3, [r7, #26]
 800cdc2:	8b7b      	ldrh	r3, [r7, #26]
 800cdc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cdc8:	837b      	strh	r3, [r7, #26]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	441a      	add	r2, r3
 800cdd4:	8b7b      	ldrh	r3, [r7, #26]
 800cdd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cde2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	8013      	strh	r3, [r2, #0]
 800cdea:	e1a2      	b.n	800d132 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	441a      	add	r2, r3
 800ce10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ce14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ce20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	461a      	mov	r2, r3
 800ce36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce38:	4413      	add	r3, r2
 800ce3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	011a      	lsls	r2, r3, #4
 800ce42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce44:	4413      	add	r3, r2
 800ce46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce4a:	657b      	str	r3, [r7, #84]	; 0x54
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	891b      	ldrh	r3, [r3, #8]
 800ce50:	085b      	lsrs	r3, r3, #1
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce5a:	801a      	strh	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	653b      	str	r3, [r7, #80]	; 0x50
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	461a      	mov	r2, r3
 800ce6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce6c:	4413      	add	r3, r2
 800ce6e:	653b      	str	r3, [r7, #80]	; 0x50
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	011a      	lsls	r2, r3, #4
 800ce76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ce7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	895b      	ldrh	r3, [r3, #10]
 800ce84:	085b      	lsrs	r3, r3, #1
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f040 8091 	bne.w	800cfbc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cea8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ceaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d01b      	beq.n	800ceea <USB_ActivateEndpoint+0x47e>
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	881b      	ldrh	r3, [r3, #0]
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cec8:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	441a      	add	r2, r3
 800ced4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ced6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ceda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	873b      	strh	r3, [r7, #56]	; 0x38
 800cef8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d01b      	beq.n	800cf3a <USB_ActivateEndpoint+0x4ce>
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf18:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	441a      	add	r2, r3
 800cf24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf50:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cf52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cf58:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cf5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cf60:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	441a      	add	r2, r3
 800cf6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf98:	867b      	strh	r3, [r7, #50]	; 0x32
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	441a      	add	r2, r3
 800cfa4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cfa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	8013      	strh	r3, [r2, #0]
 800cfba:	e0ba      	b.n	800d132 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800cfcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cfd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d01d      	beq.n	800d014 <USB_ActivateEndpoint+0x5a8>
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4413      	add	r3, r2
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	441a      	add	r2, r3
 800cffc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d010:	b29b      	uxth	r3, r3
 800d012:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d01d      	beq.n	800d06c <USB_ActivateEndpoint+0x600>
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4413      	add	r3, r2
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d046:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	441a      	add	r2, r3
 800d054:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d05c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d068:	b29b      	uxth	r3, r3
 800d06a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	78db      	ldrb	r3, [r3, #3]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d024      	beq.n	800d0be <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4413      	add	r3, r2
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	b29b      	uxth	r3, r3
 800d082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d08a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d08e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d092:	f083 0320 	eor.w	r3, r3, #32
 800d096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	441a      	add	r2, r3
 800d0a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	8013      	strh	r3, [r2, #0]
 800d0bc:	e01d      	b.n	800d0fa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	441a      	add	r2, r3
 800d0e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4413      	add	r3, r2
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	b29b      	uxth	r3, r3
 800d108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d110:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	441a      	add	r2, r3
 800d11c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d11e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d12e:	b29b      	uxth	r3, r3
 800d130:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800d132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d136:	4618      	mov	r0, r3
 800d138:	376c      	adds	r7, #108	; 0x6c
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bc80      	pop	{r7}
 800d13e:	4770      	bx	lr

0800d140 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d140:	b480      	push	{r7}
 800d142:	b08d      	sub	sp, #52	; 0x34
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	7b1b      	ldrb	r3, [r3, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f040 808e 	bne.w	800d270 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	785b      	ldrb	r3, [r3, #1]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d044      	beq.n	800d1e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	81bb      	strh	r3, [r7, #12]
 800d16a:	89bb      	ldrh	r3, [r7, #12]
 800d16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d170:	2b00      	cmp	r3, #0
 800d172:	d01b      	beq.n	800d1ac <USB_DeactivateEndpoint+0x6c>
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	b29b      	uxth	r3, r3
 800d182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d18a:	817b      	strh	r3, [r7, #10]
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	441a      	add	r2, r3
 800d196:	897b      	ldrh	r3, [r7, #10]
 800d198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d19c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1c2:	813b      	strh	r3, [r7, #8]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	441a      	add	r2, r3
 800d1ce:	893b      	ldrh	r3, [r7, #8]
 800d1d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	8013      	strh	r3, [r2, #0]
 800d1e4:	e192      	b.n	800d50c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4413      	add	r3, r2
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	827b      	strh	r3, [r7, #18]
 800d1f4:	8a7b      	ldrh	r3, [r7, #18]
 800d1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d01b      	beq.n	800d236 <USB_DeactivateEndpoint+0xf6>
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d214:	823b      	strh	r3, [r7, #16]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	441a      	add	r2, r3
 800d220:	8a3b      	ldrh	r3, [r7, #16]
 800d222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d22a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d232:	b29b      	uxth	r3, r3
 800d234:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4413      	add	r3, r2
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	b29b      	uxth	r3, r3
 800d244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d24c:	81fb      	strh	r3, [r7, #14]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	441a      	add	r2, r3
 800d258:	89fb      	ldrh	r3, [r7, #14]
 800d25a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d25e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	8013      	strh	r3, [r2, #0]
 800d26e:	e14d      	b.n	800d50c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	785b      	ldrb	r3, [r3, #1]
 800d274:	2b00      	cmp	r3, #0
 800d276:	f040 80a5 	bne.w	800d3c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	4413      	add	r3, r2
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	843b      	strh	r3, [r7, #32]
 800d288:	8c3b      	ldrh	r3, [r7, #32]
 800d28a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d01b      	beq.n	800d2ca <USB_DeactivateEndpoint+0x18a>
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	4413      	add	r3, r2
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2a8:	83fb      	strh	r3, [r7, #30]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	441a      	add	r2, r3
 800d2b4:	8bfb      	ldrh	r3, [r7, #30]
 800d2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	83bb      	strh	r3, [r7, #28]
 800d2d8:	8bbb      	ldrh	r3, [r7, #28]
 800d2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d01b      	beq.n	800d31a <USB_DeactivateEndpoint+0x1da>
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2f8:	837b      	strh	r3, [r7, #26]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	441a      	add	r2, r3
 800d304:	8b7b      	ldrh	r3, [r7, #26]
 800d306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d30a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d316:	b29b      	uxth	r3, r3
 800d318:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	b29b      	uxth	r3, r3
 800d328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d32c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d330:	833b      	strh	r3, [r7, #24]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	441a      	add	r2, r3
 800d33c:	8b3b      	ldrh	r3, [r7, #24]
 800d33e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d34a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d34e:	b29b      	uxth	r3, r3
 800d350:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d368:	82fb      	strh	r3, [r7, #22]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	441a      	add	r2, r3
 800d374:	8afb      	ldrh	r3, [r7, #22]
 800d376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d37a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d37e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d386:	b29b      	uxth	r3, r3
 800d388:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	881b      	ldrh	r3, [r3, #0]
 800d396:	b29b      	uxth	r3, r3
 800d398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3a0:	82bb      	strh	r3, [r7, #20]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	441a      	add	r2, r3
 800d3ac:	8abb      	ldrh	r3, [r7, #20]
 800d3ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	8013      	strh	r3, [r2, #0]
 800d3c2:	e0a3      	b.n	800d50c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4413      	add	r3, r2
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d3d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d01b      	beq.n	800d414 <USB_DeactivateEndpoint+0x2d4>
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	881b      	ldrh	r3, [r3, #0]
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	441a      	add	r2, r3
 800d3fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d410:	b29b      	uxth	r3, r3
 800d412:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d01b      	beq.n	800d464 <USB_DeactivateEndpoint+0x324>
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	b29b      	uxth	r3, r3
 800d43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d442:	853b      	strh	r3, [r7, #40]	; 0x28
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	441a      	add	r2, r3
 800d44e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d45c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d460:	b29b      	uxth	r3, r3
 800d462:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4413      	add	r3, r2
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	b29b      	uxth	r3, r3
 800d472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d47a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	441a      	add	r2, r3
 800d486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d48c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d498:	b29b      	uxth	r3, r3
 800d49a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4413      	add	r3, r2
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	441a      	add	r2, r3
 800d4be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4ea:	847b      	strh	r3, [r7, #34]	; 0x22
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	441a      	add	r2, r3
 800d4f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d508:	b29b      	uxth	r3, r3
 800d50a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3734      	adds	r7, #52	; 0x34
 800d512:	46bd      	mov	sp, r7
 800d514:	bc80      	pop	{r7}
 800d516:	4770      	bx	lr

0800d518 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b0c4      	sub	sp, #272	; 0x110
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	1d3b      	adds	r3, r7, #4
 800d520:	6018      	str	r0, [r3, #0]
 800d522:	463b      	mov	r3, r7
 800d524:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d526:	463b      	mov	r3, r7
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	f040 8566 	bne.w	800dffe <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d532:	463b      	mov	r3, r7
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	699a      	ldr	r2, [r3, #24]
 800d538:	463b      	mov	r3, r7
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d905      	bls.n	800d54e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800d542:	463b      	mov	r3, r7
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d54c:	e004      	b.n	800d558 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800d54e:	463b      	mov	r3, r7
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d558:	463b      	mov	r3, r7
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	7b1b      	ldrb	r3, [r3, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d12c      	bne.n	800d5bc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d562:	463b      	mov	r3, r7
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6959      	ldr	r1, [r3, #20]
 800d568:	463b      	mov	r3, r7
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	88da      	ldrh	r2, [r3, #6]
 800d56e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d572:	b29b      	uxth	r3, r3
 800d574:	1d38      	adds	r0, r7, #4
 800d576:	6800      	ldr	r0, [r0, #0]
 800d578:	f001 fa31 	bl	800e9de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d57c:	1d3b      	adds	r3, r7, #4
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	1d3b      	adds	r3, r7, #4
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	461a      	mov	r2, r3
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	4413      	add	r3, r2
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	463b      	mov	r3, r7
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	011a      	lsls	r2, r3, #4
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800d5a4:	f107 0310 	add.w	r3, r7, #16
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	f107 0310 	add.w	r3, r7, #16
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	801a      	strh	r2, [r3, #0]
 800d5b8:	f000 bcec 	b.w	800df94 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d5bc:	463b      	mov	r3, r7
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	78db      	ldrb	r3, [r3, #3]
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	f040 8356 	bne.w	800dc74 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6a1a      	ldr	r2, [r3, #32]
 800d5ce:	463b      	mov	r3, r7
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	f240 82fa 	bls.w	800dbce <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800d5da:	1d3b      	adds	r3, r7, #4
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	463b      	mov	r3, r7
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4413      	add	r3, r2
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800d5f8:	1d3b      	adds	r3, r7, #4
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	463b      	mov	r3, r7
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	441a      	add	r2, r3
 800d606:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800d60a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d60e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d612:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800d61e:	463b      	mov	r3, r7
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d628:	463b      	mov	r3, r7
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	6a1a      	ldr	r2, [r3, #32]
 800d62e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d632:	1ad2      	subs	r2, r2, r3
 800d634:	463b      	mov	r3, r7
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d63a:	1d3b      	adds	r3, r7, #4
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	463b      	mov	r3, r7
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 815e 	beq.w	800d912 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d656:	1d3b      	adds	r3, r7, #4
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	637b      	str	r3, [r7, #52]	; 0x34
 800d65c:	463b      	mov	r3, r7
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	785b      	ldrb	r3, [r3, #1]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d164      	bne.n	800d730 <USB_EPStartXfer+0x218>
 800d666:	1d3b      	adds	r3, r7, #4
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d66c:	1d3b      	adds	r3, r7, #4
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d674:	b29b      	uxth	r3, r3
 800d676:	461a      	mov	r2, r3
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	4413      	add	r3, r2
 800d67c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d67e:	463b      	mov	r3, r7
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	011a      	lsls	r2, r3, #4
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	4413      	add	r3, r2
 800d68a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d68e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d690:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d694:	2b00      	cmp	r3, #0
 800d696:	d112      	bne.n	800d6be <USB_EPStartXfer+0x1a6>
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	881b      	ldrh	r3, [r3, #0]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	801a      	strh	r2, [r3, #0]
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	881b      	ldrh	r3, [r3, #0]
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	801a      	strh	r2, [r3, #0]
 800d6bc:	e054      	b.n	800d768 <USB_EPStartXfer+0x250>
 800d6be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6c2:	2b3e      	cmp	r3, #62	; 0x3e
 800d6c4:	d817      	bhi.n	800d6f6 <USB_EPStartXfer+0x1de>
 800d6c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6ca:	085b      	lsrs	r3, r3, #1
 800d6cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d6d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d004      	beq.n	800d6e6 <USB_EPStartXfer+0x1ce>
 800d6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	029b      	lsls	r3, r3, #10
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f2:	801a      	strh	r2, [r3, #0]
 800d6f4:	e038      	b.n	800d768 <USB_EPStartXfer+0x250>
 800d6f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d6fa:	095b      	lsrs	r3, r3, #5
 800d6fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d700:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d704:	f003 031f 	and.w	r3, r3, #31
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d104      	bne.n	800d716 <USB_EPStartXfer+0x1fe>
 800d70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d710:	3b01      	subs	r3, #1
 800d712:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	029b      	lsls	r3, r3, #10
 800d71e:	b29b      	uxth	r3, r3
 800d720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d728:	b29a      	uxth	r2, r3
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	801a      	strh	r2, [r3, #0]
 800d72e:	e01b      	b.n	800d768 <USB_EPStartXfer+0x250>
 800d730:	463b      	mov	r3, r7
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	785b      	ldrb	r3, [r3, #1]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d116      	bne.n	800d768 <USB_EPStartXfer+0x250>
 800d73a:	1d3b      	adds	r3, r7, #4
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d742:	b29b      	uxth	r3, r3
 800d744:	461a      	mov	r2, r3
 800d746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d748:	4413      	add	r3, r2
 800d74a:	637b      	str	r3, [r7, #52]	; 0x34
 800d74c:	463b      	mov	r3, r7
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	011a      	lsls	r2, r3, #4
 800d754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d756:	4413      	add	r3, r2
 800d758:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d75c:	633b      	str	r3, [r7, #48]	; 0x30
 800d75e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d762:	b29a      	uxth	r2, r3
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d768:	463b      	mov	r3, r7
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	895b      	ldrh	r3, [r3, #10]
 800d76e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d772:	463b      	mov	r3, r7
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6959      	ldr	r1, [r3, #20]
 800d778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d782:	1d38      	adds	r0, r7, #4
 800d784:	6800      	ldr	r0, [r0, #0]
 800d786:	f001 f92a 	bl	800e9de <USB_WritePMA>
            ep->xfer_buff += len;
 800d78a:	463b      	mov	r3, r7
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	695a      	ldr	r2, [r3, #20]
 800d790:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d794:	441a      	add	r2, r3
 800d796:	463b      	mov	r3, r7
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d79c:	463b      	mov	r3, r7
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6a1a      	ldr	r2, [r3, #32]
 800d7a2:	463b      	mov	r3, r7
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d90e      	bls.n	800d7ca <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800d7ac:	463b      	mov	r3, r7
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800d7b6:	463b      	mov	r3, r7
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6a1a      	ldr	r2, [r3, #32]
 800d7bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d7c0:	1ad2      	subs	r2, r2, r3
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	621a      	str	r2, [r3, #32]
 800d7c8:	e008      	b.n	800d7dc <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d7ca:	463b      	mov	r3, r7
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6a1b      	ldr	r3, [r3, #32]
 800d7d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800d7d4:	463b      	mov	r3, r7
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d7dc:	463b      	mov	r3, r7
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	785b      	ldrb	r3, [r3, #1]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d164      	bne.n	800d8b0 <USB_EPStartXfer+0x398>
 800d7e6:	1d3b      	adds	r3, r7, #4
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	61fb      	str	r3, [r7, #28]
 800d7ec:	1d3b      	adds	r3, r7, #4
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	61fb      	str	r3, [r7, #28]
 800d7fe:	463b      	mov	r3, r7
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	011a      	lsls	r2, r3, #4
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	4413      	add	r3, r2
 800d80a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d80e:	61bb      	str	r3, [r7, #24]
 800d810:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d814:	2b00      	cmp	r3, #0
 800d816:	d112      	bne.n	800d83e <USB_EPStartXfer+0x326>
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d822:	b29a      	uxth	r2, r3
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	801a      	strh	r2, [r3, #0]
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d836:	b29a      	uxth	r2, r3
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	801a      	strh	r2, [r3, #0]
 800d83c:	e057      	b.n	800d8ee <USB_EPStartXfer+0x3d6>
 800d83e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d842:	2b3e      	cmp	r3, #62	; 0x3e
 800d844:	d817      	bhi.n	800d876 <USB_EPStartXfer+0x35e>
 800d846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d84a:	085b      	lsrs	r3, r3, #1
 800d84c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d850:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d004      	beq.n	800d866 <USB_EPStartXfer+0x34e>
 800d85c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d860:	3301      	adds	r3, #1
 800d862:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d866:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	029b      	lsls	r3, r3, #10
 800d86e:	b29a      	uxth	r2, r3
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	801a      	strh	r2, [r3, #0]
 800d874:	e03b      	b.n	800d8ee <USB_EPStartXfer+0x3d6>
 800d876:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d87a:	095b      	lsrs	r3, r3, #5
 800d87c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d880:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d884:	f003 031f 	and.w	r3, r3, #31
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d104      	bne.n	800d896 <USB_EPStartXfer+0x37e>
 800d88c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d890:	3b01      	subs	r3, #1
 800d892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	029b      	lsls	r3, r3, #10
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	801a      	strh	r2, [r3, #0]
 800d8ae:	e01e      	b.n	800d8ee <USB_EPStartXfer+0x3d6>
 800d8b0:	463b      	mov	r3, r7
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	785b      	ldrb	r3, [r3, #1]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d119      	bne.n	800d8ee <USB_EPStartXfer+0x3d6>
 800d8ba:	1d3b      	adds	r3, r7, #4
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	627b      	str	r3, [r7, #36]	; 0x24
 800d8c0:	1d3b      	adds	r3, r7, #4
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	4413      	add	r3, r2
 800d8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8d2:	463b      	mov	r3, r7
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	011a      	lsls	r2, r3, #4
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	4413      	add	r3, r2
 800d8de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d8e2:	623b      	str	r3, [r7, #32]
 800d8e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	6a3b      	ldr	r3, [r7, #32]
 800d8ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d8ee:	463b      	mov	r3, r7
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	891b      	ldrh	r3, [r3, #8]
 800d8f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d8f8:	463b      	mov	r3, r7
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6959      	ldr	r1, [r3, #20]
 800d8fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d902:	b29b      	uxth	r3, r3
 800d904:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800d908:	1d38      	adds	r0, r7, #4
 800d90a:	6800      	ldr	r0, [r0, #0]
 800d90c:	f001 f867 	bl	800e9de <USB_WritePMA>
 800d910:	e340      	b.n	800df94 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d912:	463b      	mov	r3, r7
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	785b      	ldrb	r3, [r3, #1]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d164      	bne.n	800d9e6 <USB_EPStartXfer+0x4ce>
 800d91c:	1d3b      	adds	r3, r7, #4
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d922:	1d3b      	adds	r3, r7, #4
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	461a      	mov	r2, r3
 800d92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d930:	4413      	add	r3, r2
 800d932:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d934:	463b      	mov	r3, r7
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	011a      	lsls	r2, r3, #4
 800d93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d93e:	4413      	add	r3, r2
 800d940:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d944:	64bb      	str	r3, [r7, #72]	; 0x48
 800d946:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d112      	bne.n	800d974 <USB_EPStartXfer+0x45c>
 800d94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	b29b      	uxth	r3, r3
 800d954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d958:	b29a      	uxth	r2, r3
 800d95a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d95c:	801a      	strh	r2, [r3, #0]
 800d95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	b29b      	uxth	r3, r3
 800d964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d970:	801a      	strh	r2, [r3, #0]
 800d972:	e057      	b.n	800da24 <USB_EPStartXfer+0x50c>
 800d974:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d978:	2b3e      	cmp	r3, #62	; 0x3e
 800d97a:	d817      	bhi.n	800d9ac <USB_EPStartXfer+0x494>
 800d97c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d980:	085b      	lsrs	r3, r3, #1
 800d982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d986:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d004      	beq.n	800d99c <USB_EPStartXfer+0x484>
 800d992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d996:	3301      	adds	r3, #1
 800d998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d99c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	029b      	lsls	r3, r3, #10
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9a8:	801a      	strh	r2, [r3, #0]
 800d9aa:	e03b      	b.n	800da24 <USB_EPStartXfer+0x50c>
 800d9ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9b0:	095b      	lsrs	r3, r3, #5
 800d9b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d9b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d9ba:	f003 031f 	and.w	r3, r3, #31
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d104      	bne.n	800d9cc <USB_EPStartXfer+0x4b4>
 800d9c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d9cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	029b      	lsls	r3, r3, #10
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9e2:	801a      	strh	r2, [r3, #0]
 800d9e4:	e01e      	b.n	800da24 <USB_EPStartXfer+0x50c>
 800d9e6:	463b      	mov	r3, r7
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	785b      	ldrb	r3, [r3, #1]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d119      	bne.n	800da24 <USB_EPStartXfer+0x50c>
 800d9f0:	1d3b      	adds	r3, r7, #4
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	657b      	str	r3, [r7, #84]	; 0x54
 800d9f6:	1d3b      	adds	r3, r7, #4
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	461a      	mov	r2, r3
 800da02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da04:	4413      	add	r3, r2
 800da06:	657b      	str	r3, [r7, #84]	; 0x54
 800da08:	463b      	mov	r3, r7
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	011a      	lsls	r2, r3, #4
 800da10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da12:	4413      	add	r3, r2
 800da14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800da18:	653b      	str	r3, [r7, #80]	; 0x50
 800da1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da1e:	b29a      	uxth	r2, r3
 800da20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800da24:	463b      	mov	r3, r7
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	891b      	ldrh	r3, [r3, #8]
 800da2a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da2e:	463b      	mov	r3, r7
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6959      	ldr	r1, [r3, #20]
 800da34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da38:	b29b      	uxth	r3, r3
 800da3a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800da3e:	1d38      	adds	r0, r7, #4
 800da40:	6800      	ldr	r0, [r0, #0]
 800da42:	f000 ffcc 	bl	800e9de <USB_WritePMA>
            ep->xfer_buff += len;
 800da46:	463b      	mov	r3, r7
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	695a      	ldr	r2, [r3, #20]
 800da4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da50:	441a      	add	r2, r3
 800da52:	463b      	mov	r3, r7
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800da58:	463b      	mov	r3, r7
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6a1a      	ldr	r2, [r3, #32]
 800da5e:	463b      	mov	r3, r7
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	429a      	cmp	r2, r3
 800da66:	d90e      	bls.n	800da86 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800da68:	463b      	mov	r3, r7
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800da72:	463b      	mov	r3, r7
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	6a1a      	ldr	r2, [r3, #32]
 800da78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800da7c:	1ad2      	subs	r2, r2, r3
 800da7e:	463b      	mov	r3, r7
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	621a      	str	r2, [r3, #32]
 800da84:	e008      	b.n	800da98 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800da86:	463b      	mov	r3, r7
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6a1b      	ldr	r3, [r3, #32]
 800da8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800da90:	463b      	mov	r3, r7
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2200      	movs	r2, #0
 800da96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800da98:	1d3b      	adds	r3, r7, #4
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	647b      	str	r3, [r7, #68]	; 0x44
 800da9e:	463b      	mov	r3, r7
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	785b      	ldrb	r3, [r3, #1]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d164      	bne.n	800db72 <USB_EPStartXfer+0x65a>
 800daa8:	1d3b      	adds	r3, r7, #4
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daae:	1d3b      	adds	r3, r7, #4
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	461a      	mov	r2, r3
 800daba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dabc:	4413      	add	r3, r2
 800dabe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dac0:	463b      	mov	r3, r7
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	011a      	lsls	r2, r3, #4
 800dac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daca:	4413      	add	r3, r2
 800dacc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dad0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dad2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d112      	bne.n	800db00 <USB_EPStartXfer+0x5e8>
 800dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae8:	801a      	strh	r2, [r3, #0]
 800daea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	b29b      	uxth	r3, r3
 800daf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafc:	801a      	strh	r2, [r3, #0]
 800dafe:	e054      	b.n	800dbaa <USB_EPStartXfer+0x692>
 800db00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db04:	2b3e      	cmp	r3, #62	; 0x3e
 800db06:	d817      	bhi.n	800db38 <USB_EPStartXfer+0x620>
 800db08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db0c:	085b      	lsrs	r3, r3, #1
 800db0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d004      	beq.n	800db28 <USB_EPStartXfer+0x610>
 800db1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db22:	3301      	adds	r3, #1
 800db24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	029b      	lsls	r3, r3, #10
 800db30:	b29a      	uxth	r2, r3
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	801a      	strh	r2, [r3, #0]
 800db36:	e038      	b.n	800dbaa <USB_EPStartXfer+0x692>
 800db38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db3c:	095b      	lsrs	r3, r3, #5
 800db3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800db46:	f003 031f 	and.w	r3, r3, #31
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d104      	bne.n	800db58 <USB_EPStartXfer+0x640>
 800db4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db52:	3b01      	subs	r3, #1
 800db54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	029b      	lsls	r3, r3, #10
 800db60:	b29b      	uxth	r3, r3
 800db62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6e:	801a      	strh	r2, [r3, #0]
 800db70:	e01b      	b.n	800dbaa <USB_EPStartXfer+0x692>
 800db72:	463b      	mov	r3, r7
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	785b      	ldrb	r3, [r3, #1]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d116      	bne.n	800dbaa <USB_EPStartXfer+0x692>
 800db7c:	1d3b      	adds	r3, r7, #4
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db84:	b29b      	uxth	r3, r3
 800db86:	461a      	mov	r2, r3
 800db88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db8a:	4413      	add	r3, r2
 800db8c:	647b      	str	r3, [r7, #68]	; 0x44
 800db8e:	463b      	mov	r3, r7
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	011a      	lsls	r2, r3, #4
 800db96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db98:	4413      	add	r3, r2
 800db9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800db9e:	643b      	str	r3, [r7, #64]	; 0x40
 800dba0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800dbaa:	463b      	mov	r3, r7
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	895b      	ldrh	r3, [r3, #10]
 800dbb0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbb4:	463b      	mov	r3, r7
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6959      	ldr	r1, [r3, #20]
 800dbba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800dbc4:	1d38      	adds	r0, r7, #4
 800dbc6:	6800      	ldr	r0, [r0, #0]
 800dbc8:	f000 ff09 	bl	800e9de <USB_WritePMA>
 800dbcc:	e1e2      	b.n	800df94 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800dbce:	463b      	mov	r3, r7
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6a1b      	ldr	r3, [r3, #32]
 800dbd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800dbd8:	1d3b      	adds	r3, r7, #4
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	463b      	mov	r3, r7
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4413      	add	r3, r2
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800dbee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbf2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800dbf6:	1d3b      	adds	r3, r7, #4
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	441a      	add	r2, r3
 800dc04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800dc08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dc1c:	1d3b      	adds	r3, r7, #4
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	663b      	str	r3, [r7, #96]	; 0x60
 800dc22:	1d3b      	adds	r3, r7, #4
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc30:	4413      	add	r3, r2
 800dc32:	663b      	str	r3, [r7, #96]	; 0x60
 800dc34:	463b      	mov	r3, r7
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	011a      	lsls	r2, r3, #4
 800dc3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc3e:	4413      	add	r3, r2
 800dc40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dc44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dc50:	463b      	mov	r3, r7
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	891b      	ldrh	r3, [r3, #8]
 800dc56:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dc5a:	463b      	mov	r3, r7
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6959      	ldr	r1, [r3, #20]
 800dc60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800dc6a:	1d38      	adds	r0, r7, #4
 800dc6c:	6800      	ldr	r0, [r0, #0]
 800dc6e:	f000 feb6 	bl	800e9de <USB_WritePMA>
 800dc72:	e18f      	b.n	800df94 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dc74:	1d3b      	adds	r3, r7, #4
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	463b      	mov	r3, r7
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 808f 	beq.w	800ddae <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dc90:	1d3b      	adds	r3, r7, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	67bb      	str	r3, [r7, #120]	; 0x78
 800dc96:	463b      	mov	r3, r7
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	785b      	ldrb	r3, [r3, #1]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d164      	bne.n	800dd6a <USB_EPStartXfer+0x852>
 800dca0:	1d3b      	adds	r3, r7, #4
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	673b      	str	r3, [r7, #112]	; 0x70
 800dca6:	1d3b      	adds	r3, r7, #4
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcb4:	4413      	add	r3, r2
 800dcb6:	673b      	str	r3, [r7, #112]	; 0x70
 800dcb8:	463b      	mov	r3, r7
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	011a      	lsls	r2, r3, #4
 800dcc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dcc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d112      	bne.n	800dcf8 <USB_EPStartXfer+0x7e0>
 800dcd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce0:	801a      	strh	r2, [r3, #0]
 800dce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce4:	881b      	ldrh	r3, [r3, #0]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcf4:	801a      	strh	r2, [r3, #0]
 800dcf6:	e054      	b.n	800dda2 <USB_EPStartXfer+0x88a>
 800dcf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dcfc:	2b3e      	cmp	r3, #62	; 0x3e
 800dcfe:	d817      	bhi.n	800dd30 <USB_EPStartXfer+0x818>
 800dd00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd04:	085b      	lsrs	r3, r3, #1
 800dd06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d004      	beq.n	800dd20 <USB_EPStartXfer+0x808>
 800dd16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	029b      	lsls	r3, r3, #10
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd2c:	801a      	strh	r2, [r3, #0]
 800dd2e:	e038      	b.n	800dda2 <USB_EPStartXfer+0x88a>
 800dd30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd34:	095b      	lsrs	r3, r3, #5
 800dd36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd3e:	f003 031f 	and.w	r3, r3, #31
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d104      	bne.n	800dd50 <USB_EPStartXfer+0x838>
 800dd46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dd50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	029b      	lsls	r3, r3, #10
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd66:	801a      	strh	r2, [r3, #0]
 800dd68:	e01b      	b.n	800dda2 <USB_EPStartXfer+0x88a>
 800dd6a:	463b      	mov	r3, r7
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	785b      	ldrb	r3, [r3, #1]
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d116      	bne.n	800dda2 <USB_EPStartXfer+0x88a>
 800dd74:	1d3b      	adds	r3, r7, #4
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	461a      	mov	r2, r3
 800dd80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd82:	4413      	add	r3, r2
 800dd84:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd86:	463b      	mov	r3, r7
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	011a      	lsls	r2, r3, #4
 800dd8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd90:	4413      	add	r3, r2
 800dd92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dd96:	677b      	str	r3, [r7, #116]	; 0x74
 800dd98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dda0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dda2:	463b      	mov	r3, r7
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	895b      	ldrh	r3, [r3, #10]
 800dda8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800ddac:	e097      	b.n	800dede <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ddae:	463b      	mov	r3, r7
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	785b      	ldrb	r3, [r3, #1]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d168      	bne.n	800de8a <USB_EPStartXfer+0x972>
 800ddb8:	1d3b      	adds	r3, r7, #4
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ddc0:	1d3b      	adds	r3, r7, #4
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	461a      	mov	r2, r3
 800ddcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ddd6:	463b      	mov	r3, r7
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	011a      	lsls	r2, r3, #4
 800ddde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dde2:	4413      	add	r3, r2
 800dde4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dde8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ddea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d112      	bne.n	800de18 <USB_EPStartXfer+0x900>
 800ddf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de00:	801a      	strh	r2, [r3, #0]
 800de02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	b29b      	uxth	r3, r3
 800de08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de10:	b29a      	uxth	r2, r3
 800de12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de14:	801a      	strh	r2, [r3, #0]
 800de16:	e05d      	b.n	800ded4 <USB_EPStartXfer+0x9bc>
 800de18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de1c:	2b3e      	cmp	r3, #62	; 0x3e
 800de1e:	d817      	bhi.n	800de50 <USB_EPStartXfer+0x938>
 800de20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de24:	085b      	lsrs	r3, r3, #1
 800de26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de2e:	f003 0301 	and.w	r3, r3, #1
 800de32:	2b00      	cmp	r3, #0
 800de34:	d004      	beq.n	800de40 <USB_EPStartXfer+0x928>
 800de36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de3a:	3301      	adds	r3, #1
 800de3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de44:	b29b      	uxth	r3, r3
 800de46:	029b      	lsls	r3, r3, #10
 800de48:	b29a      	uxth	r2, r3
 800de4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de4c:	801a      	strh	r2, [r3, #0]
 800de4e:	e041      	b.n	800ded4 <USB_EPStartXfer+0x9bc>
 800de50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de54:	095b      	lsrs	r3, r3, #5
 800de56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800de5e:	f003 031f 	and.w	r3, r3, #31
 800de62:	2b00      	cmp	r3, #0
 800de64:	d104      	bne.n	800de70 <USB_EPStartXfer+0x958>
 800de66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de6a:	3b01      	subs	r3, #1
 800de6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800de70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de74:	b29b      	uxth	r3, r3
 800de76:	029b      	lsls	r3, r3, #10
 800de78:	b29b      	uxth	r3, r3
 800de7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de82:	b29a      	uxth	r2, r3
 800de84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de86:	801a      	strh	r2, [r3, #0]
 800de88:	e024      	b.n	800ded4 <USB_EPStartXfer+0x9bc>
 800de8a:	463b      	mov	r3, r7
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	785b      	ldrb	r3, [r3, #1]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d11f      	bne.n	800ded4 <USB_EPStartXfer+0x9bc>
 800de94:	1d3b      	adds	r3, r7, #4
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800de9c:	1d3b      	adds	r3, r7, #4
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	461a      	mov	r2, r3
 800dea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800deac:	4413      	add	r3, r2
 800deae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800deb2:	463b      	mov	r3, r7
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	011a      	lsls	r2, r3, #4
 800deba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800debe:	4413      	add	r3, r2
 800dec0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dec8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800decc:	b29a      	uxth	r2, r3
 800dece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ded2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ded4:	463b      	mov	r3, r7
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	891b      	ldrh	r3, [r3, #8]
 800deda:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dede:	463b      	mov	r3, r7
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	6959      	ldr	r1, [r3, #20]
 800dee4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800dee8:	b29b      	uxth	r3, r3
 800deea:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800deee:	1d38      	adds	r0, r7, #4
 800def0:	6800      	ldr	r0, [r0, #0]
 800def2:	f000 fd74 	bl	800e9de <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800def6:	463b      	mov	r3, r7
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	785b      	ldrb	r3, [r3, #1]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d122      	bne.n	800df46 <USB_EPStartXfer+0xa2e>
 800df00:	1d3b      	adds	r3, r7, #4
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	463b      	mov	r3, r7
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	881b      	ldrh	r3, [r3, #0]
 800df10:	b29b      	uxth	r3, r3
 800df12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df1a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800df1e:	1d3b      	adds	r3, r7, #4
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	463b      	mov	r3, r7
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	441a      	add	r2, r3
 800df2c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800df30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df40:	b29b      	uxth	r3, r3
 800df42:	8013      	strh	r3, [r2, #0]
 800df44:	e026      	b.n	800df94 <USB_EPStartXfer+0xa7c>
 800df46:	463b      	mov	r3, r7
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d121      	bne.n	800df94 <USB_EPStartXfer+0xa7c>
 800df50:	1d3b      	adds	r3, r7, #4
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	463b      	mov	r3, r7
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	b29b      	uxth	r3, r3
 800df62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df6a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800df6e:	1d3b      	adds	r3, r7, #4
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	463b      	mov	r3, r7
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	441a      	add	r2, r3
 800df7c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800df80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df90:	b29b      	uxth	r3, r3
 800df92:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800df94:	1d3b      	adds	r3, r7, #4
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	463b      	mov	r3, r7
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	f107 020e 	add.w	r2, r7, #14
 800dfaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfb2:	8013      	strh	r3, [r2, #0]
 800dfb4:	f107 030e 	add.w	r3, r7, #14
 800dfb8:	f107 020e 	add.w	r2, r7, #14
 800dfbc:	8812      	ldrh	r2, [r2, #0]
 800dfbe:	f082 0210 	eor.w	r2, r2, #16
 800dfc2:	801a      	strh	r2, [r3, #0]
 800dfc4:	f107 030e 	add.w	r3, r7, #14
 800dfc8:	f107 020e 	add.w	r2, r7, #14
 800dfcc:	8812      	ldrh	r2, [r2, #0]
 800dfce:	f082 0220 	eor.w	r2, r2, #32
 800dfd2:	801a      	strh	r2, [r3, #0]
 800dfd4:	1d3b      	adds	r3, r7, #4
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	463b      	mov	r3, r7
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	441a      	add	r2, r3
 800dfe2:	f107 030e 	add.w	r3, r7, #14
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	8013      	strh	r3, [r2, #0]
 800dffc:	e3b5      	b.n	800e76a <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dffe:	463b      	mov	r3, r7
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	7b1b      	ldrb	r3, [r3, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f040 8090 	bne.w	800e12a <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800e00a:	463b      	mov	r3, r7
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	699a      	ldr	r2, [r3, #24]
 800e010:	463b      	mov	r3, r7
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	429a      	cmp	r2, r3
 800e018:	d90e      	bls.n	800e038 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800e01a:	463b      	mov	r3, r7
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800e024:	463b      	mov	r3, r7
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	699a      	ldr	r2, [r3, #24]
 800e02a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e02e:	1ad2      	subs	r2, r2, r3
 800e030:	463b      	mov	r3, r7
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	619a      	str	r2, [r3, #24]
 800e036:	e008      	b.n	800e04a <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800e038:	463b      	mov	r3, r7
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800e042:	463b      	mov	r3, r7
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2200      	movs	r2, #0
 800e048:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e04a:	1d3b      	adds	r3, r7, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e052:	1d3b      	adds	r3, r7, #4
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	461a      	mov	r2, r3
 800e05e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e062:	4413      	add	r3, r2
 800e064:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e068:	463b      	mov	r3, r7
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	011a      	lsls	r2, r3, #4
 800e070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e074:	4413      	add	r3, r2
 800e076:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e07a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e07e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e082:	2b00      	cmp	r3, #0
 800e084:	d116      	bne.n	800e0b4 <USB_EPStartXfer+0xb9c>
 800e086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e092:	b29a      	uxth	r2, r3
 800e094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e098:	801a      	strh	r2, [r3, #0]
 800e09a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e09e:	881b      	ldrh	r3, [r3, #0]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0b0:	801a      	strh	r2, [r3, #0]
 800e0b2:	e32c      	b.n	800e70e <USB_EPStartXfer+0x11f6>
 800e0b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0b8:	2b3e      	cmp	r3, #62	; 0x3e
 800e0ba:	d818      	bhi.n	800e0ee <USB_EPStartXfer+0xbd6>
 800e0bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0c0:	085b      	lsrs	r3, r3, #1
 800e0c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d004      	beq.n	800e0dc <USB_EPStartXfer+0xbc4>
 800e0d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	029b      	lsls	r3, r3, #10
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0ea:	801a      	strh	r2, [r3, #0]
 800e0ec:	e30f      	b.n	800e70e <USB_EPStartXfer+0x11f6>
 800e0ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0f2:	095b      	lsrs	r3, r3, #5
 800e0f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e0fc:	f003 031f 	and.w	r3, r3, #31
 800e100:	2b00      	cmp	r3, #0
 800e102:	d104      	bne.n	800e10e <USB_EPStartXfer+0xbf6>
 800e104:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e108:	3b01      	subs	r3, #1
 800e10a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e10e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e112:	b29b      	uxth	r3, r3
 800e114:	029b      	lsls	r3, r3, #10
 800e116:	b29b      	uxth	r3, r3
 800e118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e11c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e120:	b29a      	uxth	r2, r3
 800e122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e126:	801a      	strh	r2, [r3, #0]
 800e128:	e2f1      	b.n	800e70e <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800e12a:	463b      	mov	r3, r7
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	78db      	ldrb	r3, [r3, #3]
 800e130:	2b02      	cmp	r3, #2
 800e132:	f040 818f 	bne.w	800e454 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e136:	463b      	mov	r3, r7
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	785b      	ldrb	r3, [r3, #1]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d175      	bne.n	800e22c <USB_EPStartXfer+0xd14>
 800e140:	1d3b      	adds	r3, r7, #4
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e148:	1d3b      	adds	r3, r7, #4
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e150:	b29b      	uxth	r3, r3
 800e152:	461a      	mov	r2, r3
 800e154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e158:	4413      	add	r3, r2
 800e15a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e15e:	463b      	mov	r3, r7
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	011a      	lsls	r2, r3, #4
 800e166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e16a:	4413      	add	r3, r2
 800e16c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e174:	463b      	mov	r3, r7
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d116      	bne.n	800e1ac <USB_EPStartXfer+0xc94>
 800e17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e182:	881b      	ldrh	r3, [r3, #0]
 800e184:	b29b      	uxth	r3, r3
 800e186:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e190:	801a      	strh	r2, [r3, #0]
 800e192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e19e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1a8:	801a      	strh	r2, [r3, #0]
 800e1aa:	e065      	b.n	800e278 <USB_EPStartXfer+0xd60>
 800e1ac:	463b      	mov	r3, r7
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	691b      	ldr	r3, [r3, #16]
 800e1b2:	2b3e      	cmp	r3, #62	; 0x3e
 800e1b4:	d81a      	bhi.n	800e1ec <USB_EPStartXfer+0xcd4>
 800e1b6:	463b      	mov	r3, r7
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	085b      	lsrs	r3, r3, #1
 800e1be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e1c2:	463b      	mov	r3, r7
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	f003 0301 	and.w	r3, r3, #1
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d004      	beq.n	800e1da <USB_EPStartXfer+0xcc2>
 800e1d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e1da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	029b      	lsls	r3, r3, #10
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1e8:	801a      	strh	r2, [r3, #0]
 800e1ea:	e045      	b.n	800e278 <USB_EPStartXfer+0xd60>
 800e1ec:	463b      	mov	r3, r7
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	095b      	lsrs	r3, r3, #5
 800e1f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e1f8:	463b      	mov	r3, r7
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	691b      	ldr	r3, [r3, #16]
 800e1fe:	f003 031f 	and.w	r3, r3, #31
 800e202:	2b00      	cmp	r3, #0
 800e204:	d104      	bne.n	800e210 <USB_EPStartXfer+0xcf8>
 800e206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e20a:	3b01      	subs	r3, #1
 800e20c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e214:	b29b      	uxth	r3, r3
 800e216:	029b      	lsls	r3, r3, #10
 800e218:	b29b      	uxth	r3, r3
 800e21a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e21e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e222:	b29a      	uxth	r2, r3
 800e224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e228:	801a      	strh	r2, [r3, #0]
 800e22a:	e025      	b.n	800e278 <USB_EPStartXfer+0xd60>
 800e22c:	463b      	mov	r3, r7
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	785b      	ldrb	r3, [r3, #1]
 800e232:	2b01      	cmp	r3, #1
 800e234:	d120      	bne.n	800e278 <USB_EPStartXfer+0xd60>
 800e236:	1d3b      	adds	r3, r7, #4
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e23e:	1d3b      	adds	r3, r7, #4
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e246:	b29b      	uxth	r3, r3
 800e248:	461a      	mov	r2, r3
 800e24a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e24e:	4413      	add	r3, r2
 800e250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e254:	463b      	mov	r3, r7
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	011a      	lsls	r2, r3, #4
 800e25c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e260:	4413      	add	r3, r2
 800e262:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e26a:	463b      	mov	r3, r7
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	b29a      	uxth	r2, r3
 800e272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e276:	801a      	strh	r2, [r3, #0]
 800e278:	1d3b      	adds	r3, r7, #4
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e280:	463b      	mov	r3, r7
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	785b      	ldrb	r3, [r3, #1]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d175      	bne.n	800e376 <USB_EPStartXfer+0xe5e>
 800e28a:	1d3b      	adds	r3, r7, #4
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e292:	1d3b      	adds	r3, r7, #4
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	461a      	mov	r2, r3
 800e29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e2a8:	463b      	mov	r3, r7
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	011a      	lsls	r2, r3, #4
 800e2b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2b4:	4413      	add	r3, r2
 800e2b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e2ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e2be:	463b      	mov	r3, r7
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d116      	bne.n	800e2f6 <USB_EPStartXfer+0xdde>
 800e2c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2da:	801a      	strh	r2, [r3, #0]
 800e2dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2f2:	801a      	strh	r2, [r3, #0]
 800e2f4:	e061      	b.n	800e3ba <USB_EPStartXfer+0xea2>
 800e2f6:	463b      	mov	r3, r7
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	2b3e      	cmp	r3, #62	; 0x3e
 800e2fe:	d81a      	bhi.n	800e336 <USB_EPStartXfer+0xe1e>
 800e300:	463b      	mov	r3, r7
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	085b      	lsrs	r3, r3, #1
 800e308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e30c:	463b      	mov	r3, r7
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	f003 0301 	and.w	r3, r3, #1
 800e316:	2b00      	cmp	r3, #0
 800e318:	d004      	beq.n	800e324 <USB_EPStartXfer+0xe0c>
 800e31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e31e:	3301      	adds	r3, #1
 800e320:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e328:	b29b      	uxth	r3, r3
 800e32a:	029b      	lsls	r3, r3, #10
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e332:	801a      	strh	r2, [r3, #0]
 800e334:	e041      	b.n	800e3ba <USB_EPStartXfer+0xea2>
 800e336:	463b      	mov	r3, r7
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	095b      	lsrs	r3, r3, #5
 800e33e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e342:	463b      	mov	r3, r7
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	691b      	ldr	r3, [r3, #16]
 800e348:	f003 031f 	and.w	r3, r3, #31
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d104      	bne.n	800e35a <USB_EPStartXfer+0xe42>
 800e350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e354:	3b01      	subs	r3, #1
 800e356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e35e:	b29b      	uxth	r3, r3
 800e360:	029b      	lsls	r3, r3, #10
 800e362:	b29b      	uxth	r3, r3
 800e364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e372:	801a      	strh	r2, [r3, #0]
 800e374:	e021      	b.n	800e3ba <USB_EPStartXfer+0xea2>
 800e376:	463b      	mov	r3, r7
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	785b      	ldrb	r3, [r3, #1]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d11c      	bne.n	800e3ba <USB_EPStartXfer+0xea2>
 800e380:	1d3b      	adds	r3, r7, #4
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e388:	b29b      	uxth	r3, r3
 800e38a:	461a      	mov	r2, r3
 800e38c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e390:	4413      	add	r3, r2
 800e392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e396:	463b      	mov	r3, r7
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	011a      	lsls	r2, r3, #4
 800e39e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e3a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e3ac:	463b      	mov	r3, r7
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	b29a      	uxth	r2, r3
 800e3b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e3b8:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800e3ba:	463b      	mov	r3, r7
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 81a4 	beq.w	800e70e <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e3c6:	1d3b      	adds	r3, r7, #4
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	463b      	mov	r3, r7
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	881b      	ldrh	r3, [r3, #0]
 800e3d6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e3da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e3de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d005      	beq.n	800e3f2 <USB_EPStartXfer+0xeda>
 800e3e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10d      	bne.n	800e40e <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e3f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e3f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f040 8187 	bne.w	800e70e <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e400:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f040 8180 	bne.w	800e70e <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800e40e:	1d3b      	adds	r3, r7, #4
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	463b      	mov	r3, r7
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4413      	add	r3, r2
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e428:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800e42c:	1d3b      	adds	r3, r7, #4
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	463b      	mov	r3, r7
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	441a      	add	r2, r3
 800e43a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800e43e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e44a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e44e:	b29b      	uxth	r3, r3
 800e450:	8013      	strh	r3, [r2, #0]
 800e452:	e15c      	b.n	800e70e <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e454:	463b      	mov	r3, r7
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	78db      	ldrb	r3, [r3, #3]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	f040 8155 	bne.w	800e70a <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800e460:	463b      	mov	r3, r7
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	699a      	ldr	r2, [r3, #24]
 800e466:	463b      	mov	r3, r7
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d90e      	bls.n	800e48e <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800e470:	463b      	mov	r3, r7
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800e47a:	463b      	mov	r3, r7
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	699a      	ldr	r2, [r3, #24]
 800e480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e484:	1ad2      	subs	r2, r2, r3
 800e486:	463b      	mov	r3, r7
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	619a      	str	r2, [r3, #24]
 800e48c:	e008      	b.n	800e4a0 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800e48e:	463b      	mov	r3, r7
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800e498:	463b      	mov	r3, r7
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2200      	movs	r2, #0
 800e49e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e4a0:	463b      	mov	r3, r7
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	785b      	ldrb	r3, [r3, #1]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d16f      	bne.n	800e58a <USB_EPStartXfer+0x1072>
 800e4aa:	1d3b      	adds	r3, r7, #4
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4b2:	1d3b      	adds	r3, r7, #4
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	461a      	mov	r2, r3
 800e4be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e4c8:	463b      	mov	r3, r7
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	011a      	lsls	r2, r3, #4
 800e4d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e4d4:	4413      	add	r3, r2
 800e4d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e4da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e4de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d116      	bne.n	800e514 <USB_EPStartXfer+0xffc>
 800e4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e4f8:	801a      	strh	r2, [r3, #0]
 800e4fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	b29b      	uxth	r3, r3
 800e502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e510:	801a      	strh	r2, [r3, #0]
 800e512:	e05f      	b.n	800e5d4 <USB_EPStartXfer+0x10bc>
 800e514:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e518:	2b3e      	cmp	r3, #62	; 0x3e
 800e51a:	d818      	bhi.n	800e54e <USB_EPStartXfer+0x1036>
 800e51c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e520:	085b      	lsrs	r3, r3, #1
 800e522:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d004      	beq.n	800e53c <USB_EPStartXfer+0x1024>
 800e532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e536:	3301      	adds	r3, #1
 800e538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e53c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e540:	b29b      	uxth	r3, r3
 800e542:	029b      	lsls	r3, r3, #10
 800e544:	b29a      	uxth	r2, r3
 800e546:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e54a:	801a      	strh	r2, [r3, #0]
 800e54c:	e042      	b.n	800e5d4 <USB_EPStartXfer+0x10bc>
 800e54e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e552:	095b      	lsrs	r3, r3, #5
 800e554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e55c:	f003 031f 	and.w	r3, r3, #31
 800e560:	2b00      	cmp	r3, #0
 800e562:	d104      	bne.n	800e56e <USB_EPStartXfer+0x1056>
 800e564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e568:	3b01      	subs	r3, #1
 800e56a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e572:	b29b      	uxth	r3, r3
 800e574:	029b      	lsls	r3, r3, #10
 800e576:	b29b      	uxth	r3, r3
 800e578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e57c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e580:	b29a      	uxth	r2, r3
 800e582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e586:	801a      	strh	r2, [r3, #0]
 800e588:	e024      	b.n	800e5d4 <USB_EPStartXfer+0x10bc>
 800e58a:	463b      	mov	r3, r7
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	785b      	ldrb	r3, [r3, #1]
 800e590:	2b01      	cmp	r3, #1
 800e592:	d11f      	bne.n	800e5d4 <USB_EPStartXfer+0x10bc>
 800e594:	1d3b      	adds	r3, r7, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e59c:	1d3b      	adds	r3, r7, #4
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e5b2:	463b      	mov	r3, r7
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	011a      	lsls	r2, r3, #4
 800e5ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5be:	4413      	add	r3, r2
 800e5c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e5c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e5c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5d2:	801a      	strh	r2, [r3, #0]
 800e5d4:	1d3b      	adds	r3, r7, #4
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5dc:	463b      	mov	r3, r7
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	785b      	ldrb	r3, [r3, #1]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d16f      	bne.n	800e6c6 <USB_EPStartXfer+0x11ae>
 800e5e6:	1d3b      	adds	r3, r7, #4
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e5ee:	1d3b      	adds	r3, r7, #4
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e5fe:	4413      	add	r3, r2
 800e600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e604:	463b      	mov	r3, r7
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	011a      	lsls	r2, r3, #4
 800e60c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e610:	4413      	add	r3, r2
 800e612:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e61a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d116      	bne.n	800e650 <USB_EPStartXfer+0x1138>
 800e622:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e626:	881b      	ldrh	r3, [r3, #0]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e62e:	b29a      	uxth	r2, r3
 800e630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e634:	801a      	strh	r2, [r3, #0]
 800e636:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e646:	b29a      	uxth	r2, r3
 800e648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e64c:	801a      	strh	r2, [r3, #0]
 800e64e:	e05e      	b.n	800e70e <USB_EPStartXfer+0x11f6>
 800e650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e654:	2b3e      	cmp	r3, #62	; 0x3e
 800e656:	d818      	bhi.n	800e68a <USB_EPStartXfer+0x1172>
 800e658:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e65c:	085b      	lsrs	r3, r3, #1
 800e65e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e662:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d004      	beq.n	800e678 <USB_EPStartXfer+0x1160>
 800e66e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e672:	3301      	adds	r3, #1
 800e674:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	029b      	lsls	r3, r3, #10
 800e680:	b29a      	uxth	r2, r3
 800e682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e686:	801a      	strh	r2, [r3, #0]
 800e688:	e041      	b.n	800e70e <USB_EPStartXfer+0x11f6>
 800e68a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e68e:	095b      	lsrs	r3, r3, #5
 800e690:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e694:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e698:	f003 031f 	and.w	r3, r3, #31
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d104      	bne.n	800e6aa <USB_EPStartXfer+0x1192>
 800e6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e6aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	029b      	lsls	r3, r3, #10
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e6c2:	801a      	strh	r2, [r3, #0]
 800e6c4:	e023      	b.n	800e70e <USB_EPStartXfer+0x11f6>
 800e6c6:	463b      	mov	r3, r7
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	785b      	ldrb	r3, [r3, #1]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d11e      	bne.n	800e70e <USB_EPStartXfer+0x11f6>
 800e6d0:	1d3b      	adds	r3, r7, #4
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	461a      	mov	r2, r3
 800e6dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6e0:	4413      	add	r3, r2
 800e6e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6e6:	463b      	mov	r3, r7
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	011a      	lsls	r2, r3, #4
 800e6ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6f2:	4413      	add	r3, r2
 800e6f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e6f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e6fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800e700:	b29a      	uxth	r2, r3
 800e702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e706:	801a      	strh	r2, [r3, #0]
 800e708:	e001      	b.n	800e70e <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e02e      	b.n	800e76c <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e70e:	1d3b      	adds	r3, r7, #4
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	463b      	mov	r3, r7
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	b29b      	uxth	r3, r3
 800e720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e728:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e72c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e734:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e738:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e73c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e740:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800e744:	1d3b      	adds	r3, r7, #4
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	463b      	mov	r3, r7
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	441a      	add	r2, r3
 800e752:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e75a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e75e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e766:	b29b      	uxth	r3, r3
 800e768:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e76a:	2300      	movs	r3, #0
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	785b      	ldrb	r3, [r3, #1]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d020      	beq.n	800e7ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	4413      	add	r3, r2
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	b29b      	uxth	r3, r3
 800e796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e79e:	81bb      	strh	r3, [r7, #12]
 800e7a0:	89bb      	ldrh	r3, [r7, #12]
 800e7a2:	f083 0310 	eor.w	r3, r3, #16
 800e7a6:	81bb      	strh	r3, [r7, #12]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	441a      	add	r2, r3
 800e7b2:	89bb      	ldrh	r3, [r7, #12]
 800e7b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	8013      	strh	r3, [r2, #0]
 800e7c8:	e01f      	b.n	800e80a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	4413      	add	r3, r2
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7e0:	81fb      	strh	r3, [r7, #14]
 800e7e2:	89fb      	ldrh	r3, [r7, #14]
 800e7e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e7e8:	81fb      	strh	r3, [r7, #14]
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	441a      	add	r2, r3
 800e7f4:	89fb      	ldrh	r3, [r7, #14]
 800e7f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e806:	b29b      	uxth	r3, r3
 800e808:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	bc80      	pop	{r7}
 800e814:	4770      	bx	lr

0800e816 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e816:	b480      	push	{r7}
 800e818:	b087      	sub	sp, #28
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
 800e81e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	7b1b      	ldrb	r3, [r3, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	f040 809d 	bne.w	800e964 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	785b      	ldrb	r3, [r3, #1]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d04c      	beq.n	800e8cc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	881b      	ldrh	r3, [r3, #0]
 800e83e:	823b      	strh	r3, [r7, #16]
 800e840:	8a3b      	ldrh	r3, [r7, #16]
 800e842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e846:	2b00      	cmp	r3, #0
 800e848:	d01b      	beq.n	800e882 <USB_EPClearStall+0x6c>
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	4413      	add	r3, r2
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	b29b      	uxth	r3, r3
 800e858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e860:	81fb      	strh	r3, [r7, #14]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	441a      	add	r2, r3
 800e86c:	89fb      	ldrh	r3, [r7, #14]
 800e86e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e87a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e87e:	b29b      	uxth	r3, r3
 800e880:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	78db      	ldrb	r3, [r3, #3]
 800e886:	2b01      	cmp	r3, #1
 800e888:	d06c      	beq.n	800e964 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	4413      	add	r3, r2
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	b29b      	uxth	r3, r3
 800e898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e89c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8a0:	81bb      	strh	r3, [r7, #12]
 800e8a2:	89bb      	ldrh	r3, [r7, #12]
 800e8a4:	f083 0320 	eor.w	r3, r3, #32
 800e8a8:	81bb      	strh	r3, [r7, #12]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	441a      	add	r2, r3
 800e8b4:	89bb      	ldrh	r3, [r7, #12]
 800e8b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	8013      	strh	r3, [r2, #0]
 800e8ca:	e04b      	b.n	800e964 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	4413      	add	r3, r2
 800e8d6:	881b      	ldrh	r3, [r3, #0]
 800e8d8:	82fb      	strh	r3, [r7, #22]
 800e8da:	8afb      	ldrh	r3, [r7, #22]
 800e8dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d01b      	beq.n	800e91c <USB_EPClearStall+0x106>
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	4413      	add	r3, r2
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8fa:	82bb      	strh	r3, [r7, #20]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	441a      	add	r2, r3
 800e906:	8abb      	ldrh	r3, [r7, #20]
 800e908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e90c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e918:	b29b      	uxth	r3, r3
 800e91a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	4413      	add	r3, r2
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	b29b      	uxth	r3, r3
 800e92a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e932:	827b      	strh	r3, [r7, #18]
 800e934:	8a7b      	ldrh	r3, [r7, #18]
 800e936:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e93a:	827b      	strh	r3, [r7, #18]
 800e93c:	8a7b      	ldrh	r3, [r7, #18]
 800e93e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e942:	827b      	strh	r3, [r7, #18]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	441a      	add	r2, r3
 800e94e:	8a7b      	ldrh	r3, [r7, #18]
 800e950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e960:	b29b      	uxth	r3, r3
 800e962:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bc80      	pop	{r7}
 800e96e:	4770      	bx	lr

0800e970 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e97c:	78fb      	ldrb	r3, [r7, #3]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d103      	bne.n	800e98a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2280      	movs	r2, #128	; 0x80
 800e986:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	bc80      	pop	{r7}
 800e994:	4770      	bx	lr

0800e996 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e996:	b480      	push	{r7}
 800e998:	b083      	sub	sp, #12
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bc80      	pop	{r7}
 800e9a8:	4770      	bx	lr

0800e9aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bc80      	pop	{r7}
 800e9c6:	4770      	bx	lr

0800e9c8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bc80      	pop	{r7}
 800e9dc:	4770      	bx	lr

0800e9de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b08d      	sub	sp, #52	; 0x34
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	60f8      	str	r0, [r7, #12]
 800e9e6:	60b9      	str	r1, [r7, #8]
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	80fb      	strh	r3, [r7, #6]
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e9f4:	88bb      	ldrh	r3, [r7, #4]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	085b      	lsrs	r3, r3, #1
 800e9fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea04:	88fb      	ldrh	r3, [r7, #6]
 800ea06:	005a      	lsls	r2, r3, #1
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea10:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea16:	e01e      	b.n	800ea56 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	3301      	adds	r3, #1
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	021b      	lsls	r3, r3, #8
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	461a      	mov	r2, r3
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	4313      	orrs	r3, r2
 800ea34:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	3302      	adds	r3, #2
 800ea42:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	3302      	adds	r3, #2
 800ea48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ea50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea52:	3b01      	subs	r3, #1
 800ea54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1dd      	bne.n	800ea18 <USB_WritePMA+0x3a>
  }
}
 800ea5c:	bf00      	nop
 800ea5e:	3734      	adds	r7, #52	; 0x34
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bc80      	pop	{r7}
 800ea64:	4770      	bx	lr

0800ea66 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ea66:	b480      	push	{r7}
 800ea68:	b08b      	sub	sp, #44	; 0x2c
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	60f8      	str	r0, [r7, #12]
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	4611      	mov	r1, r2
 800ea72:	461a      	mov	r2, r3
 800ea74:	460b      	mov	r3, r1
 800ea76:	80fb      	strh	r3, [r7, #6]
 800ea78:	4613      	mov	r3, r2
 800ea7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ea7c:	88bb      	ldrh	r3, [r7, #4]
 800ea7e:	085b      	lsrs	r3, r3, #1
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea8c:	88fb      	ldrh	r3, [r7, #6]
 800ea8e:	005a      	lsls	r2, r3, #1
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	4413      	add	r3, r2
 800ea94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea98:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ea9e:	e01b      	b.n	800ead8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800eaa0:	6a3b      	ldr	r3, [r7, #32]
 800eaa2:	881b      	ldrh	r3, [r3, #0]
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800eaa8:	6a3b      	ldr	r3, [r7, #32]
 800eaaa:	3302      	adds	r3, #2
 800eaac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	3301      	adds	r3, #1
 800eaba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	0a1b      	lsrs	r3, r3, #8
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	3301      	adds	r3, #1
 800eaca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800eacc:	6a3b      	ldr	r3, [r7, #32]
 800eace:	3302      	adds	r3, #2
 800ead0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead4:	3b01      	subs	r3, #1
 800ead6:	627b      	str	r3, [r7, #36]	; 0x24
 800ead8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1e0      	bne.n	800eaa0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800eade:	88bb      	ldrh	r3, [r7, #4]
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d007      	beq.n	800eafa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	701a      	strb	r2, [r3, #0]
  }
}
 800eafa:	bf00      	nop
 800eafc:	372c      	adds	r7, #44	; 0x2c
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bc80      	pop	{r7}
 800eb02:	4770      	bx	lr

0800eb04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800eb08:	4904      	ldr	r1, [pc, #16]	; (800eb1c <MX_FATFS_Init+0x18>)
 800eb0a:	4805      	ldr	r0, [pc, #20]	; (800eb20 <MX_FATFS_Init+0x1c>)
 800eb0c:	f002 faca 	bl	80110a4 <FATFS_LinkDriver>
 800eb10:	4603      	mov	r3, r0
 800eb12:	461a      	mov	r2, r3
 800eb14:	4b03      	ldr	r3, [pc, #12]	; (800eb24 <MX_FATFS_Init+0x20>)
 800eb16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eb18:	bf00      	nop
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	200091f8 	.word	0x200091f8
 800eb20:	2000001c 	.word	0x2000001c
 800eb24:	200091fc 	.word	0x200091fc

0800eb28 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800eb32:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <USER_initialize+0x20>)
 800eb34:	2201      	movs	r2, #1
 800eb36:	701a      	strb	r2, [r3, #0]
    return Stat;
 800eb38:	4b03      	ldr	r3, [pc, #12]	; (800eb48 <USER_initialize+0x20>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bc80      	pop	{r7}
 800eb46:	4770      	bx	lr
 800eb48:	20000018 	.word	0x20000018

0800eb4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800eb56:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <USER_status+0x20>)
 800eb58:	2201      	movs	r2, #1
 800eb5a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800eb5c:	4b03      	ldr	r3, [pc, #12]	; (800eb6c <USER_status+0x20>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bc80      	pop	{r7}
 800eb6a:	4770      	bx	lr
 800eb6c:	20000018 	.word	0x20000018

0800eb70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60b9      	str	r1, [r7, #8]
 800eb78:	607a      	str	r2, [r7, #4]
 800eb7a:	603b      	str	r3, [r7, #0]
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800eb80:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3714      	adds	r7, #20
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bc80      	pop	{r7}
 800eb8a:	4770      	bx	lr

0800eb8c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60b9      	str	r1, [r7, #8]
 800eb94:	607a      	str	r2, [r7, #4]
 800eb96:	603b      	str	r3, [r7, #0]
 800eb98:	4603      	mov	r3, r0
 800eb9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800eb9c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bc80      	pop	{r7}
 800eba6:	4770      	bx	lr

0800eba8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	4603      	mov	r3, r0
 800ebb0:	603a      	str	r2, [r7, #0]
 800ebb2:	71fb      	strb	r3, [r7, #7]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	73fb      	strb	r3, [r7, #15]
    return res;
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bc80      	pop	{r7}
 800ebc6:	4770      	bx	lr

0800ebc8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	70fb      	strb	r3, [r7, #3]
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	7c1b      	ldrb	r3, [r3, #16]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d115      	bne.n	800ec08 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ebdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebe0:	2202      	movs	r2, #2
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f005 ffa4 	bl	8014b32 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2201      	movs	r2, #1
 800ebee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ebf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebf6:	2202      	movs	r2, #2
 800ebf8:	2181      	movs	r1, #129	; 0x81
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f005 ff99 	bl	8014b32 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec06:	e012      	b.n	800ec2e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ec08:	2340      	movs	r3, #64	; 0x40
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	2101      	movs	r1, #1
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f005 ff8f 	bl	8014b32 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ec1c:	2340      	movs	r3, #64	; 0x40
 800ec1e:	2202      	movs	r2, #2
 800ec20:	2181      	movs	r1, #129	; 0x81
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f005 ff85 	bl	8014b32 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800ec2e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800ec32:	f006 f8c5 	bl	8014dc0 <USBD_static_malloc>
 800ec36:	4602      	mov	r2, r0
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d101      	bne.n	800ec4c <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 800ec48:	2302      	movs	r3, #2
 800ec4a:	e003      	b.n	800ec54 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f9d9 	bl	800f004 <MSC_BOT_Init>

  return USBD_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	460b      	mov	r3, r1
 800ec66:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ec68:	2101      	movs	r1, #1
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f005 ff87 	bl	8014b7e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ec78:	2181      	movs	r1, #129	; 0x81
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f005 ff7f 	bl	8014b7e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fa06 	bl	800f098 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d009      	beq.n	800ecaa <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f006 f89b 	bl	8014dd8 <USBD_static_free>
    pdev->pClassData  = NULL;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ecc4:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ecca:	2300      	movs	r3, #0
 800eccc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d04d      	beq.n	800ed76 <USBD_MSC_Setup+0xc2>
 800ecda:	2b20      	cmp	r3, #32
 800ecdc:	f040 8113 	bne.w	800ef06 <USBD_MSC_Setup+0x252>
  {

    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	785b      	ldrb	r3, [r3, #1]
 800ece4:	2bfe      	cmp	r3, #254	; 0xfe
 800ece6:	d002      	beq.n	800ecee <USBD_MSC_Setup+0x3a>
 800ece8:	2bff      	cmp	r3, #255	; 0xff
 800ecea:	d024      	beq.n	800ed36 <USBD_MSC_Setup+0x82>
 800ecec:	e03b      	b.n	800ed66 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	885b      	ldrh	r3, [r3, #2]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d118      	bne.n	800ed28 <USBD_MSC_Setup+0x74>
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	88db      	ldrh	r3, [r3, #6]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d114      	bne.n	800ed28 <USBD_MSC_Setup+0x74>
         ((req->bmRequest & 0x80U) == 0x80U))
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	da0f      	bge.n	800ed28 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed0e:	699b      	ldr	r3, [r3, #24]
 800ed10:	4798      	blx	r3
 800ed12:	4603      	mov	r3, r0
 800ed14:	461a      	mov	r2, r3
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f002 f90f 	bl	8010f44 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ed26:	e025      	b.n	800ed74 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f002 f8a0 	bl	8010e70 <USBD_CtlError>
        ret = USBD_FAIL;
 800ed30:	2302      	movs	r3, #2
 800ed32:	75fb      	strb	r3, [r7, #23]
      break;
 800ed34:	e01e      	b.n	800ed74 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	885b      	ldrh	r3, [r3, #2]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10c      	bne.n	800ed58 <USBD_MSC_Setup+0xa4>
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	88db      	ldrh	r3, [r3, #6]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d108      	bne.n	800ed58 <USBD_MSC_Setup+0xa4>
         ((req->bmRequest & 0x80U) != 0x80U))
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	db03      	blt.n	800ed58 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 f987 	bl	800f064 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev , req);
        ret = USBD_FAIL;
      }
      break;
 800ed56:	e00d      	b.n	800ed74 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev , req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f002 f888 	bl	8010e70 <USBD_CtlError>
        ret = USBD_FAIL;
 800ed60:	2302      	movs	r3, #2
 800ed62:	75fb      	strb	r3, [r7, #23]
      break;
 800ed64:	e006      	b.n	800ed74 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev , req);
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f002 f881 	bl	8010e70 <USBD_CtlError>
      ret = USBD_FAIL;
 800ed6e:	2302      	movs	r3, #2
 800ed70:	75fb      	strb	r3, [r7, #23]
      break;
 800ed72:	bf00      	nop
    }
    break;
 800ed74:	e0ce      	b.n	800ef14 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	785b      	ldrb	r3, [r3, #1]
 800ed7a:	2b0b      	cmp	r3, #11
 800ed7c:	f200 80bb 	bhi.w	800eef6 <USBD_MSC_Setup+0x242>
 800ed80:	a201      	add	r2, pc, #4	; (adr r2, 800ed88 <USBD_MSC_Setup+0xd4>)
 800ed82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed86:	bf00      	nop
 800ed88:	0800edb9 	.word	0x0800edb9
 800ed8c:	0800ee2f 	.word	0x0800ee2f
 800ed90:	0800eef7 	.word	0x0800eef7
 800ed94:	0800eef7 	.word	0x0800eef7
 800ed98:	0800eef7 	.word	0x0800eef7
 800ed9c:	0800eef7 	.word	0x0800eef7
 800eda0:	0800eef7 	.word	0x0800eef7
 800eda4:	0800eef7 	.word	0x0800eef7
 800eda8:	0800eef7 	.word	0x0800eef7
 800edac:	0800eef7 	.word	0x0800eef7
 800edb0:	0800ede1 	.word	0x0800ede1
 800edb4:	0800ee09 	.word	0x0800ee09
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800edbe:	2b03      	cmp	r3, #3
 800edc0:	d107      	bne.n	800edd2 <USBD_MSC_Setup+0x11e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800edc2:	f107 030e 	add.w	r3, r7, #14
 800edc6:	2202      	movs	r2, #2
 800edc8:	4619      	mov	r1, r3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f002 f8ba 	bl	8010f44 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800edd0:	e098      	b.n	800ef04 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f002 f84b 	bl	8010e70 <USBD_CtlError>
        ret = USBD_FAIL;
 800edda:	2302      	movs	r3, #2
 800eddc:	75fb      	strb	r3, [r7, #23]
      break;
 800edde:	e091      	b.n	800ef04 <USBD_MSC_Setup+0x250>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ede6:	2b03      	cmp	r3, #3
 800ede8:	d107      	bne.n	800edfa <USBD_MSC_Setup+0x146>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	3304      	adds	r3, #4
 800edee:	2201      	movs	r2, #1
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f002 f8a6 	bl	8010f44 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800edf8:	e084      	b.n	800ef04 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800edfa:	6839      	ldr	r1, [r7, #0]
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f002 f837 	bl	8010e70 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee02:	2302      	movs	r3, #2
 800ee04:	75fb      	strb	r3, [r7, #23]
      break;
 800ee06:	e07d      	b.n	800ef04 <USBD_MSC_Setup+0x250>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ee0e:	2b03      	cmp	r3, #3
 800ee10:	d106      	bne.n	800ee20 <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	885b      	ldrh	r3, [r3, #2]
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	461a      	mov	r2, r3
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ee1e:	e071      	b.n	800ef04 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800ee20:	6839      	ldr	r1, [r7, #0]
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f002 f824 	bl	8010e70 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee28:	2302      	movs	r3, #2
 800ee2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ee2c:	e06a      	b.n	800ef04 <USBD_MSC_Setup+0x250>

    case USB_REQ_CLEAR_FEATURE:

      /* Flush the FIFO and Clear the stall status */
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	889b      	ldrh	r3, [r3, #4]
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f005 fec0 	bl	8014bbc <USBD_LL_FlushEP>

      /* Reactivate the EP */
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	889b      	ldrh	r3, [r3, #4]
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	4619      	mov	r1, r3
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f005 fe9a 	bl	8014b7e <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	889b      	ldrh	r3, [r3, #4]
 800ee4e:	b25b      	sxtb	r3, r3
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	da23      	bge.n	800ee9c <USBD_MSC_Setup+0x1e8>
      {
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	889b      	ldrh	r3, [r3, #4]
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	f003 020f 	and.w	r2, r3, #15
 800ee5e:	6879      	ldr	r1, [r7, #4]
 800ee60:	4613      	mov	r3, r2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	4413      	add	r3, r2
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	440b      	add	r3, r1
 800ee6a:	3318      	adds	r3, #24
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	7c1b      	ldrb	r3, [r3, #16]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d107      	bne.n	800ee88 <USBD_MSC_Setup+0x1d4>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ee78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	2181      	movs	r1, #129	; 0x81
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f005 fe56 	bl	8014b32 <USBD_LL_OpenEP>
 800ee86:	e005      	b.n	800ee94 <USBD_MSC_Setup+0x1e0>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ee88:	2340      	movs	r3, #64	; 0x40
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	2181      	movs	r1, #129	; 0x81
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f005 fe4f 	bl	8014b32 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2201      	movs	r2, #1
 800ee98:	62da      	str	r2, [r3, #44]	; 0x2c
 800ee9a:	e024      	b.n	800eee6 <USBD_MSC_Setup+0x232>
      }
      else
      {
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	889b      	ldrh	r3, [r3, #4]
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	f003 020f 	and.w	r2, r3, #15
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	440b      	add	r3, r1
 800eeb2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	7c1b      	ldrb	r3, [r3, #16]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d107      	bne.n	800eed2 <USBD_MSC_Setup+0x21e>
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800eec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eec6:	2202      	movs	r2, #2
 800eec8:	2101      	movs	r1, #1
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f005 fe31 	bl	8014b32 <USBD_LL_OpenEP>
 800eed0:	e005      	b.n	800eede <USBD_MSC_Setup+0x22a>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800eed2:	2340      	movs	r3, #64	; 0x40
 800eed4:	2202      	movs	r2, #2
 800eed6:	2101      	movs	r1, #1
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f005 fe2a 	bl	8014b32 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      }

      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	889b      	ldrh	r3, [r3, #4]
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fa50 	bl	800f394 <MSC_BOT_CplClrFeature>
      break;
 800eef4:	e006      	b.n	800ef04 <USBD_MSC_Setup+0x250>

    default:
      USBD_CtlError (pdev, req);
 800eef6:	6839      	ldr	r1, [r7, #0]
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f001 ffb9 	bl	8010e70 <USBD_CtlError>
      ret = USBD_FAIL;
 800eefe:	2302      	movs	r3, #2
 800ef00:	75fb      	strb	r3, [r7, #23]
      break;
 800ef02:	bf00      	nop
    }
    break;
 800ef04:	e006      	b.n	800ef14 <USBD_MSC_Setup+0x260>

  default:
    USBD_CtlError (pdev, req);
 800ef06:	6839      	ldr	r1, [r7, #0]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f001 ffb1 	bl	8010e70 <USBD_CtlError>
    ret = USBD_FAIL;
 800ef0e:	2302      	movs	r3, #2
 800ef10:	75fb      	strb	r3, [r7, #23]
    break;
 800ef12:	bf00      	nop
  }

  return ret;
 800ef14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3718      	adds	r7, #24
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop

0800ef20 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800ef2c:	78fb      	ldrb	r3, [r7, #3]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 f8c1 	bl	800f0b8 <MSC_BOT_DataIn>
  return USBD_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800ef4c:	78fb      	ldrb	r3, [r7, #3]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f000 f8e2 	bl	800f11a <MSC_BOT_DataOut>
  return USBD_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2220      	movs	r2, #32
 800ef6c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800ef6e:	4b03      	ldr	r3, [pc, #12]	; (800ef7c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bc80      	pop	{r7}
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	20000068 	.word	0x20000068

0800ef80 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2220      	movs	r2, #32
 800ef8c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800ef8e:	4b03      	ldr	r3, [pc, #12]	; (800ef9c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bc80      	pop	{r7}
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	20000088 	.word	0x20000088

0800efa0 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2220      	movs	r2, #32
 800efac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800efae:	4b03      	ldr	r3, [pc, #12]	; (800efbc <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bc80      	pop	{r7}
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	200000a8 	.word	0x200000a8

0800efc0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	220a      	movs	r2, #10
 800efcc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800efce:	4b03      	ldr	r3, [pc, #12]	; (800efdc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bc80      	pop	{r7}
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	200000c8 	.word	0x200000c8

0800efe0 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d003      	beq.n	800eff8 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	683a      	ldr	r2, [r7, #0]
 800eff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	370c      	adds	r7, #12
 800effe:	46bd      	mov	sp, r7
 800f000:	bc80      	pop	{r7}
 800f002:	4770      	bx	lr

0800f004 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f012:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2000      	movs	r0, #0
 800f03a:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800f03c:	2101      	movs	r1, #1
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f005 fdbc 	bl	8014bbc <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800f044:	2181      	movs	r1, #129	; 0x81
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f005 fdb8 	bl	8014bbc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f052:	231f      	movs	r3, #31
 800f054:	2101      	movs	r1, #1
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f005 fe7b 	bl	8014d52 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800f05c:	bf00      	nop
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f072:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2201      	movs	r2, #1
 800f07e:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f086:	231f      	movs	r3, #31
 800f088:	2101      	movs	r1, #1
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f005 fe61 	bl	8014d52 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800f090:	bf00      	nop
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f0a6:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	721a      	strb	r2, [r3, #8]
}
 800f0ae:	bf00      	nop
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bc80      	pop	{r7}
 800f0b6:	4770      	bx	lr

0800f0b8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f0ca:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	7a1b      	ldrb	r3, [r3, #8]
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d004      	beq.n	800f0de <MSC_BOT_DataIn+0x26>
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	db19      	blt.n	800f10c <MSC_BOT_DataIn+0x54>
 800f0d8:	2b04      	cmp	r3, #4
 800f0da:	dc17      	bgt.n	800f10c <MSC_BOT_DataIn+0x54>
 800f0dc:	e011      	b.n	800f102 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 f979 	bl	800f3e4 <SCSI_ProcessCmd>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	da0b      	bge.n	800f110 <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f0f8:	2101      	movs	r1, #1
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 f8f0 	bl	800f2e0 <MSC_BOT_SendCSW>
    }
    break;
 800f100:	e006      	b.n	800f110 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800f102:	2100      	movs	r1, #0
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 f8eb 	bl	800f2e0 <MSC_BOT_SendCSW>

    break;
 800f10a:	e002      	b.n	800f112 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800f10c:	bf00      	nop
 800f10e:	e000      	b.n	800f112 <MSC_BOT_DataIn+0x5a>
    break;
 800f110:	bf00      	nop
  }
}
 800f112:	bf00      	nop
 800f114:	3710      	adds	r7, #16
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev,
                      uint8_t epnum)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b084      	sub	sp, #16
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
 800f122:	460b      	mov	r3, r1
 800f124:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f12c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	7a1b      	ldrb	r3, [r3, #8]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <MSC_BOT_DataOut+0x22>
 800f136:	2b01      	cmp	r3, #1
 800f138:	d004      	beq.n	800f144 <MSC_BOT_DataOut+0x2a>
    }

    break;

  default:
    break;
 800f13a:	e015      	b.n	800f168 <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 f817 	bl	800f170 <MSC_BOT_CBW_Decode>
    break;
 800f142:	e011      	b.n	800f168 <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f150:	461a      	mov	r2, r3
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f946 	bl	800f3e4 <SCSI_ProcessCmd>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	da03      	bge.n	800f166 <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f15e:	2101      	movs	r1, #1
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f8bd 	bl	800f2e0 <MSC_BOT_SendCSW>
    break;
 800f166:	bf00      	nop
  }
}
 800f168:	bf00      	nop
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f17e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f198:	2101      	movs	r1, #1
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f005 fdfc 	bl	8014d98 <USBD_LL_GetRxDataSize>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b1f      	cmp	r3, #31
 800f1a4:	d114      	bne.n	800f1d0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f1ac:	4a32      	ldr	r2, [pc, #200]	; (800f278 <MSC_BOT_CBW_Decode+0x108>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d10e      	bne.n	800f1d0 <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1U) ||
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d809      	bhi.n	800f1d0 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1U) ||
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d004      	beq.n	800f1d0 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800f1cc:	2b10      	cmp	r3, #16
 800f1ce:	d90e      	bls.n	800f1ee <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f1d6:	2320      	movs	r3, #32
 800f1d8:	2205      	movs	r2, #5
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fc48 	bl	800fa70 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2202      	movs	r2, #2
 800f1e4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f8a6 	bl	800f338 <MSC_BOT_Abort>
 800f1ec:	e041      	b.n	800f272 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f8f1 	bl	800f3e4 <SCSI_ProcessCmd>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	da0c      	bge.n	800f222 <MSC_BOT_CBW_Decode+0xb2>
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	7a1b      	ldrb	r3, [r3, #8]
 800f20c:	2b05      	cmp	r3, #5
 800f20e:	d104      	bne.n	800f21a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f210:	2101      	movs	r1, #1
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f864 	bl	800f2e0 <MSC_BOT_SendCSW>
 800f218:	e02b      	b.n	800f272 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 f88c 	bl	800f338 <MSC_BOT_Abort>
 800f220:	e027      	b.n	800f272 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	7a1b      	ldrb	r3, [r3, #8]
 800f226:	2b02      	cmp	r3, #2
 800f228:	d022      	beq.n	800f270 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d01e      	beq.n	800f270 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f236:	2b03      	cmp	r3, #3
 800f238:	d01a      	beq.n	800f270 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	895b      	ldrh	r3, [r3, #10]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d009      	beq.n	800f256 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f103 010c 	add.w	r1, r3, #12
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	895b      	ldrh	r3, [r3, #10]
 800f24c:	461a      	mov	r2, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 f814 	bl	800f27c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800f254:	e00d      	b.n	800f272 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	895b      	ldrh	r3, [r3, #10]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d104      	bne.n	800f268 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800f25e:	2100      	movs	r1, #0
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 f83d 	bl	800f2e0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800f266:	e004      	b.n	800f272 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f865 	bl	800f338 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800f26e:	e000      	b.n	800f272 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800f270:	bf00      	nop
    }
  }
}
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	43425355 	.word	0x43425355

0800f27c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t* pbuf,
                              uint16_t len)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	4613      	mov	r3, r2
 800f288:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f290:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f298:	88fb      	ldrh	r3, [r7, #6]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d204      	bcs.n	800f2a8 <MSC_BOT_SendData+0x2c>
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	e000      	b.n	800f2aa <MSC_BOT_SendData+0x2e>
 800f2a8:	88fb      	ldrh	r3, [r7, #6]
 800f2aa:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800f2b2:	88fb      	ldrh	r3, [r7, #6]
 800f2b4:	1ad2      	subs	r2, r2, r3
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	2204      	movs	r2, #4
 800f2c8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800f2ca:	8a7b      	ldrh	r3, [r7, #18]
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	2181      	movs	r1, #129	; 0x81
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f005 fd1b 	bl	8014d0c <USBD_LL_Transmit>
}
 800f2d6:	bf00      	nop
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
	...

0800f2e0 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f2f2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	4a0f      	ldr	r2, [pc, #60]	; (800f334 <MSC_BOT_SendCSW+0x54>)
 800f2f8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	78fa      	ldrb	r2, [r7, #3]
 800f300:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800f310:	230d      	movs	r3, #13
 800f312:	2181      	movs	r1, #129	; 0x81
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f005 fcf9 	bl	8014d0c <USBD_LL_Transmit>
                    USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f320:	231f      	movs	r3, #31
 800f322:	2101      	movs	r1, #1
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f005 fd14 	bl	8014d52 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800f32a:	bf00      	nop
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	53425355 	.word	0x53425355

0800f338 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f346:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10c      	bne.n	800f36c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800f360:	2b00      	cmp	r3, #0
 800f362:	d103      	bne.n	800f36c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800f364:	2101      	movs	r1, #1
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f005 fc47 	bl	8014bfa <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f36c:	2181      	movs	r1, #129	; 0x81
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f005 fc43 	bl	8014bfa <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	7a5b      	ldrb	r3, [r3, #9]
 800f378:	2b02      	cmp	r3, #2
 800f37a:	d107      	bne.n	800f38c <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f382:	231f      	movs	r3, #31
 800f384:	2101      	movs	r1, #1
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f005 fce3 	bl	8014d52 <USBD_LL_PrepareReceive>
                            USBD_BOT_CBW_LENGTH);
  }
}
 800f38c:	bf00      	nop
 800f38e:	3710      	adds	r7, #16
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f3a6:	60fb      	str	r3, [r7, #12]

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	7a5b      	ldrb	r3, [r3, #9]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d107      	bne.n	800f3c0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f3b0:	2181      	movs	r1, #129	; 0x81
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f005 fc21 	bl	8014bfa <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	725a      	strb	r2, [r3, #9]
 800f3be:	e00d      	b.n	800f3dc <MSC_BOT_CplClrFeature+0x48>
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800f3c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	da08      	bge.n	800f3da <MSC_BOT_CplClrFeature+0x46>
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	7a5b      	ldrb	r3, [r3, #9]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d004      	beq.n	800f3da <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800f3d0:	2101      	movs	r1, #1
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f7ff ff84 	bl	800f2e0 <MSC_BOT_SendCSW>
 800f3d8:	e000      	b.n	800f3dc <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800f3da:	bf00      	nop
  }
}
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
	...

0800f3e4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	2b5a      	cmp	r3, #90	; 0x5a
 800f3f8:	f200 810e 	bhi.w	800f618 <SCSI_ProcessCmd+0x234>
 800f3fc:	a201      	add	r2, pc, #4	; (adr r2, 800f404 <SCSI_ProcessCmd+0x20>)
 800f3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f402:	bf00      	nop
 800f404:	0800f571 	.word	0x0800f571
 800f408:	0800f619 	.word	0x0800f619
 800f40c:	0800f619 	.word	0x0800f619
 800f410:	0800f57f 	.word	0x0800f57f
 800f414:	0800f619 	.word	0x0800f619
 800f418:	0800f619 	.word	0x0800f619
 800f41c:	0800f619 	.word	0x0800f619
 800f420:	0800f619 	.word	0x0800f619
 800f424:	0800f619 	.word	0x0800f619
 800f428:	0800f619 	.word	0x0800f619
 800f42c:	0800f619 	.word	0x0800f619
 800f430:	0800f619 	.word	0x0800f619
 800f434:	0800f619 	.word	0x0800f619
 800f438:	0800f619 	.word	0x0800f619
 800f43c:	0800f619 	.word	0x0800f619
 800f440:	0800f619 	.word	0x0800f619
 800f444:	0800f619 	.word	0x0800f619
 800f448:	0800f619 	.word	0x0800f619
 800f44c:	0800f58d 	.word	0x0800f58d
 800f450:	0800f619 	.word	0x0800f619
 800f454:	0800f619 	.word	0x0800f619
 800f458:	0800f619 	.word	0x0800f619
 800f45c:	0800f619 	.word	0x0800f619
 800f460:	0800f619 	.word	0x0800f619
 800f464:	0800f619 	.word	0x0800f619
 800f468:	0800f619 	.word	0x0800f619
 800f46c:	0800f5b7 	.word	0x0800f5b7
 800f470:	0800f59b 	.word	0x0800f59b
 800f474:	0800f619 	.word	0x0800f619
 800f478:	0800f619 	.word	0x0800f619
 800f47c:	0800f5a9 	.word	0x0800f5a9
 800f480:	0800f619 	.word	0x0800f619
 800f484:	0800f619 	.word	0x0800f619
 800f488:	0800f619 	.word	0x0800f619
 800f48c:	0800f619 	.word	0x0800f619
 800f490:	0800f5d3 	.word	0x0800f5d3
 800f494:	0800f619 	.word	0x0800f619
 800f498:	0800f5e1 	.word	0x0800f5e1
 800f49c:	0800f619 	.word	0x0800f619
 800f4a0:	0800f619 	.word	0x0800f619
 800f4a4:	0800f5ef 	.word	0x0800f5ef
 800f4a8:	0800f619 	.word	0x0800f619
 800f4ac:	0800f5fd 	.word	0x0800f5fd
 800f4b0:	0800f619 	.word	0x0800f619
 800f4b4:	0800f619 	.word	0x0800f619
 800f4b8:	0800f619 	.word	0x0800f619
 800f4bc:	0800f619 	.word	0x0800f619
 800f4c0:	0800f60b 	.word	0x0800f60b
 800f4c4:	0800f619 	.word	0x0800f619
 800f4c8:	0800f619 	.word	0x0800f619
 800f4cc:	0800f619 	.word	0x0800f619
 800f4d0:	0800f619 	.word	0x0800f619
 800f4d4:	0800f619 	.word	0x0800f619
 800f4d8:	0800f619 	.word	0x0800f619
 800f4dc:	0800f619 	.word	0x0800f619
 800f4e0:	0800f619 	.word	0x0800f619
 800f4e4:	0800f619 	.word	0x0800f619
 800f4e8:	0800f619 	.word	0x0800f619
 800f4ec:	0800f619 	.word	0x0800f619
 800f4f0:	0800f619 	.word	0x0800f619
 800f4f4:	0800f619 	.word	0x0800f619
 800f4f8:	0800f619 	.word	0x0800f619
 800f4fc:	0800f619 	.word	0x0800f619
 800f500:	0800f619 	.word	0x0800f619
 800f504:	0800f619 	.word	0x0800f619
 800f508:	0800f619 	.word	0x0800f619
 800f50c:	0800f619 	.word	0x0800f619
 800f510:	0800f619 	.word	0x0800f619
 800f514:	0800f619 	.word	0x0800f619
 800f518:	0800f619 	.word	0x0800f619
 800f51c:	0800f619 	.word	0x0800f619
 800f520:	0800f619 	.word	0x0800f619
 800f524:	0800f619 	.word	0x0800f619
 800f528:	0800f619 	.word	0x0800f619
 800f52c:	0800f619 	.word	0x0800f619
 800f530:	0800f619 	.word	0x0800f619
 800f534:	0800f619 	.word	0x0800f619
 800f538:	0800f619 	.word	0x0800f619
 800f53c:	0800f619 	.word	0x0800f619
 800f540:	0800f619 	.word	0x0800f619
 800f544:	0800f619 	.word	0x0800f619
 800f548:	0800f619 	.word	0x0800f619
 800f54c:	0800f619 	.word	0x0800f619
 800f550:	0800f619 	.word	0x0800f619
 800f554:	0800f619 	.word	0x0800f619
 800f558:	0800f619 	.word	0x0800f619
 800f55c:	0800f619 	.word	0x0800f619
 800f560:	0800f619 	.word	0x0800f619
 800f564:	0800f619 	.word	0x0800f619
 800f568:	0800f619 	.word	0x0800f619
 800f56c:	0800f5c5 	.word	0x0800f5c5
  {
  case SCSI_TEST_UNIT_READY:
    SCSI_TestUnitReady(pdev, lun, cmd);
 800f570:	7afb      	ldrb	r3, [r7, #11]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	4619      	mov	r1, r3
 800f576:	68f8      	ldr	r0, [r7, #12]
 800f578:	f000 f85c 	bl	800f634 <SCSI_TestUnitReady>
    break;
 800f57c:	e055      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_REQUEST_SENSE:
    SCSI_RequestSense (pdev, lun, cmd);
 800f57e:	7afb      	ldrb	r3, [r7, #11]
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	4619      	mov	r1, r3
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f000 fa09 	bl	800f99c <SCSI_RequestSense>
    break;
 800f58a:	e04e      	b.n	800f62a <SCSI_ProcessCmd+0x246>
  case SCSI_INQUIRY:
    SCSI_Inquiry(pdev, lun, cmd);
 800f58c:	7afb      	ldrb	r3, [r7, #11]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	4619      	mov	r1, r3
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	f000 f888 	bl	800f6a8 <SCSI_Inquiry>
    break;
 800f598:	e047      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_START_STOP_UNIT:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800f59a:	7afb      	ldrb	r3, [r7, #11]
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	4619      	mov	r1, r3
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f000 fa9e 	bl	800fae2 <SCSI_StartStopUnit>
    break;
 800f5a6:	e040      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800f5a8:	7afb      	ldrb	r3, [r7, #11]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f000 fa97 	bl	800fae2 <SCSI_StartStopUnit>
    break;
 800f5b4:	e039      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE6:
    SCSI_ModeSense6 (pdev, lun, cmd);
 800f5b6:	7afb      	ldrb	r3, [r7, #11]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f000 f99d 	bl	800f8fc <SCSI_ModeSense6>
    break;
 800f5c2:	e032      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE10:
    SCSI_ModeSense10 (pdev, lun, cmd);
 800f5c4:	7afb      	ldrb	r3, [r7, #11]
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f000 f9be 	bl	800f94c <SCSI_ModeSense10>
    break;
 800f5d0:	e02b      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_READ_FORMAT_CAPACITIES:
    SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800f5d2:	7afb      	ldrb	r3, [r7, #11]
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f000 f92a 	bl	800f832 <SCSI_ReadFormatCapacity>
    break;
 800f5de:	e024      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_READ_CAPACITY10:
    SCSI_ReadCapacity10(pdev, lun, cmd);
 800f5e0:	7afb      	ldrb	r3, [r7, #11]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f000 f8bc 	bl	800f764 <SCSI_ReadCapacity10>
    break;
 800f5ec:	e01d      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_READ10:
    SCSI_Read10(pdev, lun, cmd);
 800f5ee:	7afb      	ldrb	r3, [r7, #11]
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	f000 fa88 	bl	800fb0a <SCSI_Read10>
    break;
 800f5fa:	e016      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_WRITE10:
    SCSI_Write10(pdev, lun, cmd);
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	4619      	mov	r1, r3
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f000 fb0d 	bl	800fc22 <SCSI_Write10>
    break;
 800f608:	e00f      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  case SCSI_VERIFY10:
    SCSI_Verify10(pdev, lun, cmd);
 800f60a:	7afb      	ldrb	r3, [r7, #11]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	4619      	mov	r1, r3
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 fbb6 	bl	800fd82 <SCSI_Verify10>
    break;
 800f616:	e008      	b.n	800f62a <SCSI_ProcessCmd+0x246>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800f618:	7af9      	ldrb	r1, [r7, #11]
 800f61a:	2320      	movs	r3, #32
 800f61c:	2205      	movs	r2, #5
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f000 fa26 	bl	800fa70 <SCSI_SenseCode>
    return -1;
 800f624:	f04f 33ff 	mov.w	r3, #4294967295
 800f628:	e000      	b.n	800f62c <SCSI_ProcessCmd+0x248>
  }
  return 0;
 800f62a:	2300      	movs	r3, #0
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	460b      	mov	r3, r1
 800f63e:	607a      	str	r2, [r7, #4]
 800f640:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f648:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00a      	beq.n	800f66a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f65a:	2320      	movs	r3, #32
 800f65c:	2205      	movs	r2, #5
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f000 fa06 	bl	800fa70 <SCSI_SenseCode>

    return -1;
 800f664:	f04f 33ff 	mov.w	r3, #4294967295
 800f668:	e019      	b.n	800f69e <SCSI_TestUnitReady+0x6a>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	7afa      	ldrb	r2, [r7, #11]
 800f674:	4610      	mov	r0, r2
 800f676:	4798      	blx	r3
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00b      	beq.n	800f696 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f67e:	7af9      	ldrb	r1, [r7, #11]
 800f680:	233a      	movs	r3, #58	; 0x3a
 800f682:	2202      	movs	r2, #2
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 f9f3 	bl	800fa70 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2205      	movs	r2, #5
 800f68e:	721a      	strb	r2, [r3, #8]

    return -1;
 800f690:	f04f 33ff 	mov.w	r3, #4294967295
 800f694:	e003      	b.n	800f69e <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	2200      	movs	r2, #0
 800f69a:	815a      	strh	r2, [r3, #10]

  return 0;
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3718      	adds	r7, #24
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
	...

0800f6a8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b089      	sub	sp, #36	; 0x24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	607a      	str	r2, [r7, #4]
 800f6b4:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f6bc:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	f003 0301 	and.w	r3, r3, #1
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d014      	beq.n	800f6f6 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800f6cc:	2307      	movs	r3, #7
 800f6ce:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	8bfa      	ldrh	r2, [r7, #30]
 800f6d4:	815a      	strh	r2, [r3, #10]

    while (len)
 800f6d6:	e00a      	b.n	800f6ee <SCSI_Inquiry+0x46>
    {
      len--;
 800f6d8:	8bfb      	ldrh	r3, [r7, #30]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800f6de:	8bfa      	ldrh	r2, [r7, #30]
 800f6e0:	8bfb      	ldrh	r3, [r7, #30]
 800f6e2:	491f      	ldr	r1, [pc, #124]	; (800f760 <SCSI_Inquiry+0xb8>)
 800f6e4:	5c89      	ldrb	r1, [r1, r2]
 800f6e6:	69ba      	ldr	r2, [r7, #24]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	460a      	mov	r2, r1
 800f6ec:	731a      	strb	r2, [r3, #12]
    while (len)
 800f6ee:	8bfb      	ldrh	r3, [r7, #30]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d1f1      	bne.n	800f6d8 <SCSI_Inquiry+0x30>
 800f6f4:	e02e      	b.n	800f754 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6fc:	69d9      	ldr	r1, [r3, #28]
 800f6fe:	7afa      	ldrb	r2, [r7, #11]
 800f700:	4613      	mov	r3, r2
 800f702:	00db      	lsls	r3, r3, #3
 800f704:	4413      	add	r3, r2
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	440b      	add	r3, r1
 800f70a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	3304      	adds	r3, #4
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	b29b      	uxth	r3, r3
 800f714:	3305      	adds	r3, #5
 800f716:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	3304      	adds	r3, #4
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	8bfa      	ldrh	r2, [r7, #30]
 800f722:	429a      	cmp	r2, r3
 800f724:	d303      	bcc.n	800f72e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3304      	adds	r3, #4
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	8bfa      	ldrh	r2, [r7, #30]
 800f732:	815a      	strh	r2, [r3, #10]

    while (len)
 800f734:	e00b      	b.n	800f74e <SCSI_Inquiry+0xa6>
    {
      len--;
 800f736:	8bfb      	ldrh	r3, [r7, #30]
 800f738:	3b01      	subs	r3, #1
 800f73a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800f73c:	8bfb      	ldrh	r3, [r7, #30]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	441a      	add	r2, r3
 800f742:	8bfb      	ldrh	r3, [r7, #30]
 800f744:	7811      	ldrb	r1, [r2, #0]
 800f746:	69ba      	ldr	r2, [r7, #24]
 800f748:	4413      	add	r3, r2
 800f74a:	460a      	mov	r2, r1
 800f74c:	731a      	strb	r2, [r3, #12]
    while (len)
 800f74e:	8bfb      	ldrh	r3, [r7, #30]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1f0      	bne.n	800f736 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800f754:	2300      	movs	r3, #0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3724      	adds	r7, #36	; 0x24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bc80      	pop	{r7}
 800f75e:	4770      	bx	lr
 800f760:	0801e5dc 	.word	0x0801e5dc

0800f764 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b086      	sub	sp, #24
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	460b      	mov	r3, r1
 800f76e:	607a      	str	r2, [r7, #4]
 800f770:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f778:	617b      	str	r3, [r7, #20]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	697a      	ldr	r2, [r7, #20]
 800f784:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800f78e:	7af8      	ldrb	r0, [r7, #11]
 800f790:	4798      	blx	r3
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d008      	beq.n	800f7aa <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f798:	7af9      	ldrb	r1, [r7, #11]
 800f79a:	233a      	movs	r3, #58	; 0x3a
 800f79c:	2202      	movs	r2, #2
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f000 f966 	bl	800fa70 <SCSI_SenseCode>
    return -1;
 800f7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a8:	e03f      	b.n	800f82a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7b0:	3b01      	subs	r3, #1
 800f7b2:	0e1b      	lsrs	r3, r3, #24
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	0c1b      	lsrs	r3, r3, #16
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	0a1b      	lsrs	r3, r3, #8
 800f7d4:	b2da      	uxtb	r2, r3
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	b2da      	uxtb	r2, r3
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f7f0:	161b      	asrs	r3, r3, #24
 800f7f2:	b2da      	uxtb	r2, r3
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f7fe:	141b      	asrs	r3, r3, #16
 800f800:	b2da      	uxtb	r2, r3
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f80c:	0a1b      	lsrs	r3, r3, #8
 800f80e:	b29b      	uxth	r3, r3
 800f810:	b2da      	uxtb	r2, r3
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	2208      	movs	r2, #8
 800f826:	815a      	strh	r2, [r3, #10]
    return 0;
 800f828:	2300      	movs	r3, #0
  }
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3718      	adds	r7, #24
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b088      	sub	sp, #32
 800f836:	af00      	add	r7, sp, #0
 800f838:	60f8      	str	r0, [r7, #12]
 800f83a:	460b      	mov	r3, r1
 800f83c:	607a      	str	r2, [r7, #4]
 800f83e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f846:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for(i = 0U; i < 12U ; i++)
 800f848:	2300      	movs	r3, #0
 800f84a:	83fb      	strh	r3, [r7, #30]
 800f84c:	e007      	b.n	800f85e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f84e:	8bfb      	ldrh	r3, [r7, #30]
 800f850:	69ba      	ldr	r2, [r7, #24]
 800f852:	4413      	add	r3, r2
 800f854:	2200      	movs	r2, #0
 800f856:	731a      	strb	r2, [r3, #12]
  for(i = 0U; i < 12U ; i++)
 800f858:	8bfb      	ldrh	r3, [r7, #30]
 800f85a:	3301      	adds	r3, #1
 800f85c:	83fb      	strh	r3, [r7, #30]
 800f85e:	8bfb      	ldrh	r3, [r7, #30]
 800f860:	2b0b      	cmp	r3, #11
 800f862:	d9f4      	bls.n	800f84e <SCSI_ReadFormatCapacity+0x1c>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	f107 0216 	add.w	r2, r7, #22
 800f870:	f107 0110 	add.w	r1, r7, #16
 800f874:	7af8      	ldrb	r0, [r7, #11]
 800f876:	4798      	blx	r3
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d008      	beq.n	800f890 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f87e:	7af9      	ldrb	r1, [r7, #11]
 800f880:	233a      	movs	r3, #58	; 0x3a
 800f882:	2202      	movs	r2, #2
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f000 f8f3 	bl	800fa70 <SCSI_SenseCode>
    return -1;
 800f88a:	f04f 33ff 	mov.w	r3, #4294967295
 800f88e:	e030      	b.n	800f8f2 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	2208      	movs	r2, #8
 800f894:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	3b01      	subs	r3, #1
 800f89a:	0e1b      	lsrs	r3, r3, #24
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	0c1b      	lsrs	r3, r3, #16
 800f8a8:	b2da      	uxtb	r2, r3
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	0a1b      	lsrs	r3, r3, #8
 800f8b4:	b2da      	uxtb	r2, r3
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	2202      	movs	r2, #2
 800f8ca:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800f8cc:	8afb      	ldrh	r3, [r7, #22]
 800f8ce:	141b      	asrs	r3, r3, #16
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800f8d6:	8afb      	ldrh	r3, [r7, #22]
 800f8d8:	0a1b      	lsrs	r3, r3, #8
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	b2da      	uxtb	r2, r3
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800f8e2:	8afb      	ldrh	r3, [r7, #22]
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	69bb      	ldr	r3, [r7, #24]
 800f8e8:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	220c      	movs	r2, #12
 800f8ee:	815a      	strh	r2, [r3, #10]
    return 0;
 800f8f0:	2300      	movs	r3, #0
  }
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3720      	adds	r7, #32
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
	...

0800f8fc <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b087      	sub	sp, #28
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	460b      	mov	r3, r1
 800f906:	607a      	str	r2, [r7, #4]
 800f908:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f910:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800f912:	2308      	movs	r3, #8
 800f914:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	8afa      	ldrh	r2, [r7, #22]
 800f91a:	815a      	strh	r2, [r3, #10]

  while (len)
 800f91c:	e00a      	b.n	800f934 <SCSI_ModeSense6+0x38>
  {
    len--;
 800f91e:	8afb      	ldrh	r3, [r7, #22]
 800f920:	3b01      	subs	r3, #1
 800f922:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800f924:	8afa      	ldrh	r2, [r7, #22]
 800f926:	8afb      	ldrh	r3, [r7, #22]
 800f928:	4907      	ldr	r1, [pc, #28]	; (800f948 <SCSI_ModeSense6+0x4c>)
 800f92a:	5c89      	ldrb	r1, [r1, r2]
 800f92c:	693a      	ldr	r2, [r7, #16]
 800f92e:	4413      	add	r3, r2
 800f930:	460a      	mov	r2, r1
 800f932:	731a      	strb	r2, [r3, #12]
  while (len)
 800f934:	8afb      	ldrh	r3, [r7, #22]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1f1      	bne.n	800f91e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	371c      	adds	r7, #28
 800f940:	46bd      	mov	sp, r7
 800f942:	bc80      	pop	{r7}
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	0801e5e4 	.word	0x0801e5e4

0800f94c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b087      	sub	sp, #28
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	460b      	mov	r3, r1
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800f95a:	2308      	movs	r3, #8
 800f95c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f964:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	8afa      	ldrh	r2, [r7, #22]
 800f96a:	815a      	strh	r2, [r3, #10]

  while (len)
 800f96c:	e00a      	b.n	800f984 <SCSI_ModeSense10+0x38>
  {
    len--;
 800f96e:	8afb      	ldrh	r3, [r7, #22]
 800f970:	3b01      	subs	r3, #1
 800f972:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800f974:	8afa      	ldrh	r2, [r7, #22]
 800f976:	8afb      	ldrh	r3, [r7, #22]
 800f978:	4907      	ldr	r1, [pc, #28]	; (800f998 <SCSI_ModeSense10+0x4c>)
 800f97a:	5c89      	ldrb	r1, [r1, r2]
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	4413      	add	r3, r2
 800f980:	460a      	mov	r2, r1
 800f982:	731a      	strb	r2, [r3, #12]
  while (len)
 800f984:	8afb      	ldrh	r3, [r7, #22]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1f1      	bne.n	800f96e <SCSI_ModeSense10+0x22>
  }

  return 0;
 800f98a:	2300      	movs	r3, #0
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	371c      	adds	r7, #28
 800f990:	46bd      	mov	sp, r7
 800f992:	bc80      	pop	{r7}
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	0801e5ec 	.word	0x0801e5ec

0800f99c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b087      	sub	sp, #28
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	60f8      	str	r0, [r7, #12]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	607a      	str	r2, [r7, #4]
 800f9a8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f9b0:	613b      	str	r3, [r7, #16]

  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	75fb      	strb	r3, [r7, #23]
 800f9b6:	e007      	b.n	800f9c8 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f9b8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ba:	693a      	ldr	r2, [r7, #16]
 800f9bc:	4413      	add	r3, r2
 800f9be:	2200      	movs	r2, #0
 800f9c0:	731a      	strb	r2, [r3, #12]
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	75fb      	strb	r3, [r7, #23]
 800f9c8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ca:	2b11      	cmp	r3, #17
 800f9cc:	d9f4      	bls.n	800f9b8 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0]	= 0x70U;
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	2270      	movs	r2, #112	; 0x70
 800f9d2:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	220c      	movs	r2, #12
 800f9d8:	74da      	strb	r2, [r3, #19]

  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d02e      	beq.n	800fa48 <SCSI_RequestSense+0xac>

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f9f0:	693a      	ldr	r2, [r7, #16]
 800f9f2:	3347      	adds	r3, #71	; 0x47
 800f9f4:	00db      	lsls	r3, r3, #3
 800f9f6:	4413      	add	r3, r2
 800f9f8:	791a      	ldrb	r2, [r3, #4]
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	3347      	adds	r3, #71	; 0x47
 800fa08:	00db      	lsls	r3, r3, #3
 800fa0a:	4413      	add	r3, r2
 800fa0c:	7a5a      	ldrb	r2, [r3, #9]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	3347      	adds	r3, #71	; 0x47
 800fa1c:	00db      	lsls	r3, r3, #3
 800fa1e:	4413      	add	r3, r2
 800fa20:	7a1a      	ldrb	r2, [r3, #8]
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800fa3c:	2b04      	cmp	r3, #4
 800fa3e:	d103      	bne.n	800fa48 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	2200      	movs	r2, #0
 800fa44:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	2212      	movs	r2, #18
 800fa4c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	3304      	adds	r3, #4
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	2b12      	cmp	r3, #18
 800fa56:	d805      	bhi.n	800fa64 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3304      	adds	r3, #4
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	371c      	adds	r7, #28
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bc80      	pop	{r7}
 800fa6e:	4770      	bx	lr

0800fa70 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	4608      	mov	r0, r1
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	4603      	mov	r3, r0
 800fa80:	70fb      	strb	r3, [r7, #3]
 800fa82:	460b      	mov	r3, r1
 800fa84:	70bb      	strb	r3, [r7, #2]
 800fa86:	4613      	mov	r3, r2
 800fa88:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fa90:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	3347      	adds	r3, #71	; 0x47
 800fa9c:	00db      	lsls	r3, r3, #3
 800fa9e:	4413      	add	r3, r2
 800faa0:	78ba      	ldrb	r2, [r7, #2]
 800faa2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	3347      	adds	r3, #71	; 0x47
 800faae:	00db      	lsls	r3, r3, #3
 800fab0:	4413      	add	r3, r2
 800fab2:	2200      	movs	r2, #0
 800fab4:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fabc:	3301      	adds	r3, #1
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800facc:	2b04      	cmp	r3, #4
 800face:	d103      	bne.n	800fad8 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2200      	movs	r2, #0
 800fad4:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800fad8:	bf00      	nop
 800fada:	3714      	adds	r7, #20
 800fadc:	46bd      	mov	sp, r7
 800fade:	bc80      	pop	{r7}
 800fae0:	4770      	bx	lr

0800fae2 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800fae2:	b480      	push	{r7}
 800fae4:	b087      	sub	sp, #28
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	460b      	mov	r3, r1
 800faec:	607a      	str	r2, [r7, #4]
 800faee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800faf6:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2200      	movs	r2, #0
 800fafc:	815a      	strh	r2, [r3, #10]
  return 0;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	371c      	adds	r7, #28
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bc80      	pop	{r7}
 800fb08:	4770      	bx	lr

0800fb0a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b086      	sub	sp, #24
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	460b      	mov	r3, r1
 800fb14:	607a      	str	r2, [r7, #4]
 800fb16:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fb1e:	617b      	str	r3, [r7, #20]

  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	7a1b      	ldrb	r3, [r3, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d16e      	bne.n	800fc06 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800fb2e:	b25b      	sxtb	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	db0a      	blt.n	800fb4a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fb3a:	2320      	movs	r3, #32
 800fb3c:	2205      	movs	r2, #5
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f7ff ff96 	bl	800fa70 <SCSI_SenseCode>
      return -1;
 800fb44:	f04f 33ff 	mov.w	r3, #4294967295
 800fb48:	e067      	b.n	800fc1a <SCSI_Read10+0x110>
    }

    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	7afa      	ldrb	r2, [r7, #11]
 800fb54:	4610      	mov	r0, r2
 800fb56:	4798      	blx	r3
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d008      	beq.n	800fb70 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fb5e:	7af9      	ldrb	r1, [r7, #11]
 800fb60:	233a      	movs	r3, #58	; 0x3a
 800fb62:	2202      	movs	r2, #2
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f7ff ff83 	bl	800fa70 <SCSI_SenseCode>
      return -1;
 800fb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb6e:	e054      	b.n	800fc1a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	3302      	adds	r3, #2
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	3303      	adds	r3, #3
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb80:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	3304      	adds	r3, #4
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fb8a:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	3205      	adds	r2, #5
 800fb90:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800fb92:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	3307      	adds	r3, #7
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	021b      	lsls	r3, r3, #8
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	3208      	adds	r2, #8
 800fba6:	7812      	ldrb	r2, [r2, #0]
 800fba8:	431a      	orrs	r2, r3
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fbbc:	7af9      	ldrb	r1, [r7, #11]
 800fbbe:	68f8      	ldr	r0, [r7, #12]
 800fbc0:	f000 f912 	bl	800fde8 <SCSI_CheckAddressRange>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	da02      	bge.n	800fbd0 <SCSI_Read10+0xc6>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fbca:	f04f 33ff 	mov.w	r3, #4294967295
 800fbce:	e024      	b.n	800fc1a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fbe2:	6979      	ldr	r1, [r7, #20]
 800fbe4:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800fbe8:	fb01 f303 	mul.w	r3, r1, r3
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d00a      	beq.n	800fc06 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fbf6:	2320      	movs	r3, #32
 800fbf8:	2205      	movs	r2, #5
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f7ff ff38 	bl	800fa70 <SCSI_SenseCode>
      return -1;
 800fc00:	f04f 33ff 	mov.w	r3, #4294967295
 800fc04:	e009      	b.n	800fc1a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc0c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800fc0e:	7afb      	ldrb	r3, [r7, #11]
 800fc10:	4619      	mov	r1, r3
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f000 f90a 	bl	800fe2c <SCSI_ProcessRead>
 800fc18:	4603      	mov	r3, r0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3718      	adds	r7, #24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b086      	sub	sp, #24
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	60f8      	str	r0, [r7, #12]
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	607a      	str	r2, [r7, #4]
 800fc2e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fc36:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	7a1b      	ldrb	r3, [r3, #8]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f040 8096 	bne.w	800fd6e <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800fc48:	b25b      	sxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	da0a      	bge.n	800fc64 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fc54:	2320      	movs	r3, #32
 800fc56:	2205      	movs	r2, #5
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f7ff ff09 	bl	800fa70 <SCSI_SenseCode>
      return -1;
 800fc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc62:	e08a      	b.n	800fd7a <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	7afa      	ldrb	r2, [r7, #11]
 800fc6e:	4610      	mov	r0, r2
 800fc70:	4798      	blx	r3
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d008      	beq.n	800fc8a <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fc78:	7af9      	ldrb	r1, [r7, #11]
 800fc7a:	233a      	movs	r3, #58	; 0x3a
 800fc7c:	2202      	movs	r2, #2
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f7ff fef6 	bl	800fa70 <SCSI_SenseCode>
      return -1;
 800fc84:	f04f 33ff 	mov.w	r3, #4294967295
 800fc88:	e077      	b.n	800fd7a <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	7afa      	ldrb	r2, [r7, #11]
 800fc94:	4610      	mov	r0, r2
 800fc96:	4798      	blx	r3
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d008      	beq.n	800fcb0 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800fc9e:	7af9      	ldrb	r1, [r7, #11]
 800fca0:	2327      	movs	r3, #39	; 0x27
 800fca2:	2202      	movs	r2, #2
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f7ff fee3 	bl	800fa70 <SCSI_SenseCode>
      return -1;
 800fcaa:	f04f 33ff 	mov.w	r3, #4294967295
 800fcae:	e064      	b.n	800fd7a <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	3302      	adds	r3, #2
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	3303      	adds	r3, #3
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fcc0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fcca:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	3205      	adds	r2, #5
 800fcd0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800fcd2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	3307      	adds	r3, #7
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	021b      	lsls	r3, r3, #8
                          (uint32_t)params[8];
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	3208      	adds	r2, #8
 800fce6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fce8:	431a      	orrs	r2, r3
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fcfc:	7af9      	ldrb	r1, [r7, #11]
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f000 f872 	bl	800fde8 <SCSI_CheckAddressRange>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	da02      	bge.n	800fd10 <SCSI_Write10+0xee>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fd0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0e:	e034      	b.n	800fd7a <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fd1c:	fb02 f303 	mul.w	r3, r2, r3
 800fd20:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd28:	693a      	ldr	r2, [r7, #16]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d00a      	beq.n	800fd44 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fd34:	2320      	movs	r3, #32
 800fd36:	2205      	movs	r2, #5
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff fe99 	bl	800fa70 <SCSI_SenseCode>
      return -1;
 800fd3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd42:	e01a      	b.n	800fd7a <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd4a:	bf28      	it	cs
 800fd4c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fd50:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	2201      	movs	r2, #1
 800fd56:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	f103 020c 	add.w	r2, r3, #12
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	2101      	movs	r1, #1
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f004 fff4 	bl	8014d52 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	e005      	b.n	800fd7a <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800fd6e:	7afb      	ldrb	r3, [r7, #11]
 800fd70:	4619      	mov	r1, r3
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f000 f8ce 	bl	800ff14 <SCSI_ProcessWrite>
 800fd78:	4603      	mov	r3, r0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b086      	sub	sp, #24
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	60f8      	str	r0, [r7, #12]
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	607a      	str	r2, [r7, #4]
 800fd8e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fd96:	617b      	str	r3, [r7, #20]

  if ((params[1]& 0x02U) == 0x02U)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	781b      	ldrb	r3, [r3, #0]
 800fd9e:	f003 0302 	and.w	r3, r3, #2
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d008      	beq.n	800fdb8 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800fda6:	7af9      	ldrb	r1, [r7, #11]
 800fda8:	2324      	movs	r3, #36	; 0x24
 800fdaa:	2205      	movs	r2, #5
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f7ff fe5f 	bl	800fa70 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800fdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800fdb6:	e013      	b.n	800fde0 <SCSI_Verify10+0x5e>
  }

  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fdc4:	7af9      	ldrb	r1, [r7, #11]
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f000 f80e 	bl	800fde8 <SCSI_CheckAddressRange>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	da02      	bge.n	800fdd8 <SCSI_Verify10+0x56>
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800fdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd6:	e003      	b.n	800fde0 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	2200      	movs	r2, #0
 800fddc:	815a      	strh	r2, [r3, #10]
  return 0;
 800fdde:	2300      	movs	r3, #0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3718      	adds	r7, #24
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	607a      	str	r2, [r7, #4]
 800fdf2:	603b      	str	r3, [r7, #0]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fdfe:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	441a      	add	r2, r3
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d908      	bls.n	800fe22 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800fe10:	7af9      	ldrb	r1, [r7, #11]
 800fe12:	2321      	movs	r3, #33	; 0x21
 800fe14:	2205      	movs	r2, #5
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f7ff fe2a 	bl	800fa70 <SCSI_SenseCode>
    return -1;
 800fe1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe20:	e000      	b.n	800fe24 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3718      	adds	r7, #24
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b085      	sub	sp, #20
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe3e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fe4c:	fb02 f303 	mul.w	r3, r2, r3
 800fe50:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe58:	bf28      	it	cs
 800fe5a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fe5e:	60bb      	str	r3, [r7, #8]

  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe66:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data,
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f103 010c 	add.w	r1, r3, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	78f8      	ldrb	r0, [r7, #3]
 800fe86:	47a0      	blx	r4
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	da08      	bge.n	800fea0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800fe8e:	78f9      	ldrb	r1, [r7, #3]
 800fe90:	2311      	movs	r3, #17
 800fe92:	2204      	movs	r2, #4
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7ff fdeb 	bl	800fa70 <SCSI_SenseCode>
    return -1;
 800fe9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9e:	e035      	b.n	800ff0c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f103 020c 	add.w	r2, r3, #12
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	2181      	movs	r1, #129	; 0x81
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f004 ff2d 	bl	8014d0c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800febe:	4619      	mov	r1, r3
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fec6:	441a      	add	r2, r3
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800feda:	4619      	mov	r1, r3
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	fbb3 f3f1 	udiv	r3, r3, r1
 800fee2:	1ad2      	subs	r2, r2, r3
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	1ad2      	subs	r2, r2, r3
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d102      	bne.n	800ff0a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2203      	movs	r2, #3
 800ff08:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd90      	pop	{r4, r7, pc}

0800ff14 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800ff14:	b590      	push	{r4, r7, lr}
 800ff16:	b085      	sub	sp, #20
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff26:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ff2e:	68fa      	ldr	r2, [r7, #12]
 800ff30:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800ff34:	fb02 f303 	mul.w	r3, r2, r3
 800ff38:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff40:	bf28      	it	cs
 800ff42:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ff46:	60bb      	str	r3, [r7, #8]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff4e:	695c      	ldr	r4, [r3, #20]
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f103 010c 	add.w	r1, r3, #12
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ff62:	4618      	mov	r0, r3
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	78f8      	ldrb	r0, [r7, #3]
 800ff6e:	47a0      	blx	r4
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	da08      	bge.n	800ff88 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ff76:	78f9      	ldrb	r1, [r7, #3]
 800ff78:	2303      	movs	r3, #3
 800ff7a:	2204      	movs	r2, #4
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff fd77 	bl	800fa70 <SCSI_SenseCode>

    return -1;
 800ff82:	f04f 33ff 	mov.w	r3, #4294967295
 800ff86:	e045      	b.n	8010014 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ff94:	4619      	mov	r1, r3
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff9c:	441a      	add	r2, r3
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffb8:	1ad2      	subs	r2, r2, r3
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	1ad2      	subs	r2, r2, r3
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d104      	bne.n	800ffe4 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800ffda:	2100      	movs	r1, #0
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7ff f97f 	bl	800f2e0 <MSC_BOT_SendCSW>
 800ffe2:	e016      	b.n	8010012 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fff0:	fb02 f303 	mul.w	r3, r2, r3
 800fff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fff8:	bf28      	it	cs
 800fffa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fffe:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f103 020c 	add.w	r2, r3, #12
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	b29b      	uxth	r3, r3
 801000a:	2101      	movs	r1, #1
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f004 fea0 	bl	8014d52 <USBD_LL_PrepareReceive>
  }

  return 0;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	bd90      	pop	{r4, r7, pc}

0801001c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	4613      	mov	r3, r2
 8010028:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d101      	bne.n	8010034 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010030:	2302      	movs	r3, #2
 8010032:	e01a      	b.n	801006a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801003a:	2b00      	cmp	r3, #0
 801003c:	d003      	beq.n	8010046 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d003      	beq.n	8010054 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2201      	movs	r2, #1
 8010058:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	79fa      	ldrb	r2, [r7, #7]
 8010060:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f004 fcfa 	bl	8014a5c <USBD_LL_Init>

  return USBD_OK;
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	3710      	adds	r7, #16
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010072:	b480      	push	{r7}
 8010074:	b085      	sub	sp, #20
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 801007c:	2300      	movs	r3, #0
 801007e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d006      	beq.n	8010094 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	683a      	ldr	r2, [r7, #0]
 801008a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 801008e:	2300      	movs	r3, #0
 8010090:	73fb      	strb	r3, [r7, #15]
 8010092:	e001      	b.n	8010098 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010094:	2302      	movs	r3, #2
 8010096:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010098:	7bfb      	ldrb	r3, [r7, #15]
}
 801009a:	4618      	mov	r0, r3
 801009c:	3714      	adds	r7, #20
 801009e:	46bd      	mov	sp, r7
 80100a0:	bc80      	pop	{r7}
 80100a2:	4770      	bx	lr

080100a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f004 fd25 	bl	8014afc <USBD_LL_Start>

  return USBD_OK;
 80100b2:	2300      	movs	r3, #0
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80100c4:	2300      	movs	r3, #0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	370c      	adds	r7, #12
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bc80      	pop	{r7}
 80100ce:	4770      	bx	lr

080100d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	460b      	mov	r3, r1
 80100da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80100dc:	2302      	movs	r3, #2
 80100de:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00c      	beq.n	8010104 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	78fa      	ldrb	r2, [r7, #3]
 80100f4:	4611      	mov	r1, r2
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	4798      	blx	r3
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d101      	bne.n	8010104 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010100:	2300      	movs	r3, #0
 8010102:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010104:	7bfb      	ldrb	r3, [r7, #15]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b082      	sub	sp, #8
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	460b      	mov	r3, r1
 8010118:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	78fa      	ldrb	r2, [r7, #3]
 8010124:	4611      	mov	r1, r2
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	4798      	blx	r3
  return USBD_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010144:	6839      	ldr	r1, [r7, #0]
 8010146:	4618      	mov	r0, r3
 8010148:	f000 fe56 	bl	8010df8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2201      	movs	r2, #1
 8010150:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 801015a:	461a      	mov	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010168:	f003 031f 	and.w	r3, r3, #31
 801016c:	2b01      	cmp	r3, #1
 801016e:	d00c      	beq.n	801018a <USBD_LL_SetupStage+0x56>
 8010170:	2b01      	cmp	r3, #1
 8010172:	d302      	bcc.n	801017a <USBD_LL_SetupStage+0x46>
 8010174:	2b02      	cmp	r3, #2
 8010176:	d010      	beq.n	801019a <USBD_LL_SetupStage+0x66>
 8010178:	e017      	b.n	80101aa <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f9c6 	bl	8010514 <USBD_StdDevReq>
    break;
 8010188:	e01a      	b.n	80101c0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 fa28 	bl	80105e8 <USBD_StdItfReq>
    break;
 8010198:	e012      	b.n	80101c0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80101a0:	4619      	mov	r1, r3
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fa66 	bl	8010674 <USBD_StdEPReq>
    break;
 80101a8:	e00a      	b.n	80101c0 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80101b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f004 fd1e 	bl	8014bfa <USBD_LL_StallEP>
    break;
 80101be:	bf00      	nop
  }

  return USBD_OK;
 80101c0:	2300      	movs	r3, #0
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b086      	sub	sp, #24
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	60f8      	str	r0, [r7, #12]
 80101d2:	460b      	mov	r3, r1
 80101d4:	607a      	str	r2, [r7, #4]
 80101d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80101d8:	7afb      	ldrb	r3, [r7, #11]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d14b      	bne.n	8010276 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80101e4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80101ec:	2b03      	cmp	r3, #3
 80101ee:	d134      	bne.n	801025a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	68da      	ldr	r2, [r3, #12]
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d919      	bls.n	8010230 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	68da      	ldr	r2, [r3, #12]
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	691b      	ldr	r3, [r3, #16]
 8010204:	1ad2      	subs	r2, r2, r3
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010212:	429a      	cmp	r2, r3
 8010214:	d203      	bcs.n	801021e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 801021a:	b29b      	uxth	r3, r3
 801021c:	e002      	b.n	8010224 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010222:	b29b      	uxth	r3, r3
 8010224:	461a      	mov	r2, r3
 8010226:	6879      	ldr	r1, [r7, #4]
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f000 feb9 	bl	8010fa0 <USBD_CtlContinueRx>
 801022e:	e038      	b.n	80102a2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00a      	beq.n	8010252 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010242:	2b03      	cmp	r3, #3
 8010244:	d105      	bne.n	8010252 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f000 feb6 	bl	8010fc4 <USBD_CtlSendStatus>
 8010258:	e023      	b.n	80102a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010260:	2b05      	cmp	r3, #5
 8010262:	d11e      	bne.n	80102a2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2200      	movs	r2, #0
 8010268:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 801026c:	2100      	movs	r1, #0
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f004 fcc3 	bl	8014bfa <USBD_LL_StallEP>
 8010274:	e015      	b.n	80102a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801027c:	699b      	ldr	r3, [r3, #24]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00d      	beq.n	801029e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8010288:	2b03      	cmp	r3, #3
 801028a:	d108      	bne.n	801029e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	7afa      	ldrb	r2, [r7, #11]
 8010296:	4611      	mov	r1, r2
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	4798      	blx	r3
 801029c:	e001      	b.n	80102a2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801029e:	2302      	movs	r3, #2
 80102a0:	e000      	b.n	80102a4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80102a2:	2300      	movs	r3, #0
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3718      	adds	r7, #24
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b086      	sub	sp, #24
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	460b      	mov	r3, r1
 80102b6:	607a      	str	r2, [r7, #4]
 80102b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80102ba:	7afb      	ldrb	r3, [r7, #11]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d17f      	bne.n	80103c0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	3314      	adds	r3, #20
 80102c4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d15c      	bne.n	801038a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	68da      	ldr	r2, [r3, #12]
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d915      	bls.n	8010308 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	68da      	ldr	r2, [r3, #12]
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	691b      	ldr	r3, [r3, #16]
 80102e4:	1ad2      	subs	r2, r2, r3
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	461a      	mov	r2, r3
 80102f2:	6879      	ldr	r1, [r7, #4]
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f000 fe41 	bl	8010f7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80102fa:	2300      	movs	r3, #0
 80102fc:	2200      	movs	r2, #0
 80102fe:	2100      	movs	r1, #0
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f004 fd26 	bl	8014d52 <USBD_LL_PrepareReceive>
 8010306:	e04e      	b.n	80103a6 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	6912      	ldr	r2, [r2, #16]
 8010310:	fbb3 f1f2 	udiv	r1, r3, r2
 8010314:	fb02 f201 	mul.w	r2, r2, r1
 8010318:	1a9b      	subs	r3, r3, r2
 801031a:	2b00      	cmp	r3, #0
 801031c:	d11c      	bne.n	8010358 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	689a      	ldr	r2, [r3, #8]
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010326:	429a      	cmp	r2, r3
 8010328:	d316      	bcc.n	8010358 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	689a      	ldr	r2, [r3, #8]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010334:	429a      	cmp	r2, r3
 8010336:	d20f      	bcs.n	8010358 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010338:	2200      	movs	r2, #0
 801033a:	2100      	movs	r1, #0
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f000 fe1d 	bl	8010f7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2200      	movs	r2, #0
 8010346:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801034a:	2300      	movs	r3, #0
 801034c:	2200      	movs	r2, #0
 801034e:	2100      	movs	r1, #0
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f004 fcfe 	bl	8014d52 <USBD_LL_PrepareReceive>
 8010356:	e026      	b.n	80103a6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00a      	beq.n	801037a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801036a:	2b03      	cmp	r3, #3
 801036c:	d105      	bne.n	801037a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801037a:	2180      	movs	r1, #128	; 0x80
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f004 fc3c 	bl	8014bfa <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f000 fe31 	bl	8010fea <USBD_CtlReceiveStatus>
 8010388:	e00d      	b.n	80103a6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010390:	2b04      	cmp	r3, #4
 8010392:	d004      	beq.n	801039e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801039a:	2b00      	cmp	r3, #0
 801039c:	d103      	bne.n	80103a6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801039e:	2180      	movs	r1, #128	; 0x80
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f004 fc2a 	bl	8014bfa <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d11d      	bne.n	80103ec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f7ff fe83 	bl	80100bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80103be:	e015      	b.n	80103ec <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103c6:	695b      	ldr	r3, [r3, #20]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d00d      	beq.n	80103e8 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80103d2:	2b03      	cmp	r3, #3
 80103d4:	d108      	bne.n	80103e8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103dc:	695b      	ldr	r3, [r3, #20]
 80103de:	7afa      	ldrb	r2, [r7, #11]
 80103e0:	4611      	mov	r1, r2
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	4798      	blx	r3
 80103e6:	e001      	b.n	80103ec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80103e8:	2302      	movs	r3, #2
 80103ea:	e000      	b.n	80103ee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80103ec:	2300      	movs	r3, #0
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3718      	adds	r7, #24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b082      	sub	sp, #8
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103fe:	2340      	movs	r3, #64	; 0x40
 8010400:	2200      	movs	r2, #0
 8010402:	2100      	movs	r1, #0
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f004 fb94 	bl	8014b32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2201      	movs	r2, #1
 801040e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2240      	movs	r2, #64	; 0x40
 8010416:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801041a:	2340      	movs	r3, #64	; 0x40
 801041c:	2200      	movs	r2, #0
 801041e:	2180      	movs	r1, #128	; 0x80
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f004 fb86 	bl	8014b32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2201      	movs	r2, #1
 801042a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2240      	movs	r2, #64	; 0x40
 8010430:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2201      	movs	r2, #1
 8010436:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010456:	2b00      	cmp	r3, #0
 8010458:	d009      	beq.n	801046e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	6852      	ldr	r2, [r2, #4]
 8010466:	b2d2      	uxtb	r2, r2
 8010468:	4611      	mov	r1, r2
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	4798      	blx	r3
  }

  return USBD_OK;
 801046e:	2300      	movs	r3, #0
}
 8010470:	4618      	mov	r0, r3
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	460b      	mov	r3, r1
 8010482:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	78fa      	ldrb	r2, [r7, #3]
 8010488:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 801048a:	2300      	movs	r3, #0
}
 801048c:	4618      	mov	r0, r3
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	bc80      	pop	{r7}
 8010494:	4770      	bx	lr

08010496 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8010496:	b480      	push	{r7}
 8010498:	b083      	sub	sp, #12
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2204      	movs	r2, #4
 80104ae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80104b2:	2300      	movs	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bc80      	pop	{r7}
 80104bc:	4770      	bx	lr

080104be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80104be:	b480      	push	{r7}
 80104c0:	b083      	sub	sp, #12
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	bc80      	pop	{r7}
 80104dc:	4770      	bx	lr

080104de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80104de:	b580      	push	{r7, lr}
 80104e0:	b082      	sub	sp, #8
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80104ec:	2b03      	cmp	r3, #3
 80104ee:	d10b      	bne.n	8010508 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104f6:	69db      	ldr	r3, [r3, #28]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d005      	beq.n	8010508 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010502:	69db      	ldr	r3, [r3, #28]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
	...

08010514 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801051e:	2300      	movs	r3, #0
 8010520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801052a:	2b20      	cmp	r3, #32
 801052c:	d004      	beq.n	8010538 <USBD_StdDevReq+0x24>
 801052e:	2b40      	cmp	r3, #64	; 0x40
 8010530:	d002      	beq.n	8010538 <USBD_StdDevReq+0x24>
 8010532:	2b00      	cmp	r3, #0
 8010534:	d008      	beq.n	8010548 <USBD_StdDevReq+0x34>
 8010536:	e04c      	b.n	80105d2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	6839      	ldr	r1, [r7, #0]
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	4798      	blx	r3
    break;
 8010546:	e049      	b.n	80105dc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	785b      	ldrb	r3, [r3, #1]
 801054c:	2b09      	cmp	r3, #9
 801054e:	d83a      	bhi.n	80105c6 <USBD_StdDevReq+0xb2>
 8010550:	a201      	add	r2, pc, #4	; (adr r2, 8010558 <USBD_StdDevReq+0x44>)
 8010552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010556:	bf00      	nop
 8010558:	080105a9 	.word	0x080105a9
 801055c:	080105bd 	.word	0x080105bd
 8010560:	080105c7 	.word	0x080105c7
 8010564:	080105b3 	.word	0x080105b3
 8010568:	080105c7 	.word	0x080105c7
 801056c:	0801058b 	.word	0x0801058b
 8010570:	08010581 	.word	0x08010581
 8010574:	080105c7 	.word	0x080105c7
 8010578:	0801059f 	.word	0x0801059f
 801057c:	08010595 	.word	0x08010595
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8010580:	6839      	ldr	r1, [r7, #0]
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f9d2 	bl	801092c <USBD_GetDescriptor>
      break;
 8010588:	e022      	b.n	80105d0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801058a:	6839      	ldr	r1, [r7, #0]
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 fac7 	bl	8010b20 <USBD_SetAddress>
      break;
 8010592:	e01d      	b.n	80105d0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8010594:	6839      	ldr	r1, [r7, #0]
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 fb04 	bl	8010ba4 <USBD_SetConfig>
      break;
 801059c:	e018      	b.n	80105d0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 801059e:	6839      	ldr	r1, [r7, #0]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fb8d 	bl	8010cc0 <USBD_GetConfig>
      break;
 80105a6:	e013      	b.n	80105d0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80105a8:	6839      	ldr	r1, [r7, #0]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fbbc 	bl	8010d28 <USBD_GetStatus>
      break;
 80105b0:	e00e      	b.n	80105d0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fbea 	bl	8010d8e <USBD_SetFeature>
      break;
 80105ba:	e009      	b.n	80105d0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80105bc:	6839      	ldr	r1, [r7, #0]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fbf9 	bl	8010db6 <USBD_ClrFeature>
      break;
 80105c4:	e004      	b.n	80105d0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80105c6:	6839      	ldr	r1, [r7, #0]
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 fc51 	bl	8010e70 <USBD_CtlError>
      break;
 80105ce:	bf00      	nop
    }
    break;
 80105d0:	e004      	b.n	80105dc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80105d2:	6839      	ldr	r1, [r7, #0]
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fc4b 	bl	8010e70 <USBD_CtlError>
    break;
 80105da:	bf00      	nop
  }

  return ret;
 80105dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop

080105e8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105f2:	2300      	movs	r3, #0
 80105f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105fe:	2b20      	cmp	r3, #32
 8010600:	d003      	beq.n	801060a <USBD_StdItfReq+0x22>
 8010602:	2b40      	cmp	r3, #64	; 0x40
 8010604:	d001      	beq.n	801060a <USBD_StdItfReq+0x22>
 8010606:	2b00      	cmp	r3, #0
 8010608:	d12a      	bne.n	8010660 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010610:	3b01      	subs	r3, #1
 8010612:	2b02      	cmp	r3, #2
 8010614:	d81d      	bhi.n	8010652 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	889b      	ldrh	r3, [r3, #4]
 801061a:	b2db      	uxtb	r3, r3
 801061c:	2b01      	cmp	r3, #1
 801061e:	d813      	bhi.n	8010648 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	6839      	ldr	r1, [r7, #0]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	4798      	blx	r3
 801062e:	4603      	mov	r3, r0
 8010630:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	88db      	ldrh	r3, [r3, #6]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d110      	bne.n	801065c <USBD_StdItfReq+0x74>
 801063a:	7bfb      	ldrb	r3, [r7, #15]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10d      	bne.n	801065c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 fcbf 	bl	8010fc4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010646:	e009      	b.n	801065c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fc10 	bl	8010e70 <USBD_CtlError>
      break;
 8010650:	e004      	b.n	801065c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fc0b 	bl	8010e70 <USBD_CtlError>
      break;
 801065a:	e000      	b.n	801065e <USBD_StdItfReq+0x76>
      break;
 801065c:	bf00      	nop
    }
    break;
 801065e:	e004      	b.n	801066a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010660:	6839      	ldr	r1, [r7, #0]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 fc04 	bl	8010e70 <USBD_CtlError>
    break;
 8010668:	bf00      	nop
  }

  return USBD_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	889b      	ldrh	r3, [r3, #4]
 8010686:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010690:	2b20      	cmp	r3, #32
 8010692:	d004      	beq.n	801069e <USBD_StdEPReq+0x2a>
 8010694:	2b40      	cmp	r3, #64	; 0x40
 8010696:	d002      	beq.n	801069e <USBD_StdEPReq+0x2a>
 8010698:	2b00      	cmp	r3, #0
 801069a:	d008      	beq.n	80106ae <USBD_StdEPReq+0x3a>
 801069c:	e13b      	b.n	8010916 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	6839      	ldr	r1, [r7, #0]
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	4798      	blx	r3
    break;
 80106ac:	e138      	b.n	8010920 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106b6:	2b20      	cmp	r3, #32
 80106b8:	d10a      	bne.n	80106d0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106c0:	689b      	ldr	r3, [r3, #8]
 80106c2:	6839      	ldr	r1, [r7, #0]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	4798      	blx	r3
 80106c8:	4603      	mov	r3, r0
 80106ca:	73fb      	strb	r3, [r7, #15]

      return ret;
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
 80106ce:	e128      	b.n	8010922 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	785b      	ldrb	r3, [r3, #1]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d03e      	beq.n	8010756 <USBD_StdEPReq+0xe2>
 80106d8:	2b03      	cmp	r3, #3
 80106da:	d002      	beq.n	80106e2 <USBD_StdEPReq+0x6e>
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d070      	beq.n	80107c2 <USBD_StdEPReq+0x14e>
 80106e0:	e113      	b.n	801090a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	d002      	beq.n	80106f2 <USBD_StdEPReq+0x7e>
 80106ec:	2b03      	cmp	r3, #3
 80106ee:	d015      	beq.n	801071c <USBD_StdEPReq+0xa8>
 80106f0:	e02b      	b.n	801074a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106f2:	7bbb      	ldrb	r3, [r7, #14]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d00c      	beq.n	8010712 <USBD_StdEPReq+0x9e>
 80106f8:	7bbb      	ldrb	r3, [r7, #14]
 80106fa:	2b80      	cmp	r3, #128	; 0x80
 80106fc:	d009      	beq.n	8010712 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80106fe:	7bbb      	ldrb	r3, [r7, #14]
 8010700:	4619      	mov	r1, r3
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f004 fa79 	bl	8014bfa <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010708:	2180      	movs	r1, #128	; 0x80
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f004 fa75 	bl	8014bfa <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010710:	e020      	b.n	8010754 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010712:	6839      	ldr	r1, [r7, #0]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fbab 	bl	8010e70 <USBD_CtlError>
        break;
 801071a:	e01b      	b.n	8010754 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	885b      	ldrh	r3, [r3, #2]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10e      	bne.n	8010742 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010724:	7bbb      	ldrb	r3, [r7, #14]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d00b      	beq.n	8010742 <USBD_StdEPReq+0xce>
 801072a:	7bbb      	ldrb	r3, [r7, #14]
 801072c:	2b80      	cmp	r3, #128	; 0x80
 801072e:	d008      	beq.n	8010742 <USBD_StdEPReq+0xce>
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	88db      	ldrh	r3, [r3, #6]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d104      	bne.n	8010742 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010738:	7bbb      	ldrb	r3, [r7, #14]
 801073a:	4619      	mov	r1, r3
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f004 fa5c 	bl	8014bfa <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 fc3e 	bl	8010fc4 <USBD_CtlSendStatus>

        break;
 8010748:	e004      	b.n	8010754 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 801074a:	6839      	ldr	r1, [r7, #0]
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 fb8f 	bl	8010e70 <USBD_CtlError>
        break;
 8010752:	bf00      	nop
      }
      break;
 8010754:	e0de      	b.n	8010914 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801075c:	2b02      	cmp	r3, #2
 801075e:	d002      	beq.n	8010766 <USBD_StdEPReq+0xf2>
 8010760:	2b03      	cmp	r3, #3
 8010762:	d015      	beq.n	8010790 <USBD_StdEPReq+0x11c>
 8010764:	e026      	b.n	80107b4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010766:	7bbb      	ldrb	r3, [r7, #14]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d00c      	beq.n	8010786 <USBD_StdEPReq+0x112>
 801076c:	7bbb      	ldrb	r3, [r7, #14]
 801076e:	2b80      	cmp	r3, #128	; 0x80
 8010770:	d009      	beq.n	8010786 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010772:	7bbb      	ldrb	r3, [r7, #14]
 8010774:	4619      	mov	r1, r3
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f004 fa3f 	bl	8014bfa <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 801077c:	2180      	movs	r1, #128	; 0x80
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f004 fa3b 	bl	8014bfa <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010784:	e01c      	b.n	80107c0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8010786:	6839      	ldr	r1, [r7, #0]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fb71 	bl	8010e70 <USBD_CtlError>
        break;
 801078e:	e017      	b.n	80107c0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	885b      	ldrh	r3, [r3, #2]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d112      	bne.n	80107be <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010798:	7bbb      	ldrb	r3, [r7, #14]
 801079a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d004      	beq.n	80107ac <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80107a2:	7bbb      	ldrb	r3, [r7, #14]
 80107a4:	4619      	mov	r1, r3
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f004 fa46 	bl	8014c38 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f000 fc09 	bl	8010fc4 <USBD_CtlSendStatus>
        }
        break;
 80107b2:	e004      	b.n	80107be <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80107b4:	6839      	ldr	r1, [r7, #0]
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 fb5a 	bl	8010e70 <USBD_CtlError>
        break;
 80107bc:	e000      	b.n	80107c0 <USBD_StdEPReq+0x14c>
        break;
 80107be:	bf00      	nop
      }
      break;
 80107c0:	e0a8      	b.n	8010914 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80107c8:	2b02      	cmp	r3, #2
 80107ca:	d002      	beq.n	80107d2 <USBD_StdEPReq+0x15e>
 80107cc:	2b03      	cmp	r3, #3
 80107ce:	d031      	beq.n	8010834 <USBD_StdEPReq+0x1c0>
 80107d0:	e095      	b.n	80108fe <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107d2:	7bbb      	ldrb	r3, [r7, #14]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <USBD_StdEPReq+0x174>
 80107d8:	7bbb      	ldrb	r3, [r7, #14]
 80107da:	2b80      	cmp	r3, #128	; 0x80
 80107dc:	d004      	beq.n	80107e8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80107de:	6839      	ldr	r1, [r7, #0]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fb45 	bl	8010e70 <USBD_CtlError>
          break;
 80107e6:	e08f      	b.n	8010908 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80107e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	da0b      	bge.n	8010808 <USBD_StdEPReq+0x194>
 80107f0:	7bbb      	ldrb	r3, [r7, #14]
 80107f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107f6:	4613      	mov	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	4413      	add	r3, r2
 80107fc:	009b      	lsls	r3, r3, #2
 80107fe:	3310      	adds	r3, #16
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	4413      	add	r3, r2
 8010804:	3304      	adds	r3, #4
 8010806:	e00a      	b.n	801081e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010808:	7bbb      	ldrb	r3, [r7, #14]
 801080a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801080e:	4613      	mov	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4413      	add	r3, r2
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	4413      	add	r3, r2
 801081e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	2202      	movs	r2, #2
 801082a:	4619      	mov	r1, r3
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 fb89 	bl	8010f44 <USBD_CtlSendData>
          break;
 8010832:	e069      	b.n	8010908 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010838:	2b00      	cmp	r3, #0
 801083a:	da11      	bge.n	8010860 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	f003 020f 	and.w	r2, r3, #15
 8010842:	6879      	ldr	r1, [r7, #4]
 8010844:	4613      	mov	r3, r2
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	4413      	add	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	440b      	add	r3, r1
 801084e:	3318      	adds	r3, #24
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d117      	bne.n	8010886 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 fb09 	bl	8010e70 <USBD_CtlError>
            break;
 801085e:	e053      	b.n	8010908 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010860:	7bbb      	ldrb	r3, [r7, #14]
 8010862:	f003 020f 	and.w	r2, r3, #15
 8010866:	6879      	ldr	r1, [r7, #4]
 8010868:	4613      	mov	r3, r2
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	4413      	add	r3, r2
 801086e:	009b      	lsls	r3, r3, #2
 8010870:	440b      	add	r3, r1
 8010872:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d104      	bne.n	8010886 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801087c:	6839      	ldr	r1, [r7, #0]
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 faf6 	bl	8010e70 <USBD_CtlError>
            break;
 8010884:	e040      	b.n	8010908 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801088a:	2b00      	cmp	r3, #0
 801088c:	da0b      	bge.n	80108a6 <USBD_StdEPReq+0x232>
 801088e:	7bbb      	ldrb	r3, [r7, #14]
 8010890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010894:	4613      	mov	r3, r2
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4413      	add	r3, r2
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	3310      	adds	r3, #16
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	4413      	add	r3, r2
 80108a2:	3304      	adds	r3, #4
 80108a4:	e00a      	b.n	80108bc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80108a6:	7bbb      	ldrb	r3, [r7, #14]
 80108a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80108ac:	4613      	mov	r3, r2
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	4413      	add	r3, r2
 80108b2:	009b      	lsls	r3, r3, #2
 80108b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	4413      	add	r3, r2
 80108bc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108be:	7bbb      	ldrb	r3, [r7, #14]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <USBD_StdEPReq+0x256>
 80108c4:	7bbb      	ldrb	r3, [r7, #14]
 80108c6:	2b80      	cmp	r3, #128	; 0x80
 80108c8:	d103      	bne.n	80108d2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	2200      	movs	r2, #0
 80108ce:	601a      	str	r2, [r3, #0]
 80108d0:	e00e      	b.n	80108f0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80108d2:	7bbb      	ldrb	r3, [r7, #14]
 80108d4:	4619      	mov	r1, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f004 f9cd 	bl	8014c76 <USBD_LL_IsStallEP>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d003      	beq.n	80108ea <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	2201      	movs	r2, #1
 80108e6:	601a      	str	r2, [r3, #0]
 80108e8:	e002      	b.n	80108f0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2202      	movs	r2, #2
 80108f4:	4619      	mov	r1, r3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fb24 	bl	8010f44 <USBD_CtlSendData>
          break;
 80108fc:	e004      	b.n	8010908 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 fab5 	bl	8010e70 <USBD_CtlError>
        break;
 8010906:	bf00      	nop
      }
      break;
 8010908:	e004      	b.n	8010914 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 801090a:	6839      	ldr	r1, [r7, #0]
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f000 faaf 	bl	8010e70 <USBD_CtlError>
      break;
 8010912:	bf00      	nop
    }
    break;
 8010914:	e004      	b.n	8010920 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 faa9 	bl	8010e70 <USBD_CtlError>
    break;
 801091e:	bf00      	nop
  }

  return ret;
 8010920:	7bfb      	ldrb	r3, [r7, #15]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
	...

0801092c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	885b      	ldrh	r3, [r3, #2]
 801093a:	0a1b      	lsrs	r3, r3, #8
 801093c:	b29b      	uxth	r3, r3
 801093e:	3b01      	subs	r3, #1
 8010940:	2b06      	cmp	r3, #6
 8010942:	f200 80c9 	bhi.w	8010ad8 <USBD_GetDescriptor+0x1ac>
 8010946:	a201      	add	r2, pc, #4	; (adr r2, 801094c <USBD_GetDescriptor+0x20>)
 8010948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801094c:	08010969 	.word	0x08010969
 8010950:	08010981 	.word	0x08010981
 8010954:	080109c1 	.word	0x080109c1
 8010958:	08010ad9 	.word	0x08010ad9
 801095c:	08010ad9 	.word	0x08010ad9
 8010960:	08010a85 	.word	0x08010a85
 8010964:	08010aab 	.word	0x08010aab
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	7c12      	ldrb	r2, [r2, #16]
 8010974:	f107 010a 	add.w	r1, r7, #10
 8010978:	4610      	mov	r0, r2
 801097a:	4798      	blx	r3
 801097c:	60f8      	str	r0, [r7, #12]
    break;
 801097e:	e0b0      	b.n	8010ae2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	7c1b      	ldrb	r3, [r3, #16]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10d      	bne.n	80109a4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010990:	f107 020a 	add.w	r2, r7, #10
 8010994:	4610      	mov	r0, r2
 8010996:	4798      	blx	r3
 8010998:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	3301      	adds	r3, #1
 801099e:	2202      	movs	r2, #2
 80109a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80109a2:	e09e      	b.n	8010ae2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ac:	f107 020a 	add.w	r2, r7, #10
 80109b0:	4610      	mov	r0, r2
 80109b2:	4798      	blx	r3
 80109b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	3301      	adds	r3, #1
 80109ba:	2202      	movs	r2, #2
 80109bc:	701a      	strb	r2, [r3, #0]
    break;
 80109be:	e090      	b.n	8010ae2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	885b      	ldrh	r3, [r3, #2]
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	2b05      	cmp	r3, #5
 80109c8:	d856      	bhi.n	8010a78 <USBD_GetDescriptor+0x14c>
 80109ca:	a201      	add	r2, pc, #4	; (adr r2, 80109d0 <USBD_GetDescriptor+0xa4>)
 80109cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d0:	080109e9 	.word	0x080109e9
 80109d4:	08010a01 	.word	0x08010a01
 80109d8:	08010a19 	.word	0x08010a19
 80109dc:	08010a31 	.word	0x08010a31
 80109e0:	08010a49 	.word	0x08010a49
 80109e4:	08010a61 	.word	0x08010a61
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	7c12      	ldrb	r2, [r2, #16]
 80109f4:	f107 010a 	add.w	r1, r7, #10
 80109f8:	4610      	mov	r0, r2
 80109fa:	4798      	blx	r3
 80109fc:	60f8      	str	r0, [r7, #12]
      break;
 80109fe:	e040      	b.n	8010a82 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	7c12      	ldrb	r2, [r2, #16]
 8010a0c:	f107 010a 	add.w	r1, r7, #10
 8010a10:	4610      	mov	r0, r2
 8010a12:	4798      	blx	r3
 8010a14:	60f8      	str	r0, [r7, #12]
      break;
 8010a16:	e034      	b.n	8010a82 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	7c12      	ldrb	r2, [r2, #16]
 8010a24:	f107 010a 	add.w	r1, r7, #10
 8010a28:	4610      	mov	r0, r2
 8010a2a:	4798      	blx	r3
 8010a2c:	60f8      	str	r0, [r7, #12]
      break;
 8010a2e:	e028      	b.n	8010a82 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a36:	691b      	ldr	r3, [r3, #16]
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	7c12      	ldrb	r2, [r2, #16]
 8010a3c:	f107 010a 	add.w	r1, r7, #10
 8010a40:	4610      	mov	r0, r2
 8010a42:	4798      	blx	r3
 8010a44:	60f8      	str	r0, [r7, #12]
      break;
 8010a46:	e01c      	b.n	8010a82 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a4e:	695b      	ldr	r3, [r3, #20]
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	7c12      	ldrb	r2, [r2, #16]
 8010a54:	f107 010a 	add.w	r1, r7, #10
 8010a58:	4610      	mov	r0, r2
 8010a5a:	4798      	blx	r3
 8010a5c:	60f8      	str	r0, [r7, #12]
      break;
 8010a5e:	e010      	b.n	8010a82 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010a66:	699b      	ldr	r3, [r3, #24]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	7c12      	ldrb	r2, [r2, #16]
 8010a6c:	f107 010a 	add.w	r1, r7, #10
 8010a70:	4610      	mov	r0, r2
 8010a72:	4798      	blx	r3
 8010a74:	60f8      	str	r0, [r7, #12]
      break;
 8010a76:	e004      	b.n	8010a82 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010a78:	6839      	ldr	r1, [r7, #0]
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 f9f8 	bl	8010e70 <USBD_CtlError>
      return;
 8010a80:	e04b      	b.n	8010b1a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8010a82:	e02e      	b.n	8010ae2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	7c1b      	ldrb	r3, [r3, #16]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d109      	bne.n	8010aa0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a94:	f107 020a 	add.w	r2, r7, #10
 8010a98:	4610      	mov	r0, r2
 8010a9a:	4798      	blx	r3
 8010a9c:	60f8      	str	r0, [r7, #12]
      break;
 8010a9e:	e020      	b.n	8010ae2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010aa0:	6839      	ldr	r1, [r7, #0]
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f9e4 	bl	8010e70 <USBD_CtlError>
      return;
 8010aa8:	e037      	b.n	8010b1a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	7c1b      	ldrb	r3, [r3, #16]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d10d      	bne.n	8010ace <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aba:	f107 020a 	add.w	r2, r7, #10
 8010abe:	4610      	mov	r0, r2
 8010ac0:	4798      	blx	r3
 8010ac2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	2207      	movs	r2, #7
 8010aca:	701a      	strb	r2, [r3, #0]
      break;
 8010acc:	e009      	b.n	8010ae2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010ace:	6839      	ldr	r1, [r7, #0]
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f000 f9cd 	bl	8010e70 <USBD_CtlError>
      return;
 8010ad6:	e020      	b.n	8010b1a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010ad8:	6839      	ldr	r1, [r7, #0]
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f9c8 	bl	8010e70 <USBD_CtlError>
    return;
 8010ae0:	e01b      	b.n	8010b1a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010ae2:	897b      	ldrh	r3, [r7, #10]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d011      	beq.n	8010b0c <USBD_GetDescriptor+0x1e0>
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	88db      	ldrh	r3, [r3, #6]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00d      	beq.n	8010b0c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	88da      	ldrh	r2, [r3, #6]
 8010af4:	897b      	ldrh	r3, [r7, #10]
 8010af6:	4293      	cmp	r3, r2
 8010af8:	bf28      	it	cs
 8010afa:	4613      	movcs	r3, r2
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010b00:	897b      	ldrh	r3, [r7, #10]
 8010b02:	461a      	mov	r2, r3
 8010b04:	68f9      	ldr	r1, [r7, #12]
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fa1c 	bl	8010f44 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	88db      	ldrh	r3, [r3, #6]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d102      	bne.n	8010b1a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f000 fa55 	bl	8010fc4 <USBD_CtlSendStatus>
  }
}
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	889b      	ldrh	r3, [r3, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d130      	bne.n	8010b94 <USBD_SetAddress+0x74>
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	88db      	ldrh	r3, [r3, #6]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d12c      	bne.n	8010b94 <USBD_SetAddress+0x74>
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	885b      	ldrh	r3, [r3, #2]
 8010b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8010b40:	d828      	bhi.n	8010b94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	885b      	ldrh	r3, [r3, #2]
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b54:	2b03      	cmp	r3, #3
 8010b56:	d104      	bne.n	8010b62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 f988 	bl	8010e70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b60:	e01c      	b.n	8010b9c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	7bfa      	ldrb	r2, [r7, #15]
 8010b66:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010b6a:	7bfb      	ldrb	r3, [r7, #15]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f004 f8ad 	bl	8014cce <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 fa25 	bl	8010fc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010b7a:	7bfb      	ldrb	r3, [r7, #15]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d004      	beq.n	8010b8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2202      	movs	r2, #2
 8010b84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b88:	e008      	b.n	8010b9c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b92:	e003      	b.n	8010b9c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010b94:	6839      	ldr	r1, [r7, #0]
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 f96a 	bl	8010e70 <USBD_CtlError>
  }
}
 8010b9c:	bf00      	nop
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	885b      	ldrh	r3, [r3, #2]
 8010bb2:	b2da      	uxtb	r2, r3
 8010bb4:	4b41      	ldr	r3, [pc, #260]	; (8010cbc <USBD_SetConfig+0x118>)
 8010bb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010bb8:	4b40      	ldr	r3, [pc, #256]	; (8010cbc <USBD_SetConfig+0x118>)
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d904      	bls.n	8010bca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f954 	bl	8010e70 <USBD_CtlError>
 8010bc8:	e075      	b.n	8010cb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010bd0:	2b02      	cmp	r3, #2
 8010bd2:	d002      	beq.n	8010bda <USBD_SetConfig+0x36>
 8010bd4:	2b03      	cmp	r3, #3
 8010bd6:	d023      	beq.n	8010c20 <USBD_SetConfig+0x7c>
 8010bd8:	e062      	b.n	8010ca0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8010bda:	4b38      	ldr	r3, [pc, #224]	; (8010cbc <USBD_SetConfig+0x118>)
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d01a      	beq.n	8010c18 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8010be2:	4b36      	ldr	r3, [pc, #216]	; (8010cbc <USBD_SetConfig+0x118>)
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	461a      	mov	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2203      	movs	r2, #3
 8010bf0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010bf4:	4b31      	ldr	r3, [pc, #196]	; (8010cbc <USBD_SetConfig+0x118>)
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f7ff fa68 	bl	80100d0 <USBD_SetClassConfig>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b02      	cmp	r3, #2
 8010c04:	d104      	bne.n	8010c10 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8010c06:	6839      	ldr	r1, [r7, #0]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 f931 	bl	8010e70 <USBD_CtlError>
          return;
 8010c0e:	e052      	b.n	8010cb6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f9d7 	bl	8010fc4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010c16:	e04e      	b.n	8010cb6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 f9d3 	bl	8010fc4 <USBD_CtlSendStatus>
      break;
 8010c1e:	e04a      	b.n	8010cb6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010c20:	4b26      	ldr	r3, [pc, #152]	; (8010cbc <USBD_SetConfig+0x118>)
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d112      	bne.n	8010c4e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2202      	movs	r2, #2
 8010c2c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8010c30:	4b22      	ldr	r3, [pc, #136]	; (8010cbc <USBD_SetConfig+0x118>)
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	461a      	mov	r2, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8010c3a:	4b20      	ldr	r3, [pc, #128]	; (8010cbc <USBD_SetConfig+0x118>)
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff fa64 	bl	801010e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 f9bc 	bl	8010fc4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010c4c:	e033      	b.n	8010cb6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8010c4e:	4b1b      	ldr	r3, [pc, #108]	; (8010cbc <USBD_SetConfig+0x118>)
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	461a      	mov	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d01d      	beq.n	8010c98 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	4619      	mov	r1, r3
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7ff fa52 	bl	801010e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010c6a:	4b14      	ldr	r3, [pc, #80]	; (8010cbc <USBD_SetConfig+0x118>)
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010c74:	4b11      	ldr	r3, [pc, #68]	; (8010cbc <USBD_SetConfig+0x118>)
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7ff fa28 	bl	80100d0 <USBD_SetClassConfig>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d104      	bne.n	8010c90 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8010c86:	6839      	ldr	r1, [r7, #0]
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 f8f1 	bl	8010e70 <USBD_CtlError>
          return;
 8010c8e:	e012      	b.n	8010cb6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 f997 	bl	8010fc4 <USBD_CtlSendStatus>
      break;
 8010c96:	e00e      	b.n	8010cb6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 f993 	bl	8010fc4 <USBD_CtlSendStatus>
      break;
 8010c9e:	e00a      	b.n	8010cb6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8010ca0:	6839      	ldr	r1, [r7, #0]
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 f8e4 	bl	8010e70 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010ca8:	4b04      	ldr	r3, [pc, #16]	; (8010cbc <USBD_SetConfig+0x118>)
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	4619      	mov	r1, r3
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f7ff fa2d 	bl	801010e <USBD_ClrClassConfig>
      break;
 8010cb4:	bf00      	nop
    }
  }
}
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	2000047f 	.word	0x2000047f

08010cc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	88db      	ldrh	r3, [r3, #6]
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d004      	beq.n	8010cdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8010cd2:	6839      	ldr	r1, [r7, #0]
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 f8cb 	bl	8010e70 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8010cda:	e021      	b.n	8010d20 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	db17      	blt.n	8010d16 <USBD_GetConfig+0x56>
 8010ce6:	2b02      	cmp	r3, #2
 8010ce8:	dd02      	ble.n	8010cf0 <USBD_GetConfig+0x30>
 8010cea:	2b03      	cmp	r3, #3
 8010cec:	d00b      	beq.n	8010d06 <USBD_GetConfig+0x46>
 8010cee:	e012      	b.n	8010d16 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	3308      	adds	r3, #8
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f920 	bl	8010f44 <USBD_CtlSendData>
      break;
 8010d04:	e00c      	b.n	8010d20 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	3304      	adds	r3, #4
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f000 f918 	bl	8010f44 <USBD_CtlSendData>
      break;
 8010d14:	e004      	b.n	8010d20 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f8a9 	bl	8010e70 <USBD_CtlError>
      break;
 8010d1e:	bf00      	nop
}
 8010d20:	bf00      	nop
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010d38:	3b01      	subs	r3, #1
 8010d3a:	2b02      	cmp	r3, #2
 8010d3c:	d81e      	bhi.n	8010d7c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	88db      	ldrh	r3, [r3, #6]
 8010d42:	2b02      	cmp	r3, #2
 8010d44:	d004      	beq.n	8010d50 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010d46:	6839      	ldr	r1, [r7, #0]
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f891 	bl	8010e70 <USBD_CtlError>
      break;
 8010d4e:	e01a      	b.n	8010d86 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2201      	movs	r2, #1
 8010d54:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d005      	beq.n	8010d6c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	f043 0202 	orr.w	r2, r3, #2
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	330c      	adds	r3, #12
 8010d70:	2202      	movs	r2, #2
 8010d72:	4619      	mov	r1, r3
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 f8e5 	bl	8010f44 <USBD_CtlSendData>
    break;
 8010d7a:	e004      	b.n	8010d86 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 f876 	bl	8010e70 <USBD_CtlError>
    break;
 8010d84:	bf00      	nop
  }
}
 8010d86:	bf00      	nop
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b082      	sub	sp, #8
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	885b      	ldrh	r3, [r3, #2]
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d106      	bne.n	8010dae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2201      	movs	r2, #1
 8010da4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 f90b 	bl	8010fc4 <USBD_CtlSendStatus>
  }

}
 8010dae:	bf00      	nop
 8010db0:	3708      	adds	r7, #8
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}

08010db6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b082      	sub	sp, #8
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
 8010dbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010dc6:	3b01      	subs	r3, #1
 8010dc8:	2b02      	cmp	r3, #2
 8010dca:	d80b      	bhi.n	8010de4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	885b      	ldrh	r3, [r3, #2]
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	d10c      	bne.n	8010dee <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f8f1 	bl	8010fc4 <USBD_CtlSendStatus>
    }
    break;
 8010de2:	e004      	b.n	8010dee <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 f842 	bl	8010e70 <USBD_CtlError>
    break;
 8010dec:	e000      	b.n	8010df0 <USBD_ClrFeature+0x3a>
    break;
 8010dee:	bf00      	nop
  }
}
 8010df0:	bf00      	nop
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	781a      	ldrb	r2, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	785a      	ldrb	r2, [r3, #1]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	3302      	adds	r3, #2
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	3303      	adds	r3, #3
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	021b      	lsls	r3, r3, #8
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	4413      	add	r3, r2
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	3304      	adds	r3, #4
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	b29a      	uxth	r2, r3
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	3305      	adds	r3, #5
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	021b      	lsls	r3, r3, #8
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	4413      	add	r3, r2
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	3306      	adds	r3, #6
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	3307      	adds	r3, #7
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	021b      	lsls	r3, r3, #8
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	4413      	add	r3, r2
 8010e60:	b29a      	uxth	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	80da      	strh	r2, [r3, #6]

}
 8010e66:	bf00      	nop
 8010e68:	370c      	adds	r7, #12
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bc80      	pop	{r7}
 8010e6e:	4770      	bx	lr

08010e70 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8010e7a:	2180      	movs	r1, #128	; 0x80
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f003 febc 	bl	8014bfa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8010e82:	2100      	movs	r1, #0
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f003 feb8 	bl	8014bfa <USBD_LL_StallEP>
}
 8010e8a:	bf00      	nop
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b086      	sub	sp, #24
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	60f8      	str	r0, [r7, #12]
 8010e9a:	60b9      	str	r1, [r7, #8]
 8010e9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d032      	beq.n	8010f0e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f000 f834 	bl	8010f16 <USBD_GetLen>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010ebc:	7dfb      	ldrb	r3, [r7, #23]
 8010ebe:	1c5a      	adds	r2, r3, #1
 8010ec0:	75fa      	strb	r2, [r7, #23]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	7812      	ldrb	r2, [r2, #0]
 8010ecc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010ece:	7dfb      	ldrb	r3, [r7, #23]
 8010ed0:	1c5a      	adds	r2, r3, #1
 8010ed2:	75fa      	strb	r2, [r7, #23]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	4413      	add	r3, r2
 8010eda:	2203      	movs	r2, #3
 8010edc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010ede:	e012      	b.n	8010f06 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	1c5a      	adds	r2, r3, #1
 8010ee4:	60fa      	str	r2, [r7, #12]
 8010ee6:	7dfa      	ldrb	r2, [r7, #23]
 8010ee8:	1c51      	adds	r1, r2, #1
 8010eea:	75f9      	strb	r1, [r7, #23]
 8010eec:	4611      	mov	r1, r2
 8010eee:	68ba      	ldr	r2, [r7, #8]
 8010ef0:	440a      	add	r2, r1
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010ef6:	7dfb      	ldrb	r3, [r7, #23]
 8010ef8:	1c5a      	adds	r2, r3, #1
 8010efa:	75fa      	strb	r2, [r7, #23]
 8010efc:	461a      	mov	r2, r3
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	4413      	add	r3, r2
 8010f02:	2200      	movs	r2, #0
 8010f04:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1e8      	bne.n	8010ee0 <USBD_GetString+0x4e>
    }
  }
}
 8010f0e:	bf00      	nop
 8010f10:	3718      	adds	r7, #24
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}

08010f16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010f16:	b480      	push	{r7}
 8010f18:	b085      	sub	sp, #20
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8010f22:	e005      	b.n	8010f30 <USBD_GetLen+0x1a>
    {
        len++;
 8010f24:	7bfb      	ldrb	r3, [r7, #15]
 8010f26:	3301      	adds	r3, #1
 8010f28:	73fb      	strb	r3, [r7, #15]
        buf++;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1f5      	bne.n	8010f24 <USBD_GetLen+0xe>
    }

    return len;
 8010f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bc80      	pop	{r7}
 8010f42:	4770      	bx	lr

08010f44 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2202      	movs	r2, #2
 8010f56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8010f5a:	88fa      	ldrh	r2, [r7, #6]
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010f60:	88fa      	ldrh	r2, [r7, #6]
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010f66:	88fb      	ldrh	r3, [r7, #6]
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f003 fecd 	bl	8014d0c <USBD_LL_Transmit>

  return USBD_OK;
 8010f72:	2300      	movs	r3, #0
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3710      	adds	r7, #16
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	4613      	mov	r3, r2
 8010f88:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010f8a:	88fb      	ldrh	r3, [r7, #6]
 8010f8c:	68ba      	ldr	r2, [r7, #8]
 8010f8e:	2100      	movs	r1, #0
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f003 febb 	bl	8014d0c <USBD_LL_Transmit>

  return USBD_OK;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3710      	adds	r7, #16
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	4613      	mov	r3, r2
 8010fac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010fae:	88fb      	ldrh	r3, [r7, #6]
 8010fb0:	68ba      	ldr	r2, [r7, #8]
 8010fb2:	2100      	movs	r1, #0
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	f003 fecc 	bl	8014d52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fba:	2300      	movs	r3, #0
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2204      	movs	r2, #4
 8010fd0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	2100      	movs	r1, #0
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f003 fe96 	bl	8014d0c <USBD_LL_Transmit>

  return USBD_OK;
 8010fe0:	2300      	movs	r3, #0
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3708      	adds	r7, #8
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b082      	sub	sp, #8
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2205      	movs	r2, #5
 8010ff6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	2100      	movs	r1, #0
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f003 fea6 	bl	8014d52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011006:	2300      	movs	r3, #0
}
 8011008:	4618      	mov	r0, r3
 801100a:	3708      	adds	r7, #8
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011010:	b480      	push	{r7}
 8011012:	b087      	sub	sp, #28
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	4613      	mov	r3, r2
 801101c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801101e:	2301      	movs	r3, #1
 8011020:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011022:	2300      	movs	r3, #0
 8011024:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011026:	4b1e      	ldr	r3, [pc, #120]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 8011028:	7a5b      	ldrb	r3, [r3, #9]
 801102a:	b2db      	uxtb	r3, r3
 801102c:	2b00      	cmp	r3, #0
 801102e:	d131      	bne.n	8011094 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011030:	4b1b      	ldr	r3, [pc, #108]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 8011032:	7a5b      	ldrb	r3, [r3, #9]
 8011034:	b2db      	uxtb	r3, r3
 8011036:	461a      	mov	r2, r3
 8011038:	4b19      	ldr	r3, [pc, #100]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 801103a:	2100      	movs	r1, #0
 801103c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801103e:	4b18      	ldr	r3, [pc, #96]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 8011040:	7a5b      	ldrb	r3, [r3, #9]
 8011042:	b2db      	uxtb	r3, r3
 8011044:	4a16      	ldr	r2, [pc, #88]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	4413      	add	r3, r2
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801104e:	4b14      	ldr	r3, [pc, #80]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 8011050:	7a5b      	ldrb	r3, [r3, #9]
 8011052:	b2db      	uxtb	r3, r3
 8011054:	461a      	mov	r2, r3
 8011056:	4b12      	ldr	r3, [pc, #72]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 8011058:	4413      	add	r3, r2
 801105a:	79fa      	ldrb	r2, [r7, #7]
 801105c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801105e:	4b10      	ldr	r3, [pc, #64]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 8011060:	7a5b      	ldrb	r3, [r3, #9]
 8011062:	b2db      	uxtb	r3, r3
 8011064:	1c5a      	adds	r2, r3, #1
 8011066:	b2d1      	uxtb	r1, r2
 8011068:	4a0d      	ldr	r2, [pc, #52]	; (80110a0 <FATFS_LinkDriverEx+0x90>)
 801106a:	7251      	strb	r1, [r2, #9]
 801106c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801106e:	7dbb      	ldrb	r3, [r7, #22]
 8011070:	3330      	adds	r3, #48	; 0x30
 8011072:	b2da      	uxtb	r2, r3
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	3301      	adds	r3, #1
 801107c:	223a      	movs	r2, #58	; 0x3a
 801107e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	3302      	adds	r3, #2
 8011084:	222f      	movs	r2, #47	; 0x2f
 8011086:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	3303      	adds	r3, #3
 801108c:	2200      	movs	r2, #0
 801108e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011090:	2300      	movs	r3, #0
 8011092:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011094:	7dfb      	ldrb	r3, [r7, #23]
}
 8011096:	4618      	mov	r0, r3
 8011098:	371c      	adds	r7, #28
 801109a:	46bd      	mov	sp, r7
 801109c:	bc80      	pop	{r7}
 801109e:	4770      	bx	lr
 80110a0:	20000480 	.word	0x20000480

080110a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80110ae:	2200      	movs	r2, #0
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f7ff ffac 	bl	8011010 <FATFS_LinkDriverEx>
 80110b8:	4603      	mov	r3, r0
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
	...

080110c4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110ca:	f3ef 8305 	mrs	r3, IPSR
 80110ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80110d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d10f      	bne.n	80110f6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110d6:	f3ef 8310 	mrs	r3, PRIMASK
 80110da:	607b      	str	r3, [r7, #4]
  return(result);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d109      	bne.n	80110f6 <osKernelInitialize+0x32>
 80110e2:	4b10      	ldr	r3, [pc, #64]	; (8011124 <osKernelInitialize+0x60>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b02      	cmp	r3, #2
 80110e8:	d109      	bne.n	80110fe <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80110ea:	f3ef 8311 	mrs	r3, BASEPRI
 80110ee:	603b      	str	r3, [r7, #0]
  return(result);
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d003      	beq.n	80110fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80110f6:	f06f 0305 	mvn.w	r3, #5
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	e00c      	b.n	8011118 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80110fe:	4b09      	ldr	r3, [pc, #36]	; (8011124 <osKernelInitialize+0x60>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d105      	bne.n	8011112 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8011106:	4b07      	ldr	r3, [pc, #28]	; (8011124 <osKernelInitialize+0x60>)
 8011108:	2201      	movs	r2, #1
 801110a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801110c:	2300      	movs	r3, #0
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	e002      	b.n	8011118 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011112:	f04f 33ff 	mov.w	r3, #4294967295
 8011116:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011118:	68fb      	ldr	r3, [r7, #12]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	bc80      	pop	{r7}
 8011122:	4770      	bx	lr
 8011124:	2000048c 	.word	0x2000048c

08011128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801112e:	f3ef 8305 	mrs	r3, IPSR
 8011132:	60bb      	str	r3, [r7, #8]
  return(result);
 8011134:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011136:	2b00      	cmp	r3, #0
 8011138:	d10f      	bne.n	801115a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801113a:	f3ef 8310 	mrs	r3, PRIMASK
 801113e:	607b      	str	r3, [r7, #4]
  return(result);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d109      	bne.n	801115a <osKernelStart+0x32>
 8011146:	4b11      	ldr	r3, [pc, #68]	; (801118c <osKernelStart+0x64>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b02      	cmp	r3, #2
 801114c:	d109      	bne.n	8011162 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801114e:	f3ef 8311 	mrs	r3, BASEPRI
 8011152:	603b      	str	r3, [r7, #0]
  return(result);
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d003      	beq.n	8011162 <osKernelStart+0x3a>
    stat = osErrorISR;
 801115a:	f06f 0305 	mvn.w	r3, #5
 801115e:	60fb      	str	r3, [r7, #12]
 8011160:	e00e      	b.n	8011180 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8011162:	4b0a      	ldr	r3, [pc, #40]	; (801118c <osKernelStart+0x64>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b01      	cmp	r3, #1
 8011168:	d107      	bne.n	801117a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 801116a:	4b08      	ldr	r3, [pc, #32]	; (801118c <osKernelStart+0x64>)
 801116c:	2202      	movs	r2, #2
 801116e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8011170:	f001 fd04 	bl	8012b7c <vTaskStartScheduler>
      stat = osOK;
 8011174:	2300      	movs	r3, #0
 8011176:	60fb      	str	r3, [r7, #12]
 8011178:	e002      	b.n	8011180 <osKernelStart+0x58>
    } else {
      stat = osError;
 801117a:	f04f 33ff 	mov.w	r3, #4294967295
 801117e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011180:	68fb      	ldr	r3, [r7, #12]
}
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	2000048c 	.word	0x2000048c

08011190 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011190:	b580      	push	{r7, lr}
 8011192:	b092      	sub	sp, #72	; 0x48
 8011194:	af04      	add	r7, sp, #16
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801119c:	2300      	movs	r3, #0
 801119e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111a0:	f3ef 8305 	mrs	r3, IPSR
 80111a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80111a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f040 8094 	bne.w	80112d6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111ae:	f3ef 8310 	mrs	r3, PRIMASK
 80111b2:	623b      	str	r3, [r7, #32]
  return(result);
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f040 808d 	bne.w	80112d6 <osThreadNew+0x146>
 80111bc:	4b48      	ldr	r3, [pc, #288]	; (80112e0 <osThreadNew+0x150>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2b02      	cmp	r3, #2
 80111c2:	d106      	bne.n	80111d2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111c4:	f3ef 8311 	mrs	r3, BASEPRI
 80111c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f040 8082 	bne.w	80112d6 <osThreadNew+0x146>
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d07e      	beq.n	80112d6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80111d8:	2380      	movs	r3, #128	; 0x80
 80111da:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80111dc:	2318      	movs	r3, #24
 80111de:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80111e0:	2300      	movs	r3, #0
 80111e2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80111e4:	f107 031b 	add.w	r3, r7, #27
 80111e8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80111ea:	f04f 33ff 	mov.w	r3, #4294967295
 80111ee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d045      	beq.n	8011282 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d002      	beq.n	8011204 <osThreadNew+0x74>
        name = attr->name;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	699b      	ldr	r3, [r3, #24]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d002      	beq.n	8011212 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	699b      	ldr	r3, [r3, #24]
 8011210:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d008      	beq.n	801122a <osThreadNew+0x9a>
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	2b38      	cmp	r3, #56	; 0x38
 801121c:	d805      	bhi.n	801122a <osThreadNew+0x9a>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	f003 0301 	and.w	r3, r3, #1
 8011226:	2b00      	cmp	r3, #0
 8011228:	d001      	beq.n	801122e <osThreadNew+0x9e>
        return (NULL);
 801122a:	2300      	movs	r3, #0
 801122c:	e054      	b.n	80112d8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	695b      	ldr	r3, [r3, #20]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d003      	beq.n	801123e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	695b      	ldr	r3, [r3, #20]
 801123a:	089b      	lsrs	r3, r3, #2
 801123c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00e      	beq.n	8011264 <osThreadNew+0xd4>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	2b63      	cmp	r3, #99	; 0x63
 801124c:	d90a      	bls.n	8011264 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011252:	2b00      	cmp	r3, #0
 8011254:	d006      	beq.n	8011264 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	695b      	ldr	r3, [r3, #20]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d002      	beq.n	8011264 <osThreadNew+0xd4>
        mem = 1;
 801125e:	2301      	movs	r3, #1
 8011260:	62bb      	str	r3, [r7, #40]	; 0x28
 8011262:	e010      	b.n	8011286 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10c      	bne.n	8011286 <osThreadNew+0xf6>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d108      	bne.n	8011286 <osThreadNew+0xf6>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d104      	bne.n	8011286 <osThreadNew+0xf6>
          mem = 0;
 801127c:	2300      	movs	r3, #0
 801127e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011280:	e001      	b.n	8011286 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8011282:	2300      	movs	r3, #0
 8011284:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8011286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011288:	2b01      	cmp	r3, #1
 801128a:	d110      	bne.n	80112ae <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011294:	9202      	str	r2, [sp, #8]
 8011296:	9301      	str	r3, [sp, #4]
 8011298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f001 fa9c 	bl	80127e0 <xTaskCreateStatic>
 80112a8:	4603      	mov	r3, r0
 80112aa:	617b      	str	r3, [r7, #20]
 80112ac:	e013      	b.n	80112d6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80112ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d110      	bne.n	80112d6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80112b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	f107 0314 	add.w	r3, r7, #20
 80112bc:	9301      	str	r3, [sp, #4]
 80112be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c0:	9300      	str	r3, [sp, #0]
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112c6:	68f8      	ldr	r0, [r7, #12]
 80112c8:	f001 fae3 	bl	8012892 <xTaskCreate>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d001      	beq.n	80112d6 <osThreadNew+0x146>
          hTask = NULL;
 80112d2:	2300      	movs	r3, #0
 80112d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80112d6:	697b      	ldr	r3, [r7, #20]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3738      	adds	r7, #56	; 0x38
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	2000048c 	.word	0x2000048c

080112e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b086      	sub	sp, #24
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112ec:	f3ef 8305 	mrs	r3, IPSR
 80112f0:	613b      	str	r3, [r7, #16]
  return(result);
 80112f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d10f      	bne.n	8011318 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112f8:	f3ef 8310 	mrs	r3, PRIMASK
 80112fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d109      	bne.n	8011318 <osDelay+0x34>
 8011304:	4b0d      	ldr	r3, [pc, #52]	; (801133c <osDelay+0x58>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b02      	cmp	r3, #2
 801130a:	d109      	bne.n	8011320 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801130c:	f3ef 8311 	mrs	r3, BASEPRI
 8011310:	60bb      	str	r3, [r7, #8]
  return(result);
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d003      	beq.n	8011320 <osDelay+0x3c>
    stat = osErrorISR;
 8011318:	f06f 0305 	mvn.w	r3, #5
 801131c:	617b      	str	r3, [r7, #20]
 801131e:	e007      	b.n	8011330 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011320:	2300      	movs	r3, #0
 8011322:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d002      	beq.n	8011330 <osDelay+0x4c>
      vTaskDelay(ticks);
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f001 fbf2 	bl	8012b14 <vTaskDelay>
    }
  }

  return (stat);
 8011330:	697b      	ldr	r3, [r7, #20]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3718      	adds	r7, #24
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	2000048c 	.word	0x2000048c

08011340 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011340:	b580      	push	{r7, lr}
 8011342:	b08a      	sub	sp, #40	; 0x28
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8011348:	2300      	movs	r3, #0
 801134a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801134c:	f3ef 8305 	mrs	r3, IPSR
 8011350:	613b      	str	r3, [r7, #16]
  return(result);
 8011352:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8011354:	2b00      	cmp	r3, #0
 8011356:	f040 8085 	bne.w	8011464 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801135a:	f3ef 8310 	mrs	r3, PRIMASK
 801135e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d17e      	bne.n	8011464 <osMutexNew+0x124>
 8011366:	4b42      	ldr	r3, [pc, #264]	; (8011470 <osMutexNew+0x130>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b02      	cmp	r3, #2
 801136c:	d105      	bne.n	801137a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801136e:	f3ef 8311 	mrs	r3, BASEPRI
 8011372:	60bb      	str	r3, [r7, #8]
  return(result);
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d174      	bne.n	8011464 <osMutexNew+0x124>
    if (attr != NULL) {
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d003      	beq.n	8011388 <osMutexNew+0x48>
      type = attr->attr_bits;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	623b      	str	r3, [r7, #32]
 8011386:	e001      	b.n	801138c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8011388:	2300      	movs	r3, #0
 801138a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801138c:	6a3b      	ldr	r3, [r7, #32]
 801138e:	f003 0301 	and.w	r3, r3, #1
 8011392:	2b00      	cmp	r3, #0
 8011394:	d002      	beq.n	801139c <osMutexNew+0x5c>
      rmtx = 1U;
 8011396:	2301      	movs	r3, #1
 8011398:	61fb      	str	r3, [r7, #28]
 801139a:	e001      	b.n	80113a0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 801139c:	2300      	movs	r3, #0
 801139e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80113a0:	6a3b      	ldr	r3, [r7, #32]
 80113a2:	f003 0308 	and.w	r3, r3, #8
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d15c      	bne.n	8011464 <osMutexNew+0x124>
      mem = -1;
 80113aa:	f04f 33ff 	mov.w	r3, #4294967295
 80113ae:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d015      	beq.n	80113e2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d006      	beq.n	80113cc <osMutexNew+0x8c>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	2b4f      	cmp	r3, #79	; 0x4f
 80113c4:	d902      	bls.n	80113cc <osMutexNew+0x8c>
          mem = 1;
 80113c6:	2301      	movs	r3, #1
 80113c8:	61bb      	str	r3, [r7, #24]
 80113ca:	e00c      	b.n	80113e6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d108      	bne.n	80113e6 <osMutexNew+0xa6>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d104      	bne.n	80113e6 <osMutexNew+0xa6>
            mem = 0;
 80113dc:	2300      	movs	r3, #0
 80113de:	61bb      	str	r3, [r7, #24]
 80113e0:	e001      	b.n	80113e6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d112      	bne.n	8011412 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d007      	beq.n	8011402 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	4619      	mov	r1, r3
 80113f8:	2004      	movs	r0, #4
 80113fa:	f000 fbbd 	bl	8011b78 <xQueueCreateMutexStatic>
 80113fe:	6278      	str	r0, [r7, #36]	; 0x24
 8011400:	e016      	b.n	8011430 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	4619      	mov	r1, r3
 8011408:	2001      	movs	r0, #1
 801140a:	f000 fbb5 	bl	8011b78 <xQueueCreateMutexStatic>
 801140e:	6278      	str	r0, [r7, #36]	; 0x24
 8011410:	e00e      	b.n	8011430 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d10b      	bne.n	8011430 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d004      	beq.n	8011428 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801141e:	2004      	movs	r0, #4
 8011420:	f000 fb92 	bl	8011b48 <xQueueCreateMutex>
 8011424:	6278      	str	r0, [r7, #36]	; 0x24
 8011426:	e003      	b.n	8011430 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8011428:	2001      	movs	r0, #1
 801142a:	f000 fb8d 	bl	8011b48 <xQueueCreateMutex>
 801142e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00c      	beq.n	8011450 <osMutexNew+0x110>
        if (attr != NULL) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d003      	beq.n	8011444 <osMutexNew+0x104>
          name = attr->name;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	617b      	str	r3, [r7, #20]
 8011442:	e001      	b.n	8011448 <osMutexNew+0x108>
        } else {
          name = NULL;
 8011444:	2300      	movs	r3, #0
 8011446:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8011448:	6979      	ldr	r1, [r7, #20]
 801144a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801144c:	f001 f96c 	bl	8012728 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011452:	2b00      	cmp	r3, #0
 8011454:	d006      	beq.n	8011464 <osMutexNew+0x124>
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d003      	beq.n	8011464 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145e:	f043 0301 	orr.w	r3, r3, #1
 8011462:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011466:	4618      	mov	r0, r3
 8011468:	3728      	adds	r7, #40	; 0x28
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	2000048c 	.word	0x2000048c

08011474 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011474:	b580      	push	{r7, lr}
 8011476:	b088      	sub	sp, #32
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f023 0301 	bic.w	r3, r3, #1
 8011484:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801148e:	2300      	movs	r3, #0
 8011490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011492:	f3ef 8305 	mrs	r3, IPSR
 8011496:	613b      	str	r3, [r7, #16]
  return(result);
 8011498:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801149a:	2b00      	cmp	r3, #0
 801149c:	d10f      	bne.n	80114be <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801149e:	f3ef 8310 	mrs	r3, PRIMASK
 80114a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d109      	bne.n	80114be <osMutexAcquire+0x4a>
 80114aa:	4b20      	ldr	r3, [pc, #128]	; (801152c <osMutexAcquire+0xb8>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b02      	cmp	r3, #2
 80114b0:	d109      	bne.n	80114c6 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80114b2:	f3ef 8311 	mrs	r3, BASEPRI
 80114b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d003      	beq.n	80114c6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80114be:	f06f 0305 	mvn.w	r3, #5
 80114c2:	61fb      	str	r3, [r7, #28]
 80114c4:	e02c      	b.n	8011520 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d103      	bne.n	80114d4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80114cc:	f06f 0303 	mvn.w	r3, #3
 80114d0:	61fb      	str	r3, [r7, #28]
 80114d2:	e025      	b.n	8011520 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d011      	beq.n	80114fe <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80114da:	6839      	ldr	r1, [r7, #0]
 80114dc:	69b8      	ldr	r0, [r7, #24]
 80114de:	f000 fb99 	bl	8011c14 <xQueueTakeMutexRecursive>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d01b      	beq.n	8011520 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d003      	beq.n	80114f6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80114ee:	f06f 0301 	mvn.w	r3, #1
 80114f2:	61fb      	str	r3, [r7, #28]
 80114f4:	e014      	b.n	8011520 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80114f6:	f06f 0302 	mvn.w	r3, #2
 80114fa:	61fb      	str	r3, [r7, #28]
 80114fc:	e010      	b.n	8011520 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80114fe:	6839      	ldr	r1, [r7, #0]
 8011500:	69b8      	ldr	r0, [r7, #24]
 8011502:	f000 fee1 	bl	80122c8 <xQueueSemaphoreTake>
 8011506:	4603      	mov	r3, r0
 8011508:	2b01      	cmp	r3, #1
 801150a:	d009      	beq.n	8011520 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d003      	beq.n	801151a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8011512:	f06f 0301 	mvn.w	r3, #1
 8011516:	61fb      	str	r3, [r7, #28]
 8011518:	e002      	b.n	8011520 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801151a:	f06f 0302 	mvn.w	r3, #2
 801151e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011520:	69fb      	ldr	r3, [r7, #28]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3720      	adds	r7, #32
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	2000048c 	.word	0x2000048c

08011530 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f023 0301 	bic.w	r3, r3, #1
 801153e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f003 0301 	and.w	r3, r3, #1
 8011546:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8011548:	2300      	movs	r3, #0
 801154a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801154c:	f3ef 8305 	mrs	r3, IPSR
 8011550:	613b      	str	r3, [r7, #16]
  return(result);
 8011552:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8011554:	2b00      	cmp	r3, #0
 8011556:	d10f      	bne.n	8011578 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011558:	f3ef 8310 	mrs	r3, PRIMASK
 801155c:	60fb      	str	r3, [r7, #12]
  return(result);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d109      	bne.n	8011578 <osMutexRelease+0x48>
 8011564:	4b19      	ldr	r3, [pc, #100]	; (80115cc <osMutexRelease+0x9c>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b02      	cmp	r3, #2
 801156a:	d109      	bne.n	8011580 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801156c:	f3ef 8311 	mrs	r3, BASEPRI
 8011570:	60bb      	str	r3, [r7, #8]
  return(result);
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d003      	beq.n	8011580 <osMutexRelease+0x50>
    stat = osErrorISR;
 8011578:	f06f 0305 	mvn.w	r3, #5
 801157c:	61fb      	str	r3, [r7, #28]
 801157e:	e01f      	b.n	80115c0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d103      	bne.n	801158e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8011586:	f06f 0303 	mvn.w	r3, #3
 801158a:	61fb      	str	r3, [r7, #28]
 801158c:	e018      	b.n	80115c0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d009      	beq.n	80115a8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011594:	69b8      	ldr	r0, [r7, #24]
 8011596:	f000 fb0a 	bl	8011bae <xQueueGiveMutexRecursive>
 801159a:	4603      	mov	r3, r0
 801159c:	2b01      	cmp	r3, #1
 801159e:	d00f      	beq.n	80115c0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80115a0:	f06f 0302 	mvn.w	r3, #2
 80115a4:	61fb      	str	r3, [r7, #28]
 80115a6:	e00b      	b.n	80115c0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80115a8:	2300      	movs	r3, #0
 80115aa:	2200      	movs	r2, #0
 80115ac:	2100      	movs	r1, #0
 80115ae:	69b8      	ldr	r0, [r7, #24]
 80115b0:	f000 fb96 	bl	8011ce0 <xQueueGenericSend>
 80115b4:	4603      	mov	r3, r0
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d002      	beq.n	80115c0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80115ba:	f06f 0302 	mvn.w	r3, #2
 80115be:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80115c0:	69fb      	ldr	r3, [r7, #28]
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3720      	adds	r7, #32
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	2000048c 	.word	0x2000048c

080115d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b08c      	sub	sp, #48	; 0x30
 80115d4:	af02      	add	r7, sp, #8
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80115dc:	2300      	movs	r3, #0
 80115de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115e0:	f3ef 8305 	mrs	r3, IPSR
 80115e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80115e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d170      	bne.n	80116ce <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115ec:	f3ef 8310 	mrs	r3, PRIMASK
 80115f0:	617b      	str	r3, [r7, #20]
  return(result);
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d16a      	bne.n	80116ce <osMessageQueueNew+0xfe>
 80115f8:	4b37      	ldr	r3, [pc, #220]	; (80116d8 <osMessageQueueNew+0x108>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d105      	bne.n	801160c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011600:	f3ef 8311 	mrs	r3, BASEPRI
 8011604:	613b      	str	r3, [r7, #16]
  return(result);
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d160      	bne.n	80116ce <osMessageQueueNew+0xfe>
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d05d      	beq.n	80116ce <osMessageQueueNew+0xfe>
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d05a      	beq.n	80116ce <osMessageQueueNew+0xfe>
    mem = -1;
 8011618:	f04f 33ff 	mov.w	r3, #4294967295
 801161c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d029      	beq.n	8011678 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d012      	beq.n	8011652 <osMessageQueueNew+0x82>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	2b4f      	cmp	r3, #79	; 0x4f
 8011632:	d90e      	bls.n	8011652 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00a      	beq.n	8011652 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	695a      	ldr	r2, [r3, #20]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	68b9      	ldr	r1, [r7, #8]
 8011644:	fb01 f303 	mul.w	r3, r1, r3
 8011648:	429a      	cmp	r2, r3
 801164a:	d302      	bcc.n	8011652 <osMessageQueueNew+0x82>
        mem = 1;
 801164c:	2301      	movs	r3, #1
 801164e:	623b      	str	r3, [r7, #32]
 8011650:	e014      	b.n	801167c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	689b      	ldr	r3, [r3, #8]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d110      	bne.n	801167c <osMessageQueueNew+0xac>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	68db      	ldr	r3, [r3, #12]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d10c      	bne.n	801167c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011666:	2b00      	cmp	r3, #0
 8011668:	d108      	bne.n	801167c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	695b      	ldr	r3, [r3, #20]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d104      	bne.n	801167c <osMessageQueueNew+0xac>
          mem = 0;
 8011672:	2300      	movs	r3, #0
 8011674:	623b      	str	r3, [r7, #32]
 8011676:	e001      	b.n	801167c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8011678:	2300      	movs	r3, #0
 801167a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801167c:	6a3b      	ldr	r3, [r7, #32]
 801167e:	2b01      	cmp	r3, #1
 8011680:	d10c      	bne.n	801169c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	691a      	ldr	r2, [r3, #16]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6899      	ldr	r1, [r3, #8]
 801168a:	2300      	movs	r3, #0
 801168c:	9300      	str	r3, [sp, #0]
 801168e:	460b      	mov	r3, r1
 8011690:	68b9      	ldr	r1, [r7, #8]
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f000 f96c 	bl	8011970 <xQueueGenericCreateStatic>
 8011698:	6278      	str	r0, [r7, #36]	; 0x24
 801169a:	e008      	b.n	80116ae <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 801169c:	6a3b      	ldr	r3, [r7, #32]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d105      	bne.n	80116ae <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80116a2:	2200      	movs	r2, #0
 80116a4:	68b9      	ldr	r1, [r7, #8]
 80116a6:	68f8      	ldr	r0, [r7, #12]
 80116a8:	f000 f9d4 	bl	8011a54 <xQueueGenericCreate>
 80116ac:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80116ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d00c      	beq.n	80116ce <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d003      	beq.n	80116c2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	61fb      	str	r3, [r7, #28]
 80116c0:	e001      	b.n	80116c6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80116c2:	2300      	movs	r3, #0
 80116c4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80116c6:	69f9      	ldr	r1, [r7, #28]
 80116c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116ca:	f001 f82d 	bl	8012728 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80116ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3728      	adds	r7, #40	; 0x28
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	2000048c 	.word	0x2000048c

080116dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80116dc:	b480      	push	{r7}
 80116de:	b085      	sub	sp, #20
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	4a06      	ldr	r2, [pc, #24]	; (8011704 <vApplicationGetIdleTaskMemory+0x28>)
 80116ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	4a05      	ldr	r2, [pc, #20]	; (8011708 <vApplicationGetIdleTaskMemory+0x2c>)
 80116f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2280      	movs	r2, #128	; 0x80
 80116f8:	601a      	str	r2, [r3, #0]
}
 80116fa:	bf00      	nop
 80116fc:	3714      	adds	r7, #20
 80116fe:	46bd      	mov	sp, r7
 8011700:	bc80      	pop	{r7}
 8011702:	4770      	bx	lr
 8011704:	20000490 	.word	0x20000490
 8011708:	200004f4 	.word	0x200004f4

0801170c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	4a07      	ldr	r2, [pc, #28]	; (8011738 <vApplicationGetTimerTaskMemory+0x2c>)
 801171c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	4a06      	ldr	r2, [pc, #24]	; (801173c <vApplicationGetTimerTaskMemory+0x30>)
 8011722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f44f 7280 	mov.w	r2, #256	; 0x100
 801172a:	601a      	str	r2, [r3, #0]
}
 801172c:	bf00      	nop
 801172e:	3714      	adds	r7, #20
 8011730:	46bd      	mov	sp, r7
 8011732:	bc80      	pop	{r7}
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	200006f4 	.word	0x200006f4
 801173c:	20000758 	.word	0x20000758

08011740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f103 0208 	add.w	r2, r3, #8
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f04f 32ff 	mov.w	r2, #4294967295
 8011758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f103 0208 	add.w	r2, r3, #8
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f103 0208 	add.w	r2, r3, #8
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011774:	bf00      	nop
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	bc80      	pop	{r7}
 801177c:	4770      	bx	lr

0801177e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801177e:	b480      	push	{r7}
 8011780:	b083      	sub	sp, #12
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2200      	movs	r2, #0
 801178a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801178c:	bf00      	nop
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	bc80      	pop	{r7}
 8011794:	4770      	bx	lr

08011796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011796:	b480      	push	{r7}
 8011798:	b085      	sub	sp, #20
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	68fa      	ldr	r2, [r7, #12]
 80117aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	689a      	ldr	r2, [r3, #8]
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	683a      	ldr	r2, [r7, #0]
 80117c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	1c5a      	adds	r2, r3, #1
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	601a      	str	r2, [r3, #0]
}
 80117d2:	bf00      	nop
 80117d4:	3714      	adds	r7, #20
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bc80      	pop	{r7}
 80117da:	4770      	bx	lr

080117dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80117dc:	b480      	push	{r7}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f2:	d103      	bne.n	80117fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	691b      	ldr	r3, [r3, #16]
 80117f8:	60fb      	str	r3, [r7, #12]
 80117fa:	e00c      	b.n	8011816 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3308      	adds	r3, #8
 8011800:	60fb      	str	r3, [r7, #12]
 8011802:	e002      	b.n	801180a <vListInsert+0x2e>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	60fb      	str	r3, [r7, #12]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	429a      	cmp	r2, r3
 8011814:	d2f6      	bcs.n	8011804 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	685a      	ldr	r2, [r3, #4]
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	683a      	ldr	r2, [r7, #0]
 8011824:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	68fa      	ldr	r2, [r7, #12]
 801182a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	683a      	ldr	r2, [r7, #0]
 8011830:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	1c5a      	adds	r2, r3, #1
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	601a      	str	r2, [r3, #0]
}
 8011842:	bf00      	nop
 8011844:	3714      	adds	r7, #20
 8011846:	46bd      	mov	sp, r7
 8011848:	bc80      	pop	{r7}
 801184a:	4770      	bx	lr

0801184c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	6892      	ldr	r2, [r2, #8]
 8011862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	689b      	ldr	r3, [r3, #8]
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	6852      	ldr	r2, [r2, #4]
 801186c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	429a      	cmp	r2, r3
 8011876:	d103      	bne.n	8011880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	689a      	ldr	r2, [r3, #8]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	1e5a      	subs	r2, r3, #1
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
}
 8011894:	4618      	mov	r0, r3
 8011896:	3714      	adds	r7, #20
 8011898:	46bd      	mov	sp, r7
 801189a:	bc80      	pop	{r7}
 801189c:	4770      	bx	lr
	...

080118a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d109      	bne.n	80118c8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80118b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b8:	f383 8811 	msr	BASEPRI, r3
 80118bc:	f3bf 8f6f 	isb	sy
 80118c0:	f3bf 8f4f 	dsb	sy
 80118c4:	60bb      	str	r3, [r7, #8]
 80118c6:	e7fe      	b.n	80118c6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80118c8:	f002 fb9e 	bl	8014008 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118d4:	68f9      	ldr	r1, [r7, #12]
 80118d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80118d8:	fb01 f303 	mul.w	r3, r1, r3
 80118dc:	441a      	add	r2, r3
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	2200      	movs	r2, #0
 80118e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118f8:	3b01      	subs	r3, #1
 80118fa:	68f9      	ldr	r1, [r7, #12]
 80118fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80118fe:	fb01 f303 	mul.w	r3, r1, r3
 8011902:	441a      	add	r2, r3
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	22ff      	movs	r2, #255	; 0xff
 801190c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	22ff      	movs	r2, #255	; 0xff
 8011914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d114      	bne.n	8011948 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	691b      	ldr	r3, [r3, #16]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d01a      	beq.n	801195c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	3310      	adds	r3, #16
 801192a:	4618      	mov	r0, r3
 801192c:	f001 fbc8 	bl	80130c0 <xTaskRemoveFromEventList>
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d012      	beq.n	801195c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011936:	4b0d      	ldr	r3, [pc, #52]	; (801196c <xQueueGenericReset+0xcc>)
 8011938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801193c:	601a      	str	r2, [r3, #0]
 801193e:	f3bf 8f4f 	dsb	sy
 8011942:	f3bf 8f6f 	isb	sy
 8011946:	e009      	b.n	801195c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	3310      	adds	r3, #16
 801194c:	4618      	mov	r0, r3
 801194e:	f7ff fef7 	bl	8011740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	3324      	adds	r3, #36	; 0x24
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff fef2 	bl	8011740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801195c:	f002 fb82 	bl	8014064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011960:	2301      	movs	r3, #1
}
 8011962:	4618      	mov	r0, r3
 8011964:	3710      	adds	r7, #16
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	e000ed04 	.word	0xe000ed04

08011970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011970:	b580      	push	{r7, lr}
 8011972:	b08e      	sub	sp, #56	; 0x38
 8011974:	af02      	add	r7, sp, #8
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
 801197c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d109      	bne.n	8011998 <xQueueGenericCreateStatic+0x28>
 8011984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011988:	f383 8811 	msr	BASEPRI, r3
 801198c:	f3bf 8f6f 	isb	sy
 8011990:	f3bf 8f4f 	dsb	sy
 8011994:	62bb      	str	r3, [r7, #40]	; 0x28
 8011996:	e7fe      	b.n	8011996 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d109      	bne.n	80119b2 <xQueueGenericCreateStatic+0x42>
 801199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a2:	f383 8811 	msr	BASEPRI, r3
 80119a6:	f3bf 8f6f 	isb	sy
 80119aa:	f3bf 8f4f 	dsb	sy
 80119ae:	627b      	str	r3, [r7, #36]	; 0x24
 80119b0:	e7fe      	b.n	80119b0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d002      	beq.n	80119be <xQueueGenericCreateStatic+0x4e>
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d001      	beq.n	80119c2 <xQueueGenericCreateStatic+0x52>
 80119be:	2301      	movs	r3, #1
 80119c0:	e000      	b.n	80119c4 <xQueueGenericCreateStatic+0x54>
 80119c2:	2300      	movs	r3, #0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d109      	bne.n	80119dc <xQueueGenericCreateStatic+0x6c>
 80119c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119cc:	f383 8811 	msr	BASEPRI, r3
 80119d0:	f3bf 8f6f 	isb	sy
 80119d4:	f3bf 8f4f 	dsb	sy
 80119d8:	623b      	str	r3, [r7, #32]
 80119da:	e7fe      	b.n	80119da <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d102      	bne.n	80119e8 <xQueueGenericCreateStatic+0x78>
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d101      	bne.n	80119ec <xQueueGenericCreateStatic+0x7c>
 80119e8:	2301      	movs	r3, #1
 80119ea:	e000      	b.n	80119ee <xQueueGenericCreateStatic+0x7e>
 80119ec:	2300      	movs	r3, #0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d109      	bne.n	8011a06 <xQueueGenericCreateStatic+0x96>
 80119f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f6:	f383 8811 	msr	BASEPRI, r3
 80119fa:	f3bf 8f6f 	isb	sy
 80119fe:	f3bf 8f4f 	dsb	sy
 8011a02:	61fb      	str	r3, [r7, #28]
 8011a04:	e7fe      	b.n	8011a04 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011a06:	2350      	movs	r3, #80	; 0x50
 8011a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b50      	cmp	r3, #80	; 0x50
 8011a0e:	d009      	beq.n	8011a24 <xQueueGenericCreateStatic+0xb4>
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	61bb      	str	r3, [r7, #24]
 8011a22:	e7fe      	b.n	8011a22 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00d      	beq.n	8011a4a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a30:	2201      	movs	r2, #1
 8011a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	4613      	mov	r3, r2
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	68b9      	ldr	r1, [r7, #8]
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f000 f842 	bl	8011ace <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3730      	adds	r7, #48	; 0x30
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b08a      	sub	sp, #40	; 0x28
 8011a58:	af02      	add	r7, sp, #8
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	4613      	mov	r3, r2
 8011a60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d109      	bne.n	8011a7c <xQueueGenericCreate+0x28>
 8011a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6c:	f383 8811 	msr	BASEPRI, r3
 8011a70:	f3bf 8f6f 	isb	sy
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	613b      	str	r3, [r7, #16]
 8011a7a:	e7fe      	b.n	8011a7a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d102      	bne.n	8011a88 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011a82:	2300      	movs	r3, #0
 8011a84:	61fb      	str	r3, [r7, #28]
 8011a86:	e004      	b.n	8011a92 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	68ba      	ldr	r2, [r7, #8]
 8011a8c:	fb02 f303 	mul.w	r3, r2, r3
 8011a90:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	3350      	adds	r3, #80	; 0x50
 8011a96:	4618      	mov	r0, r3
 8011a98:	f002 fbac 	bl	80141f4 <pvPortMalloc>
 8011a9c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00f      	beq.n	8011ac4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011aa4:	69bb      	ldr	r3, [r7, #24]
 8011aa6:	3350      	adds	r3, #80	; 0x50
 8011aa8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	2200      	movs	r2, #0
 8011aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011ab2:	79fa      	ldrb	r2, [r7, #7]
 8011ab4:	69bb      	ldr	r3, [r7, #24]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	4613      	mov	r3, r2
 8011aba:	697a      	ldr	r2, [r7, #20]
 8011abc:	68b9      	ldr	r1, [r7, #8]
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f000 f805 	bl	8011ace <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011ac4:	69bb      	ldr	r3, [r7, #24]
	}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3720      	adds	r7, #32
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b084      	sub	sp, #16
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	60f8      	str	r0, [r7, #12]
 8011ad6:	60b9      	str	r1, [r7, #8]
 8011ad8:	607a      	str	r2, [r7, #4]
 8011ada:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d103      	bne.n	8011aea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	69ba      	ldr	r2, [r7, #24]
 8011ae6:	601a      	str	r2, [r3, #0]
 8011ae8:	e002      	b.n	8011af0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	68fa      	ldr	r2, [r7, #12]
 8011af4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	68ba      	ldr	r2, [r7, #8]
 8011afa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011afc:	2101      	movs	r1, #1
 8011afe:	69b8      	ldr	r0, [r7, #24]
 8011b00:	f7ff fece 	bl	80118a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011b04:	69bb      	ldr	r3, [r7, #24]
 8011b06:	78fa      	ldrb	r2, [r7, #3]
 8011b08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011b0c:	bf00      	nop
 8011b0e:	3710      	adds	r7, #16
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d00e      	beq.n	8011b40 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2200      	movs	r2, #0
 8011b26:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2200      	movs	r2, #0
 8011b32:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011b34:	2300      	movs	r3, #0
 8011b36:	2200      	movs	r2, #0
 8011b38:	2100      	movs	r1, #0
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f000 f8d0 	bl	8011ce0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011b40:	bf00      	nop
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b086      	sub	sp, #24
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011b52:	2301      	movs	r3, #1
 8011b54:	617b      	str	r3, [r7, #20]
 8011b56:	2300      	movs	r3, #0
 8011b58:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011b5a:	79fb      	ldrb	r3, [r7, #7]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	6939      	ldr	r1, [r7, #16]
 8011b60:	6978      	ldr	r0, [r7, #20]
 8011b62:	f7ff ff77 	bl	8011a54 <xQueueGenericCreate>
 8011b66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011b68:	68f8      	ldr	r0, [r7, #12]
 8011b6a:	f7ff ffd3 	bl	8011b14 <prvInitialiseMutex>

		return pxNewQueue;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
	}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3718      	adds	r7, #24
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b088      	sub	sp, #32
 8011b7c:	af02      	add	r7, sp, #8
 8011b7e:	4603      	mov	r3, r0
 8011b80:	6039      	str	r1, [r7, #0]
 8011b82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011b84:	2301      	movs	r3, #1
 8011b86:	617b      	str	r3, [r7, #20]
 8011b88:	2300      	movs	r3, #0
 8011b8a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011b8c:	79fb      	ldrb	r3, [r7, #7]
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	2200      	movs	r2, #0
 8011b94:	6939      	ldr	r1, [r7, #16]
 8011b96:	6978      	ldr	r0, [r7, #20]
 8011b98:	f7ff feea 	bl	8011970 <xQueueGenericCreateStatic>
 8011b9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011b9e:	68f8      	ldr	r0, [r7, #12]
 8011ba0:	f7ff ffb8 	bl	8011b14 <prvInitialiseMutex>

		return pxNewQueue;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
	}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3718      	adds	r7, #24
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011bae:	b590      	push	{r4, r7, lr}
 8011bb0:	b087      	sub	sp, #28
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d109      	bne.n	8011bd4 <xQueueGiveMutexRecursive+0x26>
 8011bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc4:	f383 8811 	msr	BASEPRI, r3
 8011bc8:	f3bf 8f6f 	isb	sy
 8011bcc:	f3bf 8f4f 	dsb	sy
 8011bd0:	60fb      	str	r3, [r7, #12]
 8011bd2:	e7fe      	b.n	8011bd2 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	685c      	ldr	r4, [r3, #4]
 8011bd8:	f001 fc2c 	bl	8013434 <xTaskGetCurrentTaskHandle>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	429c      	cmp	r4, r3
 8011be0:	d111      	bne.n	8011c06 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	1e5a      	subs	r2, r3, #1
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d105      	bne.n	8011c00 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	6938      	ldr	r0, [r7, #16]
 8011bfc:	f000 f870 	bl	8011ce0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011c00:	2301      	movs	r3, #1
 8011c02:	617b      	str	r3, [r7, #20]
 8011c04:	e001      	b.n	8011c0a <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011c0a:	697b      	ldr	r3, [r7, #20]
	}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	371c      	adds	r7, #28
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd90      	pop	{r4, r7, pc}

08011c14 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011c14:	b590      	push	{r4, r7, lr}
 8011c16:	b087      	sub	sp, #28
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d109      	bne.n	8011c3c <xQueueTakeMutexRecursive+0x28>
 8011c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2c:	f383 8811 	msr	BASEPRI, r3
 8011c30:	f3bf 8f6f 	isb	sy
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	60fb      	str	r3, [r7, #12]
 8011c3a:	e7fe      	b.n	8011c3a <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	685c      	ldr	r4, [r3, #4]
 8011c40:	f001 fbf8 	bl	8013434 <xTaskGetCurrentTaskHandle>
 8011c44:	4603      	mov	r3, r0
 8011c46:	429c      	cmp	r4, r3
 8011c48:	d107      	bne.n	8011c5a <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	1c5a      	adds	r2, r3, #1
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011c54:	2301      	movs	r3, #1
 8011c56:	617b      	str	r3, [r7, #20]
 8011c58:	e00c      	b.n	8011c74 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011c5a:	6839      	ldr	r1, [r7, #0]
 8011c5c:	6938      	ldr	r0, [r7, #16]
 8011c5e:	f000 fb33 	bl	80122c8 <xQueueSemaphoreTake>
 8011c62:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d004      	beq.n	8011c74 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	1c5a      	adds	r2, r3, #1
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011c74:	697b      	ldr	r3, [r7, #20]
	}
 8011c76:	4618      	mov	r0, r3
 8011c78:	371c      	adds	r7, #28
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd90      	pop	{r4, r7, pc}

08011c7e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b086      	sub	sp, #24
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	6078      	str	r0, [r7, #4]
 8011c86:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d109      	bne.n	8011ca2 <xQueueCreateCountingSemaphore+0x24>
 8011c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	613b      	str	r3, [r7, #16]
 8011ca0:	e7fe      	b.n	8011ca0 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011ca2:	683a      	ldr	r2, [r7, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d909      	bls.n	8011cbe <xQueueCreateCountingSemaphore+0x40>
 8011caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cae:	f383 8811 	msr	BASEPRI, r3
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	60fb      	str	r3, [r7, #12]
 8011cbc:	e7fe      	b.n	8011cbc <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011cbe:	2202      	movs	r2, #2
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7ff fec6 	bl	8011a54 <xQueueGenericCreate>
 8011cc8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011cd6:	697b      	ldr	r3, [r7, #20]
	}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3718      	adds	r7, #24
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b08e      	sub	sp, #56	; 0x38
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
 8011cec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d109      	bne.n	8011d10 <xQueueGenericSend+0x30>
 8011cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d00:	f383 8811 	msr	BASEPRI, r3
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	f3bf 8f4f 	dsb	sy
 8011d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d0e:	e7fe      	b.n	8011d0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d103      	bne.n	8011d1e <xQueueGenericSend+0x3e>
 8011d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d101      	bne.n	8011d22 <xQueueGenericSend+0x42>
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e000      	b.n	8011d24 <xQueueGenericSend+0x44>
 8011d22:	2300      	movs	r3, #0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d109      	bne.n	8011d3c <xQueueGenericSend+0x5c>
 8011d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2c:	f383 8811 	msr	BASEPRI, r3
 8011d30:	f3bf 8f6f 	isb	sy
 8011d34:	f3bf 8f4f 	dsb	sy
 8011d38:	627b      	str	r3, [r7, #36]	; 0x24
 8011d3a:	e7fe      	b.n	8011d3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	d103      	bne.n	8011d4a <xQueueGenericSend+0x6a>
 8011d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d101      	bne.n	8011d4e <xQueueGenericSend+0x6e>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	e000      	b.n	8011d50 <xQueueGenericSend+0x70>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d109      	bne.n	8011d68 <xQueueGenericSend+0x88>
 8011d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d58:	f383 8811 	msr	BASEPRI, r3
 8011d5c:	f3bf 8f6f 	isb	sy
 8011d60:	f3bf 8f4f 	dsb	sy
 8011d64:	623b      	str	r3, [r7, #32]
 8011d66:	e7fe      	b.n	8011d66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d68:	f001 fb72 	bl	8013450 <xTaskGetSchedulerState>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d102      	bne.n	8011d78 <xQueueGenericSend+0x98>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d101      	bne.n	8011d7c <xQueueGenericSend+0x9c>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	e000      	b.n	8011d7e <xQueueGenericSend+0x9e>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d109      	bne.n	8011d96 <xQueueGenericSend+0xb6>
 8011d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d86:	f383 8811 	msr	BASEPRI, r3
 8011d8a:	f3bf 8f6f 	isb	sy
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	61fb      	str	r3, [r7, #28]
 8011d94:	e7fe      	b.n	8011d94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d96:	f002 f937 	bl	8014008 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d302      	bcc.n	8011dac <xQueueGenericSend+0xcc>
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	2b02      	cmp	r3, #2
 8011daa:	d129      	bne.n	8011e00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011dac:	683a      	ldr	r2, [r7, #0]
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011db2:	f000 fba8 	bl	8012506 <prvCopyDataToQueue>
 8011db6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d010      	beq.n	8011de2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc2:	3324      	adds	r3, #36	; 0x24
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f001 f97b 	bl	80130c0 <xTaskRemoveFromEventList>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d013      	beq.n	8011df8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011dd0:	4b3f      	ldr	r3, [pc, #252]	; (8011ed0 <xQueueGenericSend+0x1f0>)
 8011dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dd6:	601a      	str	r2, [r3, #0]
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	e00a      	b.n	8011df8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d007      	beq.n	8011df8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011de8:	4b39      	ldr	r3, [pc, #228]	; (8011ed0 <xQueueGenericSend+0x1f0>)
 8011dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dee:	601a      	str	r2, [r3, #0]
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011df8:	f002 f934 	bl	8014064 <vPortExitCritical>
				return pdPASS;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e063      	b.n	8011ec8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d103      	bne.n	8011e0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e06:	f002 f92d 	bl	8014064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	e05c      	b.n	8011ec8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d106      	bne.n	8011e22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e14:	f107 0314 	add.w	r3, r7, #20
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f001 f9b3 	bl	8013184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e22:	f002 f91f 	bl	8014064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e26:	f000 ff0f 	bl	8012c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e2a:	f002 f8ed 	bl	8014008 <vPortEnterCritical>
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e34:	b25b      	sxtb	r3, r3
 8011e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e3a:	d103      	bne.n	8011e44 <xQueueGenericSend+0x164>
 8011e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3e:	2200      	movs	r2, #0
 8011e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e4a:	b25b      	sxtb	r3, r3
 8011e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e50:	d103      	bne.n	8011e5a <xQueueGenericSend+0x17a>
 8011e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e54:	2200      	movs	r2, #0
 8011e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e5a:	f002 f903 	bl	8014064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e5e:	1d3a      	adds	r2, r7, #4
 8011e60:	f107 0314 	add.w	r3, r7, #20
 8011e64:	4611      	mov	r1, r2
 8011e66:	4618      	mov	r0, r3
 8011e68:	f001 f9a2 	bl	80131b0 <xTaskCheckForTimeOut>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d124      	bne.n	8011ebc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e74:	f000 fc3f 	bl	80126f6 <prvIsQueueFull>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d018      	beq.n	8011eb0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e80:	3310      	adds	r3, #16
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	4611      	mov	r1, r2
 8011e86:	4618      	mov	r0, r3
 8011e88:	f001 f8cc 	bl	8013024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e8e:	f000 fbca 	bl	8012626 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011e92:	f000 fee7 	bl	8012c64 <xTaskResumeAll>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f47f af7c 	bne.w	8011d96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011e9e:	4b0c      	ldr	r3, [pc, #48]	; (8011ed0 <xQueueGenericSend+0x1f0>)
 8011ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ea4:	601a      	str	r2, [r3, #0]
 8011ea6:	f3bf 8f4f 	dsb	sy
 8011eaa:	f3bf 8f6f 	isb	sy
 8011eae:	e772      	b.n	8011d96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eb2:	f000 fbb8 	bl	8012626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011eb6:	f000 fed5 	bl	8012c64 <xTaskResumeAll>
 8011eba:	e76c      	b.n	8011d96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ebe:	f000 fbb2 	bl	8012626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ec2:	f000 fecf 	bl	8012c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011ec6:	2300      	movs	r3, #0
		}
	}
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3738      	adds	r7, #56	; 0x38
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	e000ed04 	.word	0xe000ed04

08011ed4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b08e      	sub	sp, #56	; 0x38
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	60f8      	str	r0, [r7, #12]
 8011edc:	60b9      	str	r1, [r7, #8]
 8011ede:	607a      	str	r2, [r7, #4]
 8011ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d109      	bne.n	8011f00 <xQueueGenericSendFromISR+0x2c>
 8011eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef0:	f383 8811 	msr	BASEPRI, r3
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	f3bf 8f4f 	dsb	sy
 8011efc:	627b      	str	r3, [r7, #36]	; 0x24
 8011efe:	e7fe      	b.n	8011efe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d103      	bne.n	8011f0e <xQueueGenericSendFromISR+0x3a>
 8011f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d101      	bne.n	8011f12 <xQueueGenericSendFromISR+0x3e>
 8011f0e:	2301      	movs	r3, #1
 8011f10:	e000      	b.n	8011f14 <xQueueGenericSendFromISR+0x40>
 8011f12:	2300      	movs	r3, #0
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d109      	bne.n	8011f2c <xQueueGenericSendFromISR+0x58>
 8011f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f1c:	f383 8811 	msr	BASEPRI, r3
 8011f20:	f3bf 8f6f 	isb	sy
 8011f24:	f3bf 8f4f 	dsb	sy
 8011f28:	623b      	str	r3, [r7, #32]
 8011f2a:	e7fe      	b.n	8011f2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	d103      	bne.n	8011f3a <xQueueGenericSendFromISR+0x66>
 8011f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d101      	bne.n	8011f3e <xQueueGenericSendFromISR+0x6a>
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	e000      	b.n	8011f40 <xQueueGenericSendFromISR+0x6c>
 8011f3e:	2300      	movs	r3, #0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d109      	bne.n	8011f58 <xQueueGenericSendFromISR+0x84>
 8011f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f48:	f383 8811 	msr	BASEPRI, r3
 8011f4c:	f3bf 8f6f 	isb	sy
 8011f50:	f3bf 8f4f 	dsb	sy
 8011f54:	61fb      	str	r3, [r7, #28]
 8011f56:	e7fe      	b.n	8011f56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f58:	f002 f910 	bl	801417c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f5c:	f3ef 8211 	mrs	r2, BASEPRI
 8011f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f64:	f383 8811 	msr	BASEPRI, r3
 8011f68:	f3bf 8f6f 	isb	sy
 8011f6c:	f3bf 8f4f 	dsb	sy
 8011f70:	61ba      	str	r2, [r7, #24]
 8011f72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011f74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d302      	bcc.n	8011f8a <xQueueGenericSendFromISR+0xb6>
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	2b02      	cmp	r3, #2
 8011f88:	d12c      	bne.n	8011fe4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011f94:	683a      	ldr	r2, [r7, #0]
 8011f96:	68b9      	ldr	r1, [r7, #8]
 8011f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f9a:	f000 fab4 	bl	8012506 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011f9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa6:	d112      	bne.n	8011fce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d016      	beq.n	8011fde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb2:	3324      	adds	r3, #36	; 0x24
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f001 f883 	bl	80130c0 <xTaskRemoveFromEventList>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00e      	beq.n	8011fde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00b      	beq.n	8011fde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2201      	movs	r2, #1
 8011fca:	601a      	str	r2, [r3, #0]
 8011fcc:	e007      	b.n	8011fde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	b25a      	sxtb	r2, r3
 8011fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011fe2:	e001      	b.n	8011fe8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3738      	adds	r7, #56	; 0x38
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b08e      	sub	sp, #56	; 0x38
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200c:	2b00      	cmp	r3, #0
 801200e:	d109      	bne.n	8012024 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012014:	f383 8811 	msr	BASEPRI, r3
 8012018:	f3bf 8f6f 	isb	sy
 801201c:	f3bf 8f4f 	dsb	sy
 8012020:	623b      	str	r3, [r7, #32]
 8012022:	e7fe      	b.n	8012022 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012028:	2b00      	cmp	r3, #0
 801202a:	d009      	beq.n	8012040 <xQueueGiveFromISR+0x44>
 801202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012030:	f383 8811 	msr	BASEPRI, r3
 8012034:	f3bf 8f6f 	isb	sy
 8012038:	f3bf 8f4f 	dsb	sy
 801203c:	61fb      	str	r3, [r7, #28]
 801203e:	e7fe      	b.n	801203e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d103      	bne.n	8012050 <xQueueGiveFromISR+0x54>
 8012048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d101      	bne.n	8012054 <xQueueGiveFromISR+0x58>
 8012050:	2301      	movs	r3, #1
 8012052:	e000      	b.n	8012056 <xQueueGiveFromISR+0x5a>
 8012054:	2300      	movs	r3, #0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d109      	bne.n	801206e <xQueueGiveFromISR+0x72>
 801205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801205e:	f383 8811 	msr	BASEPRI, r3
 8012062:	f3bf 8f6f 	isb	sy
 8012066:	f3bf 8f4f 	dsb	sy
 801206a:	61bb      	str	r3, [r7, #24]
 801206c:	e7fe      	b.n	801206c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801206e:	f002 f885 	bl	801417c <vPortValidateInterruptPriority>
	__asm volatile
 8012072:	f3ef 8211 	mrs	r2, BASEPRI
 8012076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801207a:	f383 8811 	msr	BASEPRI, r3
 801207e:	f3bf 8f6f 	isb	sy
 8012082:	f3bf 8f4f 	dsb	sy
 8012086:	617a      	str	r2, [r7, #20]
 8012088:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801208a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801208c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012092:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801209a:	429a      	cmp	r2, r3
 801209c:	d22b      	bcs.n	80120f6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120aa:	1c5a      	adds	r2, r3, #1
 80120ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b8:	d112      	bne.n	80120e0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d016      	beq.n	80120f0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c4:	3324      	adds	r3, #36	; 0x24
 80120c6:	4618      	mov	r0, r3
 80120c8:	f000 fffa 	bl	80130c0 <xTaskRemoveFromEventList>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00e      	beq.n	80120f0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d00b      	beq.n	80120f0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2201      	movs	r2, #1
 80120dc:	601a      	str	r2, [r3, #0]
 80120de:	e007      	b.n	80120f0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80120e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120e4:	3301      	adds	r3, #1
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	b25a      	sxtb	r2, r3
 80120ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80120f0:	2301      	movs	r3, #1
 80120f2:	637b      	str	r3, [r7, #52]	; 0x34
 80120f4:	e001      	b.n	80120fa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80120f6:	2300      	movs	r3, #0
 80120f8:	637b      	str	r3, [r7, #52]	; 0x34
 80120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012106:	4618      	mov	r0, r3
 8012108:	3738      	adds	r7, #56	; 0x38
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
	...

08012110 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b08c      	sub	sp, #48	; 0x30
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801211c:	2300      	movs	r3, #0
 801211e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012126:	2b00      	cmp	r3, #0
 8012128:	d109      	bne.n	801213e <xQueueReceive+0x2e>
	__asm volatile
 801212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801212e:	f383 8811 	msr	BASEPRI, r3
 8012132:	f3bf 8f6f 	isb	sy
 8012136:	f3bf 8f4f 	dsb	sy
 801213a:	623b      	str	r3, [r7, #32]
 801213c:	e7fe      	b.n	801213c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d103      	bne.n	801214c <xQueueReceive+0x3c>
 8012144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012148:	2b00      	cmp	r3, #0
 801214a:	d101      	bne.n	8012150 <xQueueReceive+0x40>
 801214c:	2301      	movs	r3, #1
 801214e:	e000      	b.n	8012152 <xQueueReceive+0x42>
 8012150:	2300      	movs	r3, #0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d109      	bne.n	801216a <xQueueReceive+0x5a>
 8012156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215a:	f383 8811 	msr	BASEPRI, r3
 801215e:	f3bf 8f6f 	isb	sy
 8012162:	f3bf 8f4f 	dsb	sy
 8012166:	61fb      	str	r3, [r7, #28]
 8012168:	e7fe      	b.n	8012168 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801216a:	f001 f971 	bl	8013450 <xTaskGetSchedulerState>
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d102      	bne.n	801217a <xQueueReceive+0x6a>
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d101      	bne.n	801217e <xQueueReceive+0x6e>
 801217a:	2301      	movs	r3, #1
 801217c:	e000      	b.n	8012180 <xQueueReceive+0x70>
 801217e:	2300      	movs	r3, #0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d109      	bne.n	8012198 <xQueueReceive+0x88>
 8012184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012188:	f383 8811 	msr	BASEPRI, r3
 801218c:	f3bf 8f6f 	isb	sy
 8012190:	f3bf 8f4f 	dsb	sy
 8012194:	61bb      	str	r3, [r7, #24]
 8012196:	e7fe      	b.n	8012196 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012198:	f001 ff36 	bl	8014008 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d01f      	beq.n	80121e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121a8:	68b9      	ldr	r1, [r7, #8]
 80121aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121ac:	f000 fa15 	bl	80125da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b2:	1e5a      	subs	r2, r3, #1
 80121b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ba:	691b      	ldr	r3, [r3, #16]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00f      	beq.n	80121e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c2:	3310      	adds	r3, #16
 80121c4:	4618      	mov	r0, r3
 80121c6:	f000 ff7b 	bl	80130c0 <xTaskRemoveFromEventList>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d007      	beq.n	80121e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80121d0:	4b3c      	ldr	r3, [pc, #240]	; (80122c4 <xQueueReceive+0x1b4>)
 80121d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121d6:	601a      	str	r2, [r3, #0]
 80121d8:	f3bf 8f4f 	dsb	sy
 80121dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80121e0:	f001 ff40 	bl	8014064 <vPortExitCritical>
				return pdPASS;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e069      	b.n	80122bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d103      	bne.n	80121f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80121ee:	f001 ff39 	bl	8014064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e062      	b.n	80122bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80121f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d106      	bne.n	801220a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121fc:	f107 0310 	add.w	r3, r7, #16
 8012200:	4618      	mov	r0, r3
 8012202:	f000 ffbf 	bl	8013184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012206:	2301      	movs	r3, #1
 8012208:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801220a:	f001 ff2b 	bl	8014064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801220e:	f000 fd1b 	bl	8012c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012212:	f001 fef9 	bl	8014008 <vPortEnterCritical>
 8012216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801221c:	b25b      	sxtb	r3, r3
 801221e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012222:	d103      	bne.n	801222c <xQueueReceive+0x11c>
 8012224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012226:	2200      	movs	r2, #0
 8012228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012232:	b25b      	sxtb	r3, r3
 8012234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012238:	d103      	bne.n	8012242 <xQueueReceive+0x132>
 801223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223c:	2200      	movs	r2, #0
 801223e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012242:	f001 ff0f 	bl	8014064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012246:	1d3a      	adds	r2, r7, #4
 8012248:	f107 0310 	add.w	r3, r7, #16
 801224c:	4611      	mov	r1, r2
 801224e:	4618      	mov	r0, r3
 8012250:	f000 ffae 	bl	80131b0 <xTaskCheckForTimeOut>
 8012254:	4603      	mov	r3, r0
 8012256:	2b00      	cmp	r3, #0
 8012258:	d123      	bne.n	80122a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801225a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801225c:	f000 fa35 	bl	80126ca <prvIsQueueEmpty>
 8012260:	4603      	mov	r3, r0
 8012262:	2b00      	cmp	r3, #0
 8012264:	d017      	beq.n	8012296 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012268:	3324      	adds	r3, #36	; 0x24
 801226a:	687a      	ldr	r2, [r7, #4]
 801226c:	4611      	mov	r1, r2
 801226e:	4618      	mov	r0, r3
 8012270:	f000 fed8 	bl	8013024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012276:	f000 f9d6 	bl	8012626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801227a:	f000 fcf3 	bl	8012c64 <xTaskResumeAll>
 801227e:	4603      	mov	r3, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	d189      	bne.n	8012198 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012284:	4b0f      	ldr	r3, [pc, #60]	; (80122c4 <xQueueReceive+0x1b4>)
 8012286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801228a:	601a      	str	r2, [r3, #0]
 801228c:	f3bf 8f4f 	dsb	sy
 8012290:	f3bf 8f6f 	isb	sy
 8012294:	e780      	b.n	8012198 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012298:	f000 f9c5 	bl	8012626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801229c:	f000 fce2 	bl	8012c64 <xTaskResumeAll>
 80122a0:	e77a      	b.n	8012198 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80122a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122a4:	f000 f9bf 	bl	8012626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122a8:	f000 fcdc 	bl	8012c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122ae:	f000 fa0c 	bl	80126ca <prvIsQueueEmpty>
 80122b2:	4603      	mov	r3, r0
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	f43f af6f 	beq.w	8012198 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3730      	adds	r7, #48	; 0x30
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	e000ed04 	.word	0xe000ed04

080122c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b08e      	sub	sp, #56	; 0x38
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80122d2:	2300      	movs	r3, #0
 80122d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80122da:	2300      	movs	r3, #0
 80122dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80122de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d109      	bne.n	80122f8 <xQueueSemaphoreTake+0x30>
 80122e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e8:	f383 8811 	msr	BASEPRI, r3
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	f3bf 8f4f 	dsb	sy
 80122f4:	623b      	str	r3, [r7, #32]
 80122f6:	e7fe      	b.n	80122f6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80122f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d009      	beq.n	8012314 <xQueueSemaphoreTake+0x4c>
 8012300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012304:	f383 8811 	msr	BASEPRI, r3
 8012308:	f3bf 8f6f 	isb	sy
 801230c:	f3bf 8f4f 	dsb	sy
 8012310:	61fb      	str	r3, [r7, #28]
 8012312:	e7fe      	b.n	8012312 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012314:	f001 f89c 	bl	8013450 <xTaskGetSchedulerState>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d102      	bne.n	8012324 <xQueueSemaphoreTake+0x5c>
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d101      	bne.n	8012328 <xQueueSemaphoreTake+0x60>
 8012324:	2301      	movs	r3, #1
 8012326:	e000      	b.n	801232a <xQueueSemaphoreTake+0x62>
 8012328:	2300      	movs	r3, #0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d109      	bne.n	8012342 <xQueueSemaphoreTake+0x7a>
 801232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012332:	f383 8811 	msr	BASEPRI, r3
 8012336:	f3bf 8f6f 	isb	sy
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	61bb      	str	r3, [r7, #24]
 8012340:	e7fe      	b.n	8012340 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012342:	f001 fe61 	bl	8014008 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801234a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234e:	2b00      	cmp	r3, #0
 8012350:	d024      	beq.n	801239c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012354:	1e5a      	subs	r2, r3, #1
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d104      	bne.n	801236c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012362:	f001 f9f1 	bl	8013748 <pvTaskIncrementMutexHeldCount>
 8012366:	4602      	mov	r2, r0
 8012368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236e:	691b      	ldr	r3, [r3, #16]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00f      	beq.n	8012394 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012376:	3310      	adds	r3, #16
 8012378:	4618      	mov	r0, r3
 801237a:	f000 fea1 	bl	80130c0 <xTaskRemoveFromEventList>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d007      	beq.n	8012394 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012384:	4b53      	ldr	r3, [pc, #332]	; (80124d4 <xQueueSemaphoreTake+0x20c>)
 8012386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012394:	f001 fe66 	bl	8014064 <vPortExitCritical>
				return pdPASS;
 8012398:	2301      	movs	r3, #1
 801239a:	e096      	b.n	80124ca <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d110      	bne.n	80123c4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80123a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d009      	beq.n	80123bc <xQueueSemaphoreTake+0xf4>
 80123a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ac:	f383 8811 	msr	BASEPRI, r3
 80123b0:	f3bf 8f6f 	isb	sy
 80123b4:	f3bf 8f4f 	dsb	sy
 80123b8:	617b      	str	r3, [r7, #20]
 80123ba:	e7fe      	b.n	80123ba <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80123bc:	f001 fe52 	bl	8014064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80123c0:	2300      	movs	r3, #0
 80123c2:	e082      	b.n	80124ca <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123ca:	f107 030c 	add.w	r3, r7, #12
 80123ce:	4618      	mov	r0, r3
 80123d0:	f000 fed8 	bl	8013184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123d4:	2301      	movs	r3, #1
 80123d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123d8:	f001 fe44 	bl	8014064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123dc:	f000 fc34 	bl	8012c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123e0:	f001 fe12 	bl	8014008 <vPortEnterCritical>
 80123e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123ea:	b25b      	sxtb	r3, r3
 80123ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123f0:	d103      	bne.n	80123fa <xQueueSemaphoreTake+0x132>
 80123f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f4:	2200      	movs	r2, #0
 80123f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012400:	b25b      	sxtb	r3, r3
 8012402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012406:	d103      	bne.n	8012410 <xQueueSemaphoreTake+0x148>
 8012408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240a:	2200      	movs	r2, #0
 801240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012410:	f001 fe28 	bl	8014064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012414:	463a      	mov	r2, r7
 8012416:	f107 030c 	add.w	r3, r7, #12
 801241a:	4611      	mov	r1, r2
 801241c:	4618      	mov	r0, r3
 801241e:	f000 fec7 	bl	80131b0 <xTaskCheckForTimeOut>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d132      	bne.n	801248e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801242a:	f000 f94e 	bl	80126ca <prvIsQueueEmpty>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d026      	beq.n	8012482 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d109      	bne.n	8012450 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801243c:	f001 fde4 	bl	8014008 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	4618      	mov	r0, r3
 8012446:	f001 f821 	bl	801348c <xTaskPriorityInherit>
 801244a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801244c:	f001 fe0a 	bl	8014064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	3324      	adds	r3, #36	; 0x24
 8012454:	683a      	ldr	r2, [r7, #0]
 8012456:	4611      	mov	r1, r2
 8012458:	4618      	mov	r0, r3
 801245a:	f000 fde3 	bl	8013024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801245e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012460:	f000 f8e1 	bl	8012626 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012464:	f000 fbfe 	bl	8012c64 <xTaskResumeAll>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	f47f af69 	bne.w	8012342 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012470:	4b18      	ldr	r3, [pc, #96]	; (80124d4 <xQueueSemaphoreTake+0x20c>)
 8012472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012476:	601a      	str	r2, [r3, #0]
 8012478:	f3bf 8f4f 	dsb	sy
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	e75f      	b.n	8012342 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012484:	f000 f8cf 	bl	8012626 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012488:	f000 fbec 	bl	8012c64 <xTaskResumeAll>
 801248c:	e759      	b.n	8012342 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801248e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012490:	f000 f8c9 	bl	8012626 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012494:	f000 fbe6 	bl	8012c64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801249a:	f000 f916 	bl	80126ca <prvIsQueueEmpty>
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	f43f af4e 	beq.w	8012342 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00d      	beq.n	80124c8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80124ac:	f001 fdac 	bl	8014008 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80124b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124b2:	f000 f811 	bl	80124d8 <prvGetDisinheritPriorityAfterTimeout>
 80124b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80124b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124be:	4618      	mov	r0, r3
 80124c0:	f001 f8be 	bl	8013640 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80124c4:	f001 fdce 	bl	8014064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80124c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3738      	adds	r7, #56	; 0x38
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	e000ed04 	.word	0xe000ed04

080124d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d006      	beq.n	80124f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80124f2:	60fb      	str	r3, [r7, #12]
 80124f4:	e001      	b.n	80124fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80124f6:	2300      	movs	r3, #0
 80124f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80124fa:	68fb      	ldr	r3, [r7, #12]
	}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3714      	adds	r7, #20
 8012500:	46bd      	mov	sp, r7
 8012502:	bc80      	pop	{r7}
 8012504:	4770      	bx	lr

08012506 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b086      	sub	sp, #24
 801250a:	af00      	add	r7, sp, #0
 801250c:	60f8      	str	r0, [r7, #12]
 801250e:	60b9      	str	r1, [r7, #8]
 8012510:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012512:	2300      	movs	r3, #0
 8012514:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801251a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012520:	2b00      	cmp	r3, #0
 8012522:	d10d      	bne.n	8012540 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d14d      	bne.n	80125c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	4618      	mov	r0, r3
 8012532:	f001 f819 	bl	8013568 <xTaskPriorityDisinherit>
 8012536:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2200      	movs	r2, #0
 801253c:	605a      	str	r2, [r3, #4]
 801253e:	e043      	b.n	80125c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d119      	bne.n	801257a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	6898      	ldr	r0, [r3, #8]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801254e:	461a      	mov	r2, r3
 8012550:	68b9      	ldr	r1, [r7, #8]
 8012552:	f002 fc9b 	bl	8014e8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	689a      	ldr	r2, [r3, #8]
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801255e:	441a      	add	r2, r3
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	689a      	ldr	r2, [r3, #8]
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	429a      	cmp	r2, r3
 801256e:	d32b      	bcc.n	80125c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	609a      	str	r2, [r3, #8]
 8012578:	e026      	b.n	80125c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	68d8      	ldr	r0, [r3, #12]
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012582:	461a      	mov	r2, r3
 8012584:	68b9      	ldr	r1, [r7, #8]
 8012586:	f002 fc81 	bl	8014e8c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	68da      	ldr	r2, [r3, #12]
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012592:	425b      	negs	r3, r3
 8012594:	441a      	add	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	68da      	ldr	r2, [r3, #12]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d207      	bcs.n	80125b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	685a      	ldr	r2, [r3, #4]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ae:	425b      	negs	r3, r3
 80125b0:	441a      	add	r2, r3
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2b02      	cmp	r3, #2
 80125ba:	d105      	bne.n	80125c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d002      	beq.n	80125c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	3b01      	subs	r3, #1
 80125c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	1c5a      	adds	r2, r3, #1
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80125d0:	697b      	ldr	r3, [r7, #20]
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3718      	adds	r7, #24
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d018      	beq.n	801261e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	68da      	ldr	r2, [r3, #12]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125f4:	441a      	add	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	68da      	ldr	r2, [r3, #12]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	429a      	cmp	r2, r3
 8012604:	d303      	bcc.n	801260e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	68d9      	ldr	r1, [r3, #12]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012616:	461a      	mov	r2, r3
 8012618:	6838      	ldr	r0, [r7, #0]
 801261a:	f002 fc37 	bl	8014e8c <memcpy>
	}
}
 801261e:	bf00      	nop
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}

08012626 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012626:	b580      	push	{r7, lr}
 8012628:	b084      	sub	sp, #16
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801262e:	f001 fceb 	bl	8014008 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012638:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801263a:	e011      	b.n	8012660 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012640:	2b00      	cmp	r3, #0
 8012642:	d012      	beq.n	801266a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	3324      	adds	r3, #36	; 0x24
 8012648:	4618      	mov	r0, r3
 801264a:	f000 fd39 	bl	80130c0 <xTaskRemoveFromEventList>
 801264e:	4603      	mov	r3, r0
 8012650:	2b00      	cmp	r3, #0
 8012652:	d001      	beq.n	8012658 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012654:	f000 fe0c 	bl	8013270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012658:	7bfb      	ldrb	r3, [r7, #15]
 801265a:	3b01      	subs	r3, #1
 801265c:	b2db      	uxtb	r3, r3
 801265e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012664:	2b00      	cmp	r3, #0
 8012666:	dce9      	bgt.n	801263c <prvUnlockQueue+0x16>
 8012668:	e000      	b.n	801266c <prvUnlockQueue+0x46>
					break;
 801266a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	22ff      	movs	r2, #255	; 0xff
 8012670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012674:	f001 fcf6 	bl	8014064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012678:	f001 fcc6 	bl	8014008 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012682:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012684:	e011      	b.n	80126aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	691b      	ldr	r3, [r3, #16]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d012      	beq.n	80126b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	3310      	adds	r3, #16
 8012692:	4618      	mov	r0, r3
 8012694:	f000 fd14 	bl	80130c0 <xTaskRemoveFromEventList>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d001      	beq.n	80126a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801269e:	f000 fde7 	bl	8013270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80126a2:	7bbb      	ldrb	r3, [r7, #14]
 80126a4:	3b01      	subs	r3, #1
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80126aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	dce9      	bgt.n	8012686 <prvUnlockQueue+0x60>
 80126b2:	e000      	b.n	80126b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80126b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	22ff      	movs	r2, #255	; 0xff
 80126ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80126be:	f001 fcd1 	bl	8014064 <vPortExitCritical>
}
 80126c2:	bf00      	nop
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b084      	sub	sp, #16
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80126d2:	f001 fc99 	bl	8014008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d102      	bne.n	80126e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80126de:	2301      	movs	r3, #1
 80126e0:	60fb      	str	r3, [r7, #12]
 80126e2:	e001      	b.n	80126e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80126e4:	2300      	movs	r3, #0
 80126e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80126e8:	f001 fcbc 	bl	8014064 <vPortExitCritical>

	return xReturn;
 80126ec:	68fb      	ldr	r3, [r7, #12]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b084      	sub	sp, #16
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80126fe:	f001 fc83 	bl	8014008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801270a:	429a      	cmp	r2, r3
 801270c:	d102      	bne.n	8012714 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801270e:	2301      	movs	r3, #1
 8012710:	60fb      	str	r3, [r7, #12]
 8012712:	e001      	b.n	8012718 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012714:	2300      	movs	r3, #0
 8012716:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012718:	f001 fca4 	bl	8014064 <vPortExitCritical>

	return xReturn;
 801271c:	68fb      	ldr	r3, [r7, #12]
}
 801271e:	4618      	mov	r0, r3
 8012720:	3710      	adds	r7, #16
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
	...

08012728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012728:	b480      	push	{r7}
 801272a:	b085      	sub	sp, #20
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012732:	2300      	movs	r3, #0
 8012734:	60fb      	str	r3, [r7, #12]
 8012736:	e014      	b.n	8012762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012738:	4a0e      	ldr	r2, [pc, #56]	; (8012774 <vQueueAddToRegistry+0x4c>)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10b      	bne.n	801275c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012744:	490b      	ldr	r1, [pc, #44]	; (8012774 <vQueueAddToRegistry+0x4c>)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	683a      	ldr	r2, [r7, #0]
 801274a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801274e:	4a09      	ldr	r2, [pc, #36]	; (8012774 <vQueueAddToRegistry+0x4c>)
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	00db      	lsls	r3, r3, #3
 8012754:	4413      	add	r3, r2
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801275a:	e005      	b.n	8012768 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	3301      	adds	r3, #1
 8012760:	60fb      	str	r3, [r7, #12]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b07      	cmp	r3, #7
 8012766:	d9e7      	bls.n	8012738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012768:	bf00      	nop
 801276a:	3714      	adds	r7, #20
 801276c:	46bd      	mov	sp, r7
 801276e:	bc80      	pop	{r7}
 8012770:	4770      	bx	lr
 8012772:	bf00      	nop
 8012774:	20009664 	.word	0x20009664

08012778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012778:	b580      	push	{r7, lr}
 801277a:	b086      	sub	sp, #24
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012788:	f001 fc3e 	bl	8014008 <vPortEnterCritical>
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012792:	b25b      	sxtb	r3, r3
 8012794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012798:	d103      	bne.n	80127a2 <vQueueWaitForMessageRestricted+0x2a>
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	2200      	movs	r2, #0
 801279e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127a8:	b25b      	sxtb	r3, r3
 80127aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ae:	d103      	bne.n	80127b8 <vQueueWaitForMessageRestricted+0x40>
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	2200      	movs	r2, #0
 80127b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127b8:	f001 fc54 	bl	8014064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d106      	bne.n	80127d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	3324      	adds	r3, #36	; 0x24
 80127c8:	687a      	ldr	r2, [r7, #4]
 80127ca:	68b9      	ldr	r1, [r7, #8]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f000 fc4d 	bl	801306c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80127d2:	6978      	ldr	r0, [r7, #20]
 80127d4:	f7ff ff27 	bl	8012626 <prvUnlockQueue>
	}
 80127d8:	bf00      	nop
 80127da:	3718      	adds	r7, #24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b08e      	sub	sp, #56	; 0x38
 80127e4:	af04      	add	r7, sp, #16
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
 80127ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80127ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d109      	bne.n	8012808 <xTaskCreateStatic+0x28>
 80127f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f8:	f383 8811 	msr	BASEPRI, r3
 80127fc:	f3bf 8f6f 	isb	sy
 8012800:	f3bf 8f4f 	dsb	sy
 8012804:	623b      	str	r3, [r7, #32]
 8012806:	e7fe      	b.n	8012806 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8012808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280a:	2b00      	cmp	r3, #0
 801280c:	d109      	bne.n	8012822 <xTaskCreateStatic+0x42>
 801280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012812:	f383 8811 	msr	BASEPRI, r3
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	f3bf 8f4f 	dsb	sy
 801281e:	61fb      	str	r3, [r7, #28]
 8012820:	e7fe      	b.n	8012820 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012822:	2364      	movs	r3, #100	; 0x64
 8012824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	2b64      	cmp	r3, #100	; 0x64
 801282a:	d009      	beq.n	8012840 <xTaskCreateStatic+0x60>
 801282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012830:	f383 8811 	msr	BASEPRI, r3
 8012834:	f3bf 8f6f 	isb	sy
 8012838:	f3bf 8f4f 	dsb	sy
 801283c:	61bb      	str	r3, [r7, #24]
 801283e:	e7fe      	b.n	801283e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012842:	2b00      	cmp	r3, #0
 8012844:	d01e      	beq.n	8012884 <xTaskCreateStatic+0xa4>
 8012846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012848:	2b00      	cmp	r3, #0
 801284a:	d01b      	beq.n	8012884 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012858:	2202      	movs	r2, #2
 801285a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801285e:	2300      	movs	r3, #0
 8012860:	9303      	str	r3, [sp, #12]
 8012862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012864:	9302      	str	r3, [sp, #8]
 8012866:	f107 0314 	add.w	r3, r7, #20
 801286a:	9301      	str	r3, [sp, #4]
 801286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	68b9      	ldr	r1, [r7, #8]
 8012876:	68f8      	ldr	r0, [r7, #12]
 8012878:	f000 f850 	bl	801291c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801287c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801287e:	f000 f8d9 	bl	8012a34 <prvAddNewTaskToReadyList>
 8012882:	e001      	b.n	8012888 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8012884:	2300      	movs	r3, #0
 8012886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012888:	697b      	ldr	r3, [r7, #20]
	}
 801288a:	4618      	mov	r0, r3
 801288c:	3728      	adds	r7, #40	; 0x28
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012892:	b580      	push	{r7, lr}
 8012894:	b08c      	sub	sp, #48	; 0x30
 8012896:	af04      	add	r7, sp, #16
 8012898:	60f8      	str	r0, [r7, #12]
 801289a:	60b9      	str	r1, [r7, #8]
 801289c:	603b      	str	r3, [r7, #0]
 801289e:	4613      	mov	r3, r2
 80128a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128a2:	88fb      	ldrh	r3, [r7, #6]
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f001 fca4 	bl	80141f4 <pvPortMalloc>
 80128ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d00e      	beq.n	80128d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80128b4:	2064      	movs	r0, #100	; 0x64
 80128b6:	f001 fc9d 	bl	80141f4 <pvPortMalloc>
 80128ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d003      	beq.n	80128ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	697a      	ldr	r2, [r7, #20]
 80128c6:	631a      	str	r2, [r3, #48]	; 0x30
 80128c8:	e005      	b.n	80128d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80128ca:	6978      	ldr	r0, [r7, #20]
 80128cc:	f001 fd54 	bl	8014378 <vPortFree>
 80128d0:	e001      	b.n	80128d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80128d2:	2300      	movs	r3, #0
 80128d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d017      	beq.n	801290c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	2200      	movs	r2, #0
 80128e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80128e4:	88fa      	ldrh	r2, [r7, #6]
 80128e6:	2300      	movs	r3, #0
 80128e8:	9303      	str	r3, [sp, #12]
 80128ea:	69fb      	ldr	r3, [r7, #28]
 80128ec:	9302      	str	r3, [sp, #8]
 80128ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f0:	9301      	str	r3, [sp, #4]
 80128f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f4:	9300      	str	r3, [sp, #0]
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	68b9      	ldr	r1, [r7, #8]
 80128fa:	68f8      	ldr	r0, [r7, #12]
 80128fc:	f000 f80e 	bl	801291c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012900:	69f8      	ldr	r0, [r7, #28]
 8012902:	f000 f897 	bl	8012a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012906:	2301      	movs	r3, #1
 8012908:	61bb      	str	r3, [r7, #24]
 801290a:	e002      	b.n	8012912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801290c:	f04f 33ff 	mov.w	r3, #4294967295
 8012910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012912:	69bb      	ldr	r3, [r7, #24]
	}
 8012914:	4618      	mov	r0, r3
 8012916:	3720      	adds	r7, #32
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b088      	sub	sp, #32
 8012920:	af00      	add	r7, sp, #0
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	60b9      	str	r1, [r7, #8]
 8012926:	607a      	str	r2, [r7, #4]
 8012928:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	461a      	mov	r2, r3
 8012934:	21a5      	movs	r1, #165	; 0xa5
 8012936:	f002 facd 	bl	8014ed4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012944:	3b01      	subs	r3, #1
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4413      	add	r3, r2
 801294a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	f023 0307 	bic.w	r3, r3, #7
 8012952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012954:	69bb      	ldr	r3, [r7, #24]
 8012956:	f003 0307 	and.w	r3, r3, #7
 801295a:	2b00      	cmp	r3, #0
 801295c:	d009      	beq.n	8012972 <prvInitialiseNewTask+0x56>
 801295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012962:	f383 8811 	msr	BASEPRI, r3
 8012966:	f3bf 8f6f 	isb	sy
 801296a:	f3bf 8f4f 	dsb	sy
 801296e:	617b      	str	r3, [r7, #20]
 8012970:	e7fe      	b.n	8012970 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8012972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012974:	69ba      	ldr	r2, [r7, #24]
 8012976:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012978:	2300      	movs	r3, #0
 801297a:	61fb      	str	r3, [r7, #28]
 801297c:	e012      	b.n	80129a4 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801297e:	68ba      	ldr	r2, [r7, #8]
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	4413      	add	r3, r2
 8012984:	7819      	ldrb	r1, [r3, #0]
 8012986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	4413      	add	r3, r2
 801298c:	3334      	adds	r3, #52	; 0x34
 801298e:	460a      	mov	r2, r1
 8012990:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012992:	68ba      	ldr	r2, [r7, #8]
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	4413      	add	r3, r2
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d006      	beq.n	80129ac <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	3301      	adds	r3, #1
 80129a2:	61fb      	str	r3, [r7, #28]
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	2b0f      	cmp	r3, #15
 80129a8:	d9e9      	bls.n	801297e <prvInitialiseNewTask+0x62>
 80129aa:	e000      	b.n	80129ae <prvInitialiseNewTask+0x92>
		{
			break;
 80129ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80129ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b0:	2200      	movs	r2, #0
 80129b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80129b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b8:	2b37      	cmp	r3, #55	; 0x37
 80129ba:	d901      	bls.n	80129c0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80129bc:	2337      	movs	r3, #55	; 0x37
 80129be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80129c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80129c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129ca:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80129cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ce:	2200      	movs	r2, #0
 80129d0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80129d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d4:	3304      	adds	r3, #4
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fe fed1 	bl	801177e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80129dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129de:	3318      	adds	r3, #24
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7fe fecc 	bl	801177e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80129e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80129f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80129f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80129fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fe:	2200      	movs	r2, #0
 8012a00:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	2200      	movs	r2, #0
 8012a06:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012a10:	683a      	ldr	r2, [r7, #0]
 8012a12:	68f9      	ldr	r1, [r7, #12]
 8012a14:	69b8      	ldr	r0, [r7, #24]
 8012a16:	f001 fa09 	bl	8013e2c <pxPortInitialiseStack>
 8012a1a:	4602      	mov	r2, r0
 8012a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d002      	beq.n	8012a2c <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a2c:	bf00      	nop
 8012a2e:	3720      	adds	r7, #32
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012a3c:	f001 fae4 	bl	8014008 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012a40:	4b2d      	ldr	r3, [pc, #180]	; (8012af8 <prvAddNewTaskToReadyList+0xc4>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	3301      	adds	r3, #1
 8012a46:	4a2c      	ldr	r2, [pc, #176]	; (8012af8 <prvAddNewTaskToReadyList+0xc4>)
 8012a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012a4a:	4b2c      	ldr	r3, [pc, #176]	; (8012afc <prvAddNewTaskToReadyList+0xc8>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d109      	bne.n	8012a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012a52:	4a2a      	ldr	r2, [pc, #168]	; (8012afc <prvAddNewTaskToReadyList+0xc8>)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012a58:	4b27      	ldr	r3, [pc, #156]	; (8012af8 <prvAddNewTaskToReadyList+0xc4>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d110      	bne.n	8012a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012a60:	f000 fc2a 	bl	80132b8 <prvInitialiseTaskLists>
 8012a64:	e00d      	b.n	8012a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012a66:	4b26      	ldr	r3, [pc, #152]	; (8012b00 <prvAddNewTaskToReadyList+0xcc>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d109      	bne.n	8012a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012a6e:	4b23      	ldr	r3, [pc, #140]	; (8012afc <prvAddNewTaskToReadyList+0xc8>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d802      	bhi.n	8012a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012a7c:	4a1f      	ldr	r2, [pc, #124]	; (8012afc <prvAddNewTaskToReadyList+0xc8>)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012a82:	4b20      	ldr	r3, [pc, #128]	; (8012b04 <prvAddNewTaskToReadyList+0xd0>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	3301      	adds	r3, #1
 8012a88:	4a1e      	ldr	r2, [pc, #120]	; (8012b04 <prvAddNewTaskToReadyList+0xd0>)
 8012a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012a8c:	4b1d      	ldr	r3, [pc, #116]	; (8012b04 <prvAddNewTaskToReadyList+0xd0>)
 8012a8e:	681a      	ldr	r2, [r3, #0]
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a98:	4b1b      	ldr	r3, [pc, #108]	; (8012b08 <prvAddNewTaskToReadyList+0xd4>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d903      	bls.n	8012aa8 <prvAddNewTaskToReadyList+0x74>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa4:	4a18      	ldr	r2, [pc, #96]	; (8012b08 <prvAddNewTaskToReadyList+0xd4>)
 8012aa6:	6013      	str	r3, [r2, #0]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aac:	4613      	mov	r3, r2
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	4413      	add	r3, r2
 8012ab2:	009b      	lsls	r3, r3, #2
 8012ab4:	4a15      	ldr	r2, [pc, #84]	; (8012b0c <prvAddNewTaskToReadyList+0xd8>)
 8012ab6:	441a      	add	r2, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	3304      	adds	r3, #4
 8012abc:	4619      	mov	r1, r3
 8012abe:	4610      	mov	r0, r2
 8012ac0:	f7fe fe69 	bl	8011796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012ac4:	f001 face 	bl	8014064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012ac8:	4b0d      	ldr	r3, [pc, #52]	; (8012b00 <prvAddNewTaskToReadyList+0xcc>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d00e      	beq.n	8012aee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012ad0:	4b0a      	ldr	r3, [pc, #40]	; (8012afc <prvAddNewTaskToReadyList+0xc8>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d207      	bcs.n	8012aee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012ade:	4b0c      	ldr	r3, [pc, #48]	; (8012b10 <prvAddNewTaskToReadyList+0xdc>)
 8012ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ae4:	601a      	str	r2, [r3, #0]
 8012ae6:	f3bf 8f4f 	dsb	sy
 8012aea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012aee:	bf00      	nop
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	2000102c 	.word	0x2000102c
 8012afc:	20000b58 	.word	0x20000b58
 8012b00:	20001038 	.word	0x20001038
 8012b04:	20001048 	.word	0x20001048
 8012b08:	20001034 	.word	0x20001034
 8012b0c:	20000b5c 	.word	0x20000b5c
 8012b10:	e000ed04 	.word	0xe000ed04

08012b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d016      	beq.n	8012b54 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012b26:	4b13      	ldr	r3, [pc, #76]	; (8012b74 <vTaskDelay+0x60>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d009      	beq.n	8012b42 <vTaskDelay+0x2e>
 8012b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b32:	f383 8811 	msr	BASEPRI, r3
 8012b36:	f3bf 8f6f 	isb	sy
 8012b3a:	f3bf 8f4f 	dsb	sy
 8012b3e:	60bb      	str	r3, [r7, #8]
 8012b40:	e7fe      	b.n	8012b40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012b42:	f000 f881 	bl	8012c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012b46:	2100      	movs	r1, #0
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f000 fe11 	bl	8013770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012b4e:	f000 f889 	bl	8012c64 <xTaskResumeAll>
 8012b52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d107      	bne.n	8012b6a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012b5a:	4b07      	ldr	r3, [pc, #28]	; (8012b78 <vTaskDelay+0x64>)
 8012b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b60:	601a      	str	r2, [r3, #0]
 8012b62:	f3bf 8f4f 	dsb	sy
 8012b66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b6a:	bf00      	nop
 8012b6c:	3710      	adds	r7, #16
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	20001054 	.word	0x20001054
 8012b78:	e000ed04 	.word	0xe000ed04

08012b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b08a      	sub	sp, #40	; 0x28
 8012b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012b82:	2300      	movs	r3, #0
 8012b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012b86:	2300      	movs	r3, #0
 8012b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012b8a:	463a      	mov	r2, r7
 8012b8c:	1d39      	adds	r1, r7, #4
 8012b8e:	f107 0308 	add.w	r3, r7, #8
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7fe fda2 	bl	80116dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012b98:	6839      	ldr	r1, [r7, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	68ba      	ldr	r2, [r7, #8]
 8012b9e:	9202      	str	r2, [sp, #8]
 8012ba0:	9301      	str	r3, [sp, #4]
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	460a      	mov	r2, r1
 8012baa:	4921      	ldr	r1, [pc, #132]	; (8012c30 <vTaskStartScheduler+0xb4>)
 8012bac:	4821      	ldr	r0, [pc, #132]	; (8012c34 <vTaskStartScheduler+0xb8>)
 8012bae:	f7ff fe17 	bl	80127e0 <xTaskCreateStatic>
 8012bb2:	4602      	mov	r2, r0
 8012bb4:	4b20      	ldr	r3, [pc, #128]	; (8012c38 <vTaskStartScheduler+0xbc>)
 8012bb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012bb8:	4b1f      	ldr	r3, [pc, #124]	; (8012c38 <vTaskStartScheduler+0xbc>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	617b      	str	r3, [r7, #20]
 8012bc4:	e001      	b.n	8012bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d102      	bne.n	8012bd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012bd0:	f000 fe22 	bl	8013818 <xTimerCreateTimerTask>
 8012bd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d117      	bne.n	8012c0c <vTaskStartScheduler+0x90>
 8012bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be0:	f383 8811 	msr	BASEPRI, r3
 8012be4:	f3bf 8f6f 	isb	sy
 8012be8:	f3bf 8f4f 	dsb	sy
 8012bec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012bee:	4b13      	ldr	r3, [pc, #76]	; (8012c3c <vTaskStartScheduler+0xc0>)
 8012bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012bf6:	4b12      	ldr	r3, [pc, #72]	; (8012c40 <vTaskStartScheduler+0xc4>)
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8012bfc:	4b11      	ldr	r3, [pc, #68]	; (8012c44 <vTaskStartScheduler+0xc8>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012c02:	f7ef fb15 	bl	8002230 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012c06:	f001 f98f 	bl	8013f28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012c0a:	e00d      	b.n	8012c28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c12:	d109      	bne.n	8012c28 <vTaskStartScheduler+0xac>
 8012c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c18:	f383 8811 	msr	BASEPRI, r3
 8012c1c:	f3bf 8f6f 	isb	sy
 8012c20:	f3bf 8f4f 	dsb	sy
 8012c24:	60fb      	str	r3, [r7, #12]
 8012c26:	e7fe      	b.n	8012c26 <vTaskStartScheduler+0xaa>
}
 8012c28:	bf00      	nop
 8012c2a:	3718      	adds	r7, #24
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	0801a948 	.word	0x0801a948
 8012c34:	08013289 	.word	0x08013289
 8012c38:	20001050 	.word	0x20001050
 8012c3c:	2000104c 	.word	0x2000104c
 8012c40:	20001038 	.word	0x20001038
 8012c44:	20001030 	.word	0x20001030

08012c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012c48:	b480      	push	{r7}
 8012c4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012c4c:	4b04      	ldr	r3, [pc, #16]	; (8012c60 <vTaskSuspendAll+0x18>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	3301      	adds	r3, #1
 8012c52:	4a03      	ldr	r2, [pc, #12]	; (8012c60 <vTaskSuspendAll+0x18>)
 8012c54:	6013      	str	r3, [r2, #0]
}
 8012c56:	bf00      	nop
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bc80      	pop	{r7}
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	20001054 	.word	0x20001054

08012c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c72:	4b41      	ldr	r3, [pc, #260]	; (8012d78 <xTaskResumeAll+0x114>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d109      	bne.n	8012c8e <xTaskResumeAll+0x2a>
 8012c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7e:	f383 8811 	msr	BASEPRI, r3
 8012c82:	f3bf 8f6f 	isb	sy
 8012c86:	f3bf 8f4f 	dsb	sy
 8012c8a:	603b      	str	r3, [r7, #0]
 8012c8c:	e7fe      	b.n	8012c8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012c8e:	f001 f9bb 	bl	8014008 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012c92:	4b39      	ldr	r3, [pc, #228]	; (8012d78 <xTaskResumeAll+0x114>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	3b01      	subs	r3, #1
 8012c98:	4a37      	ldr	r2, [pc, #220]	; (8012d78 <xTaskResumeAll+0x114>)
 8012c9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c9c:	4b36      	ldr	r3, [pc, #216]	; (8012d78 <xTaskResumeAll+0x114>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d162      	bne.n	8012d6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012ca4:	4b35      	ldr	r3, [pc, #212]	; (8012d7c <xTaskResumeAll+0x118>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d05e      	beq.n	8012d6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012cac:	e02f      	b.n	8012d0e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012cae:	4b34      	ldr	r3, [pc, #208]	; (8012d80 <xTaskResumeAll+0x11c>)
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	3318      	adds	r3, #24
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7fe fdc6 	bl	801184c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	3304      	adds	r3, #4
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fe fdc1 	bl	801184c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cce:	4b2d      	ldr	r3, [pc, #180]	; (8012d84 <xTaskResumeAll+0x120>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d903      	bls.n	8012cde <xTaskResumeAll+0x7a>
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cda:	4a2a      	ldr	r2, [pc, #168]	; (8012d84 <xTaskResumeAll+0x120>)
 8012cdc:	6013      	str	r3, [r2, #0]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	4413      	add	r3, r2
 8012ce8:	009b      	lsls	r3, r3, #2
 8012cea:	4a27      	ldr	r2, [pc, #156]	; (8012d88 <xTaskResumeAll+0x124>)
 8012cec:	441a      	add	r2, r3
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	4610      	mov	r0, r2
 8012cf6:	f7fe fd4e 	bl	8011796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cfe:	4b23      	ldr	r3, [pc, #140]	; (8012d8c <xTaskResumeAll+0x128>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d302      	bcc.n	8012d0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012d08:	4b21      	ldr	r3, [pc, #132]	; (8012d90 <xTaskResumeAll+0x12c>)
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d0e:	4b1c      	ldr	r3, [pc, #112]	; (8012d80 <xTaskResumeAll+0x11c>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1cb      	bne.n	8012cae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d001      	beq.n	8012d20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012d1c:	f000 fb66 	bl	80133ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012d20:	4b1c      	ldr	r3, [pc, #112]	; (8012d94 <xTaskResumeAll+0x130>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d010      	beq.n	8012d4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d2c:	f000 f844 	bl	8012db8 <xTaskIncrementTick>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d002      	beq.n	8012d3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012d36:	4b16      	ldr	r3, [pc, #88]	; (8012d90 <xTaskResumeAll+0x12c>)
 8012d38:	2201      	movs	r2, #1
 8012d3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	3b01      	subs	r3, #1
 8012d40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d1f1      	bne.n	8012d2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012d48:	4b12      	ldr	r3, [pc, #72]	; (8012d94 <xTaskResumeAll+0x130>)
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012d4e:	4b10      	ldr	r3, [pc, #64]	; (8012d90 <xTaskResumeAll+0x12c>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d009      	beq.n	8012d6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d56:	2301      	movs	r3, #1
 8012d58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d5a:	4b0f      	ldr	r3, [pc, #60]	; (8012d98 <xTaskResumeAll+0x134>)
 8012d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d60:	601a      	str	r2, [r3, #0]
 8012d62:	f3bf 8f4f 	dsb	sy
 8012d66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d6a:	f001 f97b 	bl	8014064 <vPortExitCritical>

	return xAlreadyYielded;
 8012d6e:	68bb      	ldr	r3, [r7, #8]
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	20001054 	.word	0x20001054
 8012d7c:	2000102c 	.word	0x2000102c
 8012d80:	20000fec 	.word	0x20000fec
 8012d84:	20001034 	.word	0x20001034
 8012d88:	20000b5c 	.word	0x20000b5c
 8012d8c:	20000b58 	.word	0x20000b58
 8012d90:	20001040 	.word	0x20001040
 8012d94:	2000103c 	.word	0x2000103c
 8012d98:	e000ed04 	.word	0xe000ed04

08012d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012da2:	4b04      	ldr	r3, [pc, #16]	; (8012db4 <xTaskGetTickCount+0x18>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012da8:	687b      	ldr	r3, [r7, #4]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	370c      	adds	r7, #12
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bc80      	pop	{r7}
 8012db2:	4770      	bx	lr
 8012db4:	20001030 	.word	0x20001030

08012db8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b086      	sub	sp, #24
 8012dbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dc2:	4b51      	ldr	r3, [pc, #324]	; (8012f08 <xTaskIncrementTick+0x150>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f040 808d 	bne.w	8012ee6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012dcc:	4b4f      	ldr	r3, [pc, #316]	; (8012f0c <xTaskIncrementTick+0x154>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012dd4:	4a4d      	ldr	r2, [pc, #308]	; (8012f0c <xTaskIncrementTick+0x154>)
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d11f      	bne.n	8012e20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012de0:	4b4b      	ldr	r3, [pc, #300]	; (8012f10 <xTaskIncrementTick+0x158>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d009      	beq.n	8012dfe <xTaskIncrementTick+0x46>
 8012dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dee:	f383 8811 	msr	BASEPRI, r3
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	603b      	str	r3, [r7, #0]
 8012dfc:	e7fe      	b.n	8012dfc <xTaskIncrementTick+0x44>
 8012dfe:	4b44      	ldr	r3, [pc, #272]	; (8012f10 <xTaskIncrementTick+0x158>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	60fb      	str	r3, [r7, #12]
 8012e04:	4b43      	ldr	r3, [pc, #268]	; (8012f14 <xTaskIncrementTick+0x15c>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4a41      	ldr	r2, [pc, #260]	; (8012f10 <xTaskIncrementTick+0x158>)
 8012e0a:	6013      	str	r3, [r2, #0]
 8012e0c:	4a41      	ldr	r2, [pc, #260]	; (8012f14 <xTaskIncrementTick+0x15c>)
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6013      	str	r3, [r2, #0]
 8012e12:	4b41      	ldr	r3, [pc, #260]	; (8012f18 <xTaskIncrementTick+0x160>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	3301      	adds	r3, #1
 8012e18:	4a3f      	ldr	r2, [pc, #252]	; (8012f18 <xTaskIncrementTick+0x160>)
 8012e1a:	6013      	str	r3, [r2, #0]
 8012e1c:	f000 fae6 	bl	80133ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012e20:	4b3e      	ldr	r3, [pc, #248]	; (8012f1c <xTaskIncrementTick+0x164>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	693a      	ldr	r2, [r7, #16]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d34e      	bcc.n	8012ec8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e2a:	4b39      	ldr	r3, [pc, #228]	; (8012f10 <xTaskIncrementTick+0x158>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d101      	bne.n	8012e38 <xTaskIncrementTick+0x80>
 8012e34:	2301      	movs	r3, #1
 8012e36:	e000      	b.n	8012e3a <xTaskIncrementTick+0x82>
 8012e38:	2300      	movs	r3, #0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d004      	beq.n	8012e48 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e3e:	4b37      	ldr	r3, [pc, #220]	; (8012f1c <xTaskIncrementTick+0x164>)
 8012e40:	f04f 32ff 	mov.w	r2, #4294967295
 8012e44:	601a      	str	r2, [r3, #0]
					break;
 8012e46:	e03f      	b.n	8012ec8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012e48:	4b31      	ldr	r3, [pc, #196]	; (8012f10 <xTaskIncrementTick+0x158>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e58:	693a      	ldr	r2, [r7, #16]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d203      	bcs.n	8012e68 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e60:	4a2e      	ldr	r2, [pc, #184]	; (8012f1c <xTaskIncrementTick+0x164>)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6013      	str	r3, [r2, #0]
						break;
 8012e66:	e02f      	b.n	8012ec8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	3304      	adds	r3, #4
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7fe fced 	bl	801184c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d004      	beq.n	8012e84 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	3318      	adds	r3, #24
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fe fce4 	bl	801184c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e88:	4b25      	ldr	r3, [pc, #148]	; (8012f20 <xTaskIncrementTick+0x168>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d903      	bls.n	8012e98 <xTaskIncrementTick+0xe0>
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e94:	4a22      	ldr	r2, [pc, #136]	; (8012f20 <xTaskIncrementTick+0x168>)
 8012e96:	6013      	str	r3, [r2, #0]
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e9c:	4613      	mov	r3, r2
 8012e9e:	009b      	lsls	r3, r3, #2
 8012ea0:	4413      	add	r3, r2
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	4a1f      	ldr	r2, [pc, #124]	; (8012f24 <xTaskIncrementTick+0x16c>)
 8012ea6:	441a      	add	r2, r3
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	3304      	adds	r3, #4
 8012eac:	4619      	mov	r1, r3
 8012eae:	4610      	mov	r0, r2
 8012eb0:	f7fe fc71 	bl	8011796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb8:	4b1b      	ldr	r3, [pc, #108]	; (8012f28 <xTaskIncrementTick+0x170>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d3b3      	bcc.n	8012e2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ec6:	e7b0      	b.n	8012e2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ec8:	4b17      	ldr	r3, [pc, #92]	; (8012f28 <xTaskIncrementTick+0x170>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ece:	4915      	ldr	r1, [pc, #84]	; (8012f24 <xTaskIncrementTick+0x16c>)
 8012ed0:	4613      	mov	r3, r2
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	4413      	add	r3, r2
 8012ed6:	009b      	lsls	r3, r3, #2
 8012ed8:	440b      	add	r3, r1
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d907      	bls.n	8012ef0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	617b      	str	r3, [r7, #20]
 8012ee4:	e004      	b.n	8012ef0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012ee6:	4b11      	ldr	r3, [pc, #68]	; (8012f2c <xTaskIncrementTick+0x174>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	3301      	adds	r3, #1
 8012eec:	4a0f      	ldr	r2, [pc, #60]	; (8012f2c <xTaskIncrementTick+0x174>)
 8012eee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012ef0:	4b0f      	ldr	r3, [pc, #60]	; (8012f30 <xTaskIncrementTick+0x178>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d001      	beq.n	8012efc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012efc:	697b      	ldr	r3, [r7, #20]
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3718      	adds	r7, #24
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	20001054 	.word	0x20001054
 8012f0c:	20001030 	.word	0x20001030
 8012f10:	20000fe4 	.word	0x20000fe4
 8012f14:	20000fe8 	.word	0x20000fe8
 8012f18:	20001044 	.word	0x20001044
 8012f1c:	2000104c 	.word	0x2000104c
 8012f20:	20001034 	.word	0x20001034
 8012f24:	20000b5c 	.word	0x20000b5c
 8012f28:	20000b58 	.word	0x20000b58
 8012f2c:	2000103c 	.word	0x2000103c
 8012f30:	20001040 	.word	0x20001040

08012f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012f3a:	4b33      	ldr	r3, [pc, #204]	; (8013008 <vTaskSwitchContext+0xd4>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d003      	beq.n	8012f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012f42:	4b32      	ldr	r3, [pc, #200]	; (801300c <vTaskSwitchContext+0xd8>)
 8012f44:	2201      	movs	r2, #1
 8012f46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012f48:	e059      	b.n	8012ffe <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8012f4a:	4b30      	ldr	r3, [pc, #192]	; (801300c <vTaskSwitchContext+0xd8>)
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012f50:	f7ef f978 	bl	8002244 <getRunTimeCounterValue>
 8012f54:	4602      	mov	r2, r0
 8012f56:	4b2e      	ldr	r3, [pc, #184]	; (8013010 <vTaskSwitchContext+0xdc>)
 8012f58:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012f5a:	4b2d      	ldr	r3, [pc, #180]	; (8013010 <vTaskSwitchContext+0xdc>)
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	4b2d      	ldr	r3, [pc, #180]	; (8013014 <vTaskSwitchContext+0xe0>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d909      	bls.n	8012f7a <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012f66:	4b2c      	ldr	r3, [pc, #176]	; (8013018 <vTaskSwitchContext+0xe4>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012f6c:	4a28      	ldr	r2, [pc, #160]	; (8013010 <vTaskSwitchContext+0xdc>)
 8012f6e:	6810      	ldr	r0, [r2, #0]
 8012f70:	4a28      	ldr	r2, [pc, #160]	; (8013014 <vTaskSwitchContext+0xe0>)
 8012f72:	6812      	ldr	r2, [r2, #0]
 8012f74:	1a82      	subs	r2, r0, r2
 8012f76:	440a      	add	r2, r1
 8012f78:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8012f7a:	4b25      	ldr	r3, [pc, #148]	; (8013010 <vTaskSwitchContext+0xdc>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	4a25      	ldr	r2, [pc, #148]	; (8013014 <vTaskSwitchContext+0xe0>)
 8012f80:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012f82:	4b26      	ldr	r3, [pc, #152]	; (801301c <vTaskSwitchContext+0xe8>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	60fb      	str	r3, [r7, #12]
 8012f88:	e00f      	b.n	8012faa <vTaskSwitchContext+0x76>
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d109      	bne.n	8012fa4 <vTaskSwitchContext+0x70>
 8012f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f94:	f383 8811 	msr	BASEPRI, r3
 8012f98:	f3bf 8f6f 	isb	sy
 8012f9c:	f3bf 8f4f 	dsb	sy
 8012fa0:	607b      	str	r3, [r7, #4]
 8012fa2:	e7fe      	b.n	8012fa2 <vTaskSwitchContext+0x6e>
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	3b01      	subs	r3, #1
 8012fa8:	60fb      	str	r3, [r7, #12]
 8012faa:	491d      	ldr	r1, [pc, #116]	; (8013020 <vTaskSwitchContext+0xec>)
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	4613      	mov	r3, r2
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	4413      	add	r3, r2
 8012fb4:	009b      	lsls	r3, r3, #2
 8012fb6:	440b      	add	r3, r1
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d0e5      	beq.n	8012f8a <vTaskSwitchContext+0x56>
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	4413      	add	r3, r2
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	4a15      	ldr	r2, [pc, #84]	; (8013020 <vTaskSwitchContext+0xec>)
 8012fca:	4413      	add	r3, r2
 8012fcc:	60bb      	str	r3, [r7, #8]
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	685a      	ldr	r2, [r3, #4]
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	605a      	str	r2, [r3, #4]
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	685a      	ldr	r2, [r3, #4]
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	3308      	adds	r3, #8
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d104      	bne.n	8012fee <vTaskSwitchContext+0xba>
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	685a      	ldr	r2, [r3, #4]
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	605a      	str	r2, [r3, #4]
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	68db      	ldr	r3, [r3, #12]
 8012ff4:	4a08      	ldr	r2, [pc, #32]	; (8013018 <vTaskSwitchContext+0xe4>)
 8012ff6:	6013      	str	r3, [r2, #0]
 8012ff8:	4a08      	ldr	r2, [pc, #32]	; (801301c <vTaskSwitchContext+0xe8>)
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	6013      	str	r3, [r2, #0]
}
 8012ffe:	bf00      	nop
 8013000:	3710      	adds	r7, #16
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
 8013006:	bf00      	nop
 8013008:	20001054 	.word	0x20001054
 801300c:	20001040 	.word	0x20001040
 8013010:	2000105c 	.word	0x2000105c
 8013014:	20001058 	.word	0x20001058
 8013018:	20000b58 	.word	0x20000b58
 801301c:	20001034 	.word	0x20001034
 8013020:	20000b5c 	.word	0x20000b5c

08013024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d109      	bne.n	8013048 <vTaskPlaceOnEventList+0x24>
 8013034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013038:	f383 8811 	msr	BASEPRI, r3
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	e7fe      	b.n	8013046 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013048:	4b07      	ldr	r3, [pc, #28]	; (8013068 <vTaskPlaceOnEventList+0x44>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	3318      	adds	r3, #24
 801304e:	4619      	mov	r1, r3
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7fe fbc3 	bl	80117dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013056:	2101      	movs	r1, #1
 8013058:	6838      	ldr	r0, [r7, #0]
 801305a:	f000 fb89 	bl	8013770 <prvAddCurrentTaskToDelayedList>
}
 801305e:	bf00      	nop
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	20000b58 	.word	0x20000b58

0801306c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801306c:	b580      	push	{r7, lr}
 801306e:	b086      	sub	sp, #24
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d109      	bne.n	8013092 <vTaskPlaceOnEventListRestricted+0x26>
 801307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013082:	f383 8811 	msr	BASEPRI, r3
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	617b      	str	r3, [r7, #20]
 8013090:	e7fe      	b.n	8013090 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013092:	4b0a      	ldr	r3, [pc, #40]	; (80130bc <vTaskPlaceOnEventListRestricted+0x50>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	3318      	adds	r3, #24
 8013098:	4619      	mov	r1, r3
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f7fe fb7b 	bl	8011796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d002      	beq.n	80130ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80130a6:	f04f 33ff 	mov.w	r3, #4294967295
 80130aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80130ac:	6879      	ldr	r1, [r7, #4]
 80130ae:	68b8      	ldr	r0, [r7, #8]
 80130b0:	f000 fb5e 	bl	8013770 <prvAddCurrentTaskToDelayedList>
	}
 80130b4:	bf00      	nop
 80130b6:	3718      	adds	r7, #24
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	20000b58 	.word	0x20000b58

080130c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b086      	sub	sp, #24
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d109      	bne.n	80130ea <xTaskRemoveFromEventList+0x2a>
 80130d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130da:	f383 8811 	msr	BASEPRI, r3
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	f3bf 8f4f 	dsb	sy
 80130e6:	60fb      	str	r3, [r7, #12]
 80130e8:	e7fe      	b.n	80130e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	3318      	adds	r3, #24
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fe fbac 	bl	801184c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130f4:	4b1d      	ldr	r3, [pc, #116]	; (801316c <xTaskRemoveFromEventList+0xac>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d11d      	bne.n	8013138 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	3304      	adds	r3, #4
 8013100:	4618      	mov	r0, r3
 8013102:	f7fe fba3 	bl	801184c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801310a:	4b19      	ldr	r3, [pc, #100]	; (8013170 <xTaskRemoveFromEventList+0xb0>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	429a      	cmp	r2, r3
 8013110:	d903      	bls.n	801311a <xTaskRemoveFromEventList+0x5a>
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013116:	4a16      	ldr	r2, [pc, #88]	; (8013170 <xTaskRemoveFromEventList+0xb0>)
 8013118:	6013      	str	r3, [r2, #0]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801311e:	4613      	mov	r3, r2
 8013120:	009b      	lsls	r3, r3, #2
 8013122:	4413      	add	r3, r2
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	4a13      	ldr	r2, [pc, #76]	; (8013174 <xTaskRemoveFromEventList+0xb4>)
 8013128:	441a      	add	r2, r3
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	3304      	adds	r3, #4
 801312e:	4619      	mov	r1, r3
 8013130:	4610      	mov	r0, r2
 8013132:	f7fe fb30 	bl	8011796 <vListInsertEnd>
 8013136:	e005      	b.n	8013144 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	3318      	adds	r3, #24
 801313c:	4619      	mov	r1, r3
 801313e:	480e      	ldr	r0, [pc, #56]	; (8013178 <xTaskRemoveFromEventList+0xb8>)
 8013140:	f7fe fb29 	bl	8011796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013148:	4b0c      	ldr	r3, [pc, #48]	; (801317c <xTaskRemoveFromEventList+0xbc>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801314e:	429a      	cmp	r2, r3
 8013150:	d905      	bls.n	801315e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013152:	2301      	movs	r3, #1
 8013154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013156:	4b0a      	ldr	r3, [pc, #40]	; (8013180 <xTaskRemoveFromEventList+0xc0>)
 8013158:	2201      	movs	r2, #1
 801315a:	601a      	str	r2, [r3, #0]
 801315c:	e001      	b.n	8013162 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801315e:	2300      	movs	r3, #0
 8013160:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013162:	697b      	ldr	r3, [r7, #20]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3718      	adds	r7, #24
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	20001054 	.word	0x20001054
 8013170:	20001034 	.word	0x20001034
 8013174:	20000b5c 	.word	0x20000b5c
 8013178:	20000fec 	.word	0x20000fec
 801317c:	20000b58 	.word	0x20000b58
 8013180:	20001040 	.word	0x20001040

08013184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013184:	b480      	push	{r7}
 8013186:	b083      	sub	sp, #12
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801318c:	4b06      	ldr	r3, [pc, #24]	; (80131a8 <vTaskInternalSetTimeOutState+0x24>)
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013194:	4b05      	ldr	r3, [pc, #20]	; (80131ac <vTaskInternalSetTimeOutState+0x28>)
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	605a      	str	r2, [r3, #4]
}
 801319c:	bf00      	nop
 801319e:	370c      	adds	r7, #12
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bc80      	pop	{r7}
 80131a4:	4770      	bx	lr
 80131a6:	bf00      	nop
 80131a8:	20001044 	.word	0x20001044
 80131ac:	20001030 	.word	0x20001030

080131b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b088      	sub	sp, #32
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d109      	bne.n	80131d4 <xTaskCheckForTimeOut+0x24>
 80131c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c4:	f383 8811 	msr	BASEPRI, r3
 80131c8:	f3bf 8f6f 	isb	sy
 80131cc:	f3bf 8f4f 	dsb	sy
 80131d0:	613b      	str	r3, [r7, #16]
 80131d2:	e7fe      	b.n	80131d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d109      	bne.n	80131ee <xTaskCheckForTimeOut+0x3e>
 80131da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131de:	f383 8811 	msr	BASEPRI, r3
 80131e2:	f3bf 8f6f 	isb	sy
 80131e6:	f3bf 8f4f 	dsb	sy
 80131ea:	60fb      	str	r3, [r7, #12]
 80131ec:	e7fe      	b.n	80131ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80131ee:	f000 ff0b 	bl	8014008 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80131f2:	4b1d      	ldr	r3, [pc, #116]	; (8013268 <xTaskCheckForTimeOut+0xb8>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	69ba      	ldr	r2, [r7, #24]
 80131fe:	1ad3      	subs	r3, r2, r3
 8013200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801320a:	d102      	bne.n	8013212 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801320c:	2300      	movs	r3, #0
 801320e:	61fb      	str	r3, [r7, #28]
 8013210:	e023      	b.n	801325a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	4b15      	ldr	r3, [pc, #84]	; (801326c <xTaskCheckForTimeOut+0xbc>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	429a      	cmp	r2, r3
 801321c:	d007      	beq.n	801322e <xTaskCheckForTimeOut+0x7e>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	69ba      	ldr	r2, [r7, #24]
 8013224:	429a      	cmp	r2, r3
 8013226:	d302      	bcc.n	801322e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013228:	2301      	movs	r3, #1
 801322a:	61fb      	str	r3, [r7, #28]
 801322c:	e015      	b.n	801325a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	697a      	ldr	r2, [r7, #20]
 8013234:	429a      	cmp	r2, r3
 8013236:	d20b      	bcs.n	8013250 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	1ad2      	subs	r2, r2, r3
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7ff ff9d 	bl	8013184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801324a:	2300      	movs	r3, #0
 801324c:	61fb      	str	r3, [r7, #28]
 801324e:	e004      	b.n	801325a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	2200      	movs	r2, #0
 8013254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013256:	2301      	movs	r3, #1
 8013258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801325a:	f000 ff03 	bl	8014064 <vPortExitCritical>

	return xReturn;
 801325e:	69fb      	ldr	r3, [r7, #28]
}
 8013260:	4618      	mov	r0, r3
 8013262:	3720      	adds	r7, #32
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	20001030 	.word	0x20001030
 801326c:	20001044 	.word	0x20001044

08013270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013270:	b480      	push	{r7}
 8013272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013274:	4b03      	ldr	r3, [pc, #12]	; (8013284 <vTaskMissedYield+0x14>)
 8013276:	2201      	movs	r2, #1
 8013278:	601a      	str	r2, [r3, #0]
}
 801327a:	bf00      	nop
 801327c:	46bd      	mov	sp, r7
 801327e:	bc80      	pop	{r7}
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop
 8013284:	20001040 	.word	0x20001040

08013288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013290:	f000 f852 	bl	8013338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013294:	4b06      	ldr	r3, [pc, #24]	; (80132b0 <prvIdleTask+0x28>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2b01      	cmp	r3, #1
 801329a:	d9f9      	bls.n	8013290 <prvIdleTask+0x8>
			{
				taskYIELD();
 801329c:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <prvIdleTask+0x2c>)
 801329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132a2:	601a      	str	r2, [r3, #0]
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80132ac:	e7f0      	b.n	8013290 <prvIdleTask+0x8>
 80132ae:	bf00      	nop
 80132b0:	20000b5c 	.word	0x20000b5c
 80132b4:	e000ed04 	.word	0xe000ed04

080132b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80132be:	2300      	movs	r3, #0
 80132c0:	607b      	str	r3, [r7, #4]
 80132c2:	e00c      	b.n	80132de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	4613      	mov	r3, r2
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	4413      	add	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4a12      	ldr	r2, [pc, #72]	; (8013318 <prvInitialiseTaskLists+0x60>)
 80132d0:	4413      	add	r3, r2
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fe fa34 	bl	8011740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	3301      	adds	r3, #1
 80132dc:	607b      	str	r3, [r7, #4]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b37      	cmp	r3, #55	; 0x37
 80132e2:	d9ef      	bls.n	80132c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80132e4:	480d      	ldr	r0, [pc, #52]	; (801331c <prvInitialiseTaskLists+0x64>)
 80132e6:	f7fe fa2b 	bl	8011740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80132ea:	480d      	ldr	r0, [pc, #52]	; (8013320 <prvInitialiseTaskLists+0x68>)
 80132ec:	f7fe fa28 	bl	8011740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80132f0:	480c      	ldr	r0, [pc, #48]	; (8013324 <prvInitialiseTaskLists+0x6c>)
 80132f2:	f7fe fa25 	bl	8011740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80132f6:	480c      	ldr	r0, [pc, #48]	; (8013328 <prvInitialiseTaskLists+0x70>)
 80132f8:	f7fe fa22 	bl	8011740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80132fc:	480b      	ldr	r0, [pc, #44]	; (801332c <prvInitialiseTaskLists+0x74>)
 80132fe:	f7fe fa1f 	bl	8011740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013302:	4b0b      	ldr	r3, [pc, #44]	; (8013330 <prvInitialiseTaskLists+0x78>)
 8013304:	4a05      	ldr	r2, [pc, #20]	; (801331c <prvInitialiseTaskLists+0x64>)
 8013306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013308:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <prvInitialiseTaskLists+0x7c>)
 801330a:	4a05      	ldr	r2, [pc, #20]	; (8013320 <prvInitialiseTaskLists+0x68>)
 801330c:	601a      	str	r2, [r3, #0]
}
 801330e:	bf00      	nop
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	20000b5c 	.word	0x20000b5c
 801331c:	20000fbc 	.word	0x20000fbc
 8013320:	20000fd0 	.word	0x20000fd0
 8013324:	20000fec 	.word	0x20000fec
 8013328:	20001000 	.word	0x20001000
 801332c:	20001018 	.word	0x20001018
 8013330:	20000fe4 	.word	0x20000fe4
 8013334:	20000fe8 	.word	0x20000fe8

08013338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801333e:	e019      	b.n	8013374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013340:	f000 fe62 	bl	8014008 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013344:	4b0f      	ldr	r3, [pc, #60]	; (8013384 <prvCheckTasksWaitingTermination+0x4c>)
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	3304      	adds	r3, #4
 8013350:	4618      	mov	r0, r3
 8013352:	f7fe fa7b 	bl	801184c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013356:	4b0c      	ldr	r3, [pc, #48]	; (8013388 <prvCheckTasksWaitingTermination+0x50>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	3b01      	subs	r3, #1
 801335c:	4a0a      	ldr	r2, [pc, #40]	; (8013388 <prvCheckTasksWaitingTermination+0x50>)
 801335e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013360:	4b0a      	ldr	r3, [pc, #40]	; (801338c <prvCheckTasksWaitingTermination+0x54>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	3b01      	subs	r3, #1
 8013366:	4a09      	ldr	r2, [pc, #36]	; (801338c <prvCheckTasksWaitingTermination+0x54>)
 8013368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801336a:	f000 fe7b 	bl	8014064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 f80e 	bl	8013390 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013374:	4b05      	ldr	r3, [pc, #20]	; (801338c <prvCheckTasksWaitingTermination+0x54>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d1e1      	bne.n	8013340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801337c:	bf00      	nop
 801337e:	3708      	adds	r7, #8
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	20001000 	.word	0x20001000
 8013388:	2000102c 	.word	0x2000102c
 801338c:	20001014 	.word	0x20001014

08013390 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d108      	bne.n	80133b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a6:	4618      	mov	r0, r3
 80133a8:	f000 ffe6 	bl	8014378 <vPortFree>
				vPortFree( pxTCB );
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 ffe3 	bl	8014378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80133b2:	e017      	b.n	80133e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d103      	bne.n	80133c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f000 ffda 	bl	8014378 <vPortFree>
	}
 80133c4:	e00e      	b.n	80133e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d009      	beq.n	80133e4 <prvDeleteTCB+0x54>
 80133d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d4:	f383 8811 	msr	BASEPRI, r3
 80133d8:	f3bf 8f6f 	isb	sy
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	60fb      	str	r3, [r7, #12]
 80133e2:	e7fe      	b.n	80133e2 <prvDeleteTCB+0x52>
	}
 80133e4:	bf00      	nop
 80133e6:	3710      	adds	r7, #16
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133f2:	4b0e      	ldr	r3, [pc, #56]	; (801342c <prvResetNextTaskUnblockTime+0x40>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d101      	bne.n	8013400 <prvResetNextTaskUnblockTime+0x14>
 80133fc:	2301      	movs	r3, #1
 80133fe:	e000      	b.n	8013402 <prvResetNextTaskUnblockTime+0x16>
 8013400:	2300      	movs	r3, #0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d004      	beq.n	8013410 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013406:	4b0a      	ldr	r3, [pc, #40]	; (8013430 <prvResetNextTaskUnblockTime+0x44>)
 8013408:	f04f 32ff 	mov.w	r2, #4294967295
 801340c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801340e:	e008      	b.n	8013422 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013410:	4b06      	ldr	r3, [pc, #24]	; (801342c <prvResetNextTaskUnblockTime+0x40>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	68db      	ldr	r3, [r3, #12]
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	4a04      	ldr	r2, [pc, #16]	; (8013430 <prvResetNextTaskUnblockTime+0x44>)
 8013420:	6013      	str	r3, [r2, #0]
}
 8013422:	bf00      	nop
 8013424:	370c      	adds	r7, #12
 8013426:	46bd      	mov	sp, r7
 8013428:	bc80      	pop	{r7}
 801342a:	4770      	bx	lr
 801342c:	20000fe4 	.word	0x20000fe4
 8013430:	2000104c 	.word	0x2000104c

08013434 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8013434:	b480      	push	{r7}
 8013436:	b083      	sub	sp, #12
 8013438:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801343a:	4b04      	ldr	r3, [pc, #16]	; (801344c <xTaskGetCurrentTaskHandle+0x18>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013440:	687b      	ldr	r3, [r7, #4]
	}
 8013442:	4618      	mov	r0, r3
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	bc80      	pop	{r7}
 801344a:	4770      	bx	lr
 801344c:	20000b58 	.word	0x20000b58

08013450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013450:	b480      	push	{r7}
 8013452:	b083      	sub	sp, #12
 8013454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013456:	4b0b      	ldr	r3, [pc, #44]	; (8013484 <xTaskGetSchedulerState+0x34>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d102      	bne.n	8013464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801345e:	2301      	movs	r3, #1
 8013460:	607b      	str	r3, [r7, #4]
 8013462:	e008      	b.n	8013476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013464:	4b08      	ldr	r3, [pc, #32]	; (8013488 <xTaskGetSchedulerState+0x38>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d102      	bne.n	8013472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801346c:	2302      	movs	r3, #2
 801346e:	607b      	str	r3, [r7, #4]
 8013470:	e001      	b.n	8013476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013472:	2300      	movs	r3, #0
 8013474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013476:	687b      	ldr	r3, [r7, #4]
	}
 8013478:	4618      	mov	r0, r3
 801347a:	370c      	adds	r7, #12
 801347c:	46bd      	mov	sp, r7
 801347e:	bc80      	pop	{r7}
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop
 8013484:	20001038 	.word	0x20001038
 8013488:	20001054 	.word	0x20001054

0801348c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013498:	2300      	movs	r3, #0
 801349a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d056      	beq.n	8013550 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a6:	4b2d      	ldr	r3, [pc, #180]	; (801355c <xTaskPriorityInherit+0xd0>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d246      	bcs.n	801353e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	699b      	ldr	r3, [r3, #24]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	db06      	blt.n	80134c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134b8:	4b28      	ldr	r3, [pc, #160]	; (801355c <xTaskPriorityInherit+0xd0>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	6959      	ldr	r1, [r3, #20]
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ce:	4613      	mov	r3, r2
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	4413      	add	r3, r2
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	4a22      	ldr	r2, [pc, #136]	; (8013560 <xTaskPriorityInherit+0xd4>)
 80134d8:	4413      	add	r3, r2
 80134da:	4299      	cmp	r1, r3
 80134dc:	d101      	bne.n	80134e2 <xTaskPriorityInherit+0x56>
 80134de:	2301      	movs	r3, #1
 80134e0:	e000      	b.n	80134e4 <xTaskPriorityInherit+0x58>
 80134e2:	2300      	movs	r3, #0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d022      	beq.n	801352e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	3304      	adds	r3, #4
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fe f9ad 	bl	801184c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80134f2:	4b1a      	ldr	r3, [pc, #104]	; (801355c <xTaskPriorityInherit+0xd0>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013500:	4b18      	ldr	r3, [pc, #96]	; (8013564 <xTaskPriorityInherit+0xd8>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	429a      	cmp	r2, r3
 8013506:	d903      	bls.n	8013510 <xTaskPriorityInherit+0x84>
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801350c:	4a15      	ldr	r2, [pc, #84]	; (8013564 <xTaskPriorityInherit+0xd8>)
 801350e:	6013      	str	r3, [r2, #0]
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013514:	4613      	mov	r3, r2
 8013516:	009b      	lsls	r3, r3, #2
 8013518:	4413      	add	r3, r2
 801351a:	009b      	lsls	r3, r3, #2
 801351c:	4a10      	ldr	r2, [pc, #64]	; (8013560 <xTaskPriorityInherit+0xd4>)
 801351e:	441a      	add	r2, r3
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	3304      	adds	r3, #4
 8013524:	4619      	mov	r1, r3
 8013526:	4610      	mov	r0, r2
 8013528:	f7fe f935 	bl	8011796 <vListInsertEnd>
 801352c:	e004      	b.n	8013538 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801352e:	4b0b      	ldr	r3, [pc, #44]	; (801355c <xTaskPriorityInherit+0xd0>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013538:	2301      	movs	r3, #1
 801353a:	60fb      	str	r3, [r7, #12]
 801353c:	e008      	b.n	8013550 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013542:	4b06      	ldr	r3, [pc, #24]	; (801355c <xTaskPriorityInherit+0xd0>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013548:	429a      	cmp	r2, r3
 801354a:	d201      	bcs.n	8013550 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801354c:	2301      	movs	r3, #1
 801354e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013550:	68fb      	ldr	r3, [r7, #12]
	}
 8013552:	4618      	mov	r0, r3
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	20000b58 	.word	0x20000b58
 8013560:	20000b5c 	.word	0x20000b5c
 8013564:	20001034 	.word	0x20001034

08013568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013574:	2300      	movs	r3, #0
 8013576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d054      	beq.n	8013628 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801357e:	4b2d      	ldr	r3, [pc, #180]	; (8013634 <xTaskPriorityDisinherit+0xcc>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	693a      	ldr	r2, [r7, #16]
 8013584:	429a      	cmp	r2, r3
 8013586:	d009      	beq.n	801359c <xTaskPriorityDisinherit+0x34>
 8013588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358c:	f383 8811 	msr	BASEPRI, r3
 8013590:	f3bf 8f6f 	isb	sy
 8013594:	f3bf 8f4f 	dsb	sy
 8013598:	60fb      	str	r3, [r7, #12]
 801359a:	e7fe      	b.n	801359a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d109      	bne.n	80135b8 <xTaskPriorityDisinherit+0x50>
 80135a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a8:	f383 8811 	msr	BASEPRI, r3
 80135ac:	f3bf 8f6f 	isb	sy
 80135b0:	f3bf 8f4f 	dsb	sy
 80135b4:	60bb      	str	r3, [r7, #8]
 80135b6:	e7fe      	b.n	80135b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135bc:	1e5a      	subs	r2, r3, #1
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d02c      	beq.n	8013628 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d128      	bne.n	8013628 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	3304      	adds	r3, #4
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fe f936 	bl	801184c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135f8:	4b0f      	ldr	r3, [pc, #60]	; (8013638 <xTaskPriorityDisinherit+0xd0>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d903      	bls.n	8013608 <xTaskPriorityDisinherit+0xa0>
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013604:	4a0c      	ldr	r2, [pc, #48]	; (8013638 <xTaskPriorityDisinherit+0xd0>)
 8013606:	6013      	str	r3, [r2, #0]
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801360c:	4613      	mov	r3, r2
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	4413      	add	r3, r2
 8013612:	009b      	lsls	r3, r3, #2
 8013614:	4a09      	ldr	r2, [pc, #36]	; (801363c <xTaskPriorityDisinherit+0xd4>)
 8013616:	441a      	add	r2, r3
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	3304      	adds	r3, #4
 801361c:	4619      	mov	r1, r3
 801361e:	4610      	mov	r0, r2
 8013620:	f7fe f8b9 	bl	8011796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013624:	2301      	movs	r3, #1
 8013626:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013628:	697b      	ldr	r3, [r7, #20]
	}
 801362a:	4618      	mov	r0, r3
 801362c:	3718      	adds	r7, #24
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
 8013632:	bf00      	nop
 8013634:	20000b58 	.word	0x20000b58
 8013638:	20001034 	.word	0x20001034
 801363c:	20000b5c 	.word	0x20000b5c

08013640 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013640:	b580      	push	{r7, lr}
 8013642:	b088      	sub	sp, #32
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801364e:	2301      	movs	r3, #1
 8013650:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d06d      	beq.n	8013734 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801365c:	2b00      	cmp	r3, #0
 801365e:	d109      	bne.n	8013674 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013664:	f383 8811 	msr	BASEPRI, r3
 8013668:	f3bf 8f6f 	isb	sy
 801366c:	f3bf 8f4f 	dsb	sy
 8013670:	60fb      	str	r3, [r7, #12]
 8013672:	e7fe      	b.n	8013672 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	429a      	cmp	r2, r3
 801367c:	d902      	bls.n	8013684 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	61fb      	str	r3, [r7, #28]
 8013682:	e002      	b.n	801368a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013688:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801368e:	69fa      	ldr	r2, [r7, #28]
 8013690:	429a      	cmp	r2, r3
 8013692:	d04f      	beq.n	8013734 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013698:	697a      	ldr	r2, [r7, #20]
 801369a:	429a      	cmp	r2, r3
 801369c:	d14a      	bne.n	8013734 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801369e:	4b27      	ldr	r3, [pc, #156]	; (801373c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	69ba      	ldr	r2, [r7, #24]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d109      	bne.n	80136bc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80136a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ac:	f383 8811 	msr	BASEPRI, r3
 80136b0:	f3bf 8f6f 	isb	sy
 80136b4:	f3bf 8f4f 	dsb	sy
 80136b8:	60bb      	str	r3, [r7, #8]
 80136ba:	e7fe      	b.n	80136ba <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80136c2:	69bb      	ldr	r3, [r7, #24]
 80136c4:	69fa      	ldr	r2, [r7, #28]
 80136c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	699b      	ldr	r3, [r3, #24]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	db04      	blt.n	80136da <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136d0:	69fb      	ldr	r3, [r7, #28]
 80136d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	6959      	ldr	r1, [r3, #20]
 80136de:	693a      	ldr	r2, [r7, #16]
 80136e0:	4613      	mov	r3, r2
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	4413      	add	r3, r2
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	4a15      	ldr	r2, [pc, #84]	; (8013740 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80136ea:	4413      	add	r3, r2
 80136ec:	4299      	cmp	r1, r3
 80136ee:	d101      	bne.n	80136f4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80136f0:	2301      	movs	r3, #1
 80136f2:	e000      	b.n	80136f6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80136f4:	2300      	movs	r3, #0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d01c      	beq.n	8013734 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	3304      	adds	r3, #4
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fe f8a4 	bl	801184c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013708:	4b0e      	ldr	r3, [pc, #56]	; (8013744 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	429a      	cmp	r2, r3
 801370e:	d903      	bls.n	8013718 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013714:	4a0b      	ldr	r2, [pc, #44]	; (8013744 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013716:	6013      	str	r3, [r2, #0]
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801371c:	4613      	mov	r3, r2
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	4413      	add	r3, r2
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	4a06      	ldr	r2, [pc, #24]	; (8013740 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013726:	441a      	add	r2, r3
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	3304      	adds	r3, #4
 801372c:	4619      	mov	r1, r3
 801372e:	4610      	mov	r0, r2
 8013730:	f7fe f831 	bl	8011796 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013734:	bf00      	nop
 8013736:	3720      	adds	r7, #32
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}
 801373c:	20000b58 	.word	0x20000b58
 8013740:	20000b5c 	.word	0x20000b5c
 8013744:	20001034 	.word	0x20001034

08013748 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013748:	b480      	push	{r7}
 801374a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801374c:	4b07      	ldr	r3, [pc, #28]	; (801376c <pvTaskIncrementMutexHeldCount+0x24>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d004      	beq.n	801375e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013754:	4b05      	ldr	r3, [pc, #20]	; (801376c <pvTaskIncrementMutexHeldCount+0x24>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801375a:	3201      	adds	r2, #1
 801375c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 801375e:	4b03      	ldr	r3, [pc, #12]	; (801376c <pvTaskIncrementMutexHeldCount+0x24>)
 8013760:	681b      	ldr	r3, [r3, #0]
	}
 8013762:	4618      	mov	r0, r3
 8013764:	46bd      	mov	sp, r7
 8013766:	bc80      	pop	{r7}
 8013768:	4770      	bx	lr
 801376a:	bf00      	nop
 801376c:	20000b58 	.word	0x20000b58

08013770 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801377a:	4b21      	ldr	r3, [pc, #132]	; (8013800 <prvAddCurrentTaskToDelayedList+0x90>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013780:	4b20      	ldr	r3, [pc, #128]	; (8013804 <prvAddCurrentTaskToDelayedList+0x94>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	3304      	adds	r3, #4
 8013786:	4618      	mov	r0, r3
 8013788:	f7fe f860 	bl	801184c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013792:	d10a      	bne.n	80137aa <prvAddCurrentTaskToDelayedList+0x3a>
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d007      	beq.n	80137aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801379a:	4b1a      	ldr	r3, [pc, #104]	; (8013804 <prvAddCurrentTaskToDelayedList+0x94>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	3304      	adds	r3, #4
 80137a0:	4619      	mov	r1, r3
 80137a2:	4819      	ldr	r0, [pc, #100]	; (8013808 <prvAddCurrentTaskToDelayedList+0x98>)
 80137a4:	f7fd fff7 	bl	8011796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80137a8:	e026      	b.n	80137f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80137aa:	68fa      	ldr	r2, [r7, #12]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4413      	add	r3, r2
 80137b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80137b2:	4b14      	ldr	r3, [pc, #80]	; (8013804 <prvAddCurrentTaskToDelayedList+0x94>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	68ba      	ldr	r2, [r7, #8]
 80137b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80137ba:	68ba      	ldr	r2, [r7, #8]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d209      	bcs.n	80137d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137c2:	4b12      	ldr	r3, [pc, #72]	; (801380c <prvAddCurrentTaskToDelayedList+0x9c>)
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	4b0f      	ldr	r3, [pc, #60]	; (8013804 <prvAddCurrentTaskToDelayedList+0x94>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	3304      	adds	r3, #4
 80137cc:	4619      	mov	r1, r3
 80137ce:	4610      	mov	r0, r2
 80137d0:	f7fe f804 	bl	80117dc <vListInsert>
}
 80137d4:	e010      	b.n	80137f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137d6:	4b0e      	ldr	r3, [pc, #56]	; (8013810 <prvAddCurrentTaskToDelayedList+0xa0>)
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	4b0a      	ldr	r3, [pc, #40]	; (8013804 <prvAddCurrentTaskToDelayedList+0x94>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	3304      	adds	r3, #4
 80137e0:	4619      	mov	r1, r3
 80137e2:	4610      	mov	r0, r2
 80137e4:	f7fd fffa 	bl	80117dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80137e8:	4b0a      	ldr	r3, [pc, #40]	; (8013814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	68ba      	ldr	r2, [r7, #8]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d202      	bcs.n	80137f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80137f2:	4a08      	ldr	r2, [pc, #32]	; (8013814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	6013      	str	r3, [r2, #0]
}
 80137f8:	bf00      	nop
 80137fa:	3710      	adds	r7, #16
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	20001030 	.word	0x20001030
 8013804:	20000b58 	.word	0x20000b58
 8013808:	20001018 	.word	0x20001018
 801380c:	20000fe8 	.word	0x20000fe8
 8013810:	20000fe4 	.word	0x20000fe4
 8013814:	2000104c 	.word	0x2000104c

08013818 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b08a      	sub	sp, #40	; 0x28
 801381c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801381e:	2300      	movs	r3, #0
 8013820:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013822:	f000 fac3 	bl	8013dac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013826:	4b1c      	ldr	r3, [pc, #112]	; (8013898 <xTimerCreateTimerTask+0x80>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d021      	beq.n	8013872 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801382e:	2300      	movs	r3, #0
 8013830:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013832:	2300      	movs	r3, #0
 8013834:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013836:	1d3a      	adds	r2, r7, #4
 8013838:	f107 0108 	add.w	r1, r7, #8
 801383c:	f107 030c 	add.w	r3, r7, #12
 8013840:	4618      	mov	r0, r3
 8013842:	f7fd ff63 	bl	801170c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013846:	6879      	ldr	r1, [r7, #4]
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	68fa      	ldr	r2, [r7, #12]
 801384c:	9202      	str	r2, [sp, #8]
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	2302      	movs	r3, #2
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	2300      	movs	r3, #0
 8013856:	460a      	mov	r2, r1
 8013858:	4910      	ldr	r1, [pc, #64]	; (801389c <xTimerCreateTimerTask+0x84>)
 801385a:	4811      	ldr	r0, [pc, #68]	; (80138a0 <xTimerCreateTimerTask+0x88>)
 801385c:	f7fe ffc0 	bl	80127e0 <xTaskCreateStatic>
 8013860:	4602      	mov	r2, r0
 8013862:	4b10      	ldr	r3, [pc, #64]	; (80138a4 <xTimerCreateTimerTask+0x8c>)
 8013864:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013866:	4b0f      	ldr	r3, [pc, #60]	; (80138a4 <xTimerCreateTimerTask+0x8c>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d001      	beq.n	8013872 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801386e:	2301      	movs	r3, #1
 8013870:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d109      	bne.n	801388c <xTimerCreateTimerTask+0x74>
 8013878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801387c:	f383 8811 	msr	BASEPRI, r3
 8013880:	f3bf 8f6f 	isb	sy
 8013884:	f3bf 8f4f 	dsb	sy
 8013888:	613b      	str	r3, [r7, #16]
 801388a:	e7fe      	b.n	801388a <xTimerCreateTimerTask+0x72>
	return xReturn;
 801388c:	697b      	ldr	r3, [r7, #20]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	20001090 	.word	0x20001090
 801389c:	0801a950 	.word	0x0801a950
 80138a0:	080139c1 	.word	0x080139c1
 80138a4:	20001094 	.word	0x20001094

080138a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08a      	sub	sp, #40	; 0x28
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	607a      	str	r2, [r7, #4]
 80138b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80138b6:	2300      	movs	r3, #0
 80138b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d109      	bne.n	80138d4 <xTimerGenericCommand+0x2c>
 80138c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c4:	f383 8811 	msr	BASEPRI, r3
 80138c8:	f3bf 8f6f 	isb	sy
 80138cc:	f3bf 8f4f 	dsb	sy
 80138d0:	623b      	str	r3, [r7, #32]
 80138d2:	e7fe      	b.n	80138d2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80138d4:	4b19      	ldr	r3, [pc, #100]	; (801393c <xTimerGenericCommand+0x94>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d02a      	beq.n	8013932 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	2b05      	cmp	r3, #5
 80138ec:	dc18      	bgt.n	8013920 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80138ee:	f7ff fdaf 	bl	8013450 <xTaskGetSchedulerState>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b02      	cmp	r3, #2
 80138f6:	d109      	bne.n	801390c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80138f8:	4b10      	ldr	r3, [pc, #64]	; (801393c <xTimerGenericCommand+0x94>)
 80138fa:	6818      	ldr	r0, [r3, #0]
 80138fc:	f107 0110 	add.w	r1, r7, #16
 8013900:	2300      	movs	r3, #0
 8013902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013904:	f7fe f9ec 	bl	8011ce0 <xQueueGenericSend>
 8013908:	6278      	str	r0, [r7, #36]	; 0x24
 801390a:	e012      	b.n	8013932 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801390c:	4b0b      	ldr	r3, [pc, #44]	; (801393c <xTimerGenericCommand+0x94>)
 801390e:	6818      	ldr	r0, [r3, #0]
 8013910:	f107 0110 	add.w	r1, r7, #16
 8013914:	2300      	movs	r3, #0
 8013916:	2200      	movs	r2, #0
 8013918:	f7fe f9e2 	bl	8011ce0 <xQueueGenericSend>
 801391c:	6278      	str	r0, [r7, #36]	; 0x24
 801391e:	e008      	b.n	8013932 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013920:	4b06      	ldr	r3, [pc, #24]	; (801393c <xTimerGenericCommand+0x94>)
 8013922:	6818      	ldr	r0, [r3, #0]
 8013924:	f107 0110 	add.w	r1, r7, #16
 8013928:	2300      	movs	r3, #0
 801392a:	683a      	ldr	r2, [r7, #0]
 801392c:	f7fe fad2 	bl	8011ed4 <xQueueGenericSendFromISR>
 8013930:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013934:	4618      	mov	r0, r3
 8013936:	3728      	adds	r7, #40	; 0x28
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	20001090 	.word	0x20001090

08013940 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b088      	sub	sp, #32
 8013944:	af02      	add	r7, sp, #8
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801394a:	4b1c      	ldr	r3, [pc, #112]	; (80139bc <prvProcessExpiredTimer+0x7c>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	3304      	adds	r3, #4
 8013958:	4618      	mov	r0, r3
 801395a:	f7fd ff77 	bl	801184c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	69db      	ldr	r3, [r3, #28]
 8013962:	2b01      	cmp	r3, #1
 8013964:	d121      	bne.n	80139aa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	699a      	ldr	r2, [r3, #24]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	18d1      	adds	r1, r2, r3
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	683a      	ldr	r2, [r7, #0]
 8013972:	6978      	ldr	r0, [r7, #20]
 8013974:	f000 f8c8 	bl	8013b08 <prvInsertTimerInActiveList>
 8013978:	4603      	mov	r3, r0
 801397a:	2b00      	cmp	r3, #0
 801397c:	d015      	beq.n	80139aa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801397e:	2300      	movs	r3, #0
 8013980:	9300      	str	r3, [sp, #0]
 8013982:	2300      	movs	r3, #0
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	2100      	movs	r1, #0
 8013988:	6978      	ldr	r0, [r7, #20]
 801398a:	f7ff ff8d 	bl	80138a8 <xTimerGenericCommand>
 801398e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d109      	bne.n	80139aa <prvProcessExpiredTimer+0x6a>
 8013996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801399a:	f383 8811 	msr	BASEPRI, r3
 801399e:	f3bf 8f6f 	isb	sy
 80139a2:	f3bf 8f4f 	dsb	sy
 80139a6:	60fb      	str	r3, [r7, #12]
 80139a8:	e7fe      	b.n	80139a8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ae:	6978      	ldr	r0, [r7, #20]
 80139b0:	4798      	blx	r3
}
 80139b2:	bf00      	nop
 80139b4:	3718      	adds	r7, #24
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	20001088 	.word	0x20001088

080139c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139c8:	f107 0308 	add.w	r3, r7, #8
 80139cc:	4618      	mov	r0, r3
 80139ce:	f000 f857 	bl	8013a80 <prvGetNextExpireTime>
 80139d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	4619      	mov	r1, r3
 80139d8:	68f8      	ldr	r0, [r7, #12]
 80139da:	f000 f803 	bl	80139e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80139de:	f000 f8d5 	bl	8013b8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139e2:	e7f1      	b.n	80139c8 <prvTimerTask+0x8>

080139e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80139ee:	f7ff f92b 	bl	8012c48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80139f2:	f107 0308 	add.w	r3, r7, #8
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 f866 	bl	8013ac8 <prvSampleTimeNow>
 80139fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d130      	bne.n	8013a66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d10a      	bne.n	8013a20 <prvProcessTimerOrBlockTask+0x3c>
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d806      	bhi.n	8013a20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013a12:	f7ff f927 	bl	8012c64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013a16:	68f9      	ldr	r1, [r7, #12]
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7ff ff91 	bl	8013940 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013a1e:	e024      	b.n	8013a6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d008      	beq.n	8013a38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013a26:	4b13      	ldr	r3, [pc, #76]	; (8013a74 <prvProcessTimerOrBlockTask+0x90>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	bf0c      	ite	eq
 8013a30:	2301      	moveq	r3, #1
 8013a32:	2300      	movne	r3, #0
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013a38:	4b0f      	ldr	r3, [pc, #60]	; (8013a78 <prvProcessTimerOrBlockTask+0x94>)
 8013a3a:	6818      	ldr	r0, [r3, #0]
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	683a      	ldr	r2, [r7, #0]
 8013a44:	4619      	mov	r1, r3
 8013a46:	f7fe fe97 	bl	8012778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013a4a:	f7ff f90b 	bl	8012c64 <xTaskResumeAll>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10a      	bne.n	8013a6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013a54:	4b09      	ldr	r3, [pc, #36]	; (8013a7c <prvProcessTimerOrBlockTask+0x98>)
 8013a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a5a:	601a      	str	r2, [r3, #0]
 8013a5c:	f3bf 8f4f 	dsb	sy
 8013a60:	f3bf 8f6f 	isb	sy
}
 8013a64:	e001      	b.n	8013a6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013a66:	f7ff f8fd 	bl	8012c64 <xTaskResumeAll>
}
 8013a6a:	bf00      	nop
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	2000108c 	.word	0x2000108c
 8013a78:	20001090 	.word	0x20001090
 8013a7c:	e000ed04 	.word	0xe000ed04

08013a80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013a80:	b480      	push	{r7}
 8013a82:	b085      	sub	sp, #20
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013a88:	4b0e      	ldr	r3, [pc, #56]	; (8013ac4 <prvGetNextExpireTime+0x44>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	bf0c      	ite	eq
 8013a92:	2301      	moveq	r3, #1
 8013a94:	2300      	movne	r3, #0
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	461a      	mov	r2, r3
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d105      	bne.n	8013ab2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013aa6:	4b07      	ldr	r3, [pc, #28]	; (8013ac4 <prvGetNextExpireTime+0x44>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	60fb      	str	r3, [r7, #12]
 8013ab0:	e001      	b.n	8013ab6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3714      	adds	r7, #20
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bc80      	pop	{r7}
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop
 8013ac4:	20001088 	.word	0x20001088

08013ac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ad0:	f7ff f964 	bl	8012d9c <xTaskGetTickCount>
 8013ad4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013ad6:	4b0b      	ldr	r3, [pc, #44]	; (8013b04 <prvSampleTimeNow+0x3c>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d205      	bcs.n	8013aec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013ae0:	f000 f904 	bl	8013cec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	601a      	str	r2, [r3, #0]
 8013aea:	e002      	b.n	8013af2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2200      	movs	r2, #0
 8013af0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013af2:	4a04      	ldr	r2, [pc, #16]	; (8013b04 <prvSampleTimeNow+0x3c>)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013af8:	68fb      	ldr	r3, [r7, #12]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	20001098 	.word	0x20001098

08013b08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b086      	sub	sp, #24
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	607a      	str	r2, [r7, #4]
 8013b14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013b16:	2300      	movs	r3, #0
 8013b18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	68ba      	ldr	r2, [r7, #8]
 8013b1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	68fa      	ldr	r2, [r7, #12]
 8013b24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013b26:	68ba      	ldr	r2, [r7, #8]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d812      	bhi.n	8013b54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	1ad2      	subs	r2, r2, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	699b      	ldr	r3, [r3, #24]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d302      	bcc.n	8013b42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	617b      	str	r3, [r7, #20]
 8013b40:	e01b      	b.n	8013b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013b42:	4b10      	ldr	r3, [pc, #64]	; (8013b84 <prvInsertTimerInActiveList+0x7c>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	3304      	adds	r3, #4
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4610      	mov	r0, r2
 8013b4e:	f7fd fe45 	bl	80117dc <vListInsert>
 8013b52:	e012      	b.n	8013b7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013b54:	687a      	ldr	r2, [r7, #4]
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d206      	bcs.n	8013b6a <prvInsertTimerInActiveList+0x62>
 8013b5c:	68ba      	ldr	r2, [r7, #8]
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d302      	bcc.n	8013b6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013b64:	2301      	movs	r3, #1
 8013b66:	617b      	str	r3, [r7, #20]
 8013b68:	e007      	b.n	8013b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b6a:	4b07      	ldr	r3, [pc, #28]	; (8013b88 <prvInsertTimerInActiveList+0x80>)
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	3304      	adds	r3, #4
 8013b72:	4619      	mov	r1, r3
 8013b74:	4610      	mov	r0, r2
 8013b76:	f7fd fe31 	bl	80117dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013b7a:	697b      	ldr	r3, [r7, #20]
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	2000108c 	.word	0x2000108c
 8013b88:	20001088 	.word	0x20001088

08013b8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b08e      	sub	sp, #56	; 0x38
 8013b90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b92:	e099      	b.n	8013cc8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	da17      	bge.n	8013bca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013b9a:	1d3b      	adds	r3, r7, #4
 8013b9c:	3304      	adds	r3, #4
 8013b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d109      	bne.n	8013bba <prvProcessReceivedCommands+0x2e>
 8013ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013baa:	f383 8811 	msr	BASEPRI, r3
 8013bae:	f3bf 8f6f 	isb	sy
 8013bb2:	f3bf 8f4f 	dsb	sy
 8013bb6:	61fb      	str	r3, [r7, #28]
 8013bb8:	e7fe      	b.n	8013bb8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc0:	6850      	ldr	r0, [r2, #4]
 8013bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc4:	6892      	ldr	r2, [r2, #8]
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	db7a      	blt.n	8013cc6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd6:	695b      	ldr	r3, [r3, #20]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d004      	beq.n	8013be6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bde:	3304      	adds	r3, #4
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7fd fe33 	bl	801184c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013be6:	463b      	mov	r3, r7
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7ff ff6d 	bl	8013ac8 <prvSampleTimeNow>
 8013bee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2b09      	cmp	r3, #9
 8013bf4:	d868      	bhi.n	8013cc8 <prvProcessReceivedCommands+0x13c>
 8013bf6:	a201      	add	r2, pc, #4	; (adr r2, 8013bfc <prvProcessReceivedCommands+0x70>)
 8013bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bfc:	08013c25 	.word	0x08013c25
 8013c00:	08013c25 	.word	0x08013c25
 8013c04:	08013c25 	.word	0x08013c25
 8013c08:	08013cc9 	.word	0x08013cc9
 8013c0c:	08013c7f 	.word	0x08013c7f
 8013c10:	08013cb5 	.word	0x08013cb5
 8013c14:	08013c25 	.word	0x08013c25
 8013c18:	08013c25 	.word	0x08013c25
 8013c1c:	08013cc9 	.word	0x08013cc9
 8013c20:	08013c7f 	.word	0x08013c7f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013c24:	68ba      	ldr	r2, [r7, #8]
 8013c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c28:	699b      	ldr	r3, [r3, #24]
 8013c2a:	18d1      	adds	r1, r2, r3
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c32:	f7ff ff69 	bl	8013b08 <prvInsertTimerInActiveList>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d045      	beq.n	8013cc8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c42:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8013c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c46:	69db      	ldr	r3, [r3, #28]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d13d      	bne.n	8013cc8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013c4c:	68ba      	ldr	r2, [r7, #8]
 8013c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c50:	699b      	ldr	r3, [r3, #24]
 8013c52:	441a      	add	r2, r3
 8013c54:	2300      	movs	r3, #0
 8013c56:	9300      	str	r3, [sp, #0]
 8013c58:	2300      	movs	r3, #0
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c5e:	f7ff fe23 	bl	80138a8 <xTimerGenericCommand>
 8013c62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013c64:	6a3b      	ldr	r3, [r7, #32]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d12e      	bne.n	8013cc8 <prvProcessReceivedCommands+0x13c>
 8013c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c6e:	f383 8811 	msr	BASEPRI, r3
 8013c72:	f3bf 8f6f 	isb	sy
 8013c76:	f3bf 8f4f 	dsb	sy
 8013c7a:	61bb      	str	r3, [r7, #24]
 8013c7c:	e7fe      	b.n	8013c7c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013c7e:	68ba      	ldr	r2, [r7, #8]
 8013c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c86:	699b      	ldr	r3, [r3, #24]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d109      	bne.n	8013ca0 <prvProcessReceivedCommands+0x114>
 8013c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c90:	f383 8811 	msr	BASEPRI, r3
 8013c94:	f3bf 8f6f 	isb	sy
 8013c98:	f3bf 8f4f 	dsb	sy
 8013c9c:	617b      	str	r3, [r7, #20]
 8013c9e:	e7fe      	b.n	8013c9e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca2:	699a      	ldr	r2, [r3, #24]
 8013ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca6:	18d1      	adds	r1, r2, r3
 8013ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cae:	f7ff ff2b 	bl	8013b08 <prvInsertTimerInActiveList>
					break;
 8013cb2:	e009      	b.n	8013cc8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d104      	bne.n	8013cc8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8013cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cc0:	f000 fb5a 	bl	8014378 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013cc4:	e000      	b.n	8013cc8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013cc6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013cc8:	4b07      	ldr	r3, [pc, #28]	; (8013ce8 <prvProcessReceivedCommands+0x15c>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	1d39      	adds	r1, r7, #4
 8013cce:	2200      	movs	r2, #0
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7fe fa1d 	bl	8012110 <xQueueReceive>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f47f af5b 	bne.w	8013b94 <prvProcessReceivedCommands+0x8>
	}
}
 8013cde:	bf00      	nop
 8013ce0:	3730      	adds	r7, #48	; 0x30
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	20001090 	.word	0x20001090

08013cec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b088      	sub	sp, #32
 8013cf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013cf2:	e044      	b.n	8013d7e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013cf4:	4b2b      	ldr	r3, [pc, #172]	; (8013da4 <prvSwitchTimerLists+0xb8>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013cfe:	4b29      	ldr	r3, [pc, #164]	; (8013da4 <prvSwitchTimerLists+0xb8>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	68db      	ldr	r3, [r3, #12]
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fd fd9d 	bl	801184c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	69db      	ldr	r3, [r3, #28]
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	d12d      	bne.n	8013d7e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	699b      	ldr	r3, [r3, #24]
 8013d26:	693a      	ldr	r2, [r7, #16]
 8013d28:	4413      	add	r3, r2
 8013d2a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013d2c:	68ba      	ldr	r2, [r7, #8]
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d90e      	bls.n	8013d52 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	68ba      	ldr	r2, [r7, #8]
 8013d38:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d40:	4b18      	ldr	r3, [pc, #96]	; (8013da4 <prvSwitchTimerLists+0xb8>)
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	3304      	adds	r3, #4
 8013d48:	4619      	mov	r1, r3
 8013d4a:	4610      	mov	r0, r2
 8013d4c:	f7fd fd46 	bl	80117dc <vListInsert>
 8013d50:	e015      	b.n	8013d7e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d52:	2300      	movs	r3, #0
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	2300      	movs	r3, #0
 8013d58:	693a      	ldr	r2, [r7, #16]
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f7ff fda3 	bl	80138a8 <xTimerGenericCommand>
 8013d62:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d109      	bne.n	8013d7e <prvSwitchTimerLists+0x92>
 8013d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d6e:	f383 8811 	msr	BASEPRI, r3
 8013d72:	f3bf 8f6f 	isb	sy
 8013d76:	f3bf 8f4f 	dsb	sy
 8013d7a:	603b      	str	r3, [r7, #0]
 8013d7c:	e7fe      	b.n	8013d7c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d7e:	4b09      	ldr	r3, [pc, #36]	; (8013da4 <prvSwitchTimerLists+0xb8>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d1b5      	bne.n	8013cf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013d88:	4b06      	ldr	r3, [pc, #24]	; (8013da4 <prvSwitchTimerLists+0xb8>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013d8e:	4b06      	ldr	r3, [pc, #24]	; (8013da8 <prvSwitchTimerLists+0xbc>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	4a04      	ldr	r2, [pc, #16]	; (8013da4 <prvSwitchTimerLists+0xb8>)
 8013d94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013d96:	4a04      	ldr	r2, [pc, #16]	; (8013da8 <prvSwitchTimerLists+0xbc>)
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	6013      	str	r3, [r2, #0]
}
 8013d9c:	bf00      	nop
 8013d9e:	3718      	adds	r7, #24
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	20001088 	.word	0x20001088
 8013da8:	2000108c 	.word	0x2000108c

08013dac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013db2:	f000 f929 	bl	8014008 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013db6:	4b15      	ldr	r3, [pc, #84]	; (8013e0c <prvCheckForValidListAndQueue+0x60>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d120      	bne.n	8013e00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013dbe:	4814      	ldr	r0, [pc, #80]	; (8013e10 <prvCheckForValidListAndQueue+0x64>)
 8013dc0:	f7fd fcbe 	bl	8011740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013dc4:	4813      	ldr	r0, [pc, #76]	; (8013e14 <prvCheckForValidListAndQueue+0x68>)
 8013dc6:	f7fd fcbb 	bl	8011740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013dca:	4b13      	ldr	r3, [pc, #76]	; (8013e18 <prvCheckForValidListAndQueue+0x6c>)
 8013dcc:	4a10      	ldr	r2, [pc, #64]	; (8013e10 <prvCheckForValidListAndQueue+0x64>)
 8013dce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013dd0:	4b12      	ldr	r3, [pc, #72]	; (8013e1c <prvCheckForValidListAndQueue+0x70>)
 8013dd2:	4a10      	ldr	r2, [pc, #64]	; (8013e14 <prvCheckForValidListAndQueue+0x68>)
 8013dd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	4b11      	ldr	r3, [pc, #68]	; (8013e20 <prvCheckForValidListAndQueue+0x74>)
 8013ddc:	4a11      	ldr	r2, [pc, #68]	; (8013e24 <prvCheckForValidListAndQueue+0x78>)
 8013dde:	2110      	movs	r1, #16
 8013de0:	200a      	movs	r0, #10
 8013de2:	f7fd fdc5 	bl	8011970 <xQueueGenericCreateStatic>
 8013de6:	4602      	mov	r2, r0
 8013de8:	4b08      	ldr	r3, [pc, #32]	; (8013e0c <prvCheckForValidListAndQueue+0x60>)
 8013dea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013dec:	4b07      	ldr	r3, [pc, #28]	; (8013e0c <prvCheckForValidListAndQueue+0x60>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d005      	beq.n	8013e00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013df4:	4b05      	ldr	r3, [pc, #20]	; (8013e0c <prvCheckForValidListAndQueue+0x60>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	490b      	ldr	r1, [pc, #44]	; (8013e28 <prvCheckForValidListAndQueue+0x7c>)
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fe fc94 	bl	8012728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e00:	f000 f930 	bl	8014064 <vPortExitCritical>
}
 8013e04:	bf00      	nop
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	20001090 	.word	0x20001090
 8013e10:	20001060 	.word	0x20001060
 8013e14:	20001074 	.word	0x20001074
 8013e18:	20001088 	.word	0x20001088
 8013e1c:	2000108c 	.word	0x2000108c
 8013e20:	2000113c 	.word	0x2000113c
 8013e24:	2000109c 	.word	0x2000109c
 8013e28:	0801a958 	.word	0x0801a958

08013e2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b085      	sub	sp, #20
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	3b04      	subs	r3, #4
 8013e3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	3b04      	subs	r3, #4
 8013e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	f023 0201 	bic.w	r2, r3, #1
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	3b04      	subs	r3, #4
 8013e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013e5c:	4a08      	ldr	r2, [pc, #32]	; (8013e80 <pxPortInitialiseStack+0x54>)
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	3b14      	subs	r3, #20
 8013e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	3b20      	subs	r3, #32
 8013e72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013e74:	68fb      	ldr	r3, [r7, #12]
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3714      	adds	r7, #20
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bc80      	pop	{r7}
 8013e7e:	4770      	bx	lr
 8013e80:	08013e85 	.word	0x08013e85

08013e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013e84:	b480      	push	{r7}
 8013e86:	b085      	sub	sp, #20
 8013e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013e8e:	4b10      	ldr	r3, [pc, #64]	; (8013ed0 <prvTaskExitError+0x4c>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e96:	d009      	beq.n	8013eac <prvTaskExitError+0x28>
 8013e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9c:	f383 8811 	msr	BASEPRI, r3
 8013ea0:	f3bf 8f6f 	isb	sy
 8013ea4:	f3bf 8f4f 	dsb	sy
 8013ea8:	60fb      	str	r3, [r7, #12]
 8013eaa:	e7fe      	b.n	8013eaa <prvTaskExitError+0x26>
 8013eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb0:	f383 8811 	msr	BASEPRI, r3
 8013eb4:	f3bf 8f6f 	isb	sy
 8013eb8:	f3bf 8f4f 	dsb	sy
 8013ebc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013ebe:	bf00      	nop
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d0fc      	beq.n	8013ec0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013ec6:	bf00      	nop
 8013ec8:	3714      	adds	r7, #20
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bc80      	pop	{r7}
 8013ece:	4770      	bx	lr
 8013ed0:	200000d4 	.word	0x200000d4
	...

08013ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013ee0:	4b07      	ldr	r3, [pc, #28]	; (8013f00 <pxCurrentTCBConst2>)
 8013ee2:	6819      	ldr	r1, [r3, #0]
 8013ee4:	6808      	ldr	r0, [r1, #0]
 8013ee6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013eea:	f380 8809 	msr	PSP, r0
 8013eee:	f3bf 8f6f 	isb	sy
 8013ef2:	f04f 0000 	mov.w	r0, #0
 8013ef6:	f380 8811 	msr	BASEPRI, r0
 8013efa:	f04e 0e0d 	orr.w	lr, lr, #13
 8013efe:	4770      	bx	lr

08013f00 <pxCurrentTCBConst2>:
 8013f00:	20000b58 	.word	0x20000b58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013f04:	bf00      	nop
 8013f06:	bf00      	nop

08013f08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013f08:	4806      	ldr	r0, [pc, #24]	; (8013f24 <prvPortStartFirstTask+0x1c>)
 8013f0a:	6800      	ldr	r0, [r0, #0]
 8013f0c:	6800      	ldr	r0, [r0, #0]
 8013f0e:	f380 8808 	msr	MSP, r0
 8013f12:	b662      	cpsie	i
 8013f14:	b661      	cpsie	f
 8013f16:	f3bf 8f4f 	dsb	sy
 8013f1a:	f3bf 8f6f 	isb	sy
 8013f1e:	df00      	svc	0
 8013f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013f22:	bf00      	nop
 8013f24:	e000ed08 	.word	0xe000ed08

08013f28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013f2e:	4b31      	ldr	r3, [pc, #196]	; (8013ff4 <xPortStartScheduler+0xcc>)
 8013f30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	b2db      	uxtb	r3, r3
 8013f38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	22ff      	movs	r2, #255	; 0xff
 8013f3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013f48:	78fb      	ldrb	r3, [r7, #3]
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013f50:	b2da      	uxtb	r2, r3
 8013f52:	4b29      	ldr	r3, [pc, #164]	; (8013ff8 <xPortStartScheduler+0xd0>)
 8013f54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013f56:	4b29      	ldr	r3, [pc, #164]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013f58:	2207      	movs	r2, #7
 8013f5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013f5c:	e009      	b.n	8013f72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013f5e:	4b27      	ldr	r3, [pc, #156]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	3b01      	subs	r3, #1
 8013f64:	4a25      	ldr	r2, [pc, #148]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013f66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013f68:	78fb      	ldrb	r3, [r7, #3]
 8013f6a:	b2db      	uxtb	r3, r3
 8013f6c:	005b      	lsls	r3, r3, #1
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013f72:	78fb      	ldrb	r3, [r7, #3]
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f7a:	2b80      	cmp	r3, #128	; 0x80
 8013f7c:	d0ef      	beq.n	8013f5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013f7e:	4b1f      	ldr	r3, [pc, #124]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f1c3 0307 	rsb	r3, r3, #7
 8013f86:	2b04      	cmp	r3, #4
 8013f88:	d009      	beq.n	8013f9e <xPortStartScheduler+0x76>
 8013f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f8e:	f383 8811 	msr	BASEPRI, r3
 8013f92:	f3bf 8f6f 	isb	sy
 8013f96:	f3bf 8f4f 	dsb	sy
 8013f9a:	60bb      	str	r3, [r7, #8]
 8013f9c:	e7fe      	b.n	8013f9c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013f9e:	4b17      	ldr	r3, [pc, #92]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	021b      	lsls	r3, r3, #8
 8013fa4:	4a15      	ldr	r2, [pc, #84]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013fa8:	4b14      	ldr	r3, [pc, #80]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013fb0:	4a12      	ldr	r2, [pc, #72]	; (8013ffc <xPortStartScheduler+0xd4>)
 8013fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	b2da      	uxtb	r2, r3
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013fbc:	4b10      	ldr	r3, [pc, #64]	; (8014000 <xPortStartScheduler+0xd8>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4a0f      	ldr	r2, [pc, #60]	; (8014000 <xPortStartScheduler+0xd8>)
 8013fc2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013fc8:	4b0d      	ldr	r3, [pc, #52]	; (8014000 <xPortStartScheduler+0xd8>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	4a0c      	ldr	r2, [pc, #48]	; (8014000 <xPortStartScheduler+0xd8>)
 8013fce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013fd4:	f000 f8b0 	bl	8014138 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013fd8:	4b0a      	ldr	r3, [pc, #40]	; (8014004 <xPortStartScheduler+0xdc>)
 8013fda:	2200      	movs	r2, #0
 8013fdc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013fde:	f7ff ff93 	bl	8013f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013fe2:	f7fe ffa7 	bl	8012f34 <vTaskSwitchContext>
	prvTaskExitError();
 8013fe6:	f7ff ff4d 	bl	8013e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013fea:	2300      	movs	r3, #0
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3710      	adds	r7, #16
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	e000e400 	.word	0xe000e400
 8013ff8:	2000118c 	.word	0x2000118c
 8013ffc:	20001190 	.word	0x20001190
 8014000:	e000ed20 	.word	0xe000ed20
 8014004:	200000d4 	.word	0x200000d4

08014008 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014008:	b480      	push	{r7}
 801400a:	b083      	sub	sp, #12
 801400c:	af00      	add	r7, sp, #0
 801400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014012:	f383 8811 	msr	BASEPRI, r3
 8014016:	f3bf 8f6f 	isb	sy
 801401a:	f3bf 8f4f 	dsb	sy
 801401e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014020:	4b0e      	ldr	r3, [pc, #56]	; (801405c <vPortEnterCritical+0x54>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	3301      	adds	r3, #1
 8014026:	4a0d      	ldr	r2, [pc, #52]	; (801405c <vPortEnterCritical+0x54>)
 8014028:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801402a:	4b0c      	ldr	r3, [pc, #48]	; (801405c <vPortEnterCritical+0x54>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	2b01      	cmp	r3, #1
 8014030:	d10e      	bne.n	8014050 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014032:	4b0b      	ldr	r3, [pc, #44]	; (8014060 <vPortEnterCritical+0x58>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	b2db      	uxtb	r3, r3
 8014038:	2b00      	cmp	r3, #0
 801403a:	d009      	beq.n	8014050 <vPortEnterCritical+0x48>
 801403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014040:	f383 8811 	msr	BASEPRI, r3
 8014044:	f3bf 8f6f 	isb	sy
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	603b      	str	r3, [r7, #0]
 801404e:	e7fe      	b.n	801404e <vPortEnterCritical+0x46>
	}
}
 8014050:	bf00      	nop
 8014052:	370c      	adds	r7, #12
 8014054:	46bd      	mov	sp, r7
 8014056:	bc80      	pop	{r7}
 8014058:	4770      	bx	lr
 801405a:	bf00      	nop
 801405c:	200000d4 	.word	0x200000d4
 8014060:	e000ed04 	.word	0xe000ed04

08014064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014064:	b480      	push	{r7}
 8014066:	b083      	sub	sp, #12
 8014068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801406a:	4b10      	ldr	r3, [pc, #64]	; (80140ac <vPortExitCritical+0x48>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d109      	bne.n	8014086 <vPortExitCritical+0x22>
 8014072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	607b      	str	r3, [r7, #4]
 8014084:	e7fe      	b.n	8014084 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014086:	4b09      	ldr	r3, [pc, #36]	; (80140ac <vPortExitCritical+0x48>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	3b01      	subs	r3, #1
 801408c:	4a07      	ldr	r2, [pc, #28]	; (80140ac <vPortExitCritical+0x48>)
 801408e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014090:	4b06      	ldr	r3, [pc, #24]	; (80140ac <vPortExitCritical+0x48>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d104      	bne.n	80140a2 <vPortExitCritical+0x3e>
 8014098:	2300      	movs	r3, #0
 801409a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80140a2:	bf00      	nop
 80140a4:	370c      	adds	r7, #12
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bc80      	pop	{r7}
 80140aa:	4770      	bx	lr
 80140ac:	200000d4 	.word	0x200000d4

080140b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80140b0:	f3ef 8009 	mrs	r0, PSP
 80140b4:	f3bf 8f6f 	isb	sy
 80140b8:	4b0d      	ldr	r3, [pc, #52]	; (80140f0 <pxCurrentTCBConst>)
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80140c0:	6010      	str	r0, [r2, #0]
 80140c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80140c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80140ca:	f380 8811 	msr	BASEPRI, r0
 80140ce:	f7fe ff31 	bl	8012f34 <vTaskSwitchContext>
 80140d2:	f04f 0000 	mov.w	r0, #0
 80140d6:	f380 8811 	msr	BASEPRI, r0
 80140da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80140de:	6819      	ldr	r1, [r3, #0]
 80140e0:	6808      	ldr	r0, [r1, #0]
 80140e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80140e6:	f380 8809 	msr	PSP, r0
 80140ea:	f3bf 8f6f 	isb	sy
 80140ee:	4770      	bx	lr

080140f0 <pxCurrentTCBConst>:
 80140f0:	20000b58 	.word	0x20000b58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80140f4:	bf00      	nop
 80140f6:	bf00      	nop

080140f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
	__asm volatile
 80140fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014102:	f383 8811 	msr	BASEPRI, r3
 8014106:	f3bf 8f6f 	isb	sy
 801410a:	f3bf 8f4f 	dsb	sy
 801410e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014110:	f7fe fe52 	bl	8012db8 <xTaskIncrementTick>
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	d003      	beq.n	8014122 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801411a:	4b06      	ldr	r3, [pc, #24]	; (8014134 <SysTick_Handler+0x3c>)
 801411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014120:	601a      	str	r2, [r3, #0]
 8014122:	2300      	movs	r3, #0
 8014124:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801412c:	bf00      	nop
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	e000ed04 	.word	0xe000ed04

08014138 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014138:	b480      	push	{r7}
 801413a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801413c:	4b0a      	ldr	r3, [pc, #40]	; (8014168 <vPortSetupTimerInterrupt+0x30>)
 801413e:	2200      	movs	r2, #0
 8014140:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014142:	4b0a      	ldr	r3, [pc, #40]	; (801416c <vPortSetupTimerInterrupt+0x34>)
 8014144:	2200      	movs	r2, #0
 8014146:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014148:	4b09      	ldr	r3, [pc, #36]	; (8014170 <vPortSetupTimerInterrupt+0x38>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	4a09      	ldr	r2, [pc, #36]	; (8014174 <vPortSetupTimerInterrupt+0x3c>)
 801414e:	fba2 2303 	umull	r2, r3, r2, r3
 8014152:	099b      	lsrs	r3, r3, #6
 8014154:	4a08      	ldr	r2, [pc, #32]	; (8014178 <vPortSetupTimerInterrupt+0x40>)
 8014156:	3b01      	subs	r3, #1
 8014158:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801415a:	4b03      	ldr	r3, [pc, #12]	; (8014168 <vPortSetupTimerInterrupt+0x30>)
 801415c:	2207      	movs	r2, #7
 801415e:	601a      	str	r2, [r3, #0]
}
 8014160:	bf00      	nop
 8014162:	46bd      	mov	sp, r7
 8014164:	bc80      	pop	{r7}
 8014166:	4770      	bx	lr
 8014168:	e000e010 	.word	0xe000e010
 801416c:	e000e018 	.word	0xe000e018
 8014170:	20000000 	.word	0x20000000
 8014174:	10624dd3 	.word	0x10624dd3
 8014178:	e000e014 	.word	0xe000e014

0801417c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801417c:	b480      	push	{r7}
 801417e:	b085      	sub	sp, #20
 8014180:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014182:	f3ef 8305 	mrs	r3, IPSR
 8014186:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2b0f      	cmp	r3, #15
 801418c:	d913      	bls.n	80141b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801418e:	4a15      	ldr	r2, [pc, #84]	; (80141e4 <vPortValidateInterruptPriority+0x68>)
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	4413      	add	r3, r2
 8014194:	781b      	ldrb	r3, [r3, #0]
 8014196:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014198:	4b13      	ldr	r3, [pc, #76]	; (80141e8 <vPortValidateInterruptPriority+0x6c>)
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	7afa      	ldrb	r2, [r7, #11]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d209      	bcs.n	80141b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80141a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a6:	f383 8811 	msr	BASEPRI, r3
 80141aa:	f3bf 8f6f 	isb	sy
 80141ae:	f3bf 8f4f 	dsb	sy
 80141b2:	607b      	str	r3, [r7, #4]
 80141b4:	e7fe      	b.n	80141b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80141b6:	4b0d      	ldr	r3, [pc, #52]	; (80141ec <vPortValidateInterruptPriority+0x70>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80141be:	4b0c      	ldr	r3, [pc, #48]	; (80141f0 <vPortValidateInterruptPriority+0x74>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d909      	bls.n	80141da <vPortValidateInterruptPriority+0x5e>
 80141c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ca:	f383 8811 	msr	BASEPRI, r3
 80141ce:	f3bf 8f6f 	isb	sy
 80141d2:	f3bf 8f4f 	dsb	sy
 80141d6:	603b      	str	r3, [r7, #0]
 80141d8:	e7fe      	b.n	80141d8 <vPortValidateInterruptPriority+0x5c>
	}
 80141da:	bf00      	nop
 80141dc:	3714      	adds	r7, #20
 80141de:	46bd      	mov	sp, r7
 80141e0:	bc80      	pop	{r7}
 80141e2:	4770      	bx	lr
 80141e4:	e000e3f0 	.word	0xe000e3f0
 80141e8:	2000118c 	.word	0x2000118c
 80141ec:	e000ed0c 	.word	0xe000ed0c
 80141f0:	20001190 	.word	0x20001190

080141f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b08a      	sub	sp, #40	; 0x28
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80141fc:	2300      	movs	r3, #0
 80141fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014200:	f7fe fd22 	bl	8012c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014204:	4b57      	ldr	r3, [pc, #348]	; (8014364 <pvPortMalloc+0x170>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d101      	bne.n	8014210 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801420c:	f000 f90c 	bl	8014428 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014210:	4b55      	ldr	r3, [pc, #340]	; (8014368 <pvPortMalloc+0x174>)
 8014212:	681a      	ldr	r2, [r3, #0]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	4013      	ands	r3, r2
 8014218:	2b00      	cmp	r3, #0
 801421a:	f040 808c 	bne.w	8014336 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d01c      	beq.n	801425e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014224:	2208      	movs	r2, #8
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	4413      	add	r3, r2
 801422a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f003 0307 	and.w	r3, r3, #7
 8014232:	2b00      	cmp	r3, #0
 8014234:	d013      	beq.n	801425e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f023 0307 	bic.w	r3, r3, #7
 801423c:	3308      	adds	r3, #8
 801423e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f003 0307 	and.w	r3, r3, #7
 8014246:	2b00      	cmp	r3, #0
 8014248:	d009      	beq.n	801425e <pvPortMalloc+0x6a>
 801424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801424e:	f383 8811 	msr	BASEPRI, r3
 8014252:	f3bf 8f6f 	isb	sy
 8014256:	f3bf 8f4f 	dsb	sy
 801425a:	617b      	str	r3, [r7, #20]
 801425c:	e7fe      	b.n	801425c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d068      	beq.n	8014336 <pvPortMalloc+0x142>
 8014264:	4b41      	ldr	r3, [pc, #260]	; (801436c <pvPortMalloc+0x178>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	687a      	ldr	r2, [r7, #4]
 801426a:	429a      	cmp	r2, r3
 801426c:	d863      	bhi.n	8014336 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801426e:	4b40      	ldr	r3, [pc, #256]	; (8014370 <pvPortMalloc+0x17c>)
 8014270:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014272:	4b3f      	ldr	r3, [pc, #252]	; (8014370 <pvPortMalloc+0x17c>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014278:	e004      	b.n	8014284 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014286:	685b      	ldr	r3, [r3, #4]
 8014288:	687a      	ldr	r2, [r7, #4]
 801428a:	429a      	cmp	r2, r3
 801428c:	d903      	bls.n	8014296 <pvPortMalloc+0xa2>
 801428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d1f1      	bne.n	801427a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014296:	4b33      	ldr	r3, [pc, #204]	; (8014364 <pvPortMalloc+0x170>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801429c:	429a      	cmp	r2, r3
 801429e:	d04a      	beq.n	8014336 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2208      	movs	r2, #8
 80142a6:	4413      	add	r3, r2
 80142a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80142aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ac:	681a      	ldr	r2, [r3, #0]
 80142ae:	6a3b      	ldr	r3, [r7, #32]
 80142b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80142b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b4:	685a      	ldr	r2, [r3, #4]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	1ad2      	subs	r2, r2, r3
 80142ba:	2308      	movs	r3, #8
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	429a      	cmp	r2, r3
 80142c0:	d91e      	bls.n	8014300 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80142c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	4413      	add	r3, r2
 80142c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	f003 0307 	and.w	r3, r3, #7
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d009      	beq.n	80142e8 <pvPortMalloc+0xf4>
 80142d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d8:	f383 8811 	msr	BASEPRI, r3
 80142dc:	f3bf 8f6f 	isb	sy
 80142e0:	f3bf 8f4f 	dsb	sy
 80142e4:	613b      	str	r3, [r7, #16]
 80142e6:	e7fe      	b.n	80142e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80142e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ea:	685a      	ldr	r2, [r3, #4]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	1ad2      	subs	r2, r2, r3
 80142f0:	69bb      	ldr	r3, [r7, #24]
 80142f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80142f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f6:	687a      	ldr	r2, [r7, #4]
 80142f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80142fa:	69b8      	ldr	r0, [r7, #24]
 80142fc:	f000 f8f6 	bl	80144ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014300:	4b1a      	ldr	r3, [pc, #104]	; (801436c <pvPortMalloc+0x178>)
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	1ad3      	subs	r3, r2, r3
 801430a:	4a18      	ldr	r2, [pc, #96]	; (801436c <pvPortMalloc+0x178>)
 801430c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801430e:	4b17      	ldr	r3, [pc, #92]	; (801436c <pvPortMalloc+0x178>)
 8014310:	681a      	ldr	r2, [r3, #0]
 8014312:	4b18      	ldr	r3, [pc, #96]	; (8014374 <pvPortMalloc+0x180>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	429a      	cmp	r2, r3
 8014318:	d203      	bcs.n	8014322 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801431a:	4b14      	ldr	r3, [pc, #80]	; (801436c <pvPortMalloc+0x178>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	4a15      	ldr	r2, [pc, #84]	; (8014374 <pvPortMalloc+0x180>)
 8014320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014324:	685a      	ldr	r2, [r3, #4]
 8014326:	4b10      	ldr	r3, [pc, #64]	; (8014368 <pvPortMalloc+0x174>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	431a      	orrs	r2, r3
 801432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014332:	2200      	movs	r2, #0
 8014334:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014336:	f7fe fc95 	bl	8012c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	f003 0307 	and.w	r3, r3, #7
 8014340:	2b00      	cmp	r3, #0
 8014342:	d009      	beq.n	8014358 <pvPortMalloc+0x164>
 8014344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014348:	f383 8811 	msr	BASEPRI, r3
 801434c:	f3bf 8f6f 	isb	sy
 8014350:	f3bf 8f4f 	dsb	sy
 8014354:	60fb      	str	r3, [r7, #12]
 8014356:	e7fe      	b.n	8014356 <pvPortMalloc+0x162>
	return pvReturn;
 8014358:	69fb      	ldr	r3, [r7, #28]
}
 801435a:	4618      	mov	r0, r3
 801435c:	3728      	adds	r7, #40	; 0x28
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	200086cc 	.word	0x200086cc
 8014368:	200086d8 	.word	0x200086d8
 801436c:	200086d0 	.word	0x200086d0
 8014370:	200086c4 	.word	0x200086c4
 8014374:	200086d4 	.word	0x200086d4

08014378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b086      	sub	sp, #24
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d046      	beq.n	8014418 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801438a:	2308      	movs	r3, #8
 801438c:	425b      	negs	r3, r3
 801438e:	697a      	ldr	r2, [r7, #20]
 8014390:	4413      	add	r3, r2
 8014392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	685a      	ldr	r2, [r3, #4]
 801439c:	4b20      	ldr	r3, [pc, #128]	; (8014420 <vPortFree+0xa8>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	4013      	ands	r3, r2
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d109      	bne.n	80143ba <vPortFree+0x42>
 80143a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143aa:	f383 8811 	msr	BASEPRI, r3
 80143ae:	f3bf 8f6f 	isb	sy
 80143b2:	f3bf 8f4f 	dsb	sy
 80143b6:	60fb      	str	r3, [r7, #12]
 80143b8:	e7fe      	b.n	80143b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d009      	beq.n	80143d6 <vPortFree+0x5e>
 80143c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c6:	f383 8811 	msr	BASEPRI, r3
 80143ca:	f3bf 8f6f 	isb	sy
 80143ce:	f3bf 8f4f 	dsb	sy
 80143d2:	60bb      	str	r3, [r7, #8]
 80143d4:	e7fe      	b.n	80143d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	685a      	ldr	r2, [r3, #4]
 80143da:	4b11      	ldr	r3, [pc, #68]	; (8014420 <vPortFree+0xa8>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	4013      	ands	r3, r2
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d019      	beq.n	8014418 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d115      	bne.n	8014418 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	685a      	ldr	r2, [r3, #4]
 80143f0:	4b0b      	ldr	r3, [pc, #44]	; (8014420 <vPortFree+0xa8>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	43db      	mvns	r3, r3
 80143f6:	401a      	ands	r2, r3
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80143fc:	f7fe fc24 	bl	8012c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	685a      	ldr	r2, [r3, #4]
 8014404:	4b07      	ldr	r3, [pc, #28]	; (8014424 <vPortFree+0xac>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	4413      	add	r3, r2
 801440a:	4a06      	ldr	r2, [pc, #24]	; (8014424 <vPortFree+0xac>)
 801440c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801440e:	6938      	ldr	r0, [r7, #16]
 8014410:	f000 f86c 	bl	80144ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014414:	f7fe fc26 	bl	8012c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014418:	bf00      	nop
 801441a:	3718      	adds	r7, #24
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}
 8014420:	200086d8 	.word	0x200086d8
 8014424:	200086d0 	.word	0x200086d0

08014428 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014428:	b480      	push	{r7}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801442e:	f247 5330 	movw	r3, #30000	; 0x7530
 8014432:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014434:	4b27      	ldr	r3, [pc, #156]	; (80144d4 <prvHeapInit+0xac>)
 8014436:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f003 0307 	and.w	r3, r3, #7
 801443e:	2b00      	cmp	r3, #0
 8014440:	d00c      	beq.n	801445c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	3307      	adds	r3, #7
 8014446:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	f023 0307 	bic.w	r3, r3, #7
 801444e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014450:	68ba      	ldr	r2, [r7, #8]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	1ad3      	subs	r3, r2, r3
 8014456:	4a1f      	ldr	r2, [pc, #124]	; (80144d4 <prvHeapInit+0xac>)
 8014458:	4413      	add	r3, r2
 801445a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014460:	4a1d      	ldr	r2, [pc, #116]	; (80144d8 <prvHeapInit+0xb0>)
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014466:	4b1c      	ldr	r3, [pc, #112]	; (80144d8 <prvHeapInit+0xb0>)
 8014468:	2200      	movs	r2, #0
 801446a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	68ba      	ldr	r2, [r7, #8]
 8014470:	4413      	add	r3, r2
 8014472:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014474:	2208      	movs	r2, #8
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	1a9b      	subs	r3, r3, r2
 801447a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f023 0307 	bic.w	r3, r3, #7
 8014482:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	4a15      	ldr	r2, [pc, #84]	; (80144dc <prvHeapInit+0xb4>)
 8014488:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801448a:	4b14      	ldr	r3, [pc, #80]	; (80144dc <prvHeapInit+0xb4>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2200      	movs	r2, #0
 8014490:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014492:	4b12      	ldr	r3, [pc, #72]	; (80144dc <prvHeapInit+0xb4>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2200      	movs	r2, #0
 8014498:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	68fa      	ldr	r2, [r7, #12]
 80144a2:	1ad2      	subs	r2, r2, r3
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80144a8:	4b0c      	ldr	r3, [pc, #48]	; (80144dc <prvHeapInit+0xb4>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	4a0a      	ldr	r2, [pc, #40]	; (80144e0 <prvHeapInit+0xb8>)
 80144b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	4a09      	ldr	r2, [pc, #36]	; (80144e4 <prvHeapInit+0xbc>)
 80144be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80144c0:	4b09      	ldr	r3, [pc, #36]	; (80144e8 <prvHeapInit+0xc0>)
 80144c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80144c6:	601a      	str	r2, [r3, #0]
}
 80144c8:	bf00      	nop
 80144ca:	3714      	adds	r7, #20
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bc80      	pop	{r7}
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	20001194 	.word	0x20001194
 80144d8:	200086c4 	.word	0x200086c4
 80144dc:	200086cc 	.word	0x200086cc
 80144e0:	200086d4 	.word	0x200086d4
 80144e4:	200086d0 	.word	0x200086d0
 80144e8:	200086d8 	.word	0x200086d8

080144ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80144ec:	b480      	push	{r7}
 80144ee:	b085      	sub	sp, #20
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80144f4:	4b27      	ldr	r3, [pc, #156]	; (8014594 <prvInsertBlockIntoFreeList+0xa8>)
 80144f6:	60fb      	str	r3, [r7, #12]
 80144f8:	e002      	b.n	8014500 <prvInsertBlockIntoFreeList+0x14>
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	60fb      	str	r3, [r7, #12]
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	687a      	ldr	r2, [r7, #4]
 8014506:	429a      	cmp	r2, r3
 8014508:	d8f7      	bhi.n	80144fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	68ba      	ldr	r2, [r7, #8]
 8014514:	4413      	add	r3, r2
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	429a      	cmp	r2, r3
 801451a:	d108      	bne.n	801452e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	685a      	ldr	r2, [r3, #4]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	441a      	add	r2, r3
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	68ba      	ldr	r2, [r7, #8]
 8014538:	441a      	add	r2, r3
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	429a      	cmp	r2, r3
 8014540:	d118      	bne.n	8014574 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	4b14      	ldr	r3, [pc, #80]	; (8014598 <prvInsertBlockIntoFreeList+0xac>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	429a      	cmp	r2, r3
 801454c:	d00d      	beq.n	801456a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	685a      	ldr	r2, [r3, #4]
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	441a      	add	r2, r3
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	601a      	str	r2, [r3, #0]
 8014568:	e008      	b.n	801457c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801456a:	4b0b      	ldr	r3, [pc, #44]	; (8014598 <prvInsertBlockIntoFreeList+0xac>)
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	601a      	str	r2, [r3, #0]
 8014572:	e003      	b.n	801457c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	681a      	ldr	r2, [r3, #0]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801457c:	68fa      	ldr	r2, [r7, #12]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	429a      	cmp	r2, r3
 8014582:	d002      	beq.n	801458a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801458a:	bf00      	nop
 801458c:	3714      	adds	r7, #20
 801458e:	46bd      	mov	sp, r7
 8014590:	bc80      	pop	{r7}
 8014592:	4770      	bx	lr
 8014594:	200086c4 	.word	0x200086c4
 8014598:	200086cc 	.word	0x200086cc

0801459c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80145a0:	2200      	movs	r2, #0
 80145a2:	4914      	ldr	r1, [pc, #80]	; (80145f4 <MX_USB_DEVICE_Init+0x58>)
 80145a4:	4814      	ldr	r0, [pc, #80]	; (80145f8 <MX_USB_DEVICE_Init+0x5c>)
 80145a6:	f7fb fd39 	bl	801001c <USBD_Init>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d002      	beq.n	80145b6 <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler(1);
 80145b0:	2001      	movs	r0, #1
 80145b2:	f7ef fa31 	bl	8003a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80145b6:	4911      	ldr	r1, [pc, #68]	; (80145fc <MX_USB_DEVICE_Init+0x60>)
 80145b8:	480f      	ldr	r0, [pc, #60]	; (80145f8 <MX_USB_DEVICE_Init+0x5c>)
 80145ba:	f7fb fd5a 	bl	8010072 <USBD_RegisterClass>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d002      	beq.n	80145ca <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler(1);
 80145c4:	2001      	movs	r0, #1
 80145c6:	f7ef fa27 	bl	8003a18 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80145ca:	490d      	ldr	r1, [pc, #52]	; (8014600 <MX_USB_DEVICE_Init+0x64>)
 80145cc:	480a      	ldr	r0, [pc, #40]	; (80145f8 <MX_USB_DEVICE_Init+0x5c>)
 80145ce:	f7fa fd07 	bl	800efe0 <USBD_MSC_RegisterStorage>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d002      	beq.n	80145de <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler(1);
 80145d8:	2001      	movs	r0, #1
 80145da:	f7ef fa1d 	bl	8003a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80145de:	4806      	ldr	r0, [pc, #24]	; (80145f8 <MX_USB_DEVICE_Init+0x5c>)
 80145e0:	f7fb fd60 	bl	80100a4 <USBD_Start>
 80145e4:	4603      	mov	r3, r0
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d002      	beq.n	80145f0 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler(1);
 80145ea:	2001      	movs	r0, #1
 80145ec:	f7ef fa14 	bl	8003a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80145f0:	bf00      	nop
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	200000d8 	.word	0x200000d8
 80145f8:	200096a4 	.word	0x200096a4
 80145fc:	20000030 	.word	0x20000030
 8014600:	20000128 	.word	0x20000128

08014604 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014604:	b480      	push	{r7}
 8014606:	b083      	sub	sp, #12
 8014608:	af00      	add	r7, sp, #0
 801460a:	4603      	mov	r3, r0
 801460c:	6039      	str	r1, [r7, #0]
 801460e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	2212      	movs	r2, #18
 8014614:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014616:	4b03      	ldr	r3, [pc, #12]	; (8014624 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014618:	4618      	mov	r0, r3
 801461a:	370c      	adds	r7, #12
 801461c:	46bd      	mov	sp, r7
 801461e:	bc80      	pop	{r7}
 8014620:	4770      	bx	lr
 8014622:	bf00      	nop
 8014624:	200000f4 	.word	0x200000f4

08014628 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014628:	b480      	push	{r7}
 801462a:	b083      	sub	sp, #12
 801462c:	af00      	add	r7, sp, #0
 801462e:	4603      	mov	r3, r0
 8014630:	6039      	str	r1, [r7, #0]
 8014632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	2204      	movs	r2, #4
 8014638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801463a:	4b03      	ldr	r3, [pc, #12]	; (8014648 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801463c:	4618      	mov	r0, r3
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	bc80      	pop	{r7}
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	20000108 	.word	0x20000108

0801464c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	4603      	mov	r3, r0
 8014654:	6039      	str	r1, [r7, #0]
 8014656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014658:	79fb      	ldrb	r3, [r7, #7]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d105      	bne.n	801466a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801465e:	683a      	ldr	r2, [r7, #0]
 8014660:	4907      	ldr	r1, [pc, #28]	; (8014680 <USBD_FS_ProductStrDescriptor+0x34>)
 8014662:	4808      	ldr	r0, [pc, #32]	; (8014684 <USBD_FS_ProductStrDescriptor+0x38>)
 8014664:	f7fc fc15 	bl	8010e92 <USBD_GetString>
 8014668:	e004      	b.n	8014674 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801466a:	683a      	ldr	r2, [r7, #0]
 801466c:	4904      	ldr	r1, [pc, #16]	; (8014680 <USBD_FS_ProductStrDescriptor+0x34>)
 801466e:	4805      	ldr	r0, [pc, #20]	; (8014684 <USBD_FS_ProductStrDescriptor+0x38>)
 8014670:	f7fc fc0f 	bl	8010e92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014674:	4b02      	ldr	r3, [pc, #8]	; (8014680 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014676:	4618      	mov	r0, r3
 8014678:	3708      	adds	r7, #8
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	20009940 	.word	0x20009940
 8014684:	0801a960 	.word	0x0801a960

08014688 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	4603      	mov	r3, r0
 8014690:	6039      	str	r1, [r7, #0]
 8014692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014694:	683a      	ldr	r2, [r7, #0]
 8014696:	4904      	ldr	r1, [pc, #16]	; (80146a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014698:	4804      	ldr	r0, [pc, #16]	; (80146ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801469a:	f7fc fbfa 	bl	8010e92 <USBD_GetString>
  return USBD_StrDesc;
 801469e:	4b02      	ldr	r3, [pc, #8]	; (80146a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}
 80146a8:	20009940 	.word	0x20009940
 80146ac:	0801a974 	.word	0x0801a974

080146b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	4603      	mov	r3, r0
 80146b8:	6039      	str	r1, [r7, #0]
 80146ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	221a      	movs	r2, #26
 80146c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80146c2:	f000 f843 	bl	801474c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80146c6:	4b02      	ldr	r3, [pc, #8]	; (80146d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	2000010c 	.word	0x2000010c

080146d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	4603      	mov	r3, r0
 80146dc:	6039      	str	r1, [r7, #0]
 80146de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80146e0:	79fb      	ldrb	r3, [r7, #7]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d105      	bne.n	80146f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80146e6:	683a      	ldr	r2, [r7, #0]
 80146e8:	4907      	ldr	r1, [pc, #28]	; (8014708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80146ea:	4808      	ldr	r0, [pc, #32]	; (801470c <USBD_FS_ConfigStrDescriptor+0x38>)
 80146ec:	f7fc fbd1 	bl	8010e92 <USBD_GetString>
 80146f0:	e004      	b.n	80146fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80146f2:	683a      	ldr	r2, [r7, #0]
 80146f4:	4904      	ldr	r1, [pc, #16]	; (8014708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80146f6:	4805      	ldr	r0, [pc, #20]	; (801470c <USBD_FS_ConfigStrDescriptor+0x38>)
 80146f8:	f7fc fbcb 	bl	8010e92 <USBD_GetString>
  }
  return USBD_StrDesc;
 80146fc:	4b02      	ldr	r3, [pc, #8]	; (8014708 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	20009940 	.word	0x20009940
 801470c:	0801a988 	.word	0x0801a988

08014710 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	4603      	mov	r3, r0
 8014718:	6039      	str	r1, [r7, #0]
 801471a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801471c:	79fb      	ldrb	r3, [r7, #7]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d105      	bne.n	801472e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014722:	683a      	ldr	r2, [r7, #0]
 8014724:	4907      	ldr	r1, [pc, #28]	; (8014744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014726:	4808      	ldr	r0, [pc, #32]	; (8014748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014728:	f7fc fbb3 	bl	8010e92 <USBD_GetString>
 801472c:	e004      	b.n	8014738 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801472e:	683a      	ldr	r2, [r7, #0]
 8014730:	4904      	ldr	r1, [pc, #16]	; (8014744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014732:	4805      	ldr	r0, [pc, #20]	; (8014748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014734:	f7fc fbad 	bl	8010e92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014738:	4b02      	ldr	r3, [pc, #8]	; (8014744 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801473a:	4618      	mov	r0, r3
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	20009940 	.word	0x20009940
 8014748:	0801a994 	.word	0x0801a994

0801474c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014752:	4b0f      	ldr	r3, [pc, #60]	; (8014790 <Get_SerialNum+0x44>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014758:	4b0e      	ldr	r3, [pc, #56]	; (8014794 <Get_SerialNum+0x48>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801475e:	4b0e      	ldr	r3, [pc, #56]	; (8014798 <Get_SerialNum+0x4c>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014764:	68fa      	ldr	r2, [r7, #12]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	4413      	add	r3, r2
 801476a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d009      	beq.n	8014786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014772:	2208      	movs	r2, #8
 8014774:	4909      	ldr	r1, [pc, #36]	; (801479c <Get_SerialNum+0x50>)
 8014776:	68f8      	ldr	r0, [r7, #12]
 8014778:	f000 f814 	bl	80147a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801477c:	2204      	movs	r2, #4
 801477e:	4908      	ldr	r1, [pc, #32]	; (80147a0 <Get_SerialNum+0x54>)
 8014780:	68b8      	ldr	r0, [r7, #8]
 8014782:	f000 f80f 	bl	80147a4 <IntToUnicode>
  }
}
 8014786:	bf00      	nop
 8014788:	3710      	adds	r7, #16
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	1ff800d0 	.word	0x1ff800d0
 8014794:	1ff800d4 	.word	0x1ff800d4
 8014798:	1ff800d8 	.word	0x1ff800d8
 801479c:	2000010e 	.word	0x2000010e
 80147a0:	2000011e 	.word	0x2000011e

080147a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80147a4:	b480      	push	{r7}
 80147a6:	b087      	sub	sp, #28
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	4613      	mov	r3, r2
 80147b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80147b2:	2300      	movs	r3, #0
 80147b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80147b6:	2300      	movs	r3, #0
 80147b8:	75fb      	strb	r3, [r7, #23]
 80147ba:	e027      	b.n	801480c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	0f1b      	lsrs	r3, r3, #28
 80147c0:	2b09      	cmp	r3, #9
 80147c2:	d80b      	bhi.n	80147dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	0f1b      	lsrs	r3, r3, #28
 80147c8:	b2da      	uxtb	r2, r3
 80147ca:	7dfb      	ldrb	r3, [r7, #23]
 80147cc:	005b      	lsls	r3, r3, #1
 80147ce:	4619      	mov	r1, r3
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	440b      	add	r3, r1
 80147d4:	3230      	adds	r2, #48	; 0x30
 80147d6:	b2d2      	uxtb	r2, r2
 80147d8:	701a      	strb	r2, [r3, #0]
 80147da:	e00a      	b.n	80147f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	0f1b      	lsrs	r3, r3, #28
 80147e0:	b2da      	uxtb	r2, r3
 80147e2:	7dfb      	ldrb	r3, [r7, #23]
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	4619      	mov	r1, r3
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	440b      	add	r3, r1
 80147ec:	3237      	adds	r2, #55	; 0x37
 80147ee:	b2d2      	uxtb	r2, r2
 80147f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	011b      	lsls	r3, r3, #4
 80147f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80147f8:	7dfb      	ldrb	r3, [r7, #23]
 80147fa:	005b      	lsls	r3, r3, #1
 80147fc:	3301      	adds	r3, #1
 80147fe:	68ba      	ldr	r2, [r7, #8]
 8014800:	4413      	add	r3, r2
 8014802:	2200      	movs	r2, #0
 8014804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014806:	7dfb      	ldrb	r3, [r7, #23]
 8014808:	3301      	adds	r3, #1
 801480a:	75fb      	strb	r3, [r7, #23]
 801480c:	7dfa      	ldrb	r2, [r7, #23]
 801480e:	79fb      	ldrb	r3, [r7, #7]
 8014810:	429a      	cmp	r2, r3
 8014812:	d3d3      	bcc.n	80147bc <IntToUnicode+0x18>
  }
}
 8014814:	bf00      	nop
 8014816:	371c      	adds	r7, #28
 8014818:	46bd      	mov	sp, r7
 801481a:	bc80      	pop	{r7}
 801481c:	4770      	bx	lr

0801481e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801481e:	b480      	push	{r7}
 8014820:	b083      	sub	sp, #12
 8014822:	af00      	add	r7, sp, #0
 8014824:	4603      	mov	r3, r0
 8014826:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014828:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801482a:	4618      	mov	r0, r3
 801482c:	370c      	adds	r7, #12
 801482e:	46bd      	mov	sp, r7
 8014830:	bc80      	pop	{r7}
 8014832:	4770      	bx	lr

08014834 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014834:	b480      	push	{r7}
 8014836:	b085      	sub	sp, #20
 8014838:	af00      	add	r7, sp, #0
 801483a:	4603      	mov	r3, r0
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	607a      	str	r2, [r7, #4]
 8014840:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014848:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014850:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8014852:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014854:	4618      	mov	r0, r3
 8014856:	3714      	adds	r7, #20
 8014858:	46bd      	mov	sp, r7
 801485a:	bc80      	pop	{r7}
 801485c:	4770      	bx	lr

0801485e <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801485e:	b480      	push	{r7}
 8014860:	b083      	sub	sp, #12
 8014862:	af00      	add	r7, sp, #0
 8014864:	4603      	mov	r3, r0
 8014866:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014868:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801486a:	4618      	mov	r0, r3
 801486c:	370c      	adds	r7, #12
 801486e:	46bd      	mov	sp, r7
 8014870:	bc80      	pop	{r7}
 8014872:	4770      	bx	lr

08014874 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014874:	b480      	push	{r7}
 8014876:	b083      	sub	sp, #12
 8014878:	af00      	add	r7, sp, #0
 801487a:	4603      	mov	r3, r0
 801487c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801487e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014880:	4618      	mov	r0, r3
 8014882:	370c      	adds	r7, #12
 8014884:	46bd      	mov	sp, r7
 8014886:	bc80      	pop	{r7}
 8014888:	4770      	bx	lr

0801488a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801488a:	b480      	push	{r7}
 801488c:	b085      	sub	sp, #20
 801488e:	af00      	add	r7, sp, #0
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	607a      	str	r2, [r7, #4]
 8014894:	461a      	mov	r2, r3
 8014896:	4603      	mov	r3, r0
 8014898:	73fb      	strb	r3, [r7, #15]
 801489a:	4613      	mov	r3, r2
 801489c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 801489e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	3714      	adds	r7, #20
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bc80      	pop	{r7}
 80148a8:	4770      	bx	lr

080148aa <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80148aa:	b480      	push	{r7}
 80148ac:	b085      	sub	sp, #20
 80148ae:	af00      	add	r7, sp, #0
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	607a      	str	r2, [r7, #4]
 80148b4:	461a      	mov	r2, r3
 80148b6:	4603      	mov	r3, r0
 80148b8:	73fb      	strb	r3, [r7, #15]
 80148ba:	4613      	mov	r3, r2
 80148bc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80148be:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3714      	adds	r7, #20
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bc80      	pop	{r7}
 80148c8:	4770      	bx	lr

080148ca <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80148ca:	b480      	push	{r7}
 80148cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80148ce:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bc80      	pop	{r7}
 80148d6:	4770      	bx	lr

080148d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b084      	sub	sp, #16
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4a0d      	ldr	r2, [pc, #52]	; (801491c <HAL_PCD_MspInit+0x44>)
 80148e6:	4293      	cmp	r3, r2
 80148e8:	d113      	bne.n	8014912 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80148ea:	4b0d      	ldr	r3, [pc, #52]	; (8014920 <HAL_PCD_MspInit+0x48>)
 80148ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ee:	4a0c      	ldr	r2, [pc, #48]	; (8014920 <HAL_PCD_MspInit+0x48>)
 80148f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80148f4:	6253      	str	r3, [r2, #36]	; 0x24
 80148f6:	4b0a      	ldr	r3, [pc, #40]	; (8014920 <HAL_PCD_MspInit+0x48>)
 80148f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80148fe:	60fb      	str	r3, [r7, #12]
 8014900:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8014902:	2200      	movs	r2, #0
 8014904:	2100      	movs	r1, #0
 8014906:	2014      	movs	r0, #20
 8014908:	f7f2 ffaf 	bl	800786a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801490c:	2014      	movs	r0, #20
 801490e:	f7f2 ffc8 	bl	80078a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014912:	bf00      	nop
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	40005c00 	.word	0x40005c00
 8014920:	40023800 	.word	0x40023800

08014924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014938:	4619      	mov	r1, r3
 801493a:	4610      	mov	r0, r2
 801493c:	f7fb fbfa 	bl	8010134 <USBD_LL_SetupStage>
}
 8014940:	bf00      	nop
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}

08014948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	460b      	mov	r3, r1
 8014952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801495a:	78fa      	ldrb	r2, [r7, #3]
 801495c:	6879      	ldr	r1, [r7, #4]
 801495e:	4613      	mov	r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	4413      	add	r3, r2
 8014964:	00db      	lsls	r3, r3, #3
 8014966:	440b      	add	r3, r1
 8014968:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	78fb      	ldrb	r3, [r7, #3]
 8014970:	4619      	mov	r1, r3
 8014972:	f7fb fc2a 	bl	80101ca <USBD_LL_DataOutStage>
}
 8014976:	bf00      	nop
 8014978:	3708      	adds	r7, #8
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}

0801497e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801497e:	b580      	push	{r7, lr}
 8014980:	b082      	sub	sp, #8
 8014982:	af00      	add	r7, sp, #0
 8014984:	6078      	str	r0, [r7, #4]
 8014986:	460b      	mov	r3, r1
 8014988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8014990:	78fa      	ldrb	r2, [r7, #3]
 8014992:	6879      	ldr	r1, [r7, #4]
 8014994:	4613      	mov	r3, r2
 8014996:	009b      	lsls	r3, r3, #2
 8014998:	4413      	add	r3, r2
 801499a:	00db      	lsls	r3, r3, #3
 801499c:	440b      	add	r3, r1
 801499e:	333c      	adds	r3, #60	; 0x3c
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	78fb      	ldrb	r3, [r7, #3]
 80149a4:	4619      	mov	r1, r3
 80149a6:	f7fb fc81 	bl	80102ac <USBD_LL_DataInStage>
}
 80149aa:	bf00      	nop
 80149ac:	3708      	adds	r7, #8
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149b2:	b580      	push	{r7, lr}
 80149b4:	b082      	sub	sp, #8
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fb fd8c 	bl	80104de <USBD_LL_SOF>
}
 80149c6:	bf00      	nop
 80149c8:	3708      	adds	r7, #8
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}

080149ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149ce:	b580      	push	{r7, lr}
 80149d0:	b084      	sub	sp, #16
 80149d2:	af00      	add	r7, sp, #0
 80149d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80149d6:	2301      	movs	r3, #1
 80149d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	689b      	ldr	r3, [r3, #8]
 80149de:	2b02      	cmp	r3, #2
 80149e0:	d002      	beq.n	80149e8 <HAL_PCD_ResetCallback+0x1a>
  {
    Error_Handler(1);
 80149e2:	2001      	movs	r0, #1
 80149e4:	f7ef f818 	bl	8003a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80149ee:	7bfa      	ldrb	r2, [r7, #15]
 80149f0:	4611      	mov	r1, r2
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7fb fd40 	bl	8010478 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fb fcf9 	bl	80103f6 <USBD_LL_Reset>
}
 8014a04:	bf00      	nop
 8014a06:	3710      	adds	r7, #16
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7fb fd3b 	bl	8010496 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	699b      	ldr	r3, [r3, #24]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d005      	beq.n	8014a34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a28:	4b04      	ldr	r3, [pc, #16]	; (8014a3c <HAL_PCD_SuspendCallback+0x30>)
 8014a2a:	691b      	ldr	r3, [r3, #16]
 8014a2c:	4a03      	ldr	r2, [pc, #12]	; (8014a3c <HAL_PCD_SuspendCallback+0x30>)
 8014a2e:	f043 0306 	orr.w	r3, r3, #6
 8014a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014a34:	bf00      	nop
 8014a36:	3708      	adds	r7, #8
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	e000ed00 	.word	0xe000ed00

08014a40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b082      	sub	sp, #8
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7fb fd35 	bl	80104be <USBD_LL_Resume>
}
 8014a54:	bf00      	nop
 8014a56:	3708      	adds	r7, #8
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8014a64:	4a23      	ldr	r2, [pc, #140]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	4a21      	ldr	r2, [pc, #132]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8014a74:	4b1f      	ldr	r3, [pc, #124]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a76:	4a20      	ldr	r2, [pc, #128]	; (8014af8 <USBD_LL_Init+0x9c>)
 8014a78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014a7a:	4b1e      	ldr	r3, [pc, #120]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a7c:	2208      	movs	r2, #8
 8014a7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014a80:	4b1c      	ldr	r3, [pc, #112]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a82:	2202      	movs	r2, #2
 8014a84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014a86:	4b1b      	ldr	r3, [pc, #108]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a88:	2202      	movs	r2, #2
 8014a8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014a8c:	4b19      	ldr	r3, [pc, #100]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a8e:	2200      	movs	r2, #0
 8014a90:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014a92:	4b18      	ldr	r3, [pc, #96]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a94:	2200      	movs	r2, #0
 8014a96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014a98:	4816      	ldr	r0, [pc, #88]	; (8014af4 <USBD_LL_Init+0x98>)
 8014a9a:	f7f3 fc6d 	bl	8008378 <HAL_PCD_Init>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <USBD_LL_Init+0x4e>
  {
    Error_Handler(1);
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	f7ee ffb7 	bl	8003a18 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ab0:	2318      	movs	r3, #24
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	2100      	movs	r1, #0
 8014ab6:	f7f4 ff21 	bl	80098fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ac0:	2358      	movs	r3, #88	; 0x58
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	2180      	movs	r1, #128	; 0x80
 8014ac6:	f7f4 ff19 	bl	80098fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ad0:	2398      	movs	r3, #152	; 0x98
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	2181      	movs	r1, #129	; 0x81
 8014ad6:	f7f4 ff11 	bl	80098fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014ae0:	23d8      	movs	r3, #216	; 0xd8
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	2101      	movs	r1, #1
 8014ae6:	f7f4 ff09 	bl	80098fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8014aea:	2300      	movs	r3, #0
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3708      	adds	r7, #8
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	20009b40 	.word	0x20009b40
 8014af8:	40005c00 	.word	0x40005c00

08014afc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b084      	sub	sp, #16
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b04:	2300      	movs	r3, #0
 8014b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7f3 fd0e 	bl	8008534 <HAL_PCD_Start>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b1c:	7bfb      	ldrb	r3, [r7, #15]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f000 f964 	bl	8014dec <USBD_Get_USB_Status>
 8014b24:	4603      	mov	r3, r0
 8014b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b084      	sub	sp, #16
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
 8014b3a:	4608      	mov	r0, r1
 8014b3c:	4611      	mov	r1, r2
 8014b3e:	461a      	mov	r2, r3
 8014b40:	4603      	mov	r3, r0
 8014b42:	70fb      	strb	r3, [r7, #3]
 8014b44:	460b      	mov	r3, r1
 8014b46:	70bb      	strb	r3, [r7, #2]
 8014b48:	4613      	mov	r3, r2
 8014b4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b50:	2300      	movs	r3, #0
 8014b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014b5a:	78bb      	ldrb	r3, [r7, #2]
 8014b5c:	883a      	ldrh	r2, [r7, #0]
 8014b5e:	78f9      	ldrb	r1, [r7, #3]
 8014b60:	f7f3 fe2a 	bl	80087b8 <HAL_PCD_EP_Open>
 8014b64:	4603      	mov	r3, r0
 8014b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b68:	7bfb      	ldrb	r3, [r7, #15]
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f000 f93e 	bl	8014dec <USBD_Get_USB_Status>
 8014b70:	4603      	mov	r3, r0
 8014b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3710      	adds	r7, #16
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}

08014b7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b7e:	b580      	push	{r7, lr}
 8014b80:	b084      	sub	sp, #16
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	460b      	mov	r3, r1
 8014b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014b98:	78fa      	ldrb	r2, [r7, #3]
 8014b9a:	4611      	mov	r1, r2
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7f3 fe71 	bl	8008884 <HAL_PCD_EP_Close>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ba6:	7bfb      	ldrb	r3, [r7, #15]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f000 f91f 	bl	8014dec <USBD_Get_USB_Status>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3710      	adds	r7, #16
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014bd6:	78fa      	ldrb	r2, [r7, #3]
 8014bd8:	4611      	mov	r1, r2
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7f3 ffe5 	bl	8008baa <HAL_PCD_EP_Flush>
 8014be0:	4603      	mov	r3, r0
 8014be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014be4:	7bfb      	ldrb	r3, [r7, #15]
 8014be6:	4618      	mov	r0, r3
 8014be8:	f000 f900 	bl	8014dec <USBD_Get_USB_Status>
 8014bec:	4603      	mov	r3, r0
 8014bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
 8014c02:	460b      	mov	r3, r1
 8014c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c06:	2300      	movs	r3, #0
 8014c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014c14:	78fa      	ldrb	r2, [r7, #3]
 8014c16:	4611      	mov	r1, r2
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7f3 ff12 	bl	8008a42 <HAL_PCD_EP_SetStall>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c22:	7bfb      	ldrb	r3, [r7, #15]
 8014c24:	4618      	mov	r0, r3
 8014c26:	f000 f8e1 	bl	8014dec <USBD_Get_USB_Status>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	460b      	mov	r3, r1
 8014c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c44:	2300      	movs	r3, #0
 8014c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014c52:	78fa      	ldrb	r2, [r7, #3]
 8014c54:	4611      	mov	r1, r2
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f3 ff53 	bl	8008b02 <HAL_PCD_EP_ClrStall>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c60:	7bfb      	ldrb	r3, [r7, #15]
 8014c62:	4618      	mov	r0, r3
 8014c64:	f000 f8c2 	bl	8014dec <USBD_Get_USB_Status>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3710      	adds	r7, #16
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c76:	b480      	push	{r7}
 8014c78:	b085      	sub	sp, #20
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
 8014c7e:	460b      	mov	r3, r1
 8014c80:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014c88:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	da0c      	bge.n	8014cac <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014c92:	78fb      	ldrb	r3, [r7, #3]
 8014c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c98:	68f9      	ldr	r1, [r7, #12]
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	4413      	add	r3, r2
 8014ca2:	00db      	lsls	r3, r3, #3
 8014ca4:	440b      	add	r3, r1
 8014ca6:	3302      	adds	r3, #2
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	e00b      	b.n	8014cc4 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014cac:	78fb      	ldrb	r3, [r7, #3]
 8014cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cb2:	68f9      	ldr	r1, [r7, #12]
 8014cb4:	4613      	mov	r3, r2
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	4413      	add	r3, r2
 8014cba:	00db      	lsls	r3, r3, #3
 8014cbc:	440b      	add	r3, r1
 8014cbe:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014cc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3714      	adds	r7, #20
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bc80      	pop	{r7}
 8014ccc:	4770      	bx	lr

08014cce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014cce:	b580      	push	{r7, lr}
 8014cd0:	b084      	sub	sp, #16
 8014cd2:	af00      	add	r7, sp, #0
 8014cd4:	6078      	str	r0, [r7, #4]
 8014cd6:	460b      	mov	r3, r1
 8014cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014ce8:	78fa      	ldrb	r2, [r7, #3]
 8014cea:	4611      	mov	r1, r2
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7f3 fd3e 	bl	800876e <HAL_PCD_SetAddress>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014cf6:	7bfb      	ldrb	r3, [r7, #15]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f000 f877 	bl	8014dec <USBD_Get_USB_Status>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3710      	adds	r7, #16
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b086      	sub	sp, #24
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	60f8      	str	r0, [r7, #12]
 8014d14:	607a      	str	r2, [r7, #4]
 8014d16:	461a      	mov	r2, r3
 8014d18:	460b      	mov	r3, r1
 8014d1a:	72fb      	strb	r3, [r7, #11]
 8014d1c:	4613      	mov	r3, r2
 8014d1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d20:	2300      	movs	r3, #0
 8014d22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d24:	2300      	movs	r3, #0
 8014d26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014d2e:	893b      	ldrh	r3, [r7, #8]
 8014d30:	7af9      	ldrb	r1, [r7, #11]
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	f7f3 fe42 	bl	80089bc <HAL_PCD_EP_Transmit>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d3c:	7dfb      	ldrb	r3, [r7, #23]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f000 f854 	bl	8014dec <USBD_Get_USB_Status>
 8014d44:	4603      	mov	r3, r0
 8014d46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014d48:	7dbb      	ldrb	r3, [r7, #22]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3718      	adds	r7, #24
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}

08014d52 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b086      	sub	sp, #24
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	60f8      	str	r0, [r7, #12]
 8014d5a:	607a      	str	r2, [r7, #4]
 8014d5c:	461a      	mov	r2, r3
 8014d5e:	460b      	mov	r3, r1
 8014d60:	72fb      	strb	r3, [r7, #11]
 8014d62:	4613      	mov	r3, r2
 8014d64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d66:	2300      	movs	r3, #0
 8014d68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014d74:	893b      	ldrh	r3, [r7, #8]
 8014d76:	7af9      	ldrb	r1, [r7, #11]
 8014d78:	687a      	ldr	r2, [r7, #4]
 8014d7a:	f7f3 fdcb 	bl	8008914 <HAL_PCD_EP_Receive>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d82:	7dfb      	ldrb	r3, [r7, #23]
 8014d84:	4618      	mov	r0, r3
 8014d86:	f000 f831 	bl	8014dec <USBD_Get_USB_Status>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014d8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014d90:	4618      	mov	r0, r3
 8014d92:	3718      	adds	r7, #24
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	460b      	mov	r3, r1
 8014da2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014daa:	78fa      	ldrb	r2, [r7, #3]
 8014dac:	4611      	mov	r1, r2
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7f3 fded 	bl	800898e <HAL_PCD_EP_GetRxCount>
 8014db4:	4603      	mov	r3, r0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3708      	adds	r7, #8
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
	...

08014dc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014dc8:	4b02      	ldr	r3, [pc, #8]	; (8014dd4 <USBD_static_malloc+0x14>)
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	370c      	adds	r7, #12
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bc80      	pop	{r7}
 8014dd2:	4770      	bx	lr
 8014dd4:	200086dc 	.word	0x200086dc

08014dd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]

}
 8014de0:	bf00      	nop
 8014de2:	370c      	adds	r7, #12
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bc80      	pop	{r7}
 8014de8:	4770      	bx	lr
	...

08014dec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b085      	sub	sp, #20
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	4603      	mov	r3, r0
 8014df4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014df6:	2300      	movs	r3, #0
 8014df8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014dfa:	79fb      	ldrb	r3, [r7, #7]
 8014dfc:	2b03      	cmp	r3, #3
 8014dfe:	d817      	bhi.n	8014e30 <USBD_Get_USB_Status+0x44>
 8014e00:	a201      	add	r2, pc, #4	; (adr r2, 8014e08 <USBD_Get_USB_Status+0x1c>)
 8014e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e06:	bf00      	nop
 8014e08:	08014e19 	.word	0x08014e19
 8014e0c:	08014e1f 	.word	0x08014e1f
 8014e10:	08014e25 	.word	0x08014e25
 8014e14:	08014e2b 	.word	0x08014e2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8014e1c:	e00b      	b.n	8014e36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014e1e:	2302      	movs	r3, #2
 8014e20:	73fb      	strb	r3, [r7, #15]
    break;
 8014e22:	e008      	b.n	8014e36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014e24:	2301      	movs	r3, #1
 8014e26:	73fb      	strb	r3, [r7, #15]
    break;
 8014e28:	e005      	b.n	8014e36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014e2a:	2302      	movs	r3, #2
 8014e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8014e2e:	e002      	b.n	8014e36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014e30:	2302      	movs	r3, #2
 8014e32:	73fb      	strb	r3, [r7, #15]
    break;
 8014e34:	bf00      	nop
  }
  return usb_status;
 8014e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3714      	adds	r7, #20
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bc80      	pop	{r7}
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop

08014e44 <__libc_init_array>:
 8014e44:	b570      	push	{r4, r5, r6, lr}
 8014e46:	2500      	movs	r5, #0
 8014e48:	4e0c      	ldr	r6, [pc, #48]	; (8014e7c <__libc_init_array+0x38>)
 8014e4a:	4c0d      	ldr	r4, [pc, #52]	; (8014e80 <__libc_init_array+0x3c>)
 8014e4c:	1ba4      	subs	r4, r4, r6
 8014e4e:	10a4      	asrs	r4, r4, #2
 8014e50:	42a5      	cmp	r5, r4
 8014e52:	d109      	bne.n	8014e68 <__libc_init_array+0x24>
 8014e54:	f004 fec6 	bl	8019be4 <_init>
 8014e58:	2500      	movs	r5, #0
 8014e5a:	4e0a      	ldr	r6, [pc, #40]	; (8014e84 <__libc_init_array+0x40>)
 8014e5c:	4c0a      	ldr	r4, [pc, #40]	; (8014e88 <__libc_init_array+0x44>)
 8014e5e:	1ba4      	subs	r4, r4, r6
 8014e60:	10a4      	asrs	r4, r4, #2
 8014e62:	42a5      	cmp	r5, r4
 8014e64:	d105      	bne.n	8014e72 <__libc_init_array+0x2e>
 8014e66:	bd70      	pop	{r4, r5, r6, pc}
 8014e68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e6c:	4798      	blx	r3
 8014e6e:	3501      	adds	r5, #1
 8014e70:	e7ee      	b.n	8014e50 <__libc_init_array+0xc>
 8014e72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e76:	4798      	blx	r3
 8014e78:	3501      	adds	r5, #1
 8014e7a:	e7f2      	b.n	8014e62 <__libc_init_array+0x1e>
 8014e7c:	0801e95c 	.word	0x0801e95c
 8014e80:	0801e95c 	.word	0x0801e95c
 8014e84:	0801e95c 	.word	0x0801e95c
 8014e88:	0801e960 	.word	0x0801e960

08014e8c <memcpy>:
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	1e43      	subs	r3, r0, #1
 8014e90:	440a      	add	r2, r1
 8014e92:	4291      	cmp	r1, r2
 8014e94:	d100      	bne.n	8014e98 <memcpy+0xc>
 8014e96:	bd10      	pop	{r4, pc}
 8014e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ea0:	e7f7      	b.n	8014e92 <memcpy+0x6>

08014ea2 <memmove>:
 8014ea2:	4288      	cmp	r0, r1
 8014ea4:	b510      	push	{r4, lr}
 8014ea6:	eb01 0302 	add.w	r3, r1, r2
 8014eaa:	d807      	bhi.n	8014ebc <memmove+0x1a>
 8014eac:	1e42      	subs	r2, r0, #1
 8014eae:	4299      	cmp	r1, r3
 8014eb0:	d00a      	beq.n	8014ec8 <memmove+0x26>
 8014eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eb6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014eba:	e7f8      	b.n	8014eae <memmove+0xc>
 8014ebc:	4283      	cmp	r3, r0
 8014ebe:	d9f5      	bls.n	8014eac <memmove+0xa>
 8014ec0:	1881      	adds	r1, r0, r2
 8014ec2:	1ad2      	subs	r2, r2, r3
 8014ec4:	42d3      	cmn	r3, r2
 8014ec6:	d100      	bne.n	8014eca <memmove+0x28>
 8014ec8:	bd10      	pop	{r4, pc}
 8014eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ece:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ed2:	e7f7      	b.n	8014ec4 <memmove+0x22>

08014ed4 <memset>:
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	4402      	add	r2, r0
 8014ed8:	4293      	cmp	r3, r2
 8014eda:	d100      	bne.n	8014ede <memset+0xa>
 8014edc:	4770      	bx	lr
 8014ede:	f803 1b01 	strb.w	r1, [r3], #1
 8014ee2:	e7f9      	b.n	8014ed8 <memset+0x4>

08014ee4 <__cvt>:
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eea:	461e      	mov	r6, r3
 8014eec:	bfbb      	ittet	lt
 8014eee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8014ef2:	461e      	movlt	r6, r3
 8014ef4:	2300      	movge	r3, #0
 8014ef6:	232d      	movlt	r3, #45	; 0x2d
 8014ef8:	b088      	sub	sp, #32
 8014efa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014efc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8014f00:	f027 0720 	bic.w	r7, r7, #32
 8014f04:	2f46      	cmp	r7, #70	; 0x46
 8014f06:	4614      	mov	r4, r2
 8014f08:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014f0a:	700b      	strb	r3, [r1, #0]
 8014f0c:	d004      	beq.n	8014f18 <__cvt+0x34>
 8014f0e:	2f45      	cmp	r7, #69	; 0x45
 8014f10:	d100      	bne.n	8014f14 <__cvt+0x30>
 8014f12:	3501      	adds	r5, #1
 8014f14:	2302      	movs	r3, #2
 8014f16:	e000      	b.n	8014f1a <__cvt+0x36>
 8014f18:	2303      	movs	r3, #3
 8014f1a:	aa07      	add	r2, sp, #28
 8014f1c:	9204      	str	r2, [sp, #16]
 8014f1e:	aa06      	add	r2, sp, #24
 8014f20:	e9cd a202 	strd	sl, r2, [sp, #8]
 8014f24:	e9cd 3500 	strd	r3, r5, [sp]
 8014f28:	4622      	mov	r2, r4
 8014f2a:	4633      	mov	r3, r6
 8014f2c:	f001 ff80 	bl	8016e30 <_dtoa_r>
 8014f30:	2f47      	cmp	r7, #71	; 0x47
 8014f32:	4680      	mov	r8, r0
 8014f34:	d102      	bne.n	8014f3c <__cvt+0x58>
 8014f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f38:	07db      	lsls	r3, r3, #31
 8014f3a:	d526      	bpl.n	8014f8a <__cvt+0xa6>
 8014f3c:	2f46      	cmp	r7, #70	; 0x46
 8014f3e:	eb08 0905 	add.w	r9, r8, r5
 8014f42:	d111      	bne.n	8014f68 <__cvt+0x84>
 8014f44:	f898 3000 	ldrb.w	r3, [r8]
 8014f48:	2b30      	cmp	r3, #48	; 0x30
 8014f4a:	d10a      	bne.n	8014f62 <__cvt+0x7e>
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	2300      	movs	r3, #0
 8014f50:	4620      	mov	r0, r4
 8014f52:	4631      	mov	r1, r6
 8014f54:	f7eb fd4a 	bl	80009ec <__aeabi_dcmpeq>
 8014f58:	b918      	cbnz	r0, 8014f62 <__cvt+0x7e>
 8014f5a:	f1c5 0501 	rsb	r5, r5, #1
 8014f5e:	f8ca 5000 	str.w	r5, [sl]
 8014f62:	f8da 3000 	ldr.w	r3, [sl]
 8014f66:	4499      	add	r9, r3
 8014f68:	2200      	movs	r2, #0
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	4631      	mov	r1, r6
 8014f70:	f7eb fd3c 	bl	80009ec <__aeabi_dcmpeq>
 8014f74:	b938      	cbnz	r0, 8014f86 <__cvt+0xa2>
 8014f76:	2230      	movs	r2, #48	; 0x30
 8014f78:	9b07      	ldr	r3, [sp, #28]
 8014f7a:	454b      	cmp	r3, r9
 8014f7c:	d205      	bcs.n	8014f8a <__cvt+0xa6>
 8014f7e:	1c59      	adds	r1, r3, #1
 8014f80:	9107      	str	r1, [sp, #28]
 8014f82:	701a      	strb	r2, [r3, #0]
 8014f84:	e7f8      	b.n	8014f78 <__cvt+0x94>
 8014f86:	f8cd 901c 	str.w	r9, [sp, #28]
 8014f8a:	4640      	mov	r0, r8
 8014f8c:	9b07      	ldr	r3, [sp, #28]
 8014f8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014f90:	eba3 0308 	sub.w	r3, r3, r8
 8014f94:	6013      	str	r3, [r2, #0]
 8014f96:	b008      	add	sp, #32
 8014f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014f9c <__exponent>:
 8014f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f9e:	2900      	cmp	r1, #0
 8014fa0:	bfb4      	ite	lt
 8014fa2:	232d      	movlt	r3, #45	; 0x2d
 8014fa4:	232b      	movge	r3, #43	; 0x2b
 8014fa6:	4604      	mov	r4, r0
 8014fa8:	bfb8      	it	lt
 8014faa:	4249      	neglt	r1, r1
 8014fac:	2909      	cmp	r1, #9
 8014fae:	f804 2b02 	strb.w	r2, [r4], #2
 8014fb2:	7043      	strb	r3, [r0, #1]
 8014fb4:	dd21      	ble.n	8014ffa <__exponent+0x5e>
 8014fb6:	f10d 0307 	add.w	r3, sp, #7
 8014fba:	461f      	mov	r7, r3
 8014fbc:	260a      	movs	r6, #10
 8014fbe:	fb91 f5f6 	sdiv	r5, r1, r6
 8014fc2:	fb06 1115 	mls	r1, r6, r5, r1
 8014fc6:	2d09      	cmp	r5, #9
 8014fc8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8014fcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014fd0:	f103 32ff 	add.w	r2, r3, #4294967295
 8014fd4:	4629      	mov	r1, r5
 8014fd6:	dc09      	bgt.n	8014fec <__exponent+0x50>
 8014fd8:	3130      	adds	r1, #48	; 0x30
 8014fda:	3b02      	subs	r3, #2
 8014fdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014fe0:	42bb      	cmp	r3, r7
 8014fe2:	4622      	mov	r2, r4
 8014fe4:	d304      	bcc.n	8014ff0 <__exponent+0x54>
 8014fe6:	1a10      	subs	r0, r2, r0
 8014fe8:	b003      	add	sp, #12
 8014fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fec:	4613      	mov	r3, r2
 8014fee:	e7e6      	b.n	8014fbe <__exponent+0x22>
 8014ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ff4:	f804 2b01 	strb.w	r2, [r4], #1
 8014ff8:	e7f2      	b.n	8014fe0 <__exponent+0x44>
 8014ffa:	2330      	movs	r3, #48	; 0x30
 8014ffc:	4419      	add	r1, r3
 8014ffe:	7083      	strb	r3, [r0, #2]
 8015000:	1d02      	adds	r2, r0, #4
 8015002:	70c1      	strb	r1, [r0, #3]
 8015004:	e7ef      	b.n	8014fe6 <__exponent+0x4a>
	...

08015008 <_printf_float>:
 8015008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801500c:	b091      	sub	sp, #68	; 0x44
 801500e:	460c      	mov	r4, r1
 8015010:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8015012:	4693      	mov	fp, r2
 8015014:	461e      	mov	r6, r3
 8015016:	4605      	mov	r5, r0
 8015018:	f003 f974 	bl	8018304 <_localeconv_r>
 801501c:	6803      	ldr	r3, [r0, #0]
 801501e:	4618      	mov	r0, r3
 8015020:	9309      	str	r3, [sp, #36]	; 0x24
 8015022:	f7eb f8b7 	bl	8000194 <strlen>
 8015026:	2300      	movs	r3, #0
 8015028:	930e      	str	r3, [sp, #56]	; 0x38
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	900a      	str	r0, [sp, #40]	; 0x28
 801502e:	3307      	adds	r3, #7
 8015030:	f023 0307 	bic.w	r3, r3, #7
 8015034:	f103 0208 	add.w	r2, r3, #8
 8015038:	f894 8018 	ldrb.w	r8, [r4, #24]
 801503c:	f8d4 a000 	ldr.w	sl, [r4]
 8015040:	603a      	str	r2, [r7, #0]
 8015042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015046:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801504a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 801504e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015052:	930b      	str	r3, [sp, #44]	; 0x2c
 8015054:	f04f 32ff 	mov.w	r2, #4294967295
 8015058:	4ba6      	ldr	r3, [pc, #664]	; (80152f4 <_printf_float+0x2ec>)
 801505a:	4638      	mov	r0, r7
 801505c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801505e:	f7eb fcf7 	bl	8000a50 <__aeabi_dcmpun>
 8015062:	bb68      	cbnz	r0, 80150c0 <_printf_float+0xb8>
 8015064:	f04f 32ff 	mov.w	r2, #4294967295
 8015068:	4ba2      	ldr	r3, [pc, #648]	; (80152f4 <_printf_float+0x2ec>)
 801506a:	4638      	mov	r0, r7
 801506c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801506e:	f7eb fcd1 	bl	8000a14 <__aeabi_dcmple>
 8015072:	bb28      	cbnz	r0, 80150c0 <_printf_float+0xb8>
 8015074:	2200      	movs	r2, #0
 8015076:	2300      	movs	r3, #0
 8015078:	4638      	mov	r0, r7
 801507a:	4649      	mov	r1, r9
 801507c:	f7eb fcc0 	bl	8000a00 <__aeabi_dcmplt>
 8015080:	b110      	cbz	r0, 8015088 <_printf_float+0x80>
 8015082:	232d      	movs	r3, #45	; 0x2d
 8015084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015088:	4f9b      	ldr	r7, [pc, #620]	; (80152f8 <_printf_float+0x2f0>)
 801508a:	4b9c      	ldr	r3, [pc, #624]	; (80152fc <_printf_float+0x2f4>)
 801508c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015090:	bf98      	it	ls
 8015092:	461f      	movls	r7, r3
 8015094:	2303      	movs	r3, #3
 8015096:	f04f 0900 	mov.w	r9, #0
 801509a:	6123      	str	r3, [r4, #16]
 801509c:	f02a 0304 	bic.w	r3, sl, #4
 80150a0:	6023      	str	r3, [r4, #0]
 80150a2:	9600      	str	r6, [sp, #0]
 80150a4:	465b      	mov	r3, fp
 80150a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80150a8:	4621      	mov	r1, r4
 80150aa:	4628      	mov	r0, r5
 80150ac:	f000 f9e2 	bl	8015474 <_printf_common>
 80150b0:	3001      	adds	r0, #1
 80150b2:	f040 8090 	bne.w	80151d6 <_printf_float+0x1ce>
 80150b6:	f04f 30ff 	mov.w	r0, #4294967295
 80150ba:	b011      	add	sp, #68	; 0x44
 80150bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c0:	463a      	mov	r2, r7
 80150c2:	464b      	mov	r3, r9
 80150c4:	4638      	mov	r0, r7
 80150c6:	4649      	mov	r1, r9
 80150c8:	f7eb fcc2 	bl	8000a50 <__aeabi_dcmpun>
 80150cc:	b110      	cbz	r0, 80150d4 <_printf_float+0xcc>
 80150ce:	4f8c      	ldr	r7, [pc, #560]	; (8015300 <_printf_float+0x2f8>)
 80150d0:	4b8c      	ldr	r3, [pc, #560]	; (8015304 <_printf_float+0x2fc>)
 80150d2:	e7db      	b.n	801508c <_printf_float+0x84>
 80150d4:	6863      	ldr	r3, [r4, #4]
 80150d6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80150da:	1c59      	adds	r1, r3, #1
 80150dc:	a80d      	add	r0, sp, #52	; 0x34
 80150de:	a90e      	add	r1, sp, #56	; 0x38
 80150e0:	d140      	bne.n	8015164 <_printf_float+0x15c>
 80150e2:	2306      	movs	r3, #6
 80150e4:	6063      	str	r3, [r4, #4]
 80150e6:	f04f 0c00 	mov.w	ip, #0
 80150ea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80150ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80150f2:	6863      	ldr	r3, [r4, #4]
 80150f4:	6022      	str	r2, [r4, #0]
 80150f6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	463a      	mov	r2, r7
 80150fe:	464b      	mov	r3, r9
 8015100:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8015104:	4628      	mov	r0, r5
 8015106:	f7ff feed 	bl	8014ee4 <__cvt>
 801510a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 801510e:	2b47      	cmp	r3, #71	; 0x47
 8015110:	4607      	mov	r7, r0
 8015112:	d109      	bne.n	8015128 <_printf_float+0x120>
 8015114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015116:	1cd8      	adds	r0, r3, #3
 8015118:	db02      	blt.n	8015120 <_printf_float+0x118>
 801511a:	6862      	ldr	r2, [r4, #4]
 801511c:	4293      	cmp	r3, r2
 801511e:	dd47      	ble.n	80151b0 <_printf_float+0x1a8>
 8015120:	f1a8 0802 	sub.w	r8, r8, #2
 8015124:	fa5f f888 	uxtb.w	r8, r8
 8015128:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801512c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801512e:	d824      	bhi.n	801517a <_printf_float+0x172>
 8015130:	3901      	subs	r1, #1
 8015132:	4642      	mov	r2, r8
 8015134:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015138:	910d      	str	r1, [sp, #52]	; 0x34
 801513a:	f7ff ff2f 	bl	8014f9c <__exponent>
 801513e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015140:	4681      	mov	r9, r0
 8015142:	1813      	adds	r3, r2, r0
 8015144:	2a01      	cmp	r2, #1
 8015146:	6123      	str	r3, [r4, #16]
 8015148:	dc02      	bgt.n	8015150 <_printf_float+0x148>
 801514a:	6822      	ldr	r2, [r4, #0]
 801514c:	07d1      	lsls	r1, r2, #31
 801514e:	d501      	bpl.n	8015154 <_printf_float+0x14c>
 8015150:	3301      	adds	r3, #1
 8015152:	6123      	str	r3, [r4, #16]
 8015154:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8015158:	2b00      	cmp	r3, #0
 801515a:	d0a2      	beq.n	80150a2 <_printf_float+0x9a>
 801515c:	232d      	movs	r3, #45	; 0x2d
 801515e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015162:	e79e      	b.n	80150a2 <_printf_float+0x9a>
 8015164:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8015168:	f000 816e 	beq.w	8015448 <_printf_float+0x440>
 801516c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015170:	d1b9      	bne.n	80150e6 <_printf_float+0xde>
 8015172:	2b00      	cmp	r3, #0
 8015174:	d1b7      	bne.n	80150e6 <_printf_float+0xde>
 8015176:	2301      	movs	r3, #1
 8015178:	e7b4      	b.n	80150e4 <_printf_float+0xdc>
 801517a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 801517e:	d119      	bne.n	80151b4 <_printf_float+0x1ac>
 8015180:	2900      	cmp	r1, #0
 8015182:	6863      	ldr	r3, [r4, #4]
 8015184:	dd0c      	ble.n	80151a0 <_printf_float+0x198>
 8015186:	6121      	str	r1, [r4, #16]
 8015188:	b913      	cbnz	r3, 8015190 <_printf_float+0x188>
 801518a:	6822      	ldr	r2, [r4, #0]
 801518c:	07d2      	lsls	r2, r2, #31
 801518e:	d502      	bpl.n	8015196 <_printf_float+0x18e>
 8015190:	3301      	adds	r3, #1
 8015192:	440b      	add	r3, r1
 8015194:	6123      	str	r3, [r4, #16]
 8015196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015198:	f04f 0900 	mov.w	r9, #0
 801519c:	65a3      	str	r3, [r4, #88]	; 0x58
 801519e:	e7d9      	b.n	8015154 <_printf_float+0x14c>
 80151a0:	b913      	cbnz	r3, 80151a8 <_printf_float+0x1a0>
 80151a2:	6822      	ldr	r2, [r4, #0]
 80151a4:	07d0      	lsls	r0, r2, #31
 80151a6:	d501      	bpl.n	80151ac <_printf_float+0x1a4>
 80151a8:	3302      	adds	r3, #2
 80151aa:	e7f3      	b.n	8015194 <_printf_float+0x18c>
 80151ac:	2301      	movs	r3, #1
 80151ae:	e7f1      	b.n	8015194 <_printf_float+0x18c>
 80151b0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80151b4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80151b8:	4293      	cmp	r3, r2
 80151ba:	db05      	blt.n	80151c8 <_printf_float+0x1c0>
 80151bc:	6822      	ldr	r2, [r4, #0]
 80151be:	6123      	str	r3, [r4, #16]
 80151c0:	07d1      	lsls	r1, r2, #31
 80151c2:	d5e8      	bpl.n	8015196 <_printf_float+0x18e>
 80151c4:	3301      	adds	r3, #1
 80151c6:	e7e5      	b.n	8015194 <_printf_float+0x18c>
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	bfcc      	ite	gt
 80151cc:	2301      	movgt	r3, #1
 80151ce:	f1c3 0302 	rsble	r3, r3, #2
 80151d2:	4413      	add	r3, r2
 80151d4:	e7de      	b.n	8015194 <_printf_float+0x18c>
 80151d6:	6823      	ldr	r3, [r4, #0]
 80151d8:	055a      	lsls	r2, r3, #21
 80151da:	d407      	bmi.n	80151ec <_printf_float+0x1e4>
 80151dc:	6923      	ldr	r3, [r4, #16]
 80151de:	463a      	mov	r2, r7
 80151e0:	4659      	mov	r1, fp
 80151e2:	4628      	mov	r0, r5
 80151e4:	47b0      	blx	r6
 80151e6:	3001      	adds	r0, #1
 80151e8:	d129      	bne.n	801523e <_printf_float+0x236>
 80151ea:	e764      	b.n	80150b6 <_printf_float+0xae>
 80151ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80151f0:	f240 80d7 	bls.w	80153a2 <_printf_float+0x39a>
 80151f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80151f8:	2200      	movs	r2, #0
 80151fa:	2300      	movs	r3, #0
 80151fc:	f7eb fbf6 	bl	80009ec <__aeabi_dcmpeq>
 8015200:	b388      	cbz	r0, 8015266 <_printf_float+0x25e>
 8015202:	2301      	movs	r3, #1
 8015204:	4a40      	ldr	r2, [pc, #256]	; (8015308 <_printf_float+0x300>)
 8015206:	4659      	mov	r1, fp
 8015208:	4628      	mov	r0, r5
 801520a:	47b0      	blx	r6
 801520c:	3001      	adds	r0, #1
 801520e:	f43f af52 	beq.w	80150b6 <_printf_float+0xae>
 8015212:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015216:	429a      	cmp	r2, r3
 8015218:	db02      	blt.n	8015220 <_printf_float+0x218>
 801521a:	6823      	ldr	r3, [r4, #0]
 801521c:	07d8      	lsls	r0, r3, #31
 801521e:	d50e      	bpl.n	801523e <_printf_float+0x236>
 8015220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015224:	4659      	mov	r1, fp
 8015226:	4628      	mov	r0, r5
 8015228:	47b0      	blx	r6
 801522a:	3001      	adds	r0, #1
 801522c:	f43f af43 	beq.w	80150b6 <_printf_float+0xae>
 8015230:	2700      	movs	r7, #0
 8015232:	f104 081a 	add.w	r8, r4, #26
 8015236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015238:	3b01      	subs	r3, #1
 801523a:	42bb      	cmp	r3, r7
 801523c:	dc09      	bgt.n	8015252 <_printf_float+0x24a>
 801523e:	6823      	ldr	r3, [r4, #0]
 8015240:	079f      	lsls	r7, r3, #30
 8015242:	f100 80fd 	bmi.w	8015440 <_printf_float+0x438>
 8015246:	68e0      	ldr	r0, [r4, #12]
 8015248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801524a:	4298      	cmp	r0, r3
 801524c:	bfb8      	it	lt
 801524e:	4618      	movlt	r0, r3
 8015250:	e733      	b.n	80150ba <_printf_float+0xb2>
 8015252:	2301      	movs	r3, #1
 8015254:	4642      	mov	r2, r8
 8015256:	4659      	mov	r1, fp
 8015258:	4628      	mov	r0, r5
 801525a:	47b0      	blx	r6
 801525c:	3001      	adds	r0, #1
 801525e:	f43f af2a 	beq.w	80150b6 <_printf_float+0xae>
 8015262:	3701      	adds	r7, #1
 8015264:	e7e7      	b.n	8015236 <_printf_float+0x22e>
 8015266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015268:	2b00      	cmp	r3, #0
 801526a:	dc2b      	bgt.n	80152c4 <_printf_float+0x2bc>
 801526c:	2301      	movs	r3, #1
 801526e:	4a26      	ldr	r2, [pc, #152]	; (8015308 <_printf_float+0x300>)
 8015270:	4659      	mov	r1, fp
 8015272:	4628      	mov	r0, r5
 8015274:	47b0      	blx	r6
 8015276:	3001      	adds	r0, #1
 8015278:	f43f af1d 	beq.w	80150b6 <_printf_float+0xae>
 801527c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801527e:	b923      	cbnz	r3, 801528a <_printf_float+0x282>
 8015280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015282:	b913      	cbnz	r3, 801528a <_printf_float+0x282>
 8015284:	6823      	ldr	r3, [r4, #0]
 8015286:	07d9      	lsls	r1, r3, #31
 8015288:	d5d9      	bpl.n	801523e <_printf_float+0x236>
 801528a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801528e:	4659      	mov	r1, fp
 8015290:	4628      	mov	r0, r5
 8015292:	47b0      	blx	r6
 8015294:	3001      	adds	r0, #1
 8015296:	f43f af0e 	beq.w	80150b6 <_printf_float+0xae>
 801529a:	f04f 0800 	mov.w	r8, #0
 801529e:	f104 091a 	add.w	r9, r4, #26
 80152a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152a4:	425b      	negs	r3, r3
 80152a6:	4543      	cmp	r3, r8
 80152a8:	dc01      	bgt.n	80152ae <_printf_float+0x2a6>
 80152aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152ac:	e797      	b.n	80151de <_printf_float+0x1d6>
 80152ae:	2301      	movs	r3, #1
 80152b0:	464a      	mov	r2, r9
 80152b2:	4659      	mov	r1, fp
 80152b4:	4628      	mov	r0, r5
 80152b6:	47b0      	blx	r6
 80152b8:	3001      	adds	r0, #1
 80152ba:	f43f aefc 	beq.w	80150b6 <_printf_float+0xae>
 80152be:	f108 0801 	add.w	r8, r8, #1
 80152c2:	e7ee      	b.n	80152a2 <_printf_float+0x29a>
 80152c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80152c8:	429a      	cmp	r2, r3
 80152ca:	bfa8      	it	ge
 80152cc:	461a      	movge	r2, r3
 80152ce:	2a00      	cmp	r2, #0
 80152d0:	4690      	mov	r8, r2
 80152d2:	dd07      	ble.n	80152e4 <_printf_float+0x2dc>
 80152d4:	4613      	mov	r3, r2
 80152d6:	4659      	mov	r1, fp
 80152d8:	463a      	mov	r2, r7
 80152da:	4628      	mov	r0, r5
 80152dc:	47b0      	blx	r6
 80152de:	3001      	adds	r0, #1
 80152e0:	f43f aee9 	beq.w	80150b6 <_printf_float+0xae>
 80152e4:	f104 031a 	add.w	r3, r4, #26
 80152e8:	f04f 0a00 	mov.w	sl, #0
 80152ec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80152f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80152f2:	e015      	b.n	8015320 <_printf_float+0x318>
 80152f4:	7fefffff 	.word	0x7fefffff
 80152f8:	0801e620 	.word	0x0801e620
 80152fc:	0801e61c 	.word	0x0801e61c
 8015300:	0801e628 	.word	0x0801e628
 8015304:	0801e624 	.word	0x0801e624
 8015308:	0801e84b 	.word	0x0801e84b
 801530c:	2301      	movs	r3, #1
 801530e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015310:	4659      	mov	r1, fp
 8015312:	4628      	mov	r0, r5
 8015314:	47b0      	blx	r6
 8015316:	3001      	adds	r0, #1
 8015318:	f43f aecd 	beq.w	80150b6 <_printf_float+0xae>
 801531c:	f10a 0a01 	add.w	sl, sl, #1
 8015320:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8015324:	eba9 0308 	sub.w	r3, r9, r8
 8015328:	4553      	cmp	r3, sl
 801532a:	dcef      	bgt.n	801530c <_printf_float+0x304>
 801532c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015330:	429a      	cmp	r2, r3
 8015332:	444f      	add	r7, r9
 8015334:	db14      	blt.n	8015360 <_printf_float+0x358>
 8015336:	6823      	ldr	r3, [r4, #0]
 8015338:	07da      	lsls	r2, r3, #31
 801533a:	d411      	bmi.n	8015360 <_printf_float+0x358>
 801533c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801533e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015340:	eba3 0209 	sub.w	r2, r3, r9
 8015344:	eba3 0901 	sub.w	r9, r3, r1
 8015348:	4591      	cmp	r9, r2
 801534a:	bfa8      	it	ge
 801534c:	4691      	movge	r9, r2
 801534e:	f1b9 0f00 	cmp.w	r9, #0
 8015352:	dc0d      	bgt.n	8015370 <_printf_float+0x368>
 8015354:	2700      	movs	r7, #0
 8015356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801535a:	f104 081a 	add.w	r8, r4, #26
 801535e:	e018      	b.n	8015392 <_printf_float+0x38a>
 8015360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015364:	4659      	mov	r1, fp
 8015366:	4628      	mov	r0, r5
 8015368:	47b0      	blx	r6
 801536a:	3001      	adds	r0, #1
 801536c:	d1e6      	bne.n	801533c <_printf_float+0x334>
 801536e:	e6a2      	b.n	80150b6 <_printf_float+0xae>
 8015370:	464b      	mov	r3, r9
 8015372:	463a      	mov	r2, r7
 8015374:	4659      	mov	r1, fp
 8015376:	4628      	mov	r0, r5
 8015378:	47b0      	blx	r6
 801537a:	3001      	adds	r0, #1
 801537c:	d1ea      	bne.n	8015354 <_printf_float+0x34c>
 801537e:	e69a      	b.n	80150b6 <_printf_float+0xae>
 8015380:	2301      	movs	r3, #1
 8015382:	4642      	mov	r2, r8
 8015384:	4659      	mov	r1, fp
 8015386:	4628      	mov	r0, r5
 8015388:	47b0      	blx	r6
 801538a:	3001      	adds	r0, #1
 801538c:	f43f ae93 	beq.w	80150b6 <_printf_float+0xae>
 8015390:	3701      	adds	r7, #1
 8015392:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8015396:	1a9b      	subs	r3, r3, r2
 8015398:	eba3 0309 	sub.w	r3, r3, r9
 801539c:	42bb      	cmp	r3, r7
 801539e:	dcef      	bgt.n	8015380 <_printf_float+0x378>
 80153a0:	e74d      	b.n	801523e <_printf_float+0x236>
 80153a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153a4:	2a01      	cmp	r2, #1
 80153a6:	dc01      	bgt.n	80153ac <_printf_float+0x3a4>
 80153a8:	07db      	lsls	r3, r3, #31
 80153aa:	d538      	bpl.n	801541e <_printf_float+0x416>
 80153ac:	2301      	movs	r3, #1
 80153ae:	463a      	mov	r2, r7
 80153b0:	4659      	mov	r1, fp
 80153b2:	4628      	mov	r0, r5
 80153b4:	47b0      	blx	r6
 80153b6:	3001      	adds	r0, #1
 80153b8:	f43f ae7d 	beq.w	80150b6 <_printf_float+0xae>
 80153bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153c0:	4659      	mov	r1, fp
 80153c2:	4628      	mov	r0, r5
 80153c4:	47b0      	blx	r6
 80153c6:	3001      	adds	r0, #1
 80153c8:	f107 0701 	add.w	r7, r7, #1
 80153cc:	f43f ae73 	beq.w	80150b6 <_printf_float+0xae>
 80153d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80153d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153d6:	2200      	movs	r2, #0
 80153d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80153dc:	2300      	movs	r3, #0
 80153de:	f7eb fb05 	bl	80009ec <__aeabi_dcmpeq>
 80153e2:	b9c0      	cbnz	r0, 8015416 <_printf_float+0x40e>
 80153e4:	4643      	mov	r3, r8
 80153e6:	463a      	mov	r2, r7
 80153e8:	4659      	mov	r1, fp
 80153ea:	4628      	mov	r0, r5
 80153ec:	47b0      	blx	r6
 80153ee:	3001      	adds	r0, #1
 80153f0:	d10d      	bne.n	801540e <_printf_float+0x406>
 80153f2:	e660      	b.n	80150b6 <_printf_float+0xae>
 80153f4:	2301      	movs	r3, #1
 80153f6:	4642      	mov	r2, r8
 80153f8:	4659      	mov	r1, fp
 80153fa:	4628      	mov	r0, r5
 80153fc:	47b0      	blx	r6
 80153fe:	3001      	adds	r0, #1
 8015400:	f43f ae59 	beq.w	80150b6 <_printf_float+0xae>
 8015404:	3701      	adds	r7, #1
 8015406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015408:	3b01      	subs	r3, #1
 801540a:	42bb      	cmp	r3, r7
 801540c:	dcf2      	bgt.n	80153f4 <_printf_float+0x3ec>
 801540e:	464b      	mov	r3, r9
 8015410:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015414:	e6e4      	b.n	80151e0 <_printf_float+0x1d8>
 8015416:	2700      	movs	r7, #0
 8015418:	f104 081a 	add.w	r8, r4, #26
 801541c:	e7f3      	b.n	8015406 <_printf_float+0x3fe>
 801541e:	2301      	movs	r3, #1
 8015420:	e7e1      	b.n	80153e6 <_printf_float+0x3de>
 8015422:	2301      	movs	r3, #1
 8015424:	4642      	mov	r2, r8
 8015426:	4659      	mov	r1, fp
 8015428:	4628      	mov	r0, r5
 801542a:	47b0      	blx	r6
 801542c:	3001      	adds	r0, #1
 801542e:	f43f ae42 	beq.w	80150b6 <_printf_float+0xae>
 8015432:	3701      	adds	r7, #1
 8015434:	68e3      	ldr	r3, [r4, #12]
 8015436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015438:	1a9b      	subs	r3, r3, r2
 801543a:	42bb      	cmp	r3, r7
 801543c:	dcf1      	bgt.n	8015422 <_printf_float+0x41a>
 801543e:	e702      	b.n	8015246 <_printf_float+0x23e>
 8015440:	2700      	movs	r7, #0
 8015442:	f104 0819 	add.w	r8, r4, #25
 8015446:	e7f5      	b.n	8015434 <_printf_float+0x42c>
 8015448:	2b00      	cmp	r3, #0
 801544a:	f43f ae94 	beq.w	8015176 <_printf_float+0x16e>
 801544e:	f04f 0c00 	mov.w	ip, #0
 8015452:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8015456:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 801545a:	6022      	str	r2, [r4, #0]
 801545c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8015460:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015464:	9300      	str	r3, [sp, #0]
 8015466:	463a      	mov	r2, r7
 8015468:	464b      	mov	r3, r9
 801546a:	4628      	mov	r0, r5
 801546c:	f7ff fd3a 	bl	8014ee4 <__cvt>
 8015470:	4607      	mov	r7, r0
 8015472:	e64f      	b.n	8015114 <_printf_float+0x10c>

08015474 <_printf_common>:
 8015474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015478:	4691      	mov	r9, r2
 801547a:	461f      	mov	r7, r3
 801547c:	688a      	ldr	r2, [r1, #8]
 801547e:	690b      	ldr	r3, [r1, #16]
 8015480:	4606      	mov	r6, r0
 8015482:	4293      	cmp	r3, r2
 8015484:	bfb8      	it	lt
 8015486:	4613      	movlt	r3, r2
 8015488:	f8c9 3000 	str.w	r3, [r9]
 801548c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015490:	460c      	mov	r4, r1
 8015492:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015496:	b112      	cbz	r2, 801549e <_printf_common+0x2a>
 8015498:	3301      	adds	r3, #1
 801549a:	f8c9 3000 	str.w	r3, [r9]
 801549e:	6823      	ldr	r3, [r4, #0]
 80154a0:	0699      	lsls	r1, r3, #26
 80154a2:	bf42      	ittt	mi
 80154a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80154a8:	3302      	addmi	r3, #2
 80154aa:	f8c9 3000 	strmi.w	r3, [r9]
 80154ae:	6825      	ldr	r5, [r4, #0]
 80154b0:	f015 0506 	ands.w	r5, r5, #6
 80154b4:	d107      	bne.n	80154c6 <_printf_common+0x52>
 80154b6:	f104 0a19 	add.w	sl, r4, #25
 80154ba:	68e3      	ldr	r3, [r4, #12]
 80154bc:	f8d9 2000 	ldr.w	r2, [r9]
 80154c0:	1a9b      	subs	r3, r3, r2
 80154c2:	42ab      	cmp	r3, r5
 80154c4:	dc29      	bgt.n	801551a <_printf_common+0xa6>
 80154c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80154ca:	6822      	ldr	r2, [r4, #0]
 80154cc:	3300      	adds	r3, #0
 80154ce:	bf18      	it	ne
 80154d0:	2301      	movne	r3, #1
 80154d2:	0692      	lsls	r2, r2, #26
 80154d4:	d42e      	bmi.n	8015534 <_printf_common+0xc0>
 80154d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80154da:	4639      	mov	r1, r7
 80154dc:	4630      	mov	r0, r6
 80154de:	47c0      	blx	r8
 80154e0:	3001      	adds	r0, #1
 80154e2:	d021      	beq.n	8015528 <_printf_common+0xb4>
 80154e4:	6823      	ldr	r3, [r4, #0]
 80154e6:	68e5      	ldr	r5, [r4, #12]
 80154e8:	f003 0306 	and.w	r3, r3, #6
 80154ec:	2b04      	cmp	r3, #4
 80154ee:	bf18      	it	ne
 80154f0:	2500      	movne	r5, #0
 80154f2:	f8d9 2000 	ldr.w	r2, [r9]
 80154f6:	f04f 0900 	mov.w	r9, #0
 80154fa:	bf08      	it	eq
 80154fc:	1aad      	subeq	r5, r5, r2
 80154fe:	68a3      	ldr	r3, [r4, #8]
 8015500:	6922      	ldr	r2, [r4, #16]
 8015502:	bf08      	it	eq
 8015504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015508:	4293      	cmp	r3, r2
 801550a:	bfc4      	itt	gt
 801550c:	1a9b      	subgt	r3, r3, r2
 801550e:	18ed      	addgt	r5, r5, r3
 8015510:	341a      	adds	r4, #26
 8015512:	454d      	cmp	r5, r9
 8015514:	d11a      	bne.n	801554c <_printf_common+0xd8>
 8015516:	2000      	movs	r0, #0
 8015518:	e008      	b.n	801552c <_printf_common+0xb8>
 801551a:	2301      	movs	r3, #1
 801551c:	4652      	mov	r2, sl
 801551e:	4639      	mov	r1, r7
 8015520:	4630      	mov	r0, r6
 8015522:	47c0      	blx	r8
 8015524:	3001      	adds	r0, #1
 8015526:	d103      	bne.n	8015530 <_printf_common+0xbc>
 8015528:	f04f 30ff 	mov.w	r0, #4294967295
 801552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015530:	3501      	adds	r5, #1
 8015532:	e7c2      	b.n	80154ba <_printf_common+0x46>
 8015534:	2030      	movs	r0, #48	; 0x30
 8015536:	18e1      	adds	r1, r4, r3
 8015538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801553c:	1c5a      	adds	r2, r3, #1
 801553e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015542:	4422      	add	r2, r4
 8015544:	3302      	adds	r3, #2
 8015546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801554a:	e7c4      	b.n	80154d6 <_printf_common+0x62>
 801554c:	2301      	movs	r3, #1
 801554e:	4622      	mov	r2, r4
 8015550:	4639      	mov	r1, r7
 8015552:	4630      	mov	r0, r6
 8015554:	47c0      	blx	r8
 8015556:	3001      	adds	r0, #1
 8015558:	d0e6      	beq.n	8015528 <_printf_common+0xb4>
 801555a:	f109 0901 	add.w	r9, r9, #1
 801555e:	e7d8      	b.n	8015512 <_printf_common+0x9e>

08015560 <_printf_i>:
 8015560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015568:	460c      	mov	r4, r1
 801556a:	7e09      	ldrb	r1, [r1, #24]
 801556c:	b085      	sub	sp, #20
 801556e:	296e      	cmp	r1, #110	; 0x6e
 8015570:	4617      	mov	r7, r2
 8015572:	4606      	mov	r6, r0
 8015574:	4698      	mov	r8, r3
 8015576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015578:	f000 80b3 	beq.w	80156e2 <_printf_i+0x182>
 801557c:	d822      	bhi.n	80155c4 <_printf_i+0x64>
 801557e:	2963      	cmp	r1, #99	; 0x63
 8015580:	d036      	beq.n	80155f0 <_printf_i+0x90>
 8015582:	d80a      	bhi.n	801559a <_printf_i+0x3a>
 8015584:	2900      	cmp	r1, #0
 8015586:	f000 80b9 	beq.w	80156fc <_printf_i+0x19c>
 801558a:	2958      	cmp	r1, #88	; 0x58
 801558c:	f000 8083 	beq.w	8015696 <_printf_i+0x136>
 8015590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015598:	e032      	b.n	8015600 <_printf_i+0xa0>
 801559a:	2964      	cmp	r1, #100	; 0x64
 801559c:	d001      	beq.n	80155a2 <_printf_i+0x42>
 801559e:	2969      	cmp	r1, #105	; 0x69
 80155a0:	d1f6      	bne.n	8015590 <_printf_i+0x30>
 80155a2:	6820      	ldr	r0, [r4, #0]
 80155a4:	6813      	ldr	r3, [r2, #0]
 80155a6:	0605      	lsls	r5, r0, #24
 80155a8:	f103 0104 	add.w	r1, r3, #4
 80155ac:	d52a      	bpl.n	8015604 <_printf_i+0xa4>
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	6011      	str	r1, [r2, #0]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	da03      	bge.n	80155be <_printf_i+0x5e>
 80155b6:	222d      	movs	r2, #45	; 0x2d
 80155b8:	425b      	negs	r3, r3
 80155ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80155be:	486f      	ldr	r0, [pc, #444]	; (801577c <_printf_i+0x21c>)
 80155c0:	220a      	movs	r2, #10
 80155c2:	e039      	b.n	8015638 <_printf_i+0xd8>
 80155c4:	2973      	cmp	r1, #115	; 0x73
 80155c6:	f000 809d 	beq.w	8015704 <_printf_i+0x1a4>
 80155ca:	d808      	bhi.n	80155de <_printf_i+0x7e>
 80155cc:	296f      	cmp	r1, #111	; 0x6f
 80155ce:	d020      	beq.n	8015612 <_printf_i+0xb2>
 80155d0:	2970      	cmp	r1, #112	; 0x70
 80155d2:	d1dd      	bne.n	8015590 <_printf_i+0x30>
 80155d4:	6823      	ldr	r3, [r4, #0]
 80155d6:	f043 0320 	orr.w	r3, r3, #32
 80155da:	6023      	str	r3, [r4, #0]
 80155dc:	e003      	b.n	80155e6 <_printf_i+0x86>
 80155de:	2975      	cmp	r1, #117	; 0x75
 80155e0:	d017      	beq.n	8015612 <_printf_i+0xb2>
 80155e2:	2978      	cmp	r1, #120	; 0x78
 80155e4:	d1d4      	bne.n	8015590 <_printf_i+0x30>
 80155e6:	2378      	movs	r3, #120	; 0x78
 80155e8:	4865      	ldr	r0, [pc, #404]	; (8015780 <_printf_i+0x220>)
 80155ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80155ee:	e055      	b.n	801569c <_printf_i+0x13c>
 80155f0:	6813      	ldr	r3, [r2, #0]
 80155f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155f6:	1d19      	adds	r1, r3, #4
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	6011      	str	r1, [r2, #0]
 80155fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015600:	2301      	movs	r3, #1
 8015602:	e08c      	b.n	801571e <_printf_i+0x1be>
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f010 0f40 	tst.w	r0, #64	; 0x40
 801560a:	6011      	str	r1, [r2, #0]
 801560c:	bf18      	it	ne
 801560e:	b21b      	sxthne	r3, r3
 8015610:	e7cf      	b.n	80155b2 <_printf_i+0x52>
 8015612:	6813      	ldr	r3, [r2, #0]
 8015614:	6825      	ldr	r5, [r4, #0]
 8015616:	1d18      	adds	r0, r3, #4
 8015618:	6010      	str	r0, [r2, #0]
 801561a:	0628      	lsls	r0, r5, #24
 801561c:	d501      	bpl.n	8015622 <_printf_i+0xc2>
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	e002      	b.n	8015628 <_printf_i+0xc8>
 8015622:	0668      	lsls	r0, r5, #25
 8015624:	d5fb      	bpl.n	801561e <_printf_i+0xbe>
 8015626:	881b      	ldrh	r3, [r3, #0]
 8015628:	296f      	cmp	r1, #111	; 0x6f
 801562a:	bf14      	ite	ne
 801562c:	220a      	movne	r2, #10
 801562e:	2208      	moveq	r2, #8
 8015630:	4852      	ldr	r0, [pc, #328]	; (801577c <_printf_i+0x21c>)
 8015632:	2100      	movs	r1, #0
 8015634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015638:	6865      	ldr	r5, [r4, #4]
 801563a:	2d00      	cmp	r5, #0
 801563c:	60a5      	str	r5, [r4, #8]
 801563e:	f2c0 8095 	blt.w	801576c <_printf_i+0x20c>
 8015642:	6821      	ldr	r1, [r4, #0]
 8015644:	f021 0104 	bic.w	r1, r1, #4
 8015648:	6021      	str	r1, [r4, #0]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d13d      	bne.n	80156ca <_printf_i+0x16a>
 801564e:	2d00      	cmp	r5, #0
 8015650:	f040 808e 	bne.w	8015770 <_printf_i+0x210>
 8015654:	4665      	mov	r5, ip
 8015656:	2a08      	cmp	r2, #8
 8015658:	d10b      	bne.n	8015672 <_printf_i+0x112>
 801565a:	6823      	ldr	r3, [r4, #0]
 801565c:	07db      	lsls	r3, r3, #31
 801565e:	d508      	bpl.n	8015672 <_printf_i+0x112>
 8015660:	6923      	ldr	r3, [r4, #16]
 8015662:	6862      	ldr	r2, [r4, #4]
 8015664:	429a      	cmp	r2, r3
 8015666:	bfde      	ittt	le
 8015668:	2330      	movle	r3, #48	; 0x30
 801566a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801566e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015672:	ebac 0305 	sub.w	r3, ip, r5
 8015676:	6123      	str	r3, [r4, #16]
 8015678:	f8cd 8000 	str.w	r8, [sp]
 801567c:	463b      	mov	r3, r7
 801567e:	aa03      	add	r2, sp, #12
 8015680:	4621      	mov	r1, r4
 8015682:	4630      	mov	r0, r6
 8015684:	f7ff fef6 	bl	8015474 <_printf_common>
 8015688:	3001      	adds	r0, #1
 801568a:	d14d      	bne.n	8015728 <_printf_i+0x1c8>
 801568c:	f04f 30ff 	mov.w	r0, #4294967295
 8015690:	b005      	add	sp, #20
 8015692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015696:	4839      	ldr	r0, [pc, #228]	; (801577c <_printf_i+0x21c>)
 8015698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801569c:	6813      	ldr	r3, [r2, #0]
 801569e:	6821      	ldr	r1, [r4, #0]
 80156a0:	1d1d      	adds	r5, r3, #4
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	6015      	str	r5, [r2, #0]
 80156a6:	060a      	lsls	r2, r1, #24
 80156a8:	d50b      	bpl.n	80156c2 <_printf_i+0x162>
 80156aa:	07ca      	lsls	r2, r1, #31
 80156ac:	bf44      	itt	mi
 80156ae:	f041 0120 	orrmi.w	r1, r1, #32
 80156b2:	6021      	strmi	r1, [r4, #0]
 80156b4:	b91b      	cbnz	r3, 80156be <_printf_i+0x15e>
 80156b6:	6822      	ldr	r2, [r4, #0]
 80156b8:	f022 0220 	bic.w	r2, r2, #32
 80156bc:	6022      	str	r2, [r4, #0]
 80156be:	2210      	movs	r2, #16
 80156c0:	e7b7      	b.n	8015632 <_printf_i+0xd2>
 80156c2:	064d      	lsls	r5, r1, #25
 80156c4:	bf48      	it	mi
 80156c6:	b29b      	uxthmi	r3, r3
 80156c8:	e7ef      	b.n	80156aa <_printf_i+0x14a>
 80156ca:	4665      	mov	r5, ip
 80156cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80156d0:	fb02 3311 	mls	r3, r2, r1, r3
 80156d4:	5cc3      	ldrb	r3, [r0, r3]
 80156d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80156da:	460b      	mov	r3, r1
 80156dc:	2900      	cmp	r1, #0
 80156de:	d1f5      	bne.n	80156cc <_printf_i+0x16c>
 80156e0:	e7b9      	b.n	8015656 <_printf_i+0xf6>
 80156e2:	6813      	ldr	r3, [r2, #0]
 80156e4:	6825      	ldr	r5, [r4, #0]
 80156e6:	1d18      	adds	r0, r3, #4
 80156e8:	6961      	ldr	r1, [r4, #20]
 80156ea:	6010      	str	r0, [r2, #0]
 80156ec:	0628      	lsls	r0, r5, #24
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	d501      	bpl.n	80156f6 <_printf_i+0x196>
 80156f2:	6019      	str	r1, [r3, #0]
 80156f4:	e002      	b.n	80156fc <_printf_i+0x19c>
 80156f6:	066a      	lsls	r2, r5, #25
 80156f8:	d5fb      	bpl.n	80156f2 <_printf_i+0x192>
 80156fa:	8019      	strh	r1, [r3, #0]
 80156fc:	2300      	movs	r3, #0
 80156fe:	4665      	mov	r5, ip
 8015700:	6123      	str	r3, [r4, #16]
 8015702:	e7b9      	b.n	8015678 <_printf_i+0x118>
 8015704:	6813      	ldr	r3, [r2, #0]
 8015706:	1d19      	adds	r1, r3, #4
 8015708:	6011      	str	r1, [r2, #0]
 801570a:	681d      	ldr	r5, [r3, #0]
 801570c:	6862      	ldr	r2, [r4, #4]
 801570e:	2100      	movs	r1, #0
 8015710:	4628      	mov	r0, r5
 8015712:	f002 fe95 	bl	8018440 <memchr>
 8015716:	b108      	cbz	r0, 801571c <_printf_i+0x1bc>
 8015718:	1b40      	subs	r0, r0, r5
 801571a:	6060      	str	r0, [r4, #4]
 801571c:	6863      	ldr	r3, [r4, #4]
 801571e:	6123      	str	r3, [r4, #16]
 8015720:	2300      	movs	r3, #0
 8015722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015726:	e7a7      	b.n	8015678 <_printf_i+0x118>
 8015728:	6923      	ldr	r3, [r4, #16]
 801572a:	462a      	mov	r2, r5
 801572c:	4639      	mov	r1, r7
 801572e:	4630      	mov	r0, r6
 8015730:	47c0      	blx	r8
 8015732:	3001      	adds	r0, #1
 8015734:	d0aa      	beq.n	801568c <_printf_i+0x12c>
 8015736:	6823      	ldr	r3, [r4, #0]
 8015738:	079b      	lsls	r3, r3, #30
 801573a:	d413      	bmi.n	8015764 <_printf_i+0x204>
 801573c:	68e0      	ldr	r0, [r4, #12]
 801573e:	9b03      	ldr	r3, [sp, #12]
 8015740:	4298      	cmp	r0, r3
 8015742:	bfb8      	it	lt
 8015744:	4618      	movlt	r0, r3
 8015746:	e7a3      	b.n	8015690 <_printf_i+0x130>
 8015748:	2301      	movs	r3, #1
 801574a:	464a      	mov	r2, r9
 801574c:	4639      	mov	r1, r7
 801574e:	4630      	mov	r0, r6
 8015750:	47c0      	blx	r8
 8015752:	3001      	adds	r0, #1
 8015754:	d09a      	beq.n	801568c <_printf_i+0x12c>
 8015756:	3501      	adds	r5, #1
 8015758:	68e3      	ldr	r3, [r4, #12]
 801575a:	9a03      	ldr	r2, [sp, #12]
 801575c:	1a9b      	subs	r3, r3, r2
 801575e:	42ab      	cmp	r3, r5
 8015760:	dcf2      	bgt.n	8015748 <_printf_i+0x1e8>
 8015762:	e7eb      	b.n	801573c <_printf_i+0x1dc>
 8015764:	2500      	movs	r5, #0
 8015766:	f104 0919 	add.w	r9, r4, #25
 801576a:	e7f5      	b.n	8015758 <_printf_i+0x1f8>
 801576c:	2b00      	cmp	r3, #0
 801576e:	d1ac      	bne.n	80156ca <_printf_i+0x16a>
 8015770:	7803      	ldrb	r3, [r0, #0]
 8015772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801577a:	e76c      	b.n	8015656 <_printf_i+0xf6>
 801577c:	0801e62c 	.word	0x0801e62c
 8015780:	0801e63d 	.word	0x0801e63d

08015784 <_scanf_float>:
 8015784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015788:	469a      	mov	sl, r3
 801578a:	688b      	ldr	r3, [r1, #8]
 801578c:	4616      	mov	r6, r2
 801578e:	1e5a      	subs	r2, r3, #1
 8015790:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015794:	bf88      	it	hi
 8015796:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801579a:	b087      	sub	sp, #28
 801579c:	bf85      	ittet	hi
 801579e:	189b      	addhi	r3, r3, r2
 80157a0:	9301      	strhi	r3, [sp, #4]
 80157a2:	2300      	movls	r3, #0
 80157a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80157a8:	4688      	mov	r8, r1
 80157aa:	f04f 0b00 	mov.w	fp, #0
 80157ae:	bf8c      	ite	hi
 80157b0:	608b      	strhi	r3, [r1, #8]
 80157b2:	9301      	strls	r3, [sp, #4]
 80157b4:	680b      	ldr	r3, [r1, #0]
 80157b6:	4607      	mov	r7, r0
 80157b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80157bc:	f848 3b1c 	str.w	r3, [r8], #28
 80157c0:	460c      	mov	r4, r1
 80157c2:	4645      	mov	r5, r8
 80157c4:	465a      	mov	r2, fp
 80157c6:	46d9      	mov	r9, fp
 80157c8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80157cc:	f8cd b008 	str.w	fp, [sp, #8]
 80157d0:	68a1      	ldr	r1, [r4, #8]
 80157d2:	b181      	cbz	r1, 80157f6 <_scanf_float+0x72>
 80157d4:	6833      	ldr	r3, [r6, #0]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	2b49      	cmp	r3, #73	; 0x49
 80157da:	d071      	beq.n	80158c0 <_scanf_float+0x13c>
 80157dc:	d84d      	bhi.n	801587a <_scanf_float+0xf6>
 80157de:	2b39      	cmp	r3, #57	; 0x39
 80157e0:	d840      	bhi.n	8015864 <_scanf_float+0xe0>
 80157e2:	2b31      	cmp	r3, #49	; 0x31
 80157e4:	f080 8088 	bcs.w	80158f8 <_scanf_float+0x174>
 80157e8:	2b2d      	cmp	r3, #45	; 0x2d
 80157ea:	f000 8090 	beq.w	801590e <_scanf_float+0x18a>
 80157ee:	d815      	bhi.n	801581c <_scanf_float+0x98>
 80157f0:	2b2b      	cmp	r3, #43	; 0x2b
 80157f2:	f000 808c 	beq.w	801590e <_scanf_float+0x18a>
 80157f6:	f1b9 0f00 	cmp.w	r9, #0
 80157fa:	d003      	beq.n	8015804 <_scanf_float+0x80>
 80157fc:	6823      	ldr	r3, [r4, #0]
 80157fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015802:	6023      	str	r3, [r4, #0]
 8015804:	3a01      	subs	r2, #1
 8015806:	2a01      	cmp	r2, #1
 8015808:	f200 80ea 	bhi.w	80159e0 <_scanf_float+0x25c>
 801580c:	4545      	cmp	r5, r8
 801580e:	f200 80dc 	bhi.w	80159ca <_scanf_float+0x246>
 8015812:	2601      	movs	r6, #1
 8015814:	4630      	mov	r0, r6
 8015816:	b007      	add	sp, #28
 8015818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801581c:	2b2e      	cmp	r3, #46	; 0x2e
 801581e:	f000 809f 	beq.w	8015960 <_scanf_float+0x1dc>
 8015822:	2b30      	cmp	r3, #48	; 0x30
 8015824:	d1e7      	bne.n	80157f6 <_scanf_float+0x72>
 8015826:	6820      	ldr	r0, [r4, #0]
 8015828:	f410 7f80 	tst.w	r0, #256	; 0x100
 801582c:	d064      	beq.n	80158f8 <_scanf_float+0x174>
 801582e:	9b01      	ldr	r3, [sp, #4]
 8015830:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015834:	6020      	str	r0, [r4, #0]
 8015836:	f109 0901 	add.w	r9, r9, #1
 801583a:	b11b      	cbz	r3, 8015844 <_scanf_float+0xc0>
 801583c:	3b01      	subs	r3, #1
 801583e:	3101      	adds	r1, #1
 8015840:	9301      	str	r3, [sp, #4]
 8015842:	60a1      	str	r1, [r4, #8]
 8015844:	68a3      	ldr	r3, [r4, #8]
 8015846:	3b01      	subs	r3, #1
 8015848:	60a3      	str	r3, [r4, #8]
 801584a:	6923      	ldr	r3, [r4, #16]
 801584c:	3301      	adds	r3, #1
 801584e:	6123      	str	r3, [r4, #16]
 8015850:	6873      	ldr	r3, [r6, #4]
 8015852:	3b01      	subs	r3, #1
 8015854:	2b00      	cmp	r3, #0
 8015856:	6073      	str	r3, [r6, #4]
 8015858:	f340 80ac 	ble.w	80159b4 <_scanf_float+0x230>
 801585c:	6833      	ldr	r3, [r6, #0]
 801585e:	3301      	adds	r3, #1
 8015860:	6033      	str	r3, [r6, #0]
 8015862:	e7b5      	b.n	80157d0 <_scanf_float+0x4c>
 8015864:	2b45      	cmp	r3, #69	; 0x45
 8015866:	f000 8085 	beq.w	8015974 <_scanf_float+0x1f0>
 801586a:	2b46      	cmp	r3, #70	; 0x46
 801586c:	d06a      	beq.n	8015944 <_scanf_float+0x1c0>
 801586e:	2b41      	cmp	r3, #65	; 0x41
 8015870:	d1c1      	bne.n	80157f6 <_scanf_float+0x72>
 8015872:	2a01      	cmp	r2, #1
 8015874:	d1bf      	bne.n	80157f6 <_scanf_float+0x72>
 8015876:	2202      	movs	r2, #2
 8015878:	e046      	b.n	8015908 <_scanf_float+0x184>
 801587a:	2b65      	cmp	r3, #101	; 0x65
 801587c:	d07a      	beq.n	8015974 <_scanf_float+0x1f0>
 801587e:	d818      	bhi.n	80158b2 <_scanf_float+0x12e>
 8015880:	2b54      	cmp	r3, #84	; 0x54
 8015882:	d066      	beq.n	8015952 <_scanf_float+0x1ce>
 8015884:	d811      	bhi.n	80158aa <_scanf_float+0x126>
 8015886:	2b4e      	cmp	r3, #78	; 0x4e
 8015888:	d1b5      	bne.n	80157f6 <_scanf_float+0x72>
 801588a:	2a00      	cmp	r2, #0
 801588c:	d146      	bne.n	801591c <_scanf_float+0x198>
 801588e:	f1b9 0f00 	cmp.w	r9, #0
 8015892:	d145      	bne.n	8015920 <_scanf_float+0x19c>
 8015894:	6821      	ldr	r1, [r4, #0]
 8015896:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801589a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801589e:	d13f      	bne.n	8015920 <_scanf_float+0x19c>
 80158a0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80158a4:	6021      	str	r1, [r4, #0]
 80158a6:	2201      	movs	r2, #1
 80158a8:	e02e      	b.n	8015908 <_scanf_float+0x184>
 80158aa:	2b59      	cmp	r3, #89	; 0x59
 80158ac:	d01e      	beq.n	80158ec <_scanf_float+0x168>
 80158ae:	2b61      	cmp	r3, #97	; 0x61
 80158b0:	e7de      	b.n	8015870 <_scanf_float+0xec>
 80158b2:	2b6e      	cmp	r3, #110	; 0x6e
 80158b4:	d0e9      	beq.n	801588a <_scanf_float+0x106>
 80158b6:	d815      	bhi.n	80158e4 <_scanf_float+0x160>
 80158b8:	2b66      	cmp	r3, #102	; 0x66
 80158ba:	d043      	beq.n	8015944 <_scanf_float+0x1c0>
 80158bc:	2b69      	cmp	r3, #105	; 0x69
 80158be:	d19a      	bne.n	80157f6 <_scanf_float+0x72>
 80158c0:	f1bb 0f00 	cmp.w	fp, #0
 80158c4:	d138      	bne.n	8015938 <_scanf_float+0x1b4>
 80158c6:	f1b9 0f00 	cmp.w	r9, #0
 80158ca:	d197      	bne.n	80157fc <_scanf_float+0x78>
 80158cc:	6821      	ldr	r1, [r4, #0]
 80158ce:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80158d2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80158d6:	d195      	bne.n	8015804 <_scanf_float+0x80>
 80158d8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80158dc:	6021      	str	r1, [r4, #0]
 80158de:	f04f 0b01 	mov.w	fp, #1
 80158e2:	e011      	b.n	8015908 <_scanf_float+0x184>
 80158e4:	2b74      	cmp	r3, #116	; 0x74
 80158e6:	d034      	beq.n	8015952 <_scanf_float+0x1ce>
 80158e8:	2b79      	cmp	r3, #121	; 0x79
 80158ea:	d184      	bne.n	80157f6 <_scanf_float+0x72>
 80158ec:	f1bb 0f07 	cmp.w	fp, #7
 80158f0:	d181      	bne.n	80157f6 <_scanf_float+0x72>
 80158f2:	f04f 0b08 	mov.w	fp, #8
 80158f6:	e007      	b.n	8015908 <_scanf_float+0x184>
 80158f8:	eb12 0f0b 	cmn.w	r2, fp
 80158fc:	f47f af7b 	bne.w	80157f6 <_scanf_float+0x72>
 8015900:	6821      	ldr	r1, [r4, #0]
 8015902:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015906:	6021      	str	r1, [r4, #0]
 8015908:	702b      	strb	r3, [r5, #0]
 801590a:	3501      	adds	r5, #1
 801590c:	e79a      	b.n	8015844 <_scanf_float+0xc0>
 801590e:	6821      	ldr	r1, [r4, #0]
 8015910:	0608      	lsls	r0, r1, #24
 8015912:	f57f af70 	bpl.w	80157f6 <_scanf_float+0x72>
 8015916:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801591a:	e7f4      	b.n	8015906 <_scanf_float+0x182>
 801591c:	2a02      	cmp	r2, #2
 801591e:	d047      	beq.n	80159b0 <_scanf_float+0x22c>
 8015920:	f1bb 0f01 	cmp.w	fp, #1
 8015924:	d003      	beq.n	801592e <_scanf_float+0x1aa>
 8015926:	f1bb 0f04 	cmp.w	fp, #4
 801592a:	f47f af64 	bne.w	80157f6 <_scanf_float+0x72>
 801592e:	f10b 0b01 	add.w	fp, fp, #1
 8015932:	fa5f fb8b 	uxtb.w	fp, fp
 8015936:	e7e7      	b.n	8015908 <_scanf_float+0x184>
 8015938:	f1bb 0f03 	cmp.w	fp, #3
 801593c:	d0f7      	beq.n	801592e <_scanf_float+0x1aa>
 801593e:	f1bb 0f05 	cmp.w	fp, #5
 8015942:	e7f2      	b.n	801592a <_scanf_float+0x1a6>
 8015944:	f1bb 0f02 	cmp.w	fp, #2
 8015948:	f47f af55 	bne.w	80157f6 <_scanf_float+0x72>
 801594c:	f04f 0b03 	mov.w	fp, #3
 8015950:	e7da      	b.n	8015908 <_scanf_float+0x184>
 8015952:	f1bb 0f06 	cmp.w	fp, #6
 8015956:	f47f af4e 	bne.w	80157f6 <_scanf_float+0x72>
 801595a:	f04f 0b07 	mov.w	fp, #7
 801595e:	e7d3      	b.n	8015908 <_scanf_float+0x184>
 8015960:	6821      	ldr	r1, [r4, #0]
 8015962:	0588      	lsls	r0, r1, #22
 8015964:	f57f af47 	bpl.w	80157f6 <_scanf_float+0x72>
 8015968:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801596c:	6021      	str	r1, [r4, #0]
 801596e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015972:	e7c9      	b.n	8015908 <_scanf_float+0x184>
 8015974:	6821      	ldr	r1, [r4, #0]
 8015976:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801597a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801597e:	d006      	beq.n	801598e <_scanf_float+0x20a>
 8015980:	0548      	lsls	r0, r1, #21
 8015982:	f57f af38 	bpl.w	80157f6 <_scanf_float+0x72>
 8015986:	f1b9 0f00 	cmp.w	r9, #0
 801598a:	f43f af3b 	beq.w	8015804 <_scanf_float+0x80>
 801598e:	0588      	lsls	r0, r1, #22
 8015990:	bf58      	it	pl
 8015992:	9802      	ldrpl	r0, [sp, #8]
 8015994:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015998:	bf58      	it	pl
 801599a:	eba9 0000 	subpl.w	r0, r9, r0
 801599e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80159a2:	bf58      	it	pl
 80159a4:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80159a8:	6021      	str	r1, [r4, #0]
 80159aa:	f04f 0900 	mov.w	r9, #0
 80159ae:	e7ab      	b.n	8015908 <_scanf_float+0x184>
 80159b0:	2203      	movs	r2, #3
 80159b2:	e7a9      	b.n	8015908 <_scanf_float+0x184>
 80159b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80159b8:	4631      	mov	r1, r6
 80159ba:	4638      	mov	r0, r7
 80159bc:	9205      	str	r2, [sp, #20]
 80159be:	4798      	blx	r3
 80159c0:	9a05      	ldr	r2, [sp, #20]
 80159c2:	2800      	cmp	r0, #0
 80159c4:	f43f af04 	beq.w	80157d0 <_scanf_float+0x4c>
 80159c8:	e715      	b.n	80157f6 <_scanf_float+0x72>
 80159ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80159ce:	4632      	mov	r2, r6
 80159d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80159d4:	4638      	mov	r0, r7
 80159d6:	4798      	blx	r3
 80159d8:	6923      	ldr	r3, [r4, #16]
 80159da:	3b01      	subs	r3, #1
 80159dc:	6123      	str	r3, [r4, #16]
 80159de:	e715      	b.n	801580c <_scanf_float+0x88>
 80159e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80159e4:	2b06      	cmp	r3, #6
 80159e6:	d80a      	bhi.n	80159fe <_scanf_float+0x27a>
 80159e8:	f1bb 0f02 	cmp.w	fp, #2
 80159ec:	d967      	bls.n	8015abe <_scanf_float+0x33a>
 80159ee:	f1ab 0b03 	sub.w	fp, fp, #3
 80159f2:	fa5f fb8b 	uxtb.w	fp, fp
 80159f6:	eba5 0b0b 	sub.w	fp, r5, fp
 80159fa:	455d      	cmp	r5, fp
 80159fc:	d14a      	bne.n	8015a94 <_scanf_float+0x310>
 80159fe:	6823      	ldr	r3, [r4, #0]
 8015a00:	05da      	lsls	r2, r3, #23
 8015a02:	d51f      	bpl.n	8015a44 <_scanf_float+0x2c0>
 8015a04:	055b      	lsls	r3, r3, #21
 8015a06:	d467      	bmi.n	8015ad8 <_scanf_float+0x354>
 8015a08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015a0c:	6923      	ldr	r3, [r4, #16]
 8015a0e:	2965      	cmp	r1, #101	; 0x65
 8015a10:	f103 33ff 	add.w	r3, r3, #4294967295
 8015a14:	f105 3bff 	add.w	fp, r5, #4294967295
 8015a18:	6123      	str	r3, [r4, #16]
 8015a1a:	d00d      	beq.n	8015a38 <_scanf_float+0x2b4>
 8015a1c:	2945      	cmp	r1, #69	; 0x45
 8015a1e:	d00b      	beq.n	8015a38 <_scanf_float+0x2b4>
 8015a20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a24:	4632      	mov	r2, r6
 8015a26:	4638      	mov	r0, r7
 8015a28:	4798      	blx	r3
 8015a2a:	6923      	ldr	r3, [r4, #16]
 8015a2c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015a30:	3b01      	subs	r3, #1
 8015a32:	f1a5 0b02 	sub.w	fp, r5, #2
 8015a36:	6123      	str	r3, [r4, #16]
 8015a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a3c:	4632      	mov	r2, r6
 8015a3e:	4638      	mov	r0, r7
 8015a40:	4798      	blx	r3
 8015a42:	465d      	mov	r5, fp
 8015a44:	6826      	ldr	r6, [r4, #0]
 8015a46:	f016 0610 	ands.w	r6, r6, #16
 8015a4a:	d176      	bne.n	8015b3a <_scanf_float+0x3b6>
 8015a4c:	702e      	strb	r6, [r5, #0]
 8015a4e:	6823      	ldr	r3, [r4, #0]
 8015a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015a58:	d141      	bne.n	8015ade <_scanf_float+0x35a>
 8015a5a:	9b02      	ldr	r3, [sp, #8]
 8015a5c:	eba9 0303 	sub.w	r3, r9, r3
 8015a60:	425a      	negs	r2, r3
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d148      	bne.n	8015af8 <_scanf_float+0x374>
 8015a66:	4641      	mov	r1, r8
 8015a68:	2200      	movs	r2, #0
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	f000 ffd0 	bl	8016a10 <_strtod_r>
 8015a70:	6825      	ldr	r5, [r4, #0]
 8015a72:	4680      	mov	r8, r0
 8015a74:	f015 0f02 	tst.w	r5, #2
 8015a78:	4689      	mov	r9, r1
 8015a7a:	f8da 3000 	ldr.w	r3, [sl]
 8015a7e:	d046      	beq.n	8015b0e <_scanf_float+0x38a>
 8015a80:	1d1a      	adds	r2, r3, #4
 8015a82:	f8ca 2000 	str.w	r2, [sl]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	e9c3 8900 	strd	r8, r9, [r3]
 8015a8c:	68e3      	ldr	r3, [r4, #12]
 8015a8e:	3301      	adds	r3, #1
 8015a90:	60e3      	str	r3, [r4, #12]
 8015a92:	e6bf      	b.n	8015814 <_scanf_float+0x90>
 8015a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015a98:	4632      	mov	r2, r6
 8015a9a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015a9e:	4638      	mov	r0, r7
 8015aa0:	4798      	blx	r3
 8015aa2:	6923      	ldr	r3, [r4, #16]
 8015aa4:	3b01      	subs	r3, #1
 8015aa6:	6123      	str	r3, [r4, #16]
 8015aa8:	e7a7      	b.n	80159fa <_scanf_float+0x276>
 8015aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015aae:	4632      	mov	r2, r6
 8015ab0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ab4:	4638      	mov	r0, r7
 8015ab6:	4798      	blx	r3
 8015ab8:	6923      	ldr	r3, [r4, #16]
 8015aba:	3b01      	subs	r3, #1
 8015abc:	6123      	str	r3, [r4, #16]
 8015abe:	4545      	cmp	r5, r8
 8015ac0:	d8f3      	bhi.n	8015aaa <_scanf_float+0x326>
 8015ac2:	e6a6      	b.n	8015812 <_scanf_float+0x8e>
 8015ac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ac8:	4632      	mov	r2, r6
 8015aca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ace:	4638      	mov	r0, r7
 8015ad0:	4798      	blx	r3
 8015ad2:	6923      	ldr	r3, [r4, #16]
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	6123      	str	r3, [r4, #16]
 8015ad8:	4545      	cmp	r5, r8
 8015ada:	d8f3      	bhi.n	8015ac4 <_scanf_float+0x340>
 8015adc:	e699      	b.n	8015812 <_scanf_float+0x8e>
 8015ade:	9b03      	ldr	r3, [sp, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d0c0      	beq.n	8015a66 <_scanf_float+0x2e2>
 8015ae4:	9904      	ldr	r1, [sp, #16]
 8015ae6:	230a      	movs	r3, #10
 8015ae8:	4632      	mov	r2, r6
 8015aea:	3101      	adds	r1, #1
 8015aec:	4638      	mov	r0, r7
 8015aee:	f001 f81b 	bl	8016b28 <_strtol_r>
 8015af2:	9b03      	ldr	r3, [sp, #12]
 8015af4:	9d04      	ldr	r5, [sp, #16]
 8015af6:	1ac2      	subs	r2, r0, r3
 8015af8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015afc:	429d      	cmp	r5, r3
 8015afe:	bf28      	it	cs
 8015b00:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015b04:	490e      	ldr	r1, [pc, #56]	; (8015b40 <_scanf_float+0x3bc>)
 8015b06:	4628      	mov	r0, r5
 8015b08:	f000 f89c 	bl	8015c44 <siprintf>
 8015b0c:	e7ab      	b.n	8015a66 <_scanf_float+0x2e2>
 8015b0e:	1d1f      	adds	r7, r3, #4
 8015b10:	f015 0504 	ands.w	r5, r5, #4
 8015b14:	f8ca 7000 	str.w	r7, [sl]
 8015b18:	d1b5      	bne.n	8015a86 <_scanf_float+0x302>
 8015b1a:	681f      	ldr	r7, [r3, #0]
 8015b1c:	4602      	mov	r2, r0
 8015b1e:	460b      	mov	r3, r1
 8015b20:	f7ea ff96 	bl	8000a50 <__aeabi_dcmpun>
 8015b24:	b120      	cbz	r0, 8015b30 <_scanf_float+0x3ac>
 8015b26:	4628      	mov	r0, r5
 8015b28:	f000 f888 	bl	8015c3c <nanf>
 8015b2c:	6038      	str	r0, [r7, #0]
 8015b2e:	e7ad      	b.n	8015a8c <_scanf_float+0x308>
 8015b30:	4640      	mov	r0, r8
 8015b32:	4649      	mov	r1, r9
 8015b34:	f7ea ffea 	bl	8000b0c <__aeabi_d2f>
 8015b38:	e7f8      	b.n	8015b2c <_scanf_float+0x3a8>
 8015b3a:	2600      	movs	r6, #0
 8015b3c:	e66a      	b.n	8015814 <_scanf_float+0x90>
 8015b3e:	bf00      	nop
 8015b40:	0801e64e 	.word	0x0801e64e

08015b44 <iprintf>:
 8015b44:	b40f      	push	{r0, r1, r2, r3}
 8015b46:	4b0a      	ldr	r3, [pc, #40]	; (8015b70 <iprintf+0x2c>)
 8015b48:	b513      	push	{r0, r1, r4, lr}
 8015b4a:	681c      	ldr	r4, [r3, #0]
 8015b4c:	b124      	cbz	r4, 8015b58 <iprintf+0x14>
 8015b4e:	69a3      	ldr	r3, [r4, #24]
 8015b50:	b913      	cbnz	r3, 8015b58 <iprintf+0x14>
 8015b52:	4620      	mov	r0, r4
 8015b54:	f002 f810 	bl	8017b78 <__sinit>
 8015b58:	ab05      	add	r3, sp, #20
 8015b5a:	9a04      	ldr	r2, [sp, #16]
 8015b5c:	68a1      	ldr	r1, [r4, #8]
 8015b5e:	4620      	mov	r0, r4
 8015b60:	9301      	str	r3, [sp, #4]
 8015b62:	f003 fc4b 	bl	80193fc <_vfiprintf_r>
 8015b66:	b002      	add	sp, #8
 8015b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b6c:	b004      	add	sp, #16
 8015b6e:	4770      	bx	lr
 8015b70:	20000148 	.word	0x20000148

08015b74 <_puts_r>:
 8015b74:	b570      	push	{r4, r5, r6, lr}
 8015b76:	460e      	mov	r6, r1
 8015b78:	4605      	mov	r5, r0
 8015b7a:	b118      	cbz	r0, 8015b84 <_puts_r+0x10>
 8015b7c:	6983      	ldr	r3, [r0, #24]
 8015b7e:	b90b      	cbnz	r3, 8015b84 <_puts_r+0x10>
 8015b80:	f001 fffa 	bl	8017b78 <__sinit>
 8015b84:	69ab      	ldr	r3, [r5, #24]
 8015b86:	68ac      	ldr	r4, [r5, #8]
 8015b88:	b913      	cbnz	r3, 8015b90 <_puts_r+0x1c>
 8015b8a:	4628      	mov	r0, r5
 8015b8c:	f001 fff4 	bl	8017b78 <__sinit>
 8015b90:	4b23      	ldr	r3, [pc, #140]	; (8015c20 <_puts_r+0xac>)
 8015b92:	429c      	cmp	r4, r3
 8015b94:	d117      	bne.n	8015bc6 <_puts_r+0x52>
 8015b96:	686c      	ldr	r4, [r5, #4]
 8015b98:	89a3      	ldrh	r3, [r4, #12]
 8015b9a:	071b      	lsls	r3, r3, #28
 8015b9c:	d51d      	bpl.n	8015bda <_puts_r+0x66>
 8015b9e:	6923      	ldr	r3, [r4, #16]
 8015ba0:	b1db      	cbz	r3, 8015bda <_puts_r+0x66>
 8015ba2:	3e01      	subs	r6, #1
 8015ba4:	68a3      	ldr	r3, [r4, #8]
 8015ba6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015baa:	3b01      	subs	r3, #1
 8015bac:	60a3      	str	r3, [r4, #8]
 8015bae:	b9e9      	cbnz	r1, 8015bec <_puts_r+0x78>
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	da2e      	bge.n	8015c12 <_puts_r+0x9e>
 8015bb4:	4622      	mov	r2, r4
 8015bb6:	210a      	movs	r1, #10
 8015bb8:	4628      	mov	r0, r5
 8015bba:	f000 ffc7 	bl	8016b4c <__swbuf_r>
 8015bbe:	3001      	adds	r0, #1
 8015bc0:	d011      	beq.n	8015be6 <_puts_r+0x72>
 8015bc2:	200a      	movs	r0, #10
 8015bc4:	e011      	b.n	8015bea <_puts_r+0x76>
 8015bc6:	4b17      	ldr	r3, [pc, #92]	; (8015c24 <_puts_r+0xb0>)
 8015bc8:	429c      	cmp	r4, r3
 8015bca:	d101      	bne.n	8015bd0 <_puts_r+0x5c>
 8015bcc:	68ac      	ldr	r4, [r5, #8]
 8015bce:	e7e3      	b.n	8015b98 <_puts_r+0x24>
 8015bd0:	4b15      	ldr	r3, [pc, #84]	; (8015c28 <_puts_r+0xb4>)
 8015bd2:	429c      	cmp	r4, r3
 8015bd4:	bf08      	it	eq
 8015bd6:	68ec      	ldreq	r4, [r5, #12]
 8015bd8:	e7de      	b.n	8015b98 <_puts_r+0x24>
 8015bda:	4621      	mov	r1, r4
 8015bdc:	4628      	mov	r0, r5
 8015bde:	f001 f819 	bl	8016c14 <__swsetup_r>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d0dd      	beq.n	8015ba2 <_puts_r+0x2e>
 8015be6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bea:	bd70      	pop	{r4, r5, r6, pc}
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	da04      	bge.n	8015bfa <_puts_r+0x86>
 8015bf0:	69a2      	ldr	r2, [r4, #24]
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	dc06      	bgt.n	8015c04 <_puts_r+0x90>
 8015bf6:	290a      	cmp	r1, #10
 8015bf8:	d004      	beq.n	8015c04 <_puts_r+0x90>
 8015bfa:	6823      	ldr	r3, [r4, #0]
 8015bfc:	1c5a      	adds	r2, r3, #1
 8015bfe:	6022      	str	r2, [r4, #0]
 8015c00:	7019      	strb	r1, [r3, #0]
 8015c02:	e7cf      	b.n	8015ba4 <_puts_r+0x30>
 8015c04:	4622      	mov	r2, r4
 8015c06:	4628      	mov	r0, r5
 8015c08:	f000 ffa0 	bl	8016b4c <__swbuf_r>
 8015c0c:	3001      	adds	r0, #1
 8015c0e:	d1c9      	bne.n	8015ba4 <_puts_r+0x30>
 8015c10:	e7e9      	b.n	8015be6 <_puts_r+0x72>
 8015c12:	200a      	movs	r0, #10
 8015c14:	6823      	ldr	r3, [r4, #0]
 8015c16:	1c5a      	adds	r2, r3, #1
 8015c18:	6022      	str	r2, [r4, #0]
 8015c1a:	7018      	strb	r0, [r3, #0]
 8015c1c:	e7e5      	b.n	8015bea <_puts_r+0x76>
 8015c1e:	bf00      	nop
 8015c20:	0801e6d8 	.word	0x0801e6d8
 8015c24:	0801e6f8 	.word	0x0801e6f8
 8015c28:	0801e6b8 	.word	0x0801e6b8

08015c2c <puts>:
 8015c2c:	4b02      	ldr	r3, [pc, #8]	; (8015c38 <puts+0xc>)
 8015c2e:	4601      	mov	r1, r0
 8015c30:	6818      	ldr	r0, [r3, #0]
 8015c32:	f7ff bf9f 	b.w	8015b74 <_puts_r>
 8015c36:	bf00      	nop
 8015c38:	20000148 	.word	0x20000148

08015c3c <nanf>:
 8015c3c:	4800      	ldr	r0, [pc, #0]	; (8015c40 <nanf+0x4>)
 8015c3e:	4770      	bx	lr
 8015c40:	7fc00000 	.word	0x7fc00000

08015c44 <siprintf>:
 8015c44:	b40e      	push	{r1, r2, r3}
 8015c46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c4a:	b500      	push	{lr}
 8015c4c:	b09c      	sub	sp, #112	; 0x70
 8015c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8015c50:	9002      	str	r0, [sp, #8]
 8015c52:	9006      	str	r0, [sp, #24]
 8015c54:	9107      	str	r1, [sp, #28]
 8015c56:	9104      	str	r1, [sp, #16]
 8015c58:	4808      	ldr	r0, [pc, #32]	; (8015c7c <siprintf+0x38>)
 8015c5a:	4909      	ldr	r1, [pc, #36]	; (8015c80 <siprintf+0x3c>)
 8015c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c60:	9105      	str	r1, [sp, #20]
 8015c62:	6800      	ldr	r0, [r0, #0]
 8015c64:	a902      	add	r1, sp, #8
 8015c66:	9301      	str	r3, [sp, #4]
 8015c68:	f003 f8fe 	bl	8018e68 <_svfiprintf_r>
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	9b02      	ldr	r3, [sp, #8]
 8015c70:	701a      	strb	r2, [r3, #0]
 8015c72:	b01c      	add	sp, #112	; 0x70
 8015c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c78:	b003      	add	sp, #12
 8015c7a:	4770      	bx	lr
 8015c7c:	20000148 	.word	0x20000148
 8015c80:	ffff0208 	.word	0xffff0208

08015c84 <siscanf>:
 8015c84:	b40e      	push	{r1, r2, r3}
 8015c86:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015c8a:	b530      	push	{r4, r5, lr}
 8015c8c:	b09c      	sub	sp, #112	; 0x70
 8015c8e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015c90:	f854 5b04 	ldr.w	r5, [r4], #4
 8015c94:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015c98:	9002      	str	r0, [sp, #8]
 8015c9a:	9006      	str	r0, [sp, #24]
 8015c9c:	f7ea fa7a 	bl	8000194 <strlen>
 8015ca0:	4b0b      	ldr	r3, [pc, #44]	; (8015cd0 <siscanf+0x4c>)
 8015ca2:	9003      	str	r0, [sp, #12]
 8015ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015caa:	9314      	str	r3, [sp, #80]	; 0x50
 8015cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cb0:	9007      	str	r0, [sp, #28]
 8015cb2:	4808      	ldr	r0, [pc, #32]	; (8015cd4 <siscanf+0x50>)
 8015cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015cb8:	462a      	mov	r2, r5
 8015cba:	4623      	mov	r3, r4
 8015cbc:	a902      	add	r1, sp, #8
 8015cbe:	6800      	ldr	r0, [r0, #0]
 8015cc0:	9401      	str	r4, [sp, #4]
 8015cc2:	f003 fa23 	bl	801910c <__ssvfiscanf_r>
 8015cc6:	b01c      	add	sp, #112	; 0x70
 8015cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ccc:	b003      	add	sp, #12
 8015cce:	4770      	bx	lr
 8015cd0:	08015cfb 	.word	0x08015cfb
 8015cd4:	20000148 	.word	0x20000148

08015cd8 <__sread>:
 8015cd8:	b510      	push	{r4, lr}
 8015cda:	460c      	mov	r4, r1
 8015cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ce0:	f003 fdfa 	bl	80198d8 <_read_r>
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	bfab      	itete	ge
 8015ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015cea:	89a3      	ldrhlt	r3, [r4, #12]
 8015cec:	181b      	addge	r3, r3, r0
 8015cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015cf2:	bfac      	ite	ge
 8015cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015cf6:	81a3      	strhlt	r3, [r4, #12]
 8015cf8:	bd10      	pop	{r4, pc}

08015cfa <__seofread>:
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	4770      	bx	lr

08015cfe <__swrite>:
 8015cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d02:	461f      	mov	r7, r3
 8015d04:	898b      	ldrh	r3, [r1, #12]
 8015d06:	4605      	mov	r5, r0
 8015d08:	05db      	lsls	r3, r3, #23
 8015d0a:	460c      	mov	r4, r1
 8015d0c:	4616      	mov	r6, r2
 8015d0e:	d505      	bpl.n	8015d1c <__swrite+0x1e>
 8015d10:	2302      	movs	r3, #2
 8015d12:	2200      	movs	r2, #0
 8015d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d18:	f002 fb02 	bl	8018320 <_lseek_r>
 8015d1c:	89a3      	ldrh	r3, [r4, #12]
 8015d1e:	4632      	mov	r2, r6
 8015d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d24:	81a3      	strh	r3, [r4, #12]
 8015d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d2a:	463b      	mov	r3, r7
 8015d2c:	4628      	mov	r0, r5
 8015d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d32:	f000 bf5d 	b.w	8016bf0 <_write_r>

08015d36 <__sseek>:
 8015d36:	b510      	push	{r4, lr}
 8015d38:	460c      	mov	r4, r1
 8015d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d3e:	f002 faef 	bl	8018320 <_lseek_r>
 8015d42:	1c43      	adds	r3, r0, #1
 8015d44:	89a3      	ldrh	r3, [r4, #12]
 8015d46:	bf15      	itete	ne
 8015d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d52:	81a3      	strheq	r3, [r4, #12]
 8015d54:	bf18      	it	ne
 8015d56:	81a3      	strhne	r3, [r4, #12]
 8015d58:	bd10      	pop	{r4, pc}

08015d5a <__sclose>:
 8015d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d5e:	f000 bfc7 	b.w	8016cf0 <_close_r>

08015d62 <strcpy>:
 8015d62:	4603      	mov	r3, r0
 8015d64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d68:	f803 2b01 	strb.w	r2, [r3], #1
 8015d6c:	2a00      	cmp	r2, #0
 8015d6e:	d1f9      	bne.n	8015d64 <strcpy+0x2>
 8015d70:	4770      	bx	lr

08015d72 <strncmp>:
 8015d72:	b510      	push	{r4, lr}
 8015d74:	b16a      	cbz	r2, 8015d92 <strncmp+0x20>
 8015d76:	3901      	subs	r1, #1
 8015d78:	1884      	adds	r4, r0, r2
 8015d7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015d7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d103      	bne.n	8015d8e <strncmp+0x1c>
 8015d86:	42a0      	cmp	r0, r4
 8015d88:	d001      	beq.n	8015d8e <strncmp+0x1c>
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d1f5      	bne.n	8015d7a <strncmp+0x8>
 8015d8e:	1a98      	subs	r0, r3, r2
 8015d90:	bd10      	pop	{r4, pc}
 8015d92:	4610      	mov	r0, r2
 8015d94:	e7fc      	b.n	8015d90 <strncmp+0x1e>

08015d96 <strstr>:
 8015d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d98:	7803      	ldrb	r3, [r0, #0]
 8015d9a:	b17b      	cbz	r3, 8015dbc <strstr+0x26>
 8015d9c:	4604      	mov	r4, r0
 8015d9e:	7823      	ldrb	r3, [r4, #0]
 8015da0:	4620      	mov	r0, r4
 8015da2:	1c66      	adds	r6, r4, #1
 8015da4:	b17b      	cbz	r3, 8015dc6 <strstr+0x30>
 8015da6:	1e4a      	subs	r2, r1, #1
 8015da8:	1e63      	subs	r3, r4, #1
 8015daa:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8015dae:	b14d      	cbz	r5, 8015dc4 <strstr+0x2e>
 8015db0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015db4:	4634      	mov	r4, r6
 8015db6:	42af      	cmp	r7, r5
 8015db8:	d0f7      	beq.n	8015daa <strstr+0x14>
 8015dba:	e7f0      	b.n	8015d9e <strstr+0x8>
 8015dbc:	780b      	ldrb	r3, [r1, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	bf18      	it	ne
 8015dc2:	2000      	movne	r0, #0
 8015dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	e7fc      	b.n	8015dc4 <strstr+0x2e>

08015dca <sulp>:
 8015dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dce:	460f      	mov	r7, r1
 8015dd0:	4690      	mov	r8, r2
 8015dd2:	f002 fe0d 	bl	80189f0 <__ulp>
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	460d      	mov	r5, r1
 8015dda:	f1b8 0f00 	cmp.w	r8, #0
 8015dde:	d011      	beq.n	8015e04 <sulp+0x3a>
 8015de0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8015de4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	dd0b      	ble.n	8015e04 <sulp+0x3a>
 8015dec:	2400      	movs	r4, #0
 8015dee:	051b      	lsls	r3, r3, #20
 8015df0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015df4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015df8:	4622      	mov	r2, r4
 8015dfa:	462b      	mov	r3, r5
 8015dfc:	f7ea fb8e 	bl	800051c <__aeabi_dmul>
 8015e00:	4604      	mov	r4, r0
 8015e02:	460d      	mov	r5, r1
 8015e04:	4620      	mov	r0, r4
 8015e06:	4629      	mov	r1, r5
 8015e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e0c:	0000      	movs	r0, r0
	...

08015e10 <_strtod_l>:
 8015e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e14:	461f      	mov	r7, r3
 8015e16:	2300      	movs	r3, #0
 8015e18:	b0a1      	sub	sp, #132	; 0x84
 8015e1a:	4683      	mov	fp, r0
 8015e1c:	4638      	mov	r0, r7
 8015e1e:	460e      	mov	r6, r1
 8015e20:	9217      	str	r2, [sp, #92]	; 0x5c
 8015e22:	931c      	str	r3, [sp, #112]	; 0x70
 8015e24:	f002 fa6c 	bl	8018300 <__localeconv_l>
 8015e28:	4680      	mov	r8, r0
 8015e2a:	6800      	ldr	r0, [r0, #0]
 8015e2c:	f7ea f9b2 	bl	8000194 <strlen>
 8015e30:	f04f 0900 	mov.w	r9, #0
 8015e34:	4604      	mov	r4, r0
 8015e36:	f04f 0a00 	mov.w	sl, #0
 8015e3a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e3e:	781a      	ldrb	r2, [r3, #0]
 8015e40:	2a0d      	cmp	r2, #13
 8015e42:	d832      	bhi.n	8015eaa <_strtod_l+0x9a>
 8015e44:	2a09      	cmp	r2, #9
 8015e46:	d236      	bcs.n	8015eb6 <_strtod_l+0xa6>
 8015e48:	2a00      	cmp	r2, #0
 8015e4a:	d03e      	beq.n	8015eca <_strtod_l+0xba>
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8015e50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015e52:	782b      	ldrb	r3, [r5, #0]
 8015e54:	2b30      	cmp	r3, #48	; 0x30
 8015e56:	f040 80ac 	bne.w	8015fb2 <_strtod_l+0x1a2>
 8015e5a:	786b      	ldrb	r3, [r5, #1]
 8015e5c:	2b58      	cmp	r3, #88	; 0x58
 8015e5e:	d001      	beq.n	8015e64 <_strtod_l+0x54>
 8015e60:	2b78      	cmp	r3, #120	; 0x78
 8015e62:	d167      	bne.n	8015f34 <_strtod_l+0x124>
 8015e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e66:	9702      	str	r7, [sp, #8]
 8015e68:	9301      	str	r3, [sp, #4]
 8015e6a:	ab1c      	add	r3, sp, #112	; 0x70
 8015e6c:	9300      	str	r3, [sp, #0]
 8015e6e:	4a89      	ldr	r2, [pc, #548]	; (8016094 <_strtod_l+0x284>)
 8015e70:	ab1d      	add	r3, sp, #116	; 0x74
 8015e72:	a91b      	add	r1, sp, #108	; 0x6c
 8015e74:	4658      	mov	r0, fp
 8015e76:	f001 ff59 	bl	8017d2c <__gethex>
 8015e7a:	f010 0407 	ands.w	r4, r0, #7
 8015e7e:	4606      	mov	r6, r0
 8015e80:	d005      	beq.n	8015e8e <_strtod_l+0x7e>
 8015e82:	2c06      	cmp	r4, #6
 8015e84:	d12b      	bne.n	8015ede <_strtod_l+0xce>
 8015e86:	2300      	movs	r3, #0
 8015e88:	3501      	adds	r5, #1
 8015e8a:	951b      	str	r5, [sp, #108]	; 0x6c
 8015e8c:	930d      	str	r3, [sp, #52]	; 0x34
 8015e8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f040 85a6 	bne.w	80169e2 <_strtod_l+0xbd2>
 8015e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e98:	b1e3      	cbz	r3, 8015ed4 <_strtod_l+0xc4>
 8015e9a:	464a      	mov	r2, r9
 8015e9c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8015ea0:	4610      	mov	r0, r2
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	b021      	add	sp, #132	; 0x84
 8015ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eaa:	2a2b      	cmp	r2, #43	; 0x2b
 8015eac:	d015      	beq.n	8015eda <_strtod_l+0xca>
 8015eae:	2a2d      	cmp	r2, #45	; 0x2d
 8015eb0:	d004      	beq.n	8015ebc <_strtod_l+0xac>
 8015eb2:	2a20      	cmp	r2, #32
 8015eb4:	d1ca      	bne.n	8015e4c <_strtod_l+0x3c>
 8015eb6:	3301      	adds	r3, #1
 8015eb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8015eba:	e7bf      	b.n	8015e3c <_strtod_l+0x2c>
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	920d      	str	r2, [sp, #52]	; 0x34
 8015ec0:	1c5a      	adds	r2, r3, #1
 8015ec2:	921b      	str	r2, [sp, #108]	; 0x6c
 8015ec4:	785b      	ldrb	r3, [r3, #1]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d1c2      	bne.n	8015e50 <_strtod_l+0x40>
 8015eca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ecc:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	f040 8585 	bne.w	80169de <_strtod_l+0xbce>
 8015ed4:	464a      	mov	r2, r9
 8015ed6:	4653      	mov	r3, sl
 8015ed8:	e7e2      	b.n	8015ea0 <_strtod_l+0x90>
 8015eda:	2200      	movs	r2, #0
 8015edc:	e7ef      	b.n	8015ebe <_strtod_l+0xae>
 8015ede:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015ee0:	b13a      	cbz	r2, 8015ef2 <_strtod_l+0xe2>
 8015ee2:	2135      	movs	r1, #53	; 0x35
 8015ee4:	a81e      	add	r0, sp, #120	; 0x78
 8015ee6:	f002 fe76 	bl	8018bd6 <__copybits>
 8015eea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015eec:	4658      	mov	r0, fp
 8015eee:	f002 fae9 	bl	80184c4 <_Bfree>
 8015ef2:	3c01      	subs	r4, #1
 8015ef4:	2c04      	cmp	r4, #4
 8015ef6:	d806      	bhi.n	8015f06 <_strtod_l+0xf6>
 8015ef8:	e8df f004 	tbb	[pc, r4]
 8015efc:	1714030a 	.word	0x1714030a
 8015f00:	0a          	.byte	0x0a
 8015f01:	00          	.byte	0x00
 8015f02:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8015f06:	0731      	lsls	r1, r6, #28
 8015f08:	d5c1      	bpl.n	8015e8e <_strtod_l+0x7e>
 8015f0a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8015f0e:	e7be      	b.n	8015e8e <_strtod_l+0x7e>
 8015f10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015f12:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8015f16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f1e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8015f22:	e7f0      	b.n	8015f06 <_strtod_l+0xf6>
 8015f24:	f8df a170 	ldr.w	sl, [pc, #368]	; 8016098 <_strtod_l+0x288>
 8015f28:	e7ed      	b.n	8015f06 <_strtod_l+0xf6>
 8015f2a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8015f2e:	f04f 39ff 	mov.w	r9, #4294967295
 8015f32:	e7e8      	b.n	8015f06 <_strtod_l+0xf6>
 8015f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f36:	1c5a      	adds	r2, r3, #1
 8015f38:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f3a:	785b      	ldrb	r3, [r3, #1]
 8015f3c:	2b30      	cmp	r3, #48	; 0x30
 8015f3e:	d0f9      	beq.n	8015f34 <_strtod_l+0x124>
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d0a4      	beq.n	8015e8e <_strtod_l+0x7e>
 8015f44:	2301      	movs	r3, #1
 8015f46:	2500      	movs	r5, #0
 8015f48:	220a      	movs	r2, #10
 8015f4a:	9307      	str	r3, [sp, #28]
 8015f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f4e:	9506      	str	r5, [sp, #24]
 8015f50:	9308      	str	r3, [sp, #32]
 8015f52:	9504      	str	r5, [sp, #16]
 8015f54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015f56:	7807      	ldrb	r7, [r0, #0]
 8015f58:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015f5c:	b2d9      	uxtb	r1, r3
 8015f5e:	2909      	cmp	r1, #9
 8015f60:	d929      	bls.n	8015fb6 <_strtod_l+0x1a6>
 8015f62:	4622      	mov	r2, r4
 8015f64:	f8d8 1000 	ldr.w	r1, [r8]
 8015f68:	f7ff ff03 	bl	8015d72 <strncmp>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d031      	beq.n	8015fd4 <_strtod_l+0x1c4>
 8015f70:	2000      	movs	r0, #0
 8015f72:	463b      	mov	r3, r7
 8015f74:	4602      	mov	r2, r0
 8015f76:	9c04      	ldr	r4, [sp, #16]
 8015f78:	9005      	str	r0, [sp, #20]
 8015f7a:	2b65      	cmp	r3, #101	; 0x65
 8015f7c:	d001      	beq.n	8015f82 <_strtod_l+0x172>
 8015f7e:	2b45      	cmp	r3, #69	; 0x45
 8015f80:	d114      	bne.n	8015fac <_strtod_l+0x19c>
 8015f82:	b924      	cbnz	r4, 8015f8e <_strtod_l+0x17e>
 8015f84:	b910      	cbnz	r0, 8015f8c <_strtod_l+0x17c>
 8015f86:	9b07      	ldr	r3, [sp, #28]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d09e      	beq.n	8015eca <_strtod_l+0xba>
 8015f8c:	2400      	movs	r4, #0
 8015f8e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015f90:	1c73      	adds	r3, r6, #1
 8015f92:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f94:	7873      	ldrb	r3, [r6, #1]
 8015f96:	2b2b      	cmp	r3, #43	; 0x2b
 8015f98:	d078      	beq.n	801608c <_strtod_l+0x27c>
 8015f9a:	2b2d      	cmp	r3, #45	; 0x2d
 8015f9c:	d070      	beq.n	8016080 <_strtod_l+0x270>
 8015f9e:	f04f 0c00 	mov.w	ip, #0
 8015fa2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015fa6:	2f09      	cmp	r7, #9
 8015fa8:	d97c      	bls.n	80160a4 <_strtod_l+0x294>
 8015faa:	961b      	str	r6, [sp, #108]	; 0x6c
 8015fac:	f04f 0e00 	mov.w	lr, #0
 8015fb0:	e09a      	b.n	80160e8 <_strtod_l+0x2d8>
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	e7c7      	b.n	8015f46 <_strtod_l+0x136>
 8015fb6:	9904      	ldr	r1, [sp, #16]
 8015fb8:	3001      	adds	r0, #1
 8015fba:	2908      	cmp	r1, #8
 8015fbc:	bfd7      	itett	le
 8015fbe:	9906      	ldrle	r1, [sp, #24]
 8015fc0:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015fc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8015fc8:	9306      	strle	r3, [sp, #24]
 8015fca:	9b04      	ldr	r3, [sp, #16]
 8015fcc:	901b      	str	r0, [sp, #108]	; 0x6c
 8015fce:	3301      	adds	r3, #1
 8015fd0:	9304      	str	r3, [sp, #16]
 8015fd2:	e7bf      	b.n	8015f54 <_strtod_l+0x144>
 8015fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fd6:	191a      	adds	r2, r3, r4
 8015fd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8015fda:	9a04      	ldr	r2, [sp, #16]
 8015fdc:	5d1b      	ldrb	r3, [r3, r4]
 8015fde:	2a00      	cmp	r2, #0
 8015fe0:	d037      	beq.n	8016052 <_strtod_l+0x242>
 8015fe2:	4602      	mov	r2, r0
 8015fe4:	9c04      	ldr	r4, [sp, #16]
 8015fe6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015fea:	2909      	cmp	r1, #9
 8015fec:	d913      	bls.n	8016016 <_strtod_l+0x206>
 8015fee:	2101      	movs	r1, #1
 8015ff0:	9105      	str	r1, [sp, #20]
 8015ff2:	e7c2      	b.n	8015f7a <_strtod_l+0x16a>
 8015ff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ff6:	3001      	adds	r0, #1
 8015ff8:	1c5a      	adds	r2, r3, #1
 8015ffa:	921b      	str	r2, [sp, #108]	; 0x6c
 8015ffc:	785b      	ldrb	r3, [r3, #1]
 8015ffe:	2b30      	cmp	r3, #48	; 0x30
 8016000:	d0f8      	beq.n	8015ff4 <_strtod_l+0x1e4>
 8016002:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016006:	2a08      	cmp	r2, #8
 8016008:	f200 84f0 	bhi.w	80169ec <_strtod_l+0xbdc>
 801600c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801600e:	9208      	str	r2, [sp, #32]
 8016010:	4602      	mov	r2, r0
 8016012:	2000      	movs	r0, #0
 8016014:	4604      	mov	r4, r0
 8016016:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801601a:	f100 0101 	add.w	r1, r0, #1
 801601e:	d012      	beq.n	8016046 <_strtod_l+0x236>
 8016020:	440a      	add	r2, r1
 8016022:	270a      	movs	r7, #10
 8016024:	4621      	mov	r1, r4
 8016026:	eb00 0c04 	add.w	ip, r0, r4
 801602a:	458c      	cmp	ip, r1
 801602c:	d113      	bne.n	8016056 <_strtod_l+0x246>
 801602e:	1821      	adds	r1, r4, r0
 8016030:	2908      	cmp	r1, #8
 8016032:	f104 0401 	add.w	r4, r4, #1
 8016036:	4404      	add	r4, r0
 8016038:	dc19      	bgt.n	801606e <_strtod_l+0x25e>
 801603a:	210a      	movs	r1, #10
 801603c:	9b06      	ldr	r3, [sp, #24]
 801603e:	fb01 e303 	mla	r3, r1, r3, lr
 8016042:	9306      	str	r3, [sp, #24]
 8016044:	2100      	movs	r1, #0
 8016046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016048:	1c58      	adds	r0, r3, #1
 801604a:	901b      	str	r0, [sp, #108]	; 0x6c
 801604c:	785b      	ldrb	r3, [r3, #1]
 801604e:	4608      	mov	r0, r1
 8016050:	e7c9      	b.n	8015fe6 <_strtod_l+0x1d6>
 8016052:	9804      	ldr	r0, [sp, #16]
 8016054:	e7d3      	b.n	8015ffe <_strtod_l+0x1ee>
 8016056:	2908      	cmp	r1, #8
 8016058:	f101 0101 	add.w	r1, r1, #1
 801605c:	dc03      	bgt.n	8016066 <_strtod_l+0x256>
 801605e:	9b06      	ldr	r3, [sp, #24]
 8016060:	437b      	muls	r3, r7
 8016062:	9306      	str	r3, [sp, #24]
 8016064:	e7e1      	b.n	801602a <_strtod_l+0x21a>
 8016066:	2910      	cmp	r1, #16
 8016068:	bfd8      	it	le
 801606a:	437d      	mulle	r5, r7
 801606c:	e7dd      	b.n	801602a <_strtod_l+0x21a>
 801606e:	2c10      	cmp	r4, #16
 8016070:	bfdc      	itt	le
 8016072:	210a      	movle	r1, #10
 8016074:	fb01 e505 	mlale	r5, r1, r5, lr
 8016078:	e7e4      	b.n	8016044 <_strtod_l+0x234>
 801607a:	2301      	movs	r3, #1
 801607c:	9305      	str	r3, [sp, #20]
 801607e:	e781      	b.n	8015f84 <_strtod_l+0x174>
 8016080:	f04f 0c01 	mov.w	ip, #1
 8016084:	1cb3      	adds	r3, r6, #2
 8016086:	931b      	str	r3, [sp, #108]	; 0x6c
 8016088:	78b3      	ldrb	r3, [r6, #2]
 801608a:	e78a      	b.n	8015fa2 <_strtod_l+0x192>
 801608c:	f04f 0c00 	mov.w	ip, #0
 8016090:	e7f8      	b.n	8016084 <_strtod_l+0x274>
 8016092:	bf00      	nop
 8016094:	0801e654 	.word	0x0801e654
 8016098:	7ff00000 	.word	0x7ff00000
 801609c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801609e:	1c5f      	adds	r7, r3, #1
 80160a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80160a2:	785b      	ldrb	r3, [r3, #1]
 80160a4:	2b30      	cmp	r3, #48	; 0x30
 80160a6:	d0f9      	beq.n	801609c <_strtod_l+0x28c>
 80160a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80160ac:	2f08      	cmp	r7, #8
 80160ae:	f63f af7d 	bhi.w	8015fac <_strtod_l+0x19c>
 80160b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80160b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160b8:	9309      	str	r3, [sp, #36]	; 0x24
 80160ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160bc:	1c5f      	adds	r7, r3, #1
 80160be:	971b      	str	r7, [sp, #108]	; 0x6c
 80160c0:	785b      	ldrb	r3, [r3, #1]
 80160c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80160c6:	f1b8 0f09 	cmp.w	r8, #9
 80160ca:	d937      	bls.n	801613c <_strtod_l+0x32c>
 80160cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160ce:	1a7f      	subs	r7, r7, r1
 80160d0:	2f08      	cmp	r7, #8
 80160d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80160d6:	dc37      	bgt.n	8016148 <_strtod_l+0x338>
 80160d8:	45be      	cmp	lr, r7
 80160da:	bfa8      	it	ge
 80160dc:	46be      	movge	lr, r7
 80160de:	f1bc 0f00 	cmp.w	ip, #0
 80160e2:	d001      	beq.n	80160e8 <_strtod_l+0x2d8>
 80160e4:	f1ce 0e00 	rsb	lr, lr, #0
 80160e8:	2c00      	cmp	r4, #0
 80160ea:	d151      	bne.n	8016190 <_strtod_l+0x380>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	f47f aece 	bne.w	8015e8e <_strtod_l+0x7e>
 80160f2:	9a07      	ldr	r2, [sp, #28]
 80160f4:	2a00      	cmp	r2, #0
 80160f6:	f47f aeca 	bne.w	8015e8e <_strtod_l+0x7e>
 80160fa:	9a05      	ldr	r2, [sp, #20]
 80160fc:	2a00      	cmp	r2, #0
 80160fe:	f47f aee4 	bne.w	8015eca <_strtod_l+0xba>
 8016102:	2b4e      	cmp	r3, #78	; 0x4e
 8016104:	d027      	beq.n	8016156 <_strtod_l+0x346>
 8016106:	dc21      	bgt.n	801614c <_strtod_l+0x33c>
 8016108:	2b49      	cmp	r3, #73	; 0x49
 801610a:	f47f aede 	bne.w	8015eca <_strtod_l+0xba>
 801610e:	49a4      	ldr	r1, [pc, #656]	; (80163a0 <_strtod_l+0x590>)
 8016110:	a81b      	add	r0, sp, #108	; 0x6c
 8016112:	f002 f83f 	bl	8018194 <__match>
 8016116:	2800      	cmp	r0, #0
 8016118:	f43f aed7 	beq.w	8015eca <_strtod_l+0xba>
 801611c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801611e:	49a1      	ldr	r1, [pc, #644]	; (80163a4 <_strtod_l+0x594>)
 8016120:	3b01      	subs	r3, #1
 8016122:	a81b      	add	r0, sp, #108	; 0x6c
 8016124:	931b      	str	r3, [sp, #108]	; 0x6c
 8016126:	f002 f835 	bl	8018194 <__match>
 801612a:	b910      	cbnz	r0, 8016132 <_strtod_l+0x322>
 801612c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801612e:	3301      	adds	r3, #1
 8016130:	931b      	str	r3, [sp, #108]	; 0x6c
 8016132:	f8df a284 	ldr.w	sl, [pc, #644]	; 80163b8 <_strtod_l+0x5a8>
 8016136:	f04f 0900 	mov.w	r9, #0
 801613a:	e6a8      	b.n	8015e8e <_strtod_l+0x7e>
 801613c:	210a      	movs	r1, #10
 801613e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016142:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016146:	e7b8      	b.n	80160ba <_strtod_l+0x2aa>
 8016148:	46be      	mov	lr, r7
 801614a:	e7c8      	b.n	80160de <_strtod_l+0x2ce>
 801614c:	2b69      	cmp	r3, #105	; 0x69
 801614e:	d0de      	beq.n	801610e <_strtod_l+0x2fe>
 8016150:	2b6e      	cmp	r3, #110	; 0x6e
 8016152:	f47f aeba 	bne.w	8015eca <_strtod_l+0xba>
 8016156:	4994      	ldr	r1, [pc, #592]	; (80163a8 <_strtod_l+0x598>)
 8016158:	a81b      	add	r0, sp, #108	; 0x6c
 801615a:	f002 f81b 	bl	8018194 <__match>
 801615e:	2800      	cmp	r0, #0
 8016160:	f43f aeb3 	beq.w	8015eca <_strtod_l+0xba>
 8016164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	2b28      	cmp	r3, #40	; 0x28
 801616a:	d10e      	bne.n	801618a <_strtod_l+0x37a>
 801616c:	aa1e      	add	r2, sp, #120	; 0x78
 801616e:	498f      	ldr	r1, [pc, #572]	; (80163ac <_strtod_l+0x59c>)
 8016170:	a81b      	add	r0, sp, #108	; 0x6c
 8016172:	f002 f823 	bl	80181bc <__hexnan>
 8016176:	2805      	cmp	r0, #5
 8016178:	d107      	bne.n	801618a <_strtod_l+0x37a>
 801617a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801617c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8016180:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8016184:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8016188:	e681      	b.n	8015e8e <_strtod_l+0x7e>
 801618a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80163c0 <_strtod_l+0x5b0>
 801618e:	e7d2      	b.n	8016136 <_strtod_l+0x326>
 8016190:	ebae 0302 	sub.w	r3, lr, r2
 8016194:	9307      	str	r3, [sp, #28]
 8016196:	9b04      	ldr	r3, [sp, #16]
 8016198:	9806      	ldr	r0, [sp, #24]
 801619a:	2b00      	cmp	r3, #0
 801619c:	bf08      	it	eq
 801619e:	4623      	moveq	r3, r4
 80161a0:	2c10      	cmp	r4, #16
 80161a2:	9304      	str	r3, [sp, #16]
 80161a4:	46a0      	mov	r8, r4
 80161a6:	bfa8      	it	ge
 80161a8:	f04f 0810 	movge.w	r8, #16
 80161ac:	f7ea f93c 	bl	8000428 <__aeabi_ui2d>
 80161b0:	2c09      	cmp	r4, #9
 80161b2:	4681      	mov	r9, r0
 80161b4:	468a      	mov	sl, r1
 80161b6:	dc13      	bgt.n	80161e0 <_strtod_l+0x3d0>
 80161b8:	9b07      	ldr	r3, [sp, #28]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	f43f ae67 	beq.w	8015e8e <_strtod_l+0x7e>
 80161c0:	9b07      	ldr	r3, [sp, #28]
 80161c2:	dd7e      	ble.n	80162c2 <_strtod_l+0x4b2>
 80161c4:	2b16      	cmp	r3, #22
 80161c6:	dc65      	bgt.n	8016294 <_strtod_l+0x484>
 80161c8:	4a79      	ldr	r2, [pc, #484]	; (80163b0 <_strtod_l+0x5a0>)
 80161ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80161ce:	464a      	mov	r2, r9
 80161d0:	e9de 0100 	ldrd	r0, r1, [lr]
 80161d4:	4653      	mov	r3, sl
 80161d6:	f7ea f9a1 	bl	800051c <__aeabi_dmul>
 80161da:	4681      	mov	r9, r0
 80161dc:	468a      	mov	sl, r1
 80161de:	e656      	b.n	8015e8e <_strtod_l+0x7e>
 80161e0:	4b73      	ldr	r3, [pc, #460]	; (80163b0 <_strtod_l+0x5a0>)
 80161e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80161e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80161ea:	f7ea f997 	bl	800051c <__aeabi_dmul>
 80161ee:	4606      	mov	r6, r0
 80161f0:	4628      	mov	r0, r5
 80161f2:	460f      	mov	r7, r1
 80161f4:	f7ea f918 	bl	8000428 <__aeabi_ui2d>
 80161f8:	4602      	mov	r2, r0
 80161fa:	460b      	mov	r3, r1
 80161fc:	4630      	mov	r0, r6
 80161fe:	4639      	mov	r1, r7
 8016200:	f7e9 ffd6 	bl	80001b0 <__adddf3>
 8016204:	2c0f      	cmp	r4, #15
 8016206:	4681      	mov	r9, r0
 8016208:	468a      	mov	sl, r1
 801620a:	ddd5      	ble.n	80161b8 <_strtod_l+0x3a8>
 801620c:	9b07      	ldr	r3, [sp, #28]
 801620e:	eba4 0808 	sub.w	r8, r4, r8
 8016212:	4498      	add	r8, r3
 8016214:	f1b8 0f00 	cmp.w	r8, #0
 8016218:	f340 809a 	ble.w	8016350 <_strtod_l+0x540>
 801621c:	f018 030f 	ands.w	r3, r8, #15
 8016220:	d00a      	beq.n	8016238 <_strtod_l+0x428>
 8016222:	4963      	ldr	r1, [pc, #396]	; (80163b0 <_strtod_l+0x5a0>)
 8016224:	464a      	mov	r2, r9
 8016226:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801622a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801622e:	4653      	mov	r3, sl
 8016230:	f7ea f974 	bl	800051c <__aeabi_dmul>
 8016234:	4681      	mov	r9, r0
 8016236:	468a      	mov	sl, r1
 8016238:	f038 080f 	bics.w	r8, r8, #15
 801623c:	d077      	beq.n	801632e <_strtod_l+0x51e>
 801623e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016242:	dd4b      	ble.n	80162dc <_strtod_l+0x4cc>
 8016244:	f04f 0800 	mov.w	r8, #0
 8016248:	f8cd 8010 	str.w	r8, [sp, #16]
 801624c:	f8cd 8020 	str.w	r8, [sp, #32]
 8016250:	f8cd 8018 	str.w	r8, [sp, #24]
 8016254:	2322      	movs	r3, #34	; 0x22
 8016256:	f04f 0900 	mov.w	r9, #0
 801625a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80163b8 <_strtod_l+0x5a8>
 801625e:	f8cb 3000 	str.w	r3, [fp]
 8016262:	9b08      	ldr	r3, [sp, #32]
 8016264:	2b00      	cmp	r3, #0
 8016266:	f43f ae12 	beq.w	8015e8e <_strtod_l+0x7e>
 801626a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801626c:	4658      	mov	r0, fp
 801626e:	f002 f929 	bl	80184c4 <_Bfree>
 8016272:	9906      	ldr	r1, [sp, #24]
 8016274:	4658      	mov	r0, fp
 8016276:	f002 f925 	bl	80184c4 <_Bfree>
 801627a:	9904      	ldr	r1, [sp, #16]
 801627c:	4658      	mov	r0, fp
 801627e:	f002 f921 	bl	80184c4 <_Bfree>
 8016282:	9908      	ldr	r1, [sp, #32]
 8016284:	4658      	mov	r0, fp
 8016286:	f002 f91d 	bl	80184c4 <_Bfree>
 801628a:	4641      	mov	r1, r8
 801628c:	4658      	mov	r0, fp
 801628e:	f002 f919 	bl	80184c4 <_Bfree>
 8016292:	e5fc      	b.n	8015e8e <_strtod_l+0x7e>
 8016294:	9a07      	ldr	r2, [sp, #28]
 8016296:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801629a:	4293      	cmp	r3, r2
 801629c:	dbb6      	blt.n	801620c <_strtod_l+0x3fc>
 801629e:	4d44      	ldr	r5, [pc, #272]	; (80163b0 <_strtod_l+0x5a0>)
 80162a0:	f1c4 040f 	rsb	r4, r4, #15
 80162a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80162a8:	464a      	mov	r2, r9
 80162aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162ae:	4653      	mov	r3, sl
 80162b0:	f7ea f934 	bl	800051c <__aeabi_dmul>
 80162b4:	9b07      	ldr	r3, [sp, #28]
 80162b6:	1b1c      	subs	r4, r3, r4
 80162b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80162bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80162c0:	e789      	b.n	80161d6 <_strtod_l+0x3c6>
 80162c2:	f113 0f16 	cmn.w	r3, #22
 80162c6:	dba1      	blt.n	801620c <_strtod_l+0x3fc>
 80162c8:	4a39      	ldr	r2, [pc, #228]	; (80163b0 <_strtod_l+0x5a0>)
 80162ca:	4648      	mov	r0, r9
 80162cc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80162d0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80162d4:	4651      	mov	r1, sl
 80162d6:	f7ea fa4b 	bl	8000770 <__aeabi_ddiv>
 80162da:	e77e      	b.n	80161da <_strtod_l+0x3ca>
 80162dc:	2300      	movs	r3, #0
 80162de:	4648      	mov	r0, r9
 80162e0:	4651      	mov	r1, sl
 80162e2:	461d      	mov	r5, r3
 80162e4:	4e33      	ldr	r6, [pc, #204]	; (80163b4 <_strtod_l+0x5a4>)
 80162e6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80162ea:	f1b8 0f01 	cmp.w	r8, #1
 80162ee:	dc21      	bgt.n	8016334 <_strtod_l+0x524>
 80162f0:	b10b      	cbz	r3, 80162f6 <_strtod_l+0x4e6>
 80162f2:	4681      	mov	r9, r0
 80162f4:	468a      	mov	sl, r1
 80162f6:	4b2f      	ldr	r3, [pc, #188]	; (80163b4 <_strtod_l+0x5a4>)
 80162f8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80162fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016300:	464a      	mov	r2, r9
 8016302:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016306:	4653      	mov	r3, sl
 8016308:	f7ea f908 	bl	800051c <__aeabi_dmul>
 801630c:	4b2a      	ldr	r3, [pc, #168]	; (80163b8 <_strtod_l+0x5a8>)
 801630e:	460a      	mov	r2, r1
 8016310:	400b      	ands	r3, r1
 8016312:	492a      	ldr	r1, [pc, #168]	; (80163bc <_strtod_l+0x5ac>)
 8016314:	4681      	mov	r9, r0
 8016316:	428b      	cmp	r3, r1
 8016318:	d894      	bhi.n	8016244 <_strtod_l+0x434>
 801631a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801631e:	428b      	cmp	r3, r1
 8016320:	bf86      	itte	hi
 8016322:	f04f 39ff 	movhi.w	r9, #4294967295
 8016326:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80163c4 <_strtod_l+0x5b4>
 801632a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 801632e:	2300      	movs	r3, #0
 8016330:	9305      	str	r3, [sp, #20]
 8016332:	e07b      	b.n	801642c <_strtod_l+0x61c>
 8016334:	f018 0f01 	tst.w	r8, #1
 8016338:	d006      	beq.n	8016348 <_strtod_l+0x538>
 801633a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016342:	f7ea f8eb 	bl	800051c <__aeabi_dmul>
 8016346:	2301      	movs	r3, #1
 8016348:	3501      	adds	r5, #1
 801634a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801634e:	e7cc      	b.n	80162ea <_strtod_l+0x4da>
 8016350:	d0ed      	beq.n	801632e <_strtod_l+0x51e>
 8016352:	f1c8 0800 	rsb	r8, r8, #0
 8016356:	f018 020f 	ands.w	r2, r8, #15
 801635a:	d00a      	beq.n	8016372 <_strtod_l+0x562>
 801635c:	4b14      	ldr	r3, [pc, #80]	; (80163b0 <_strtod_l+0x5a0>)
 801635e:	4648      	mov	r0, r9
 8016360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016364:	4651      	mov	r1, sl
 8016366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801636a:	f7ea fa01 	bl	8000770 <__aeabi_ddiv>
 801636e:	4681      	mov	r9, r0
 8016370:	468a      	mov	sl, r1
 8016372:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016376:	d0da      	beq.n	801632e <_strtod_l+0x51e>
 8016378:	f1b8 0f1f 	cmp.w	r8, #31
 801637c:	dd24      	ble.n	80163c8 <_strtod_l+0x5b8>
 801637e:	f04f 0800 	mov.w	r8, #0
 8016382:	f8cd 8010 	str.w	r8, [sp, #16]
 8016386:	f8cd 8020 	str.w	r8, [sp, #32]
 801638a:	f8cd 8018 	str.w	r8, [sp, #24]
 801638e:	2322      	movs	r3, #34	; 0x22
 8016390:	f04f 0900 	mov.w	r9, #0
 8016394:	f04f 0a00 	mov.w	sl, #0
 8016398:	f8cb 3000 	str.w	r3, [fp]
 801639c:	e761      	b.n	8016262 <_strtod_l+0x452>
 801639e:	bf00      	nop
 80163a0:	0801e621 	.word	0x0801e621
 80163a4:	0801e6ab 	.word	0x0801e6ab
 80163a8:	0801e629 	.word	0x0801e629
 80163ac:	0801e668 	.word	0x0801e668
 80163b0:	0801e750 	.word	0x0801e750
 80163b4:	0801e728 	.word	0x0801e728
 80163b8:	7ff00000 	.word	0x7ff00000
 80163bc:	7ca00000 	.word	0x7ca00000
 80163c0:	fff80000 	.word	0xfff80000
 80163c4:	7fefffff 	.word	0x7fefffff
 80163c8:	f018 0310 	ands.w	r3, r8, #16
 80163cc:	bf18      	it	ne
 80163ce:	236a      	movne	r3, #106	; 0x6a
 80163d0:	4648      	mov	r0, r9
 80163d2:	9305      	str	r3, [sp, #20]
 80163d4:	4651      	mov	r1, sl
 80163d6:	2300      	movs	r3, #0
 80163d8:	4da1      	ldr	r5, [pc, #644]	; (8016660 <_strtod_l+0x850>)
 80163da:	f1b8 0f00 	cmp.w	r8, #0
 80163de:	f300 8113 	bgt.w	8016608 <_strtod_l+0x7f8>
 80163e2:	b10b      	cbz	r3, 80163e8 <_strtod_l+0x5d8>
 80163e4:	4681      	mov	r9, r0
 80163e6:	468a      	mov	sl, r1
 80163e8:	9b05      	ldr	r3, [sp, #20]
 80163ea:	b1bb      	cbz	r3, 801641c <_strtod_l+0x60c>
 80163ec:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80163f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	4651      	mov	r1, sl
 80163f8:	dd10      	ble.n	801641c <_strtod_l+0x60c>
 80163fa:	2b1f      	cmp	r3, #31
 80163fc:	f340 8110 	ble.w	8016620 <_strtod_l+0x810>
 8016400:	2b34      	cmp	r3, #52	; 0x34
 8016402:	bfd8      	it	le
 8016404:	f04f 32ff 	movle.w	r2, #4294967295
 8016408:	f04f 0900 	mov.w	r9, #0
 801640c:	bfcf      	iteee	gt
 801640e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8016412:	3b20      	suble	r3, #32
 8016414:	fa02 f303 	lslle.w	r3, r2, r3
 8016418:	ea03 0a01 	andle.w	sl, r3, r1
 801641c:	2200      	movs	r2, #0
 801641e:	2300      	movs	r3, #0
 8016420:	4648      	mov	r0, r9
 8016422:	4651      	mov	r1, sl
 8016424:	f7ea fae2 	bl	80009ec <__aeabi_dcmpeq>
 8016428:	2800      	cmp	r0, #0
 801642a:	d1a8      	bne.n	801637e <_strtod_l+0x56e>
 801642c:	9b06      	ldr	r3, [sp, #24]
 801642e:	9a04      	ldr	r2, [sp, #16]
 8016430:	9300      	str	r3, [sp, #0]
 8016432:	9908      	ldr	r1, [sp, #32]
 8016434:	4623      	mov	r3, r4
 8016436:	4658      	mov	r0, fp
 8016438:	f002 f896 	bl	8018568 <__s2b>
 801643c:	9008      	str	r0, [sp, #32]
 801643e:	2800      	cmp	r0, #0
 8016440:	f43f af00 	beq.w	8016244 <_strtod_l+0x434>
 8016444:	9a07      	ldr	r2, [sp, #28]
 8016446:	9b07      	ldr	r3, [sp, #28]
 8016448:	2a00      	cmp	r2, #0
 801644a:	f1c3 0300 	rsb	r3, r3, #0
 801644e:	bfa8      	it	ge
 8016450:	2300      	movge	r3, #0
 8016452:	f04f 0800 	mov.w	r8, #0
 8016456:	930e      	str	r3, [sp, #56]	; 0x38
 8016458:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801645c:	9316      	str	r3, [sp, #88]	; 0x58
 801645e:	f8cd 8010 	str.w	r8, [sp, #16]
 8016462:	9b08      	ldr	r3, [sp, #32]
 8016464:	4658      	mov	r0, fp
 8016466:	6859      	ldr	r1, [r3, #4]
 8016468:	f001 fff8 	bl	801845c <_Balloc>
 801646c:	9006      	str	r0, [sp, #24]
 801646e:	2800      	cmp	r0, #0
 8016470:	f43f aef0 	beq.w	8016254 <_strtod_l+0x444>
 8016474:	9b08      	ldr	r3, [sp, #32]
 8016476:	300c      	adds	r0, #12
 8016478:	691a      	ldr	r2, [r3, #16]
 801647a:	f103 010c 	add.w	r1, r3, #12
 801647e:	3202      	adds	r2, #2
 8016480:	0092      	lsls	r2, r2, #2
 8016482:	f7fe fd03 	bl	8014e8c <memcpy>
 8016486:	ab1e      	add	r3, sp, #120	; 0x78
 8016488:	9301      	str	r3, [sp, #4]
 801648a:	ab1d      	add	r3, sp, #116	; 0x74
 801648c:	9300      	str	r3, [sp, #0]
 801648e:	464a      	mov	r2, r9
 8016490:	4653      	mov	r3, sl
 8016492:	4658      	mov	r0, fp
 8016494:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8016498:	f002 fb20 	bl	8018adc <__d2b>
 801649c:	901c      	str	r0, [sp, #112]	; 0x70
 801649e:	2800      	cmp	r0, #0
 80164a0:	f43f aed8 	beq.w	8016254 <_strtod_l+0x444>
 80164a4:	2101      	movs	r1, #1
 80164a6:	4658      	mov	r0, fp
 80164a8:	f002 f8ea 	bl	8018680 <__i2b>
 80164ac:	9004      	str	r0, [sp, #16]
 80164ae:	4603      	mov	r3, r0
 80164b0:	2800      	cmp	r0, #0
 80164b2:	f43f aecf 	beq.w	8016254 <_strtod_l+0x444>
 80164b6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80164b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80164ba:	2d00      	cmp	r5, #0
 80164bc:	bfab      	itete	ge
 80164be:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80164c0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80164c2:	18ee      	addge	r6, r5, r3
 80164c4:	1b5c      	sublt	r4, r3, r5
 80164c6:	9b05      	ldr	r3, [sp, #20]
 80164c8:	bfa8      	it	ge
 80164ca:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80164cc:	eba5 0503 	sub.w	r5, r5, r3
 80164d0:	4415      	add	r5, r2
 80164d2:	4b64      	ldr	r3, [pc, #400]	; (8016664 <_strtod_l+0x854>)
 80164d4:	f105 35ff 	add.w	r5, r5, #4294967295
 80164d8:	bfb8      	it	lt
 80164da:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80164dc:	429d      	cmp	r5, r3
 80164de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80164e2:	f280 80af 	bge.w	8016644 <_strtod_l+0x834>
 80164e6:	1b5b      	subs	r3, r3, r5
 80164e8:	2b1f      	cmp	r3, #31
 80164ea:	eba2 0203 	sub.w	r2, r2, r3
 80164ee:	f04f 0701 	mov.w	r7, #1
 80164f2:	f300 809c 	bgt.w	801662e <_strtod_l+0x81e>
 80164f6:	2500      	movs	r5, #0
 80164f8:	fa07 f303 	lsl.w	r3, r7, r3
 80164fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80164fe:	18b7      	adds	r7, r6, r2
 8016500:	9b05      	ldr	r3, [sp, #20]
 8016502:	42be      	cmp	r6, r7
 8016504:	4414      	add	r4, r2
 8016506:	441c      	add	r4, r3
 8016508:	4633      	mov	r3, r6
 801650a:	bfa8      	it	ge
 801650c:	463b      	movge	r3, r7
 801650e:	42a3      	cmp	r3, r4
 8016510:	bfa8      	it	ge
 8016512:	4623      	movge	r3, r4
 8016514:	2b00      	cmp	r3, #0
 8016516:	bfc2      	ittt	gt
 8016518:	1aff      	subgt	r7, r7, r3
 801651a:	1ae4      	subgt	r4, r4, r3
 801651c:	1af6      	subgt	r6, r6, r3
 801651e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016520:	b1bb      	cbz	r3, 8016552 <_strtod_l+0x742>
 8016522:	461a      	mov	r2, r3
 8016524:	9904      	ldr	r1, [sp, #16]
 8016526:	4658      	mov	r0, fp
 8016528:	f002 f948 	bl	80187bc <__pow5mult>
 801652c:	9004      	str	r0, [sp, #16]
 801652e:	2800      	cmp	r0, #0
 8016530:	f43f ae90 	beq.w	8016254 <_strtod_l+0x444>
 8016534:	4601      	mov	r1, r0
 8016536:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016538:	4658      	mov	r0, fp
 801653a:	f002 f8aa 	bl	8018692 <__multiply>
 801653e:	9009      	str	r0, [sp, #36]	; 0x24
 8016540:	2800      	cmp	r0, #0
 8016542:	f43f ae87 	beq.w	8016254 <_strtod_l+0x444>
 8016546:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016548:	4658      	mov	r0, fp
 801654a:	f001 ffbb 	bl	80184c4 <_Bfree>
 801654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016550:	931c      	str	r3, [sp, #112]	; 0x70
 8016552:	2f00      	cmp	r7, #0
 8016554:	dc7a      	bgt.n	801664c <_strtod_l+0x83c>
 8016556:	9b07      	ldr	r3, [sp, #28]
 8016558:	2b00      	cmp	r3, #0
 801655a:	dd08      	ble.n	801656e <_strtod_l+0x75e>
 801655c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801655e:	9906      	ldr	r1, [sp, #24]
 8016560:	4658      	mov	r0, fp
 8016562:	f002 f92b 	bl	80187bc <__pow5mult>
 8016566:	9006      	str	r0, [sp, #24]
 8016568:	2800      	cmp	r0, #0
 801656a:	f43f ae73 	beq.w	8016254 <_strtod_l+0x444>
 801656e:	2c00      	cmp	r4, #0
 8016570:	dd08      	ble.n	8016584 <_strtod_l+0x774>
 8016572:	4622      	mov	r2, r4
 8016574:	9906      	ldr	r1, [sp, #24]
 8016576:	4658      	mov	r0, fp
 8016578:	f002 f96e 	bl	8018858 <__lshift>
 801657c:	9006      	str	r0, [sp, #24]
 801657e:	2800      	cmp	r0, #0
 8016580:	f43f ae68 	beq.w	8016254 <_strtod_l+0x444>
 8016584:	2e00      	cmp	r6, #0
 8016586:	dd08      	ble.n	801659a <_strtod_l+0x78a>
 8016588:	4632      	mov	r2, r6
 801658a:	9904      	ldr	r1, [sp, #16]
 801658c:	4658      	mov	r0, fp
 801658e:	f002 f963 	bl	8018858 <__lshift>
 8016592:	9004      	str	r0, [sp, #16]
 8016594:	2800      	cmp	r0, #0
 8016596:	f43f ae5d 	beq.w	8016254 <_strtod_l+0x444>
 801659a:	9a06      	ldr	r2, [sp, #24]
 801659c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801659e:	4658      	mov	r0, fp
 80165a0:	f002 f9c8 	bl	8018934 <__mdiff>
 80165a4:	4680      	mov	r8, r0
 80165a6:	2800      	cmp	r0, #0
 80165a8:	f43f ae54 	beq.w	8016254 <_strtod_l+0x444>
 80165ac:	2400      	movs	r4, #0
 80165ae:	68c3      	ldr	r3, [r0, #12]
 80165b0:	9904      	ldr	r1, [sp, #16]
 80165b2:	60c4      	str	r4, [r0, #12]
 80165b4:	930c      	str	r3, [sp, #48]	; 0x30
 80165b6:	f002 f9a3 	bl	8018900 <__mcmp>
 80165ba:	42a0      	cmp	r0, r4
 80165bc:	da54      	bge.n	8016668 <_strtod_l+0x858>
 80165be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165c0:	b9f3      	cbnz	r3, 8016600 <_strtod_l+0x7f0>
 80165c2:	f1b9 0f00 	cmp.w	r9, #0
 80165c6:	d11b      	bne.n	8016600 <_strtod_l+0x7f0>
 80165c8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80165cc:	b9c3      	cbnz	r3, 8016600 <_strtod_l+0x7f0>
 80165ce:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80165d2:	0d1b      	lsrs	r3, r3, #20
 80165d4:	051b      	lsls	r3, r3, #20
 80165d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80165da:	d911      	bls.n	8016600 <_strtod_l+0x7f0>
 80165dc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80165e0:	b91b      	cbnz	r3, 80165ea <_strtod_l+0x7da>
 80165e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80165e6:	2b01      	cmp	r3, #1
 80165e8:	dd0a      	ble.n	8016600 <_strtod_l+0x7f0>
 80165ea:	4641      	mov	r1, r8
 80165ec:	2201      	movs	r2, #1
 80165ee:	4658      	mov	r0, fp
 80165f0:	f002 f932 	bl	8018858 <__lshift>
 80165f4:	9904      	ldr	r1, [sp, #16]
 80165f6:	4680      	mov	r8, r0
 80165f8:	f002 f982 	bl	8018900 <__mcmp>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	dc68      	bgt.n	80166d2 <_strtod_l+0x8c2>
 8016600:	9b05      	ldr	r3, [sp, #20]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d172      	bne.n	80166ec <_strtod_l+0x8dc>
 8016606:	e630      	b.n	801626a <_strtod_l+0x45a>
 8016608:	f018 0f01 	tst.w	r8, #1
 801660c:	d004      	beq.n	8016618 <_strtod_l+0x808>
 801660e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016612:	f7e9 ff83 	bl	800051c <__aeabi_dmul>
 8016616:	2301      	movs	r3, #1
 8016618:	ea4f 0868 	mov.w	r8, r8, asr #1
 801661c:	3508      	adds	r5, #8
 801661e:	e6dc      	b.n	80163da <_strtod_l+0x5ca>
 8016620:	f04f 32ff 	mov.w	r2, #4294967295
 8016624:	fa02 f303 	lsl.w	r3, r2, r3
 8016628:	ea03 0909 	and.w	r9, r3, r9
 801662c:	e6f6      	b.n	801641c <_strtod_l+0x60c>
 801662e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8016632:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8016636:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801663a:	35e2      	adds	r5, #226	; 0xe2
 801663c:	fa07 f505 	lsl.w	r5, r7, r5
 8016640:	970f      	str	r7, [sp, #60]	; 0x3c
 8016642:	e75c      	b.n	80164fe <_strtod_l+0x6ee>
 8016644:	2301      	movs	r3, #1
 8016646:	2500      	movs	r5, #0
 8016648:	930f      	str	r3, [sp, #60]	; 0x3c
 801664a:	e758      	b.n	80164fe <_strtod_l+0x6ee>
 801664c:	463a      	mov	r2, r7
 801664e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016650:	4658      	mov	r0, fp
 8016652:	f002 f901 	bl	8018858 <__lshift>
 8016656:	901c      	str	r0, [sp, #112]	; 0x70
 8016658:	2800      	cmp	r0, #0
 801665a:	f47f af7c 	bne.w	8016556 <_strtod_l+0x746>
 801665e:	e5f9      	b.n	8016254 <_strtod_l+0x444>
 8016660:	0801e680 	.word	0x0801e680
 8016664:	fffffc02 	.word	0xfffffc02
 8016668:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801666c:	f040 8089 	bne.w	8016782 <_strtod_l+0x972>
 8016670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016672:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8016676:	b342      	cbz	r2, 80166ca <_strtod_l+0x8ba>
 8016678:	4aaf      	ldr	r2, [pc, #700]	; (8016938 <_strtod_l+0xb28>)
 801667a:	4293      	cmp	r3, r2
 801667c:	d156      	bne.n	801672c <_strtod_l+0x91c>
 801667e:	9b05      	ldr	r3, [sp, #20]
 8016680:	4648      	mov	r0, r9
 8016682:	b1eb      	cbz	r3, 80166c0 <_strtod_l+0x8b0>
 8016684:	4653      	mov	r3, sl
 8016686:	4aad      	ldr	r2, [pc, #692]	; (801693c <_strtod_l+0xb2c>)
 8016688:	f04f 31ff 	mov.w	r1, #4294967295
 801668c:	401a      	ands	r2, r3
 801668e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016692:	d818      	bhi.n	80166c6 <_strtod_l+0x8b6>
 8016694:	0d12      	lsrs	r2, r2, #20
 8016696:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801669a:	fa01 f303 	lsl.w	r3, r1, r3
 801669e:	4298      	cmp	r0, r3
 80166a0:	d144      	bne.n	801672c <_strtod_l+0x91c>
 80166a2:	4ba7      	ldr	r3, [pc, #668]	; (8016940 <_strtod_l+0xb30>)
 80166a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d102      	bne.n	80166b0 <_strtod_l+0x8a0>
 80166aa:	3001      	adds	r0, #1
 80166ac:	f43f add2 	beq.w	8016254 <_strtod_l+0x444>
 80166b0:	4ba2      	ldr	r3, [pc, #648]	; (801693c <_strtod_l+0xb2c>)
 80166b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166b4:	f04f 0900 	mov.w	r9, #0
 80166b8:	401a      	ands	r2, r3
 80166ba:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80166be:	e79f      	b.n	8016600 <_strtod_l+0x7f0>
 80166c0:	f04f 33ff 	mov.w	r3, #4294967295
 80166c4:	e7eb      	b.n	801669e <_strtod_l+0x88e>
 80166c6:	460b      	mov	r3, r1
 80166c8:	e7e9      	b.n	801669e <_strtod_l+0x88e>
 80166ca:	bb7b      	cbnz	r3, 801672c <_strtod_l+0x91c>
 80166cc:	f1b9 0f00 	cmp.w	r9, #0
 80166d0:	d12c      	bne.n	801672c <_strtod_l+0x91c>
 80166d2:	9905      	ldr	r1, [sp, #20]
 80166d4:	4653      	mov	r3, sl
 80166d6:	4a99      	ldr	r2, [pc, #612]	; (801693c <_strtod_l+0xb2c>)
 80166d8:	b1f1      	cbz	r1, 8016718 <_strtod_l+0x908>
 80166da:	ea02 010a 	and.w	r1, r2, sl
 80166de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80166e2:	dc19      	bgt.n	8016718 <_strtod_l+0x908>
 80166e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80166e8:	f77f ae51 	ble.w	801638e <_strtod_l+0x57e>
 80166ec:	2300      	movs	r3, #0
 80166ee:	4a95      	ldr	r2, [pc, #596]	; (8016944 <_strtod_l+0xb34>)
 80166f0:	4648      	mov	r0, r9
 80166f2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80166f6:	4651      	mov	r1, sl
 80166f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80166fc:	f7e9 ff0e 	bl	800051c <__aeabi_dmul>
 8016700:	4681      	mov	r9, r0
 8016702:	468a      	mov	sl, r1
 8016704:	2900      	cmp	r1, #0
 8016706:	f47f adb0 	bne.w	801626a <_strtod_l+0x45a>
 801670a:	2800      	cmp	r0, #0
 801670c:	f47f adad 	bne.w	801626a <_strtod_l+0x45a>
 8016710:	2322      	movs	r3, #34	; 0x22
 8016712:	f8cb 3000 	str.w	r3, [fp]
 8016716:	e5a8      	b.n	801626a <_strtod_l+0x45a>
 8016718:	4013      	ands	r3, r2
 801671a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801671e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8016722:	f04f 39ff 	mov.w	r9, #4294967295
 8016726:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 801672a:	e769      	b.n	8016600 <_strtod_l+0x7f0>
 801672c:	b19d      	cbz	r5, 8016756 <_strtod_l+0x946>
 801672e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016730:	421d      	tst	r5, r3
 8016732:	f43f af65 	beq.w	8016600 <_strtod_l+0x7f0>
 8016736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016738:	9a05      	ldr	r2, [sp, #20]
 801673a:	4648      	mov	r0, r9
 801673c:	4651      	mov	r1, sl
 801673e:	b173      	cbz	r3, 801675e <_strtod_l+0x94e>
 8016740:	f7ff fb43 	bl	8015dca <sulp>
 8016744:	4602      	mov	r2, r0
 8016746:	460b      	mov	r3, r1
 8016748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801674c:	f7e9 fd30 	bl	80001b0 <__adddf3>
 8016750:	4681      	mov	r9, r0
 8016752:	468a      	mov	sl, r1
 8016754:	e754      	b.n	8016600 <_strtod_l+0x7f0>
 8016756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016758:	ea13 0f09 	tst.w	r3, r9
 801675c:	e7e9      	b.n	8016732 <_strtod_l+0x922>
 801675e:	f7ff fb34 	bl	8015dca <sulp>
 8016762:	4602      	mov	r2, r0
 8016764:	460b      	mov	r3, r1
 8016766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801676a:	f7e9 fd1f 	bl	80001ac <__aeabi_dsub>
 801676e:	2200      	movs	r2, #0
 8016770:	2300      	movs	r3, #0
 8016772:	4681      	mov	r9, r0
 8016774:	468a      	mov	sl, r1
 8016776:	f7ea f939 	bl	80009ec <__aeabi_dcmpeq>
 801677a:	2800      	cmp	r0, #0
 801677c:	f47f ae07 	bne.w	801638e <_strtod_l+0x57e>
 8016780:	e73e      	b.n	8016600 <_strtod_l+0x7f0>
 8016782:	9904      	ldr	r1, [sp, #16]
 8016784:	4640      	mov	r0, r8
 8016786:	f002 f9f8 	bl	8018b7a <__ratio>
 801678a:	2200      	movs	r2, #0
 801678c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016790:	4606      	mov	r6, r0
 8016792:	460f      	mov	r7, r1
 8016794:	f7ea f93e 	bl	8000a14 <__aeabi_dcmple>
 8016798:	2800      	cmp	r0, #0
 801679a:	d075      	beq.n	8016888 <_strtod_l+0xa78>
 801679c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d047      	beq.n	8016832 <_strtod_l+0xa22>
 80167a2:	2600      	movs	r6, #0
 80167a4:	4f68      	ldr	r7, [pc, #416]	; (8016948 <_strtod_l+0xb38>)
 80167a6:	4d68      	ldr	r5, [pc, #416]	; (8016948 <_strtod_l+0xb38>)
 80167a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80167ae:	0d1b      	lsrs	r3, r3, #20
 80167b0:	051b      	lsls	r3, r3, #20
 80167b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80167b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80167b6:	4b65      	ldr	r3, [pc, #404]	; (801694c <_strtod_l+0xb3c>)
 80167b8:	429a      	cmp	r2, r3
 80167ba:	f040 80cf 	bne.w	801695c <_strtod_l+0xb4c>
 80167be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80167c2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80167c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167c8:	4648      	mov	r0, r9
 80167ca:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80167ce:	4651      	mov	r1, sl
 80167d0:	f002 f90e 	bl	80189f0 <__ulp>
 80167d4:	4602      	mov	r2, r0
 80167d6:	460b      	mov	r3, r1
 80167d8:	4630      	mov	r0, r6
 80167da:	4639      	mov	r1, r7
 80167dc:	f7e9 fe9e 	bl	800051c <__aeabi_dmul>
 80167e0:	464a      	mov	r2, r9
 80167e2:	4653      	mov	r3, sl
 80167e4:	f7e9 fce4 	bl	80001b0 <__adddf3>
 80167e8:	460b      	mov	r3, r1
 80167ea:	4954      	ldr	r1, [pc, #336]	; (801693c <_strtod_l+0xb2c>)
 80167ec:	4a58      	ldr	r2, [pc, #352]	; (8016950 <_strtod_l+0xb40>)
 80167ee:	4019      	ands	r1, r3
 80167f0:	4291      	cmp	r1, r2
 80167f2:	4681      	mov	r9, r0
 80167f4:	d95e      	bls.n	80168b4 <_strtod_l+0xaa4>
 80167f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80167fc:	4293      	cmp	r3, r2
 80167fe:	d103      	bne.n	8016808 <_strtod_l+0x9f8>
 8016800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016802:	3301      	adds	r3, #1
 8016804:	f43f ad26 	beq.w	8016254 <_strtod_l+0x444>
 8016808:	f04f 39ff 	mov.w	r9, #4294967295
 801680c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8016940 <_strtod_l+0xb30>
 8016810:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016812:	4658      	mov	r0, fp
 8016814:	f001 fe56 	bl	80184c4 <_Bfree>
 8016818:	9906      	ldr	r1, [sp, #24]
 801681a:	4658      	mov	r0, fp
 801681c:	f001 fe52 	bl	80184c4 <_Bfree>
 8016820:	9904      	ldr	r1, [sp, #16]
 8016822:	4658      	mov	r0, fp
 8016824:	f001 fe4e 	bl	80184c4 <_Bfree>
 8016828:	4641      	mov	r1, r8
 801682a:	4658      	mov	r0, fp
 801682c:	f001 fe4a 	bl	80184c4 <_Bfree>
 8016830:	e617      	b.n	8016462 <_strtod_l+0x652>
 8016832:	f1b9 0f00 	cmp.w	r9, #0
 8016836:	d119      	bne.n	801686c <_strtod_l+0xa5c>
 8016838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801683a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801683e:	b9e3      	cbnz	r3, 801687a <_strtod_l+0xa6a>
 8016840:	2200      	movs	r2, #0
 8016842:	4b41      	ldr	r3, [pc, #260]	; (8016948 <_strtod_l+0xb38>)
 8016844:	4630      	mov	r0, r6
 8016846:	4639      	mov	r1, r7
 8016848:	f7ea f8da 	bl	8000a00 <__aeabi_dcmplt>
 801684c:	b9c8      	cbnz	r0, 8016882 <_strtod_l+0xa72>
 801684e:	2200      	movs	r2, #0
 8016850:	4b40      	ldr	r3, [pc, #256]	; (8016954 <_strtod_l+0xb44>)
 8016852:	4630      	mov	r0, r6
 8016854:	4639      	mov	r1, r7
 8016856:	f7e9 fe61 	bl	800051c <__aeabi_dmul>
 801685a:	4604      	mov	r4, r0
 801685c:	460d      	mov	r5, r1
 801685e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8016862:	9418      	str	r4, [sp, #96]	; 0x60
 8016864:	9319      	str	r3, [sp, #100]	; 0x64
 8016866:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 801686a:	e79d      	b.n	80167a8 <_strtod_l+0x998>
 801686c:	f1b9 0f01 	cmp.w	r9, #1
 8016870:	d103      	bne.n	801687a <_strtod_l+0xa6a>
 8016872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016874:	2b00      	cmp	r3, #0
 8016876:	f43f ad8a 	beq.w	801638e <_strtod_l+0x57e>
 801687a:	2600      	movs	r6, #0
 801687c:	4f36      	ldr	r7, [pc, #216]	; (8016958 <_strtod_l+0xb48>)
 801687e:	2400      	movs	r4, #0
 8016880:	e791      	b.n	80167a6 <_strtod_l+0x996>
 8016882:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016884:	4d33      	ldr	r5, [pc, #204]	; (8016954 <_strtod_l+0xb44>)
 8016886:	e7ea      	b.n	801685e <_strtod_l+0xa4e>
 8016888:	4b32      	ldr	r3, [pc, #200]	; (8016954 <_strtod_l+0xb44>)
 801688a:	2200      	movs	r2, #0
 801688c:	4630      	mov	r0, r6
 801688e:	4639      	mov	r1, r7
 8016890:	f7e9 fe44 	bl	800051c <__aeabi_dmul>
 8016894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016896:	4604      	mov	r4, r0
 8016898:	460d      	mov	r5, r1
 801689a:	b933      	cbnz	r3, 80168aa <_strtod_l+0xa9a>
 801689c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168a0:	9010      	str	r0, [sp, #64]	; 0x40
 80168a2:	9311      	str	r3, [sp, #68]	; 0x44
 80168a4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80168a8:	e77e      	b.n	80167a8 <_strtod_l+0x998>
 80168aa:	4602      	mov	r2, r0
 80168ac:	460b      	mov	r3, r1
 80168ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80168b2:	e7f7      	b.n	80168a4 <_strtod_l+0xa94>
 80168b4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80168b8:	9b05      	ldr	r3, [sp, #20]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d1a8      	bne.n	8016810 <_strtod_l+0xa00>
 80168be:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80168c2:	0d1b      	lsrs	r3, r3, #20
 80168c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80168c6:	051b      	lsls	r3, r3, #20
 80168c8:	429a      	cmp	r2, r3
 80168ca:	4656      	mov	r6, sl
 80168cc:	d1a0      	bne.n	8016810 <_strtod_l+0xa00>
 80168ce:	4629      	mov	r1, r5
 80168d0:	4620      	mov	r0, r4
 80168d2:	f7ea f8d3 	bl	8000a7c <__aeabi_d2iz>
 80168d6:	f7e9 fdb7 	bl	8000448 <__aeabi_i2d>
 80168da:	460b      	mov	r3, r1
 80168dc:	4602      	mov	r2, r0
 80168de:	4629      	mov	r1, r5
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7e9 fc63 	bl	80001ac <__aeabi_dsub>
 80168e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168e8:	4604      	mov	r4, r0
 80168ea:	460d      	mov	r5, r1
 80168ec:	b933      	cbnz	r3, 80168fc <_strtod_l+0xaec>
 80168ee:	f1b9 0f00 	cmp.w	r9, #0
 80168f2:	d103      	bne.n	80168fc <_strtod_l+0xaec>
 80168f4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80168f8:	2e00      	cmp	r6, #0
 80168fa:	d06a      	beq.n	80169d2 <_strtod_l+0xbc2>
 80168fc:	a30a      	add	r3, pc, #40	; (adr r3, 8016928 <_strtod_l+0xb18>)
 80168fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016902:	4620      	mov	r0, r4
 8016904:	4629      	mov	r1, r5
 8016906:	f7ea f87b 	bl	8000a00 <__aeabi_dcmplt>
 801690a:	2800      	cmp	r0, #0
 801690c:	f47f acad 	bne.w	801626a <_strtod_l+0x45a>
 8016910:	a307      	add	r3, pc, #28	; (adr r3, 8016930 <_strtod_l+0xb20>)
 8016912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016916:	4620      	mov	r0, r4
 8016918:	4629      	mov	r1, r5
 801691a:	f7ea f88f 	bl	8000a3c <__aeabi_dcmpgt>
 801691e:	2800      	cmp	r0, #0
 8016920:	f43f af76 	beq.w	8016810 <_strtod_l+0xa00>
 8016924:	e4a1      	b.n	801626a <_strtod_l+0x45a>
 8016926:	bf00      	nop
 8016928:	94a03595 	.word	0x94a03595
 801692c:	3fdfffff 	.word	0x3fdfffff
 8016930:	35afe535 	.word	0x35afe535
 8016934:	3fe00000 	.word	0x3fe00000
 8016938:	000fffff 	.word	0x000fffff
 801693c:	7ff00000 	.word	0x7ff00000
 8016940:	7fefffff 	.word	0x7fefffff
 8016944:	39500000 	.word	0x39500000
 8016948:	3ff00000 	.word	0x3ff00000
 801694c:	7fe00000 	.word	0x7fe00000
 8016950:	7c9fffff 	.word	0x7c9fffff
 8016954:	3fe00000 	.word	0x3fe00000
 8016958:	bff00000 	.word	0xbff00000
 801695c:	9b05      	ldr	r3, [sp, #20]
 801695e:	b313      	cbz	r3, 80169a6 <_strtod_l+0xb96>
 8016960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016962:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016966:	d81e      	bhi.n	80169a6 <_strtod_l+0xb96>
 8016968:	a325      	add	r3, pc, #148	; (adr r3, 8016a00 <_strtod_l+0xbf0>)
 801696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801696e:	4620      	mov	r0, r4
 8016970:	4629      	mov	r1, r5
 8016972:	f7ea f84f 	bl	8000a14 <__aeabi_dcmple>
 8016976:	b190      	cbz	r0, 801699e <_strtod_l+0xb8e>
 8016978:	4629      	mov	r1, r5
 801697a:	4620      	mov	r0, r4
 801697c:	f7ea f8a6 	bl	8000acc <__aeabi_d2uiz>
 8016980:	2800      	cmp	r0, #0
 8016982:	bf08      	it	eq
 8016984:	2001      	moveq	r0, #1
 8016986:	f7e9 fd4f 	bl	8000428 <__aeabi_ui2d>
 801698a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801698c:	4604      	mov	r4, r0
 801698e:	460d      	mov	r5, r1
 8016990:	b9d3      	cbnz	r3, 80169c8 <_strtod_l+0xbb8>
 8016992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016996:	9012      	str	r0, [sp, #72]	; 0x48
 8016998:	9313      	str	r3, [sp, #76]	; 0x4c
 801699a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801699e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169a0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80169a4:	1a9f      	subs	r7, r3, r2
 80169a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80169aa:	f002 f821 	bl	80189f0 <__ulp>
 80169ae:	4602      	mov	r2, r0
 80169b0:	460b      	mov	r3, r1
 80169b2:	4630      	mov	r0, r6
 80169b4:	4639      	mov	r1, r7
 80169b6:	f7e9 fdb1 	bl	800051c <__aeabi_dmul>
 80169ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80169be:	f7e9 fbf7 	bl	80001b0 <__adddf3>
 80169c2:	4681      	mov	r9, r0
 80169c4:	468a      	mov	sl, r1
 80169c6:	e777      	b.n	80168b8 <_strtod_l+0xaa8>
 80169c8:	4602      	mov	r2, r0
 80169ca:	460b      	mov	r3, r1
 80169cc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80169d0:	e7e3      	b.n	801699a <_strtod_l+0xb8a>
 80169d2:	a30d      	add	r3, pc, #52	; (adr r3, 8016a08 <_strtod_l+0xbf8>)
 80169d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d8:	f7ea f812 	bl	8000a00 <__aeabi_dcmplt>
 80169dc:	e79f      	b.n	801691e <_strtod_l+0xb0e>
 80169de:	2300      	movs	r3, #0
 80169e0:	930d      	str	r3, [sp, #52]	; 0x34
 80169e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	f7ff ba55 	b.w	8015e96 <_strtod_l+0x86>
 80169ec:	2b65      	cmp	r3, #101	; 0x65
 80169ee:	f04f 0200 	mov.w	r2, #0
 80169f2:	f43f ab42 	beq.w	801607a <_strtod_l+0x26a>
 80169f6:	2101      	movs	r1, #1
 80169f8:	4614      	mov	r4, r2
 80169fa:	9105      	str	r1, [sp, #20]
 80169fc:	f7ff babf 	b.w	8015f7e <_strtod_l+0x16e>
 8016a00:	ffc00000 	.word	0xffc00000
 8016a04:	41dfffff 	.word	0x41dfffff
 8016a08:	94a03595 	.word	0x94a03595
 8016a0c:	3fcfffff 	.word	0x3fcfffff

08016a10 <_strtod_r>:
 8016a10:	4b05      	ldr	r3, [pc, #20]	; (8016a28 <_strtod_r+0x18>)
 8016a12:	b410      	push	{r4}
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4c05      	ldr	r4, [pc, #20]	; (8016a2c <_strtod_r+0x1c>)
 8016a18:	6a1b      	ldr	r3, [r3, #32]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	bf08      	it	eq
 8016a1e:	4623      	moveq	r3, r4
 8016a20:	bc10      	pop	{r4}
 8016a22:	f7ff b9f5 	b.w	8015e10 <_strtod_l>
 8016a26:	bf00      	nop
 8016a28:	20000148 	.word	0x20000148
 8016a2c:	200001ac 	.word	0x200001ac

08016a30 <_strtol_l.isra.0>:
 8016a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a34:	4680      	mov	r8, r0
 8016a36:	4689      	mov	r9, r1
 8016a38:	4692      	mov	sl, r2
 8016a3a:	461e      	mov	r6, r3
 8016a3c:	460f      	mov	r7, r1
 8016a3e:	463d      	mov	r5, r7
 8016a40:	9808      	ldr	r0, [sp, #32]
 8016a42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a46:	f001 fc49 	bl	80182dc <__locale_ctype_ptr_l>
 8016a4a:	4420      	add	r0, r4
 8016a4c:	7843      	ldrb	r3, [r0, #1]
 8016a4e:	f013 0308 	ands.w	r3, r3, #8
 8016a52:	d132      	bne.n	8016aba <_strtol_l.isra.0+0x8a>
 8016a54:	2c2d      	cmp	r4, #45	; 0x2d
 8016a56:	d132      	bne.n	8016abe <_strtol_l.isra.0+0x8e>
 8016a58:	2201      	movs	r2, #1
 8016a5a:	787c      	ldrb	r4, [r7, #1]
 8016a5c:	1cbd      	adds	r5, r7, #2
 8016a5e:	2e00      	cmp	r6, #0
 8016a60:	d05d      	beq.n	8016b1e <_strtol_l.isra.0+0xee>
 8016a62:	2e10      	cmp	r6, #16
 8016a64:	d109      	bne.n	8016a7a <_strtol_l.isra.0+0x4a>
 8016a66:	2c30      	cmp	r4, #48	; 0x30
 8016a68:	d107      	bne.n	8016a7a <_strtol_l.isra.0+0x4a>
 8016a6a:	782b      	ldrb	r3, [r5, #0]
 8016a6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016a70:	2b58      	cmp	r3, #88	; 0x58
 8016a72:	d14f      	bne.n	8016b14 <_strtol_l.isra.0+0xe4>
 8016a74:	2610      	movs	r6, #16
 8016a76:	786c      	ldrb	r4, [r5, #1]
 8016a78:	3502      	adds	r5, #2
 8016a7a:	2a00      	cmp	r2, #0
 8016a7c:	bf14      	ite	ne
 8016a7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016a82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016a86:	2700      	movs	r7, #0
 8016a88:	fbb1 fcf6 	udiv	ip, r1, r6
 8016a8c:	4638      	mov	r0, r7
 8016a8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016a92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016a96:	2b09      	cmp	r3, #9
 8016a98:	d817      	bhi.n	8016aca <_strtol_l.isra.0+0x9a>
 8016a9a:	461c      	mov	r4, r3
 8016a9c:	42a6      	cmp	r6, r4
 8016a9e:	dd23      	ble.n	8016ae8 <_strtol_l.isra.0+0xb8>
 8016aa0:	1c7b      	adds	r3, r7, #1
 8016aa2:	d007      	beq.n	8016ab4 <_strtol_l.isra.0+0x84>
 8016aa4:	4584      	cmp	ip, r0
 8016aa6:	d31c      	bcc.n	8016ae2 <_strtol_l.isra.0+0xb2>
 8016aa8:	d101      	bne.n	8016aae <_strtol_l.isra.0+0x7e>
 8016aaa:	45a6      	cmp	lr, r4
 8016aac:	db19      	blt.n	8016ae2 <_strtol_l.isra.0+0xb2>
 8016aae:	2701      	movs	r7, #1
 8016ab0:	fb00 4006 	mla	r0, r0, r6, r4
 8016ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ab8:	e7eb      	b.n	8016a92 <_strtol_l.isra.0+0x62>
 8016aba:	462f      	mov	r7, r5
 8016abc:	e7bf      	b.n	8016a3e <_strtol_l.isra.0+0xe>
 8016abe:	2c2b      	cmp	r4, #43	; 0x2b
 8016ac0:	bf04      	itt	eq
 8016ac2:	1cbd      	addeq	r5, r7, #2
 8016ac4:	787c      	ldrbeq	r4, [r7, #1]
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	e7c9      	b.n	8016a5e <_strtol_l.isra.0+0x2e>
 8016aca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016ace:	2b19      	cmp	r3, #25
 8016ad0:	d801      	bhi.n	8016ad6 <_strtol_l.isra.0+0xa6>
 8016ad2:	3c37      	subs	r4, #55	; 0x37
 8016ad4:	e7e2      	b.n	8016a9c <_strtol_l.isra.0+0x6c>
 8016ad6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016ada:	2b19      	cmp	r3, #25
 8016adc:	d804      	bhi.n	8016ae8 <_strtol_l.isra.0+0xb8>
 8016ade:	3c57      	subs	r4, #87	; 0x57
 8016ae0:	e7dc      	b.n	8016a9c <_strtol_l.isra.0+0x6c>
 8016ae2:	f04f 37ff 	mov.w	r7, #4294967295
 8016ae6:	e7e5      	b.n	8016ab4 <_strtol_l.isra.0+0x84>
 8016ae8:	1c7b      	adds	r3, r7, #1
 8016aea:	d108      	bne.n	8016afe <_strtol_l.isra.0+0xce>
 8016aec:	2322      	movs	r3, #34	; 0x22
 8016aee:	4608      	mov	r0, r1
 8016af0:	f8c8 3000 	str.w	r3, [r8]
 8016af4:	f1ba 0f00 	cmp.w	sl, #0
 8016af8:	d107      	bne.n	8016b0a <_strtol_l.isra.0+0xda>
 8016afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016afe:	b102      	cbz	r2, 8016b02 <_strtol_l.isra.0+0xd2>
 8016b00:	4240      	negs	r0, r0
 8016b02:	f1ba 0f00 	cmp.w	sl, #0
 8016b06:	d0f8      	beq.n	8016afa <_strtol_l.isra.0+0xca>
 8016b08:	b10f      	cbz	r7, 8016b0e <_strtol_l.isra.0+0xde>
 8016b0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b0e:	f8ca 9000 	str.w	r9, [sl]
 8016b12:	e7f2      	b.n	8016afa <_strtol_l.isra.0+0xca>
 8016b14:	2430      	movs	r4, #48	; 0x30
 8016b16:	2e00      	cmp	r6, #0
 8016b18:	d1af      	bne.n	8016a7a <_strtol_l.isra.0+0x4a>
 8016b1a:	2608      	movs	r6, #8
 8016b1c:	e7ad      	b.n	8016a7a <_strtol_l.isra.0+0x4a>
 8016b1e:	2c30      	cmp	r4, #48	; 0x30
 8016b20:	d0a3      	beq.n	8016a6a <_strtol_l.isra.0+0x3a>
 8016b22:	260a      	movs	r6, #10
 8016b24:	e7a9      	b.n	8016a7a <_strtol_l.isra.0+0x4a>
	...

08016b28 <_strtol_r>:
 8016b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b2a:	4c06      	ldr	r4, [pc, #24]	; (8016b44 <_strtol_r+0x1c>)
 8016b2c:	4d06      	ldr	r5, [pc, #24]	; (8016b48 <_strtol_r+0x20>)
 8016b2e:	6824      	ldr	r4, [r4, #0]
 8016b30:	6a24      	ldr	r4, [r4, #32]
 8016b32:	2c00      	cmp	r4, #0
 8016b34:	bf08      	it	eq
 8016b36:	462c      	moveq	r4, r5
 8016b38:	9400      	str	r4, [sp, #0]
 8016b3a:	f7ff ff79 	bl	8016a30 <_strtol_l.isra.0>
 8016b3e:	b003      	add	sp, #12
 8016b40:	bd30      	pop	{r4, r5, pc}
 8016b42:	bf00      	nop
 8016b44:	20000148 	.word	0x20000148
 8016b48:	200001ac 	.word	0x200001ac

08016b4c <__swbuf_r>:
 8016b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b4e:	460e      	mov	r6, r1
 8016b50:	4614      	mov	r4, r2
 8016b52:	4605      	mov	r5, r0
 8016b54:	b118      	cbz	r0, 8016b5e <__swbuf_r+0x12>
 8016b56:	6983      	ldr	r3, [r0, #24]
 8016b58:	b90b      	cbnz	r3, 8016b5e <__swbuf_r+0x12>
 8016b5a:	f001 f80d 	bl	8017b78 <__sinit>
 8016b5e:	4b21      	ldr	r3, [pc, #132]	; (8016be4 <__swbuf_r+0x98>)
 8016b60:	429c      	cmp	r4, r3
 8016b62:	d12a      	bne.n	8016bba <__swbuf_r+0x6e>
 8016b64:	686c      	ldr	r4, [r5, #4]
 8016b66:	69a3      	ldr	r3, [r4, #24]
 8016b68:	60a3      	str	r3, [r4, #8]
 8016b6a:	89a3      	ldrh	r3, [r4, #12]
 8016b6c:	071a      	lsls	r2, r3, #28
 8016b6e:	d52e      	bpl.n	8016bce <__swbuf_r+0x82>
 8016b70:	6923      	ldr	r3, [r4, #16]
 8016b72:	b363      	cbz	r3, 8016bce <__swbuf_r+0x82>
 8016b74:	6923      	ldr	r3, [r4, #16]
 8016b76:	6820      	ldr	r0, [r4, #0]
 8016b78:	b2f6      	uxtb	r6, r6
 8016b7a:	1ac0      	subs	r0, r0, r3
 8016b7c:	6963      	ldr	r3, [r4, #20]
 8016b7e:	4637      	mov	r7, r6
 8016b80:	4283      	cmp	r3, r0
 8016b82:	dc04      	bgt.n	8016b8e <__swbuf_r+0x42>
 8016b84:	4621      	mov	r1, r4
 8016b86:	4628      	mov	r0, r5
 8016b88:	f000 ff8c 	bl	8017aa4 <_fflush_r>
 8016b8c:	bb28      	cbnz	r0, 8016bda <__swbuf_r+0x8e>
 8016b8e:	68a3      	ldr	r3, [r4, #8]
 8016b90:	3001      	adds	r0, #1
 8016b92:	3b01      	subs	r3, #1
 8016b94:	60a3      	str	r3, [r4, #8]
 8016b96:	6823      	ldr	r3, [r4, #0]
 8016b98:	1c5a      	adds	r2, r3, #1
 8016b9a:	6022      	str	r2, [r4, #0]
 8016b9c:	701e      	strb	r6, [r3, #0]
 8016b9e:	6963      	ldr	r3, [r4, #20]
 8016ba0:	4283      	cmp	r3, r0
 8016ba2:	d004      	beq.n	8016bae <__swbuf_r+0x62>
 8016ba4:	89a3      	ldrh	r3, [r4, #12]
 8016ba6:	07db      	lsls	r3, r3, #31
 8016ba8:	d519      	bpl.n	8016bde <__swbuf_r+0x92>
 8016baa:	2e0a      	cmp	r6, #10
 8016bac:	d117      	bne.n	8016bde <__swbuf_r+0x92>
 8016bae:	4621      	mov	r1, r4
 8016bb0:	4628      	mov	r0, r5
 8016bb2:	f000 ff77 	bl	8017aa4 <_fflush_r>
 8016bb6:	b190      	cbz	r0, 8016bde <__swbuf_r+0x92>
 8016bb8:	e00f      	b.n	8016bda <__swbuf_r+0x8e>
 8016bba:	4b0b      	ldr	r3, [pc, #44]	; (8016be8 <__swbuf_r+0x9c>)
 8016bbc:	429c      	cmp	r4, r3
 8016bbe:	d101      	bne.n	8016bc4 <__swbuf_r+0x78>
 8016bc0:	68ac      	ldr	r4, [r5, #8]
 8016bc2:	e7d0      	b.n	8016b66 <__swbuf_r+0x1a>
 8016bc4:	4b09      	ldr	r3, [pc, #36]	; (8016bec <__swbuf_r+0xa0>)
 8016bc6:	429c      	cmp	r4, r3
 8016bc8:	bf08      	it	eq
 8016bca:	68ec      	ldreq	r4, [r5, #12]
 8016bcc:	e7cb      	b.n	8016b66 <__swbuf_r+0x1a>
 8016bce:	4621      	mov	r1, r4
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f000 f81f 	bl	8016c14 <__swsetup_r>
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d0cc      	beq.n	8016b74 <__swbuf_r+0x28>
 8016bda:	f04f 37ff 	mov.w	r7, #4294967295
 8016bde:	4638      	mov	r0, r7
 8016be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016be2:	bf00      	nop
 8016be4:	0801e6d8 	.word	0x0801e6d8
 8016be8:	0801e6f8 	.word	0x0801e6f8
 8016bec:	0801e6b8 	.word	0x0801e6b8

08016bf0 <_write_r>:
 8016bf0:	b538      	push	{r3, r4, r5, lr}
 8016bf2:	4605      	mov	r5, r0
 8016bf4:	4608      	mov	r0, r1
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	4c05      	ldr	r4, [pc, #20]	; (8016c10 <_write_r+0x20>)
 8016bfc:	6022      	str	r2, [r4, #0]
 8016bfe:	461a      	mov	r2, r3
 8016c00:	f7ed f91f 	bl	8003e42 <_write>
 8016c04:	1c43      	adds	r3, r0, #1
 8016c06:	d102      	bne.n	8016c0e <_write_r+0x1e>
 8016c08:	6823      	ldr	r3, [r4, #0]
 8016c0a:	b103      	cbz	r3, 8016c0e <_write_r+0x1e>
 8016c0c:	602b      	str	r3, [r5, #0]
 8016c0e:	bd38      	pop	{r3, r4, r5, pc}
 8016c10:	20009e2c 	.word	0x20009e2c

08016c14 <__swsetup_r>:
 8016c14:	4b32      	ldr	r3, [pc, #200]	; (8016ce0 <__swsetup_r+0xcc>)
 8016c16:	b570      	push	{r4, r5, r6, lr}
 8016c18:	681d      	ldr	r5, [r3, #0]
 8016c1a:	4606      	mov	r6, r0
 8016c1c:	460c      	mov	r4, r1
 8016c1e:	b125      	cbz	r5, 8016c2a <__swsetup_r+0x16>
 8016c20:	69ab      	ldr	r3, [r5, #24]
 8016c22:	b913      	cbnz	r3, 8016c2a <__swsetup_r+0x16>
 8016c24:	4628      	mov	r0, r5
 8016c26:	f000 ffa7 	bl	8017b78 <__sinit>
 8016c2a:	4b2e      	ldr	r3, [pc, #184]	; (8016ce4 <__swsetup_r+0xd0>)
 8016c2c:	429c      	cmp	r4, r3
 8016c2e:	d10f      	bne.n	8016c50 <__swsetup_r+0x3c>
 8016c30:	686c      	ldr	r4, [r5, #4]
 8016c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c36:	b29a      	uxth	r2, r3
 8016c38:	0715      	lsls	r5, r2, #28
 8016c3a:	d42c      	bmi.n	8016c96 <__swsetup_r+0x82>
 8016c3c:	06d0      	lsls	r0, r2, #27
 8016c3e:	d411      	bmi.n	8016c64 <__swsetup_r+0x50>
 8016c40:	2209      	movs	r2, #9
 8016c42:	6032      	str	r2, [r6, #0]
 8016c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c48:	81a3      	strh	r3, [r4, #12]
 8016c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c4e:	e03e      	b.n	8016cce <__swsetup_r+0xba>
 8016c50:	4b25      	ldr	r3, [pc, #148]	; (8016ce8 <__swsetup_r+0xd4>)
 8016c52:	429c      	cmp	r4, r3
 8016c54:	d101      	bne.n	8016c5a <__swsetup_r+0x46>
 8016c56:	68ac      	ldr	r4, [r5, #8]
 8016c58:	e7eb      	b.n	8016c32 <__swsetup_r+0x1e>
 8016c5a:	4b24      	ldr	r3, [pc, #144]	; (8016cec <__swsetup_r+0xd8>)
 8016c5c:	429c      	cmp	r4, r3
 8016c5e:	bf08      	it	eq
 8016c60:	68ec      	ldreq	r4, [r5, #12]
 8016c62:	e7e6      	b.n	8016c32 <__swsetup_r+0x1e>
 8016c64:	0751      	lsls	r1, r2, #29
 8016c66:	d512      	bpl.n	8016c8e <__swsetup_r+0x7a>
 8016c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c6a:	b141      	cbz	r1, 8016c7e <__swsetup_r+0x6a>
 8016c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c70:	4299      	cmp	r1, r3
 8016c72:	d002      	beq.n	8016c7a <__swsetup_r+0x66>
 8016c74:	4630      	mov	r0, r6
 8016c76:	f001 fff7 	bl	8018c68 <_free_r>
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8016c7e:	89a3      	ldrh	r3, [r4, #12]
 8016c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c84:	81a3      	strh	r3, [r4, #12]
 8016c86:	2300      	movs	r3, #0
 8016c88:	6063      	str	r3, [r4, #4]
 8016c8a:	6923      	ldr	r3, [r4, #16]
 8016c8c:	6023      	str	r3, [r4, #0]
 8016c8e:	89a3      	ldrh	r3, [r4, #12]
 8016c90:	f043 0308 	orr.w	r3, r3, #8
 8016c94:	81a3      	strh	r3, [r4, #12]
 8016c96:	6923      	ldr	r3, [r4, #16]
 8016c98:	b94b      	cbnz	r3, 8016cae <__swsetup_r+0x9a>
 8016c9a:	89a3      	ldrh	r3, [r4, #12]
 8016c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ca4:	d003      	beq.n	8016cae <__swsetup_r+0x9a>
 8016ca6:	4621      	mov	r1, r4
 8016ca8:	4630      	mov	r0, r6
 8016caa:	f001 fb6f 	bl	801838c <__smakebuf_r>
 8016cae:	89a2      	ldrh	r2, [r4, #12]
 8016cb0:	f012 0301 	ands.w	r3, r2, #1
 8016cb4:	d00c      	beq.n	8016cd0 <__swsetup_r+0xbc>
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	60a3      	str	r3, [r4, #8]
 8016cba:	6963      	ldr	r3, [r4, #20]
 8016cbc:	425b      	negs	r3, r3
 8016cbe:	61a3      	str	r3, [r4, #24]
 8016cc0:	6923      	ldr	r3, [r4, #16]
 8016cc2:	b953      	cbnz	r3, 8016cda <__swsetup_r+0xc6>
 8016cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016ccc:	d1ba      	bne.n	8016c44 <__swsetup_r+0x30>
 8016cce:	bd70      	pop	{r4, r5, r6, pc}
 8016cd0:	0792      	lsls	r2, r2, #30
 8016cd2:	bf58      	it	pl
 8016cd4:	6963      	ldrpl	r3, [r4, #20]
 8016cd6:	60a3      	str	r3, [r4, #8]
 8016cd8:	e7f2      	b.n	8016cc0 <__swsetup_r+0xac>
 8016cda:	2000      	movs	r0, #0
 8016cdc:	e7f7      	b.n	8016cce <__swsetup_r+0xba>
 8016cde:	bf00      	nop
 8016ce0:	20000148 	.word	0x20000148
 8016ce4:	0801e6d8 	.word	0x0801e6d8
 8016ce8:	0801e6f8 	.word	0x0801e6f8
 8016cec:	0801e6b8 	.word	0x0801e6b8

08016cf0 <_close_r>:
 8016cf0:	b538      	push	{r3, r4, r5, lr}
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	4c05      	ldr	r4, [pc, #20]	; (8016d0c <_close_r+0x1c>)
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	4608      	mov	r0, r1
 8016cfa:	6023      	str	r3, [r4, #0]
 8016cfc:	f7ed f8bd 	bl	8003e7a <_close>
 8016d00:	1c43      	adds	r3, r0, #1
 8016d02:	d102      	bne.n	8016d0a <_close_r+0x1a>
 8016d04:	6823      	ldr	r3, [r4, #0]
 8016d06:	b103      	cbz	r3, 8016d0a <_close_r+0x1a>
 8016d08:	602b      	str	r3, [r5, #0]
 8016d0a:	bd38      	pop	{r3, r4, r5, pc}
 8016d0c:	20009e2c 	.word	0x20009e2c

08016d10 <quorem>:
 8016d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d14:	6903      	ldr	r3, [r0, #16]
 8016d16:	690c      	ldr	r4, [r1, #16]
 8016d18:	4680      	mov	r8, r0
 8016d1a:	42a3      	cmp	r3, r4
 8016d1c:	f2c0 8084 	blt.w	8016e28 <quorem+0x118>
 8016d20:	3c01      	subs	r4, #1
 8016d22:	f101 0714 	add.w	r7, r1, #20
 8016d26:	f100 0614 	add.w	r6, r0, #20
 8016d2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016d2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016d32:	3501      	adds	r5, #1
 8016d34:	fbb0 f5f5 	udiv	r5, r0, r5
 8016d38:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016d3c:	eb06 030c 	add.w	r3, r6, ip
 8016d40:	eb07 090c 	add.w	r9, r7, ip
 8016d44:	9301      	str	r3, [sp, #4]
 8016d46:	b39d      	cbz	r5, 8016db0 <quorem+0xa0>
 8016d48:	f04f 0a00 	mov.w	sl, #0
 8016d4c:	4638      	mov	r0, r7
 8016d4e:	46b6      	mov	lr, r6
 8016d50:	46d3      	mov	fp, sl
 8016d52:	f850 2b04 	ldr.w	r2, [r0], #4
 8016d56:	b293      	uxth	r3, r2
 8016d58:	fb05 a303 	mla	r3, r5, r3, sl
 8016d5c:	0c12      	lsrs	r2, r2, #16
 8016d5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d62:	fb05 a202 	mla	r2, r5, r2, sl
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	ebab 0303 	sub.w	r3, fp, r3
 8016d6c:	f8de b000 	ldr.w	fp, [lr]
 8016d70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016d74:	fa1f fb8b 	uxth.w	fp, fp
 8016d78:	445b      	add	r3, fp
 8016d7a:	fa1f fb82 	uxth.w	fp, r2
 8016d7e:	f8de 2000 	ldr.w	r2, [lr]
 8016d82:	4581      	cmp	r9, r0
 8016d84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d92:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016d96:	f84e 3b04 	str.w	r3, [lr], #4
 8016d9a:	d2da      	bcs.n	8016d52 <quorem+0x42>
 8016d9c:	f856 300c 	ldr.w	r3, [r6, ip]
 8016da0:	b933      	cbnz	r3, 8016db0 <quorem+0xa0>
 8016da2:	9b01      	ldr	r3, [sp, #4]
 8016da4:	3b04      	subs	r3, #4
 8016da6:	429e      	cmp	r6, r3
 8016da8:	461a      	mov	r2, r3
 8016daa:	d331      	bcc.n	8016e10 <quorem+0x100>
 8016dac:	f8c8 4010 	str.w	r4, [r8, #16]
 8016db0:	4640      	mov	r0, r8
 8016db2:	f001 fda5 	bl	8018900 <__mcmp>
 8016db6:	2800      	cmp	r0, #0
 8016db8:	db26      	blt.n	8016e08 <quorem+0xf8>
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f04f 0c00 	mov.w	ip, #0
 8016dc0:	3501      	adds	r5, #1
 8016dc2:	f857 1b04 	ldr.w	r1, [r7], #4
 8016dc6:	f8d0 e000 	ldr.w	lr, [r0]
 8016dca:	b28b      	uxth	r3, r1
 8016dcc:	ebac 0303 	sub.w	r3, ip, r3
 8016dd0:	fa1f f28e 	uxth.w	r2, lr
 8016dd4:	4413      	add	r3, r2
 8016dd6:	0c0a      	lsrs	r2, r1, #16
 8016dd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016de6:	45b9      	cmp	r9, r7
 8016de8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016dec:	f840 3b04 	str.w	r3, [r0], #4
 8016df0:	d2e7      	bcs.n	8016dc2 <quorem+0xb2>
 8016df2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016df6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016dfa:	b92a      	cbnz	r2, 8016e08 <quorem+0xf8>
 8016dfc:	3b04      	subs	r3, #4
 8016dfe:	429e      	cmp	r6, r3
 8016e00:	461a      	mov	r2, r3
 8016e02:	d30b      	bcc.n	8016e1c <quorem+0x10c>
 8016e04:	f8c8 4010 	str.w	r4, [r8, #16]
 8016e08:	4628      	mov	r0, r5
 8016e0a:	b003      	add	sp, #12
 8016e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e10:	6812      	ldr	r2, [r2, #0]
 8016e12:	3b04      	subs	r3, #4
 8016e14:	2a00      	cmp	r2, #0
 8016e16:	d1c9      	bne.n	8016dac <quorem+0x9c>
 8016e18:	3c01      	subs	r4, #1
 8016e1a:	e7c4      	b.n	8016da6 <quorem+0x96>
 8016e1c:	6812      	ldr	r2, [r2, #0]
 8016e1e:	3b04      	subs	r3, #4
 8016e20:	2a00      	cmp	r2, #0
 8016e22:	d1ef      	bne.n	8016e04 <quorem+0xf4>
 8016e24:	3c01      	subs	r4, #1
 8016e26:	e7ea      	b.n	8016dfe <quorem+0xee>
 8016e28:	2000      	movs	r0, #0
 8016e2a:	e7ee      	b.n	8016e0a <quorem+0xfa>
 8016e2c:	0000      	movs	r0, r0
	...

08016e30 <_dtoa_r>:
 8016e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e34:	4616      	mov	r6, r2
 8016e36:	461f      	mov	r7, r3
 8016e38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e3a:	b095      	sub	sp, #84	; 0x54
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8016e42:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8016e46:	b93d      	cbnz	r5, 8016e58 <_dtoa_r+0x28>
 8016e48:	2010      	movs	r0, #16
 8016e4a:	f001 fadf 	bl	801840c <malloc>
 8016e4e:	6260      	str	r0, [r4, #36]	; 0x24
 8016e50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e54:	6005      	str	r5, [r0, #0]
 8016e56:	60c5      	str	r5, [r0, #12]
 8016e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e5a:	6819      	ldr	r1, [r3, #0]
 8016e5c:	b151      	cbz	r1, 8016e74 <_dtoa_r+0x44>
 8016e5e:	685a      	ldr	r2, [r3, #4]
 8016e60:	2301      	movs	r3, #1
 8016e62:	4093      	lsls	r3, r2
 8016e64:	604a      	str	r2, [r1, #4]
 8016e66:	608b      	str	r3, [r1, #8]
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f001 fb2b 	bl	80184c4 <_Bfree>
 8016e6e:	2200      	movs	r2, #0
 8016e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e72:	601a      	str	r2, [r3, #0]
 8016e74:	1e3b      	subs	r3, r7, #0
 8016e76:	bfaf      	iteee	ge
 8016e78:	2300      	movge	r3, #0
 8016e7a:	2201      	movlt	r2, #1
 8016e7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016e80:	9303      	strlt	r3, [sp, #12]
 8016e82:	bfac      	ite	ge
 8016e84:	f8c8 3000 	strge.w	r3, [r8]
 8016e88:	f8c8 2000 	strlt.w	r2, [r8]
 8016e8c:	4bae      	ldr	r3, [pc, #696]	; (8017148 <_dtoa_r+0x318>)
 8016e8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016e92:	ea33 0308 	bics.w	r3, r3, r8
 8016e96:	d11b      	bne.n	8016ed0 <_dtoa_r+0xa0>
 8016e98:	f242 730f 	movw	r3, #9999	; 0x270f
 8016e9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016e9e:	6013      	str	r3, [r2, #0]
 8016ea0:	9b02      	ldr	r3, [sp, #8]
 8016ea2:	b923      	cbnz	r3, 8016eae <_dtoa_r+0x7e>
 8016ea4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	f000 8545 	beq.w	8017938 <_dtoa_r+0xb08>
 8016eae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016eb0:	b953      	cbnz	r3, 8016ec8 <_dtoa_r+0x98>
 8016eb2:	4ba6      	ldr	r3, [pc, #664]	; (801714c <_dtoa_r+0x31c>)
 8016eb4:	e021      	b.n	8016efa <_dtoa_r+0xca>
 8016eb6:	4ba6      	ldr	r3, [pc, #664]	; (8017150 <_dtoa_r+0x320>)
 8016eb8:	9306      	str	r3, [sp, #24]
 8016eba:	3308      	adds	r3, #8
 8016ebc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016ebe:	6013      	str	r3, [r2, #0]
 8016ec0:	9806      	ldr	r0, [sp, #24]
 8016ec2:	b015      	add	sp, #84	; 0x54
 8016ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ec8:	4ba0      	ldr	r3, [pc, #640]	; (801714c <_dtoa_r+0x31c>)
 8016eca:	9306      	str	r3, [sp, #24]
 8016ecc:	3303      	adds	r3, #3
 8016ece:	e7f5      	b.n	8016ebc <_dtoa_r+0x8c>
 8016ed0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	4630      	mov	r0, r6
 8016eda:	4639      	mov	r1, r7
 8016edc:	f7e9 fd86 	bl	80009ec <__aeabi_dcmpeq>
 8016ee0:	4682      	mov	sl, r0
 8016ee2:	b160      	cbz	r0, 8016efe <_dtoa_r+0xce>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016ee8:	6013      	str	r3, [r2, #0]
 8016eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	f000 8520 	beq.w	8017932 <_dtoa_r+0xb02>
 8016ef2:	4b98      	ldr	r3, [pc, #608]	; (8017154 <_dtoa_r+0x324>)
 8016ef4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016ef6:	6013      	str	r3, [r2, #0]
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	9306      	str	r3, [sp, #24]
 8016efc:	e7e0      	b.n	8016ec0 <_dtoa_r+0x90>
 8016efe:	ab12      	add	r3, sp, #72	; 0x48
 8016f00:	9301      	str	r3, [sp, #4]
 8016f02:	ab13      	add	r3, sp, #76	; 0x4c
 8016f04:	9300      	str	r3, [sp, #0]
 8016f06:	4632      	mov	r2, r6
 8016f08:	463b      	mov	r3, r7
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f001 fde6 	bl	8018adc <__d2b>
 8016f10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016f14:	4683      	mov	fp, r0
 8016f16:	2d00      	cmp	r5, #0
 8016f18:	d07d      	beq.n	8017016 <_dtoa_r+0x1e6>
 8016f1a:	46b0      	mov	r8, r6
 8016f1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016f20:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8016f24:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8016f28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016f2c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8016f30:	2200      	movs	r2, #0
 8016f32:	4b89      	ldr	r3, [pc, #548]	; (8017158 <_dtoa_r+0x328>)
 8016f34:	4640      	mov	r0, r8
 8016f36:	4649      	mov	r1, r9
 8016f38:	f7e9 f938 	bl	80001ac <__aeabi_dsub>
 8016f3c:	a37c      	add	r3, pc, #496	; (adr r3, 8017130 <_dtoa_r+0x300>)
 8016f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f42:	f7e9 faeb 	bl	800051c <__aeabi_dmul>
 8016f46:	a37c      	add	r3, pc, #496	; (adr r3, 8017138 <_dtoa_r+0x308>)
 8016f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f4c:	f7e9 f930 	bl	80001b0 <__adddf3>
 8016f50:	4606      	mov	r6, r0
 8016f52:	4628      	mov	r0, r5
 8016f54:	460f      	mov	r7, r1
 8016f56:	f7e9 fa77 	bl	8000448 <__aeabi_i2d>
 8016f5a:	a379      	add	r3, pc, #484	; (adr r3, 8017140 <_dtoa_r+0x310>)
 8016f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f60:	f7e9 fadc 	bl	800051c <__aeabi_dmul>
 8016f64:	4602      	mov	r2, r0
 8016f66:	460b      	mov	r3, r1
 8016f68:	4630      	mov	r0, r6
 8016f6a:	4639      	mov	r1, r7
 8016f6c:	f7e9 f920 	bl	80001b0 <__adddf3>
 8016f70:	4606      	mov	r6, r0
 8016f72:	460f      	mov	r7, r1
 8016f74:	f7e9 fd82 	bl	8000a7c <__aeabi_d2iz>
 8016f78:	2200      	movs	r2, #0
 8016f7a:	4682      	mov	sl, r0
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	4630      	mov	r0, r6
 8016f80:	4639      	mov	r1, r7
 8016f82:	f7e9 fd3d 	bl	8000a00 <__aeabi_dcmplt>
 8016f86:	b148      	cbz	r0, 8016f9c <_dtoa_r+0x16c>
 8016f88:	4650      	mov	r0, sl
 8016f8a:	f7e9 fa5d 	bl	8000448 <__aeabi_i2d>
 8016f8e:	4632      	mov	r2, r6
 8016f90:	463b      	mov	r3, r7
 8016f92:	f7e9 fd2b 	bl	80009ec <__aeabi_dcmpeq>
 8016f96:	b908      	cbnz	r0, 8016f9c <_dtoa_r+0x16c>
 8016f98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f9c:	f1ba 0f16 	cmp.w	sl, #22
 8016fa0:	d85a      	bhi.n	8017058 <_dtoa_r+0x228>
 8016fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fa6:	496d      	ldr	r1, [pc, #436]	; (801715c <_dtoa_r+0x32c>)
 8016fa8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fb0:	f7e9 fd44 	bl	8000a3c <__aeabi_dcmpgt>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d051      	beq.n	801705c <_dtoa_r+0x22c>
 8016fb8:	2300      	movs	r3, #0
 8016fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8016fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016fc2:	1b5d      	subs	r5, r3, r5
 8016fc4:	1e6b      	subs	r3, r5, #1
 8016fc6:	9307      	str	r3, [sp, #28]
 8016fc8:	bf43      	ittte	mi
 8016fca:	2300      	movmi	r3, #0
 8016fcc:	f1c5 0901 	rsbmi	r9, r5, #1
 8016fd0:	9307      	strmi	r3, [sp, #28]
 8016fd2:	f04f 0900 	movpl.w	r9, #0
 8016fd6:	f1ba 0f00 	cmp.w	sl, #0
 8016fda:	db41      	blt.n	8017060 <_dtoa_r+0x230>
 8016fdc:	9b07      	ldr	r3, [sp, #28]
 8016fde:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8016fe2:	4453      	add	r3, sl
 8016fe4:	9307      	str	r3, [sp, #28]
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	9308      	str	r3, [sp, #32]
 8016fea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016fec:	2b09      	cmp	r3, #9
 8016fee:	f200 808f 	bhi.w	8017110 <_dtoa_r+0x2e0>
 8016ff2:	2b05      	cmp	r3, #5
 8016ff4:	bfc4      	itt	gt
 8016ff6:	3b04      	subgt	r3, #4
 8016ff8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8016ffa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016ffc:	bfc8      	it	gt
 8016ffe:	2500      	movgt	r5, #0
 8017000:	f1a3 0302 	sub.w	r3, r3, #2
 8017004:	bfd8      	it	le
 8017006:	2501      	movle	r5, #1
 8017008:	2b03      	cmp	r3, #3
 801700a:	f200 808d 	bhi.w	8017128 <_dtoa_r+0x2f8>
 801700e:	e8df f003 	tbb	[pc, r3]
 8017012:	7d7b      	.short	0x7d7b
 8017014:	6f2f      	.short	0x6f2f
 8017016:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801701a:	441d      	add	r5, r3
 801701c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017020:	2820      	cmp	r0, #32
 8017022:	dd13      	ble.n	801704c <_dtoa_r+0x21c>
 8017024:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017028:	9b02      	ldr	r3, [sp, #8]
 801702a:	fa08 f800 	lsl.w	r8, r8, r0
 801702e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017032:	fa23 f000 	lsr.w	r0, r3, r0
 8017036:	ea48 0000 	orr.w	r0, r8, r0
 801703a:	f7e9 f9f5 	bl	8000428 <__aeabi_ui2d>
 801703e:	2301      	movs	r3, #1
 8017040:	4680      	mov	r8, r0
 8017042:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8017046:	3d01      	subs	r5, #1
 8017048:	9310      	str	r3, [sp, #64]	; 0x40
 801704a:	e771      	b.n	8016f30 <_dtoa_r+0x100>
 801704c:	9b02      	ldr	r3, [sp, #8]
 801704e:	f1c0 0020 	rsb	r0, r0, #32
 8017052:	fa03 f000 	lsl.w	r0, r3, r0
 8017056:	e7f0      	b.n	801703a <_dtoa_r+0x20a>
 8017058:	2301      	movs	r3, #1
 801705a:	e7b0      	b.n	8016fbe <_dtoa_r+0x18e>
 801705c:	900d      	str	r0, [sp, #52]	; 0x34
 801705e:	e7af      	b.n	8016fc0 <_dtoa_r+0x190>
 8017060:	f1ca 0300 	rsb	r3, sl, #0
 8017064:	9308      	str	r3, [sp, #32]
 8017066:	2300      	movs	r3, #0
 8017068:	eba9 090a 	sub.w	r9, r9, sl
 801706c:	930c      	str	r3, [sp, #48]	; 0x30
 801706e:	e7bc      	b.n	8016fea <_dtoa_r+0x1ba>
 8017070:	2301      	movs	r3, #1
 8017072:	9309      	str	r3, [sp, #36]	; 0x24
 8017074:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017076:	2b00      	cmp	r3, #0
 8017078:	dd74      	ble.n	8017164 <_dtoa_r+0x334>
 801707a:	4698      	mov	r8, r3
 801707c:	9304      	str	r3, [sp, #16]
 801707e:	2200      	movs	r2, #0
 8017080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017082:	6072      	str	r2, [r6, #4]
 8017084:	2204      	movs	r2, #4
 8017086:	f102 0014 	add.w	r0, r2, #20
 801708a:	4298      	cmp	r0, r3
 801708c:	6871      	ldr	r1, [r6, #4]
 801708e:	d96e      	bls.n	801716e <_dtoa_r+0x33e>
 8017090:	4620      	mov	r0, r4
 8017092:	f001 f9e3 	bl	801845c <_Balloc>
 8017096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017098:	6030      	str	r0, [r6, #0]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f1b8 0f0e 	cmp.w	r8, #14
 80170a0:	9306      	str	r3, [sp, #24]
 80170a2:	f200 80ed 	bhi.w	8017280 <_dtoa_r+0x450>
 80170a6:	2d00      	cmp	r5, #0
 80170a8:	f000 80ea 	beq.w	8017280 <_dtoa_r+0x450>
 80170ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170b0:	f1ba 0f00 	cmp.w	sl, #0
 80170b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80170b8:	dd77      	ble.n	80171aa <_dtoa_r+0x37a>
 80170ba:	4a28      	ldr	r2, [pc, #160]	; (801715c <_dtoa_r+0x32c>)
 80170bc:	f00a 030f 	and.w	r3, sl, #15
 80170c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80170c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80170c8:	06f0      	lsls	r0, r6, #27
 80170ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80170d2:	d568      	bpl.n	80171a6 <_dtoa_r+0x376>
 80170d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80170d8:	4b21      	ldr	r3, [pc, #132]	; (8017160 <_dtoa_r+0x330>)
 80170da:	2503      	movs	r5, #3
 80170dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80170e0:	f7e9 fb46 	bl	8000770 <__aeabi_ddiv>
 80170e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170e8:	f006 060f 	and.w	r6, r6, #15
 80170ec:	4f1c      	ldr	r7, [pc, #112]	; (8017160 <_dtoa_r+0x330>)
 80170ee:	e04f      	b.n	8017190 <_dtoa_r+0x360>
 80170f0:	2301      	movs	r3, #1
 80170f2:	9309      	str	r3, [sp, #36]	; 0x24
 80170f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80170f6:	4453      	add	r3, sl
 80170f8:	f103 0801 	add.w	r8, r3, #1
 80170fc:	9304      	str	r3, [sp, #16]
 80170fe:	4643      	mov	r3, r8
 8017100:	2b01      	cmp	r3, #1
 8017102:	bfb8      	it	lt
 8017104:	2301      	movlt	r3, #1
 8017106:	e7ba      	b.n	801707e <_dtoa_r+0x24e>
 8017108:	2300      	movs	r3, #0
 801710a:	e7b2      	b.n	8017072 <_dtoa_r+0x242>
 801710c:	2300      	movs	r3, #0
 801710e:	e7f0      	b.n	80170f2 <_dtoa_r+0x2c2>
 8017110:	2501      	movs	r5, #1
 8017112:	2300      	movs	r3, #0
 8017114:	9509      	str	r5, [sp, #36]	; 0x24
 8017116:	931e      	str	r3, [sp, #120]	; 0x78
 8017118:	f04f 33ff 	mov.w	r3, #4294967295
 801711c:	2200      	movs	r2, #0
 801711e:	9304      	str	r3, [sp, #16]
 8017120:	4698      	mov	r8, r3
 8017122:	2312      	movs	r3, #18
 8017124:	921f      	str	r2, [sp, #124]	; 0x7c
 8017126:	e7aa      	b.n	801707e <_dtoa_r+0x24e>
 8017128:	2301      	movs	r3, #1
 801712a:	9309      	str	r3, [sp, #36]	; 0x24
 801712c:	e7f4      	b.n	8017118 <_dtoa_r+0x2e8>
 801712e:	bf00      	nop
 8017130:	636f4361 	.word	0x636f4361
 8017134:	3fd287a7 	.word	0x3fd287a7
 8017138:	8b60c8b3 	.word	0x8b60c8b3
 801713c:	3fc68a28 	.word	0x3fc68a28
 8017140:	509f79fb 	.word	0x509f79fb
 8017144:	3fd34413 	.word	0x3fd34413
 8017148:	7ff00000 	.word	0x7ff00000
 801714c:	0801e6b1 	.word	0x0801e6b1
 8017150:	0801e6a8 	.word	0x0801e6a8
 8017154:	0801e84c 	.word	0x0801e84c
 8017158:	3ff80000 	.word	0x3ff80000
 801715c:	0801e750 	.word	0x0801e750
 8017160:	0801e728 	.word	0x0801e728
 8017164:	2301      	movs	r3, #1
 8017166:	9304      	str	r3, [sp, #16]
 8017168:	4698      	mov	r8, r3
 801716a:	461a      	mov	r2, r3
 801716c:	e7da      	b.n	8017124 <_dtoa_r+0x2f4>
 801716e:	3101      	adds	r1, #1
 8017170:	6071      	str	r1, [r6, #4]
 8017172:	0052      	lsls	r2, r2, #1
 8017174:	e787      	b.n	8017086 <_dtoa_r+0x256>
 8017176:	07f1      	lsls	r1, r6, #31
 8017178:	d508      	bpl.n	801718c <_dtoa_r+0x35c>
 801717a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801717e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017182:	f7e9 f9cb 	bl	800051c <__aeabi_dmul>
 8017186:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801718a:	3501      	adds	r5, #1
 801718c:	1076      	asrs	r6, r6, #1
 801718e:	3708      	adds	r7, #8
 8017190:	2e00      	cmp	r6, #0
 8017192:	d1f0      	bne.n	8017176 <_dtoa_r+0x346>
 8017194:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801719c:	f7e9 fae8 	bl	8000770 <__aeabi_ddiv>
 80171a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171a4:	e01b      	b.n	80171de <_dtoa_r+0x3ae>
 80171a6:	2502      	movs	r5, #2
 80171a8:	e7a0      	b.n	80170ec <_dtoa_r+0x2bc>
 80171aa:	f000 80a4 	beq.w	80172f6 <_dtoa_r+0x4c6>
 80171ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80171b2:	f1ca 0600 	rsb	r6, sl, #0
 80171b6:	4ba0      	ldr	r3, [pc, #640]	; (8017438 <_dtoa_r+0x608>)
 80171b8:	f006 020f 	and.w	r2, r6, #15
 80171bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c4:	f7e9 f9aa 	bl	800051c <__aeabi_dmul>
 80171c8:	2502      	movs	r5, #2
 80171ca:	2300      	movs	r3, #0
 80171cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171d0:	4f9a      	ldr	r7, [pc, #616]	; (801743c <_dtoa_r+0x60c>)
 80171d2:	1136      	asrs	r6, r6, #4
 80171d4:	2e00      	cmp	r6, #0
 80171d6:	f040 8083 	bne.w	80172e0 <_dtoa_r+0x4b0>
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d1e0      	bne.n	80171a0 <_dtoa_r+0x370>
 80171de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	f000 808a 	beq.w	80172fa <_dtoa_r+0x4ca>
 80171e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80171ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80171f2:	2200      	movs	r2, #0
 80171f4:	4b92      	ldr	r3, [pc, #584]	; (8017440 <_dtoa_r+0x610>)
 80171f6:	f7e9 fc03 	bl	8000a00 <__aeabi_dcmplt>
 80171fa:	2800      	cmp	r0, #0
 80171fc:	d07d      	beq.n	80172fa <_dtoa_r+0x4ca>
 80171fe:	f1b8 0f00 	cmp.w	r8, #0
 8017202:	d07a      	beq.n	80172fa <_dtoa_r+0x4ca>
 8017204:	9b04      	ldr	r3, [sp, #16]
 8017206:	2b00      	cmp	r3, #0
 8017208:	dd36      	ble.n	8017278 <_dtoa_r+0x448>
 801720a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801720e:	2200      	movs	r2, #0
 8017210:	4b8c      	ldr	r3, [pc, #560]	; (8017444 <_dtoa_r+0x614>)
 8017212:	f7e9 f983 	bl	800051c <__aeabi_dmul>
 8017216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801721a:	9e04      	ldr	r6, [sp, #16]
 801721c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8017220:	3501      	adds	r5, #1
 8017222:	4628      	mov	r0, r5
 8017224:	f7e9 f910 	bl	8000448 <__aeabi_i2d>
 8017228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801722c:	f7e9 f976 	bl	800051c <__aeabi_dmul>
 8017230:	2200      	movs	r2, #0
 8017232:	4b85      	ldr	r3, [pc, #532]	; (8017448 <_dtoa_r+0x618>)
 8017234:	f7e8 ffbc 	bl	80001b0 <__adddf3>
 8017238:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801723c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017240:	950b      	str	r5, [sp, #44]	; 0x2c
 8017242:	2e00      	cmp	r6, #0
 8017244:	d15c      	bne.n	8017300 <_dtoa_r+0x4d0>
 8017246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801724a:	2200      	movs	r2, #0
 801724c:	4b7f      	ldr	r3, [pc, #508]	; (801744c <_dtoa_r+0x61c>)
 801724e:	f7e8 ffad 	bl	80001ac <__aeabi_dsub>
 8017252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017254:	462b      	mov	r3, r5
 8017256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801725a:	f7e9 fbef 	bl	8000a3c <__aeabi_dcmpgt>
 801725e:	2800      	cmp	r0, #0
 8017260:	f040 8281 	bne.w	8017766 <_dtoa_r+0x936>
 8017264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801726a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801726e:	f7e9 fbc7 	bl	8000a00 <__aeabi_dcmplt>
 8017272:	2800      	cmp	r0, #0
 8017274:	f040 8275 	bne.w	8017762 <_dtoa_r+0x932>
 8017278:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801727c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017282:	2b00      	cmp	r3, #0
 8017284:	f2c0 814b 	blt.w	801751e <_dtoa_r+0x6ee>
 8017288:	f1ba 0f0e 	cmp.w	sl, #14
 801728c:	f300 8147 	bgt.w	801751e <_dtoa_r+0x6ee>
 8017290:	4b69      	ldr	r3, [pc, #420]	; (8017438 <_dtoa_r+0x608>)
 8017292:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801729a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801729e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	f280 80d7 	bge.w	8017454 <_dtoa_r+0x624>
 80172a6:	f1b8 0f00 	cmp.w	r8, #0
 80172aa:	f300 80d3 	bgt.w	8017454 <_dtoa_r+0x624>
 80172ae:	f040 8257 	bne.w	8017760 <_dtoa_r+0x930>
 80172b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80172b6:	2200      	movs	r2, #0
 80172b8:	4b64      	ldr	r3, [pc, #400]	; (801744c <_dtoa_r+0x61c>)
 80172ba:	f7e9 f92f 	bl	800051c <__aeabi_dmul>
 80172be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172c2:	f7e9 fbb1 	bl	8000a28 <__aeabi_dcmpge>
 80172c6:	4646      	mov	r6, r8
 80172c8:	4647      	mov	r7, r8
 80172ca:	2800      	cmp	r0, #0
 80172cc:	f040 822d 	bne.w	801772a <_dtoa_r+0x8fa>
 80172d0:	9b06      	ldr	r3, [sp, #24]
 80172d2:	9a06      	ldr	r2, [sp, #24]
 80172d4:	1c5d      	adds	r5, r3, #1
 80172d6:	2331      	movs	r3, #49	; 0x31
 80172d8:	f10a 0a01 	add.w	sl, sl, #1
 80172dc:	7013      	strb	r3, [r2, #0]
 80172de:	e228      	b.n	8017732 <_dtoa_r+0x902>
 80172e0:	07f2      	lsls	r2, r6, #31
 80172e2:	d505      	bpl.n	80172f0 <_dtoa_r+0x4c0>
 80172e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172e8:	f7e9 f918 	bl	800051c <__aeabi_dmul>
 80172ec:	2301      	movs	r3, #1
 80172ee:	3501      	adds	r5, #1
 80172f0:	1076      	asrs	r6, r6, #1
 80172f2:	3708      	adds	r7, #8
 80172f4:	e76e      	b.n	80171d4 <_dtoa_r+0x3a4>
 80172f6:	2502      	movs	r5, #2
 80172f8:	e771      	b.n	80171de <_dtoa_r+0x3ae>
 80172fa:	4657      	mov	r7, sl
 80172fc:	4646      	mov	r6, r8
 80172fe:	e790      	b.n	8017222 <_dtoa_r+0x3f2>
 8017300:	4b4d      	ldr	r3, [pc, #308]	; (8017438 <_dtoa_r+0x608>)
 8017302:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017306:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801730a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801730c:	2b00      	cmp	r3, #0
 801730e:	d048      	beq.n	80173a2 <_dtoa_r+0x572>
 8017310:	4602      	mov	r2, r0
 8017312:	460b      	mov	r3, r1
 8017314:	2000      	movs	r0, #0
 8017316:	494e      	ldr	r1, [pc, #312]	; (8017450 <_dtoa_r+0x620>)
 8017318:	f7e9 fa2a 	bl	8000770 <__aeabi_ddiv>
 801731c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017320:	f7e8 ff44 	bl	80001ac <__aeabi_dsub>
 8017324:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017328:	9d06      	ldr	r5, [sp, #24]
 801732a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801732e:	f7e9 fba5 	bl	8000a7c <__aeabi_d2iz>
 8017332:	9011      	str	r0, [sp, #68]	; 0x44
 8017334:	f7e9 f888 	bl	8000448 <__aeabi_i2d>
 8017338:	4602      	mov	r2, r0
 801733a:	460b      	mov	r3, r1
 801733c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017340:	f7e8 ff34 	bl	80001ac <__aeabi_dsub>
 8017344:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801734a:	3330      	adds	r3, #48	; 0x30
 801734c:	f805 3b01 	strb.w	r3, [r5], #1
 8017350:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017354:	f7e9 fb54 	bl	8000a00 <__aeabi_dcmplt>
 8017358:	2800      	cmp	r0, #0
 801735a:	d163      	bne.n	8017424 <_dtoa_r+0x5f4>
 801735c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017360:	2000      	movs	r0, #0
 8017362:	4937      	ldr	r1, [pc, #220]	; (8017440 <_dtoa_r+0x610>)
 8017364:	f7e8 ff22 	bl	80001ac <__aeabi_dsub>
 8017368:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801736c:	f7e9 fb48 	bl	8000a00 <__aeabi_dcmplt>
 8017370:	2800      	cmp	r0, #0
 8017372:	f040 80b5 	bne.w	80174e0 <_dtoa_r+0x6b0>
 8017376:	9b06      	ldr	r3, [sp, #24]
 8017378:	1aeb      	subs	r3, r5, r3
 801737a:	429e      	cmp	r6, r3
 801737c:	f77f af7c 	ble.w	8017278 <_dtoa_r+0x448>
 8017380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017384:	2200      	movs	r2, #0
 8017386:	4b2f      	ldr	r3, [pc, #188]	; (8017444 <_dtoa_r+0x614>)
 8017388:	f7e9 f8c8 	bl	800051c <__aeabi_dmul>
 801738c:	2200      	movs	r2, #0
 801738e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017396:	4b2b      	ldr	r3, [pc, #172]	; (8017444 <_dtoa_r+0x614>)
 8017398:	f7e9 f8c0 	bl	800051c <__aeabi_dmul>
 801739c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173a0:	e7c3      	b.n	801732a <_dtoa_r+0x4fa>
 80173a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80173a6:	f7e9 f8b9 	bl	800051c <__aeabi_dmul>
 80173aa:	9b06      	ldr	r3, [sp, #24]
 80173ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80173b0:	199d      	adds	r5, r3, r6
 80173b2:	461e      	mov	r6, r3
 80173b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173b8:	f7e9 fb60 	bl	8000a7c <__aeabi_d2iz>
 80173bc:	9011      	str	r0, [sp, #68]	; 0x44
 80173be:	f7e9 f843 	bl	8000448 <__aeabi_i2d>
 80173c2:	4602      	mov	r2, r0
 80173c4:	460b      	mov	r3, r1
 80173c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173ca:	f7e8 feef 	bl	80001ac <__aeabi_dsub>
 80173ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173d4:	3330      	adds	r3, #48	; 0x30
 80173d6:	f806 3b01 	strb.w	r3, [r6], #1
 80173da:	42ae      	cmp	r6, r5
 80173dc:	f04f 0200 	mov.w	r2, #0
 80173e0:	d124      	bne.n	801742c <_dtoa_r+0x5fc>
 80173e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173e6:	4b1a      	ldr	r3, [pc, #104]	; (8017450 <_dtoa_r+0x620>)
 80173e8:	f7e8 fee2 	bl	80001b0 <__adddf3>
 80173ec:	4602      	mov	r2, r0
 80173ee:	460b      	mov	r3, r1
 80173f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173f4:	f7e9 fb22 	bl	8000a3c <__aeabi_dcmpgt>
 80173f8:	2800      	cmp	r0, #0
 80173fa:	d171      	bne.n	80174e0 <_dtoa_r+0x6b0>
 80173fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017400:	2000      	movs	r0, #0
 8017402:	4913      	ldr	r1, [pc, #76]	; (8017450 <_dtoa_r+0x620>)
 8017404:	f7e8 fed2 	bl	80001ac <__aeabi_dsub>
 8017408:	4602      	mov	r2, r0
 801740a:	460b      	mov	r3, r1
 801740c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017410:	f7e9 faf6 	bl	8000a00 <__aeabi_dcmplt>
 8017414:	2800      	cmp	r0, #0
 8017416:	f43f af2f 	beq.w	8017278 <_dtoa_r+0x448>
 801741a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801741e:	1e6a      	subs	r2, r5, #1
 8017420:	2b30      	cmp	r3, #48	; 0x30
 8017422:	d001      	beq.n	8017428 <_dtoa_r+0x5f8>
 8017424:	46ba      	mov	sl, r7
 8017426:	e04a      	b.n	80174be <_dtoa_r+0x68e>
 8017428:	4615      	mov	r5, r2
 801742a:	e7f6      	b.n	801741a <_dtoa_r+0x5ea>
 801742c:	4b05      	ldr	r3, [pc, #20]	; (8017444 <_dtoa_r+0x614>)
 801742e:	f7e9 f875 	bl	800051c <__aeabi_dmul>
 8017432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017436:	e7bd      	b.n	80173b4 <_dtoa_r+0x584>
 8017438:	0801e750 	.word	0x0801e750
 801743c:	0801e728 	.word	0x0801e728
 8017440:	3ff00000 	.word	0x3ff00000
 8017444:	40240000 	.word	0x40240000
 8017448:	401c0000 	.word	0x401c0000
 801744c:	40140000 	.word	0x40140000
 8017450:	3fe00000 	.word	0x3fe00000
 8017454:	9d06      	ldr	r5, [sp, #24]
 8017456:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801745e:	4630      	mov	r0, r6
 8017460:	4639      	mov	r1, r7
 8017462:	f7e9 f985 	bl	8000770 <__aeabi_ddiv>
 8017466:	f7e9 fb09 	bl	8000a7c <__aeabi_d2iz>
 801746a:	4681      	mov	r9, r0
 801746c:	f7e8 ffec 	bl	8000448 <__aeabi_i2d>
 8017470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017474:	f7e9 f852 	bl	800051c <__aeabi_dmul>
 8017478:	4602      	mov	r2, r0
 801747a:	460b      	mov	r3, r1
 801747c:	4630      	mov	r0, r6
 801747e:	4639      	mov	r1, r7
 8017480:	f7e8 fe94 	bl	80001ac <__aeabi_dsub>
 8017484:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8017488:	f805 6b01 	strb.w	r6, [r5], #1
 801748c:	9e06      	ldr	r6, [sp, #24]
 801748e:	4602      	mov	r2, r0
 8017490:	1bae      	subs	r6, r5, r6
 8017492:	45b0      	cmp	r8, r6
 8017494:	460b      	mov	r3, r1
 8017496:	d135      	bne.n	8017504 <_dtoa_r+0x6d4>
 8017498:	f7e8 fe8a 	bl	80001b0 <__adddf3>
 801749c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174a0:	4606      	mov	r6, r0
 80174a2:	460f      	mov	r7, r1
 80174a4:	f7e9 faca 	bl	8000a3c <__aeabi_dcmpgt>
 80174a8:	b9c8      	cbnz	r0, 80174de <_dtoa_r+0x6ae>
 80174aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80174ae:	4630      	mov	r0, r6
 80174b0:	4639      	mov	r1, r7
 80174b2:	f7e9 fa9b 	bl	80009ec <__aeabi_dcmpeq>
 80174b6:	b110      	cbz	r0, 80174be <_dtoa_r+0x68e>
 80174b8:	f019 0f01 	tst.w	r9, #1
 80174bc:	d10f      	bne.n	80174de <_dtoa_r+0x6ae>
 80174be:	4659      	mov	r1, fp
 80174c0:	4620      	mov	r0, r4
 80174c2:	f000 ffff 	bl	80184c4 <_Bfree>
 80174c6:	2300      	movs	r3, #0
 80174c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80174ca:	702b      	strb	r3, [r5, #0]
 80174cc:	f10a 0301 	add.w	r3, sl, #1
 80174d0:	6013      	str	r3, [r2, #0]
 80174d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	f43f acf3 	beq.w	8016ec0 <_dtoa_r+0x90>
 80174da:	601d      	str	r5, [r3, #0]
 80174dc:	e4f0      	b.n	8016ec0 <_dtoa_r+0x90>
 80174de:	4657      	mov	r7, sl
 80174e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80174e4:	1e6b      	subs	r3, r5, #1
 80174e6:	2a39      	cmp	r2, #57	; 0x39
 80174e8:	d106      	bne.n	80174f8 <_dtoa_r+0x6c8>
 80174ea:	9a06      	ldr	r2, [sp, #24]
 80174ec:	429a      	cmp	r2, r3
 80174ee:	d107      	bne.n	8017500 <_dtoa_r+0x6d0>
 80174f0:	2330      	movs	r3, #48	; 0x30
 80174f2:	7013      	strb	r3, [r2, #0]
 80174f4:	4613      	mov	r3, r2
 80174f6:	3701      	adds	r7, #1
 80174f8:	781a      	ldrb	r2, [r3, #0]
 80174fa:	3201      	adds	r2, #1
 80174fc:	701a      	strb	r2, [r3, #0]
 80174fe:	e791      	b.n	8017424 <_dtoa_r+0x5f4>
 8017500:	461d      	mov	r5, r3
 8017502:	e7ed      	b.n	80174e0 <_dtoa_r+0x6b0>
 8017504:	2200      	movs	r2, #0
 8017506:	4b99      	ldr	r3, [pc, #612]	; (801776c <_dtoa_r+0x93c>)
 8017508:	f7e9 f808 	bl	800051c <__aeabi_dmul>
 801750c:	2200      	movs	r2, #0
 801750e:	2300      	movs	r3, #0
 8017510:	4606      	mov	r6, r0
 8017512:	460f      	mov	r7, r1
 8017514:	f7e9 fa6a 	bl	80009ec <__aeabi_dcmpeq>
 8017518:	2800      	cmp	r0, #0
 801751a:	d09e      	beq.n	801745a <_dtoa_r+0x62a>
 801751c:	e7cf      	b.n	80174be <_dtoa_r+0x68e>
 801751e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017520:	2a00      	cmp	r2, #0
 8017522:	f000 8088 	beq.w	8017636 <_dtoa_r+0x806>
 8017526:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017528:	2a01      	cmp	r2, #1
 801752a:	dc6d      	bgt.n	8017608 <_dtoa_r+0x7d8>
 801752c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801752e:	2a00      	cmp	r2, #0
 8017530:	d066      	beq.n	8017600 <_dtoa_r+0x7d0>
 8017532:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017536:	464d      	mov	r5, r9
 8017538:	9e08      	ldr	r6, [sp, #32]
 801753a:	9a07      	ldr	r2, [sp, #28]
 801753c:	2101      	movs	r1, #1
 801753e:	441a      	add	r2, r3
 8017540:	4620      	mov	r0, r4
 8017542:	4499      	add	r9, r3
 8017544:	9207      	str	r2, [sp, #28]
 8017546:	f001 f89b 	bl	8018680 <__i2b>
 801754a:	4607      	mov	r7, r0
 801754c:	2d00      	cmp	r5, #0
 801754e:	dd0b      	ble.n	8017568 <_dtoa_r+0x738>
 8017550:	9b07      	ldr	r3, [sp, #28]
 8017552:	2b00      	cmp	r3, #0
 8017554:	dd08      	ble.n	8017568 <_dtoa_r+0x738>
 8017556:	42ab      	cmp	r3, r5
 8017558:	bfa8      	it	ge
 801755a:	462b      	movge	r3, r5
 801755c:	9a07      	ldr	r2, [sp, #28]
 801755e:	eba9 0903 	sub.w	r9, r9, r3
 8017562:	1aed      	subs	r5, r5, r3
 8017564:	1ad3      	subs	r3, r2, r3
 8017566:	9307      	str	r3, [sp, #28]
 8017568:	9b08      	ldr	r3, [sp, #32]
 801756a:	b1eb      	cbz	r3, 80175a8 <_dtoa_r+0x778>
 801756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801756e:	2b00      	cmp	r3, #0
 8017570:	d065      	beq.n	801763e <_dtoa_r+0x80e>
 8017572:	b18e      	cbz	r6, 8017598 <_dtoa_r+0x768>
 8017574:	4639      	mov	r1, r7
 8017576:	4632      	mov	r2, r6
 8017578:	4620      	mov	r0, r4
 801757a:	f001 f91f 	bl	80187bc <__pow5mult>
 801757e:	465a      	mov	r2, fp
 8017580:	4601      	mov	r1, r0
 8017582:	4607      	mov	r7, r0
 8017584:	4620      	mov	r0, r4
 8017586:	f001 f884 	bl	8018692 <__multiply>
 801758a:	4659      	mov	r1, fp
 801758c:	900a      	str	r0, [sp, #40]	; 0x28
 801758e:	4620      	mov	r0, r4
 8017590:	f000 ff98 	bl	80184c4 <_Bfree>
 8017594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017596:	469b      	mov	fp, r3
 8017598:	9b08      	ldr	r3, [sp, #32]
 801759a:	1b9a      	subs	r2, r3, r6
 801759c:	d004      	beq.n	80175a8 <_dtoa_r+0x778>
 801759e:	4659      	mov	r1, fp
 80175a0:	4620      	mov	r0, r4
 80175a2:	f001 f90b 	bl	80187bc <__pow5mult>
 80175a6:	4683      	mov	fp, r0
 80175a8:	2101      	movs	r1, #1
 80175aa:	4620      	mov	r0, r4
 80175ac:	f001 f868 	bl	8018680 <__i2b>
 80175b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175b2:	4606      	mov	r6, r0
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f000 81c6 	beq.w	8017946 <_dtoa_r+0xb16>
 80175ba:	461a      	mov	r2, r3
 80175bc:	4601      	mov	r1, r0
 80175be:	4620      	mov	r0, r4
 80175c0:	f001 f8fc 	bl	80187bc <__pow5mult>
 80175c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80175c6:	4606      	mov	r6, r0
 80175c8:	2b01      	cmp	r3, #1
 80175ca:	dc3e      	bgt.n	801764a <_dtoa_r+0x81a>
 80175cc:	9b02      	ldr	r3, [sp, #8]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d137      	bne.n	8017642 <_dtoa_r+0x812>
 80175d2:	9b03      	ldr	r3, [sp, #12]
 80175d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d134      	bne.n	8017646 <_dtoa_r+0x816>
 80175dc:	9b03      	ldr	r3, [sp, #12]
 80175de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80175e2:	0d1b      	lsrs	r3, r3, #20
 80175e4:	051b      	lsls	r3, r3, #20
 80175e6:	b12b      	cbz	r3, 80175f4 <_dtoa_r+0x7c4>
 80175e8:	9b07      	ldr	r3, [sp, #28]
 80175ea:	f109 0901 	add.w	r9, r9, #1
 80175ee:	3301      	adds	r3, #1
 80175f0:	9307      	str	r3, [sp, #28]
 80175f2:	2301      	movs	r3, #1
 80175f4:	9308      	str	r3, [sp, #32]
 80175f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d128      	bne.n	801764e <_dtoa_r+0x81e>
 80175fc:	2001      	movs	r0, #1
 80175fe:	e02e      	b.n	801765e <_dtoa_r+0x82e>
 8017600:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017602:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017606:	e796      	b.n	8017536 <_dtoa_r+0x706>
 8017608:	9b08      	ldr	r3, [sp, #32]
 801760a:	f108 36ff 	add.w	r6, r8, #4294967295
 801760e:	42b3      	cmp	r3, r6
 8017610:	bfb7      	itett	lt
 8017612:	9b08      	ldrlt	r3, [sp, #32]
 8017614:	1b9e      	subge	r6, r3, r6
 8017616:	1af2      	sublt	r2, r6, r3
 8017618:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801761a:	bfbf      	itttt	lt
 801761c:	9608      	strlt	r6, [sp, #32]
 801761e:	189b      	addlt	r3, r3, r2
 8017620:	930c      	strlt	r3, [sp, #48]	; 0x30
 8017622:	2600      	movlt	r6, #0
 8017624:	f1b8 0f00 	cmp.w	r8, #0
 8017628:	bfb9      	ittee	lt
 801762a:	eba9 0508 	sublt.w	r5, r9, r8
 801762e:	2300      	movlt	r3, #0
 8017630:	464d      	movge	r5, r9
 8017632:	4643      	movge	r3, r8
 8017634:	e781      	b.n	801753a <_dtoa_r+0x70a>
 8017636:	9e08      	ldr	r6, [sp, #32]
 8017638:	464d      	mov	r5, r9
 801763a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801763c:	e786      	b.n	801754c <_dtoa_r+0x71c>
 801763e:	9a08      	ldr	r2, [sp, #32]
 8017640:	e7ad      	b.n	801759e <_dtoa_r+0x76e>
 8017642:	2300      	movs	r3, #0
 8017644:	e7d6      	b.n	80175f4 <_dtoa_r+0x7c4>
 8017646:	9b02      	ldr	r3, [sp, #8]
 8017648:	e7d4      	b.n	80175f4 <_dtoa_r+0x7c4>
 801764a:	2300      	movs	r3, #0
 801764c:	9308      	str	r3, [sp, #32]
 801764e:	6933      	ldr	r3, [r6, #16]
 8017650:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017654:	6918      	ldr	r0, [r3, #16]
 8017656:	f000 ffc5 	bl	80185e4 <__hi0bits>
 801765a:	f1c0 0020 	rsb	r0, r0, #32
 801765e:	9b07      	ldr	r3, [sp, #28]
 8017660:	4418      	add	r0, r3
 8017662:	f010 001f 	ands.w	r0, r0, #31
 8017666:	d047      	beq.n	80176f8 <_dtoa_r+0x8c8>
 8017668:	f1c0 0320 	rsb	r3, r0, #32
 801766c:	2b04      	cmp	r3, #4
 801766e:	dd3b      	ble.n	80176e8 <_dtoa_r+0x8b8>
 8017670:	9b07      	ldr	r3, [sp, #28]
 8017672:	f1c0 001c 	rsb	r0, r0, #28
 8017676:	4481      	add	r9, r0
 8017678:	4405      	add	r5, r0
 801767a:	4403      	add	r3, r0
 801767c:	9307      	str	r3, [sp, #28]
 801767e:	f1b9 0f00 	cmp.w	r9, #0
 8017682:	dd05      	ble.n	8017690 <_dtoa_r+0x860>
 8017684:	4659      	mov	r1, fp
 8017686:	464a      	mov	r2, r9
 8017688:	4620      	mov	r0, r4
 801768a:	f001 f8e5 	bl	8018858 <__lshift>
 801768e:	4683      	mov	fp, r0
 8017690:	9b07      	ldr	r3, [sp, #28]
 8017692:	2b00      	cmp	r3, #0
 8017694:	dd05      	ble.n	80176a2 <_dtoa_r+0x872>
 8017696:	4631      	mov	r1, r6
 8017698:	461a      	mov	r2, r3
 801769a:	4620      	mov	r0, r4
 801769c:	f001 f8dc 	bl	8018858 <__lshift>
 80176a0:	4606      	mov	r6, r0
 80176a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176a4:	b353      	cbz	r3, 80176fc <_dtoa_r+0x8cc>
 80176a6:	4631      	mov	r1, r6
 80176a8:	4658      	mov	r0, fp
 80176aa:	f001 f929 	bl	8018900 <__mcmp>
 80176ae:	2800      	cmp	r0, #0
 80176b0:	da24      	bge.n	80176fc <_dtoa_r+0x8cc>
 80176b2:	2300      	movs	r3, #0
 80176b4:	4659      	mov	r1, fp
 80176b6:	220a      	movs	r2, #10
 80176b8:	4620      	mov	r0, r4
 80176ba:	f000 ff1a 	bl	80184f2 <__multadd>
 80176be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176c4:	4683      	mov	fp, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	f000 8144 	beq.w	8017954 <_dtoa_r+0xb24>
 80176cc:	2300      	movs	r3, #0
 80176ce:	4639      	mov	r1, r7
 80176d0:	220a      	movs	r2, #10
 80176d2:	4620      	mov	r0, r4
 80176d4:	f000 ff0d 	bl	80184f2 <__multadd>
 80176d8:	9b04      	ldr	r3, [sp, #16]
 80176da:	4607      	mov	r7, r0
 80176dc:	2b00      	cmp	r3, #0
 80176de:	dc4d      	bgt.n	801777c <_dtoa_r+0x94c>
 80176e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80176e2:	2b02      	cmp	r3, #2
 80176e4:	dd4a      	ble.n	801777c <_dtoa_r+0x94c>
 80176e6:	e011      	b.n	801770c <_dtoa_r+0x8dc>
 80176e8:	d0c9      	beq.n	801767e <_dtoa_r+0x84e>
 80176ea:	9a07      	ldr	r2, [sp, #28]
 80176ec:	331c      	adds	r3, #28
 80176ee:	441a      	add	r2, r3
 80176f0:	4499      	add	r9, r3
 80176f2:	441d      	add	r5, r3
 80176f4:	4613      	mov	r3, r2
 80176f6:	e7c1      	b.n	801767c <_dtoa_r+0x84c>
 80176f8:	4603      	mov	r3, r0
 80176fa:	e7f6      	b.n	80176ea <_dtoa_r+0x8ba>
 80176fc:	f1b8 0f00 	cmp.w	r8, #0
 8017700:	dc36      	bgt.n	8017770 <_dtoa_r+0x940>
 8017702:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017704:	2b02      	cmp	r3, #2
 8017706:	dd33      	ble.n	8017770 <_dtoa_r+0x940>
 8017708:	f8cd 8010 	str.w	r8, [sp, #16]
 801770c:	9b04      	ldr	r3, [sp, #16]
 801770e:	b963      	cbnz	r3, 801772a <_dtoa_r+0x8fa>
 8017710:	4631      	mov	r1, r6
 8017712:	2205      	movs	r2, #5
 8017714:	4620      	mov	r0, r4
 8017716:	f000 feec 	bl	80184f2 <__multadd>
 801771a:	4601      	mov	r1, r0
 801771c:	4606      	mov	r6, r0
 801771e:	4658      	mov	r0, fp
 8017720:	f001 f8ee 	bl	8018900 <__mcmp>
 8017724:	2800      	cmp	r0, #0
 8017726:	f73f add3 	bgt.w	80172d0 <_dtoa_r+0x4a0>
 801772a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801772c:	9d06      	ldr	r5, [sp, #24]
 801772e:	ea6f 0a03 	mvn.w	sl, r3
 8017732:	f04f 0900 	mov.w	r9, #0
 8017736:	4631      	mov	r1, r6
 8017738:	4620      	mov	r0, r4
 801773a:	f000 fec3 	bl	80184c4 <_Bfree>
 801773e:	2f00      	cmp	r7, #0
 8017740:	f43f aebd 	beq.w	80174be <_dtoa_r+0x68e>
 8017744:	f1b9 0f00 	cmp.w	r9, #0
 8017748:	d005      	beq.n	8017756 <_dtoa_r+0x926>
 801774a:	45b9      	cmp	r9, r7
 801774c:	d003      	beq.n	8017756 <_dtoa_r+0x926>
 801774e:	4649      	mov	r1, r9
 8017750:	4620      	mov	r0, r4
 8017752:	f000 feb7 	bl	80184c4 <_Bfree>
 8017756:	4639      	mov	r1, r7
 8017758:	4620      	mov	r0, r4
 801775a:	f000 feb3 	bl	80184c4 <_Bfree>
 801775e:	e6ae      	b.n	80174be <_dtoa_r+0x68e>
 8017760:	2600      	movs	r6, #0
 8017762:	4637      	mov	r7, r6
 8017764:	e7e1      	b.n	801772a <_dtoa_r+0x8fa>
 8017766:	46ba      	mov	sl, r7
 8017768:	4637      	mov	r7, r6
 801776a:	e5b1      	b.n	80172d0 <_dtoa_r+0x4a0>
 801776c:	40240000 	.word	0x40240000
 8017770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017772:	f8cd 8010 	str.w	r8, [sp, #16]
 8017776:	2b00      	cmp	r3, #0
 8017778:	f000 80f3 	beq.w	8017962 <_dtoa_r+0xb32>
 801777c:	2d00      	cmp	r5, #0
 801777e:	dd05      	ble.n	801778c <_dtoa_r+0x95c>
 8017780:	4639      	mov	r1, r7
 8017782:	462a      	mov	r2, r5
 8017784:	4620      	mov	r0, r4
 8017786:	f001 f867 	bl	8018858 <__lshift>
 801778a:	4607      	mov	r7, r0
 801778c:	9b08      	ldr	r3, [sp, #32]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d04c      	beq.n	801782c <_dtoa_r+0x9fc>
 8017792:	6879      	ldr	r1, [r7, #4]
 8017794:	4620      	mov	r0, r4
 8017796:	f000 fe61 	bl	801845c <_Balloc>
 801779a:	4605      	mov	r5, r0
 801779c:	693a      	ldr	r2, [r7, #16]
 801779e:	f107 010c 	add.w	r1, r7, #12
 80177a2:	3202      	adds	r2, #2
 80177a4:	0092      	lsls	r2, r2, #2
 80177a6:	300c      	adds	r0, #12
 80177a8:	f7fd fb70 	bl	8014e8c <memcpy>
 80177ac:	2201      	movs	r2, #1
 80177ae:	4629      	mov	r1, r5
 80177b0:	4620      	mov	r0, r4
 80177b2:	f001 f851 	bl	8018858 <__lshift>
 80177b6:	46b9      	mov	r9, r7
 80177b8:	4607      	mov	r7, r0
 80177ba:	9b06      	ldr	r3, [sp, #24]
 80177bc:	9307      	str	r3, [sp, #28]
 80177be:	9b02      	ldr	r3, [sp, #8]
 80177c0:	f003 0301 	and.w	r3, r3, #1
 80177c4:	9308      	str	r3, [sp, #32]
 80177c6:	4631      	mov	r1, r6
 80177c8:	4658      	mov	r0, fp
 80177ca:	f7ff faa1 	bl	8016d10 <quorem>
 80177ce:	4649      	mov	r1, r9
 80177d0:	4605      	mov	r5, r0
 80177d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80177d6:	4658      	mov	r0, fp
 80177d8:	f001 f892 	bl	8018900 <__mcmp>
 80177dc:	463a      	mov	r2, r7
 80177de:	9002      	str	r0, [sp, #8]
 80177e0:	4631      	mov	r1, r6
 80177e2:	4620      	mov	r0, r4
 80177e4:	f001 f8a6 	bl	8018934 <__mdiff>
 80177e8:	68c3      	ldr	r3, [r0, #12]
 80177ea:	4602      	mov	r2, r0
 80177ec:	bb03      	cbnz	r3, 8017830 <_dtoa_r+0xa00>
 80177ee:	4601      	mov	r1, r0
 80177f0:	9009      	str	r0, [sp, #36]	; 0x24
 80177f2:	4658      	mov	r0, fp
 80177f4:	f001 f884 	bl	8018900 <__mcmp>
 80177f8:	4603      	mov	r3, r0
 80177fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177fc:	4611      	mov	r1, r2
 80177fe:	4620      	mov	r0, r4
 8017800:	9309      	str	r3, [sp, #36]	; 0x24
 8017802:	f000 fe5f 	bl	80184c4 <_Bfree>
 8017806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017808:	b9a3      	cbnz	r3, 8017834 <_dtoa_r+0xa04>
 801780a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801780c:	b992      	cbnz	r2, 8017834 <_dtoa_r+0xa04>
 801780e:	9a08      	ldr	r2, [sp, #32]
 8017810:	b982      	cbnz	r2, 8017834 <_dtoa_r+0xa04>
 8017812:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017816:	d029      	beq.n	801786c <_dtoa_r+0xa3c>
 8017818:	9b02      	ldr	r3, [sp, #8]
 801781a:	2b00      	cmp	r3, #0
 801781c:	dd01      	ble.n	8017822 <_dtoa_r+0x9f2>
 801781e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017822:	9b07      	ldr	r3, [sp, #28]
 8017824:	1c5d      	adds	r5, r3, #1
 8017826:	f883 8000 	strb.w	r8, [r3]
 801782a:	e784      	b.n	8017736 <_dtoa_r+0x906>
 801782c:	4638      	mov	r0, r7
 801782e:	e7c2      	b.n	80177b6 <_dtoa_r+0x986>
 8017830:	2301      	movs	r3, #1
 8017832:	e7e3      	b.n	80177fc <_dtoa_r+0x9cc>
 8017834:	9a02      	ldr	r2, [sp, #8]
 8017836:	2a00      	cmp	r2, #0
 8017838:	db04      	blt.n	8017844 <_dtoa_r+0xa14>
 801783a:	d123      	bne.n	8017884 <_dtoa_r+0xa54>
 801783c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801783e:	bb0a      	cbnz	r2, 8017884 <_dtoa_r+0xa54>
 8017840:	9a08      	ldr	r2, [sp, #32]
 8017842:	b9fa      	cbnz	r2, 8017884 <_dtoa_r+0xa54>
 8017844:	2b00      	cmp	r3, #0
 8017846:	ddec      	ble.n	8017822 <_dtoa_r+0x9f2>
 8017848:	4659      	mov	r1, fp
 801784a:	2201      	movs	r2, #1
 801784c:	4620      	mov	r0, r4
 801784e:	f001 f803 	bl	8018858 <__lshift>
 8017852:	4631      	mov	r1, r6
 8017854:	4683      	mov	fp, r0
 8017856:	f001 f853 	bl	8018900 <__mcmp>
 801785a:	2800      	cmp	r0, #0
 801785c:	dc03      	bgt.n	8017866 <_dtoa_r+0xa36>
 801785e:	d1e0      	bne.n	8017822 <_dtoa_r+0x9f2>
 8017860:	f018 0f01 	tst.w	r8, #1
 8017864:	d0dd      	beq.n	8017822 <_dtoa_r+0x9f2>
 8017866:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801786a:	d1d8      	bne.n	801781e <_dtoa_r+0x9ee>
 801786c:	9b07      	ldr	r3, [sp, #28]
 801786e:	9a07      	ldr	r2, [sp, #28]
 8017870:	1c5d      	adds	r5, r3, #1
 8017872:	2339      	movs	r3, #57	; 0x39
 8017874:	7013      	strb	r3, [r2, #0]
 8017876:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801787a:	1e6a      	subs	r2, r5, #1
 801787c:	2b39      	cmp	r3, #57	; 0x39
 801787e:	d04d      	beq.n	801791c <_dtoa_r+0xaec>
 8017880:	3301      	adds	r3, #1
 8017882:	e052      	b.n	801792a <_dtoa_r+0xafa>
 8017884:	9a07      	ldr	r2, [sp, #28]
 8017886:	2b00      	cmp	r3, #0
 8017888:	f102 0501 	add.w	r5, r2, #1
 801788c:	dd06      	ble.n	801789c <_dtoa_r+0xa6c>
 801788e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017892:	d0eb      	beq.n	801786c <_dtoa_r+0xa3c>
 8017894:	f108 0801 	add.w	r8, r8, #1
 8017898:	9b07      	ldr	r3, [sp, #28]
 801789a:	e7c4      	b.n	8017826 <_dtoa_r+0x9f6>
 801789c:	9b06      	ldr	r3, [sp, #24]
 801789e:	9a04      	ldr	r2, [sp, #16]
 80178a0:	1aeb      	subs	r3, r5, r3
 80178a2:	4293      	cmp	r3, r2
 80178a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80178a8:	d021      	beq.n	80178ee <_dtoa_r+0xabe>
 80178aa:	4659      	mov	r1, fp
 80178ac:	2300      	movs	r3, #0
 80178ae:	220a      	movs	r2, #10
 80178b0:	4620      	mov	r0, r4
 80178b2:	f000 fe1e 	bl	80184f2 <__multadd>
 80178b6:	45b9      	cmp	r9, r7
 80178b8:	4683      	mov	fp, r0
 80178ba:	f04f 0300 	mov.w	r3, #0
 80178be:	f04f 020a 	mov.w	r2, #10
 80178c2:	4649      	mov	r1, r9
 80178c4:	4620      	mov	r0, r4
 80178c6:	d105      	bne.n	80178d4 <_dtoa_r+0xaa4>
 80178c8:	f000 fe13 	bl	80184f2 <__multadd>
 80178cc:	4681      	mov	r9, r0
 80178ce:	4607      	mov	r7, r0
 80178d0:	9507      	str	r5, [sp, #28]
 80178d2:	e778      	b.n	80177c6 <_dtoa_r+0x996>
 80178d4:	f000 fe0d 	bl	80184f2 <__multadd>
 80178d8:	4639      	mov	r1, r7
 80178da:	4681      	mov	r9, r0
 80178dc:	2300      	movs	r3, #0
 80178de:	220a      	movs	r2, #10
 80178e0:	4620      	mov	r0, r4
 80178e2:	f000 fe06 	bl	80184f2 <__multadd>
 80178e6:	4607      	mov	r7, r0
 80178e8:	e7f2      	b.n	80178d0 <_dtoa_r+0xaa0>
 80178ea:	f04f 0900 	mov.w	r9, #0
 80178ee:	4659      	mov	r1, fp
 80178f0:	2201      	movs	r2, #1
 80178f2:	4620      	mov	r0, r4
 80178f4:	f000 ffb0 	bl	8018858 <__lshift>
 80178f8:	4631      	mov	r1, r6
 80178fa:	4683      	mov	fp, r0
 80178fc:	f001 f800 	bl	8018900 <__mcmp>
 8017900:	2800      	cmp	r0, #0
 8017902:	dcb8      	bgt.n	8017876 <_dtoa_r+0xa46>
 8017904:	d102      	bne.n	801790c <_dtoa_r+0xadc>
 8017906:	f018 0f01 	tst.w	r8, #1
 801790a:	d1b4      	bne.n	8017876 <_dtoa_r+0xa46>
 801790c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017910:	1e6a      	subs	r2, r5, #1
 8017912:	2b30      	cmp	r3, #48	; 0x30
 8017914:	f47f af0f 	bne.w	8017736 <_dtoa_r+0x906>
 8017918:	4615      	mov	r5, r2
 801791a:	e7f7      	b.n	801790c <_dtoa_r+0xadc>
 801791c:	9b06      	ldr	r3, [sp, #24]
 801791e:	4293      	cmp	r3, r2
 8017920:	d105      	bne.n	801792e <_dtoa_r+0xafe>
 8017922:	2331      	movs	r3, #49	; 0x31
 8017924:	9a06      	ldr	r2, [sp, #24]
 8017926:	f10a 0a01 	add.w	sl, sl, #1
 801792a:	7013      	strb	r3, [r2, #0]
 801792c:	e703      	b.n	8017736 <_dtoa_r+0x906>
 801792e:	4615      	mov	r5, r2
 8017930:	e7a1      	b.n	8017876 <_dtoa_r+0xa46>
 8017932:	4b17      	ldr	r3, [pc, #92]	; (8017990 <_dtoa_r+0xb60>)
 8017934:	f7ff bae1 	b.w	8016efa <_dtoa_r+0xca>
 8017938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801793a:	2b00      	cmp	r3, #0
 801793c:	f47f aabb 	bne.w	8016eb6 <_dtoa_r+0x86>
 8017940:	4b14      	ldr	r3, [pc, #80]	; (8017994 <_dtoa_r+0xb64>)
 8017942:	f7ff bada 	b.w	8016efa <_dtoa_r+0xca>
 8017946:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017948:	2b01      	cmp	r3, #1
 801794a:	f77f ae3f 	ble.w	80175cc <_dtoa_r+0x79c>
 801794e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017950:	9308      	str	r3, [sp, #32]
 8017952:	e653      	b.n	80175fc <_dtoa_r+0x7cc>
 8017954:	9b04      	ldr	r3, [sp, #16]
 8017956:	2b00      	cmp	r3, #0
 8017958:	dc03      	bgt.n	8017962 <_dtoa_r+0xb32>
 801795a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801795c:	2b02      	cmp	r3, #2
 801795e:	f73f aed5 	bgt.w	801770c <_dtoa_r+0x8dc>
 8017962:	9d06      	ldr	r5, [sp, #24]
 8017964:	4631      	mov	r1, r6
 8017966:	4658      	mov	r0, fp
 8017968:	f7ff f9d2 	bl	8016d10 <quorem>
 801796c:	9b06      	ldr	r3, [sp, #24]
 801796e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017972:	f805 8b01 	strb.w	r8, [r5], #1
 8017976:	9a04      	ldr	r2, [sp, #16]
 8017978:	1aeb      	subs	r3, r5, r3
 801797a:	429a      	cmp	r2, r3
 801797c:	ddb5      	ble.n	80178ea <_dtoa_r+0xaba>
 801797e:	4659      	mov	r1, fp
 8017980:	2300      	movs	r3, #0
 8017982:	220a      	movs	r2, #10
 8017984:	4620      	mov	r0, r4
 8017986:	f000 fdb4 	bl	80184f2 <__multadd>
 801798a:	4683      	mov	fp, r0
 801798c:	e7ea      	b.n	8017964 <_dtoa_r+0xb34>
 801798e:	bf00      	nop
 8017990:	0801e84b 	.word	0x0801e84b
 8017994:	0801e6a8 	.word	0x0801e6a8

08017998 <__sflush_r>:
 8017998:	898a      	ldrh	r2, [r1, #12]
 801799a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801799e:	4605      	mov	r5, r0
 80179a0:	0710      	lsls	r0, r2, #28
 80179a2:	460c      	mov	r4, r1
 80179a4:	d458      	bmi.n	8017a58 <__sflush_r+0xc0>
 80179a6:	684b      	ldr	r3, [r1, #4]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	dc05      	bgt.n	80179b8 <__sflush_r+0x20>
 80179ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	dc02      	bgt.n	80179b8 <__sflush_r+0x20>
 80179b2:	2000      	movs	r0, #0
 80179b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179ba:	2e00      	cmp	r6, #0
 80179bc:	d0f9      	beq.n	80179b2 <__sflush_r+0x1a>
 80179be:	2300      	movs	r3, #0
 80179c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80179c4:	682f      	ldr	r7, [r5, #0]
 80179c6:	6a21      	ldr	r1, [r4, #32]
 80179c8:	602b      	str	r3, [r5, #0]
 80179ca:	d032      	beq.n	8017a32 <__sflush_r+0x9a>
 80179cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80179ce:	89a3      	ldrh	r3, [r4, #12]
 80179d0:	075a      	lsls	r2, r3, #29
 80179d2:	d505      	bpl.n	80179e0 <__sflush_r+0x48>
 80179d4:	6863      	ldr	r3, [r4, #4]
 80179d6:	1ac0      	subs	r0, r0, r3
 80179d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179da:	b10b      	cbz	r3, 80179e0 <__sflush_r+0x48>
 80179dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80179de:	1ac0      	subs	r0, r0, r3
 80179e0:	2300      	movs	r3, #0
 80179e2:	4602      	mov	r2, r0
 80179e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179e6:	6a21      	ldr	r1, [r4, #32]
 80179e8:	4628      	mov	r0, r5
 80179ea:	47b0      	blx	r6
 80179ec:	1c43      	adds	r3, r0, #1
 80179ee:	89a3      	ldrh	r3, [r4, #12]
 80179f0:	d106      	bne.n	8017a00 <__sflush_r+0x68>
 80179f2:	6829      	ldr	r1, [r5, #0]
 80179f4:	291d      	cmp	r1, #29
 80179f6:	d848      	bhi.n	8017a8a <__sflush_r+0xf2>
 80179f8:	4a29      	ldr	r2, [pc, #164]	; (8017aa0 <__sflush_r+0x108>)
 80179fa:	40ca      	lsrs	r2, r1
 80179fc:	07d6      	lsls	r6, r2, #31
 80179fe:	d544      	bpl.n	8017a8a <__sflush_r+0xf2>
 8017a00:	2200      	movs	r2, #0
 8017a02:	6062      	str	r2, [r4, #4]
 8017a04:	6922      	ldr	r2, [r4, #16]
 8017a06:	04d9      	lsls	r1, r3, #19
 8017a08:	6022      	str	r2, [r4, #0]
 8017a0a:	d504      	bpl.n	8017a16 <__sflush_r+0x7e>
 8017a0c:	1c42      	adds	r2, r0, #1
 8017a0e:	d101      	bne.n	8017a14 <__sflush_r+0x7c>
 8017a10:	682b      	ldr	r3, [r5, #0]
 8017a12:	b903      	cbnz	r3, 8017a16 <__sflush_r+0x7e>
 8017a14:	6560      	str	r0, [r4, #84]	; 0x54
 8017a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a18:	602f      	str	r7, [r5, #0]
 8017a1a:	2900      	cmp	r1, #0
 8017a1c:	d0c9      	beq.n	80179b2 <__sflush_r+0x1a>
 8017a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a22:	4299      	cmp	r1, r3
 8017a24:	d002      	beq.n	8017a2c <__sflush_r+0x94>
 8017a26:	4628      	mov	r0, r5
 8017a28:	f001 f91e 	bl	8018c68 <_free_r>
 8017a2c:	2000      	movs	r0, #0
 8017a2e:	6360      	str	r0, [r4, #52]	; 0x34
 8017a30:	e7c0      	b.n	80179b4 <__sflush_r+0x1c>
 8017a32:	2301      	movs	r3, #1
 8017a34:	4628      	mov	r0, r5
 8017a36:	47b0      	blx	r6
 8017a38:	1c41      	adds	r1, r0, #1
 8017a3a:	d1c8      	bne.n	80179ce <__sflush_r+0x36>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d0c5      	beq.n	80179ce <__sflush_r+0x36>
 8017a42:	2b1d      	cmp	r3, #29
 8017a44:	d001      	beq.n	8017a4a <__sflush_r+0xb2>
 8017a46:	2b16      	cmp	r3, #22
 8017a48:	d101      	bne.n	8017a4e <__sflush_r+0xb6>
 8017a4a:	602f      	str	r7, [r5, #0]
 8017a4c:	e7b1      	b.n	80179b2 <__sflush_r+0x1a>
 8017a4e:	89a3      	ldrh	r3, [r4, #12]
 8017a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a54:	81a3      	strh	r3, [r4, #12]
 8017a56:	e7ad      	b.n	80179b4 <__sflush_r+0x1c>
 8017a58:	690f      	ldr	r7, [r1, #16]
 8017a5a:	2f00      	cmp	r7, #0
 8017a5c:	d0a9      	beq.n	80179b2 <__sflush_r+0x1a>
 8017a5e:	0793      	lsls	r3, r2, #30
 8017a60:	bf18      	it	ne
 8017a62:	2300      	movne	r3, #0
 8017a64:	680e      	ldr	r6, [r1, #0]
 8017a66:	bf08      	it	eq
 8017a68:	694b      	ldreq	r3, [r1, #20]
 8017a6a:	eba6 0807 	sub.w	r8, r6, r7
 8017a6e:	600f      	str	r7, [r1, #0]
 8017a70:	608b      	str	r3, [r1, #8]
 8017a72:	f1b8 0f00 	cmp.w	r8, #0
 8017a76:	dd9c      	ble.n	80179b2 <__sflush_r+0x1a>
 8017a78:	4643      	mov	r3, r8
 8017a7a:	463a      	mov	r2, r7
 8017a7c:	6a21      	ldr	r1, [r4, #32]
 8017a7e:	4628      	mov	r0, r5
 8017a80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017a82:	47b0      	blx	r6
 8017a84:	2800      	cmp	r0, #0
 8017a86:	dc06      	bgt.n	8017a96 <__sflush_r+0xfe>
 8017a88:	89a3      	ldrh	r3, [r4, #12]
 8017a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a8e:	81a3      	strh	r3, [r4, #12]
 8017a90:	f04f 30ff 	mov.w	r0, #4294967295
 8017a94:	e78e      	b.n	80179b4 <__sflush_r+0x1c>
 8017a96:	4407      	add	r7, r0
 8017a98:	eba8 0800 	sub.w	r8, r8, r0
 8017a9c:	e7e9      	b.n	8017a72 <__sflush_r+0xda>
 8017a9e:	bf00      	nop
 8017aa0:	20400001 	.word	0x20400001

08017aa4 <_fflush_r>:
 8017aa4:	b538      	push	{r3, r4, r5, lr}
 8017aa6:	690b      	ldr	r3, [r1, #16]
 8017aa8:	4605      	mov	r5, r0
 8017aaa:	460c      	mov	r4, r1
 8017aac:	b1db      	cbz	r3, 8017ae6 <_fflush_r+0x42>
 8017aae:	b118      	cbz	r0, 8017ab8 <_fflush_r+0x14>
 8017ab0:	6983      	ldr	r3, [r0, #24]
 8017ab2:	b90b      	cbnz	r3, 8017ab8 <_fflush_r+0x14>
 8017ab4:	f000 f860 	bl	8017b78 <__sinit>
 8017ab8:	4b0c      	ldr	r3, [pc, #48]	; (8017aec <_fflush_r+0x48>)
 8017aba:	429c      	cmp	r4, r3
 8017abc:	d109      	bne.n	8017ad2 <_fflush_r+0x2e>
 8017abe:	686c      	ldr	r4, [r5, #4]
 8017ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ac4:	b17b      	cbz	r3, 8017ae6 <_fflush_r+0x42>
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	4628      	mov	r0, r5
 8017aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ace:	f7ff bf63 	b.w	8017998 <__sflush_r>
 8017ad2:	4b07      	ldr	r3, [pc, #28]	; (8017af0 <_fflush_r+0x4c>)
 8017ad4:	429c      	cmp	r4, r3
 8017ad6:	d101      	bne.n	8017adc <_fflush_r+0x38>
 8017ad8:	68ac      	ldr	r4, [r5, #8]
 8017ada:	e7f1      	b.n	8017ac0 <_fflush_r+0x1c>
 8017adc:	4b05      	ldr	r3, [pc, #20]	; (8017af4 <_fflush_r+0x50>)
 8017ade:	429c      	cmp	r4, r3
 8017ae0:	bf08      	it	eq
 8017ae2:	68ec      	ldreq	r4, [r5, #12]
 8017ae4:	e7ec      	b.n	8017ac0 <_fflush_r+0x1c>
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	bd38      	pop	{r3, r4, r5, pc}
 8017aea:	bf00      	nop
 8017aec:	0801e6d8 	.word	0x0801e6d8
 8017af0:	0801e6f8 	.word	0x0801e6f8
 8017af4:	0801e6b8 	.word	0x0801e6b8

08017af8 <std>:
 8017af8:	2300      	movs	r3, #0
 8017afa:	b510      	push	{r4, lr}
 8017afc:	4604      	mov	r4, r0
 8017afe:	e9c0 3300 	strd	r3, r3, [r0]
 8017b02:	6083      	str	r3, [r0, #8]
 8017b04:	8181      	strh	r1, [r0, #12]
 8017b06:	6643      	str	r3, [r0, #100]	; 0x64
 8017b08:	81c2      	strh	r2, [r0, #14]
 8017b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b0e:	6183      	str	r3, [r0, #24]
 8017b10:	4619      	mov	r1, r3
 8017b12:	2208      	movs	r2, #8
 8017b14:	305c      	adds	r0, #92	; 0x5c
 8017b16:	f7fd f9dd 	bl	8014ed4 <memset>
 8017b1a:	4b05      	ldr	r3, [pc, #20]	; (8017b30 <std+0x38>)
 8017b1c:	6224      	str	r4, [r4, #32]
 8017b1e:	6263      	str	r3, [r4, #36]	; 0x24
 8017b20:	4b04      	ldr	r3, [pc, #16]	; (8017b34 <std+0x3c>)
 8017b22:	62a3      	str	r3, [r4, #40]	; 0x28
 8017b24:	4b04      	ldr	r3, [pc, #16]	; (8017b38 <std+0x40>)
 8017b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b28:	4b04      	ldr	r3, [pc, #16]	; (8017b3c <std+0x44>)
 8017b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8017b2c:	bd10      	pop	{r4, pc}
 8017b2e:	bf00      	nop
 8017b30:	08015cd9 	.word	0x08015cd9
 8017b34:	08015cff 	.word	0x08015cff
 8017b38:	08015d37 	.word	0x08015d37
 8017b3c:	08015d5b 	.word	0x08015d5b

08017b40 <_cleanup_r>:
 8017b40:	4901      	ldr	r1, [pc, #4]	; (8017b48 <_cleanup_r+0x8>)
 8017b42:	f000 b885 	b.w	8017c50 <_fwalk_reent>
 8017b46:	bf00      	nop
 8017b48:	08017aa5 	.word	0x08017aa5

08017b4c <__sfmoreglue>:
 8017b4c:	b570      	push	{r4, r5, r6, lr}
 8017b4e:	2568      	movs	r5, #104	; 0x68
 8017b50:	1e4a      	subs	r2, r1, #1
 8017b52:	4355      	muls	r5, r2
 8017b54:	460e      	mov	r6, r1
 8017b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017b5a:	f001 f8d1 	bl	8018d00 <_malloc_r>
 8017b5e:	4604      	mov	r4, r0
 8017b60:	b140      	cbz	r0, 8017b74 <__sfmoreglue+0x28>
 8017b62:	2100      	movs	r1, #0
 8017b64:	e9c0 1600 	strd	r1, r6, [r0]
 8017b68:	300c      	adds	r0, #12
 8017b6a:	60a0      	str	r0, [r4, #8]
 8017b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017b70:	f7fd f9b0 	bl	8014ed4 <memset>
 8017b74:	4620      	mov	r0, r4
 8017b76:	bd70      	pop	{r4, r5, r6, pc}

08017b78 <__sinit>:
 8017b78:	6983      	ldr	r3, [r0, #24]
 8017b7a:	b510      	push	{r4, lr}
 8017b7c:	4604      	mov	r4, r0
 8017b7e:	bb33      	cbnz	r3, 8017bce <__sinit+0x56>
 8017b80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017b84:	6503      	str	r3, [r0, #80]	; 0x50
 8017b86:	4b12      	ldr	r3, [pc, #72]	; (8017bd0 <__sinit+0x58>)
 8017b88:	4a12      	ldr	r2, [pc, #72]	; (8017bd4 <__sinit+0x5c>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	6282      	str	r2, [r0, #40]	; 0x28
 8017b8e:	4298      	cmp	r0, r3
 8017b90:	bf04      	itt	eq
 8017b92:	2301      	moveq	r3, #1
 8017b94:	6183      	streq	r3, [r0, #24]
 8017b96:	f000 f81f 	bl	8017bd8 <__sfp>
 8017b9a:	6060      	str	r0, [r4, #4]
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f000 f81b 	bl	8017bd8 <__sfp>
 8017ba2:	60a0      	str	r0, [r4, #8]
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	f000 f817 	bl	8017bd8 <__sfp>
 8017baa:	2200      	movs	r2, #0
 8017bac:	60e0      	str	r0, [r4, #12]
 8017bae:	2104      	movs	r1, #4
 8017bb0:	6860      	ldr	r0, [r4, #4]
 8017bb2:	f7ff ffa1 	bl	8017af8 <std>
 8017bb6:	2201      	movs	r2, #1
 8017bb8:	2109      	movs	r1, #9
 8017bba:	68a0      	ldr	r0, [r4, #8]
 8017bbc:	f7ff ff9c 	bl	8017af8 <std>
 8017bc0:	2202      	movs	r2, #2
 8017bc2:	2112      	movs	r1, #18
 8017bc4:	68e0      	ldr	r0, [r4, #12]
 8017bc6:	f7ff ff97 	bl	8017af8 <std>
 8017bca:	2301      	movs	r3, #1
 8017bcc:	61a3      	str	r3, [r4, #24]
 8017bce:	bd10      	pop	{r4, pc}
 8017bd0:	0801e618 	.word	0x0801e618
 8017bd4:	08017b41 	.word	0x08017b41

08017bd8 <__sfp>:
 8017bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bda:	4b1b      	ldr	r3, [pc, #108]	; (8017c48 <__sfp+0x70>)
 8017bdc:	4607      	mov	r7, r0
 8017bde:	681e      	ldr	r6, [r3, #0]
 8017be0:	69b3      	ldr	r3, [r6, #24]
 8017be2:	b913      	cbnz	r3, 8017bea <__sfp+0x12>
 8017be4:	4630      	mov	r0, r6
 8017be6:	f7ff ffc7 	bl	8017b78 <__sinit>
 8017bea:	3648      	adds	r6, #72	; 0x48
 8017bec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017bf0:	3b01      	subs	r3, #1
 8017bf2:	d503      	bpl.n	8017bfc <__sfp+0x24>
 8017bf4:	6833      	ldr	r3, [r6, #0]
 8017bf6:	b133      	cbz	r3, 8017c06 <__sfp+0x2e>
 8017bf8:	6836      	ldr	r6, [r6, #0]
 8017bfa:	e7f7      	b.n	8017bec <__sfp+0x14>
 8017bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017c00:	b16d      	cbz	r5, 8017c1e <__sfp+0x46>
 8017c02:	3468      	adds	r4, #104	; 0x68
 8017c04:	e7f4      	b.n	8017bf0 <__sfp+0x18>
 8017c06:	2104      	movs	r1, #4
 8017c08:	4638      	mov	r0, r7
 8017c0a:	f7ff ff9f 	bl	8017b4c <__sfmoreglue>
 8017c0e:	6030      	str	r0, [r6, #0]
 8017c10:	2800      	cmp	r0, #0
 8017c12:	d1f1      	bne.n	8017bf8 <__sfp+0x20>
 8017c14:	230c      	movs	r3, #12
 8017c16:	4604      	mov	r4, r0
 8017c18:	603b      	str	r3, [r7, #0]
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c1e:	4b0b      	ldr	r3, [pc, #44]	; (8017c4c <__sfp+0x74>)
 8017c20:	6665      	str	r5, [r4, #100]	; 0x64
 8017c22:	e9c4 5500 	strd	r5, r5, [r4]
 8017c26:	60a5      	str	r5, [r4, #8]
 8017c28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017c2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017c30:	2208      	movs	r2, #8
 8017c32:	4629      	mov	r1, r5
 8017c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017c38:	f7fd f94c 	bl	8014ed4 <memset>
 8017c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017c44:	e7e9      	b.n	8017c1a <__sfp+0x42>
 8017c46:	bf00      	nop
 8017c48:	0801e618 	.word	0x0801e618
 8017c4c:	ffff0001 	.word	0xffff0001

08017c50 <_fwalk_reent>:
 8017c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c54:	4680      	mov	r8, r0
 8017c56:	4689      	mov	r9, r1
 8017c58:	2600      	movs	r6, #0
 8017c5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017c5e:	b914      	cbnz	r4, 8017c66 <_fwalk_reent+0x16>
 8017c60:	4630      	mov	r0, r6
 8017c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017c6a:	3f01      	subs	r7, #1
 8017c6c:	d501      	bpl.n	8017c72 <_fwalk_reent+0x22>
 8017c6e:	6824      	ldr	r4, [r4, #0]
 8017c70:	e7f5      	b.n	8017c5e <_fwalk_reent+0xe>
 8017c72:	89ab      	ldrh	r3, [r5, #12]
 8017c74:	2b01      	cmp	r3, #1
 8017c76:	d907      	bls.n	8017c88 <_fwalk_reent+0x38>
 8017c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c7c:	3301      	adds	r3, #1
 8017c7e:	d003      	beq.n	8017c88 <_fwalk_reent+0x38>
 8017c80:	4629      	mov	r1, r5
 8017c82:	4640      	mov	r0, r8
 8017c84:	47c8      	blx	r9
 8017c86:	4306      	orrs	r6, r0
 8017c88:	3568      	adds	r5, #104	; 0x68
 8017c8a:	e7ee      	b.n	8017c6a <_fwalk_reent+0x1a>

08017c8c <rshift>:
 8017c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c8e:	6906      	ldr	r6, [r0, #16]
 8017c90:	114b      	asrs	r3, r1, #5
 8017c92:	429e      	cmp	r6, r3
 8017c94:	f100 0414 	add.w	r4, r0, #20
 8017c98:	dd31      	ble.n	8017cfe <rshift+0x72>
 8017c9a:	f011 011f 	ands.w	r1, r1, #31
 8017c9e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017ca2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017ca6:	d108      	bne.n	8017cba <rshift+0x2e>
 8017ca8:	4621      	mov	r1, r4
 8017caa:	42b2      	cmp	r2, r6
 8017cac:	460b      	mov	r3, r1
 8017cae:	d211      	bcs.n	8017cd4 <rshift+0x48>
 8017cb0:	f852 3b04 	ldr.w	r3, [r2], #4
 8017cb4:	f841 3b04 	str.w	r3, [r1], #4
 8017cb8:	e7f7      	b.n	8017caa <rshift+0x1e>
 8017cba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017cbe:	4623      	mov	r3, r4
 8017cc0:	f1c1 0c20 	rsb	ip, r1, #32
 8017cc4:	40cd      	lsrs	r5, r1
 8017cc6:	3204      	adds	r2, #4
 8017cc8:	42b2      	cmp	r2, r6
 8017cca:	4617      	mov	r7, r2
 8017ccc:	d30d      	bcc.n	8017cea <rshift+0x5e>
 8017cce:	601d      	str	r5, [r3, #0]
 8017cd0:	b105      	cbz	r5, 8017cd4 <rshift+0x48>
 8017cd2:	3304      	adds	r3, #4
 8017cd4:	42a3      	cmp	r3, r4
 8017cd6:	eba3 0204 	sub.w	r2, r3, r4
 8017cda:	bf08      	it	eq
 8017cdc:	2300      	moveq	r3, #0
 8017cde:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017ce2:	6102      	str	r2, [r0, #16]
 8017ce4:	bf08      	it	eq
 8017ce6:	6143      	streq	r3, [r0, #20]
 8017ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cea:	683f      	ldr	r7, [r7, #0]
 8017cec:	fa07 f70c 	lsl.w	r7, r7, ip
 8017cf0:	433d      	orrs	r5, r7
 8017cf2:	f843 5b04 	str.w	r5, [r3], #4
 8017cf6:	f852 5b04 	ldr.w	r5, [r2], #4
 8017cfa:	40cd      	lsrs	r5, r1
 8017cfc:	e7e4      	b.n	8017cc8 <rshift+0x3c>
 8017cfe:	4623      	mov	r3, r4
 8017d00:	e7e8      	b.n	8017cd4 <rshift+0x48>

08017d02 <__hexdig_fun>:
 8017d02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017d06:	2b09      	cmp	r3, #9
 8017d08:	d802      	bhi.n	8017d10 <__hexdig_fun+0xe>
 8017d0a:	3820      	subs	r0, #32
 8017d0c:	b2c0      	uxtb	r0, r0
 8017d0e:	4770      	bx	lr
 8017d10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017d14:	2b05      	cmp	r3, #5
 8017d16:	d801      	bhi.n	8017d1c <__hexdig_fun+0x1a>
 8017d18:	3847      	subs	r0, #71	; 0x47
 8017d1a:	e7f7      	b.n	8017d0c <__hexdig_fun+0xa>
 8017d1c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017d20:	2b05      	cmp	r3, #5
 8017d22:	d801      	bhi.n	8017d28 <__hexdig_fun+0x26>
 8017d24:	3827      	subs	r0, #39	; 0x27
 8017d26:	e7f1      	b.n	8017d0c <__hexdig_fun+0xa>
 8017d28:	2000      	movs	r0, #0
 8017d2a:	4770      	bx	lr

08017d2c <__gethex>:
 8017d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d30:	b08b      	sub	sp, #44	; 0x2c
 8017d32:	9002      	str	r0, [sp, #8]
 8017d34:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017d36:	468a      	mov	sl, r1
 8017d38:	4690      	mov	r8, r2
 8017d3a:	9306      	str	r3, [sp, #24]
 8017d3c:	f000 fae0 	bl	8018300 <__localeconv_l>
 8017d40:	6803      	ldr	r3, [r0, #0]
 8017d42:	f04f 0b00 	mov.w	fp, #0
 8017d46:	4618      	mov	r0, r3
 8017d48:	9303      	str	r3, [sp, #12]
 8017d4a:	f7e8 fa23 	bl	8000194 <strlen>
 8017d4e:	9b03      	ldr	r3, [sp, #12]
 8017d50:	9001      	str	r0, [sp, #4]
 8017d52:	4403      	add	r3, r0
 8017d54:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017d58:	9307      	str	r3, [sp, #28]
 8017d5a:	f8da 3000 	ldr.w	r3, [sl]
 8017d5e:	3302      	adds	r3, #2
 8017d60:	461f      	mov	r7, r3
 8017d62:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017d66:	2830      	cmp	r0, #48	; 0x30
 8017d68:	d06c      	beq.n	8017e44 <__gethex+0x118>
 8017d6a:	f7ff ffca 	bl	8017d02 <__hexdig_fun>
 8017d6e:	4604      	mov	r4, r0
 8017d70:	2800      	cmp	r0, #0
 8017d72:	d16a      	bne.n	8017e4a <__gethex+0x11e>
 8017d74:	9a01      	ldr	r2, [sp, #4]
 8017d76:	9903      	ldr	r1, [sp, #12]
 8017d78:	4638      	mov	r0, r7
 8017d7a:	f7fd fffa 	bl	8015d72 <strncmp>
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	d166      	bne.n	8017e50 <__gethex+0x124>
 8017d82:	9b01      	ldr	r3, [sp, #4]
 8017d84:	5cf8      	ldrb	r0, [r7, r3]
 8017d86:	18fe      	adds	r6, r7, r3
 8017d88:	f7ff ffbb 	bl	8017d02 <__hexdig_fun>
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	d062      	beq.n	8017e56 <__gethex+0x12a>
 8017d90:	4633      	mov	r3, r6
 8017d92:	7818      	ldrb	r0, [r3, #0]
 8017d94:	461f      	mov	r7, r3
 8017d96:	2830      	cmp	r0, #48	; 0x30
 8017d98:	f103 0301 	add.w	r3, r3, #1
 8017d9c:	d0f9      	beq.n	8017d92 <__gethex+0x66>
 8017d9e:	f7ff ffb0 	bl	8017d02 <__hexdig_fun>
 8017da2:	fab0 f580 	clz	r5, r0
 8017da6:	4634      	mov	r4, r6
 8017da8:	f04f 0b01 	mov.w	fp, #1
 8017dac:	096d      	lsrs	r5, r5, #5
 8017dae:	463a      	mov	r2, r7
 8017db0:	4616      	mov	r6, r2
 8017db2:	7830      	ldrb	r0, [r6, #0]
 8017db4:	3201      	adds	r2, #1
 8017db6:	f7ff ffa4 	bl	8017d02 <__hexdig_fun>
 8017dba:	2800      	cmp	r0, #0
 8017dbc:	d1f8      	bne.n	8017db0 <__gethex+0x84>
 8017dbe:	9a01      	ldr	r2, [sp, #4]
 8017dc0:	9903      	ldr	r1, [sp, #12]
 8017dc2:	4630      	mov	r0, r6
 8017dc4:	f7fd ffd5 	bl	8015d72 <strncmp>
 8017dc8:	b950      	cbnz	r0, 8017de0 <__gethex+0xb4>
 8017dca:	b954      	cbnz	r4, 8017de2 <__gethex+0xb6>
 8017dcc:	9b01      	ldr	r3, [sp, #4]
 8017dce:	18f4      	adds	r4, r6, r3
 8017dd0:	4622      	mov	r2, r4
 8017dd2:	4616      	mov	r6, r2
 8017dd4:	7830      	ldrb	r0, [r6, #0]
 8017dd6:	3201      	adds	r2, #1
 8017dd8:	f7ff ff93 	bl	8017d02 <__hexdig_fun>
 8017ddc:	2800      	cmp	r0, #0
 8017dde:	d1f8      	bne.n	8017dd2 <__gethex+0xa6>
 8017de0:	b10c      	cbz	r4, 8017de6 <__gethex+0xba>
 8017de2:	1ba4      	subs	r4, r4, r6
 8017de4:	00a4      	lsls	r4, r4, #2
 8017de6:	7833      	ldrb	r3, [r6, #0]
 8017de8:	2b50      	cmp	r3, #80	; 0x50
 8017dea:	d001      	beq.n	8017df0 <__gethex+0xc4>
 8017dec:	2b70      	cmp	r3, #112	; 0x70
 8017dee:	d140      	bne.n	8017e72 <__gethex+0x146>
 8017df0:	7873      	ldrb	r3, [r6, #1]
 8017df2:	2b2b      	cmp	r3, #43	; 0x2b
 8017df4:	d031      	beq.n	8017e5a <__gethex+0x12e>
 8017df6:	2b2d      	cmp	r3, #45	; 0x2d
 8017df8:	d033      	beq.n	8017e62 <__gethex+0x136>
 8017dfa:	f04f 0900 	mov.w	r9, #0
 8017dfe:	1c71      	adds	r1, r6, #1
 8017e00:	7808      	ldrb	r0, [r1, #0]
 8017e02:	f7ff ff7e 	bl	8017d02 <__hexdig_fun>
 8017e06:	1e43      	subs	r3, r0, #1
 8017e08:	b2db      	uxtb	r3, r3
 8017e0a:	2b18      	cmp	r3, #24
 8017e0c:	d831      	bhi.n	8017e72 <__gethex+0x146>
 8017e0e:	f1a0 0210 	sub.w	r2, r0, #16
 8017e12:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017e16:	f7ff ff74 	bl	8017d02 <__hexdig_fun>
 8017e1a:	1e43      	subs	r3, r0, #1
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	2b18      	cmp	r3, #24
 8017e20:	d922      	bls.n	8017e68 <__gethex+0x13c>
 8017e22:	f1b9 0f00 	cmp.w	r9, #0
 8017e26:	d000      	beq.n	8017e2a <__gethex+0xfe>
 8017e28:	4252      	negs	r2, r2
 8017e2a:	4414      	add	r4, r2
 8017e2c:	f8ca 1000 	str.w	r1, [sl]
 8017e30:	b30d      	cbz	r5, 8017e76 <__gethex+0x14a>
 8017e32:	f1bb 0f00 	cmp.w	fp, #0
 8017e36:	bf0c      	ite	eq
 8017e38:	2706      	moveq	r7, #6
 8017e3a:	2700      	movne	r7, #0
 8017e3c:	4638      	mov	r0, r7
 8017e3e:	b00b      	add	sp, #44	; 0x2c
 8017e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e44:	f10b 0b01 	add.w	fp, fp, #1
 8017e48:	e78a      	b.n	8017d60 <__gethex+0x34>
 8017e4a:	2500      	movs	r5, #0
 8017e4c:	462c      	mov	r4, r5
 8017e4e:	e7ae      	b.n	8017dae <__gethex+0x82>
 8017e50:	463e      	mov	r6, r7
 8017e52:	2501      	movs	r5, #1
 8017e54:	e7c7      	b.n	8017de6 <__gethex+0xba>
 8017e56:	4604      	mov	r4, r0
 8017e58:	e7fb      	b.n	8017e52 <__gethex+0x126>
 8017e5a:	f04f 0900 	mov.w	r9, #0
 8017e5e:	1cb1      	adds	r1, r6, #2
 8017e60:	e7ce      	b.n	8017e00 <__gethex+0xd4>
 8017e62:	f04f 0901 	mov.w	r9, #1
 8017e66:	e7fa      	b.n	8017e5e <__gethex+0x132>
 8017e68:	230a      	movs	r3, #10
 8017e6a:	fb03 0202 	mla	r2, r3, r2, r0
 8017e6e:	3a10      	subs	r2, #16
 8017e70:	e7cf      	b.n	8017e12 <__gethex+0xe6>
 8017e72:	4631      	mov	r1, r6
 8017e74:	e7da      	b.n	8017e2c <__gethex+0x100>
 8017e76:	4629      	mov	r1, r5
 8017e78:	1bf3      	subs	r3, r6, r7
 8017e7a:	3b01      	subs	r3, #1
 8017e7c:	2b07      	cmp	r3, #7
 8017e7e:	dc49      	bgt.n	8017f14 <__gethex+0x1e8>
 8017e80:	9802      	ldr	r0, [sp, #8]
 8017e82:	f000 faeb 	bl	801845c <_Balloc>
 8017e86:	f04f 0b00 	mov.w	fp, #0
 8017e8a:	4605      	mov	r5, r0
 8017e8c:	46da      	mov	sl, fp
 8017e8e:	9b01      	ldr	r3, [sp, #4]
 8017e90:	f100 0914 	add.w	r9, r0, #20
 8017e94:	f1c3 0301 	rsb	r3, r3, #1
 8017e98:	f8cd 9010 	str.w	r9, [sp, #16]
 8017e9c:	9308      	str	r3, [sp, #32]
 8017e9e:	42b7      	cmp	r7, r6
 8017ea0:	d33b      	bcc.n	8017f1a <__gethex+0x1ee>
 8017ea2:	9804      	ldr	r0, [sp, #16]
 8017ea4:	f840 ab04 	str.w	sl, [r0], #4
 8017ea8:	eba0 0009 	sub.w	r0, r0, r9
 8017eac:	1080      	asrs	r0, r0, #2
 8017eae:	6128      	str	r0, [r5, #16]
 8017eb0:	0147      	lsls	r7, r0, #5
 8017eb2:	4650      	mov	r0, sl
 8017eb4:	f000 fb96 	bl	80185e4 <__hi0bits>
 8017eb8:	f8d8 6000 	ldr.w	r6, [r8]
 8017ebc:	1a3f      	subs	r7, r7, r0
 8017ebe:	42b7      	cmp	r7, r6
 8017ec0:	dd64      	ble.n	8017f8c <__gethex+0x260>
 8017ec2:	1bbf      	subs	r7, r7, r6
 8017ec4:	4639      	mov	r1, r7
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	f000 fe9f 	bl	8018c0a <__any_on>
 8017ecc:	4682      	mov	sl, r0
 8017ece:	b178      	cbz	r0, 8017ef0 <__gethex+0x1c4>
 8017ed0:	f04f 0a01 	mov.w	sl, #1
 8017ed4:	1e7b      	subs	r3, r7, #1
 8017ed6:	1159      	asrs	r1, r3, #5
 8017ed8:	f003 021f 	and.w	r2, r3, #31
 8017edc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017ee0:	fa0a f202 	lsl.w	r2, sl, r2
 8017ee4:	420a      	tst	r2, r1
 8017ee6:	d003      	beq.n	8017ef0 <__gethex+0x1c4>
 8017ee8:	4553      	cmp	r3, sl
 8017eea:	dc46      	bgt.n	8017f7a <__gethex+0x24e>
 8017eec:	f04f 0a02 	mov.w	sl, #2
 8017ef0:	4639      	mov	r1, r7
 8017ef2:	4628      	mov	r0, r5
 8017ef4:	f7ff feca 	bl	8017c8c <rshift>
 8017ef8:	443c      	add	r4, r7
 8017efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017efe:	42a3      	cmp	r3, r4
 8017f00:	da52      	bge.n	8017fa8 <__gethex+0x27c>
 8017f02:	4629      	mov	r1, r5
 8017f04:	9802      	ldr	r0, [sp, #8]
 8017f06:	f000 fadd 	bl	80184c4 <_Bfree>
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f0e:	27a3      	movs	r7, #163	; 0xa3
 8017f10:	6013      	str	r3, [r2, #0]
 8017f12:	e793      	b.n	8017e3c <__gethex+0x110>
 8017f14:	3101      	adds	r1, #1
 8017f16:	105b      	asrs	r3, r3, #1
 8017f18:	e7b0      	b.n	8017e7c <__gethex+0x150>
 8017f1a:	1e73      	subs	r3, r6, #1
 8017f1c:	9305      	str	r3, [sp, #20]
 8017f1e:	9a07      	ldr	r2, [sp, #28]
 8017f20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017f24:	4293      	cmp	r3, r2
 8017f26:	d018      	beq.n	8017f5a <__gethex+0x22e>
 8017f28:	f1bb 0f20 	cmp.w	fp, #32
 8017f2c:	d107      	bne.n	8017f3e <__gethex+0x212>
 8017f2e:	9b04      	ldr	r3, [sp, #16]
 8017f30:	f8c3 a000 	str.w	sl, [r3]
 8017f34:	f04f 0a00 	mov.w	sl, #0
 8017f38:	46d3      	mov	fp, sl
 8017f3a:	3304      	adds	r3, #4
 8017f3c:	9304      	str	r3, [sp, #16]
 8017f3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017f42:	f7ff fede 	bl	8017d02 <__hexdig_fun>
 8017f46:	f000 000f 	and.w	r0, r0, #15
 8017f4a:	fa00 f00b 	lsl.w	r0, r0, fp
 8017f4e:	ea4a 0a00 	orr.w	sl, sl, r0
 8017f52:	f10b 0b04 	add.w	fp, fp, #4
 8017f56:	9b05      	ldr	r3, [sp, #20]
 8017f58:	e00d      	b.n	8017f76 <__gethex+0x24a>
 8017f5a:	9b05      	ldr	r3, [sp, #20]
 8017f5c:	9a08      	ldr	r2, [sp, #32]
 8017f5e:	4413      	add	r3, r2
 8017f60:	42bb      	cmp	r3, r7
 8017f62:	d3e1      	bcc.n	8017f28 <__gethex+0x1fc>
 8017f64:	4618      	mov	r0, r3
 8017f66:	9a01      	ldr	r2, [sp, #4]
 8017f68:	9903      	ldr	r1, [sp, #12]
 8017f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017f6c:	f7fd ff01 	bl	8015d72 <strncmp>
 8017f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f72:	2800      	cmp	r0, #0
 8017f74:	d1d8      	bne.n	8017f28 <__gethex+0x1fc>
 8017f76:	461e      	mov	r6, r3
 8017f78:	e791      	b.n	8017e9e <__gethex+0x172>
 8017f7a:	1eb9      	subs	r1, r7, #2
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	f000 fe44 	bl	8018c0a <__any_on>
 8017f82:	2800      	cmp	r0, #0
 8017f84:	d0b2      	beq.n	8017eec <__gethex+0x1c0>
 8017f86:	f04f 0a03 	mov.w	sl, #3
 8017f8a:	e7b1      	b.n	8017ef0 <__gethex+0x1c4>
 8017f8c:	da09      	bge.n	8017fa2 <__gethex+0x276>
 8017f8e:	1bf7      	subs	r7, r6, r7
 8017f90:	4629      	mov	r1, r5
 8017f92:	463a      	mov	r2, r7
 8017f94:	9802      	ldr	r0, [sp, #8]
 8017f96:	f000 fc5f 	bl	8018858 <__lshift>
 8017f9a:	4605      	mov	r5, r0
 8017f9c:	1be4      	subs	r4, r4, r7
 8017f9e:	f100 0914 	add.w	r9, r0, #20
 8017fa2:	f04f 0a00 	mov.w	sl, #0
 8017fa6:	e7a8      	b.n	8017efa <__gethex+0x1ce>
 8017fa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017fac:	42a0      	cmp	r0, r4
 8017fae:	dd6b      	ble.n	8018088 <__gethex+0x35c>
 8017fb0:	1b04      	subs	r4, r0, r4
 8017fb2:	42a6      	cmp	r6, r4
 8017fb4:	dc2e      	bgt.n	8018014 <__gethex+0x2e8>
 8017fb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017fba:	2b02      	cmp	r3, #2
 8017fbc:	d022      	beq.n	8018004 <__gethex+0x2d8>
 8017fbe:	2b03      	cmp	r3, #3
 8017fc0:	d024      	beq.n	801800c <__gethex+0x2e0>
 8017fc2:	2b01      	cmp	r3, #1
 8017fc4:	d115      	bne.n	8017ff2 <__gethex+0x2c6>
 8017fc6:	42a6      	cmp	r6, r4
 8017fc8:	d113      	bne.n	8017ff2 <__gethex+0x2c6>
 8017fca:	2e01      	cmp	r6, #1
 8017fcc:	dc0b      	bgt.n	8017fe6 <__gethex+0x2ba>
 8017fce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017fd2:	9a06      	ldr	r2, [sp, #24]
 8017fd4:	2762      	movs	r7, #98	; 0x62
 8017fd6:	6013      	str	r3, [r2, #0]
 8017fd8:	2301      	movs	r3, #1
 8017fda:	612b      	str	r3, [r5, #16]
 8017fdc:	f8c9 3000 	str.w	r3, [r9]
 8017fe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017fe2:	601d      	str	r5, [r3, #0]
 8017fe4:	e72a      	b.n	8017e3c <__gethex+0x110>
 8017fe6:	1e71      	subs	r1, r6, #1
 8017fe8:	4628      	mov	r0, r5
 8017fea:	f000 fe0e 	bl	8018c0a <__any_on>
 8017fee:	2800      	cmp	r0, #0
 8017ff0:	d1ed      	bne.n	8017fce <__gethex+0x2a2>
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	9802      	ldr	r0, [sp, #8]
 8017ff6:	f000 fa65 	bl	80184c4 <_Bfree>
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ffe:	2750      	movs	r7, #80	; 0x50
 8018000:	6013      	str	r3, [r2, #0]
 8018002:	e71b      	b.n	8017e3c <__gethex+0x110>
 8018004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018006:	2b00      	cmp	r3, #0
 8018008:	d0e1      	beq.n	8017fce <__gethex+0x2a2>
 801800a:	e7f2      	b.n	8017ff2 <__gethex+0x2c6>
 801800c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801800e:	2b00      	cmp	r3, #0
 8018010:	d1dd      	bne.n	8017fce <__gethex+0x2a2>
 8018012:	e7ee      	b.n	8017ff2 <__gethex+0x2c6>
 8018014:	1e67      	subs	r7, r4, #1
 8018016:	f1ba 0f00 	cmp.w	sl, #0
 801801a:	d132      	bne.n	8018082 <__gethex+0x356>
 801801c:	b127      	cbz	r7, 8018028 <__gethex+0x2fc>
 801801e:	4639      	mov	r1, r7
 8018020:	4628      	mov	r0, r5
 8018022:	f000 fdf2 	bl	8018c0a <__any_on>
 8018026:	4682      	mov	sl, r0
 8018028:	2301      	movs	r3, #1
 801802a:	117a      	asrs	r2, r7, #5
 801802c:	f007 071f 	and.w	r7, r7, #31
 8018030:	fa03 f707 	lsl.w	r7, r3, r7
 8018034:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018038:	4621      	mov	r1, r4
 801803a:	421f      	tst	r7, r3
 801803c:	f04f 0702 	mov.w	r7, #2
 8018040:	4628      	mov	r0, r5
 8018042:	bf18      	it	ne
 8018044:	f04a 0a02 	orrne.w	sl, sl, #2
 8018048:	1b36      	subs	r6, r6, r4
 801804a:	f7ff fe1f 	bl	8017c8c <rshift>
 801804e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018052:	f1ba 0f00 	cmp.w	sl, #0
 8018056:	d048      	beq.n	80180ea <__gethex+0x3be>
 8018058:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801805c:	2b02      	cmp	r3, #2
 801805e:	d015      	beq.n	801808c <__gethex+0x360>
 8018060:	2b03      	cmp	r3, #3
 8018062:	d017      	beq.n	8018094 <__gethex+0x368>
 8018064:	2b01      	cmp	r3, #1
 8018066:	d109      	bne.n	801807c <__gethex+0x350>
 8018068:	f01a 0f02 	tst.w	sl, #2
 801806c:	d006      	beq.n	801807c <__gethex+0x350>
 801806e:	f8d9 3000 	ldr.w	r3, [r9]
 8018072:	ea4a 0a03 	orr.w	sl, sl, r3
 8018076:	f01a 0f01 	tst.w	sl, #1
 801807a:	d10e      	bne.n	801809a <__gethex+0x36e>
 801807c:	f047 0710 	orr.w	r7, r7, #16
 8018080:	e033      	b.n	80180ea <__gethex+0x3be>
 8018082:	f04f 0a01 	mov.w	sl, #1
 8018086:	e7cf      	b.n	8018028 <__gethex+0x2fc>
 8018088:	2701      	movs	r7, #1
 801808a:	e7e2      	b.n	8018052 <__gethex+0x326>
 801808c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801808e:	f1c3 0301 	rsb	r3, r3, #1
 8018092:	9315      	str	r3, [sp, #84]	; 0x54
 8018094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018096:	2b00      	cmp	r3, #0
 8018098:	d0f0      	beq.n	801807c <__gethex+0x350>
 801809a:	f04f 0c00 	mov.w	ip, #0
 801809e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80180a2:	f105 0314 	add.w	r3, r5, #20
 80180a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80180aa:	eb03 010a 	add.w	r1, r3, sl
 80180ae:	4618      	mov	r0, r3
 80180b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80180b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80180b8:	d01c      	beq.n	80180f4 <__gethex+0x3c8>
 80180ba:	3201      	adds	r2, #1
 80180bc:	6002      	str	r2, [r0, #0]
 80180be:	2f02      	cmp	r7, #2
 80180c0:	f105 0314 	add.w	r3, r5, #20
 80180c4:	d138      	bne.n	8018138 <__gethex+0x40c>
 80180c6:	f8d8 2000 	ldr.w	r2, [r8]
 80180ca:	3a01      	subs	r2, #1
 80180cc:	42b2      	cmp	r2, r6
 80180ce:	d10a      	bne.n	80180e6 <__gethex+0x3ba>
 80180d0:	2201      	movs	r2, #1
 80180d2:	1171      	asrs	r1, r6, #5
 80180d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80180d8:	f006 061f 	and.w	r6, r6, #31
 80180dc:	fa02 f606 	lsl.w	r6, r2, r6
 80180e0:	421e      	tst	r6, r3
 80180e2:	bf18      	it	ne
 80180e4:	4617      	movne	r7, r2
 80180e6:	f047 0720 	orr.w	r7, r7, #32
 80180ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180ec:	601d      	str	r5, [r3, #0]
 80180ee:	9b06      	ldr	r3, [sp, #24]
 80180f0:	601c      	str	r4, [r3, #0]
 80180f2:	e6a3      	b.n	8017e3c <__gethex+0x110>
 80180f4:	4299      	cmp	r1, r3
 80180f6:	f843 cc04 	str.w	ip, [r3, #-4]
 80180fa:	d8d8      	bhi.n	80180ae <__gethex+0x382>
 80180fc:	68ab      	ldr	r3, [r5, #8]
 80180fe:	4599      	cmp	r9, r3
 8018100:	db12      	blt.n	8018128 <__gethex+0x3fc>
 8018102:	6869      	ldr	r1, [r5, #4]
 8018104:	9802      	ldr	r0, [sp, #8]
 8018106:	3101      	adds	r1, #1
 8018108:	f000 f9a8 	bl	801845c <_Balloc>
 801810c:	4683      	mov	fp, r0
 801810e:	692a      	ldr	r2, [r5, #16]
 8018110:	f105 010c 	add.w	r1, r5, #12
 8018114:	3202      	adds	r2, #2
 8018116:	0092      	lsls	r2, r2, #2
 8018118:	300c      	adds	r0, #12
 801811a:	f7fc feb7 	bl	8014e8c <memcpy>
 801811e:	4629      	mov	r1, r5
 8018120:	9802      	ldr	r0, [sp, #8]
 8018122:	f000 f9cf 	bl	80184c4 <_Bfree>
 8018126:	465d      	mov	r5, fp
 8018128:	692b      	ldr	r3, [r5, #16]
 801812a:	1c5a      	adds	r2, r3, #1
 801812c:	612a      	str	r2, [r5, #16]
 801812e:	2201      	movs	r2, #1
 8018130:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018134:	615a      	str	r2, [r3, #20]
 8018136:	e7c2      	b.n	80180be <__gethex+0x392>
 8018138:	692a      	ldr	r2, [r5, #16]
 801813a:	454a      	cmp	r2, r9
 801813c:	dd0b      	ble.n	8018156 <__gethex+0x42a>
 801813e:	2101      	movs	r1, #1
 8018140:	4628      	mov	r0, r5
 8018142:	f7ff fda3 	bl	8017c8c <rshift>
 8018146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801814a:	3401      	adds	r4, #1
 801814c:	42a3      	cmp	r3, r4
 801814e:	f6ff aed8 	blt.w	8017f02 <__gethex+0x1d6>
 8018152:	2701      	movs	r7, #1
 8018154:	e7c7      	b.n	80180e6 <__gethex+0x3ba>
 8018156:	f016 061f 	ands.w	r6, r6, #31
 801815a:	d0fa      	beq.n	8018152 <__gethex+0x426>
 801815c:	449a      	add	sl, r3
 801815e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018162:	f000 fa3f 	bl	80185e4 <__hi0bits>
 8018166:	f1c6 0620 	rsb	r6, r6, #32
 801816a:	42b0      	cmp	r0, r6
 801816c:	dbe7      	blt.n	801813e <__gethex+0x412>
 801816e:	e7f0      	b.n	8018152 <__gethex+0x426>

08018170 <L_shift>:
 8018170:	f1c2 0208 	rsb	r2, r2, #8
 8018174:	0092      	lsls	r2, r2, #2
 8018176:	b570      	push	{r4, r5, r6, lr}
 8018178:	f1c2 0620 	rsb	r6, r2, #32
 801817c:	6843      	ldr	r3, [r0, #4]
 801817e:	6804      	ldr	r4, [r0, #0]
 8018180:	fa03 f506 	lsl.w	r5, r3, r6
 8018184:	432c      	orrs	r4, r5
 8018186:	40d3      	lsrs	r3, r2
 8018188:	6004      	str	r4, [r0, #0]
 801818a:	f840 3f04 	str.w	r3, [r0, #4]!
 801818e:	4288      	cmp	r0, r1
 8018190:	d3f4      	bcc.n	801817c <L_shift+0xc>
 8018192:	bd70      	pop	{r4, r5, r6, pc}

08018194 <__match>:
 8018194:	b530      	push	{r4, r5, lr}
 8018196:	6803      	ldr	r3, [r0, #0]
 8018198:	3301      	adds	r3, #1
 801819a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801819e:	b914      	cbnz	r4, 80181a6 <__match+0x12>
 80181a0:	6003      	str	r3, [r0, #0]
 80181a2:	2001      	movs	r0, #1
 80181a4:	bd30      	pop	{r4, r5, pc}
 80181a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80181ae:	2d19      	cmp	r5, #25
 80181b0:	bf98      	it	ls
 80181b2:	3220      	addls	r2, #32
 80181b4:	42a2      	cmp	r2, r4
 80181b6:	d0f0      	beq.n	801819a <__match+0x6>
 80181b8:	2000      	movs	r0, #0
 80181ba:	e7f3      	b.n	80181a4 <__match+0x10>

080181bc <__hexnan>:
 80181bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c0:	2500      	movs	r5, #0
 80181c2:	680b      	ldr	r3, [r1, #0]
 80181c4:	4682      	mov	sl, r0
 80181c6:	115f      	asrs	r7, r3, #5
 80181c8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80181cc:	f013 031f 	ands.w	r3, r3, #31
 80181d0:	bf18      	it	ne
 80181d2:	3704      	addne	r7, #4
 80181d4:	1f3e      	subs	r6, r7, #4
 80181d6:	4690      	mov	r8, r2
 80181d8:	46b1      	mov	r9, r6
 80181da:	4634      	mov	r4, r6
 80181dc:	46ab      	mov	fp, r5
 80181de:	b087      	sub	sp, #28
 80181e0:	6801      	ldr	r1, [r0, #0]
 80181e2:	9301      	str	r3, [sp, #4]
 80181e4:	f847 5c04 	str.w	r5, [r7, #-4]
 80181e8:	9502      	str	r5, [sp, #8]
 80181ea:	784a      	ldrb	r2, [r1, #1]
 80181ec:	1c4b      	adds	r3, r1, #1
 80181ee:	9303      	str	r3, [sp, #12]
 80181f0:	b342      	cbz	r2, 8018244 <__hexnan+0x88>
 80181f2:	4610      	mov	r0, r2
 80181f4:	9105      	str	r1, [sp, #20]
 80181f6:	9204      	str	r2, [sp, #16]
 80181f8:	f7ff fd83 	bl	8017d02 <__hexdig_fun>
 80181fc:	2800      	cmp	r0, #0
 80181fe:	d143      	bne.n	8018288 <__hexnan+0xcc>
 8018200:	9a04      	ldr	r2, [sp, #16]
 8018202:	9905      	ldr	r1, [sp, #20]
 8018204:	2a20      	cmp	r2, #32
 8018206:	d818      	bhi.n	801823a <__hexnan+0x7e>
 8018208:	9b02      	ldr	r3, [sp, #8]
 801820a:	459b      	cmp	fp, r3
 801820c:	dd13      	ble.n	8018236 <__hexnan+0x7a>
 801820e:	454c      	cmp	r4, r9
 8018210:	d206      	bcs.n	8018220 <__hexnan+0x64>
 8018212:	2d07      	cmp	r5, #7
 8018214:	dc04      	bgt.n	8018220 <__hexnan+0x64>
 8018216:	462a      	mov	r2, r5
 8018218:	4649      	mov	r1, r9
 801821a:	4620      	mov	r0, r4
 801821c:	f7ff ffa8 	bl	8018170 <L_shift>
 8018220:	4544      	cmp	r4, r8
 8018222:	d944      	bls.n	80182ae <__hexnan+0xf2>
 8018224:	2300      	movs	r3, #0
 8018226:	f1a4 0904 	sub.w	r9, r4, #4
 801822a:	f844 3c04 	str.w	r3, [r4, #-4]
 801822e:	461d      	mov	r5, r3
 8018230:	464c      	mov	r4, r9
 8018232:	f8cd b008 	str.w	fp, [sp, #8]
 8018236:	9903      	ldr	r1, [sp, #12]
 8018238:	e7d7      	b.n	80181ea <__hexnan+0x2e>
 801823a:	2a29      	cmp	r2, #41	; 0x29
 801823c:	d14a      	bne.n	80182d4 <__hexnan+0x118>
 801823e:	3102      	adds	r1, #2
 8018240:	f8ca 1000 	str.w	r1, [sl]
 8018244:	f1bb 0f00 	cmp.w	fp, #0
 8018248:	d044      	beq.n	80182d4 <__hexnan+0x118>
 801824a:	454c      	cmp	r4, r9
 801824c:	d206      	bcs.n	801825c <__hexnan+0xa0>
 801824e:	2d07      	cmp	r5, #7
 8018250:	dc04      	bgt.n	801825c <__hexnan+0xa0>
 8018252:	462a      	mov	r2, r5
 8018254:	4649      	mov	r1, r9
 8018256:	4620      	mov	r0, r4
 8018258:	f7ff ff8a 	bl	8018170 <L_shift>
 801825c:	4544      	cmp	r4, r8
 801825e:	d928      	bls.n	80182b2 <__hexnan+0xf6>
 8018260:	4643      	mov	r3, r8
 8018262:	f854 2b04 	ldr.w	r2, [r4], #4
 8018266:	42a6      	cmp	r6, r4
 8018268:	f843 2b04 	str.w	r2, [r3], #4
 801826c:	d2f9      	bcs.n	8018262 <__hexnan+0xa6>
 801826e:	2200      	movs	r2, #0
 8018270:	f843 2b04 	str.w	r2, [r3], #4
 8018274:	429e      	cmp	r6, r3
 8018276:	d2fb      	bcs.n	8018270 <__hexnan+0xb4>
 8018278:	6833      	ldr	r3, [r6, #0]
 801827a:	b91b      	cbnz	r3, 8018284 <__hexnan+0xc8>
 801827c:	4546      	cmp	r6, r8
 801827e:	d127      	bne.n	80182d0 <__hexnan+0x114>
 8018280:	2301      	movs	r3, #1
 8018282:	6033      	str	r3, [r6, #0]
 8018284:	2005      	movs	r0, #5
 8018286:	e026      	b.n	80182d6 <__hexnan+0x11a>
 8018288:	3501      	adds	r5, #1
 801828a:	2d08      	cmp	r5, #8
 801828c:	f10b 0b01 	add.w	fp, fp, #1
 8018290:	dd06      	ble.n	80182a0 <__hexnan+0xe4>
 8018292:	4544      	cmp	r4, r8
 8018294:	d9cf      	bls.n	8018236 <__hexnan+0x7a>
 8018296:	2300      	movs	r3, #0
 8018298:	2501      	movs	r5, #1
 801829a:	f844 3c04 	str.w	r3, [r4, #-4]
 801829e:	3c04      	subs	r4, #4
 80182a0:	6822      	ldr	r2, [r4, #0]
 80182a2:	f000 000f 	and.w	r0, r0, #15
 80182a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80182aa:	6020      	str	r0, [r4, #0]
 80182ac:	e7c3      	b.n	8018236 <__hexnan+0x7a>
 80182ae:	2508      	movs	r5, #8
 80182b0:	e7c1      	b.n	8018236 <__hexnan+0x7a>
 80182b2:	9b01      	ldr	r3, [sp, #4]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d0df      	beq.n	8018278 <__hexnan+0xbc>
 80182b8:	f04f 32ff 	mov.w	r2, #4294967295
 80182bc:	f1c3 0320 	rsb	r3, r3, #32
 80182c0:	fa22 f303 	lsr.w	r3, r2, r3
 80182c4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80182c8:	401a      	ands	r2, r3
 80182ca:	f847 2c04 	str.w	r2, [r7, #-4]
 80182ce:	e7d3      	b.n	8018278 <__hexnan+0xbc>
 80182d0:	3e04      	subs	r6, #4
 80182d2:	e7d1      	b.n	8018278 <__hexnan+0xbc>
 80182d4:	2004      	movs	r0, #4
 80182d6:	b007      	add	sp, #28
 80182d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182dc <__locale_ctype_ptr_l>:
 80182dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80182e0:	4770      	bx	lr
	...

080182e4 <__locale_ctype_ptr>:
 80182e4:	4b04      	ldr	r3, [pc, #16]	; (80182f8 <__locale_ctype_ptr+0x14>)
 80182e6:	4a05      	ldr	r2, [pc, #20]	; (80182fc <__locale_ctype_ptr+0x18>)
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	6a1b      	ldr	r3, [r3, #32]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	bf08      	it	eq
 80182f0:	4613      	moveq	r3, r2
 80182f2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80182f6:	4770      	bx	lr
 80182f8:	20000148 	.word	0x20000148
 80182fc:	200001ac 	.word	0x200001ac

08018300 <__localeconv_l>:
 8018300:	30f0      	adds	r0, #240	; 0xf0
 8018302:	4770      	bx	lr

08018304 <_localeconv_r>:
 8018304:	4b04      	ldr	r3, [pc, #16]	; (8018318 <_localeconv_r+0x14>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	6a18      	ldr	r0, [r3, #32]
 801830a:	4b04      	ldr	r3, [pc, #16]	; (801831c <_localeconv_r+0x18>)
 801830c:	2800      	cmp	r0, #0
 801830e:	bf08      	it	eq
 8018310:	4618      	moveq	r0, r3
 8018312:	30f0      	adds	r0, #240	; 0xf0
 8018314:	4770      	bx	lr
 8018316:	bf00      	nop
 8018318:	20000148 	.word	0x20000148
 801831c:	200001ac 	.word	0x200001ac

08018320 <_lseek_r>:
 8018320:	b538      	push	{r3, r4, r5, lr}
 8018322:	4605      	mov	r5, r0
 8018324:	4608      	mov	r0, r1
 8018326:	4611      	mov	r1, r2
 8018328:	2200      	movs	r2, #0
 801832a:	4c05      	ldr	r4, [pc, #20]	; (8018340 <_lseek_r+0x20>)
 801832c:	6022      	str	r2, [r4, #0]
 801832e:	461a      	mov	r2, r3
 8018330:	f7eb fdc7 	bl	8003ec2 <_lseek>
 8018334:	1c43      	adds	r3, r0, #1
 8018336:	d102      	bne.n	801833e <_lseek_r+0x1e>
 8018338:	6823      	ldr	r3, [r4, #0]
 801833a:	b103      	cbz	r3, 801833e <_lseek_r+0x1e>
 801833c:	602b      	str	r3, [r5, #0]
 801833e:	bd38      	pop	{r3, r4, r5, pc}
 8018340:	20009e2c 	.word	0x20009e2c

08018344 <__swhatbuf_r>:
 8018344:	b570      	push	{r4, r5, r6, lr}
 8018346:	460e      	mov	r6, r1
 8018348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801834c:	b096      	sub	sp, #88	; 0x58
 801834e:	2900      	cmp	r1, #0
 8018350:	4614      	mov	r4, r2
 8018352:	461d      	mov	r5, r3
 8018354:	da07      	bge.n	8018366 <__swhatbuf_r+0x22>
 8018356:	2300      	movs	r3, #0
 8018358:	602b      	str	r3, [r5, #0]
 801835a:	89b3      	ldrh	r3, [r6, #12]
 801835c:	061a      	lsls	r2, r3, #24
 801835e:	d410      	bmi.n	8018382 <__swhatbuf_r+0x3e>
 8018360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018364:	e00e      	b.n	8018384 <__swhatbuf_r+0x40>
 8018366:	466a      	mov	r2, sp
 8018368:	f001 fbdc 	bl	8019b24 <_fstat_r>
 801836c:	2800      	cmp	r0, #0
 801836e:	dbf2      	blt.n	8018356 <__swhatbuf_r+0x12>
 8018370:	9a01      	ldr	r2, [sp, #4]
 8018372:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018376:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801837a:	425a      	negs	r2, r3
 801837c:	415a      	adcs	r2, r3
 801837e:	602a      	str	r2, [r5, #0]
 8018380:	e7ee      	b.n	8018360 <__swhatbuf_r+0x1c>
 8018382:	2340      	movs	r3, #64	; 0x40
 8018384:	2000      	movs	r0, #0
 8018386:	6023      	str	r3, [r4, #0]
 8018388:	b016      	add	sp, #88	; 0x58
 801838a:	bd70      	pop	{r4, r5, r6, pc}

0801838c <__smakebuf_r>:
 801838c:	898b      	ldrh	r3, [r1, #12]
 801838e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018390:	079d      	lsls	r5, r3, #30
 8018392:	4606      	mov	r6, r0
 8018394:	460c      	mov	r4, r1
 8018396:	d507      	bpl.n	80183a8 <__smakebuf_r+0x1c>
 8018398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801839c:	6023      	str	r3, [r4, #0]
 801839e:	6123      	str	r3, [r4, #16]
 80183a0:	2301      	movs	r3, #1
 80183a2:	6163      	str	r3, [r4, #20]
 80183a4:	b002      	add	sp, #8
 80183a6:	bd70      	pop	{r4, r5, r6, pc}
 80183a8:	ab01      	add	r3, sp, #4
 80183aa:	466a      	mov	r2, sp
 80183ac:	f7ff ffca 	bl	8018344 <__swhatbuf_r>
 80183b0:	9900      	ldr	r1, [sp, #0]
 80183b2:	4605      	mov	r5, r0
 80183b4:	4630      	mov	r0, r6
 80183b6:	f000 fca3 	bl	8018d00 <_malloc_r>
 80183ba:	b948      	cbnz	r0, 80183d0 <__smakebuf_r+0x44>
 80183bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183c0:	059a      	lsls	r2, r3, #22
 80183c2:	d4ef      	bmi.n	80183a4 <__smakebuf_r+0x18>
 80183c4:	f023 0303 	bic.w	r3, r3, #3
 80183c8:	f043 0302 	orr.w	r3, r3, #2
 80183cc:	81a3      	strh	r3, [r4, #12]
 80183ce:	e7e3      	b.n	8018398 <__smakebuf_r+0xc>
 80183d0:	4b0d      	ldr	r3, [pc, #52]	; (8018408 <__smakebuf_r+0x7c>)
 80183d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80183d4:	89a3      	ldrh	r3, [r4, #12]
 80183d6:	6020      	str	r0, [r4, #0]
 80183d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183dc:	81a3      	strh	r3, [r4, #12]
 80183de:	9b00      	ldr	r3, [sp, #0]
 80183e0:	6120      	str	r0, [r4, #16]
 80183e2:	6163      	str	r3, [r4, #20]
 80183e4:	9b01      	ldr	r3, [sp, #4]
 80183e6:	b15b      	cbz	r3, 8018400 <__smakebuf_r+0x74>
 80183e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183ec:	4630      	mov	r0, r6
 80183ee:	f001 fbab 	bl	8019b48 <_isatty_r>
 80183f2:	b128      	cbz	r0, 8018400 <__smakebuf_r+0x74>
 80183f4:	89a3      	ldrh	r3, [r4, #12]
 80183f6:	f023 0303 	bic.w	r3, r3, #3
 80183fa:	f043 0301 	orr.w	r3, r3, #1
 80183fe:	81a3      	strh	r3, [r4, #12]
 8018400:	89a3      	ldrh	r3, [r4, #12]
 8018402:	431d      	orrs	r5, r3
 8018404:	81a5      	strh	r5, [r4, #12]
 8018406:	e7cd      	b.n	80183a4 <__smakebuf_r+0x18>
 8018408:	08017b41 	.word	0x08017b41

0801840c <malloc>:
 801840c:	4b02      	ldr	r3, [pc, #8]	; (8018418 <malloc+0xc>)
 801840e:	4601      	mov	r1, r0
 8018410:	6818      	ldr	r0, [r3, #0]
 8018412:	f000 bc75 	b.w	8018d00 <_malloc_r>
 8018416:	bf00      	nop
 8018418:	20000148 	.word	0x20000148

0801841c <__ascii_mbtowc>:
 801841c:	b082      	sub	sp, #8
 801841e:	b901      	cbnz	r1, 8018422 <__ascii_mbtowc+0x6>
 8018420:	a901      	add	r1, sp, #4
 8018422:	b142      	cbz	r2, 8018436 <__ascii_mbtowc+0x1a>
 8018424:	b14b      	cbz	r3, 801843a <__ascii_mbtowc+0x1e>
 8018426:	7813      	ldrb	r3, [r2, #0]
 8018428:	600b      	str	r3, [r1, #0]
 801842a:	7812      	ldrb	r2, [r2, #0]
 801842c:	1c10      	adds	r0, r2, #0
 801842e:	bf18      	it	ne
 8018430:	2001      	movne	r0, #1
 8018432:	b002      	add	sp, #8
 8018434:	4770      	bx	lr
 8018436:	4610      	mov	r0, r2
 8018438:	e7fb      	b.n	8018432 <__ascii_mbtowc+0x16>
 801843a:	f06f 0001 	mvn.w	r0, #1
 801843e:	e7f8      	b.n	8018432 <__ascii_mbtowc+0x16>

08018440 <memchr>:
 8018440:	b510      	push	{r4, lr}
 8018442:	b2c9      	uxtb	r1, r1
 8018444:	4402      	add	r2, r0
 8018446:	4290      	cmp	r0, r2
 8018448:	4603      	mov	r3, r0
 801844a:	d101      	bne.n	8018450 <memchr+0x10>
 801844c:	2300      	movs	r3, #0
 801844e:	e003      	b.n	8018458 <memchr+0x18>
 8018450:	781c      	ldrb	r4, [r3, #0]
 8018452:	3001      	adds	r0, #1
 8018454:	428c      	cmp	r4, r1
 8018456:	d1f6      	bne.n	8018446 <memchr+0x6>
 8018458:	4618      	mov	r0, r3
 801845a:	bd10      	pop	{r4, pc}

0801845c <_Balloc>:
 801845c:	b570      	push	{r4, r5, r6, lr}
 801845e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018460:	4604      	mov	r4, r0
 8018462:	460e      	mov	r6, r1
 8018464:	b93d      	cbnz	r5, 8018476 <_Balloc+0x1a>
 8018466:	2010      	movs	r0, #16
 8018468:	f7ff ffd0 	bl	801840c <malloc>
 801846c:	6260      	str	r0, [r4, #36]	; 0x24
 801846e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018472:	6005      	str	r5, [r0, #0]
 8018474:	60c5      	str	r5, [r0, #12]
 8018476:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018478:	68eb      	ldr	r3, [r5, #12]
 801847a:	b183      	cbz	r3, 801849e <_Balloc+0x42>
 801847c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801847e:	68db      	ldr	r3, [r3, #12]
 8018480:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018484:	b9b8      	cbnz	r0, 80184b6 <_Balloc+0x5a>
 8018486:	2101      	movs	r1, #1
 8018488:	fa01 f506 	lsl.w	r5, r1, r6
 801848c:	1d6a      	adds	r2, r5, #5
 801848e:	0092      	lsls	r2, r2, #2
 8018490:	4620      	mov	r0, r4
 8018492:	f000 fbdb 	bl	8018c4c <_calloc_r>
 8018496:	b160      	cbz	r0, 80184b2 <_Balloc+0x56>
 8018498:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801849c:	e00e      	b.n	80184bc <_Balloc+0x60>
 801849e:	2221      	movs	r2, #33	; 0x21
 80184a0:	2104      	movs	r1, #4
 80184a2:	4620      	mov	r0, r4
 80184a4:	f000 fbd2 	bl	8018c4c <_calloc_r>
 80184a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80184aa:	60e8      	str	r0, [r5, #12]
 80184ac:	68db      	ldr	r3, [r3, #12]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d1e4      	bne.n	801847c <_Balloc+0x20>
 80184b2:	2000      	movs	r0, #0
 80184b4:	bd70      	pop	{r4, r5, r6, pc}
 80184b6:	6802      	ldr	r2, [r0, #0]
 80184b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80184bc:	2300      	movs	r3, #0
 80184be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80184c2:	e7f7      	b.n	80184b4 <_Balloc+0x58>

080184c4 <_Bfree>:
 80184c4:	b570      	push	{r4, r5, r6, lr}
 80184c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80184c8:	4606      	mov	r6, r0
 80184ca:	460d      	mov	r5, r1
 80184cc:	b93c      	cbnz	r4, 80184de <_Bfree+0x1a>
 80184ce:	2010      	movs	r0, #16
 80184d0:	f7ff ff9c 	bl	801840c <malloc>
 80184d4:	6270      	str	r0, [r6, #36]	; 0x24
 80184d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80184da:	6004      	str	r4, [r0, #0]
 80184dc:	60c4      	str	r4, [r0, #12]
 80184de:	b13d      	cbz	r5, 80184f0 <_Bfree+0x2c>
 80184e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80184e2:	686a      	ldr	r2, [r5, #4]
 80184e4:	68db      	ldr	r3, [r3, #12]
 80184e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80184ea:	6029      	str	r1, [r5, #0]
 80184ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80184f0:	bd70      	pop	{r4, r5, r6, pc}

080184f2 <__multadd>:
 80184f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184f6:	461f      	mov	r7, r3
 80184f8:	4606      	mov	r6, r0
 80184fa:	460c      	mov	r4, r1
 80184fc:	2300      	movs	r3, #0
 80184fe:	690d      	ldr	r5, [r1, #16]
 8018500:	f101 0c14 	add.w	ip, r1, #20
 8018504:	f8dc 0000 	ldr.w	r0, [ip]
 8018508:	3301      	adds	r3, #1
 801850a:	b281      	uxth	r1, r0
 801850c:	fb02 7101 	mla	r1, r2, r1, r7
 8018510:	0c00      	lsrs	r0, r0, #16
 8018512:	0c0f      	lsrs	r7, r1, #16
 8018514:	fb02 7000 	mla	r0, r2, r0, r7
 8018518:	b289      	uxth	r1, r1
 801851a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801851e:	429d      	cmp	r5, r3
 8018520:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018524:	f84c 1b04 	str.w	r1, [ip], #4
 8018528:	dcec      	bgt.n	8018504 <__multadd+0x12>
 801852a:	b1d7      	cbz	r7, 8018562 <__multadd+0x70>
 801852c:	68a3      	ldr	r3, [r4, #8]
 801852e:	42ab      	cmp	r3, r5
 8018530:	dc12      	bgt.n	8018558 <__multadd+0x66>
 8018532:	6861      	ldr	r1, [r4, #4]
 8018534:	4630      	mov	r0, r6
 8018536:	3101      	adds	r1, #1
 8018538:	f7ff ff90 	bl	801845c <_Balloc>
 801853c:	4680      	mov	r8, r0
 801853e:	6922      	ldr	r2, [r4, #16]
 8018540:	f104 010c 	add.w	r1, r4, #12
 8018544:	3202      	adds	r2, #2
 8018546:	0092      	lsls	r2, r2, #2
 8018548:	300c      	adds	r0, #12
 801854a:	f7fc fc9f 	bl	8014e8c <memcpy>
 801854e:	4621      	mov	r1, r4
 8018550:	4630      	mov	r0, r6
 8018552:	f7ff ffb7 	bl	80184c4 <_Bfree>
 8018556:	4644      	mov	r4, r8
 8018558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801855c:	3501      	adds	r5, #1
 801855e:	615f      	str	r7, [r3, #20]
 8018560:	6125      	str	r5, [r4, #16]
 8018562:	4620      	mov	r0, r4
 8018564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018568 <__s2b>:
 8018568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801856c:	4615      	mov	r5, r2
 801856e:	2209      	movs	r2, #9
 8018570:	461f      	mov	r7, r3
 8018572:	3308      	adds	r3, #8
 8018574:	460c      	mov	r4, r1
 8018576:	fb93 f3f2 	sdiv	r3, r3, r2
 801857a:	4606      	mov	r6, r0
 801857c:	2201      	movs	r2, #1
 801857e:	2100      	movs	r1, #0
 8018580:	429a      	cmp	r2, r3
 8018582:	db20      	blt.n	80185c6 <__s2b+0x5e>
 8018584:	4630      	mov	r0, r6
 8018586:	f7ff ff69 	bl	801845c <_Balloc>
 801858a:	9b08      	ldr	r3, [sp, #32]
 801858c:	2d09      	cmp	r5, #9
 801858e:	6143      	str	r3, [r0, #20]
 8018590:	f04f 0301 	mov.w	r3, #1
 8018594:	6103      	str	r3, [r0, #16]
 8018596:	dd19      	ble.n	80185cc <__s2b+0x64>
 8018598:	f104 0809 	add.w	r8, r4, #9
 801859c:	46c1      	mov	r9, r8
 801859e:	442c      	add	r4, r5
 80185a0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80185a4:	4601      	mov	r1, r0
 80185a6:	3b30      	subs	r3, #48	; 0x30
 80185a8:	220a      	movs	r2, #10
 80185aa:	4630      	mov	r0, r6
 80185ac:	f7ff ffa1 	bl	80184f2 <__multadd>
 80185b0:	45a1      	cmp	r9, r4
 80185b2:	d1f5      	bne.n	80185a0 <__s2b+0x38>
 80185b4:	eb08 0405 	add.w	r4, r8, r5
 80185b8:	3c08      	subs	r4, #8
 80185ba:	1b2d      	subs	r5, r5, r4
 80185bc:	1963      	adds	r3, r4, r5
 80185be:	42bb      	cmp	r3, r7
 80185c0:	db07      	blt.n	80185d2 <__s2b+0x6a>
 80185c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185c6:	0052      	lsls	r2, r2, #1
 80185c8:	3101      	adds	r1, #1
 80185ca:	e7d9      	b.n	8018580 <__s2b+0x18>
 80185cc:	340a      	adds	r4, #10
 80185ce:	2509      	movs	r5, #9
 80185d0:	e7f3      	b.n	80185ba <__s2b+0x52>
 80185d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80185d6:	4601      	mov	r1, r0
 80185d8:	3b30      	subs	r3, #48	; 0x30
 80185da:	220a      	movs	r2, #10
 80185dc:	4630      	mov	r0, r6
 80185de:	f7ff ff88 	bl	80184f2 <__multadd>
 80185e2:	e7eb      	b.n	80185bc <__s2b+0x54>

080185e4 <__hi0bits>:
 80185e4:	0c02      	lsrs	r2, r0, #16
 80185e6:	0412      	lsls	r2, r2, #16
 80185e8:	4603      	mov	r3, r0
 80185ea:	b9b2      	cbnz	r2, 801861a <__hi0bits+0x36>
 80185ec:	0403      	lsls	r3, r0, #16
 80185ee:	2010      	movs	r0, #16
 80185f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80185f4:	bf04      	itt	eq
 80185f6:	021b      	lsleq	r3, r3, #8
 80185f8:	3008      	addeq	r0, #8
 80185fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80185fe:	bf04      	itt	eq
 8018600:	011b      	lsleq	r3, r3, #4
 8018602:	3004      	addeq	r0, #4
 8018604:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018608:	bf04      	itt	eq
 801860a:	009b      	lsleq	r3, r3, #2
 801860c:	3002      	addeq	r0, #2
 801860e:	2b00      	cmp	r3, #0
 8018610:	db06      	blt.n	8018620 <__hi0bits+0x3c>
 8018612:	005b      	lsls	r3, r3, #1
 8018614:	d503      	bpl.n	801861e <__hi0bits+0x3a>
 8018616:	3001      	adds	r0, #1
 8018618:	4770      	bx	lr
 801861a:	2000      	movs	r0, #0
 801861c:	e7e8      	b.n	80185f0 <__hi0bits+0xc>
 801861e:	2020      	movs	r0, #32
 8018620:	4770      	bx	lr

08018622 <__lo0bits>:
 8018622:	6803      	ldr	r3, [r0, #0]
 8018624:	4601      	mov	r1, r0
 8018626:	f013 0207 	ands.w	r2, r3, #7
 801862a:	d00b      	beq.n	8018644 <__lo0bits+0x22>
 801862c:	07da      	lsls	r2, r3, #31
 801862e:	d423      	bmi.n	8018678 <__lo0bits+0x56>
 8018630:	0798      	lsls	r0, r3, #30
 8018632:	bf49      	itett	mi
 8018634:	085b      	lsrmi	r3, r3, #1
 8018636:	089b      	lsrpl	r3, r3, #2
 8018638:	2001      	movmi	r0, #1
 801863a:	600b      	strmi	r3, [r1, #0]
 801863c:	bf5c      	itt	pl
 801863e:	600b      	strpl	r3, [r1, #0]
 8018640:	2002      	movpl	r0, #2
 8018642:	4770      	bx	lr
 8018644:	b298      	uxth	r0, r3
 8018646:	b9a8      	cbnz	r0, 8018674 <__lo0bits+0x52>
 8018648:	2010      	movs	r0, #16
 801864a:	0c1b      	lsrs	r3, r3, #16
 801864c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018650:	bf04      	itt	eq
 8018652:	0a1b      	lsreq	r3, r3, #8
 8018654:	3008      	addeq	r0, #8
 8018656:	071a      	lsls	r2, r3, #28
 8018658:	bf04      	itt	eq
 801865a:	091b      	lsreq	r3, r3, #4
 801865c:	3004      	addeq	r0, #4
 801865e:	079a      	lsls	r2, r3, #30
 8018660:	bf04      	itt	eq
 8018662:	089b      	lsreq	r3, r3, #2
 8018664:	3002      	addeq	r0, #2
 8018666:	07da      	lsls	r2, r3, #31
 8018668:	d402      	bmi.n	8018670 <__lo0bits+0x4e>
 801866a:	085b      	lsrs	r3, r3, #1
 801866c:	d006      	beq.n	801867c <__lo0bits+0x5a>
 801866e:	3001      	adds	r0, #1
 8018670:	600b      	str	r3, [r1, #0]
 8018672:	4770      	bx	lr
 8018674:	4610      	mov	r0, r2
 8018676:	e7e9      	b.n	801864c <__lo0bits+0x2a>
 8018678:	2000      	movs	r0, #0
 801867a:	4770      	bx	lr
 801867c:	2020      	movs	r0, #32
 801867e:	4770      	bx	lr

08018680 <__i2b>:
 8018680:	b510      	push	{r4, lr}
 8018682:	460c      	mov	r4, r1
 8018684:	2101      	movs	r1, #1
 8018686:	f7ff fee9 	bl	801845c <_Balloc>
 801868a:	2201      	movs	r2, #1
 801868c:	6144      	str	r4, [r0, #20]
 801868e:	6102      	str	r2, [r0, #16]
 8018690:	bd10      	pop	{r4, pc}

08018692 <__multiply>:
 8018692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018696:	4614      	mov	r4, r2
 8018698:	690a      	ldr	r2, [r1, #16]
 801869a:	6923      	ldr	r3, [r4, #16]
 801869c:	4688      	mov	r8, r1
 801869e:	429a      	cmp	r2, r3
 80186a0:	bfbe      	ittt	lt
 80186a2:	460b      	movlt	r3, r1
 80186a4:	46a0      	movlt	r8, r4
 80186a6:	461c      	movlt	r4, r3
 80186a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80186ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80186b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80186b8:	eb07 0609 	add.w	r6, r7, r9
 80186bc:	42b3      	cmp	r3, r6
 80186be:	bfb8      	it	lt
 80186c0:	3101      	addlt	r1, #1
 80186c2:	f7ff fecb 	bl	801845c <_Balloc>
 80186c6:	f100 0514 	add.w	r5, r0, #20
 80186ca:	462b      	mov	r3, r5
 80186cc:	2200      	movs	r2, #0
 80186ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80186d2:	4573      	cmp	r3, lr
 80186d4:	d316      	bcc.n	8018704 <__multiply+0x72>
 80186d6:	f104 0214 	add.w	r2, r4, #20
 80186da:	f108 0114 	add.w	r1, r8, #20
 80186de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80186e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80186e6:	9300      	str	r3, [sp, #0]
 80186e8:	9b00      	ldr	r3, [sp, #0]
 80186ea:	9201      	str	r2, [sp, #4]
 80186ec:	4293      	cmp	r3, r2
 80186ee:	d80c      	bhi.n	801870a <__multiply+0x78>
 80186f0:	2e00      	cmp	r6, #0
 80186f2:	dd03      	ble.n	80186fc <__multiply+0x6a>
 80186f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d05d      	beq.n	80187b8 <__multiply+0x126>
 80186fc:	6106      	str	r6, [r0, #16]
 80186fe:	b003      	add	sp, #12
 8018700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018704:	f843 2b04 	str.w	r2, [r3], #4
 8018708:	e7e3      	b.n	80186d2 <__multiply+0x40>
 801870a:	f8b2 b000 	ldrh.w	fp, [r2]
 801870e:	f1bb 0f00 	cmp.w	fp, #0
 8018712:	d023      	beq.n	801875c <__multiply+0xca>
 8018714:	4689      	mov	r9, r1
 8018716:	46ac      	mov	ip, r5
 8018718:	f04f 0800 	mov.w	r8, #0
 801871c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018720:	f8dc a000 	ldr.w	sl, [ip]
 8018724:	b2a3      	uxth	r3, r4
 8018726:	fa1f fa8a 	uxth.w	sl, sl
 801872a:	fb0b a303 	mla	r3, fp, r3, sl
 801872e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018732:	f8dc 4000 	ldr.w	r4, [ip]
 8018736:	4443      	add	r3, r8
 8018738:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801873c:	fb0b 840a 	mla	r4, fp, sl, r8
 8018740:	46e2      	mov	sl, ip
 8018742:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018746:	b29b      	uxth	r3, r3
 8018748:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801874c:	454f      	cmp	r7, r9
 801874e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018752:	f84a 3b04 	str.w	r3, [sl], #4
 8018756:	d82b      	bhi.n	80187b0 <__multiply+0x11e>
 8018758:	f8cc 8004 	str.w	r8, [ip, #4]
 801875c:	9b01      	ldr	r3, [sp, #4]
 801875e:	3204      	adds	r2, #4
 8018760:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018764:	f1ba 0f00 	cmp.w	sl, #0
 8018768:	d020      	beq.n	80187ac <__multiply+0x11a>
 801876a:	4689      	mov	r9, r1
 801876c:	46a8      	mov	r8, r5
 801876e:	f04f 0b00 	mov.w	fp, #0
 8018772:	682b      	ldr	r3, [r5, #0]
 8018774:	f8b9 c000 	ldrh.w	ip, [r9]
 8018778:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801877c:	b29b      	uxth	r3, r3
 801877e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018782:	46c4      	mov	ip, r8
 8018784:	445c      	add	r4, fp
 8018786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801878a:	f84c 3b04 	str.w	r3, [ip], #4
 801878e:	f859 3b04 	ldr.w	r3, [r9], #4
 8018792:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018796:	0c1b      	lsrs	r3, r3, #16
 8018798:	fb0a b303 	mla	r3, sl, r3, fp
 801879c:	454f      	cmp	r7, r9
 801879e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80187a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80187a6:	d805      	bhi.n	80187b4 <__multiply+0x122>
 80187a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80187ac:	3504      	adds	r5, #4
 80187ae:	e79b      	b.n	80186e8 <__multiply+0x56>
 80187b0:	46d4      	mov	ip, sl
 80187b2:	e7b3      	b.n	801871c <__multiply+0x8a>
 80187b4:	46e0      	mov	r8, ip
 80187b6:	e7dd      	b.n	8018774 <__multiply+0xe2>
 80187b8:	3e01      	subs	r6, #1
 80187ba:	e799      	b.n	80186f0 <__multiply+0x5e>

080187bc <__pow5mult>:
 80187bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187c0:	4615      	mov	r5, r2
 80187c2:	f012 0203 	ands.w	r2, r2, #3
 80187c6:	4606      	mov	r6, r0
 80187c8:	460f      	mov	r7, r1
 80187ca:	d007      	beq.n	80187dc <__pow5mult+0x20>
 80187cc:	4c21      	ldr	r4, [pc, #132]	; (8018854 <__pow5mult+0x98>)
 80187ce:	3a01      	subs	r2, #1
 80187d0:	2300      	movs	r3, #0
 80187d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80187d6:	f7ff fe8c 	bl	80184f2 <__multadd>
 80187da:	4607      	mov	r7, r0
 80187dc:	10ad      	asrs	r5, r5, #2
 80187de:	d035      	beq.n	801884c <__pow5mult+0x90>
 80187e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80187e2:	b93c      	cbnz	r4, 80187f4 <__pow5mult+0x38>
 80187e4:	2010      	movs	r0, #16
 80187e6:	f7ff fe11 	bl	801840c <malloc>
 80187ea:	6270      	str	r0, [r6, #36]	; 0x24
 80187ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80187f0:	6004      	str	r4, [r0, #0]
 80187f2:	60c4      	str	r4, [r0, #12]
 80187f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80187f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80187fc:	b94c      	cbnz	r4, 8018812 <__pow5mult+0x56>
 80187fe:	f240 2171 	movw	r1, #625	; 0x271
 8018802:	4630      	mov	r0, r6
 8018804:	f7ff ff3c 	bl	8018680 <__i2b>
 8018808:	2300      	movs	r3, #0
 801880a:	4604      	mov	r4, r0
 801880c:	f8c8 0008 	str.w	r0, [r8, #8]
 8018810:	6003      	str	r3, [r0, #0]
 8018812:	f04f 0800 	mov.w	r8, #0
 8018816:	07eb      	lsls	r3, r5, #31
 8018818:	d50a      	bpl.n	8018830 <__pow5mult+0x74>
 801881a:	4639      	mov	r1, r7
 801881c:	4622      	mov	r2, r4
 801881e:	4630      	mov	r0, r6
 8018820:	f7ff ff37 	bl	8018692 <__multiply>
 8018824:	4681      	mov	r9, r0
 8018826:	4639      	mov	r1, r7
 8018828:	4630      	mov	r0, r6
 801882a:	f7ff fe4b 	bl	80184c4 <_Bfree>
 801882e:	464f      	mov	r7, r9
 8018830:	106d      	asrs	r5, r5, #1
 8018832:	d00b      	beq.n	801884c <__pow5mult+0x90>
 8018834:	6820      	ldr	r0, [r4, #0]
 8018836:	b938      	cbnz	r0, 8018848 <__pow5mult+0x8c>
 8018838:	4622      	mov	r2, r4
 801883a:	4621      	mov	r1, r4
 801883c:	4630      	mov	r0, r6
 801883e:	f7ff ff28 	bl	8018692 <__multiply>
 8018842:	6020      	str	r0, [r4, #0]
 8018844:	f8c0 8000 	str.w	r8, [r0]
 8018848:	4604      	mov	r4, r0
 801884a:	e7e4      	b.n	8018816 <__pow5mult+0x5a>
 801884c:	4638      	mov	r0, r7
 801884e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018852:	bf00      	nop
 8018854:	0801e818 	.word	0x0801e818

08018858 <__lshift>:
 8018858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801885c:	460c      	mov	r4, r1
 801885e:	4607      	mov	r7, r0
 8018860:	4616      	mov	r6, r2
 8018862:	6923      	ldr	r3, [r4, #16]
 8018864:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018868:	eb0a 0903 	add.w	r9, sl, r3
 801886c:	6849      	ldr	r1, [r1, #4]
 801886e:	68a3      	ldr	r3, [r4, #8]
 8018870:	f109 0501 	add.w	r5, r9, #1
 8018874:	42ab      	cmp	r3, r5
 8018876:	db32      	blt.n	80188de <__lshift+0x86>
 8018878:	4638      	mov	r0, r7
 801887a:	f7ff fdef 	bl	801845c <_Balloc>
 801887e:	2300      	movs	r3, #0
 8018880:	4680      	mov	r8, r0
 8018882:	461a      	mov	r2, r3
 8018884:	f100 0114 	add.w	r1, r0, #20
 8018888:	4553      	cmp	r3, sl
 801888a:	db2b      	blt.n	80188e4 <__lshift+0x8c>
 801888c:	6920      	ldr	r0, [r4, #16]
 801888e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018892:	f104 0314 	add.w	r3, r4, #20
 8018896:	f016 021f 	ands.w	r2, r6, #31
 801889a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801889e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80188a2:	d025      	beq.n	80188f0 <__lshift+0x98>
 80188a4:	2000      	movs	r0, #0
 80188a6:	f1c2 0e20 	rsb	lr, r2, #32
 80188aa:	468a      	mov	sl, r1
 80188ac:	681e      	ldr	r6, [r3, #0]
 80188ae:	4096      	lsls	r6, r2
 80188b0:	4330      	orrs	r0, r6
 80188b2:	f84a 0b04 	str.w	r0, [sl], #4
 80188b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80188ba:	459c      	cmp	ip, r3
 80188bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80188c0:	d814      	bhi.n	80188ec <__lshift+0x94>
 80188c2:	6048      	str	r0, [r1, #4]
 80188c4:	b108      	cbz	r0, 80188ca <__lshift+0x72>
 80188c6:	f109 0502 	add.w	r5, r9, #2
 80188ca:	3d01      	subs	r5, #1
 80188cc:	4638      	mov	r0, r7
 80188ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80188d2:	4621      	mov	r1, r4
 80188d4:	f7ff fdf6 	bl	80184c4 <_Bfree>
 80188d8:	4640      	mov	r0, r8
 80188da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188de:	3101      	adds	r1, #1
 80188e0:	005b      	lsls	r3, r3, #1
 80188e2:	e7c7      	b.n	8018874 <__lshift+0x1c>
 80188e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80188e8:	3301      	adds	r3, #1
 80188ea:	e7cd      	b.n	8018888 <__lshift+0x30>
 80188ec:	4651      	mov	r1, sl
 80188ee:	e7dc      	b.n	80188aa <__lshift+0x52>
 80188f0:	3904      	subs	r1, #4
 80188f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80188f6:	459c      	cmp	ip, r3
 80188f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80188fc:	d8f9      	bhi.n	80188f2 <__lshift+0x9a>
 80188fe:	e7e4      	b.n	80188ca <__lshift+0x72>

08018900 <__mcmp>:
 8018900:	6903      	ldr	r3, [r0, #16]
 8018902:	690a      	ldr	r2, [r1, #16]
 8018904:	b530      	push	{r4, r5, lr}
 8018906:	1a9b      	subs	r3, r3, r2
 8018908:	d10c      	bne.n	8018924 <__mcmp+0x24>
 801890a:	0092      	lsls	r2, r2, #2
 801890c:	3014      	adds	r0, #20
 801890e:	3114      	adds	r1, #20
 8018910:	1884      	adds	r4, r0, r2
 8018912:	4411      	add	r1, r2
 8018914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801891c:	4295      	cmp	r5, r2
 801891e:	d003      	beq.n	8018928 <__mcmp+0x28>
 8018920:	d305      	bcc.n	801892e <__mcmp+0x2e>
 8018922:	2301      	movs	r3, #1
 8018924:	4618      	mov	r0, r3
 8018926:	bd30      	pop	{r4, r5, pc}
 8018928:	42a0      	cmp	r0, r4
 801892a:	d3f3      	bcc.n	8018914 <__mcmp+0x14>
 801892c:	e7fa      	b.n	8018924 <__mcmp+0x24>
 801892e:	f04f 33ff 	mov.w	r3, #4294967295
 8018932:	e7f7      	b.n	8018924 <__mcmp+0x24>

08018934 <__mdiff>:
 8018934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018938:	460d      	mov	r5, r1
 801893a:	4607      	mov	r7, r0
 801893c:	4611      	mov	r1, r2
 801893e:	4628      	mov	r0, r5
 8018940:	4614      	mov	r4, r2
 8018942:	f7ff ffdd 	bl	8018900 <__mcmp>
 8018946:	1e06      	subs	r6, r0, #0
 8018948:	d108      	bne.n	801895c <__mdiff+0x28>
 801894a:	4631      	mov	r1, r6
 801894c:	4638      	mov	r0, r7
 801894e:	f7ff fd85 	bl	801845c <_Balloc>
 8018952:	2301      	movs	r3, #1
 8018954:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801895c:	bfa4      	itt	ge
 801895e:	4623      	movge	r3, r4
 8018960:	462c      	movge	r4, r5
 8018962:	4638      	mov	r0, r7
 8018964:	6861      	ldr	r1, [r4, #4]
 8018966:	bfa6      	itte	ge
 8018968:	461d      	movge	r5, r3
 801896a:	2600      	movge	r6, #0
 801896c:	2601      	movlt	r6, #1
 801896e:	f7ff fd75 	bl	801845c <_Balloc>
 8018972:	f04f 0e00 	mov.w	lr, #0
 8018976:	60c6      	str	r6, [r0, #12]
 8018978:	692b      	ldr	r3, [r5, #16]
 801897a:	6926      	ldr	r6, [r4, #16]
 801897c:	f104 0214 	add.w	r2, r4, #20
 8018980:	f105 0914 	add.w	r9, r5, #20
 8018984:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018988:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801898c:	f100 0114 	add.w	r1, r0, #20
 8018990:	f852 ab04 	ldr.w	sl, [r2], #4
 8018994:	f859 5b04 	ldr.w	r5, [r9], #4
 8018998:	fa1f f38a 	uxth.w	r3, sl
 801899c:	4473      	add	r3, lr
 801899e:	b2ac      	uxth	r4, r5
 80189a0:	1b1b      	subs	r3, r3, r4
 80189a2:	0c2c      	lsrs	r4, r5, #16
 80189a4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80189a8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80189ac:	b29b      	uxth	r3, r3
 80189ae:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80189b2:	45c8      	cmp	r8, r9
 80189b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80189b8:	4694      	mov	ip, r2
 80189ba:	f841 4b04 	str.w	r4, [r1], #4
 80189be:	d8e7      	bhi.n	8018990 <__mdiff+0x5c>
 80189c0:	45bc      	cmp	ip, r7
 80189c2:	d304      	bcc.n	80189ce <__mdiff+0x9a>
 80189c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80189c8:	b183      	cbz	r3, 80189ec <__mdiff+0xb8>
 80189ca:	6106      	str	r6, [r0, #16]
 80189cc:	e7c4      	b.n	8018958 <__mdiff+0x24>
 80189ce:	f85c 4b04 	ldr.w	r4, [ip], #4
 80189d2:	b2a2      	uxth	r2, r4
 80189d4:	4472      	add	r2, lr
 80189d6:	1413      	asrs	r3, r2, #16
 80189d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80189dc:	b292      	uxth	r2, r2
 80189de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80189e2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80189e6:	f841 2b04 	str.w	r2, [r1], #4
 80189ea:	e7e9      	b.n	80189c0 <__mdiff+0x8c>
 80189ec:	3e01      	subs	r6, #1
 80189ee:	e7e9      	b.n	80189c4 <__mdiff+0x90>

080189f0 <__ulp>:
 80189f0:	4b10      	ldr	r3, [pc, #64]	; (8018a34 <__ulp+0x44>)
 80189f2:	400b      	ands	r3, r1
 80189f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	dd02      	ble.n	8018a02 <__ulp+0x12>
 80189fc:	2000      	movs	r0, #0
 80189fe:	4619      	mov	r1, r3
 8018a00:	4770      	bx	lr
 8018a02:	425b      	negs	r3, r3
 8018a04:	151b      	asrs	r3, r3, #20
 8018a06:	2b13      	cmp	r3, #19
 8018a08:	f04f 0000 	mov.w	r0, #0
 8018a0c:	f04f 0100 	mov.w	r1, #0
 8018a10:	dc04      	bgt.n	8018a1c <__ulp+0x2c>
 8018a12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018a16:	fa42 f103 	asr.w	r1, r2, r3
 8018a1a:	4770      	bx	lr
 8018a1c:	2201      	movs	r2, #1
 8018a1e:	3b14      	subs	r3, #20
 8018a20:	2b1e      	cmp	r3, #30
 8018a22:	bfce      	itee	gt
 8018a24:	4613      	movgt	r3, r2
 8018a26:	f1c3 031f 	rsble	r3, r3, #31
 8018a2a:	fa02 f303 	lslle.w	r3, r2, r3
 8018a2e:	4618      	mov	r0, r3
 8018a30:	4770      	bx	lr
 8018a32:	bf00      	nop
 8018a34:	7ff00000 	.word	0x7ff00000

08018a38 <__b2d>:
 8018a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a3c:	6907      	ldr	r7, [r0, #16]
 8018a3e:	f100 0914 	add.w	r9, r0, #20
 8018a42:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8018a46:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8018a4a:	f1a7 0804 	sub.w	r8, r7, #4
 8018a4e:	4630      	mov	r0, r6
 8018a50:	f7ff fdc8 	bl	80185e4 <__hi0bits>
 8018a54:	f1c0 0320 	rsb	r3, r0, #32
 8018a58:	280a      	cmp	r0, #10
 8018a5a:	600b      	str	r3, [r1, #0]
 8018a5c:	491e      	ldr	r1, [pc, #120]	; (8018ad8 <__b2d+0xa0>)
 8018a5e:	dc17      	bgt.n	8018a90 <__b2d+0x58>
 8018a60:	45c1      	cmp	r9, r8
 8018a62:	bf28      	it	cs
 8018a64:	2200      	movcs	r2, #0
 8018a66:	f1c0 0c0b 	rsb	ip, r0, #11
 8018a6a:	fa26 f30c 	lsr.w	r3, r6, ip
 8018a6e:	bf38      	it	cc
 8018a70:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8018a74:	ea43 0501 	orr.w	r5, r3, r1
 8018a78:	f100 0315 	add.w	r3, r0, #21
 8018a7c:	fa06 f303 	lsl.w	r3, r6, r3
 8018a80:	fa22 f20c 	lsr.w	r2, r2, ip
 8018a84:	ea43 0402 	orr.w	r4, r3, r2
 8018a88:	4620      	mov	r0, r4
 8018a8a:	4629      	mov	r1, r5
 8018a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a90:	45c1      	cmp	r9, r8
 8018a92:	bf3a      	itte	cc
 8018a94:	f1a7 0808 	subcc.w	r8, r7, #8
 8018a98:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8018a9c:	2200      	movcs	r2, #0
 8018a9e:	f1b0 030b 	subs.w	r3, r0, #11
 8018aa2:	d015      	beq.n	8018ad0 <__b2d+0x98>
 8018aa4:	409e      	lsls	r6, r3
 8018aa6:	f1c3 0720 	rsb	r7, r3, #32
 8018aaa:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8018aae:	fa22 f107 	lsr.w	r1, r2, r7
 8018ab2:	45c8      	cmp	r8, r9
 8018ab4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8018ab8:	ea46 0501 	orr.w	r5, r6, r1
 8018abc:	bf94      	ite	ls
 8018abe:	2100      	movls	r1, #0
 8018ac0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8018ac4:	fa02 f003 	lsl.w	r0, r2, r3
 8018ac8:	40f9      	lsrs	r1, r7
 8018aca:	ea40 0401 	orr.w	r4, r0, r1
 8018ace:	e7db      	b.n	8018a88 <__b2d+0x50>
 8018ad0:	ea46 0501 	orr.w	r5, r6, r1
 8018ad4:	4614      	mov	r4, r2
 8018ad6:	e7d7      	b.n	8018a88 <__b2d+0x50>
 8018ad8:	3ff00000 	.word	0x3ff00000

08018adc <__d2b>:
 8018adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018ae0:	461c      	mov	r4, r3
 8018ae2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8018ae6:	2101      	movs	r1, #1
 8018ae8:	4690      	mov	r8, r2
 8018aea:	f7ff fcb7 	bl	801845c <_Balloc>
 8018aee:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8018af2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8018af6:	4607      	mov	r7, r0
 8018af8:	bb34      	cbnz	r4, 8018b48 <__d2b+0x6c>
 8018afa:	9201      	str	r2, [sp, #4]
 8018afc:	f1b8 0200 	subs.w	r2, r8, #0
 8018b00:	d027      	beq.n	8018b52 <__d2b+0x76>
 8018b02:	a802      	add	r0, sp, #8
 8018b04:	f840 2d08 	str.w	r2, [r0, #-8]!
 8018b08:	f7ff fd8b 	bl	8018622 <__lo0bits>
 8018b0c:	9900      	ldr	r1, [sp, #0]
 8018b0e:	b1f0      	cbz	r0, 8018b4e <__d2b+0x72>
 8018b10:	9a01      	ldr	r2, [sp, #4]
 8018b12:	f1c0 0320 	rsb	r3, r0, #32
 8018b16:	fa02 f303 	lsl.w	r3, r2, r3
 8018b1a:	430b      	orrs	r3, r1
 8018b1c:	40c2      	lsrs	r2, r0
 8018b1e:	617b      	str	r3, [r7, #20]
 8018b20:	9201      	str	r2, [sp, #4]
 8018b22:	9b01      	ldr	r3, [sp, #4]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	bf14      	ite	ne
 8018b28:	2102      	movne	r1, #2
 8018b2a:	2101      	moveq	r1, #1
 8018b2c:	61bb      	str	r3, [r7, #24]
 8018b2e:	6139      	str	r1, [r7, #16]
 8018b30:	b1c4      	cbz	r4, 8018b64 <__d2b+0x88>
 8018b32:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018b36:	4404      	add	r4, r0
 8018b38:	6034      	str	r4, [r6, #0]
 8018b3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018b3e:	6028      	str	r0, [r5, #0]
 8018b40:	4638      	mov	r0, r7
 8018b42:	b002      	add	sp, #8
 8018b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018b4c:	e7d5      	b.n	8018afa <__d2b+0x1e>
 8018b4e:	6179      	str	r1, [r7, #20]
 8018b50:	e7e7      	b.n	8018b22 <__d2b+0x46>
 8018b52:	a801      	add	r0, sp, #4
 8018b54:	f7ff fd65 	bl	8018622 <__lo0bits>
 8018b58:	2101      	movs	r1, #1
 8018b5a:	9b01      	ldr	r3, [sp, #4]
 8018b5c:	6139      	str	r1, [r7, #16]
 8018b5e:	617b      	str	r3, [r7, #20]
 8018b60:	3020      	adds	r0, #32
 8018b62:	e7e5      	b.n	8018b30 <__d2b+0x54>
 8018b64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018b68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018b6c:	6030      	str	r0, [r6, #0]
 8018b6e:	6918      	ldr	r0, [r3, #16]
 8018b70:	f7ff fd38 	bl	80185e4 <__hi0bits>
 8018b74:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018b78:	e7e1      	b.n	8018b3e <__d2b+0x62>

08018b7a <__ratio>:
 8018b7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b7e:	4688      	mov	r8, r1
 8018b80:	4669      	mov	r1, sp
 8018b82:	4681      	mov	r9, r0
 8018b84:	f7ff ff58 	bl	8018a38 <__b2d>
 8018b88:	468b      	mov	fp, r1
 8018b8a:	4606      	mov	r6, r0
 8018b8c:	460f      	mov	r7, r1
 8018b8e:	4640      	mov	r0, r8
 8018b90:	a901      	add	r1, sp, #4
 8018b92:	f7ff ff51 	bl	8018a38 <__b2d>
 8018b96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018b9e:	460d      	mov	r5, r1
 8018ba0:	eba3 0c02 	sub.w	ip, r3, r2
 8018ba4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018ba8:	1a9b      	subs	r3, r3, r2
 8018baa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	bfd5      	itete	le
 8018bb2:	460a      	movle	r2, r1
 8018bb4:	463a      	movgt	r2, r7
 8018bb6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018bba:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018bbe:	bfd8      	it	le
 8018bc0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8018bc4:	462b      	mov	r3, r5
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	4659      	mov	r1, fp
 8018bca:	4630      	mov	r0, r6
 8018bcc:	f7e7 fdd0 	bl	8000770 <__aeabi_ddiv>
 8018bd0:	b003      	add	sp, #12
 8018bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bd6 <__copybits>:
 8018bd6:	3901      	subs	r1, #1
 8018bd8:	b510      	push	{r4, lr}
 8018bda:	1149      	asrs	r1, r1, #5
 8018bdc:	6914      	ldr	r4, [r2, #16]
 8018bde:	3101      	adds	r1, #1
 8018be0:	f102 0314 	add.w	r3, r2, #20
 8018be4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018be8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018bec:	42a3      	cmp	r3, r4
 8018bee:	4602      	mov	r2, r0
 8018bf0:	d303      	bcc.n	8018bfa <__copybits+0x24>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	428a      	cmp	r2, r1
 8018bf6:	d305      	bcc.n	8018c04 <__copybits+0x2e>
 8018bf8:	bd10      	pop	{r4, pc}
 8018bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bfe:	f840 2b04 	str.w	r2, [r0], #4
 8018c02:	e7f3      	b.n	8018bec <__copybits+0x16>
 8018c04:	f842 3b04 	str.w	r3, [r2], #4
 8018c08:	e7f4      	b.n	8018bf4 <__copybits+0x1e>

08018c0a <__any_on>:
 8018c0a:	f100 0214 	add.w	r2, r0, #20
 8018c0e:	6900      	ldr	r0, [r0, #16]
 8018c10:	114b      	asrs	r3, r1, #5
 8018c12:	4298      	cmp	r0, r3
 8018c14:	b510      	push	{r4, lr}
 8018c16:	db11      	blt.n	8018c3c <__any_on+0x32>
 8018c18:	dd0a      	ble.n	8018c30 <__any_on+0x26>
 8018c1a:	f011 011f 	ands.w	r1, r1, #31
 8018c1e:	d007      	beq.n	8018c30 <__any_on+0x26>
 8018c20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c24:	fa24 f001 	lsr.w	r0, r4, r1
 8018c28:	fa00 f101 	lsl.w	r1, r0, r1
 8018c2c:	428c      	cmp	r4, r1
 8018c2e:	d10b      	bne.n	8018c48 <__any_on+0x3e>
 8018c30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c34:	4293      	cmp	r3, r2
 8018c36:	d803      	bhi.n	8018c40 <__any_on+0x36>
 8018c38:	2000      	movs	r0, #0
 8018c3a:	bd10      	pop	{r4, pc}
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	e7f7      	b.n	8018c30 <__any_on+0x26>
 8018c40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c44:	2900      	cmp	r1, #0
 8018c46:	d0f5      	beq.n	8018c34 <__any_on+0x2a>
 8018c48:	2001      	movs	r0, #1
 8018c4a:	e7f6      	b.n	8018c3a <__any_on+0x30>

08018c4c <_calloc_r>:
 8018c4c:	b538      	push	{r3, r4, r5, lr}
 8018c4e:	fb02 f401 	mul.w	r4, r2, r1
 8018c52:	4621      	mov	r1, r4
 8018c54:	f000 f854 	bl	8018d00 <_malloc_r>
 8018c58:	4605      	mov	r5, r0
 8018c5a:	b118      	cbz	r0, 8018c64 <_calloc_r+0x18>
 8018c5c:	4622      	mov	r2, r4
 8018c5e:	2100      	movs	r1, #0
 8018c60:	f7fc f938 	bl	8014ed4 <memset>
 8018c64:	4628      	mov	r0, r5
 8018c66:	bd38      	pop	{r3, r4, r5, pc}

08018c68 <_free_r>:
 8018c68:	b538      	push	{r3, r4, r5, lr}
 8018c6a:	4605      	mov	r5, r0
 8018c6c:	2900      	cmp	r1, #0
 8018c6e:	d043      	beq.n	8018cf8 <_free_r+0x90>
 8018c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c74:	1f0c      	subs	r4, r1, #4
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	bfb8      	it	lt
 8018c7a:	18e4      	addlt	r4, r4, r3
 8018c7c:	f000 ff74 	bl	8019b68 <__malloc_lock>
 8018c80:	4a1e      	ldr	r2, [pc, #120]	; (8018cfc <_free_r+0x94>)
 8018c82:	6813      	ldr	r3, [r2, #0]
 8018c84:	4610      	mov	r0, r2
 8018c86:	b933      	cbnz	r3, 8018c96 <_free_r+0x2e>
 8018c88:	6063      	str	r3, [r4, #4]
 8018c8a:	6014      	str	r4, [r2, #0]
 8018c8c:	4628      	mov	r0, r5
 8018c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c92:	f000 bf6a 	b.w	8019b6a <__malloc_unlock>
 8018c96:	42a3      	cmp	r3, r4
 8018c98:	d90b      	bls.n	8018cb2 <_free_r+0x4a>
 8018c9a:	6821      	ldr	r1, [r4, #0]
 8018c9c:	1862      	adds	r2, r4, r1
 8018c9e:	4293      	cmp	r3, r2
 8018ca0:	bf01      	itttt	eq
 8018ca2:	681a      	ldreq	r2, [r3, #0]
 8018ca4:	685b      	ldreq	r3, [r3, #4]
 8018ca6:	1852      	addeq	r2, r2, r1
 8018ca8:	6022      	streq	r2, [r4, #0]
 8018caa:	6063      	str	r3, [r4, #4]
 8018cac:	6004      	str	r4, [r0, #0]
 8018cae:	e7ed      	b.n	8018c8c <_free_r+0x24>
 8018cb0:	4613      	mov	r3, r2
 8018cb2:	685a      	ldr	r2, [r3, #4]
 8018cb4:	b10a      	cbz	r2, 8018cba <_free_r+0x52>
 8018cb6:	42a2      	cmp	r2, r4
 8018cb8:	d9fa      	bls.n	8018cb0 <_free_r+0x48>
 8018cba:	6819      	ldr	r1, [r3, #0]
 8018cbc:	1858      	adds	r0, r3, r1
 8018cbe:	42a0      	cmp	r0, r4
 8018cc0:	d10b      	bne.n	8018cda <_free_r+0x72>
 8018cc2:	6820      	ldr	r0, [r4, #0]
 8018cc4:	4401      	add	r1, r0
 8018cc6:	1858      	adds	r0, r3, r1
 8018cc8:	4282      	cmp	r2, r0
 8018cca:	6019      	str	r1, [r3, #0]
 8018ccc:	d1de      	bne.n	8018c8c <_free_r+0x24>
 8018cce:	6810      	ldr	r0, [r2, #0]
 8018cd0:	6852      	ldr	r2, [r2, #4]
 8018cd2:	4401      	add	r1, r0
 8018cd4:	6019      	str	r1, [r3, #0]
 8018cd6:	605a      	str	r2, [r3, #4]
 8018cd8:	e7d8      	b.n	8018c8c <_free_r+0x24>
 8018cda:	d902      	bls.n	8018ce2 <_free_r+0x7a>
 8018cdc:	230c      	movs	r3, #12
 8018cde:	602b      	str	r3, [r5, #0]
 8018ce0:	e7d4      	b.n	8018c8c <_free_r+0x24>
 8018ce2:	6820      	ldr	r0, [r4, #0]
 8018ce4:	1821      	adds	r1, r4, r0
 8018ce6:	428a      	cmp	r2, r1
 8018ce8:	bf01      	itttt	eq
 8018cea:	6811      	ldreq	r1, [r2, #0]
 8018cec:	6852      	ldreq	r2, [r2, #4]
 8018cee:	1809      	addeq	r1, r1, r0
 8018cf0:	6021      	streq	r1, [r4, #0]
 8018cf2:	6062      	str	r2, [r4, #4]
 8018cf4:	605c      	str	r4, [r3, #4]
 8018cf6:	e7c9      	b.n	8018c8c <_free_r+0x24>
 8018cf8:	bd38      	pop	{r3, r4, r5, pc}
 8018cfa:	bf00      	nop
 8018cfc:	2000894c 	.word	0x2000894c

08018d00 <_malloc_r>:
 8018d00:	b570      	push	{r4, r5, r6, lr}
 8018d02:	1ccd      	adds	r5, r1, #3
 8018d04:	f025 0503 	bic.w	r5, r5, #3
 8018d08:	3508      	adds	r5, #8
 8018d0a:	2d0c      	cmp	r5, #12
 8018d0c:	bf38      	it	cc
 8018d0e:	250c      	movcc	r5, #12
 8018d10:	2d00      	cmp	r5, #0
 8018d12:	4606      	mov	r6, r0
 8018d14:	db01      	blt.n	8018d1a <_malloc_r+0x1a>
 8018d16:	42a9      	cmp	r1, r5
 8018d18:	d903      	bls.n	8018d22 <_malloc_r+0x22>
 8018d1a:	230c      	movs	r3, #12
 8018d1c:	6033      	str	r3, [r6, #0]
 8018d1e:	2000      	movs	r0, #0
 8018d20:	bd70      	pop	{r4, r5, r6, pc}
 8018d22:	f000 ff21 	bl	8019b68 <__malloc_lock>
 8018d26:	4a21      	ldr	r2, [pc, #132]	; (8018dac <_malloc_r+0xac>)
 8018d28:	6814      	ldr	r4, [r2, #0]
 8018d2a:	4621      	mov	r1, r4
 8018d2c:	b991      	cbnz	r1, 8018d54 <_malloc_r+0x54>
 8018d2e:	4c20      	ldr	r4, [pc, #128]	; (8018db0 <_malloc_r+0xb0>)
 8018d30:	6823      	ldr	r3, [r4, #0]
 8018d32:	b91b      	cbnz	r3, 8018d3c <_malloc_r+0x3c>
 8018d34:	4630      	mov	r0, r6
 8018d36:	f000 fde1 	bl	80198fc <_sbrk_r>
 8018d3a:	6020      	str	r0, [r4, #0]
 8018d3c:	4629      	mov	r1, r5
 8018d3e:	4630      	mov	r0, r6
 8018d40:	f000 fddc 	bl	80198fc <_sbrk_r>
 8018d44:	1c43      	adds	r3, r0, #1
 8018d46:	d124      	bne.n	8018d92 <_malloc_r+0x92>
 8018d48:	230c      	movs	r3, #12
 8018d4a:	4630      	mov	r0, r6
 8018d4c:	6033      	str	r3, [r6, #0]
 8018d4e:	f000 ff0c 	bl	8019b6a <__malloc_unlock>
 8018d52:	e7e4      	b.n	8018d1e <_malloc_r+0x1e>
 8018d54:	680b      	ldr	r3, [r1, #0]
 8018d56:	1b5b      	subs	r3, r3, r5
 8018d58:	d418      	bmi.n	8018d8c <_malloc_r+0x8c>
 8018d5a:	2b0b      	cmp	r3, #11
 8018d5c:	d90f      	bls.n	8018d7e <_malloc_r+0x7e>
 8018d5e:	600b      	str	r3, [r1, #0]
 8018d60:	18cc      	adds	r4, r1, r3
 8018d62:	50cd      	str	r5, [r1, r3]
 8018d64:	4630      	mov	r0, r6
 8018d66:	f000 ff00 	bl	8019b6a <__malloc_unlock>
 8018d6a:	f104 000b 	add.w	r0, r4, #11
 8018d6e:	1d23      	adds	r3, r4, #4
 8018d70:	f020 0007 	bic.w	r0, r0, #7
 8018d74:	1ac3      	subs	r3, r0, r3
 8018d76:	d0d3      	beq.n	8018d20 <_malloc_r+0x20>
 8018d78:	425a      	negs	r2, r3
 8018d7a:	50e2      	str	r2, [r4, r3]
 8018d7c:	e7d0      	b.n	8018d20 <_malloc_r+0x20>
 8018d7e:	684b      	ldr	r3, [r1, #4]
 8018d80:	428c      	cmp	r4, r1
 8018d82:	bf16      	itet	ne
 8018d84:	6063      	strne	r3, [r4, #4]
 8018d86:	6013      	streq	r3, [r2, #0]
 8018d88:	460c      	movne	r4, r1
 8018d8a:	e7eb      	b.n	8018d64 <_malloc_r+0x64>
 8018d8c:	460c      	mov	r4, r1
 8018d8e:	6849      	ldr	r1, [r1, #4]
 8018d90:	e7cc      	b.n	8018d2c <_malloc_r+0x2c>
 8018d92:	1cc4      	adds	r4, r0, #3
 8018d94:	f024 0403 	bic.w	r4, r4, #3
 8018d98:	42a0      	cmp	r0, r4
 8018d9a:	d005      	beq.n	8018da8 <_malloc_r+0xa8>
 8018d9c:	1a21      	subs	r1, r4, r0
 8018d9e:	4630      	mov	r0, r6
 8018da0:	f000 fdac 	bl	80198fc <_sbrk_r>
 8018da4:	3001      	adds	r0, #1
 8018da6:	d0cf      	beq.n	8018d48 <_malloc_r+0x48>
 8018da8:	6025      	str	r5, [r4, #0]
 8018daa:	e7db      	b.n	8018d64 <_malloc_r+0x64>
 8018dac:	2000894c 	.word	0x2000894c
 8018db0:	20008950 	.word	0x20008950

08018db4 <__ssputs_r>:
 8018db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018db8:	688e      	ldr	r6, [r1, #8]
 8018dba:	4682      	mov	sl, r0
 8018dbc:	429e      	cmp	r6, r3
 8018dbe:	460c      	mov	r4, r1
 8018dc0:	4690      	mov	r8, r2
 8018dc2:	4699      	mov	r9, r3
 8018dc4:	d837      	bhi.n	8018e36 <__ssputs_r+0x82>
 8018dc6:	898a      	ldrh	r2, [r1, #12]
 8018dc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018dcc:	d031      	beq.n	8018e32 <__ssputs_r+0x7e>
 8018dce:	2302      	movs	r3, #2
 8018dd0:	6825      	ldr	r5, [r4, #0]
 8018dd2:	6909      	ldr	r1, [r1, #16]
 8018dd4:	1a6f      	subs	r7, r5, r1
 8018dd6:	6965      	ldr	r5, [r4, #20]
 8018dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ddc:	fb95 f5f3 	sdiv	r5, r5, r3
 8018de0:	f109 0301 	add.w	r3, r9, #1
 8018de4:	443b      	add	r3, r7
 8018de6:	429d      	cmp	r5, r3
 8018de8:	bf38      	it	cc
 8018dea:	461d      	movcc	r5, r3
 8018dec:	0553      	lsls	r3, r2, #21
 8018dee:	d530      	bpl.n	8018e52 <__ssputs_r+0x9e>
 8018df0:	4629      	mov	r1, r5
 8018df2:	f7ff ff85 	bl	8018d00 <_malloc_r>
 8018df6:	4606      	mov	r6, r0
 8018df8:	b950      	cbnz	r0, 8018e10 <__ssputs_r+0x5c>
 8018dfa:	230c      	movs	r3, #12
 8018dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8018e00:	f8ca 3000 	str.w	r3, [sl]
 8018e04:	89a3      	ldrh	r3, [r4, #12]
 8018e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e0a:	81a3      	strh	r3, [r4, #12]
 8018e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e10:	463a      	mov	r2, r7
 8018e12:	6921      	ldr	r1, [r4, #16]
 8018e14:	f7fc f83a 	bl	8014e8c <memcpy>
 8018e18:	89a3      	ldrh	r3, [r4, #12]
 8018e1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e22:	81a3      	strh	r3, [r4, #12]
 8018e24:	6126      	str	r6, [r4, #16]
 8018e26:	443e      	add	r6, r7
 8018e28:	6026      	str	r6, [r4, #0]
 8018e2a:	464e      	mov	r6, r9
 8018e2c:	6165      	str	r5, [r4, #20]
 8018e2e:	1bed      	subs	r5, r5, r7
 8018e30:	60a5      	str	r5, [r4, #8]
 8018e32:	454e      	cmp	r6, r9
 8018e34:	d900      	bls.n	8018e38 <__ssputs_r+0x84>
 8018e36:	464e      	mov	r6, r9
 8018e38:	4632      	mov	r2, r6
 8018e3a:	4641      	mov	r1, r8
 8018e3c:	6820      	ldr	r0, [r4, #0]
 8018e3e:	f7fc f830 	bl	8014ea2 <memmove>
 8018e42:	68a3      	ldr	r3, [r4, #8]
 8018e44:	2000      	movs	r0, #0
 8018e46:	1b9b      	subs	r3, r3, r6
 8018e48:	60a3      	str	r3, [r4, #8]
 8018e4a:	6823      	ldr	r3, [r4, #0]
 8018e4c:	441e      	add	r6, r3
 8018e4e:	6026      	str	r6, [r4, #0]
 8018e50:	e7dc      	b.n	8018e0c <__ssputs_r+0x58>
 8018e52:	462a      	mov	r2, r5
 8018e54:	f000 fe8a 	bl	8019b6c <_realloc_r>
 8018e58:	4606      	mov	r6, r0
 8018e5a:	2800      	cmp	r0, #0
 8018e5c:	d1e2      	bne.n	8018e24 <__ssputs_r+0x70>
 8018e5e:	6921      	ldr	r1, [r4, #16]
 8018e60:	4650      	mov	r0, sl
 8018e62:	f7ff ff01 	bl	8018c68 <_free_r>
 8018e66:	e7c8      	b.n	8018dfa <__ssputs_r+0x46>

08018e68 <_svfiprintf_r>:
 8018e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e6c:	461d      	mov	r5, r3
 8018e6e:	898b      	ldrh	r3, [r1, #12]
 8018e70:	b09d      	sub	sp, #116	; 0x74
 8018e72:	061f      	lsls	r7, r3, #24
 8018e74:	4680      	mov	r8, r0
 8018e76:	460c      	mov	r4, r1
 8018e78:	4616      	mov	r6, r2
 8018e7a:	d50f      	bpl.n	8018e9c <_svfiprintf_r+0x34>
 8018e7c:	690b      	ldr	r3, [r1, #16]
 8018e7e:	b96b      	cbnz	r3, 8018e9c <_svfiprintf_r+0x34>
 8018e80:	2140      	movs	r1, #64	; 0x40
 8018e82:	f7ff ff3d 	bl	8018d00 <_malloc_r>
 8018e86:	6020      	str	r0, [r4, #0]
 8018e88:	6120      	str	r0, [r4, #16]
 8018e8a:	b928      	cbnz	r0, 8018e98 <_svfiprintf_r+0x30>
 8018e8c:	230c      	movs	r3, #12
 8018e8e:	f8c8 3000 	str.w	r3, [r8]
 8018e92:	f04f 30ff 	mov.w	r0, #4294967295
 8018e96:	e0c8      	b.n	801902a <_svfiprintf_r+0x1c2>
 8018e98:	2340      	movs	r3, #64	; 0x40
 8018e9a:	6163      	str	r3, [r4, #20]
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8018ea0:	2320      	movs	r3, #32
 8018ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ea6:	2330      	movs	r3, #48	; 0x30
 8018ea8:	f04f 0b01 	mov.w	fp, #1
 8018eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018eb0:	9503      	str	r5, [sp, #12]
 8018eb2:	4637      	mov	r7, r6
 8018eb4:	463d      	mov	r5, r7
 8018eb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018eba:	b10b      	cbz	r3, 8018ec0 <_svfiprintf_r+0x58>
 8018ebc:	2b25      	cmp	r3, #37	; 0x25
 8018ebe:	d13e      	bne.n	8018f3e <_svfiprintf_r+0xd6>
 8018ec0:	ebb7 0a06 	subs.w	sl, r7, r6
 8018ec4:	d00b      	beq.n	8018ede <_svfiprintf_r+0x76>
 8018ec6:	4653      	mov	r3, sl
 8018ec8:	4632      	mov	r2, r6
 8018eca:	4621      	mov	r1, r4
 8018ecc:	4640      	mov	r0, r8
 8018ece:	f7ff ff71 	bl	8018db4 <__ssputs_r>
 8018ed2:	3001      	adds	r0, #1
 8018ed4:	f000 80a4 	beq.w	8019020 <_svfiprintf_r+0x1b8>
 8018ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018eda:	4453      	add	r3, sl
 8018edc:	9309      	str	r3, [sp, #36]	; 0x24
 8018ede:	783b      	ldrb	r3, [r7, #0]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	f000 809d 	beq.w	8019020 <_svfiprintf_r+0x1b8>
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8018eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ef0:	9304      	str	r3, [sp, #16]
 8018ef2:	9307      	str	r3, [sp, #28]
 8018ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8018efa:	462f      	mov	r7, r5
 8018efc:	2205      	movs	r2, #5
 8018efe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018f02:	4850      	ldr	r0, [pc, #320]	; (8019044 <_svfiprintf_r+0x1dc>)
 8018f04:	f7ff fa9c 	bl	8018440 <memchr>
 8018f08:	9b04      	ldr	r3, [sp, #16]
 8018f0a:	b9d0      	cbnz	r0, 8018f42 <_svfiprintf_r+0xda>
 8018f0c:	06d9      	lsls	r1, r3, #27
 8018f0e:	bf44      	itt	mi
 8018f10:	2220      	movmi	r2, #32
 8018f12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f16:	071a      	lsls	r2, r3, #28
 8018f18:	bf44      	itt	mi
 8018f1a:	222b      	movmi	r2, #43	; 0x2b
 8018f1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018f20:	782a      	ldrb	r2, [r5, #0]
 8018f22:	2a2a      	cmp	r2, #42	; 0x2a
 8018f24:	d015      	beq.n	8018f52 <_svfiprintf_r+0xea>
 8018f26:	462f      	mov	r7, r5
 8018f28:	2000      	movs	r0, #0
 8018f2a:	250a      	movs	r5, #10
 8018f2c:	9a07      	ldr	r2, [sp, #28]
 8018f2e:	4639      	mov	r1, r7
 8018f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f34:	3b30      	subs	r3, #48	; 0x30
 8018f36:	2b09      	cmp	r3, #9
 8018f38:	d94d      	bls.n	8018fd6 <_svfiprintf_r+0x16e>
 8018f3a:	b1b8      	cbz	r0, 8018f6c <_svfiprintf_r+0x104>
 8018f3c:	e00f      	b.n	8018f5e <_svfiprintf_r+0xf6>
 8018f3e:	462f      	mov	r7, r5
 8018f40:	e7b8      	b.n	8018eb4 <_svfiprintf_r+0x4c>
 8018f42:	4a40      	ldr	r2, [pc, #256]	; (8019044 <_svfiprintf_r+0x1dc>)
 8018f44:	463d      	mov	r5, r7
 8018f46:	1a80      	subs	r0, r0, r2
 8018f48:	fa0b f000 	lsl.w	r0, fp, r0
 8018f4c:	4318      	orrs	r0, r3
 8018f4e:	9004      	str	r0, [sp, #16]
 8018f50:	e7d3      	b.n	8018efa <_svfiprintf_r+0x92>
 8018f52:	9a03      	ldr	r2, [sp, #12]
 8018f54:	1d11      	adds	r1, r2, #4
 8018f56:	6812      	ldr	r2, [r2, #0]
 8018f58:	9103      	str	r1, [sp, #12]
 8018f5a:	2a00      	cmp	r2, #0
 8018f5c:	db01      	blt.n	8018f62 <_svfiprintf_r+0xfa>
 8018f5e:	9207      	str	r2, [sp, #28]
 8018f60:	e004      	b.n	8018f6c <_svfiprintf_r+0x104>
 8018f62:	4252      	negs	r2, r2
 8018f64:	f043 0302 	orr.w	r3, r3, #2
 8018f68:	9207      	str	r2, [sp, #28]
 8018f6a:	9304      	str	r3, [sp, #16]
 8018f6c:	783b      	ldrb	r3, [r7, #0]
 8018f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8018f70:	d10c      	bne.n	8018f8c <_svfiprintf_r+0x124>
 8018f72:	787b      	ldrb	r3, [r7, #1]
 8018f74:	2b2a      	cmp	r3, #42	; 0x2a
 8018f76:	d133      	bne.n	8018fe0 <_svfiprintf_r+0x178>
 8018f78:	9b03      	ldr	r3, [sp, #12]
 8018f7a:	3702      	adds	r7, #2
 8018f7c:	1d1a      	adds	r2, r3, #4
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	9203      	str	r2, [sp, #12]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	bfb8      	it	lt
 8018f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8018f8a:	9305      	str	r3, [sp, #20]
 8018f8c:	4d2e      	ldr	r5, [pc, #184]	; (8019048 <_svfiprintf_r+0x1e0>)
 8018f8e:	2203      	movs	r2, #3
 8018f90:	7839      	ldrb	r1, [r7, #0]
 8018f92:	4628      	mov	r0, r5
 8018f94:	f7ff fa54 	bl	8018440 <memchr>
 8018f98:	b138      	cbz	r0, 8018faa <_svfiprintf_r+0x142>
 8018f9a:	2340      	movs	r3, #64	; 0x40
 8018f9c:	1b40      	subs	r0, r0, r5
 8018f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8018fa2:	9b04      	ldr	r3, [sp, #16]
 8018fa4:	3701      	adds	r7, #1
 8018fa6:	4303      	orrs	r3, r0
 8018fa8:	9304      	str	r3, [sp, #16]
 8018faa:	7839      	ldrb	r1, [r7, #0]
 8018fac:	2206      	movs	r2, #6
 8018fae:	4827      	ldr	r0, [pc, #156]	; (801904c <_svfiprintf_r+0x1e4>)
 8018fb0:	1c7e      	adds	r6, r7, #1
 8018fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018fb6:	f7ff fa43 	bl	8018440 <memchr>
 8018fba:	2800      	cmp	r0, #0
 8018fbc:	d038      	beq.n	8019030 <_svfiprintf_r+0x1c8>
 8018fbe:	4b24      	ldr	r3, [pc, #144]	; (8019050 <_svfiprintf_r+0x1e8>)
 8018fc0:	bb13      	cbnz	r3, 8019008 <_svfiprintf_r+0x1a0>
 8018fc2:	9b03      	ldr	r3, [sp, #12]
 8018fc4:	3307      	adds	r3, #7
 8018fc6:	f023 0307 	bic.w	r3, r3, #7
 8018fca:	3308      	adds	r3, #8
 8018fcc:	9303      	str	r3, [sp, #12]
 8018fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fd0:	444b      	add	r3, r9
 8018fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8018fd4:	e76d      	b.n	8018eb2 <_svfiprintf_r+0x4a>
 8018fd6:	fb05 3202 	mla	r2, r5, r2, r3
 8018fda:	2001      	movs	r0, #1
 8018fdc:	460f      	mov	r7, r1
 8018fde:	e7a6      	b.n	8018f2e <_svfiprintf_r+0xc6>
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	250a      	movs	r5, #10
 8018fe4:	4619      	mov	r1, r3
 8018fe6:	3701      	adds	r7, #1
 8018fe8:	9305      	str	r3, [sp, #20]
 8018fea:	4638      	mov	r0, r7
 8018fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ff0:	3a30      	subs	r2, #48	; 0x30
 8018ff2:	2a09      	cmp	r2, #9
 8018ff4:	d903      	bls.n	8018ffe <_svfiprintf_r+0x196>
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d0c8      	beq.n	8018f8c <_svfiprintf_r+0x124>
 8018ffa:	9105      	str	r1, [sp, #20]
 8018ffc:	e7c6      	b.n	8018f8c <_svfiprintf_r+0x124>
 8018ffe:	fb05 2101 	mla	r1, r5, r1, r2
 8019002:	2301      	movs	r3, #1
 8019004:	4607      	mov	r7, r0
 8019006:	e7f0      	b.n	8018fea <_svfiprintf_r+0x182>
 8019008:	ab03      	add	r3, sp, #12
 801900a:	9300      	str	r3, [sp, #0]
 801900c:	4622      	mov	r2, r4
 801900e:	4b11      	ldr	r3, [pc, #68]	; (8019054 <_svfiprintf_r+0x1ec>)
 8019010:	a904      	add	r1, sp, #16
 8019012:	4640      	mov	r0, r8
 8019014:	f7fb fff8 	bl	8015008 <_printf_float>
 8019018:	f1b0 3fff 	cmp.w	r0, #4294967295
 801901c:	4681      	mov	r9, r0
 801901e:	d1d6      	bne.n	8018fce <_svfiprintf_r+0x166>
 8019020:	89a3      	ldrh	r3, [r4, #12]
 8019022:	065b      	lsls	r3, r3, #25
 8019024:	f53f af35 	bmi.w	8018e92 <_svfiprintf_r+0x2a>
 8019028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801902a:	b01d      	add	sp, #116	; 0x74
 801902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019030:	ab03      	add	r3, sp, #12
 8019032:	9300      	str	r3, [sp, #0]
 8019034:	4622      	mov	r2, r4
 8019036:	4b07      	ldr	r3, [pc, #28]	; (8019054 <_svfiprintf_r+0x1ec>)
 8019038:	a904      	add	r1, sp, #16
 801903a:	4640      	mov	r0, r8
 801903c:	f7fc fa90 	bl	8015560 <_printf_i>
 8019040:	e7ea      	b.n	8019018 <_svfiprintf_r+0x1b0>
 8019042:	bf00      	nop
 8019044:	0801e824 	.word	0x0801e824
 8019048:	0801e82a 	.word	0x0801e82a
 801904c:	0801e82e 	.word	0x0801e82e
 8019050:	08015009 	.word	0x08015009
 8019054:	08018db5 	.word	0x08018db5

08019058 <_sungetc_r>:
 8019058:	b538      	push	{r3, r4, r5, lr}
 801905a:	1c4b      	adds	r3, r1, #1
 801905c:	4614      	mov	r4, r2
 801905e:	d103      	bne.n	8019068 <_sungetc_r+0x10>
 8019060:	f04f 35ff 	mov.w	r5, #4294967295
 8019064:	4628      	mov	r0, r5
 8019066:	bd38      	pop	{r3, r4, r5, pc}
 8019068:	8993      	ldrh	r3, [r2, #12]
 801906a:	b2cd      	uxtb	r5, r1
 801906c:	f023 0320 	bic.w	r3, r3, #32
 8019070:	8193      	strh	r3, [r2, #12]
 8019072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019074:	6852      	ldr	r2, [r2, #4]
 8019076:	b18b      	cbz	r3, 801909c <_sungetc_r+0x44>
 8019078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801907a:	4293      	cmp	r3, r2
 801907c:	dd08      	ble.n	8019090 <_sungetc_r+0x38>
 801907e:	6823      	ldr	r3, [r4, #0]
 8019080:	1e5a      	subs	r2, r3, #1
 8019082:	6022      	str	r2, [r4, #0]
 8019084:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019088:	6863      	ldr	r3, [r4, #4]
 801908a:	3301      	adds	r3, #1
 801908c:	6063      	str	r3, [r4, #4]
 801908e:	e7e9      	b.n	8019064 <_sungetc_r+0xc>
 8019090:	4621      	mov	r1, r4
 8019092:	f000 fd01 	bl	8019a98 <__submore>
 8019096:	2800      	cmp	r0, #0
 8019098:	d0f1      	beq.n	801907e <_sungetc_r+0x26>
 801909a:	e7e1      	b.n	8019060 <_sungetc_r+0x8>
 801909c:	6921      	ldr	r1, [r4, #16]
 801909e:	6823      	ldr	r3, [r4, #0]
 80190a0:	b151      	cbz	r1, 80190b8 <_sungetc_r+0x60>
 80190a2:	4299      	cmp	r1, r3
 80190a4:	d208      	bcs.n	80190b8 <_sungetc_r+0x60>
 80190a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80190aa:	42a9      	cmp	r1, r5
 80190ac:	d104      	bne.n	80190b8 <_sungetc_r+0x60>
 80190ae:	3b01      	subs	r3, #1
 80190b0:	3201      	adds	r2, #1
 80190b2:	6023      	str	r3, [r4, #0]
 80190b4:	6062      	str	r2, [r4, #4]
 80190b6:	e7d5      	b.n	8019064 <_sungetc_r+0xc>
 80190b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80190bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190c0:	6363      	str	r3, [r4, #52]	; 0x34
 80190c2:	2303      	movs	r3, #3
 80190c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80190c6:	4623      	mov	r3, r4
 80190c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80190cc:	6023      	str	r3, [r4, #0]
 80190ce:	2301      	movs	r3, #1
 80190d0:	e7dc      	b.n	801908c <_sungetc_r+0x34>

080190d2 <__ssrefill_r>:
 80190d2:	b510      	push	{r4, lr}
 80190d4:	460c      	mov	r4, r1
 80190d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80190d8:	b169      	cbz	r1, 80190f6 <__ssrefill_r+0x24>
 80190da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190de:	4299      	cmp	r1, r3
 80190e0:	d001      	beq.n	80190e6 <__ssrefill_r+0x14>
 80190e2:	f7ff fdc1 	bl	8018c68 <_free_r>
 80190e6:	2000      	movs	r0, #0
 80190e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80190ea:	6360      	str	r0, [r4, #52]	; 0x34
 80190ec:	6063      	str	r3, [r4, #4]
 80190ee:	b113      	cbz	r3, 80190f6 <__ssrefill_r+0x24>
 80190f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80190f2:	6023      	str	r3, [r4, #0]
 80190f4:	bd10      	pop	{r4, pc}
 80190f6:	6923      	ldr	r3, [r4, #16]
 80190f8:	f04f 30ff 	mov.w	r0, #4294967295
 80190fc:	6023      	str	r3, [r4, #0]
 80190fe:	2300      	movs	r3, #0
 8019100:	6063      	str	r3, [r4, #4]
 8019102:	89a3      	ldrh	r3, [r4, #12]
 8019104:	f043 0320 	orr.w	r3, r3, #32
 8019108:	81a3      	strh	r3, [r4, #12]
 801910a:	e7f3      	b.n	80190f4 <__ssrefill_r+0x22>

0801910c <__ssvfiscanf_r>:
 801910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019110:	460c      	mov	r4, r1
 8019112:	2100      	movs	r1, #0
 8019114:	4606      	mov	r6, r0
 8019116:	4692      	mov	sl, r2
 8019118:	270a      	movs	r7, #10
 801911a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801911e:	9144      	str	r1, [sp, #272]	; 0x110
 8019120:	9145      	str	r1, [sp, #276]	; 0x114
 8019122:	499e      	ldr	r1, [pc, #632]	; (801939c <__ssvfiscanf_r+0x290>)
 8019124:	f10d 0804 	add.w	r8, sp, #4
 8019128:	91a0      	str	r1, [sp, #640]	; 0x280
 801912a:	499d      	ldr	r1, [pc, #628]	; (80193a0 <__ssvfiscanf_r+0x294>)
 801912c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80193a4 <__ssvfiscanf_r+0x298>
 8019130:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019134:	91a1      	str	r1, [sp, #644]	; 0x284
 8019136:	9300      	str	r3, [sp, #0]
 8019138:	f89a 3000 	ldrb.w	r3, [sl]
 801913c:	2b00      	cmp	r3, #0
 801913e:	f000 812a 	beq.w	8019396 <__ssvfiscanf_r+0x28a>
 8019142:	4655      	mov	r5, sl
 8019144:	f7ff f8ce 	bl	80182e4 <__locale_ctype_ptr>
 8019148:	f815 bb01 	ldrb.w	fp, [r5], #1
 801914c:	4458      	add	r0, fp
 801914e:	7843      	ldrb	r3, [r0, #1]
 8019150:	f013 0308 	ands.w	r3, r3, #8
 8019154:	d01c      	beq.n	8019190 <__ssvfiscanf_r+0x84>
 8019156:	6863      	ldr	r3, [r4, #4]
 8019158:	2b00      	cmp	r3, #0
 801915a:	dd12      	ble.n	8019182 <__ssvfiscanf_r+0x76>
 801915c:	f7ff f8c2 	bl	80182e4 <__locale_ctype_ptr>
 8019160:	6823      	ldr	r3, [r4, #0]
 8019162:	781a      	ldrb	r2, [r3, #0]
 8019164:	4410      	add	r0, r2
 8019166:	7842      	ldrb	r2, [r0, #1]
 8019168:	0712      	lsls	r2, r2, #28
 801916a:	d401      	bmi.n	8019170 <__ssvfiscanf_r+0x64>
 801916c:	46aa      	mov	sl, r5
 801916e:	e7e3      	b.n	8019138 <__ssvfiscanf_r+0x2c>
 8019170:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019172:	3301      	adds	r3, #1
 8019174:	3201      	adds	r2, #1
 8019176:	9245      	str	r2, [sp, #276]	; 0x114
 8019178:	6862      	ldr	r2, [r4, #4]
 801917a:	6023      	str	r3, [r4, #0]
 801917c:	3a01      	subs	r2, #1
 801917e:	6062      	str	r2, [r4, #4]
 8019180:	e7e9      	b.n	8019156 <__ssvfiscanf_r+0x4a>
 8019182:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019184:	4621      	mov	r1, r4
 8019186:	4630      	mov	r0, r6
 8019188:	4798      	blx	r3
 801918a:	2800      	cmp	r0, #0
 801918c:	d0e6      	beq.n	801915c <__ssvfiscanf_r+0x50>
 801918e:	e7ed      	b.n	801916c <__ssvfiscanf_r+0x60>
 8019190:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019194:	f040 8082 	bne.w	801929c <__ssvfiscanf_r+0x190>
 8019198:	9343      	str	r3, [sp, #268]	; 0x10c
 801919a:	9341      	str	r3, [sp, #260]	; 0x104
 801919c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80191a0:	2b2a      	cmp	r3, #42	; 0x2a
 80191a2:	d103      	bne.n	80191ac <__ssvfiscanf_r+0xa0>
 80191a4:	2310      	movs	r3, #16
 80191a6:	f10a 0502 	add.w	r5, sl, #2
 80191aa:	9341      	str	r3, [sp, #260]	; 0x104
 80191ac:	46aa      	mov	sl, r5
 80191ae:	f815 1b01 	ldrb.w	r1, [r5], #1
 80191b2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80191b6:	2a09      	cmp	r2, #9
 80191b8:	d922      	bls.n	8019200 <__ssvfiscanf_r+0xf4>
 80191ba:	2203      	movs	r2, #3
 80191bc:	4879      	ldr	r0, [pc, #484]	; (80193a4 <__ssvfiscanf_r+0x298>)
 80191be:	f7ff f93f 	bl	8018440 <memchr>
 80191c2:	b138      	cbz	r0, 80191d4 <__ssvfiscanf_r+0xc8>
 80191c4:	eba0 0309 	sub.w	r3, r0, r9
 80191c8:	2001      	movs	r0, #1
 80191ca:	46aa      	mov	sl, r5
 80191cc:	4098      	lsls	r0, r3
 80191ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80191d0:	4318      	orrs	r0, r3
 80191d2:	9041      	str	r0, [sp, #260]	; 0x104
 80191d4:	f89a 3000 	ldrb.w	r3, [sl]
 80191d8:	f10a 0501 	add.w	r5, sl, #1
 80191dc:	2b67      	cmp	r3, #103	; 0x67
 80191de:	d82b      	bhi.n	8019238 <__ssvfiscanf_r+0x12c>
 80191e0:	2b65      	cmp	r3, #101	; 0x65
 80191e2:	f080 809f 	bcs.w	8019324 <__ssvfiscanf_r+0x218>
 80191e6:	2b47      	cmp	r3, #71	; 0x47
 80191e8:	d810      	bhi.n	801920c <__ssvfiscanf_r+0x100>
 80191ea:	2b45      	cmp	r3, #69	; 0x45
 80191ec:	f080 809a 	bcs.w	8019324 <__ssvfiscanf_r+0x218>
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d06c      	beq.n	80192ce <__ssvfiscanf_r+0x1c2>
 80191f4:	2b25      	cmp	r3, #37	; 0x25
 80191f6:	d051      	beq.n	801929c <__ssvfiscanf_r+0x190>
 80191f8:	2303      	movs	r3, #3
 80191fa:	9742      	str	r7, [sp, #264]	; 0x108
 80191fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80191fe:	e027      	b.n	8019250 <__ssvfiscanf_r+0x144>
 8019200:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019202:	fb07 1303 	mla	r3, r7, r3, r1
 8019206:	3b30      	subs	r3, #48	; 0x30
 8019208:	9343      	str	r3, [sp, #268]	; 0x10c
 801920a:	e7cf      	b.n	80191ac <__ssvfiscanf_r+0xa0>
 801920c:	2b5b      	cmp	r3, #91	; 0x5b
 801920e:	d06a      	beq.n	80192e6 <__ssvfiscanf_r+0x1da>
 8019210:	d80c      	bhi.n	801922c <__ssvfiscanf_r+0x120>
 8019212:	2b58      	cmp	r3, #88	; 0x58
 8019214:	d1f0      	bne.n	80191f8 <__ssvfiscanf_r+0xec>
 8019216:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801921c:	9241      	str	r2, [sp, #260]	; 0x104
 801921e:	2210      	movs	r2, #16
 8019220:	9242      	str	r2, [sp, #264]	; 0x108
 8019222:	2b6e      	cmp	r3, #110	; 0x6e
 8019224:	bf8c      	ite	hi
 8019226:	2304      	movhi	r3, #4
 8019228:	2303      	movls	r3, #3
 801922a:	e010      	b.n	801924e <__ssvfiscanf_r+0x142>
 801922c:	2b63      	cmp	r3, #99	; 0x63
 801922e:	d065      	beq.n	80192fc <__ssvfiscanf_r+0x1f0>
 8019230:	2b64      	cmp	r3, #100	; 0x64
 8019232:	d1e1      	bne.n	80191f8 <__ssvfiscanf_r+0xec>
 8019234:	9742      	str	r7, [sp, #264]	; 0x108
 8019236:	e7f4      	b.n	8019222 <__ssvfiscanf_r+0x116>
 8019238:	2b70      	cmp	r3, #112	; 0x70
 801923a:	d04b      	beq.n	80192d4 <__ssvfiscanf_r+0x1c8>
 801923c:	d826      	bhi.n	801928c <__ssvfiscanf_r+0x180>
 801923e:	2b6e      	cmp	r3, #110	; 0x6e
 8019240:	d062      	beq.n	8019308 <__ssvfiscanf_r+0x1fc>
 8019242:	d84c      	bhi.n	80192de <__ssvfiscanf_r+0x1d2>
 8019244:	2b69      	cmp	r3, #105	; 0x69
 8019246:	d1d7      	bne.n	80191f8 <__ssvfiscanf_r+0xec>
 8019248:	2300      	movs	r3, #0
 801924a:	9342      	str	r3, [sp, #264]	; 0x108
 801924c:	2303      	movs	r3, #3
 801924e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019250:	6863      	ldr	r3, [r4, #4]
 8019252:	2b00      	cmp	r3, #0
 8019254:	dd68      	ble.n	8019328 <__ssvfiscanf_r+0x21c>
 8019256:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019258:	0659      	lsls	r1, r3, #25
 801925a:	d407      	bmi.n	801926c <__ssvfiscanf_r+0x160>
 801925c:	f7ff f842 	bl	80182e4 <__locale_ctype_ptr>
 8019260:	6823      	ldr	r3, [r4, #0]
 8019262:	781a      	ldrb	r2, [r3, #0]
 8019264:	4410      	add	r0, r2
 8019266:	7842      	ldrb	r2, [r0, #1]
 8019268:	0712      	lsls	r2, r2, #28
 801926a:	d464      	bmi.n	8019336 <__ssvfiscanf_r+0x22a>
 801926c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801926e:	2b02      	cmp	r3, #2
 8019270:	dc73      	bgt.n	801935a <__ssvfiscanf_r+0x24e>
 8019272:	466b      	mov	r3, sp
 8019274:	4622      	mov	r2, r4
 8019276:	a941      	add	r1, sp, #260	; 0x104
 8019278:	4630      	mov	r0, r6
 801927a:	f000 f9d5 	bl	8019628 <_scanf_chars>
 801927e:	2801      	cmp	r0, #1
 8019280:	f000 8089 	beq.w	8019396 <__ssvfiscanf_r+0x28a>
 8019284:	2802      	cmp	r0, #2
 8019286:	f47f af71 	bne.w	801916c <__ssvfiscanf_r+0x60>
 801928a:	e01d      	b.n	80192c8 <__ssvfiscanf_r+0x1bc>
 801928c:	2b75      	cmp	r3, #117	; 0x75
 801928e:	d0d1      	beq.n	8019234 <__ssvfiscanf_r+0x128>
 8019290:	2b78      	cmp	r3, #120	; 0x78
 8019292:	d0c0      	beq.n	8019216 <__ssvfiscanf_r+0x10a>
 8019294:	2b73      	cmp	r3, #115	; 0x73
 8019296:	d1af      	bne.n	80191f8 <__ssvfiscanf_r+0xec>
 8019298:	2302      	movs	r3, #2
 801929a:	e7d8      	b.n	801924e <__ssvfiscanf_r+0x142>
 801929c:	6863      	ldr	r3, [r4, #4]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	dd0c      	ble.n	80192bc <__ssvfiscanf_r+0x1b0>
 80192a2:	6823      	ldr	r3, [r4, #0]
 80192a4:	781a      	ldrb	r2, [r3, #0]
 80192a6:	455a      	cmp	r2, fp
 80192a8:	d175      	bne.n	8019396 <__ssvfiscanf_r+0x28a>
 80192aa:	3301      	adds	r3, #1
 80192ac:	6862      	ldr	r2, [r4, #4]
 80192ae:	6023      	str	r3, [r4, #0]
 80192b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80192b2:	3a01      	subs	r2, #1
 80192b4:	3301      	adds	r3, #1
 80192b6:	6062      	str	r2, [r4, #4]
 80192b8:	9345      	str	r3, [sp, #276]	; 0x114
 80192ba:	e757      	b.n	801916c <__ssvfiscanf_r+0x60>
 80192bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80192be:	4621      	mov	r1, r4
 80192c0:	4630      	mov	r0, r6
 80192c2:	4798      	blx	r3
 80192c4:	2800      	cmp	r0, #0
 80192c6:	d0ec      	beq.n	80192a2 <__ssvfiscanf_r+0x196>
 80192c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80192ca:	2800      	cmp	r0, #0
 80192cc:	d159      	bne.n	8019382 <__ssvfiscanf_r+0x276>
 80192ce:	f04f 30ff 	mov.w	r0, #4294967295
 80192d2:	e05c      	b.n	801938e <__ssvfiscanf_r+0x282>
 80192d4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80192d6:	f042 0220 	orr.w	r2, r2, #32
 80192da:	9241      	str	r2, [sp, #260]	; 0x104
 80192dc:	e79b      	b.n	8019216 <__ssvfiscanf_r+0x10a>
 80192de:	2308      	movs	r3, #8
 80192e0:	9342      	str	r3, [sp, #264]	; 0x108
 80192e2:	2304      	movs	r3, #4
 80192e4:	e7b3      	b.n	801924e <__ssvfiscanf_r+0x142>
 80192e6:	4629      	mov	r1, r5
 80192e8:	4640      	mov	r0, r8
 80192ea:	f000 fb17 	bl	801991c <__sccl>
 80192ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80192f0:	4605      	mov	r5, r0
 80192f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192f6:	9341      	str	r3, [sp, #260]	; 0x104
 80192f8:	2301      	movs	r3, #1
 80192fa:	e7a8      	b.n	801924e <__ssvfiscanf_r+0x142>
 80192fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80192fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019302:	9341      	str	r3, [sp, #260]	; 0x104
 8019304:	2300      	movs	r3, #0
 8019306:	e7a2      	b.n	801924e <__ssvfiscanf_r+0x142>
 8019308:	9841      	ldr	r0, [sp, #260]	; 0x104
 801930a:	06c3      	lsls	r3, r0, #27
 801930c:	f53f af2e 	bmi.w	801916c <__ssvfiscanf_r+0x60>
 8019310:	9b00      	ldr	r3, [sp, #0]
 8019312:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019314:	1d19      	adds	r1, r3, #4
 8019316:	9100      	str	r1, [sp, #0]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	07c0      	lsls	r0, r0, #31
 801931c:	bf4c      	ite	mi
 801931e:	801a      	strhmi	r2, [r3, #0]
 8019320:	601a      	strpl	r2, [r3, #0]
 8019322:	e723      	b.n	801916c <__ssvfiscanf_r+0x60>
 8019324:	2305      	movs	r3, #5
 8019326:	e792      	b.n	801924e <__ssvfiscanf_r+0x142>
 8019328:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801932a:	4621      	mov	r1, r4
 801932c:	4630      	mov	r0, r6
 801932e:	4798      	blx	r3
 8019330:	2800      	cmp	r0, #0
 8019332:	d090      	beq.n	8019256 <__ssvfiscanf_r+0x14a>
 8019334:	e7c8      	b.n	80192c8 <__ssvfiscanf_r+0x1bc>
 8019336:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019338:	3201      	adds	r2, #1
 801933a:	9245      	str	r2, [sp, #276]	; 0x114
 801933c:	6862      	ldr	r2, [r4, #4]
 801933e:	3a01      	subs	r2, #1
 8019340:	2a00      	cmp	r2, #0
 8019342:	6062      	str	r2, [r4, #4]
 8019344:	dd02      	ble.n	801934c <__ssvfiscanf_r+0x240>
 8019346:	3301      	adds	r3, #1
 8019348:	6023      	str	r3, [r4, #0]
 801934a:	e787      	b.n	801925c <__ssvfiscanf_r+0x150>
 801934c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801934e:	4621      	mov	r1, r4
 8019350:	4630      	mov	r0, r6
 8019352:	4798      	blx	r3
 8019354:	2800      	cmp	r0, #0
 8019356:	d081      	beq.n	801925c <__ssvfiscanf_r+0x150>
 8019358:	e7b6      	b.n	80192c8 <__ssvfiscanf_r+0x1bc>
 801935a:	2b04      	cmp	r3, #4
 801935c:	dc06      	bgt.n	801936c <__ssvfiscanf_r+0x260>
 801935e:	466b      	mov	r3, sp
 8019360:	4622      	mov	r2, r4
 8019362:	a941      	add	r1, sp, #260	; 0x104
 8019364:	4630      	mov	r0, r6
 8019366:	f000 f9c1 	bl	80196ec <_scanf_i>
 801936a:	e788      	b.n	801927e <__ssvfiscanf_r+0x172>
 801936c:	4b0e      	ldr	r3, [pc, #56]	; (80193a8 <__ssvfiscanf_r+0x29c>)
 801936e:	2b00      	cmp	r3, #0
 8019370:	f43f aefc 	beq.w	801916c <__ssvfiscanf_r+0x60>
 8019374:	466b      	mov	r3, sp
 8019376:	4622      	mov	r2, r4
 8019378:	a941      	add	r1, sp, #260	; 0x104
 801937a:	4630      	mov	r0, r6
 801937c:	f7fc fa02 	bl	8015784 <_scanf_float>
 8019380:	e77d      	b.n	801927e <__ssvfiscanf_r+0x172>
 8019382:	89a3      	ldrh	r3, [r4, #12]
 8019384:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019388:	bf18      	it	ne
 801938a:	f04f 30ff 	movne.w	r0, #4294967295
 801938e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019396:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019398:	e7f9      	b.n	801938e <__ssvfiscanf_r+0x282>
 801939a:	bf00      	nop
 801939c:	08019059 	.word	0x08019059
 80193a0:	080190d3 	.word	0x080190d3
 80193a4:	0801e82a 	.word	0x0801e82a
 80193a8:	08015785 	.word	0x08015785

080193ac <__sfputc_r>:
 80193ac:	6893      	ldr	r3, [r2, #8]
 80193ae:	b410      	push	{r4}
 80193b0:	3b01      	subs	r3, #1
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	6093      	str	r3, [r2, #8]
 80193b6:	da07      	bge.n	80193c8 <__sfputc_r+0x1c>
 80193b8:	6994      	ldr	r4, [r2, #24]
 80193ba:	42a3      	cmp	r3, r4
 80193bc:	db01      	blt.n	80193c2 <__sfputc_r+0x16>
 80193be:	290a      	cmp	r1, #10
 80193c0:	d102      	bne.n	80193c8 <__sfputc_r+0x1c>
 80193c2:	bc10      	pop	{r4}
 80193c4:	f7fd bbc2 	b.w	8016b4c <__swbuf_r>
 80193c8:	6813      	ldr	r3, [r2, #0]
 80193ca:	1c58      	adds	r0, r3, #1
 80193cc:	6010      	str	r0, [r2, #0]
 80193ce:	7019      	strb	r1, [r3, #0]
 80193d0:	4608      	mov	r0, r1
 80193d2:	bc10      	pop	{r4}
 80193d4:	4770      	bx	lr

080193d6 <__sfputs_r>:
 80193d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193d8:	4606      	mov	r6, r0
 80193da:	460f      	mov	r7, r1
 80193dc:	4614      	mov	r4, r2
 80193de:	18d5      	adds	r5, r2, r3
 80193e0:	42ac      	cmp	r4, r5
 80193e2:	d101      	bne.n	80193e8 <__sfputs_r+0x12>
 80193e4:	2000      	movs	r0, #0
 80193e6:	e007      	b.n	80193f8 <__sfputs_r+0x22>
 80193e8:	463a      	mov	r2, r7
 80193ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193ee:	4630      	mov	r0, r6
 80193f0:	f7ff ffdc 	bl	80193ac <__sfputc_r>
 80193f4:	1c43      	adds	r3, r0, #1
 80193f6:	d1f3      	bne.n	80193e0 <__sfputs_r+0xa>
 80193f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080193fc <_vfiprintf_r>:
 80193fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019400:	460c      	mov	r4, r1
 8019402:	b09d      	sub	sp, #116	; 0x74
 8019404:	4617      	mov	r7, r2
 8019406:	461d      	mov	r5, r3
 8019408:	4606      	mov	r6, r0
 801940a:	b118      	cbz	r0, 8019414 <_vfiprintf_r+0x18>
 801940c:	6983      	ldr	r3, [r0, #24]
 801940e:	b90b      	cbnz	r3, 8019414 <_vfiprintf_r+0x18>
 8019410:	f7fe fbb2 	bl	8017b78 <__sinit>
 8019414:	4b7c      	ldr	r3, [pc, #496]	; (8019608 <_vfiprintf_r+0x20c>)
 8019416:	429c      	cmp	r4, r3
 8019418:	d158      	bne.n	80194cc <_vfiprintf_r+0xd0>
 801941a:	6874      	ldr	r4, [r6, #4]
 801941c:	89a3      	ldrh	r3, [r4, #12]
 801941e:	0718      	lsls	r0, r3, #28
 8019420:	d55e      	bpl.n	80194e0 <_vfiprintf_r+0xe4>
 8019422:	6923      	ldr	r3, [r4, #16]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d05b      	beq.n	80194e0 <_vfiprintf_r+0xe4>
 8019428:	2300      	movs	r3, #0
 801942a:	9309      	str	r3, [sp, #36]	; 0x24
 801942c:	2320      	movs	r3, #32
 801942e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019432:	2330      	movs	r3, #48	; 0x30
 8019434:	f04f 0b01 	mov.w	fp, #1
 8019438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801943c:	9503      	str	r5, [sp, #12]
 801943e:	46b8      	mov	r8, r7
 8019440:	4645      	mov	r5, r8
 8019442:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019446:	b10b      	cbz	r3, 801944c <_vfiprintf_r+0x50>
 8019448:	2b25      	cmp	r3, #37	; 0x25
 801944a:	d154      	bne.n	80194f6 <_vfiprintf_r+0xfa>
 801944c:	ebb8 0a07 	subs.w	sl, r8, r7
 8019450:	d00b      	beq.n	801946a <_vfiprintf_r+0x6e>
 8019452:	4653      	mov	r3, sl
 8019454:	463a      	mov	r2, r7
 8019456:	4621      	mov	r1, r4
 8019458:	4630      	mov	r0, r6
 801945a:	f7ff ffbc 	bl	80193d6 <__sfputs_r>
 801945e:	3001      	adds	r0, #1
 8019460:	f000 80c2 	beq.w	80195e8 <_vfiprintf_r+0x1ec>
 8019464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019466:	4453      	add	r3, sl
 8019468:	9309      	str	r3, [sp, #36]	; 0x24
 801946a:	f898 3000 	ldrb.w	r3, [r8]
 801946e:	2b00      	cmp	r3, #0
 8019470:	f000 80ba 	beq.w	80195e8 <_vfiprintf_r+0x1ec>
 8019474:	2300      	movs	r3, #0
 8019476:	f04f 32ff 	mov.w	r2, #4294967295
 801947a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801947e:	9304      	str	r3, [sp, #16]
 8019480:	9307      	str	r3, [sp, #28]
 8019482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019486:	931a      	str	r3, [sp, #104]	; 0x68
 8019488:	46a8      	mov	r8, r5
 801948a:	2205      	movs	r2, #5
 801948c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019490:	485e      	ldr	r0, [pc, #376]	; (801960c <_vfiprintf_r+0x210>)
 8019492:	f7fe ffd5 	bl	8018440 <memchr>
 8019496:	9b04      	ldr	r3, [sp, #16]
 8019498:	bb78      	cbnz	r0, 80194fa <_vfiprintf_r+0xfe>
 801949a:	06d9      	lsls	r1, r3, #27
 801949c:	bf44      	itt	mi
 801949e:	2220      	movmi	r2, #32
 80194a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80194a4:	071a      	lsls	r2, r3, #28
 80194a6:	bf44      	itt	mi
 80194a8:	222b      	movmi	r2, #43	; 0x2b
 80194aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80194ae:	782a      	ldrb	r2, [r5, #0]
 80194b0:	2a2a      	cmp	r2, #42	; 0x2a
 80194b2:	d02a      	beq.n	801950a <_vfiprintf_r+0x10e>
 80194b4:	46a8      	mov	r8, r5
 80194b6:	2000      	movs	r0, #0
 80194b8:	250a      	movs	r5, #10
 80194ba:	9a07      	ldr	r2, [sp, #28]
 80194bc:	4641      	mov	r1, r8
 80194be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194c2:	3b30      	subs	r3, #48	; 0x30
 80194c4:	2b09      	cmp	r3, #9
 80194c6:	d969      	bls.n	801959c <_vfiprintf_r+0x1a0>
 80194c8:	b360      	cbz	r0, 8019524 <_vfiprintf_r+0x128>
 80194ca:	e024      	b.n	8019516 <_vfiprintf_r+0x11a>
 80194cc:	4b50      	ldr	r3, [pc, #320]	; (8019610 <_vfiprintf_r+0x214>)
 80194ce:	429c      	cmp	r4, r3
 80194d0:	d101      	bne.n	80194d6 <_vfiprintf_r+0xda>
 80194d2:	68b4      	ldr	r4, [r6, #8]
 80194d4:	e7a2      	b.n	801941c <_vfiprintf_r+0x20>
 80194d6:	4b4f      	ldr	r3, [pc, #316]	; (8019614 <_vfiprintf_r+0x218>)
 80194d8:	429c      	cmp	r4, r3
 80194da:	bf08      	it	eq
 80194dc:	68f4      	ldreq	r4, [r6, #12]
 80194de:	e79d      	b.n	801941c <_vfiprintf_r+0x20>
 80194e0:	4621      	mov	r1, r4
 80194e2:	4630      	mov	r0, r6
 80194e4:	f7fd fb96 	bl	8016c14 <__swsetup_r>
 80194e8:	2800      	cmp	r0, #0
 80194ea:	d09d      	beq.n	8019428 <_vfiprintf_r+0x2c>
 80194ec:	f04f 30ff 	mov.w	r0, #4294967295
 80194f0:	b01d      	add	sp, #116	; 0x74
 80194f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194f6:	46a8      	mov	r8, r5
 80194f8:	e7a2      	b.n	8019440 <_vfiprintf_r+0x44>
 80194fa:	4a44      	ldr	r2, [pc, #272]	; (801960c <_vfiprintf_r+0x210>)
 80194fc:	4645      	mov	r5, r8
 80194fe:	1a80      	subs	r0, r0, r2
 8019500:	fa0b f000 	lsl.w	r0, fp, r0
 8019504:	4318      	orrs	r0, r3
 8019506:	9004      	str	r0, [sp, #16]
 8019508:	e7be      	b.n	8019488 <_vfiprintf_r+0x8c>
 801950a:	9a03      	ldr	r2, [sp, #12]
 801950c:	1d11      	adds	r1, r2, #4
 801950e:	6812      	ldr	r2, [r2, #0]
 8019510:	9103      	str	r1, [sp, #12]
 8019512:	2a00      	cmp	r2, #0
 8019514:	db01      	blt.n	801951a <_vfiprintf_r+0x11e>
 8019516:	9207      	str	r2, [sp, #28]
 8019518:	e004      	b.n	8019524 <_vfiprintf_r+0x128>
 801951a:	4252      	negs	r2, r2
 801951c:	f043 0302 	orr.w	r3, r3, #2
 8019520:	9207      	str	r2, [sp, #28]
 8019522:	9304      	str	r3, [sp, #16]
 8019524:	f898 3000 	ldrb.w	r3, [r8]
 8019528:	2b2e      	cmp	r3, #46	; 0x2e
 801952a:	d10e      	bne.n	801954a <_vfiprintf_r+0x14e>
 801952c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019530:	2b2a      	cmp	r3, #42	; 0x2a
 8019532:	d138      	bne.n	80195a6 <_vfiprintf_r+0x1aa>
 8019534:	9b03      	ldr	r3, [sp, #12]
 8019536:	f108 0802 	add.w	r8, r8, #2
 801953a:	1d1a      	adds	r2, r3, #4
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	9203      	str	r2, [sp, #12]
 8019540:	2b00      	cmp	r3, #0
 8019542:	bfb8      	it	lt
 8019544:	f04f 33ff 	movlt.w	r3, #4294967295
 8019548:	9305      	str	r3, [sp, #20]
 801954a:	4d33      	ldr	r5, [pc, #204]	; (8019618 <_vfiprintf_r+0x21c>)
 801954c:	2203      	movs	r2, #3
 801954e:	f898 1000 	ldrb.w	r1, [r8]
 8019552:	4628      	mov	r0, r5
 8019554:	f7fe ff74 	bl	8018440 <memchr>
 8019558:	b140      	cbz	r0, 801956c <_vfiprintf_r+0x170>
 801955a:	2340      	movs	r3, #64	; 0x40
 801955c:	1b40      	subs	r0, r0, r5
 801955e:	fa03 f000 	lsl.w	r0, r3, r0
 8019562:	9b04      	ldr	r3, [sp, #16]
 8019564:	f108 0801 	add.w	r8, r8, #1
 8019568:	4303      	orrs	r3, r0
 801956a:	9304      	str	r3, [sp, #16]
 801956c:	f898 1000 	ldrb.w	r1, [r8]
 8019570:	2206      	movs	r2, #6
 8019572:	482a      	ldr	r0, [pc, #168]	; (801961c <_vfiprintf_r+0x220>)
 8019574:	f108 0701 	add.w	r7, r8, #1
 8019578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801957c:	f7fe ff60 	bl	8018440 <memchr>
 8019580:	2800      	cmp	r0, #0
 8019582:	d037      	beq.n	80195f4 <_vfiprintf_r+0x1f8>
 8019584:	4b26      	ldr	r3, [pc, #152]	; (8019620 <_vfiprintf_r+0x224>)
 8019586:	bb1b      	cbnz	r3, 80195d0 <_vfiprintf_r+0x1d4>
 8019588:	9b03      	ldr	r3, [sp, #12]
 801958a:	3307      	adds	r3, #7
 801958c:	f023 0307 	bic.w	r3, r3, #7
 8019590:	3308      	adds	r3, #8
 8019592:	9303      	str	r3, [sp, #12]
 8019594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019596:	444b      	add	r3, r9
 8019598:	9309      	str	r3, [sp, #36]	; 0x24
 801959a:	e750      	b.n	801943e <_vfiprintf_r+0x42>
 801959c:	fb05 3202 	mla	r2, r5, r2, r3
 80195a0:	2001      	movs	r0, #1
 80195a2:	4688      	mov	r8, r1
 80195a4:	e78a      	b.n	80194bc <_vfiprintf_r+0xc0>
 80195a6:	2300      	movs	r3, #0
 80195a8:	250a      	movs	r5, #10
 80195aa:	4619      	mov	r1, r3
 80195ac:	f108 0801 	add.w	r8, r8, #1
 80195b0:	9305      	str	r3, [sp, #20]
 80195b2:	4640      	mov	r0, r8
 80195b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80195b8:	3a30      	subs	r2, #48	; 0x30
 80195ba:	2a09      	cmp	r2, #9
 80195bc:	d903      	bls.n	80195c6 <_vfiprintf_r+0x1ca>
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d0c3      	beq.n	801954a <_vfiprintf_r+0x14e>
 80195c2:	9105      	str	r1, [sp, #20]
 80195c4:	e7c1      	b.n	801954a <_vfiprintf_r+0x14e>
 80195c6:	fb05 2101 	mla	r1, r5, r1, r2
 80195ca:	2301      	movs	r3, #1
 80195cc:	4680      	mov	r8, r0
 80195ce:	e7f0      	b.n	80195b2 <_vfiprintf_r+0x1b6>
 80195d0:	ab03      	add	r3, sp, #12
 80195d2:	9300      	str	r3, [sp, #0]
 80195d4:	4622      	mov	r2, r4
 80195d6:	4b13      	ldr	r3, [pc, #76]	; (8019624 <_vfiprintf_r+0x228>)
 80195d8:	a904      	add	r1, sp, #16
 80195da:	4630      	mov	r0, r6
 80195dc:	f7fb fd14 	bl	8015008 <_printf_float>
 80195e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80195e4:	4681      	mov	r9, r0
 80195e6:	d1d5      	bne.n	8019594 <_vfiprintf_r+0x198>
 80195e8:	89a3      	ldrh	r3, [r4, #12]
 80195ea:	065b      	lsls	r3, r3, #25
 80195ec:	f53f af7e 	bmi.w	80194ec <_vfiprintf_r+0xf0>
 80195f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195f2:	e77d      	b.n	80194f0 <_vfiprintf_r+0xf4>
 80195f4:	ab03      	add	r3, sp, #12
 80195f6:	9300      	str	r3, [sp, #0]
 80195f8:	4622      	mov	r2, r4
 80195fa:	4b0a      	ldr	r3, [pc, #40]	; (8019624 <_vfiprintf_r+0x228>)
 80195fc:	a904      	add	r1, sp, #16
 80195fe:	4630      	mov	r0, r6
 8019600:	f7fb ffae 	bl	8015560 <_printf_i>
 8019604:	e7ec      	b.n	80195e0 <_vfiprintf_r+0x1e4>
 8019606:	bf00      	nop
 8019608:	0801e6d8 	.word	0x0801e6d8
 801960c:	0801e824 	.word	0x0801e824
 8019610:	0801e6f8 	.word	0x0801e6f8
 8019614:	0801e6b8 	.word	0x0801e6b8
 8019618:	0801e82a 	.word	0x0801e82a
 801961c:	0801e82e 	.word	0x0801e82e
 8019620:	08015009 	.word	0x08015009
 8019624:	080193d7 	.word	0x080193d7

08019628 <_scanf_chars>:
 8019628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801962c:	4615      	mov	r5, r2
 801962e:	688a      	ldr	r2, [r1, #8]
 8019630:	4680      	mov	r8, r0
 8019632:	460c      	mov	r4, r1
 8019634:	b932      	cbnz	r2, 8019644 <_scanf_chars+0x1c>
 8019636:	698a      	ldr	r2, [r1, #24]
 8019638:	2a00      	cmp	r2, #0
 801963a:	bf14      	ite	ne
 801963c:	f04f 32ff 	movne.w	r2, #4294967295
 8019640:	2201      	moveq	r2, #1
 8019642:	608a      	str	r2, [r1, #8]
 8019644:	2600      	movs	r6, #0
 8019646:	6822      	ldr	r2, [r4, #0]
 8019648:	06d1      	lsls	r1, r2, #27
 801964a:	bf5f      	itttt	pl
 801964c:	681a      	ldrpl	r2, [r3, #0]
 801964e:	1d11      	addpl	r1, r2, #4
 8019650:	6019      	strpl	r1, [r3, #0]
 8019652:	6817      	ldrpl	r7, [r2, #0]
 8019654:	69a3      	ldr	r3, [r4, #24]
 8019656:	b1db      	cbz	r3, 8019690 <_scanf_chars+0x68>
 8019658:	2b01      	cmp	r3, #1
 801965a:	d107      	bne.n	801966c <_scanf_chars+0x44>
 801965c:	682b      	ldr	r3, [r5, #0]
 801965e:	6962      	ldr	r2, [r4, #20]
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	5cd3      	ldrb	r3, [r2, r3]
 8019664:	b9a3      	cbnz	r3, 8019690 <_scanf_chars+0x68>
 8019666:	2e00      	cmp	r6, #0
 8019668:	d131      	bne.n	80196ce <_scanf_chars+0xa6>
 801966a:	e006      	b.n	801967a <_scanf_chars+0x52>
 801966c:	2b02      	cmp	r3, #2
 801966e:	d007      	beq.n	8019680 <_scanf_chars+0x58>
 8019670:	2e00      	cmp	r6, #0
 8019672:	d12c      	bne.n	80196ce <_scanf_chars+0xa6>
 8019674:	69a3      	ldr	r3, [r4, #24]
 8019676:	2b01      	cmp	r3, #1
 8019678:	d129      	bne.n	80196ce <_scanf_chars+0xa6>
 801967a:	2001      	movs	r0, #1
 801967c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019680:	f7fe fe30 	bl	80182e4 <__locale_ctype_ptr>
 8019684:	682b      	ldr	r3, [r5, #0]
 8019686:	781b      	ldrb	r3, [r3, #0]
 8019688:	4418      	add	r0, r3
 801968a:	7843      	ldrb	r3, [r0, #1]
 801968c:	071b      	lsls	r3, r3, #28
 801968e:	d4ef      	bmi.n	8019670 <_scanf_chars+0x48>
 8019690:	6823      	ldr	r3, [r4, #0]
 8019692:	3601      	adds	r6, #1
 8019694:	06da      	lsls	r2, r3, #27
 8019696:	bf5e      	ittt	pl
 8019698:	682b      	ldrpl	r3, [r5, #0]
 801969a:	781b      	ldrbpl	r3, [r3, #0]
 801969c:	703b      	strbpl	r3, [r7, #0]
 801969e:	682a      	ldr	r2, [r5, #0]
 80196a0:	686b      	ldr	r3, [r5, #4]
 80196a2:	f102 0201 	add.w	r2, r2, #1
 80196a6:	602a      	str	r2, [r5, #0]
 80196a8:	68a2      	ldr	r2, [r4, #8]
 80196aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80196ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80196b2:	606b      	str	r3, [r5, #4]
 80196b4:	bf58      	it	pl
 80196b6:	3701      	addpl	r7, #1
 80196b8:	60a2      	str	r2, [r4, #8]
 80196ba:	b142      	cbz	r2, 80196ce <_scanf_chars+0xa6>
 80196bc:	2b00      	cmp	r3, #0
 80196be:	dcc9      	bgt.n	8019654 <_scanf_chars+0x2c>
 80196c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80196c4:	4629      	mov	r1, r5
 80196c6:	4640      	mov	r0, r8
 80196c8:	4798      	blx	r3
 80196ca:	2800      	cmp	r0, #0
 80196cc:	d0c2      	beq.n	8019654 <_scanf_chars+0x2c>
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	f013 0310 	ands.w	r3, r3, #16
 80196d4:	d105      	bne.n	80196e2 <_scanf_chars+0xba>
 80196d6:	68e2      	ldr	r2, [r4, #12]
 80196d8:	3201      	adds	r2, #1
 80196da:	60e2      	str	r2, [r4, #12]
 80196dc:	69a2      	ldr	r2, [r4, #24]
 80196de:	b102      	cbz	r2, 80196e2 <_scanf_chars+0xba>
 80196e0:	703b      	strb	r3, [r7, #0]
 80196e2:	6923      	ldr	r3, [r4, #16]
 80196e4:	2000      	movs	r0, #0
 80196e6:	441e      	add	r6, r3
 80196e8:	6126      	str	r6, [r4, #16]
 80196ea:	e7c7      	b.n	801967c <_scanf_chars+0x54>

080196ec <_scanf_i>:
 80196ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f0:	460c      	mov	r4, r1
 80196f2:	469a      	mov	sl, r3
 80196f4:	4b74      	ldr	r3, [pc, #464]	; (80198c8 <_scanf_i+0x1dc>)
 80196f6:	b087      	sub	sp, #28
 80196f8:	4683      	mov	fp, r0
 80196fa:	4616      	mov	r6, r2
 80196fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019700:	ab03      	add	r3, sp, #12
 8019702:	68a7      	ldr	r7, [r4, #8]
 8019704:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019708:	4b70      	ldr	r3, [pc, #448]	; (80198cc <_scanf_i+0x1e0>)
 801970a:	69a1      	ldr	r1, [r4, #24]
 801970c:	4a70      	ldr	r2, [pc, #448]	; (80198d0 <_scanf_i+0x1e4>)
 801970e:	f104 091c 	add.w	r9, r4, #28
 8019712:	2903      	cmp	r1, #3
 8019714:	bf08      	it	eq
 8019716:	461a      	moveq	r2, r3
 8019718:	1e7b      	subs	r3, r7, #1
 801971a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801971e:	bf84      	itt	hi
 8019720:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019724:	60a3      	strhi	r3, [r4, #8]
 8019726:	6823      	ldr	r3, [r4, #0]
 8019728:	bf88      	it	hi
 801972a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801972e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019732:	6023      	str	r3, [r4, #0]
 8019734:	bf98      	it	ls
 8019736:	2700      	movls	r7, #0
 8019738:	464b      	mov	r3, r9
 801973a:	f04f 0800 	mov.w	r8, #0
 801973e:	9200      	str	r2, [sp, #0]
 8019740:	bf88      	it	hi
 8019742:	197f      	addhi	r7, r7, r5
 8019744:	6831      	ldr	r1, [r6, #0]
 8019746:	9301      	str	r3, [sp, #4]
 8019748:	ab03      	add	r3, sp, #12
 801974a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801974e:	2202      	movs	r2, #2
 8019750:	7809      	ldrb	r1, [r1, #0]
 8019752:	f7fe fe75 	bl	8018440 <memchr>
 8019756:	9b01      	ldr	r3, [sp, #4]
 8019758:	b330      	cbz	r0, 80197a8 <_scanf_i+0xbc>
 801975a:	f1b8 0f01 	cmp.w	r8, #1
 801975e:	d15a      	bne.n	8019816 <_scanf_i+0x12a>
 8019760:	6862      	ldr	r2, [r4, #4]
 8019762:	b92a      	cbnz	r2, 8019770 <_scanf_i+0x84>
 8019764:	2108      	movs	r1, #8
 8019766:	6822      	ldr	r2, [r4, #0]
 8019768:	6061      	str	r1, [r4, #4]
 801976a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801976e:	6022      	str	r2, [r4, #0]
 8019770:	6822      	ldr	r2, [r4, #0]
 8019772:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019776:	6022      	str	r2, [r4, #0]
 8019778:	68a2      	ldr	r2, [r4, #8]
 801977a:	1e51      	subs	r1, r2, #1
 801977c:	60a1      	str	r1, [r4, #8]
 801977e:	b19a      	cbz	r2, 80197a8 <_scanf_i+0xbc>
 8019780:	6832      	ldr	r2, [r6, #0]
 8019782:	1c5d      	adds	r5, r3, #1
 8019784:	1c51      	adds	r1, r2, #1
 8019786:	6031      	str	r1, [r6, #0]
 8019788:	7812      	ldrb	r2, [r2, #0]
 801978a:	701a      	strb	r2, [r3, #0]
 801978c:	6873      	ldr	r3, [r6, #4]
 801978e:	3b01      	subs	r3, #1
 8019790:	2b00      	cmp	r3, #0
 8019792:	6073      	str	r3, [r6, #4]
 8019794:	dc07      	bgt.n	80197a6 <_scanf_i+0xba>
 8019796:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801979a:	4631      	mov	r1, r6
 801979c:	4658      	mov	r0, fp
 801979e:	4798      	blx	r3
 80197a0:	2800      	cmp	r0, #0
 80197a2:	f040 8087 	bne.w	80198b4 <_scanf_i+0x1c8>
 80197a6:	462b      	mov	r3, r5
 80197a8:	f108 0801 	add.w	r8, r8, #1
 80197ac:	f1b8 0f03 	cmp.w	r8, #3
 80197b0:	d1c8      	bne.n	8019744 <_scanf_i+0x58>
 80197b2:	6862      	ldr	r2, [r4, #4]
 80197b4:	b90a      	cbnz	r2, 80197ba <_scanf_i+0xce>
 80197b6:	220a      	movs	r2, #10
 80197b8:	6062      	str	r2, [r4, #4]
 80197ba:	6862      	ldr	r2, [r4, #4]
 80197bc:	4945      	ldr	r1, [pc, #276]	; (80198d4 <_scanf_i+0x1e8>)
 80197be:	6960      	ldr	r0, [r4, #20]
 80197c0:	1a89      	subs	r1, r1, r2
 80197c2:	9301      	str	r3, [sp, #4]
 80197c4:	f000 f8aa 	bl	801991c <__sccl>
 80197c8:	9b01      	ldr	r3, [sp, #4]
 80197ca:	f04f 0800 	mov.w	r8, #0
 80197ce:	461d      	mov	r5, r3
 80197d0:	68a3      	ldr	r3, [r4, #8]
 80197d2:	6822      	ldr	r2, [r4, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d03b      	beq.n	8019850 <_scanf_i+0x164>
 80197d8:	6831      	ldr	r1, [r6, #0]
 80197da:	6960      	ldr	r0, [r4, #20]
 80197dc:	f891 c000 	ldrb.w	ip, [r1]
 80197e0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80197e4:	2800      	cmp	r0, #0
 80197e6:	d033      	beq.n	8019850 <_scanf_i+0x164>
 80197e8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80197ec:	d121      	bne.n	8019832 <_scanf_i+0x146>
 80197ee:	0510      	lsls	r0, r2, #20
 80197f0:	d51f      	bpl.n	8019832 <_scanf_i+0x146>
 80197f2:	f108 0801 	add.w	r8, r8, #1
 80197f6:	b117      	cbz	r7, 80197fe <_scanf_i+0x112>
 80197f8:	3301      	adds	r3, #1
 80197fa:	3f01      	subs	r7, #1
 80197fc:	60a3      	str	r3, [r4, #8]
 80197fe:	6873      	ldr	r3, [r6, #4]
 8019800:	3b01      	subs	r3, #1
 8019802:	2b00      	cmp	r3, #0
 8019804:	6073      	str	r3, [r6, #4]
 8019806:	dd1c      	ble.n	8019842 <_scanf_i+0x156>
 8019808:	6833      	ldr	r3, [r6, #0]
 801980a:	3301      	adds	r3, #1
 801980c:	6033      	str	r3, [r6, #0]
 801980e:	68a3      	ldr	r3, [r4, #8]
 8019810:	3b01      	subs	r3, #1
 8019812:	60a3      	str	r3, [r4, #8]
 8019814:	e7dc      	b.n	80197d0 <_scanf_i+0xe4>
 8019816:	f1b8 0f02 	cmp.w	r8, #2
 801981a:	d1ad      	bne.n	8019778 <_scanf_i+0x8c>
 801981c:	6822      	ldr	r2, [r4, #0]
 801981e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019822:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019826:	d1bf      	bne.n	80197a8 <_scanf_i+0xbc>
 8019828:	2110      	movs	r1, #16
 801982a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801982e:	6061      	str	r1, [r4, #4]
 8019830:	e7a1      	b.n	8019776 <_scanf_i+0x8a>
 8019832:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019836:	6022      	str	r2, [r4, #0]
 8019838:	780b      	ldrb	r3, [r1, #0]
 801983a:	3501      	adds	r5, #1
 801983c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8019840:	e7dd      	b.n	80197fe <_scanf_i+0x112>
 8019842:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019846:	4631      	mov	r1, r6
 8019848:	4658      	mov	r0, fp
 801984a:	4798      	blx	r3
 801984c:	2800      	cmp	r0, #0
 801984e:	d0de      	beq.n	801980e <_scanf_i+0x122>
 8019850:	6823      	ldr	r3, [r4, #0]
 8019852:	05d9      	lsls	r1, r3, #23
 8019854:	d50c      	bpl.n	8019870 <_scanf_i+0x184>
 8019856:	454d      	cmp	r5, r9
 8019858:	d908      	bls.n	801986c <_scanf_i+0x180>
 801985a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801985e:	1e6f      	subs	r7, r5, #1
 8019860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019864:	4632      	mov	r2, r6
 8019866:	4658      	mov	r0, fp
 8019868:	4798      	blx	r3
 801986a:	463d      	mov	r5, r7
 801986c:	454d      	cmp	r5, r9
 801986e:	d029      	beq.n	80198c4 <_scanf_i+0x1d8>
 8019870:	6822      	ldr	r2, [r4, #0]
 8019872:	f012 0210 	ands.w	r2, r2, #16
 8019876:	d113      	bne.n	80198a0 <_scanf_i+0x1b4>
 8019878:	702a      	strb	r2, [r5, #0]
 801987a:	6863      	ldr	r3, [r4, #4]
 801987c:	4649      	mov	r1, r9
 801987e:	4658      	mov	r0, fp
 8019880:	9e00      	ldr	r6, [sp, #0]
 8019882:	47b0      	blx	r6
 8019884:	f8da 3000 	ldr.w	r3, [sl]
 8019888:	6821      	ldr	r1, [r4, #0]
 801988a:	1d1a      	adds	r2, r3, #4
 801988c:	f8ca 2000 	str.w	r2, [sl]
 8019890:	f011 0f20 	tst.w	r1, #32
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	d010      	beq.n	80198ba <_scanf_i+0x1ce>
 8019898:	6018      	str	r0, [r3, #0]
 801989a:	68e3      	ldr	r3, [r4, #12]
 801989c:	3301      	adds	r3, #1
 801989e:	60e3      	str	r3, [r4, #12]
 80198a0:	2000      	movs	r0, #0
 80198a2:	eba5 0509 	sub.w	r5, r5, r9
 80198a6:	44a8      	add	r8, r5
 80198a8:	6925      	ldr	r5, [r4, #16]
 80198aa:	4445      	add	r5, r8
 80198ac:	6125      	str	r5, [r4, #16]
 80198ae:	b007      	add	sp, #28
 80198b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b4:	f04f 0800 	mov.w	r8, #0
 80198b8:	e7ca      	b.n	8019850 <_scanf_i+0x164>
 80198ba:	07ca      	lsls	r2, r1, #31
 80198bc:	bf4c      	ite	mi
 80198be:	8018      	strhmi	r0, [r3, #0]
 80198c0:	6018      	strpl	r0, [r3, #0]
 80198c2:	e7ea      	b.n	801989a <_scanf_i+0x1ae>
 80198c4:	2001      	movs	r0, #1
 80198c6:	e7f2      	b.n	80198ae <_scanf_i+0x1c2>
 80198c8:	0801a9a4 	.word	0x0801a9a4
 80198cc:	08016b29 	.word	0x08016b29
 80198d0:	08019a75 	.word	0x08019a75
 80198d4:	0801e845 	.word	0x0801e845

080198d8 <_read_r>:
 80198d8:	b538      	push	{r3, r4, r5, lr}
 80198da:	4605      	mov	r5, r0
 80198dc:	4608      	mov	r0, r1
 80198de:	4611      	mov	r1, r2
 80198e0:	2200      	movs	r2, #0
 80198e2:	4c05      	ldr	r4, [pc, #20]	; (80198f8 <_read_r+0x20>)
 80198e4:	6022      	str	r2, [r4, #0]
 80198e6:	461a      	mov	r2, r3
 80198e8:	f7ea fa8e 	bl	8003e08 <_read>
 80198ec:	1c43      	adds	r3, r0, #1
 80198ee:	d102      	bne.n	80198f6 <_read_r+0x1e>
 80198f0:	6823      	ldr	r3, [r4, #0]
 80198f2:	b103      	cbz	r3, 80198f6 <_read_r+0x1e>
 80198f4:	602b      	str	r3, [r5, #0]
 80198f6:	bd38      	pop	{r3, r4, r5, pc}
 80198f8:	20009e2c 	.word	0x20009e2c

080198fc <_sbrk_r>:
 80198fc:	b538      	push	{r3, r4, r5, lr}
 80198fe:	2300      	movs	r3, #0
 8019900:	4c05      	ldr	r4, [pc, #20]	; (8019918 <_sbrk_r+0x1c>)
 8019902:	4605      	mov	r5, r0
 8019904:	4608      	mov	r0, r1
 8019906:	6023      	str	r3, [r4, #0]
 8019908:	f000 f95e 	bl	8019bc8 <_sbrk>
 801990c:	1c43      	adds	r3, r0, #1
 801990e:	d102      	bne.n	8019916 <_sbrk_r+0x1a>
 8019910:	6823      	ldr	r3, [r4, #0]
 8019912:	b103      	cbz	r3, 8019916 <_sbrk_r+0x1a>
 8019914:	602b      	str	r3, [r5, #0]
 8019916:	bd38      	pop	{r3, r4, r5, pc}
 8019918:	20009e2c 	.word	0x20009e2c

0801991c <__sccl>:
 801991c:	b570      	push	{r4, r5, r6, lr}
 801991e:	780b      	ldrb	r3, [r1, #0]
 8019920:	1e44      	subs	r4, r0, #1
 8019922:	2b5e      	cmp	r3, #94	; 0x5e
 8019924:	bf13      	iteet	ne
 8019926:	1c4a      	addne	r2, r1, #1
 8019928:	1c8a      	addeq	r2, r1, #2
 801992a:	784b      	ldrbeq	r3, [r1, #1]
 801992c:	2100      	movne	r1, #0
 801992e:	bf08      	it	eq
 8019930:	2101      	moveq	r1, #1
 8019932:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019936:	f804 1f01 	strb.w	r1, [r4, #1]!
 801993a:	42ac      	cmp	r4, r5
 801993c:	d1fb      	bne.n	8019936 <__sccl+0x1a>
 801993e:	b913      	cbnz	r3, 8019946 <__sccl+0x2a>
 8019940:	3a01      	subs	r2, #1
 8019942:	4610      	mov	r0, r2
 8019944:	bd70      	pop	{r4, r5, r6, pc}
 8019946:	f081 0401 	eor.w	r4, r1, #1
 801994a:	54c4      	strb	r4, [r0, r3]
 801994c:	1c51      	adds	r1, r2, #1
 801994e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019952:	1e4e      	subs	r6, r1, #1
 8019954:	2d2d      	cmp	r5, #45	; 0x2d
 8019956:	460a      	mov	r2, r1
 8019958:	d006      	beq.n	8019968 <__sccl+0x4c>
 801995a:	2d5d      	cmp	r5, #93	; 0x5d
 801995c:	d0f1      	beq.n	8019942 <__sccl+0x26>
 801995e:	b90d      	cbnz	r5, 8019964 <__sccl+0x48>
 8019960:	4632      	mov	r2, r6
 8019962:	e7ee      	b.n	8019942 <__sccl+0x26>
 8019964:	462b      	mov	r3, r5
 8019966:	e7f0      	b.n	801994a <__sccl+0x2e>
 8019968:	780e      	ldrb	r6, [r1, #0]
 801996a:	2e5d      	cmp	r6, #93	; 0x5d
 801996c:	d0fa      	beq.n	8019964 <__sccl+0x48>
 801996e:	42b3      	cmp	r3, r6
 8019970:	dcf8      	bgt.n	8019964 <__sccl+0x48>
 8019972:	3301      	adds	r3, #1
 8019974:	429e      	cmp	r6, r3
 8019976:	54c4      	strb	r4, [r0, r3]
 8019978:	dcfb      	bgt.n	8019972 <__sccl+0x56>
 801997a:	3102      	adds	r1, #2
 801997c:	e7e7      	b.n	801994e <__sccl+0x32>

0801997e <_strtoul_l.isra.0>:
 801997e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019982:	4680      	mov	r8, r0
 8019984:	4689      	mov	r9, r1
 8019986:	4692      	mov	sl, r2
 8019988:	461e      	mov	r6, r3
 801998a:	460f      	mov	r7, r1
 801998c:	463d      	mov	r5, r7
 801998e:	9808      	ldr	r0, [sp, #32]
 8019990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019994:	f7fe fca2 	bl	80182dc <__locale_ctype_ptr_l>
 8019998:	4420      	add	r0, r4
 801999a:	7843      	ldrb	r3, [r0, #1]
 801999c:	f013 0308 	ands.w	r3, r3, #8
 80199a0:	d130      	bne.n	8019a04 <_strtoul_l.isra.0+0x86>
 80199a2:	2c2d      	cmp	r4, #45	; 0x2d
 80199a4:	d130      	bne.n	8019a08 <_strtoul_l.isra.0+0x8a>
 80199a6:	2101      	movs	r1, #1
 80199a8:	787c      	ldrb	r4, [r7, #1]
 80199aa:	1cbd      	adds	r5, r7, #2
 80199ac:	2e00      	cmp	r6, #0
 80199ae:	d05c      	beq.n	8019a6a <_strtoul_l.isra.0+0xec>
 80199b0:	2e10      	cmp	r6, #16
 80199b2:	d109      	bne.n	80199c8 <_strtoul_l.isra.0+0x4a>
 80199b4:	2c30      	cmp	r4, #48	; 0x30
 80199b6:	d107      	bne.n	80199c8 <_strtoul_l.isra.0+0x4a>
 80199b8:	782b      	ldrb	r3, [r5, #0]
 80199ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80199be:	2b58      	cmp	r3, #88	; 0x58
 80199c0:	d14e      	bne.n	8019a60 <_strtoul_l.isra.0+0xe2>
 80199c2:	2610      	movs	r6, #16
 80199c4:	786c      	ldrb	r4, [r5, #1]
 80199c6:	3502      	adds	r5, #2
 80199c8:	f04f 32ff 	mov.w	r2, #4294967295
 80199cc:	fbb2 f2f6 	udiv	r2, r2, r6
 80199d0:	2300      	movs	r3, #0
 80199d2:	fb06 fc02 	mul.w	ip, r6, r2
 80199d6:	4618      	mov	r0, r3
 80199d8:	ea6f 0c0c 	mvn.w	ip, ip
 80199dc:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80199e0:	2f09      	cmp	r7, #9
 80199e2:	d817      	bhi.n	8019a14 <_strtoul_l.isra.0+0x96>
 80199e4:	463c      	mov	r4, r7
 80199e6:	42a6      	cmp	r6, r4
 80199e8:	dd23      	ble.n	8019a32 <_strtoul_l.isra.0+0xb4>
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	db1e      	blt.n	8019a2c <_strtoul_l.isra.0+0xae>
 80199ee:	4282      	cmp	r2, r0
 80199f0:	d31c      	bcc.n	8019a2c <_strtoul_l.isra.0+0xae>
 80199f2:	d101      	bne.n	80199f8 <_strtoul_l.isra.0+0x7a>
 80199f4:	45a4      	cmp	ip, r4
 80199f6:	db19      	blt.n	8019a2c <_strtoul_l.isra.0+0xae>
 80199f8:	2301      	movs	r3, #1
 80199fa:	fb00 4006 	mla	r0, r0, r6, r4
 80199fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a02:	e7eb      	b.n	80199dc <_strtoul_l.isra.0+0x5e>
 8019a04:	462f      	mov	r7, r5
 8019a06:	e7c1      	b.n	801998c <_strtoul_l.isra.0+0xe>
 8019a08:	2c2b      	cmp	r4, #43	; 0x2b
 8019a0a:	bf04      	itt	eq
 8019a0c:	1cbd      	addeq	r5, r7, #2
 8019a0e:	787c      	ldrbeq	r4, [r7, #1]
 8019a10:	4619      	mov	r1, r3
 8019a12:	e7cb      	b.n	80199ac <_strtoul_l.isra.0+0x2e>
 8019a14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a18:	2f19      	cmp	r7, #25
 8019a1a:	d801      	bhi.n	8019a20 <_strtoul_l.isra.0+0xa2>
 8019a1c:	3c37      	subs	r4, #55	; 0x37
 8019a1e:	e7e2      	b.n	80199e6 <_strtoul_l.isra.0+0x68>
 8019a20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a24:	2f19      	cmp	r7, #25
 8019a26:	d804      	bhi.n	8019a32 <_strtoul_l.isra.0+0xb4>
 8019a28:	3c57      	subs	r4, #87	; 0x57
 8019a2a:	e7dc      	b.n	80199e6 <_strtoul_l.isra.0+0x68>
 8019a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8019a30:	e7e5      	b.n	80199fe <_strtoul_l.isra.0+0x80>
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	da09      	bge.n	8019a4a <_strtoul_l.isra.0+0xcc>
 8019a36:	2322      	movs	r3, #34	; 0x22
 8019a38:	f04f 30ff 	mov.w	r0, #4294967295
 8019a3c:	f8c8 3000 	str.w	r3, [r8]
 8019a40:	f1ba 0f00 	cmp.w	sl, #0
 8019a44:	d107      	bne.n	8019a56 <_strtoul_l.isra.0+0xd8>
 8019a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a4a:	b101      	cbz	r1, 8019a4e <_strtoul_l.isra.0+0xd0>
 8019a4c:	4240      	negs	r0, r0
 8019a4e:	f1ba 0f00 	cmp.w	sl, #0
 8019a52:	d0f8      	beq.n	8019a46 <_strtoul_l.isra.0+0xc8>
 8019a54:	b10b      	cbz	r3, 8019a5a <_strtoul_l.isra.0+0xdc>
 8019a56:	f105 39ff 	add.w	r9, r5, #4294967295
 8019a5a:	f8ca 9000 	str.w	r9, [sl]
 8019a5e:	e7f2      	b.n	8019a46 <_strtoul_l.isra.0+0xc8>
 8019a60:	2430      	movs	r4, #48	; 0x30
 8019a62:	2e00      	cmp	r6, #0
 8019a64:	d1b0      	bne.n	80199c8 <_strtoul_l.isra.0+0x4a>
 8019a66:	2608      	movs	r6, #8
 8019a68:	e7ae      	b.n	80199c8 <_strtoul_l.isra.0+0x4a>
 8019a6a:	2c30      	cmp	r4, #48	; 0x30
 8019a6c:	d0a4      	beq.n	80199b8 <_strtoul_l.isra.0+0x3a>
 8019a6e:	260a      	movs	r6, #10
 8019a70:	e7aa      	b.n	80199c8 <_strtoul_l.isra.0+0x4a>
	...

08019a74 <_strtoul_r>:
 8019a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a76:	4c06      	ldr	r4, [pc, #24]	; (8019a90 <_strtoul_r+0x1c>)
 8019a78:	4d06      	ldr	r5, [pc, #24]	; (8019a94 <_strtoul_r+0x20>)
 8019a7a:	6824      	ldr	r4, [r4, #0]
 8019a7c:	6a24      	ldr	r4, [r4, #32]
 8019a7e:	2c00      	cmp	r4, #0
 8019a80:	bf08      	it	eq
 8019a82:	462c      	moveq	r4, r5
 8019a84:	9400      	str	r4, [sp, #0]
 8019a86:	f7ff ff7a 	bl	801997e <_strtoul_l.isra.0>
 8019a8a:	b003      	add	sp, #12
 8019a8c:	bd30      	pop	{r4, r5, pc}
 8019a8e:	bf00      	nop
 8019a90:	20000148 	.word	0x20000148
 8019a94:	200001ac 	.word	0x200001ac

08019a98 <__submore>:
 8019a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a9c:	460c      	mov	r4, r1
 8019a9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019aa4:	4299      	cmp	r1, r3
 8019aa6:	d11b      	bne.n	8019ae0 <__submore+0x48>
 8019aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019aac:	f7ff f928 	bl	8018d00 <_malloc_r>
 8019ab0:	b918      	cbnz	r0, 8019aba <__submore+0x22>
 8019ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019abe:	63a3      	str	r3, [r4, #56]	; 0x38
 8019ac0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8019ac6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019aca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019ace:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019ad2:	7043      	strb	r3, [r0, #1]
 8019ad4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019ad8:	7003      	strb	r3, [r0, #0]
 8019ada:	6020      	str	r0, [r4, #0]
 8019adc:	2000      	movs	r0, #0
 8019ade:	e7ea      	b.n	8019ab6 <__submore+0x1e>
 8019ae0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019ae2:	0077      	lsls	r7, r6, #1
 8019ae4:	463a      	mov	r2, r7
 8019ae6:	f000 f841 	bl	8019b6c <_realloc_r>
 8019aea:	4605      	mov	r5, r0
 8019aec:	2800      	cmp	r0, #0
 8019aee:	d0e0      	beq.n	8019ab2 <__submore+0x1a>
 8019af0:	eb00 0806 	add.w	r8, r0, r6
 8019af4:	4601      	mov	r1, r0
 8019af6:	4632      	mov	r2, r6
 8019af8:	4640      	mov	r0, r8
 8019afa:	f7fb f9c7 	bl	8014e8c <memcpy>
 8019afe:	f8c4 8000 	str.w	r8, [r4]
 8019b02:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b06:	e7e9      	b.n	8019adc <__submore+0x44>

08019b08 <__ascii_wctomb>:
 8019b08:	b149      	cbz	r1, 8019b1e <__ascii_wctomb+0x16>
 8019b0a:	2aff      	cmp	r2, #255	; 0xff
 8019b0c:	bf8b      	itete	hi
 8019b0e:	238a      	movhi	r3, #138	; 0x8a
 8019b10:	700a      	strbls	r2, [r1, #0]
 8019b12:	6003      	strhi	r3, [r0, #0]
 8019b14:	2001      	movls	r0, #1
 8019b16:	bf88      	it	hi
 8019b18:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b1c:	4770      	bx	lr
 8019b1e:	4608      	mov	r0, r1
 8019b20:	4770      	bx	lr
	...

08019b24 <_fstat_r>:
 8019b24:	b538      	push	{r3, r4, r5, lr}
 8019b26:	2300      	movs	r3, #0
 8019b28:	4c06      	ldr	r4, [pc, #24]	; (8019b44 <_fstat_r+0x20>)
 8019b2a:	4605      	mov	r5, r0
 8019b2c:	4608      	mov	r0, r1
 8019b2e:	4611      	mov	r1, r2
 8019b30:	6023      	str	r3, [r4, #0]
 8019b32:	f7ea f9ad 	bl	8003e90 <_fstat>
 8019b36:	1c43      	adds	r3, r0, #1
 8019b38:	d102      	bne.n	8019b40 <_fstat_r+0x1c>
 8019b3a:	6823      	ldr	r3, [r4, #0]
 8019b3c:	b103      	cbz	r3, 8019b40 <_fstat_r+0x1c>
 8019b3e:	602b      	str	r3, [r5, #0]
 8019b40:	bd38      	pop	{r3, r4, r5, pc}
 8019b42:	bf00      	nop
 8019b44:	20009e2c 	.word	0x20009e2c

08019b48 <_isatty_r>:
 8019b48:	b538      	push	{r3, r4, r5, lr}
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	4c05      	ldr	r4, [pc, #20]	; (8019b64 <_isatty_r+0x1c>)
 8019b4e:	4605      	mov	r5, r0
 8019b50:	4608      	mov	r0, r1
 8019b52:	6023      	str	r3, [r4, #0]
 8019b54:	f7ea f9ab 	bl	8003eae <_isatty>
 8019b58:	1c43      	adds	r3, r0, #1
 8019b5a:	d102      	bne.n	8019b62 <_isatty_r+0x1a>
 8019b5c:	6823      	ldr	r3, [r4, #0]
 8019b5e:	b103      	cbz	r3, 8019b62 <_isatty_r+0x1a>
 8019b60:	602b      	str	r3, [r5, #0]
 8019b62:	bd38      	pop	{r3, r4, r5, pc}
 8019b64:	20009e2c 	.word	0x20009e2c

08019b68 <__malloc_lock>:
 8019b68:	4770      	bx	lr

08019b6a <__malloc_unlock>:
 8019b6a:	4770      	bx	lr

08019b6c <_realloc_r>:
 8019b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b6e:	4607      	mov	r7, r0
 8019b70:	4614      	mov	r4, r2
 8019b72:	460e      	mov	r6, r1
 8019b74:	b921      	cbnz	r1, 8019b80 <_realloc_r+0x14>
 8019b76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019b7a:	4611      	mov	r1, r2
 8019b7c:	f7ff b8c0 	b.w	8018d00 <_malloc_r>
 8019b80:	b922      	cbnz	r2, 8019b8c <_realloc_r+0x20>
 8019b82:	f7ff f871 	bl	8018c68 <_free_r>
 8019b86:	4625      	mov	r5, r4
 8019b88:	4628      	mov	r0, r5
 8019b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b8c:	f000 f814 	bl	8019bb8 <_malloc_usable_size_r>
 8019b90:	42a0      	cmp	r0, r4
 8019b92:	d20f      	bcs.n	8019bb4 <_realloc_r+0x48>
 8019b94:	4621      	mov	r1, r4
 8019b96:	4638      	mov	r0, r7
 8019b98:	f7ff f8b2 	bl	8018d00 <_malloc_r>
 8019b9c:	4605      	mov	r5, r0
 8019b9e:	2800      	cmp	r0, #0
 8019ba0:	d0f2      	beq.n	8019b88 <_realloc_r+0x1c>
 8019ba2:	4631      	mov	r1, r6
 8019ba4:	4622      	mov	r2, r4
 8019ba6:	f7fb f971 	bl	8014e8c <memcpy>
 8019baa:	4631      	mov	r1, r6
 8019bac:	4638      	mov	r0, r7
 8019bae:	f7ff f85b 	bl	8018c68 <_free_r>
 8019bb2:	e7e9      	b.n	8019b88 <_realloc_r+0x1c>
 8019bb4:	4635      	mov	r5, r6
 8019bb6:	e7e7      	b.n	8019b88 <_realloc_r+0x1c>

08019bb8 <_malloc_usable_size_r>:
 8019bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bbc:	1f18      	subs	r0, r3, #4
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	bfbc      	itt	lt
 8019bc2:	580b      	ldrlt	r3, [r1, r0]
 8019bc4:	18c0      	addlt	r0, r0, r3
 8019bc6:	4770      	bx	lr

08019bc8 <_sbrk>:
 8019bc8:	4b04      	ldr	r3, [pc, #16]	; (8019bdc <_sbrk+0x14>)
 8019bca:	4602      	mov	r2, r0
 8019bcc:	6819      	ldr	r1, [r3, #0]
 8019bce:	b909      	cbnz	r1, 8019bd4 <_sbrk+0xc>
 8019bd0:	4903      	ldr	r1, [pc, #12]	; (8019be0 <_sbrk+0x18>)
 8019bd2:	6019      	str	r1, [r3, #0]
 8019bd4:	6818      	ldr	r0, [r3, #0]
 8019bd6:	4402      	add	r2, r0
 8019bd8:	601a      	str	r2, [r3, #0]
 8019bda:	4770      	bx	lr
 8019bdc:	20008954 	.word	0x20008954
 8019be0:	20009e30 	.word	0x20009e30

08019be4 <_init>:
 8019be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019be6:	bf00      	nop
 8019be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bea:	bc08      	pop	{r3}
 8019bec:	469e      	mov	lr, r3
 8019bee:	4770      	bx	lr

08019bf0 <_fini>:
 8019bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bf2:	bf00      	nop
 8019bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bf6:	bc08      	pop	{r3}
 8019bf8:	469e      	mov	lr, r3
 8019bfa:	4770      	bx	lr

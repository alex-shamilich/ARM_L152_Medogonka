
Medogonka_L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000154b0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040c8  080155f0  080155f0  000255f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080196b8  080196b8  00030310  2**0
                  CONTENTS
  4 .ARM          00000008  080196b8  080196b8  000296b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080196c0  080196c0  00030310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080196c0  080196c0  000296c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080196c4  080196c4  000296c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  080196c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000485c  20000310  080199d8  00030310  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004b6c  080199d8  00034b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a0c3  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008739  00000000  00000000  0008a3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002600  00000000  00000000  00092b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002230  00000000  00000000  00095138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d49  00000000  00000000  00097368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003181b  00000000  00000000  000bf0b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b4fb5  00000000  00000000  000f08cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a5881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aba4  00000000  00000000  001a58fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000310 	.word	0x20000310
 800015c:	00000000 	.word	0x00000000
 8000160:	080155d8 	.word	0x080155d8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000314 	.word	0x20000314
 800017c:	080155d8 	.word	0x080155d8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	468c      	mov	ip, r1
 8000bce:	4604      	mov	r4, r0
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0c03 	orr.w	ip, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	fbbc f7fe 	udiv	r7, ip, lr
 8000bfe:	fa1f f885 	uxth.w	r8, r5
 8000c02:	fb0e c317 	mls	r3, lr, r7, ip
 8000c06:	fb07 f908 	mul.w	r9, r7, r8
 8000c0a:	0c21      	lsrs	r1, r4, #16
 8000c0c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c10:	4599      	cmp	r9, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 31ff 	add.w	r1, r7, #4294967295
 8000c1a:	f080 811c 	bcs.w	8000e56 <__udivmoddi4+0x28e>
 8000c1e:	4599      	cmp	r9, r3
 8000c20:	f240 8119 	bls.w	8000e56 <__udivmoddi4+0x28e>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	eba3 0309 	sub.w	r3, r3, r9
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	fb00 f108 	mul.w	r1, r0, r8
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3e:	42a1      	cmp	r1, r4
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	192c      	adds	r4, r5, r4
 8000c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c48:	f080 8107 	bcs.w	8000e5a <__udivmoddi4+0x292>
 8000c4c:	42a1      	cmp	r1, r4
 8000c4e:	f240 8104 	bls.w	8000e5a <__udivmoddi4+0x292>
 8000c52:	3802      	subs	r0, #2
 8000c54:	442c      	add	r4, r5
 8000c56:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	1a64      	subs	r4, r4, r1
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	2300      	movs	r3, #0
 8000c62:	40d4      	lsrs	r4, r2
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ec 	beq.w	8000e50 <__udivmoddi4+0x288>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d148      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fb 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	469c      	mov	ip, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4c00 	strd	r4, ip, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	2701      	movs	r7, #1
 8000cbc:	1b49      	subs	r1, r1, r5
 8000cbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cc2:	fa1f f985 	uxth.w	r9, r5
 8000cc6:	fbb1 fef8 	udiv	lr, r1, r8
 8000cca:	fb08 111e 	mls	r1, r8, lr, r1
 8000cce:	fb09 f00e 	mul.w	r0, r9, lr
 8000cd2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000cd6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x126>
 8000cde:	18eb      	adds	r3, r5, r3
 8000ce0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x124>
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	f200 80cd 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000cec:	468e      	mov	lr, r1
 8000cee:	1a1b      	subs	r3, r3, r0
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	fb09 f900 	mul.w	r9, r9, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d02:	45a1      	cmp	r9, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d06:	192c      	adds	r4, r5, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f200 80b6 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000d14:	4618      	mov	r0, r3
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d1e:	e79e      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d20:	f1c7 0520 	rsb	r5, r7, #32
 8000d24:	40bb      	lsls	r3, r7
 8000d26:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa21 f405 	lsr.w	r4, r1, r5
 8000d32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d36:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d3a:	fa1f f88c 	uxth.w	r8, ip
 8000d3e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d42:	fa20 f305 	lsr.w	r3, r0, r5
 8000d46:	40b9      	lsls	r1, r7
 8000d48:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	0c0b      	lsrs	r3, r1, #16
 8000d50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d54:	45a2      	cmp	sl, r4
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	eba4 040a 	sub.w	r4, r4, sl
 8000d7c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d80:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d84:	fb00 fa08 	mul.w	sl, r0, r8
 8000d88:	b289      	uxth	r1, r1
 8000d8a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x1dc>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9a:	d26b      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d969      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4464      	add	r4, ip
 8000da4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dac:	eba4 040a 	sub.w	r4, r4, sl
 8000db0:	454c      	cmp	r4, r9
 8000db2:	4641      	mov	r1, r8
 8000db4:	46ce      	mov	lr, r9
 8000db6:	d354      	bcc.n	8000e62 <__udivmoddi4+0x29a>
 8000db8:	d051      	beq.n	8000e5e <__udivmoddi4+0x296>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d069      	beq.n	8000e92 <__udivmoddi4+0x2ca>
 8000dbe:	1a5a      	subs	r2, r3, r1
 8000dc0:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc4:	fa04 f505 	lsl.w	r5, r4, r5
 8000dc8:	fa22 f307 	lsr.w	r3, r2, r7
 8000dcc:	40fc      	lsrs	r4, r7
 8000dce:	431d      	orrs	r5, r3
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	fa21 f003 	lsr.w	r0, r1, r3
 8000de2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000de6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dea:	fa1f f985 	uxth.w	r9, r5
 8000dee:	fb08 0017 	mls	r0, r8, r7, r0
 8000df2:	fa24 f303 	lsr.w	r3, r4, r3
 8000df6:	4091      	lsls	r1, r2
 8000df8:	fb07 fc09 	mul.w	ip, r7, r9
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	0c19      	lsrs	r1, r3, #16
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	458c      	cmp	ip, r1
 8000e06:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x254>
 8000e0c:	1869      	adds	r1, r5, r1
 8000e0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000e12:	d231      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e14:	458c      	cmp	ip, r1
 8000e16:	d92f      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	3f02      	subs	r7, #2
 8000e1a:	4429      	add	r1, r5
 8000e1c:	eba1 010c 	sub.w	r1, r1, ip
 8000e20:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e24:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e28:	fb00 fe09 	mul.w	lr, r0, r9
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3c:	d218      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e3e:	458e      	cmp	lr, r1
 8000e40:	d916      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	eba1 010e 	sub.w	r1, r1, lr
 8000e4a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4e:	e73a      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e50:	4637      	mov	r7, r6
 8000e52:	4630      	mov	r0, r6
 8000e54:	e708      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e56:	460f      	mov	r7, r1
 8000e58:	e6e6      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	e6fb      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000e5e:	4543      	cmp	r3, r8
 8000e60:	d2ab      	bcs.n	8000dba <__udivmoddi4+0x1f2>
 8000e62:	ebb8 0102 	subs.w	r1, r8, r2
 8000e66:	eb69 020c 	sbc.w	r2, r9, ip
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	4696      	mov	lr, r2
 8000e6e:	e7a4      	b.n	8000dba <__udivmoddi4+0x1f2>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e7e8      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e795      	b.n	8000da4 <__udivmoddi4+0x1dc>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e7cf      	b.n	8000e1c <__udivmoddi4+0x254>
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	442c      	add	r4, r5
 8000e84:	e747      	b.n	8000d16 <__udivmoddi4+0x14e>
 8000e86:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8a:	442b      	add	r3, r5
 8000e8c:	e72f      	b.n	8000cee <__udivmoddi4+0x126>
 8000e8e:	4638      	mov	r0, r7
 8000e90:	e707      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e92:	4637      	mov	r7, r6
 8000e94:	e6e8      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

//======================================================================================
void MX_ADC_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eae:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <MX_ADC_Init+0xb0>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_ADC_Init+0xac>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f0e:	f002 ff37 	bl	8003d80 <HAL_ADC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <MX_ADC_Init+0x82>
  {
    Error_Handler(2);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f001 fe43 	bl	8002ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f30:	f003 faa8 	bl	8004484 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <MX_ADC_Init+0xa4>
  {
    Error_Handler(2);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f001 fe32 	bl	8002ba4 <Error_Handler>
  }

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200039ec 	.word	0x200039ec
 8000f4c:	40012400 	.word	0x40012400

08000f50 <HAL_ADC_MspInit>:
//======================================================================================
void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a31      	ldr	r2, [pc, #196]	; (8001034 <HAL_ADC_MspInit+0xe4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d15c      	bne.n	800102c <HAL_ADC_MspInit+0xdc>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4a30      	ldr	r2, [pc, #192]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7c:	6213      	str	r3, [r2, #32]
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a24      	ldr	r2, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    PE8     ------> ADC_IN23
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = ADC_V_MOTOR_Pin|ADC_V_IN_12V_Pin;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fe6:	f003 ff81 	bl	8004eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SPEED_Pin;
 8000fea:	2320      	movs	r3, #32
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_SPEED_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <HAL_ADC_MspInit+0xf0>)
 8000ffe:	f003 ff75 	bl	8004eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_I_IN_12V_Pin|ADC_I_MOTOR_Pin;
 8001002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <HAL_ADC_MspInit+0xf4>)
 8001018:	f003 ff68 	bl	8004eec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2012      	movs	r0, #18
 8001022:	f003 fcea 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001026:	2012      	movs	r0, #18
 8001028:	f003 fd03 	bl	8004a32 <HAL_NVIC_EnableIRQ>

  }
}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40012400 	.word	0x40012400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020800 	.word	0x40020800
 8001044:	40021000 	.word	0x40021000

08001048 <ADC_GetRAWData>:
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
  }
}
//======================================================================================
uint32_t ADC_GetRAWData(uint32_t Channel)												// Получить сырые данные для обрботки по указанному каналу
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]

	sConfig.Rank         = ADC_REGULAR_RANK_1;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8001060:	2302      	movs	r3, #2
 8001062:	617b      	str	r3, [r7, #20]

	sConfig.Channel      = Channel;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	480f      	ldr	r0, [pc, #60]	; (80010ac <ADC_GetRAWData+0x64>)
 8001070:	f003 fa08 	bl	8004484 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <ADC_GetRAWData+0x38>
	{
		Error_Handler(2);
 800107a:	2002      	movs	r0, #2
 800107c:	f001 fd92 	bl	8002ba4 <Error_Handler>
	}

	// Замер из АЦП
	HAL_ADC_Start(&hadc);
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <ADC_GetRAWData+0x64>)
 8001082:	f002 ffc3 	bl	800400c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 8001086:	210a      	movs	r1, #10
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <ADC_GetRAWData+0x64>)
 800108a:	f003 f84b 	bl	8004124 <HAL_ADC_PollForConversion>
	ADC_State.ADC_RAW = HAL_ADC_GetValue(&hadc);
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <ADC_GetRAWData+0x64>)
 8001090:	f003 f8d1 	bl	8004236 <HAL_ADC_GetValue>
 8001094:	4602      	mov	r2, r0
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <ADC_GetRAWData+0x68>)
 8001098:	605a      	str	r2, [r3, #4]
	HAL_ADC_Stop(&hadc);
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <ADC_GetRAWData+0x64>)
 800109c:	f003 f816 	bl	80040cc <HAL_ADC_Stop>

	return ADC_State.ADC_RAW;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <ADC_GetRAWData+0x68>)
 80010a2:	685b      	ldr	r3, [r3, #4]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200039ec 	.word	0x200039ec
 80010b0:	20003a48 	.word	0x20003a48
 80010b4:	00000000 	.word	0x00000000

080010b8 <ADC_ScanState>:
//======================================================================================
void ADC_ScanState(void)																// Замер из АЦП по всем каналам сразу
{
 80010b8:	b598      	push	{r3, r4, r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// ADC Channel: IN23						- ADC_I_IN_12V
	// ADC Channel: IN24						- ADC_I_MOTOR
	// ADC Channel: Temperature Sensor Channel 	- температура кристалла процессора
	// ADC Channel: Vrefint Channel				- Напряжение питания, для рассчетов опоры

	ADC_State.DataReady = 0;
 80010bc:	4ba8      	ldr	r3, [pc, #672]	; (8001360 <ADC_ScanState+0x2a8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]


	ADC_GetRAWData(ADC_CHANNEL_VREFINT);												// Канал АЦП - опорное напряжение для рассчета напряжения питания процессора
 80010c2:	2011      	movs	r0, #17
 80010c4:	f7ff ffc0 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80010c8:	4ba5      	ldr	r3, [pc, #660]	; (8001360 <ADC_ScanState+0x2a8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d0:	d222      	bcs.n	8001118 <ADC_ScanState+0x60>
	{
		// Реальное напряжение питания процессора, точнее питание аналоговой части
		ADC_State.ADC_Ref_Voltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_State.ADC_RAW, hadc.Init.Resolution) / 1000.0; // калибровка батареи - опорное напряжение АЦП
 80010d2:	4ba4      	ldr	r3, [pc, #656]	; (8001364 <ADC_ScanState+0x2ac>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010dc:	fb03 f202 	mul.w	r2, r3, r2
 80010e0:	4b9f      	ldr	r3, [pc, #636]	; (8001360 <ADC_ScanState+0x2a8>)
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <ADC_ScanState+0x2b0>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	0ddb      	lsrs	r3, r3, #23
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f98e 	bl	8000414 <__aeabi_ui2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b9b      	ldr	r3, [pc, #620]	; (800136c <ADC_ScanState+0x2b4>)
 80010fe:	f7ff fb2d 	bl	800075c <__aeabi_ddiv>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	4a96      	ldr	r2, [pc, #600]	; (8001360 <ADC_ScanState+0x2a8>)
 8001108:	e9c2 3402 	strd	r3, r4, [r2, #8]
		ADC_State.DataReady++;
 800110c:	4b94      	ldr	r3, [pc, #592]	; (8001360 <ADC_ScanState+0x2a8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b92      	ldr	r3, [pc, #584]	; (8001360 <ADC_ScanState+0x2a8>)
 8001116:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(ADC_CHANNEL_TEMPSENSOR);												// Канал АЦП - температура внутри процессора
 8001118:	2010      	movs	r0, #16
 800111a:	f7ff ff95 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800111e:	4b90      	ldr	r3, [pc, #576]	; (8001360 <ADC_ScanState+0x2a8>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001126:	d229      	bcs.n	800117c <ADC_ScanState+0xc4>
	{
		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, без учета реального напряжения питания
		ADC_State.CPU_Temperature 	= COMPUTATION_TEMPERATURE_TEMP30_TEMP110(ADC_State.ADC_RAW) - 2;
 8001128:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <ADC_ScanState+0x2a8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	4a8e      	ldr	r2, [pc, #568]	; (8001370 <ADC_ScanState+0x2b8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	099b      	lsrs	r3, r3, #6
 800113c:	461a      	mov	r2, r3
 800113e:	4b8d      	ldr	r3, [pc, #564]	; (8001374 <ADC_ScanState+0x2bc>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	1ad2      	subs	r2, r2, r3
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	461a      	mov	r2, r3
 800114e:	4b8a      	ldr	r3, [pc, #552]	; (8001378 <ADC_ScanState+0x2c0>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	4b87      	ldr	r3, [pc, #540]	; (8001374 <ADC_ScanState+0x2bc>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	1acb      	subs	r3, r1, r3
 800115a:	fb92 f3f3 	sdiv	r3, r2, r3
 800115e:	331c      	adds	r3, #28
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f967 	bl	8000434 <__aeabi_i2d>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4a7d      	ldr	r2, [pc, #500]	; (8001360 <ADC_ScanState+0x2a8>)
 800116c:	e9c2 3404 	strd	r3, r4, [r2, #16]

//		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, с учетом реального опопрного напряжения питания
//		ADC_State.CPU_Temperature_raw 	= __LL_ADC_CALC_DATA_TO_VOLTAGE(ADC_State.ADC_Ref_Voltage, ADC_State.ADC_RAW, hadc.Init.Resolution);  // пересчет из сырых данных АЦП в напряжение в вольтах с учетом разрядности
//		ADC_State.CPU_TemperatureRef    = __LL_ADC_CALC_TEMPERATURE((uint32_t)(1000*ADC_State.ADC_Ref_Voltage), ADC_State.ADC_RAW , hadc.Init.Resolution) - 2;

		ADC_State.DataReady++;
 8001170:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <ADC_ScanState+0x2a8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b79      	ldr	r3, [pc, #484]	; (8001360 <ADC_ScanState+0x2a8>)
 800117a:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_SPEED);													// Канал АЦП - регулятор скорости мотора (пременный резистор 0..3.3V)
 800117c:	200f      	movs	r0, #15
 800117e:	f7ff ff63 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <ADC_ScanState+0x2a8>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118a:	d235      	bcs.n	80011f8 <ADC_ScanState+0x140>
	{
		ADC_State.Speed_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_SPEED;
 800118c:	4b74      	ldr	r3, [pc, #464]	; (8001360 <ADC_ScanState+0x2a8>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f93f 	bl	8000414 <__aeabi_ui2d>
 8001196:	a366      	add	r3, pc, #408	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff f9b4 	bl	8000508 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4a6e      	ldr	r2, [pc, #440]	; (8001360 <ADC_ScanState+0x2a8>)
 80011a6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		ADC_State.Speed_value_percent	= (uint8_t)( (ADC_State.Speed_value_volts/ADC_REF_VOLTAGE_DEFAULT)*(double)100 );
 80011aa:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <ADC_ScanState+0x2a8>)
 80011ac:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011b0:	a361      	add	r3, pc, #388	; (adr r3, 8001338 <ADC_ScanState+0x280>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fad1 	bl	800075c <__aeabi_ddiv>
 80011ba:	4603      	mov	r3, r0
 80011bc:	460c      	mov	r4, r1
 80011be:	4618      	mov	r0, r3
 80011c0:	4621      	mov	r1, r4
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b6d      	ldr	r3, [pc, #436]	; (800137c <ADC_ScanState+0x2c4>)
 80011c8:	f7ff f99e 	bl	8000508 <__aeabi_dmul>
 80011cc:	4603      	mov	r3, r0
 80011ce:	460c      	mov	r4, r1
 80011d0:	4618      	mov	r0, r3
 80011d2:	4621      	mov	r1, r4
 80011d4:	f7ff fc70 	bl	8000ab8 <__aeabi_d2uiz>
 80011d8:	4603      	mov	r3, r0
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b60      	ldr	r3, [pc, #384]	; (8001360 <ADC_ScanState+0x2a8>)
 80011de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		Speed_value_percent = ADC_State.Speed_value_percent;
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <ADC_ScanState+0x2a8>)
 80011e4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80011e8:	4b65      	ldr	r3, [pc, #404]	; (8001380 <ADC_ScanState+0x2c8>)
 80011ea:	701a      	strb	r2, [r3, #0]

		ADC_State.DataReady++;
 80011ec:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <ADC_ScanState+0x2a8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <ADC_ScanState+0x2a8>)
 80011f6:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_IN_12V);												// Канал АЦП - напряжение питания на входе
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff ff25 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80011fe:	4b58      	ldr	r3, [pc, #352]	; (8001360 <ADC_ScanState+0x2a8>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001206:	d21d      	bcs.n	8001244 <ADC_ScanState+0x18c>
	{
		ADC_State.V_IN_12V_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_IN_12V;
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <ADC_ScanState+0x2a8>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f901 	bl	8000414 <__aeabi_ui2d>
 8001212:	a347      	add	r3, pc, #284	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f976 	bl	8000508 <__aeabi_dmul>
 800121c:	4603      	mov	r3, r0
 800121e:	460c      	mov	r4, r1
 8001220:	4618      	mov	r0, r3
 8001222:	4621      	mov	r1, r4
 8001224:	a346      	add	r3, pc, #280	; (adr r3, 8001340 <ADC_ScanState+0x288>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f96d 	bl	8000508 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <ADC_ScanState+0x2a8>)
 8001234:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

		ADC_State.DataReady++;
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <ADC_ScanState+0x2a8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b47      	ldr	r3, [pc, #284]	; (8001360 <ADC_ScanState+0x2a8>)
 8001242:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_MOTOR);												// Канал АЦП - напряжение питания мотора (среднее)
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff feff 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <ADC_ScanState+0x2a8>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001252:	d21d      	bcs.n	8001290 <ADC_ScanState+0x1d8>
	{
		ADC_State.V_IN_MOTOR_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_MOTOR;
 8001254:	4b42      	ldr	r3, [pc, #264]	; (8001360 <ADC_ScanState+0x2a8>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f8db 	bl	8000414 <__aeabi_ui2d>
 800125e:	a334      	add	r3, pc, #208	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f950 	bl	8000508 <__aeabi_dmul>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	a335      	add	r3, pc, #212	; (adr r3, 8001348 <ADC_ScanState+0x290>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff f947 	bl	8000508 <__aeabi_dmul>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4a38      	ldr	r2, [pc, #224]	; (8001360 <ADC_ScanState+0x2a8>)
 8001280:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

		ADC_State.DataReady++;
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <ADC_ScanState+0x2a8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <ADC_ScanState+0x2a8>)
 800128e:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_IN_12V);												// Канал АЦП - общий входной ток
 8001290:	2017      	movs	r0, #23
 8001292:	f7ff fed9 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <ADC_ScanState+0x2a8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129e:	d21d      	bcs.n	80012dc <ADC_ScanState+0x224>
	{
		ADC_State.I_IN_12V_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_IN_12V;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <ADC_ScanState+0x2a8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8b5 	bl	8000414 <__aeabi_ui2d>
 80012aa:	a321      	add	r3, pc, #132	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff f92a 	bl	8000508 <__aeabi_dmul>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	a324      	add	r3, pc, #144	; (adr r3, 8001350 <ADC_ScanState+0x298>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f921 	bl	8000508 <__aeabi_dmul>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <ADC_ScanState+0x2a8>)
 80012cc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

		ADC_State.DataReady++;
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <ADC_ScanState+0x2a8>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <ADC_ScanState+0x2a8>)
 80012da:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_MOTOR);												// Канал АЦП - ток мотора
 80012dc:	2018      	movs	r0, #24
 80012de:	f7ff feb3 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <ADC_ScanState+0x2a8>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ea:	d21d      	bcs.n	8001328 <ADC_ScanState+0x270>
	{
		ADC_State.I_IN_MOTOR_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_MOTOR;
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <ADC_ScanState+0x2a8>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f88f 	bl	8000414 <__aeabi_ui2d>
 80012f6:	a30e      	add	r3, pc, #56	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f7ff f904 	bl	8000508 <__aeabi_dmul>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	4618      	mov	r0, r3
 8001306:	4621      	mov	r1, r4
 8001308:	a313      	add	r3, pc, #76	; (adr r3, 8001358 <ADC_ScanState+0x2a0>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f8fb 	bl	8000508 <__aeabi_dmul>
 8001312:	4603      	mov	r3, r0
 8001314:	460c      	mov	r4, r1
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <ADC_ScanState+0x2a8>)
 8001318:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

		ADC_State.DataReady++;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <ADC_ScanState+0x2a8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <ADC_ScanState+0x2a8>)
 8001326:	701a      	strb	r2, [r3, #0]
	}

}
 8001328:	bf00      	nop
 800132a:	bd98      	pop	{r3, r4, r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	66666666 	.word	0x66666666
 8001334:	3f4a6666 	.word	0x3f4a6666
 8001338:	66666666 	.word	0x66666666
 800133c:	400a6666 	.word	0x400a6666
 8001340:	70a3d70a 	.word	0x70a3d70a
 8001344:	40180a3d 	.word	0x40180a3d
 8001348:	51eb851f 	.word	0x51eb851f
 800134c:	40181eb8 	.word	0x40181eb8
 8001350:	cccccccd 	.word	0xcccccccd
 8001354:	4010cccc 	.word	0x4010cccc
 8001358:	9999999a 	.word	0x9999999a
 800135c:	40099999 	.word	0x40099999
 8001360:	20003a48 	.word	0x20003a48
 8001364:	1ff800f8 	.word	0x1ff800f8
 8001368:	200039ec 	.word	0x200039ec
 800136c:	408f4000 	.word	0x408f4000
 8001370:	057619f1 	.word	0x057619f1
 8001374:	1ff800fa 	.word	0x1ff800fa
 8001378:	1ff800fe 	.word	0x1ff800fe
 800137c:	40590000 	.word	0x40590000
 8001380:	200039d0 	.word	0x200039d0

08001384 <BUZZER_Init>:

uint8_t			BUZZER_BuzzerState;														// состояние баззера (включен/выключен)

//======================================================================================
void BUZZER_Init(uint8_t state)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b090      	sub	sp, #64	; 0x40
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <BUZZER_Init+0x144>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <BUZZER_Init+0x144>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <BUZZER_Init+0x144>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <BUZZER_Init+0x144>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <BUZZER_Init+0x144>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <BUZZER_Init+0x144>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <BUZZER_Init+0x144>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a41      	ldr	r2, [pc, #260]	; (80014c8 <BUZZER_Init+0x144>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <BUZZER_Init+0x144>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <BUZZER_Init+0x144>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a3b      	ldr	r2, [pc, #236]	; (80014c8 <BUZZER_Init+0x144>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <BUZZER_Init+0x144>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <BUZZER_Init+0x144>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a35      	ldr	r2, [pc, #212]	; (80014c8 <BUZZER_Init+0x144>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <BUZZER_Init+0x144>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <BUZZER_Init+0x144>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <BUZZER_Init+0x144>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <BUZZER_Init+0x144>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2120      	movs	r1, #32
 8001422:	482a      	ldr	r0, [pc, #168]	; (80014cc <BUZZER_Init+0x148>)
 8001424:	f003 ff07 	bl	8005236 <HAL_GPIO_WritePin>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <BUZZER_Init+0x144>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <BUZZER_Init+0x144>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	61d3      	str	r3, [r2, #28]
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <BUZZER_Init+0x144>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin 		= BUZZER_Pin;
 8001440:	2320      	movs	r3, #32
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8001448:	2302      	movs	r3, #2
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38


	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001454:	4619      	mov	r1, r3
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <BUZZER_Init+0x148>)
 8001458:	f003 fd48 	bl	8004eec <HAL_GPIO_Init>
	BUZZER_BuzzerState = state;
 800145c:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <BUZZER_Init+0x14c>)
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	7013      	strb	r3, [r2, #0]


	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance 				= TIM6;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <BUZZER_Init+0x150>)
 8001464:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <BUZZER_Init+0x154>)
 8001466:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler 		= 32;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <BUZZER_Init+0x150>)
 800146a:	2220      	movs	r2, #32
 800146c:	605a      	str	r2, [r3, #4]
	htim6.Init.Period 			= BUZZER_HALF_PERIOD_TIM;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <BUZZER_Init+0x150>)
 8001470:	2279      	movs	r2, #121	; 0x79
 8001472:	60da      	str	r2, [r3, #12]
	htim6.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <BUZZER_Init+0x150>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <BUZZER_Init+0x150>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001480:	4814      	ldr	r0, [pc, #80]	; (80014d4 <BUZZER_Init+0x150>)
 8001482:	f006 fc07 	bl	8007c94 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <BUZZER_Init+0x10e>
	{
		Error_Handler(4);
 800148c:	2004      	movs	r0, #4
 800148e:	f001 fb89 	bl	8002ba4 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger 	= TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
	sMasterConfig.MasterSlaveMode 		= TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <BUZZER_Init+0x150>)
 80014a2:	f007 fb61 	bl	8008b68 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <BUZZER_Init+0x12e>
	{
		Error_Handler(4);
 80014ac:	2004      	movs	r0, #4
 80014ae:	f001 fb79 	bl	8002ba4 <Error_Handler>
	}

	HAL_TIM_Base_MspInit(&htim6);														// Настройка прерываний для таймера
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <BUZZER_Init+0x150>)
 80014b4:	f000 ff8c 	bl	80023d0 <HAL_TIM_Base_MspInit>

	HAL_TIM_MspPostInit(&htim6);
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <BUZZER_Init+0x150>)
 80014ba:	f000 ffd5 	bl	8002468 <HAL_TIM_MspPostInit>

}
 80014be:	bf00      	nop
 80014c0:	3740      	adds	r7, #64	; 0x40
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400
 80014d0:	20003a98 	.word	0x20003a98
 80014d4:	20003d5c 	.word	0x20003d5c
 80014d8:	40001000 	.word	0x40001000

080014dc <BUZZER_Beep>:
//======================================================================================
void BUZZER_Beep(void) 																	// Generates one short beep in RealMode with stupid waiting
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
//	htim6.Init.Period = 100;
//	HAL_TIM_Base_Init(&htim6);
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <BUZZER_Beep+0x40>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d113      	bne.n	8001512 <BUZZER_Beep+0x36>
	{
		uint16_t len = BUZZER_NUM_HALF_PERIOD_NORM;
 80014ea:	2346      	movs	r3, #70	; 0x46
 80014ec:	80fb      	strh	r3, [r7, #6]
		while (len--)
 80014ee:	e006      	b.n	80014fe <BUZZER_Beep+0x22>
		{
			BUZZER_INV;
 80014f0:	2120      	movs	r1, #32
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <BUZZER_Beep+0x44>)
 80014f4:	f003 feb7 	bl	8005266 <HAL_GPIO_TogglePin>
			HAL_Delay(BUZZER_HALF_PERIOD);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f002 fc1f 	bl	8003d3c <HAL_Delay>
		while (len--)
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	1e5a      	subs	r2, r3, #1
 8001502:	80fa      	strh	r2, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f3      	bne.n	80014f0 <BUZZER_Beep+0x14>
		}
		BUZZER_OFF;
 8001508:	2200      	movs	r2, #0
 800150a:	2120      	movs	r1, #32
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <BUZZER_Beep+0x44>)
 800150e:	f003 fe92 	bl	8005236 <HAL_GPIO_WritePin>
	}
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20003a98 	.word	0x20003a98
 8001520:	40020400 	.word	0x40020400

08001524 <BUZZER_BeepTIM>:
//======================================================================================
void BUZZER_BeepTIM(void) 																// Generates one short beep under RTOS
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <BUZZER_BeepTIM+0x2c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10d      	bne.n	800154c <BUZZER_BeepTIM+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim6);													// Запуск тааймера, на обработчике состояния таймера - смена состояния пина баззера
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <BUZZER_BeepTIM+0x30>)
 8001532:	f006 fbef 	bl	8007d14 <HAL_TIM_Base_Start_IT>
		osDelay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через планировщик RTOS (минимум 1мс)
 8001536:	2046      	movs	r0, #70	; 0x46
 8001538:	f00c fc4e 	bl	800ddd8 <osDelay>
	//	HAL_Delay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через HAL (минимум 1мс)
		HAL_TIM_Base_Stop_IT(&htim6);
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <BUZZER_BeepTIM+0x30>)
 800153e:	f006 fc3b 	bl	8007db8 <HAL_TIM_Base_Stop_IT>
		BUZZER_OFF;
 8001542:	2200      	movs	r2, #0
 8001544:	2120      	movs	r1, #32
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <BUZZER_BeepTIM+0x34>)
 8001548:	f003 fe75 	bl	8005236 <HAL_GPIO_WritePin>
	}
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20003a98 	.word	0x20003a98
 8001554:	20003d5c 	.word	0x20003d5c
 8001558:	40020400 	.word	0x40020400

0800155c <MX_DAC_Init>:

DAC_HandleTypeDef DacHandle;

//======================================================================================
void MX_DAC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  DacHandle.Instance = DAC;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_DAC_Init+0x50>)
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <MX_DAC_Init+0x54>)
 800156e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&DacHandle) != HAL_OK)
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_DAC_Init+0x50>)
 8001572:	f003 fa6c 	bl	8004a4e <HAL_DAC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <MX_DAC_Init+0x26>
  {
    Error_Handler(3);
 800157c:	2003      	movs	r0, #3
 800157e:	f001 fb11 	bl	8002ba4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACx_CHANNEL) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_DAC_Init+0x50>)
 8001592:	f003 faf1 	bl	8004b78 <HAL_DAC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <MX_DAC_Init+0x46>
  {
    Error_Handler(3);
 800159c:	2003      	movs	r0, #3
 800159e:	f001 fb01 	bl	8002ba4 <Error_Handler>
  }

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20003a9c 	.word	0x20003a9c
 80015b0:	40007400 	.word	0x40007400

080015b4 <HAL_DAC_MspInit>:
//======================================================================================
void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_DAC_MspInit+0x74>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d123      	bne.n	800161e <HAL_DAC_MspInit+0x6a>
  {
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015e0:	6253      	str	r3, [r2, #36]	; 0x24
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC1__MOTOR_SPEED_Pin;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1__MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_DAC_MspInit+0x7c>)
 800161a:	f003 fc67 	bl	8004eec <HAL_GPIO_Init>

  }
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40007400 	.word	0x40007400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <DAC_SetValue>:
    HAL_GPIO_DeInit(DAC1__MOTOR_SPEED_GPIO_Port, DAC1__MOTOR_SPEED_Pin);
  }
}
//======================================================================================
void DAC_SetValue(uint8_t AValue)														// Установка значения в ЦАП
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	if (HAL_DAC_SetValue(&DacHandle, DACx_CHANNEL, DAC_ALIGN_8B_R, (uint32_t)AValue) != HAL_OK)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2208      	movs	r2, #8
 8001642:	2100      	movs	r1, #0
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <DAC_SetValue+0x40>)
 8001646:	f003 fa73 	bl	8004b30 <HAL_DAC_SetValue>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <DAC_SetValue+0x22>
	{
	  Error_Handler(21);//Setting value Error
 8001650:	2015      	movs	r0, #21
 8001652:	f001 faa7 	bl	8002ba4 <Error_Handler>
	}

	if (HAL_DAC_Start(&DacHandle, DACx_CHANNEL) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <DAC_SetValue+0x40>)
 800165a:	f003 fa1a 	bl	8004a92 <HAL_DAC_Start>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <DAC_SetValue+0x36>
	{
	  Error_Handler(21);//Start Error
 8001664:	2015      	movs	r0, #21
 8001666:	f001 fa9d 	bl	8002ba4 <Error_Handler>
	}

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20003a9c 	.word	0x20003a9c

08001678 <MX_DMA_Init>:
#include <DMA.h>

//======================================================================================
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_DMA_Init+0x38>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <MX_DMA_Init+0x38>)
 8001684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_DMA_Init+0x38>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	200f      	movs	r0, #15
 800169c:	f003 f9ad 	bl	80049fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016a0:	200f      	movs	r0, #15
 80016a2:	f003 f9c6 	bl	8004a32 <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800

080016b4 <Display_Test>:

char str[18];																			// Для печати строк через sprintf

//======================================================================================
void Display_Test(uint16_t pos_x, uint16_t pos_y)										// Для тестов
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80bb      	strh	r3, [r7, #4]
//	sprintf(str, "%04.3f", ADC_State.Speed_value_volts);
//	LCD9488_GUI_Draw_StringColor(10, 230, str, (unsigned char*)LCD55Mono37x48, RED, CYAN, DRAW_NO_OVERLYING);

	sprintf(str, "%02d", Speed_value_percent);
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <Display_Test+0x44>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	490c      	ldr	r1, [pc, #48]	; (80016fc <Display_Test+0x48>)
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <Display_Test+0x4c>)
 80016ce:	f010 fbef 	bl	8011eb0 <siprintf>
//	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Digital7Mono32x48, RED, CYAN, DRAW_NO_OVERLYING);
	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Unispace32x48_Digits, RED, CYAN, DRAW_NO_OVERLYING);
 80016d2:	2300      	movs	r3, #0
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <Display_Test+0x50>)
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <Display_Test+0x4c>)
 80016e6:	21e6      	movs	r1, #230	; 0xe6
 80016e8:	20c8      	movs	r0, #200	; 0xc8
 80016ea:	f002 fa71 	bl	8003bd0 <LCD9488_GUI_Draw_StringColor>


}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200039d0 	.word	0x200039d0
 80016fc:	080155f0 	.word	0x080155f0
 8001700:	20003ab0 	.word	0x20003ab0
 8001704:	08018bcc 	.word	0x08018bcc

08001708 <Display_SystemVoltage>:
//======================================================================================
void Display_SystemVoltage(uint16_t pos_x, uint16_t pos_y)								// Показать напряжение питания процессора
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af04      	add	r7, sp, #16
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	80fb      	strh	r3, [r7, #6]
 8001714:	4613      	mov	r3, r2
 8001716:	80bb      	strh	r3, [r7, #4]
	unsigned char* Font = (unsigned char*)Arial_9;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <Display_SystemVoltage+0x8c>)
 800171a:	60fb      	str	r3, [r7, #12]

	sprintf(str, "Vcc = %3.2fv", ADC_State.ADC_Ref_Voltage);
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <Display_SystemVoltage+0x90>)
 800171e:	f103 0408 	add.w	r4, r3, #8
 8001722:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001726:	461a      	mov	r2, r3
 8001728:	4623      	mov	r3, r4
 800172a:	491c      	ldr	r1, [pc, #112]	; (800179c <Display_SystemVoltage+0x94>)
 800172c:	481c      	ldr	r0, [pc, #112]	; (80017a0 <Display_SystemVoltage+0x98>)
 800172e:	f010 fbbf 	bl	8011eb0 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001732:	88b9      	ldrh	r1, [r7, #4]
 8001734:	88f8      	ldrh	r0, [r7, #6]
 8001736:	2300      	movs	r3, #0
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <Display_SystemVoltage+0x98>)
 800174a:	f002 fa41 	bl	8003bd0 <LCD9488_GUI_Draw_StringColor>

	sprintf(str, "Tmp = %+2dC", (int)ADC_State.CPU_Temperature);
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <Display_SystemVoltage+0x90>)
 8001750:	f103 0410 	add.w	r4, r3, #16
 8001754:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001758:	4618      	mov	r0, r3
 800175a:	4621      	mov	r1, r4
 800175c:	f7ff f984 	bl	8000a68 <__aeabi_d2iz>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	490f      	ldr	r1, [pc, #60]	; (80017a4 <Display_SystemVoltage+0x9c>)
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <Display_SystemVoltage+0x98>)
 8001768:	f010 fba2 	bl	8011eb0 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y + 10, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	330a      	adds	r3, #10
 8001770:	b299      	uxth	r1, r3
 8001772:	88f8      	ldrh	r0, [r7, #6]
 8001774:	2300      	movs	r3, #0
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <Display_SystemVoltage+0x98>)
 8001788:	f002 fa22 	bl	8003bd0 <LCD9488_GUI_Draw_StringColor>

}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	08018324 	.word	0x08018324
 8001798:	20003a48 	.word	0x20003a48
 800179c:	080155f8 	.word	0x080155f8
 80017a0:	20003ab0 	.word	0x20003ab0
 80017a4:	08015608 	.word	0x08015608

080017a8 <Display_MotorDirection>:
//======================================================================================
void Display_MotorDirection(uint16_t pos_x, uint16_t pos_y, TMotorDirection AMotorDirection) // Показать направление вращения мотора
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af04      	add	r7, sp, #16
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
 80017b2:	460b      	mov	r3, r1
 80017b4:	80bb      	strh	r3, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	70fb      	strb	r3, [r7, #3]
	unsigned char* Font = (unsigned char*)Arial28x28;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <Display_MotorDirection+0x88>)
 80017bc:	60fb      	str	r3, [r7, #12]
	switch (AMotorDirection)
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d013      	beq.n	80017ec <Display_MotorDirection+0x44>
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d020      	beq.n	800180a <Display_MotorDirection+0x62>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d000      	beq.n	80017ce <Display_MotorDirection+0x26>
		case MD_REV:
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
			break;
	}

}
 80017cc:	e02c      	b.n	8001828 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, " STOP  ", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 80017ce:	88b9      	ldrh	r1, [r7, #4]
 80017d0:	88f8      	ldrh	r0, [r7, #6]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	f647 537c 	movw	r3, #32124	; 0x7d7c
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <Display_MotorDirection+0x8c>)
 80017e6:	f002 f9f3 	bl	8003bd0 <LCD9488_GUI_Draw_StringColor>
			break;
 80017ea:	e01d      	b.n	8001828 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "FORWARD", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 80017ec:	88b9      	ldrh	r1, [r7, #4]
 80017ee:	88f8      	ldrh	r0, [r7, #6]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	f647 537c 	movw	r3, #32124	; 0x7d7c
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <Display_MotorDirection+0x90>)
 8001804:	f002 f9e4 	bl	8003bd0 <LCD9488_GUI_Draw_StringColor>
			break;
 8001808:	e00e      	b.n	8001828 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 800180a:	88b9      	ldrh	r1, [r7, #4]
 800180c:	88f8      	ldrh	r0, [r7, #6]
 800180e:	2300      	movs	r3, #0
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <Display_MotorDirection+0x94>)
 8001822:	f002 f9d5 	bl	8003bd0 <LCD9488_GUI_Draw_StringColor>
			break;
 8001826:	bf00      	nop
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	080158bc 	.word	0x080158bc
 8001834:	08015614 	.word	0x08015614
 8001838:	0801561c 	.word	0x0801561c
 800183c:	08015624 	.word	0x08015624

08001840 <Encoder_Init>:

#include <Encoder.h>

//=======================================================================================
void  Encoder_Init(void)																	// Настройка GPIO портов для энкодера
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <Encoder_Init+0xfc>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a3c      	ldr	r2, [pc, #240]	; (800193c <Encoder_Init+0xfc>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b3a      	ldr	r3, [pc, #232]	; (800193c <Encoder_Init+0xfc>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <Encoder_Init+0xfc>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a36      	ldr	r2, [pc, #216]	; (800193c <Encoder_Init+0xfc>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <Encoder_Init+0xfc>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <Encoder_Init+0xfc>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a30      	ldr	r2, [pc, #192]	; (800193c <Encoder_Init+0xfc>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <Encoder_Init+0xfc>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <Encoder_Init+0xfc>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a2a      	ldr	r2, [pc, #168]	; (800193c <Encoder_Init+0xfc>)
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	61d3      	str	r3, [r2, #28]
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <Encoder_Init+0xfc>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <Encoder_Init+0xfc>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a24      	ldr	r2, [pc, #144]	; (800193c <Encoder_Init+0xfc>)
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <Encoder_Init+0xfc>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <Encoder_Init+0xfc>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <Encoder_Init+0xfc>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <Encoder_Init+0xfc>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]


	GPIO_InitTypeDef GPIO_InitStruct;

	// ENC_BTN
	GPIO_InitStruct.Pin 		= ENC_BTN_Pin;
 80018d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <Encoder_Init+0x100>)
 80018de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4815      	ldr	r0, [pc, #84]	; (8001944 <Encoder_Init+0x104>)
 80018f0:	f003 fafc 	bl	8004eec <HAL_GPIO_Init>

	// ENC_A
    GPIO_InitStruct.Pin 		= ENC_A_Pin;
 80018f4:	2308      	movs	r3, #8
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate 	= GPIO_AF2_TIM3;
 8001904:	2302      	movs	r3, #2
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	480e      	ldr	r0, [pc, #56]	; (8001948 <Encoder_Init+0x108>)
 8001910:	f003 faec 	bl	8004eec <HAL_GPIO_Init>

	// ENC_B
    GPIO_InitStruct.Pin 		= ENC_B_Pin;
 8001914:	2310      	movs	r3, #16
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001924:	2302      	movs	r3, #2
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <Encoder_Init+0x108>)
 8001930:	f003 fadc 	bl	8004eec <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	10210000 	.word	0x10210000
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000

0800194c <MX_FREERTOS_Init>:
extern void MX_USB_DEVICE_Init(void);
void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

//======================================================================================
void MX_FREERTOS_Init(void)																// FreeRTOS initialization
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  // Create the mutex(es)
  myMutex_I2C1Handle 		= osMutexNew(&myMutex_I2C1_attributes);						// creation of myMutex_I2C1
 8001950:	481f      	ldr	r0, [pc, #124]	; (80019d0 <MX_FREERTOS_Init+0x84>)
 8001952:	f00c fa6f 	bl	800de34 <osMutexNew>
 8001956:	4602      	mov	r2, r0
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_FREERTOS_Init+0x88>)
 800195a:	601a      	str	r2, [r3, #0]

  // Create the queue(s)
  myQueue_UART_RxHandle 	= osMessageQueueNew (32, sizeof(uint8_t), &myQueue_UART_Rx_attributes);	// creation of myQueue_UART_Rx
 800195c:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <MX_FREERTOS_Init+0x8c>)
 800195e:	2101      	movs	r1, #1
 8001960:	2020      	movs	r0, #32
 8001962:	f00c fb01 	bl	800df68 <osMessageQueueNew>
 8001966:	4602      	mov	r2, r0
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_FREERTOS_Init+0x90>)
 800196a:	601a      	str	r2, [r3, #0]

  // Create the thread(s)
  defaultTaskHandle 		= osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <MX_FREERTOS_Init+0x94>)
 800196e:	2100      	movs	r1, #0
 8001970:	481c      	ldr	r0, [pc, #112]	; (80019e4 <MX_FREERTOS_Init+0x98>)
 8001972:	f00c f987 	bl	800dc84 <osThreadNew>
 8001976:	4602      	mov	r2, r0
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_FREERTOS_Init+0x9c>)
 800197a:	601a      	str	r2, [r3, #0]
  myTask_IMUHandle 			= osThreadNew(StartTask_IMU, NULL, &myTask_IMU_attributes);
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <MX_FREERTOS_Init+0xa0>)
 800197e:	2100      	movs	r1, #0
 8001980:	481b      	ldr	r0, [pc, #108]	; (80019f0 <MX_FREERTOS_Init+0xa4>)
 8001982:	f00c f97f 	bl	800dc84 <osThreadNew>
 8001986:	4602      	mov	r2, r0
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_FREERTOS_Init+0xa8>)
 800198a:	601a      	str	r2, [r3, #0]
  myTask_LCDHandle 			= osThreadNew(StartTask_LCD, NULL, &myTask_LCD_attributes);
 800198c:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <MX_FREERTOS_Init+0xac>)
 800198e:	2100      	movs	r1, #0
 8001990:	481a      	ldr	r0, [pc, #104]	; (80019fc <MX_FREERTOS_Init+0xb0>)
 8001992:	f00c f977 	bl	800dc84 <osThreadNew>
 8001996:	4602      	mov	r2, r0
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_FREERTOS_Init+0xb4>)
 800199a:	601a      	str	r2, [r3, #0]
  myTask_ADCHandle 			= osThreadNew(StartTask_ADC, NULL, &myTask_ADC_attributes);
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <MX_FREERTOS_Init+0xb8>)
 800199e:	2100      	movs	r1, #0
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <MX_FREERTOS_Init+0xbc>)
 80019a2:	f00c f96f 	bl	800dc84 <osThreadNew>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_FREERTOS_Init+0xc0>)
 80019aa:	601a      	str	r2, [r3, #0]
  myTask_ScanCTRLHandle 	= osThreadNew(StartTask_ScanControls, NULL, &myTask_ScanCTRL_attributes);
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <MX_FREERTOS_Init+0xc4>)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_FREERTOS_Init+0xc8>)
 80019b2:	f00c f967 	bl	800dc84 <osThreadNew>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_FREERTOS_Init+0xcc>)
 80019ba:	601a      	str	r2, [r3, #0]
  myTask_SetStateHandle 	= osThreadNew(StartTask_SetState, NULL, &myTask_SetState_attributes);
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <MX_FREERTOS_Init+0xd0>)
 80019be:	2100      	movs	r1, #0
 80019c0:	4817      	ldr	r0, [pc, #92]	; (8001a20 <MX_FREERTOS_Init+0xd4>)
 80019c2:	f00c f95f 	bl	800dc84 <osThreadNew>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_FREERTOS_Init+0xd8>)
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	08015888 	.word	0x08015888
 80019d4:	20003b44 	.word	0x20003b44
 80019d8:	08015870 	.word	0x08015870
 80019dc:	20003acc 	.word	0x20003acc
 80019e0:	08015798 	.word	0x08015798
 80019e4:	08001a29 	.word	0x08001a29
 80019e8:	20003ac4 	.word	0x20003ac4
 80019ec:	080157bc 	.word	0x080157bc
 80019f0:	08001a41 	.word	0x08001a41
 80019f4:	20003ac8 	.word	0x20003ac8
 80019f8:	080157e0 	.word	0x080157e0
 80019fc:	08001a51 	.word	0x08001a51
 8001a00:	20003b50 	.word	0x20003b50
 8001a04:	08015804 	.word	0x08015804
 8001a08:	08001a91 	.word	0x08001a91
 8001a0c:	20003b48 	.word	0x20003b48
 8001a10:	08015828 	.word	0x08015828
 8001a14:	08001aa5 	.word	0x08001aa5
 8001a18:	20003b20 	.word	0x20003b20
 8001a1c:	0801584c 	.word	0x0801584c
 8001a20:	08001ae9 	.word	0x08001ae9
 8001a24:	20003b4c 	.word	0x20003b4c

08001a28 <StartDefaultTask>:
//======================================================================================
void StartDefaultTask(void *argument)													// implementing the defaultTask thread.
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  MX_USB_DEVICE_Init();																	// init code for USB_DEVICE
 8001a30:	f00e ff04 	bl	801083c <MX_USB_DEVICE_Init>

  BUZZER_BeepTIM();
 8001a34:	f7ff fd76 	bl	8001524 <BUZZER_BeepTIM>

  for(;;)
  {
	//LED_LIGHT_INV;
	// LED_GREEN_INV;
    osDelay(100);
 8001a38:	2064      	movs	r0, #100	; 0x64
 8001a3a:	f00c f9cd 	bl	800ddd8 <osDelay>
 8001a3e:	e7fb      	b.n	8001a38 <StartDefaultTask+0x10>

08001a40 <StartTask_IMU>:

  }
}
//======================================================================================
void StartTask_IMU(void *argument)														// implementing the myTask_IMU thread.
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f00c f9c5 	bl	800ddd8 <osDelay>
 8001a4e:	e7fb      	b.n	8001a48 <StartTask_IMU+0x8>

08001a50 <StartTask_LCD>:
  }
}
//======================================================================================
void StartTask_LCD(void *argument)														// implementing the myTask_LCD thread.
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	Display_Test(0,0);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fe2a 	bl	80016b4 <Display_Test>
	Display_MotorDirection(250, 50, MotorDirection);									// Показать направление вращения мотора
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <StartTask_LCD+0x38>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	2132      	movs	r1, #50	; 0x32
 8001a68:	20fa      	movs	r0, #250	; 0xfa
 8001a6a:	f7ff fe9d 	bl	80017a8 <Display_MotorDirection>

	Display_SystemVoltage(100, 5);
 8001a6e:	2105      	movs	r1, #5
 8001a70:	2064      	movs	r0, #100	; 0x64
 8001a72:	f7ff fe49 	bl	8001708 <Display_SystemVoltage>

	LED_GREEN_INV;
 8001a76:	2110      	movs	r1, #16
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <StartTask_LCD+0x3c>)
 8001a7a:	f003 fbf4 	bl	8005266 <HAL_GPIO_TogglePin>

    osDelay(100);
 8001a7e:	2064      	movs	r0, #100	; 0x64
 8001a80:	f00c f9aa 	bl	800ddd8 <osDelay>
	Display_Test(0,0);
 8001a84:	e7e8      	b.n	8001a58 <StartTask_LCD+0x8>
 8001a86:	bf00      	nop
 8001a88:	20003a40 	.word	0x20003a40
 8001a8c:	40020800 	.word	0x40020800

08001a90 <StartTask_ADC>:
  }
}
//======================================================================================
void StartTask_ADC(void *argument)														// Поток для сканирования АЦП (Напряжения питания и мотора, Тока питания и мотора, положения регулятора скорости)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 8001a98:	f7ff fb0e 	bl	80010b8 <ADC_ScanState>
    osDelay(50);
 8001a9c:	2032      	movs	r0, #50	; 0x32
 8001a9e:	f00c f99b 	bl	800ddd8 <osDelay>
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 8001aa2:	e7f9      	b.n	8001a98 <StartTask_ADC+0x8>

08001aa4 <StartTask_ScanControls>:
  }
}
//======================================================================================
void StartTask_ScanControls(void *argument)												// implementing the myTask_ScanCTRL thread.
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 8001aac:	f001 f8b2 	bl	8002c14 <Motor_Scan_DirectionState>


	// Мигаем подсветкой согласно датчику вращения todo: временно
	if (HAL_GPIO_ReadPin(SNS_HALL_IN_GPIO_Port,  SNS_HALL_IN_Pin) == GPIO_PIN_RESET)
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	480a      	ldr	r0, [pc, #40]	; (8001adc <StartTask_ScanControls+0x38>)
 8001ab4:	f003 fba8 	bl	8005208 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <StartTask_ScanControls+0x26>
		LED_LIGHT_RESET;
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <StartTask_ScanControls+0x3c>)
 8001ac4:	f003 fbb7 	bl	8005236 <HAL_GPIO_WritePin>
 8001ac8:	e004      	b.n	8001ad4 <StartTask_ScanControls+0x30>
	else
		LED_LIGHT_SET;
 8001aca:	2201      	movs	r2, #1
 8001acc:	2120      	movs	r1, #32
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <StartTask_ScanControls+0x3c>)
 8001ad0:	f003 fbb1 	bl	8005236 <HAL_GPIO_WritePin>



    osDelay(10);
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f00c f97f 	bl	800ddd8 <osDelay>
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 8001ada:	e7e7      	b.n	8001aac <StartTask_ScanControls+0x8>
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <StartTask_SetState>:
  }
}
//======================================================================================
void StartTask_SetState(void *argument)													// implementing the myTask_SetState thread.
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <StartTask_SetState+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 f8df 	bl	8002cb8 <Motor_Set_DirectionState>

	//DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)2.55));				// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V]
	DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)1.58));					// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V] (1.58 - коэф чтобы получить на выходе 0..5V после ЦАП+ОУ)
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <StartTask_SetState+0x5c>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc88 	bl	8000414 <__aeabi_ui2d>
 8001b04:	a30c      	add	r3, pc, #48	; (adr r3, 8001b38 <StartTask_SetState+0x50>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fcfd 	bl	8000508 <__aeabi_dmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460c      	mov	r4, r1
 8001b12:	4618      	mov	r0, r3
 8001b14:	4621      	mov	r1, r4
 8001b16:	f7fe ffcf 	bl	8000ab8 <__aeabi_d2uiz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fd88 	bl	8001634 <DAC_SetValue>


	FAN_Set_Speed(Speed_value_percent);													// Установить скорость мотора вентилятора охлаждения (ШИМ)
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <StartTask_SetState+0x5c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 f90f 	bl	8002d4c <FAN_Set_Speed>



    osDelay(20);
 8001b2e:	2014      	movs	r0, #20
 8001b30:	f00c f952 	bl	800ddd8 <osDelay>
	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 8001b34:	e7dc      	b.n	8001af0 <StartTask_SetState+0x8>
 8001b36:	bf00      	nop
 8001b38:	147ae148 	.word	0x147ae148
 8001b3c:	3ff947ae 	.word	0x3ff947ae
 8001b40:	20003a40 	.word	0x20003a40
 8001b44:	200039d0 	.word	0x200039d0

08001b48 <MX_GPIO_Init>:
//         EXTI
//     PA8 ------> RCC_MCO

//======================================================================================
void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	61d3      	str	r3, [r2, #28]
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	61d3      	str	r3, [r2, #28]
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a39      	ldr	r2, [pc, #228]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a33      	ldr	r2, [pc, #204]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	21e0      	movs	r1, #224	; 0xe0
 8001bf2:	482e      	ldr	r0, [pc, #184]	; (8001cac <MX_GPIO_Init+0x164>)
 8001bf4:	f003 fb1f 	bl	8005236 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	211f      	movs	r1, #31
 8001bfc:	482c      	ldr	r0, [pc, #176]	; (8001cb0 <MX_GPIO_Init+0x168>)
 8001bfe:	f003 fb1a 	bl	8005236 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP_AIR_1W_Pin|TEMP_MOTOR_1W_Pin|TEMP_DRIVER_1W_Pin|SPI1_SD_CS_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f241 0107 	movw	r1, #4103	; 0x1007
 8001c08:	482a      	ldr	r0, [pc, #168]	; (8001cb4 <MX_GPIO_Init+0x16c>)
 8001c0a:	f003 fb14 	bl	8005236 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin;
 8001c0e:	23e0      	movs	r3, #224	; 0xe0
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	4821      	ldr	r0, [pc, #132]	; (8001cac <MX_GPIO_Init+0x164>)
 8001c26:	f003 f961 	bl	8004eec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 8001c2a:	231f      	movs	r3, #31
 8001c2c:	61fb      	str	r3, [r7, #28]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481b      	ldr	r0, [pc, #108]	; (8001cb0 <MX_GPIO_Init+0x168>)
 8001c42:	f003 f953 	bl	8004eec <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = TEMP_AIR_1W_Pin|TEMP_MOTOR_1W_Pin|TEMP_DRIVER_1W_Pin|SPI1_SD_CS_Pin;
 8001c46:	f241 0307 	movw	r3, #4103	; 0x1007
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4815      	ldr	r0, [pc, #84]	; (8001cb4 <MX_GPIO_Init+0x16c>)
 8001c60:	f003 f944 	bl	8004eec <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = INT_IMU_Pin;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MX_GPIO_Init+0x170>)
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4811      	ldr	r0, [pc, #68]	; (8001cbc <MX_GPIO_Init+0x174>)
 8001c78:	f003 f938 	bl	8004eec <HAL_GPIO_Init>

  // Выход тактовой частоты MCO
  GPIO_InitStruct.Pin = MCO_Pin;
 8001c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <MX_GPIO_Init+0x178>)
 8001c9a:	f003 f927 	bl	8004eec <HAL_GPIO_Init>

}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	10110000 	.word	0x10110000
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

//======================================================================================
void MX_I2C1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <MX_I2C1_Init+0x58>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cd0:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <MX_I2C1_Init+0x5c>)
 8001cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_I2C1_Init+0x54>)
 8001d02:	f003 fac9 	bl	8005298 <HAL_I2C_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <MX_I2C1_Init+0x4e>
  {
    Error_Handler(7);
 8001d0c:	2007      	movs	r0, #7
 8001d0e:	f000 ff49 	bl	8002ba4 <Error_Handler>
  }

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20003b54 	.word	0x20003b54
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	00061a80 	.word	0x00061a80

08001d24 <HAL_I2C_MspInit>:
//======================================================================================
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_I2C_MspInit+0x7c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d128      	bne.n	8001d98 <HAL_I2C_MspInit+0x74>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_I2C_MspInit+0x80>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_I2C_MspInit+0x80>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_I2C_MspInit+0x80>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d64:	2312      	movs	r3, #18
 8001d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d70:	2304      	movs	r3, #4
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480b      	ldr	r0, [pc, #44]	; (8001da8 <HAL_I2C_MspInit+0x84>)
 8001d7c:	f003 f8b6 	bl	8004eec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_I2C_MspInit+0x80>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_I2C_MspInit+0x80>)
 8001d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d8a:	6253      	str	r3, [r2, #36]	; 0x24
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_I2C_MspInit+0x80>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40005400 	.word	0x40005400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020400 	.word	0x40020400

08001dac <Keys_Init>:
 */
#include "keys.h"

//=======================================================================================
void  Keys_Init(void)																	// Настройка GPIO портов для кнопок
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b4b      	ldr	r3, [pc, #300]	; (8001ee0 <Keys_Init+0x134>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a4a      	ldr	r2, [pc, #296]	; (8001ee0 <Keys_Init+0x134>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <Keys_Init+0x134>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <Keys_Init+0x134>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a44      	ldr	r2, [pc, #272]	; (8001ee0 <Keys_Init+0x134>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	61d3      	str	r3, [r2, #28]
 8001dd6:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <Keys_Init+0x134>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <Keys_Init+0x134>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <Keys_Init+0x134>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <Keys_Init+0x134>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <Keys_Init+0x134>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a38      	ldr	r2, [pc, #224]	; (8001ee0 <Keys_Init+0x134>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <Keys_Init+0x134>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001e12:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <Keys_Init+0x134>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <Keys_Init+0x134>)
 8001e18:	f043 0310 	orr.w	r3, r3, #16
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <Keys_Init+0x134>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <Keys_Init+0x134>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <Keys_Init+0x134>)
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <Keys_Init+0x134>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;


	// BTN_START
	GPIO_InitStruct.Pin 		= BTN_START_Pin;
 8001e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <Keys_Init+0x138>)
 8001e4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4823      	ldr	r0, [pc, #140]	; (8001ee8 <Keys_Init+0x13c>)
 8001e5c:	f003 f846 	bl	8004eec <HAL_GPIO_Init>


	// BTN_STOP
	GPIO_InitStruct.Pin 		= BTN_STOP_Pin;
 8001e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <Keys_Init+0x138>)
 8001e68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_STOP_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	481b      	ldr	r0, [pc, #108]	; (8001ee8 <Keys_Init+0x13c>)
 8001e7a:	f003 f837 	bl	8004eec <HAL_GPIO_Init>

	// BTN_MOTOR
	GPIO_InitStruct.Pin 		= BTN_MOTOR_Pin;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <Keys_Init+0x138>)
 8001e86:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <Keys_Init+0x13c>)
 8001e98:	f003 f828 	bl	8004eec <HAL_GPIO_Init>

	// Вход переключателя МОТОР ВПЕРЕД
	GPIO_InitStruct.Pin 		= BTN_FWD_Pin;
 8001e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <Keys_Init+0x138>)
 8001ea4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_FWD_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <Keys_Init+0x13c>)
 8001eb6:	f003 f819 	bl	8004eec <HAL_GPIO_Init>

	// Вход переключателя МОТОР НАЗАД
	GPIO_InitStruct.Pin 		= BTN_BWD_Pin;
 8001eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ebe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <Keys_Init+0x138>)
 8001ec2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_BWD_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <Keys_Init+0x13c>)
 8001ed4:	f003 f80a 	bl	8004eec <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 8001ed8:	bf00      	nop
 8001eda:	3730      	adds	r7, #48	; 0x30
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	10210000 	.word	0x10210000
 8001ee8:	40020c00 	.word	0x40020c00

08001eec <MX_SPI1_Init>:

DMA_HandleTypeDef hdma_spi2_tx;

//======================================================================================
void MX_SPI1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001ef2:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <MX_SPI1_Init+0x6c>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f38:	220a      	movs	r2, #10
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f3c:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_SPI1_Init+0x68>)
 8001f3e:	f005 fc19 	bl	8007774 <HAL_SPI_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <MX_SPI1_Init+0x62>
  {
    Error_Handler(6);
 8001f48:	2006      	movs	r0, #6
 8001f4a:	f000 fe2b 	bl	8002ba4 <Error_Handler>
  }

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20003c00 	.word	0x20003c00
 8001f58:	40013000 	.word	0x40013000

08001f5c <MX_SPI2_Init>:
//======================================================================================
void MX_SPI2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f62:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <MX_SPI2_Init+0x6c>)
 8001f64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001fa8:	220a      	movs	r2, #10
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_SPI2_Init+0x68>)
 8001fae:	f005 fbe1 	bl	8007774 <HAL_SPI_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <MX_SPI2_Init+0x62>
  {
    Error_Handler(6);
 8001fb8:	2006      	movs	r0, #6
 8001fba:	f000 fdf3 	bl	8002ba4 <Error_Handler>
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20003ba8 	.word	0x20003ba8
 8001fc8:	40003800 	.word	0x40003800

08001fcc <HAL_SPI_MspInit>:
//======================================================================================
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a42      	ldr	r2, [pc, #264]	; (80020f4 <HAL_SPI_MspInit+0x128>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d128      	bne.n	8002040 <HAL_SPI_MspInit+0x74>
  {
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fee:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a41      	ldr	r2, [pc, #260]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_SCK_Pin|SPI1_SD_MISO_Pin|SPI1_SD_MOSI_Pin;
 800201e:	23e0      	movs	r3, #224	; 0xe0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800202e:	2305      	movs	r3, #5
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4830      	ldr	r0, [pc, #192]	; (80020fc <HAL_SPI_MspInit+0x130>)
 800203a:	f002 ff57 	bl	8004eec <HAL_GPIO_Init>
      Error_Handler(6);
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
  }
}
 800203e:	e055      	b.n	80020ec <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2e      	ldr	r2, [pc, #184]	; (8002100 <HAL_SPI_MspInit+0x134>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d150      	bne.n	80020ec <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6253      	str	r3, [r2, #36]	; 0x24
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_SPI_MspInit+0x12c>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800207a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800208c:	2305      	movs	r3, #5
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	481b      	ldr	r0, [pc, #108]	; (8002104 <HAL_SPI_MspInit+0x138>)
 8002098:	f002 ff28 	bl	8004eec <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 800209e:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_SPI_MspInit+0x140>)
 80020a0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020a4:	2210      	movs	r2, #16
 80020a6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80020ce:	480e      	ldr	r0, [pc, #56]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020d0:	f002 fda8 	bl	8004c24 <HAL_DMA_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_SPI_MspInit+0x114>
      Error_Handler(6);
 80020da:	2006      	movs	r0, #6
 80020dc:	f000 fd62 	bl	8002ba4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020e4:	649a      	str	r2, [r3, #72]	; 0x48
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_SPI_MspInit+0x13c>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6253      	str	r3, [r2, #36]	; 0x24
}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	; 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40013000 	.word	0x40013000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40003800 	.word	0x40003800
 8002104:	40020400 	.word	0x40020400
 8002108:	20003c58 	.word	0x20003c58
 800210c:	40026058 	.word	0x40026058

08002110 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim11;

//======================================================================================
void MX_TIM3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f00f f80f 	bl	8011142 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <MX_TIM3_Init+0xa4>)
 800212e:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <MX_TIM3_Init+0xa8>)
 8002130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <MX_TIM3_Init+0xa4>)
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <MX_TIM3_Init+0xa4>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <MX_TIM3_Init+0xa4>)
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_TIM3_Init+0xa4>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_TIM3_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002150:	2301      	movs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002158:	2301      	movs	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002168:	2301      	movs	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4619      	mov	r1, r3
 800217a:	480e      	ldr	r0, [pc, #56]	; (80021b4 <MX_TIM3_Init+0xa4>)
 800217c:	f005 ff68 	bl	8008050 <HAL_TIM_Encoder_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <MX_TIM3_Init+0x7c>
  {
    Error_Handler(4);
 8002186:	2004      	movs	r0, #4
 8002188:	f000 fd0c 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	4619      	mov	r1, r3
 8002198:	4806      	ldr	r0, [pc, #24]	; (80021b4 <MX_TIM3_Init+0xa4>)
 800219a:	f006 fce5 	bl	8008b68 <HAL_TIMEx_MasterConfigSynchronization>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler(4);
 80021a4:	2004      	movs	r0, #4
 80021a6:	f000 fcfd 	bl	8002ba4 <Error_Handler>
  }

}
 80021aa:	bf00      	nop
 80021ac:	3730      	adds	r7, #48	; 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20003cdc 	.word	0x20003cdc
 80021b8:	40000400 	.word	0x40000400

080021bc <MX_TIM4_Init>:
//======================================================================================
void MX_TIM4_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	f107 0318 	add.w	r3, r7, #24
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <MX_TIM4_Init+0xec>)
 80021e8:	4a30      	ldr	r2, [pc, #192]	; (80022ac <MX_TIM4_Init+0xf0>)
 80021ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021ec:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <MX_TIM4_Init+0xec>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <MX_TIM4_Init+0xec>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <MX_TIM4_Init+0xec>)
 80021fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <MX_TIM4_Init+0xec>)
 8002202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <MX_TIM4_Init+0xec>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220e:	4826      	ldr	r0, [pc, #152]	; (80022a8 <MX_TIM4_Init+0xec>)
 8002210:	f005 fd40 	bl	8007c94 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <MX_TIM4_Init+0x64>
  {
    Error_Handler(4);
 800221a:	2004      	movs	r0, #4
 800221c:	f000 fcc2 	bl	8002ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002224:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002226:	f107 0318 	add.w	r3, r7, #24
 800222a:	4619      	mov	r1, r3
 800222c:	481e      	ldr	r0, [pc, #120]	; (80022a8 <MX_TIM4_Init+0xec>)
 800222e:	f006 f99f 	bl	8008570 <HAL_TIM_ConfigClockSource>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <MX_TIM4_Init+0x82>
  {
    Error_Handler(4);
 8002238:	2004      	movs	r0, #4
 800223a:	f000 fcb3 	bl	8002ba4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800223e:	481a      	ldr	r0, [pc, #104]	; (80022a8 <MX_TIM4_Init+0xec>)
 8002240:	f005 fde0 	bl	8007e04 <HAL_TIM_OC_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <MX_TIM4_Init+0x94>
  {
    Error_Handler(4);
 800224a:	2004      	movs	r0, #4
 800224c:	f000 fcaa 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4619      	mov	r1, r3
 800225e:	4812      	ldr	r0, [pc, #72]	; (80022a8 <MX_TIM4_Init+0xec>)
 8002260:	f006 fc82 	bl	8008b68 <HAL_TIMEx_MasterConfigSynchronization>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <MX_TIM4_Init+0xb4>
  {
    Error_Handler(4);
 800226a:	2004      	movs	r0, #4
 800226c:	f000 fc9a 	bl	8002ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002270:	2310      	movs	r3, #16
 8002272:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002280:	463b      	mov	r3, r7
 8002282:	2200      	movs	r2, #0
 8002284:	4619      	mov	r1, r3
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <MX_TIM4_Init+0xec>)
 8002288:	f006 f85c 	bl	8008344 <HAL_TIM_OC_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <MX_TIM4_Init+0xdc>
  {
    Error_Handler(4);
 8002292:	2004      	movs	r0, #4
 8002294:	f000 fc86 	bl	8002ba4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <MX_TIM4_Init+0xec>)
 800229a:	f000 f8e5 	bl	8002468 <HAL_TIM_MspPostInit>

}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20003c9c 	.word	0x20003c9c
 80022ac:	40000800 	.word	0x40000800

080022b0 <MX_TIM6_Init>:
//======================================================================================
void MX_TIM6_Init(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler(4);
//  }
//
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <MX_TIM11_Init>:
//======================================================================================
void MX_TIM11_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d0:	463b      	mov	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]

  htim11.Instance = TIM11;
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <MX_TIM11_Init+0xc0>)
 80022de:	4a28      	ldr	r2, [pc, #160]	; (8002380 <MX_TIM11_Init+0xc4>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 32000;  														// Делим с тактовой процессора 32000000/32000 = 1000Гц на вход счетчика (1мс на 1 тик)
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <MX_TIM11_Init+0xc0>)
 80022e4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80022e8:	605a      	str	r2, [r3, #4]
  htim11.Init.Period = 100;																// 100 тиков полный цикл = 100мс = 10Гц период ШИМ. В TIM11->CCR1 записывается сравнение 0..100 - получаем нужную скважность
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <MX_TIM11_Init+0xc0>)
 80022ec:	2264      	movs	r2, #100	; 0x64
 80022ee:	60da      	str	r2, [r3, #12]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <MX_TIM11_Init+0xc0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <MX_TIM11_Init+0xc0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <MX_TIM11_Init+0xc0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002302:	481e      	ldr	r0, [pc, #120]	; (800237c <MX_TIM11_Init+0xc0>)
 8002304:	f005 fcc6 	bl	8007c94 <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <MX_TIM11_Init+0x58>
  {
    Error_Handler(4);
 800230e:	2004      	movs	r0, #4
 8002310:	f000 fc48 	bl	8002ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4619      	mov	r1, r3
 8002320:	4816      	ldr	r0, [pc, #88]	; (800237c <MX_TIM11_Init+0xc0>)
 8002322:	f006 f925 	bl	8008570 <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <MX_TIM11_Init+0x76>
  {
    Error_Handler(4);
 800232c:	2004      	movs	r0, #4
 800232e:	f000 fc39 	bl	8002ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002332:	4812      	ldr	r0, [pc, #72]	; (800237c <MX_TIM11_Init+0xc0>)
 8002334:	f005 fdae 	bl	8007e94 <HAL_TIM_PWM_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <MX_TIM11_Init+0x88>
  {
    Error_Handler(4);
 800233e:	2004      	movs	r0, #4
 8002340:	f000 fc30 	bl	8002ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002344:	2360      	movs	r3, #96	; 0x60
 8002346:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002354:	463b      	mov	r3, r7
 8002356:	2200      	movs	r2, #0
 8002358:	4619      	mov	r1, r3
 800235a:	4808      	ldr	r0, [pc, #32]	; (800237c <MX_TIM11_Init+0xc0>)
 800235c:	f006 f84a 	bl	80083f4 <HAL_TIM_PWM_ConfigChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <MX_TIM11_Init+0xb0>
  {
    Error_Handler(4);
 8002366:	2004      	movs	r0, #4
 8002368:	f000 fc1c 	bl	8002ba4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <MX_TIM11_Init+0xc0>)
 800236e:	f000 f87b 	bl	8002468 <HAL_TIM_MspPostInit>

}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20003d1c 	.word	0x20003d1c
 8002380:	40011000 	.word	0x40011000

08002384 <HAL_TIM_Encoder_MspInit>:
//======================================================================================
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

//  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_encoderHandle->Instance==TIM3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x44>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d113      	bne.n	80023be <HAL_TIM_Encoder_MspInit+0x3a>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_TIM_Encoder_MspInit+0x48>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <HAL_TIM_Encoder_MspInit+0x48>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6253      	str	r3, [r2, #36]	; 0x24
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_TIM_Encoder_MspInit+0x48>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
//    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	201d      	movs	r0, #29
 80023b4:	f002 fb21 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023b8:	201d      	movs	r0, #29
 80023ba:	f002 fb3a 	bl	8004a32 <HAL_NVIC_EnableIRQ>
  }
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40023800 	.word	0x40023800

080023d0 <HAL_TIM_Base_MspInit>:
//======================================================================================
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_TIM_Base_MspInit+0x88>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10b      	bne.n	80023fa <HAL_TIM_Base_MspInit+0x2a>
  {
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6253      	str	r3, [r2, #36]	; 0x24
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
  }
  if(tim_baseHandle->Instance==TIM6)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_TIM_Base_MspInit+0x90>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d114      	bne.n	800242e <HAL_TIM_Base_MspInit+0x5e>
  {
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	6253      	str	r3, [r2, #36]	; 0x24
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	202b      	movs	r0, #43	; 0x2b
 8002422:	f002 faea 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002426:	202b      	movs	r0, #43	; 0x2b
 8002428:	f002 fb03 	bl	8004a32 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM11)
  {
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
  }
}
 800242c:	e010      	b.n	8002450 <HAL_TIM_Base_MspInit+0x80>
  else if(tim_baseHandle->Instance==TIM11)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <HAL_TIM_Base_MspInit+0x94>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10b      	bne.n	8002450 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 800243e:	f043 0310 	orr.w	r3, r3, #16
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_TIM_Base_MspInit+0x8c>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	bf00      	nop
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40000800 	.word	0x40000800
 800245c:	40023800 	.word	0x40023800
 8002460:	40001000 	.word	0x40001000
 8002464:	40011000 	.word	0x40011000

08002468 <HAL_TIM_MspPostInit>:
//======================================================================================
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_TIM_MspPostInit+0xa8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11c      	bne.n	80024c4 <HAL_TIM_MspPostInit+0x5c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_TIM_MspPostInit+0xac>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_TIM_MspPostInit+0xac>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	61d3      	str	r3, [r2, #28]
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_TIM_MspPostInit+0xac>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024b2:	2302      	movs	r3, #2
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4816      	ldr	r0, [pc, #88]	; (8002518 <HAL_TIM_MspPostInit+0xb0>)
 80024be:	f002 fd15 	bl	8004eec <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
  }

}
 80024c2:	e020      	b.n	8002506 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM11)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_TIM_MspPostInit+0xb4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11b      	bne.n	8002506 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_TIM_MspPostInit+0xac>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a10      	ldr	r2, [pc, #64]	; (8002514 <HAL_TIM_MspPostInit+0xac>)
 80024d4:	f043 0310 	orr.w	r3, r3, #16
 80024d8:	61d3      	str	r3, [r2, #28]
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_TIM_MspPostInit+0xac>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_COOLING_Pin;
 80024e6:	2302      	movs	r3, #2
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80024f6:	2303      	movs	r3, #3
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <HAL_TIM_MspPostInit+0xb8>)
 8002502:	f002 fcf3 	bl	8004eec <HAL_GPIO_Init>
}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	; 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40000800 	.word	0x40000800
 8002514:	40023800 	.word	0x40023800
 8002518:	40020400 	.word	0x40020400
 800251c:	40011000 	.word	0x40011000
 8002520:	40021000 	.word	0x40021000

08002524 <__io_putchar>:
/**
  * @brief	Переопределение функции вывода симвода для того чтобы printf из стандартной C библиотеки выводил данные в виртуальный COM-порт через USART2
  * 		Retargets the C library printf function to the USART.
  */
PUTCHAR_PROTOTYPE
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USART implementation of fputc  */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);		// вывод для отладки в виртуальный порт ПК		[115200bps 8N1]
 800252c:	1d39      	adds	r1, r7, #4
 800252e:	2364      	movs	r3, #100	; 0x64
 8002530:	2201      	movs	r2, #1
 8002532:	4804      	ldr	r0, [pc, #16]	; (8002544 <__io_putchar+0x20>)
 8002534:	f006 fbc3 	bl	8008cbe <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 100);		// вывод для ПК									[115200bps 8N1]
//    huart2.Instance->DR = (uint8_t *)ch;
  return ch;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20003e9c 	.word	0x20003e9c

08002548 <MX_USART1_UART_Init>:
//=======================================================================================

//======================================================================================
void MX_USART1_UART_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <MX_USART1_UART_Init+0x50>)
 8002550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 8002554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 800256e:	220c      	movs	r2, #12
 8002570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_USART1_UART_Init+0x4c>)
 8002580:	f006 fb50 	bl	8008c24 <HAL_UART_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler(5);
 800258a:	2005      	movs	r0, #5
 800258c:	f000 fb0a 	bl	8002ba4 <Error_Handler>
  }

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20003e1c 	.word	0x20003e1c
 8002598:	40013800 	.word	0x40013800

0800259c <MX_USART2_UART_Init>:
//======================================================================================
void MX_USART2_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <MX_USART2_UART_Init+0x50>)
 80025a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_USART2_UART_Init+0x4c>)
 80025d4:	f006 fb26 	bl	8008c24 <HAL_UART_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(5);
 80025de:	2005      	movs	r0, #5
 80025e0:	f000 fae0 	bl	8002ba4 <Error_Handler>
  }

}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20003e9c 	.word	0x20003e9c
 80025ec:	40004400 	.word	0x40004400

080025f0 <MX_USART3_UART_Init>:
//======================================================================================
void MX_USART3_UART_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_USART3_UART_Init+0x4c>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <MX_USART3_UART_Init+0x50>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <MX_USART3_UART_Init+0x4c>)
 80025fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_USART3_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_USART3_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_USART3_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_USART3_UART_Init+0x4c>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_USART3_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_USART3_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_USART3_UART_Init+0x4c>)
 8002628:	f006 fafc 	bl	8008c24 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler(5);
 8002632:	2005      	movs	r0, #5
 8002634:	f000 fab6 	bl	8002ba4 <Error_Handler>
  }

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20003d9c 	.word	0x20003d9c
 8002640:	40004800 	.word	0x40004800

08002644 <MX_UART4_Init>:
//======================================================================================
void MX_UART4_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_UART4_Init+0x4c>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <MX_UART4_Init+0x50>)
 800264c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <MX_UART4_Init+0x4c>)
 8002650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002654:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_UART4_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_UART4_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_UART4_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_UART4_Init+0x4c>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_UART4_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_UART4_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_UART4_Init+0x4c>)
 800267c:	f006 fad2 	bl	8008c24 <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <MX_UART4_Init+0x48>
  {
    Error_Handler(5);
 8002686:	2005      	movs	r0, #5
 8002688:	f000 fa8c 	bl	8002ba4 <Error_Handler>
  }

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20003e5c 	.word	0x20003e5c
 8002694:	40004c00 	.word	0x40004c00

08002698 <MX_UART5_Init>:
//======================================================================================
void MX_UART5_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_UART5_Init+0x4c>)
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <MX_UART5_Init+0x50>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_UART5_Init+0x4c>)
 80026d0:	f006 faa8 	bl	8008c24 <HAL_UART_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <MX_UART5_Init+0x48>
  {
    Error_Handler(5);
 80026da:	2005      	movs	r0, #5
 80026dc:	f000 fa62 	bl	8002ba4 <Error_Handler>
  }

}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20003ddc 	.word	0x20003ddc
 80026e8:	40005000 	.word	0x40005000

080026ec <HAL_UART_MspInit>:
//======================================================================================
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b092      	sub	sp, #72	; 0x48
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]

  if(uartHandle->Instance==USART1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a97      	ldr	r2, [pc, #604]	; (8002968 <HAL_UART_MspInit+0x27c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d131      	bne.n	8002772 <HAL_UART_MspInit+0x86>
  {
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800270e:	4b97      	ldr	r3, [pc, #604]	; (800296c <HAL_UART_MspInit+0x280>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a96      	ldr	r2, [pc, #600]	; (800296c <HAL_UART_MspInit+0x280>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b94      	ldr	r3, [pc, #592]	; (800296c <HAL_UART_MspInit+0x280>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b91      	ldr	r3, [pc, #580]	; (800296c <HAL_UART_MspInit+0x280>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a90      	ldr	r2, [pc, #576]	; (800296c <HAL_UART_MspInit+0x280>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b8e      	ldr	r3, [pc, #568]	; (800296c <HAL_UART_MspInit+0x280>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800273e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002750:	2307      	movs	r3, #7
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002758:	4619      	mov	r1, r3
 800275a:	4885      	ldr	r0, [pc, #532]	; (8002970 <HAL_UART_MspInit+0x284>)
 800275c:	f002 fbc6 	bl	8004eec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	2025      	movs	r0, #37	; 0x25
 8002766:	f002 f948 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800276a:	2025      	movs	r0, #37	; 0x25
 800276c:	f002 f961 	bl	8004a32 <HAL_NVIC_EnableIRQ>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  }
}
 8002770:	e0f5      	b.n	800295e <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7f      	ldr	r2, [pc, #508]	; (8002974 <HAL_UART_MspInit+0x288>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d130      	bne.n	80027de <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800277c:	4b7b      	ldr	r3, [pc, #492]	; (800296c <HAL_UART_MspInit+0x280>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	4a7a      	ldr	r2, [pc, #488]	; (800296c <HAL_UART_MspInit+0x280>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002786:	6253      	str	r3, [r2, #36]	; 0x24
 8002788:	4b78      	ldr	r3, [pc, #480]	; (800296c <HAL_UART_MspInit+0x280>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b75      	ldr	r3, [pc, #468]	; (800296c <HAL_UART_MspInit+0x280>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a74      	ldr	r2, [pc, #464]	; (800296c <HAL_UART_MspInit+0x280>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	61d3      	str	r3, [r2, #28]
 80027a0:	4b72      	ldr	r3, [pc, #456]	; (800296c <HAL_UART_MspInit+0x280>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80027ac:	230c      	movs	r3, #12
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027bc:	2307      	movs	r3, #7
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027c4:	4619      	mov	r1, r3
 80027c6:	486a      	ldr	r0, [pc, #424]	; (8002970 <HAL_UART_MspInit+0x284>)
 80027c8:	f002 fb90 	bl	8004eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2100      	movs	r1, #0
 80027d0:	2026      	movs	r0, #38	; 0x26
 80027d2:	f002 f912 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027d6:	2026      	movs	r0, #38	; 0x26
 80027d8:	f002 f92b 	bl	8004a32 <HAL_NVIC_EnableIRQ>
}
 80027dc:	e0bf      	b.n	800295e <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a65      	ldr	r2, [pc, #404]	; (8002978 <HAL_UART_MspInit+0x28c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d131      	bne.n	800284c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027e8:	4b60      	ldr	r3, [pc, #384]	; (800296c <HAL_UART_MspInit+0x280>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	4a5f      	ldr	r2, [pc, #380]	; (800296c <HAL_UART_MspInit+0x280>)
 80027ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f2:	6253      	str	r3, [r2, #36]	; 0x24
 80027f4:	4b5d      	ldr	r3, [pc, #372]	; (800296c <HAL_UART_MspInit+0x280>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	4b5a      	ldr	r3, [pc, #360]	; (800296c <HAL_UART_MspInit+0x280>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a59      	ldr	r2, [pc, #356]	; (800296c <HAL_UART_MspInit+0x280>)
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	61d3      	str	r3, [r2, #28]
 800280c:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_UART_MspInit+0x280>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8002818:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800282a:	2307      	movs	r3, #7
 800282c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002832:	4619      	mov	r1, r3
 8002834:	4851      	ldr	r0, [pc, #324]	; (800297c <HAL_UART_MspInit+0x290>)
 8002836:	f002 fb59 	bl	8004eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	2027      	movs	r0, #39	; 0x27
 8002840:	f002 f8db 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002844:	2027      	movs	r0, #39	; 0x27
 8002846:	f002 f8f4 	bl	8004a32 <HAL_NVIC_EnableIRQ>
}
 800284a:	e088      	b.n	800295e <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART4)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <HAL_UART_MspInit+0x294>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d131      	bne.n	80028ba <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002856:	4b45      	ldr	r3, [pc, #276]	; (800296c <HAL_UART_MspInit+0x280>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	4a44      	ldr	r2, [pc, #272]	; (800296c <HAL_UART_MspInit+0x280>)
 800285c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002860:	6253      	str	r3, [r2, #36]	; 0x24
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <HAL_UART_MspInit+0x280>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_UART_MspInit+0x280>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a3e      	ldr	r2, [pc, #248]	; (800296c <HAL_UART_MspInit+0x280>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b3c      	ldr	r3, [pc, #240]	; (800296c <HAL_UART_MspInit+0x280>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8002886:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002890:	2301      	movs	r3, #1
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002898:	2308      	movs	r3, #8
 800289a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a0:	4619      	mov	r1, r3
 80028a2:	4838      	ldr	r0, [pc, #224]	; (8002984 <HAL_UART_MspInit+0x298>)
 80028a4:	f002 fb22 	bl	8004eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2030      	movs	r0, #48	; 0x30
 80028ae:	f002 f8a4 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028b2:	2030      	movs	r0, #48	; 0x30
 80028b4:	f002 f8bd 	bl	8004a32 <HAL_NVIC_EnableIRQ>
}
 80028b8:	e051      	b.n	800295e <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART5)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a32      	ldr	r2, [pc, #200]	; (8002988 <HAL_UART_MspInit+0x29c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d14c      	bne.n	800295e <HAL_UART_MspInit+0x272>
    __HAL_RCC_UART5_CLK_ENABLE();
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_UART_MspInit+0x280>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	4a28      	ldr	r2, [pc, #160]	; (800296c <HAL_UART_MspInit+0x280>)
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ce:	6253      	str	r3, [r2, #36]	; 0x24
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_UART_MspInit+0x280>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <HAL_UART_MspInit+0x280>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a22      	ldr	r2, [pc, #136]	; (800296c <HAL_UART_MspInit+0x280>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_UART_MspInit+0x280>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_UART_MspInit+0x280>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <HAL_UART_MspInit+0x280>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	61d3      	str	r3, [r2, #28]
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <HAL_UART_MspInit+0x280>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 800290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002916:	2301      	movs	r3, #1
 8002918:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800291e:	2308      	movs	r3, #8
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002926:	4619      	mov	r1, r3
 8002928:	4816      	ldr	r0, [pc, #88]	; (8002984 <HAL_UART_MspInit+0x298>)
 800292a:	f002 fadf 	bl	8004eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 800292e:	2304      	movs	r3, #4
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002936:	2301      	movs	r3, #1
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800293e:	2308      	movs	r3, #8
 8002940:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8002942:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002946:	4619      	mov	r1, r3
 8002948:	4810      	ldr	r0, [pc, #64]	; (800298c <HAL_UART_MspInit+0x2a0>)
 800294a:	f002 facf 	bl	8004eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	2031      	movs	r0, #49	; 0x31
 8002954:	f002 f851 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002958:	2031      	movs	r0, #49	; 0x31
 800295a:	f002 f86a 	bl	8004a32 <HAL_NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3748      	adds	r7, #72	; 0x48
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40013800 	.word	0x40013800
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000
 8002974:	40004400 	.word	0x40004400
 8002978:	40004800 	.word	0x40004800
 800297c:	40020400 	.word	0x40020400
 8002980:	40004c00 	.word	0x40004c00
 8002984:	40020800 	.word	0x40020800
 8002988:	40005000 	.word	0x40005000
 800298c:	40020c00 	.word	0x40020c00

08002990 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
//======================================================================================
int main(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	HAL_Init();																			// Настройка HAL
 8002994:	f001 f99d 	bl	8003cd2 <HAL_Init>
	SystemClock_Config();																// Настройка системы тактирования
 8002998:	f000 f86e 	bl	8002a78 <SystemClock_Config>

	MX_GPIO_Init();																		// Настройка пинов GPIO, не привязанных к блокам SPI, UART, I2C, keys, encoder, ADC, DAC
 800299c:	f7ff f8d4 	bl	8001b48 <MX_GPIO_Init>
	MX_DMA_Init();																		// Настройка DMA
 80029a0:	f7fe fe6a 	bl	8001678 <MX_DMA_Init>
	MX_SPI1_Init();																		// Настройка SPI1 для работы с SD картой
 80029a4:	f7ff faa2 	bl	8001eec <MX_SPI1_Init>
	MX_SPI2_Init();																		// Настройка SPI2 для работы с LCD экраном ILI9488
 80029a8:	f7ff fad8 	bl	8001f5c <MX_SPI2_Init>
	MX_I2C1_Init();																		// Настройка I2C для работы с IMU
 80029ac:	f7ff f98a 	bl	8001cc4 <MX_I2C1_Init>

	MX_USART1_UART_Init();																// Настройка USART1
 80029b0:	f7ff fdca 	bl	8002548 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();																// Настройка USART2 для Virtual COM-Port
 80029b4:	f7ff fdf2 	bl	800259c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();																// Настройка USART3
 80029b8:	f7ff fe1a 	bl	80025f0 <MX_USART3_UART_Init>
	MX_UART4_Init();																	// Настройка UART4 терминальной связи с ПК
 80029bc:	f7ff fe42 	bl	8002644 <MX_UART4_Init>
	MX_UART5_Init();																	// Настройка UART5
 80029c0:	f7ff fe6a 	bl	8002698 <MX_UART5_Init>

	MX_DAC_Init();																		// Настройка ЦАП для управления скоростью мотора
 80029c4:	f7fe fdca 	bl	800155c <MX_DAC_Init>
	MX_ADC_Init();																		// Настройка АЦП для измерения токов, напряжений, регулятора скорости
 80029c8:	f7fe fa68 	bl	8000e9c <MX_ADC_Init>
	MX_TIM3_Init();																		// Настройка для работы энкодера
 80029cc:	f7ff fba0 	bl	8002110 <MX_TIM3_Init>
	MX_TIM6_Init();																		// Настройка для работы динамика
 80029d0:	f7ff fc6e 	bl	80022b0 <MX_TIM6_Init>
	MX_TIM4_Init();																		// Настройка для работы тахометра оборотов бака
 80029d4:	f7ff fbf2 	bl	80021bc <MX_TIM4_Init>
	MX_TIM11_Init();																	// Настройка для ШИМ управления оборотами мотора вентилятора охлаждения контроллера двигателя
 80029d8:	f7ff fc70 	bl	80022bc <MX_TIM11_Init>

	MX_FATFS_Init();																	// Настройка для работы с файлами на SD Card
 80029dc:	f008 fe0c 	bl	800b5f8 <MX_FATFS_Init>

	Keys_Init();																		// Настройка GPIO портов для кнопок
 80029e0:	f7ff f9e4 	bl	8001dac <Keys_Init>
	Encoder_Init();																		// Настройка GPIO портов для энкодера
 80029e4:	f7fe ff2c 	bl	8001840 <Encoder_Init>

	FAN_Init();																			// Настройка ШИМ-управления для двигателя вентилятора ихлажения
 80029e8:	f000 f99a 	bl	8002d20 <FAN_Init>


	BUZZER_Init(BUZZER_STSTE_ON);														// Инициализация и включение пъезодинамика (пищалки/баззера)
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7fe fcc9 	bl	8001384 <BUZZER_Init>

  //  // фейковый трансмит для настройки SPI
  //  uint8_t data = 0;
  //  HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);

	HAL_Delay(100);
 80029f2:	2064      	movs	r0, #100	; 0x64
 80029f4:	f001 f9a2 	bl	8003d3c <HAL_Delay>
	LCD9488_Init();	   																	// Инициализаци экрана LCD ILI9488
 80029f8:	f000 fbc8 	bl	800318c <LCD9488_Init>
	HAL_Delay(100);
 80029fc:	2064      	movs	r0, #100	; 0x64
 80029fe:	f001 f99d 	bl	8003d3c <HAL_Delay>

	LCD9488_GUI_SetOrientation(1);														// Установка ориентации экрана
 8002a02:	2001      	movs	r0, #1
 8002a04:	f000 fe7c 	bl	8003700 <LCD9488_GUI_SetOrientation>
	HAL_Delay(100);
 8002a08:	2064      	movs	r0, #100	; 0x64
 8002a0a:	f001 f997 	bl	8003d3c <HAL_Delay>


	BUZZER_Beep();
 8002a0e:	f7fe fd65 	bl	80014dc <BUZZER_Beep>


	// Рисуем начальную заставку на UART2
	printf("\033[2J"); 																	// Очистка окна терминала.   //https://www.linux.org.ru/forum/development/628620
 8002a12:	480f      	ldr	r0, [pc, #60]	; (8002a50 <main+0xc0>)
 8002a14:	f00f f9cc 	bl	8011db0 <iprintf>
	printf("\033[0;0H"); 																// задает абсолютные координаты курсора (строка, столбец)  // https://www.opennet.ru/base/dev/console_ctl.txt.html
 8002a18:	480e      	ldr	r0, [pc, #56]	; (8002a54 <main+0xc4>)
 8002a1a:	f00f f9c9 	bl	8011db0 <iprintf>
	printf("Medogonka. Alex Shamilich\n");												// Строка приветствия
 8002a1e:	480e      	ldr	r0, [pc, #56]	; (8002a58 <main+0xc8>)
 8002a20:	f00f fa3a 	bl	8011e98 <puts>
	printf("Version: %s\n", FIRMWARE_VER);
 8002a24:	490d      	ldr	r1, [pc, #52]	; (8002a5c <main+0xcc>)
 8002a26:	480e      	ldr	r0, [pc, #56]	; (8002a60 <main+0xd0>)
 8002a28:	f00f f9c2 	bl	8011db0 <iprintf>
	printf("  Date: %s\n", __DATE__);
 8002a2c:	490d      	ldr	r1, [pc, #52]	; (8002a64 <main+0xd4>)
 8002a2e:	480e      	ldr	r0, [pc, #56]	; (8002a68 <main+0xd8>)
 8002a30:	f00f f9be 	bl	8011db0 <iprintf>
	printf("  Time: %s\n", __TIME__);
 8002a34:	490d      	ldr	r1, [pc, #52]	; (8002a6c <main+0xdc>)
 8002a36:	480e      	ldr	r0, [pc, #56]	; (8002a70 <main+0xe0>)
 8002a38:	f00f f9ba 	bl	8011db0 <iprintf>
	printf("FreeRTOS. USART2->Virtual_COM, ADC, DAC, \n");															// Строка приветствия
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <main+0xe4>)
 8002a3e:	f00f fa2b 	bl	8011e98 <puts>


//	main_test();																		// Тесты LCD

	osKernelInitialize();  																// Настройка планировщика FreeRTOS
 8002a42:	f00b f8b9 	bl	800dbb8 <osKernelInitialize>
	MX_FREERTOS_Init();																	// Настройка объектов FreeRTOS
 8002a46:	f7fe ff81 	bl	800194c <MX_FREERTOS_Init>
	osKernelStart();																	// Запуск планировщика FreeRTOS
 8002a4a:	f00b f8e7 	bl	800dc1c <osKernelStart>



	// После старта планировщика сюда мы никогда не должны зайти, поэтому бесконечный цикл.
	while (1)
 8002a4e:	e7fe      	b.n	8002a4e <main+0xbe>
 8002a50:	0801569c 	.word	0x0801569c
 8002a54:	080156a4 	.word	0x080156a4
 8002a58:	080156ac 	.word	0x080156ac
 8002a5c:	080156c8 	.word	0x080156c8
 8002a60:	080156d0 	.word	0x080156d0
 8002a64:	080156e0 	.word	0x080156e0
 8002a68:	080156ec 	.word	0x080156ec
 8002a6c:	080156f8 	.word	0x080156f8
 8002a70:	08015704 	.word	0x08015704
 8002a74:	08015710 	.word	0x08015710

08002a78 <SystemClock_Config>:
	{
	}
}
//======================================================================================
void SystemClock_Config(void)															// System Clock Configuration
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b092      	sub	sp, #72	; 0x48
 8002a7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	2234      	movs	r2, #52	; 0x34
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00e fb5b 	bl	8011142 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a8c:	463b      	mov	r3, r7
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <SystemClock_Config+0xb0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002aa2:	4a21      	ldr	r2, [pc, #132]	; (8002b28 <SystemClock_Config+0xb0>)
 8002aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aa8:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aba:	2302      	movs	r3, #2
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002ac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002aca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002ace:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f004 f827 	bl	8006b28 <HAL_RCC_OscConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <SystemClock_Config+0x6e>
	{
	Error_Handler(0);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f000 f85f 	bl	8002ba4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae6:	230f      	movs	r3, #15
 8002ae8:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aea:	2303      	movs	r3, #3
 8002aec:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002afa:	463b      	mov	r3, r7
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fb42 	bl	8007188 <HAL_RCC_ClockConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <SystemClock_Config+0x98>
	{
	Error_Handler(0);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 f84a 	bl	8002ba4 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8002b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b14:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f004 fc69 	bl	80073f0 <HAL_RCC_MCOConfig>
}
 8002b1e:	bf00      	nop
 8002b20:	3748      	adds	r7, #72	; 0x48
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM7)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002b3e:	f001 f8e1 	bl	8003d04 <HAL_IncTick>
  }
  if (htim->Instance == TIM6)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d103      	bne.n	8002b54 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	BUZZER_INV;																			// меняем состояние пина баззера
 8002b4c:	2120      	movs	r1, #32
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b50:	f002 fb89 	bl	8005266 <HAL_GPIO_TogglePin>
  }

}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40001400 	.word	0x40001400
 8002b60:	40001000 	.word	0x40001000
 8002b64:	40020400 	.word	0x40020400

08002b68 <Delay_for_errror>:
//======================================================================================
void Delay_for_errror(uint32_t ms) 														// должна работать вне зависимости от прерываний. Когда все рухнуло и нужно диодом показать код ошибки
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    volatile uint32_t 	nCount;
    nCount = SystemCoreClock / 10000 * ms;
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <Delay_for_errror+0x34>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <Delay_for_errror+0x38>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0b5b      	lsrs	r3, r3, #13
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	60fb      	str	r3, [r7, #12]
    for (; nCount!=0; nCount--);
 8002b84:	e002      	b.n	8002b8c <Delay_for_errror+0x24>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f9      	bne.n	8002b86 <Delay_for_errror+0x1e>
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	d1b71759 	.word	0xd1b71759

08002ba4 <Error_Handler>:
//=======================================================================================
void Error_Handler(uint8_t err_num)														// Обработчик ошибок
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  //gl_err_num = err_num;
  while(1)
  {
	LED_GREEN_SET;
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2110      	movs	r1, #16
 8002bb2:	4817      	ldr	r0, [pc, #92]	; (8002c10 <Error_Handler+0x6c>)
 8002bb4:	f002 fb3f 	bl	8005236 <HAL_GPIO_WritePin>
	Delay_for_errror(500);
 8002bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bbc:	f7ff ffd4 	bl	8002b68 <Delay_for_errror>
	LED_GREEN_RESET;
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	4812      	ldr	r0, [pc, #72]	; (8002c10 <Error_Handler+0x6c>)
 8002bc6:	f002 fb36 	bl	8005236 <HAL_GPIO_WritePin>
    Delay_for_errror(500);
 8002bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bce:	f7ff ffcb 	bl	8002b68 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e012      	b.n	8002bfe <Error_Handler+0x5a>
    {
    	LED_GREEN_SET;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2110      	movs	r1, #16
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <Error_Handler+0x6c>)
 8002bde:	f002 fb2a 	bl	8005236 <HAL_GPIO_WritePin>
    	Delay_for_errror(130);
 8002be2:	2082      	movs	r0, #130	; 0x82
 8002be4:	f7ff ffc0 	bl	8002b68 <Delay_for_errror>
    	LED_GREEN_RESET;
 8002be8:	2200      	movs	r2, #0
 8002bea:	2110      	movs	r1, #16
 8002bec:	4808      	ldr	r0, [pc, #32]	; (8002c10 <Error_Handler+0x6c>)
 8002bee:	f002 fb22 	bl	8005236 <HAL_GPIO_WritePin>
        Delay_for_errror(130);
 8002bf2:	2082      	movs	r0, #130	; 0x82
 8002bf4:	f7ff ffb8 	bl	8002b68 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3e8      	bcc.n	8002bd8 <Error_Handler+0x34>
    }
    Delay_for_errror(1000);
 8002c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c0a:	f7ff ffad 	bl	8002b68 <Delay_for_errror>
	LED_GREEN_SET;
 8002c0e:	e7ce      	b.n	8002bae <Error_Handler+0xa>
 8002c10:	40020800 	.word	0x40020800

08002c14 <Motor_Scan_DirectionState>:
	osDelay(100);
	MOTOR_BWD_SET;
}
//=======================================================================================
void  Motor_Scan_DirectionState(void)													// Просканировать состояние переключателя направления мотора
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
	GPIO_PinState FWD = HAL_GPIO_ReadPin(BTN_FWD_GPIO_Port,  BTN_FWD_Pin);
 8002c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c1e:	4824      	ldr	r0, [pc, #144]	; (8002cb0 <Motor_Scan_DirectionState+0x9c>)
 8002c20:	f002 faf2 	bl	8005208 <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState BWD = HAL_GPIO_ReadPin(BTN_BWD_GPIO_Port,  BTN_BWD_Pin);
 8002c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c2c:	4820      	ldr	r0, [pc, #128]	; (8002cb0 <Motor_Scan_DirectionState+0x9c>)
 8002c2e:	f002 faeb 	bl	8005208 <HAL_GPIO_ReadPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	71bb      	strb	r3, [r7, #6]

	if ( (FWD == GPIO_PIN_SET) &
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	79bb      	ldrb	r3, [r7, #6]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4013      	ands	r3, r2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <Motor_Scan_DirectionState+0x48>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_STOP;
 8002c56:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <Motor_Scan_DirectionState+0xa0>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_SET) &
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	79bb      	ldrb	r3, [r7, #6]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4013      	ands	r3, r2
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <Motor_Scan_DirectionState+0x6e>
		 (BWD == GPIO_PIN_RESET) )
	{
		MotorDirection = MD_FWD;
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <Motor_Scan_DirectionState+0xa0>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_RESET) &
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	79bb      	ldrb	r3, [r7, #6]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <Motor_Scan_DirectionState+0x94>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_REV;
 8002ca2:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <Motor_Scan_DirectionState+0xa0>)
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	701a      	strb	r2, [r3, #0]
	}

}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	20003a40 	.word	0x20003a40

08002cb8 <Motor_Set_DirectionState>:
//=======================================================================================
void  Motor_Set_DirectionState(TMotorDirection ADir)									// Установить направление мотора
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
	switch (ADir)
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d00f      	beq.n	8002ce8 <Motor_Set_DirectionState+0x30>
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d018      	beq.n	8002cfe <Motor_Set_DirectionState+0x46>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d000      	beq.n	8002cd2 <Motor_Set_DirectionState+0x1a>
			MOTOR_FWD_RESET;
			MOTOR_BWD_SET;
			break;
	}

}
 8002cd0:	e020      	b.n	8002d14 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2140      	movs	r1, #64	; 0x40
 8002cd6:	4811      	ldr	r0, [pc, #68]	; (8002d1c <Motor_Set_DirectionState+0x64>)
 8002cd8:	f002 faad 	bl	8005236 <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	480e      	ldr	r0, [pc, #56]	; (8002d1c <Motor_Set_DirectionState+0x64>)
 8002ce2:	f002 faa8 	bl	8005236 <HAL_GPIO_WritePin>
			break;
 8002ce6:	e015      	b.n	8002d14 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_SET;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <Motor_Set_DirectionState+0x64>)
 8002cee:	f002 faa2 	bl	8005236 <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	4809      	ldr	r0, [pc, #36]	; (8002d1c <Motor_Set_DirectionState+0x64>)
 8002cf8:	f002 fa9d 	bl	8005236 <HAL_GPIO_WritePin>
			break;
 8002cfc:	e00a      	b.n	8002d14 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	4806      	ldr	r0, [pc, #24]	; (8002d1c <Motor_Set_DirectionState+0x64>)
 8002d04:	f002 fa97 	bl	8005236 <HAL_GPIO_WritePin>
			MOTOR_BWD_SET;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	4803      	ldr	r0, [pc, #12]	; (8002d1c <Motor_Set_DirectionState+0x64>)
 8002d0e:	f002 fa92 	bl	8005236 <HAL_GPIO_WritePin>
			break;
 8002d12:	bf00      	nop
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000

08002d20 <FAN_Init>:
//=======================================================================================
void  FAN_Init(void)																	// Инициализация управления мотором вентилятора охлажения
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	MX_TIM11_Init();																	// Инициализация таймера для ШИМ
 8002d24:	f7ff faca 	bl	80022bc <MX_TIM11_Init>

	FAN_Set_Start();																	// Включить мотор вентилятора охлажения
 8002d28:	f000 f806 	bl	8002d38 <FAN_Set_Start>
	FAN_Set_Speed(FAN_SPEED_DEFAULT);													// Установить скорость вентилятора по-умолчанию
 8002d2c:	2064      	movs	r0, #100	; 0x64
 8002d2e:	f000 f80d 	bl	8002d4c <FAN_Set_Speed>
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <FAN_Set_Start>:
//=======================================================================================
void  FAN_Set_Start(void)																// Включить мотор вентилятора охлажения
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4802      	ldr	r0, [pc, #8]	; (8002d48 <FAN_Set_Start+0x10>)
 8002d40:	f005 f8f0 	bl	8007f24 <HAL_TIM_PWM_Start>
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20003d1c 	.word	0x20003d1c

08002d4c <FAN_Set_Speed>:
{
	HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
}
//=======================================================================================
void  FAN_Set_Speed(uint8_t APercent)													// Установить скорость мотора вентилятора охлажения
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	TIM11->CCR1 = APercent;																// Т.к. период ШИМ таймера задан в (htim11.Init.Period = 100;),
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <FAN_Set_Speed+0x1c>)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	6353      	str	r3, [r2, #52]	; 0x34
																						// скважность тут задаем от 0 до 100.
																						// Частота ШИМ определяется соотношением (htim11.Init.Prescaler = 32000;) с тактовой частотой
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40011000 	.word	0x40011000

08002d6c <HAL_MspInit>:
  ******************************************************************************
  */
#include "main.h"

void HAL_MspInit(void)																	// Initializes the Global MSP.
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0

  __HAL_RCC_COMP_CLK_ENABLE();
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_MspInit+0x58>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <HAL_MspInit+0x58>)
 8002d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d7c:	6253      	str	r3, [r2, #36]	; 0x24
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_MspInit+0x58>)
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_MspInit+0x58>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <HAL_MspInit+0x58>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_MspInit+0x58>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_MspInit+0x58>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_MspInit+0x58>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6253      	str	r3, [r2, #36]	; 0x24
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_MspInit+0x58>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]

}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	; 0x30
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	202c      	movs	r0, #44	; 0x2c
 8002dde:	f001 fe0c 	bl	80049fa <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002de2:	202c      	movs	r0, #44	; 0x2c
 8002de4:	f001 fe25 	bl	8004a32 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_InitTick+0x9c>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <HAL_InitTick+0x9c>)
 8002dee:	f043 0320 	orr.w	r3, r3, #32
 8002df2:	6253      	str	r3, [r2, #36]	; 0x24
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_InitTick+0x9c>)
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e00:	f107 0210 	add.w	r2, r7, #16
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fc22 	bl	8007654 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e10:	f004 fbf8 	bl	8007604 <HAL_RCC_GetPCLK1Freq>
 8002e14:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <HAL_InitTick+0xa0>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0c9b      	lsrs	r3, r3, #18
 8002e20:	3b01      	subs	r3, #1
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_InitTick+0xa4>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <HAL_InitTick+0xa8>)
 8002e28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_InitTick+0xa4>)
 8002e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e30:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_InitTick+0xa4>)
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_InitTick+0xa4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_InitTick+0xa4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002e44:	4809      	ldr	r0, [pc, #36]	; (8002e6c <HAL_InitTick+0xa4>)
 8002e46:	f004 ff25 	bl	8007c94 <HAL_TIM_Base_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002e50:	4806      	ldr	r0, [pc, #24]	; (8002e6c <HAL_InitTick+0xa4>)
 8002e52:	f004 ff5f 	bl	8007d14 <HAL_TIM_Base_Start_IT>
 8002e56:	4603      	mov	r3, r0
 8002e58:	e000      	b.n	8002e5c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	20003edc 	.word	0x20003edc
 8002e70:	40001400 	.word	0x40001400

08002e74 <NMI_Handler>:
//======================================================================================
/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void)																	// Non maskable interrupt.
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HardFault_Handler>:
//======================================================================================
void HardFault_Handler(void)															// Hard fault interrupt.
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <HardFault_Handler+0x4>

08002e86 <MemManage_Handler>:
  {
  }
}
//======================================================================================
void MemManage_Handler(void)															// Memory management fault.
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <MemManage_Handler+0x4>

08002e8c <BusFault_Handler>:
  {
  }
}
//======================================================================================
void BusFault_Handler(void)																// Pre-fetch fault, memory access fault.
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <BusFault_Handler+0x4>

08002e92 <UsageFault_Handler>:
  {
  }
}
//======================================================================================
void UsageFault_Handler(void)															// Undefined instruction or illegal state.
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <UsageFault_Handler+0x4>

08002e98 <DebugMon_Handler>:
//======================================================================================
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <DMA1_Channel5_IRQHandler>:
/* please refer to the startup file (startup_stm32l1xx.s).                    */
/******************************************************************************/

//======================================================================================
void DMA1_Channel5_IRQHandler(void)														// DMA1 channel5 global interrupt.
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <DMA1_Channel5_IRQHandler+0x10>)
 8002eaa:	f001 ff70 	bl	8004d8e <HAL_DMA_IRQHandler>
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20003c58 	.word	0x20003c58

08002eb8 <ADC1_IRQHandler>:
//======================================================================================
void ADC1_IRQHandler(void)																// ADC global interrupt.
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <ADC1_IRQHandler+0x10>)
 8002ebe:	f001 f9c6 	bl	800424e <HAL_ADC_IRQHandler>
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200039ec 	.word	0x200039ec

08002ecc <USB_LP_IRQHandler>:
//======================================================================================
void USB_LP_IRQHandler(void)															// USB low priority interrupt.
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <USB_LP_IRQHandler+0x10>)
 8002ed2:	f002 fc1d 	bl	8005710 <HAL_PCD_IRQHandler>
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000487c 	.word	0x2000487c

08002ee0 <USART1_IRQHandler>:
//======================================================================================
void USART1_IRQHandler(void)															// USART1 global interrupt.
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <USART1_IRQHandler+0x10>)
 8002ee6:	f005 ff83 	bl	8008df0 <HAL_UART_IRQHandler>
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20003e1c 	.word	0x20003e1c

08002ef4 <USART2_IRQHandler>:
//======================================================================================
void USART2_IRQHandler(void)															// USART2 global interrupt.
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <USART2_IRQHandler+0x10>)
 8002efa:	f005 ff79 	bl	8008df0 <HAL_UART_IRQHandler>
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20003e9c 	.word	0x20003e9c

08002f08 <USART3_IRQHandler>:
//======================================================================================
void USART3_IRQHandler(void)															// USART3 global interrupt.
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <USART3_IRQHandler+0x10>)
 8002f0e:	f005 ff6f 	bl	8008df0 <HAL_UART_IRQHandler>
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20003d9c 	.word	0x20003d9c

08002f1c <UART4_IRQHandler>:
//======================================================================================
void UART4_IRQHandler(void)																// UART4 global interrupt.
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <UART4_IRQHandler+0x10>)
 8002f22:	f005 ff65 	bl	8008df0 <HAL_UART_IRQHandler>
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20003e5c 	.word	0x20003e5c

08002f30 <UART5_IRQHandler>:
//======================================================================================
void UART5_IRQHandler(void)																// UART5 global interrupt.
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart5);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <UART5_IRQHandler+0x10>)
 8002f36:	f005 ff5b 	bl	8008df0 <HAL_UART_IRQHandler>
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20003ddc 	.word	0x20003ddc

08002f44 <TIM3_IRQHandler>:
//======================================================================================
void TIM3_IRQHandler(void)																// TIM3 global interrupt.
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <TIM3_IRQHandler+0x10>)
 8002f4a:	f005 f91f 	bl	800818c <HAL_TIM_IRQHandler>
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20003cdc 	.word	0x20003cdc

08002f58 <TIM6_IRQHandler>:
//======================================================================================
void TIM6_IRQHandler(void)																// TIM6 global interrupt.
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <TIM6_IRQHandler+0x10>)
 8002f5e:	f005 f915 	bl	800818c <HAL_TIM_IRQHandler>
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20003d5c 	.word	0x20003d5c

08002f6c <TIM7_IRQHandler>:
//======================================================================================
void TIM7_IRQHandler(void)																// TIM7 global interrupt.
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <TIM7_IRQHandler+0x10>)
 8002f72:	f005 f90b 	bl	800818c <HAL_TIM_IRQHandler>
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20003edc 	.word	0x20003edc

08002f80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e00a      	b.n	8002fa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f92:	f3af 8000 	nop.w
 8002f96:	4601      	mov	r1, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	60ba      	str	r2, [r7, #8]
 8002f9e:	b2ca      	uxtb	r2, r1
 8002fa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	dbf0      	blt.n	8002f92 <_read+0x12>
	}

return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_write>:

int _write(int file, char *ptr, int len)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e009      	b.n	8002fe0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	60ba      	str	r2, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff faa5 	bl	8002524 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dbf1      	blt.n	8002fcc <_write+0x12>
	}
	return len;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_close>:
	return (caddr_t) prev_heap_end;
}
*/

int _close(int file)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003018:	605a      	str	r2, [r3, #4]
	return 0;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <_isatty>:

int _isatty(int file)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
	return 1;
 800302e:	2301      	movs	r3, #1
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
	return 0;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
	...

08003054 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <SystemInit+0x14>)
 800305a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800305e:	609a      	str	r2, [r3, #8]
#endif
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <LCD9488_Init_GPIO>:
uint16_t LCD9488_Point_Color = 0x0000;
uint16_t LCD9488_Back_Color  = 0xFFFF;
uint16_t LCD9488_DeviceCode;
//=======================================================================================
void LCD9488_Init_GPIO(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	60da      	str	r2, [r3, #12]
 8003080:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	4b40      	ldr	r3, [pc, #256]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4a3f      	ldr	r2, [pc, #252]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	61d3      	str	r3, [r2, #28]
 800308e:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a39      	ldr	r2, [pc, #228]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	61d3      	str	r3, [r2, #28]
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	4b34      	ldr	r3, [pc, #208]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	61d3      	str	r3, [r2, #28]
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80030ca:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	61d3      	str	r3, [r2, #28]
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <LCD9488_Init_GPIO+0x118>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD9488_DC_RS_GPIO_Port, 		LCD9488_DC_RS_Pin, 	GPIO_PIN_RESET);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2101      	movs	r1, #1
 80030e6:	4828      	ldr	r0, [pc, #160]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 80030e8:	f002 f8a5 	bl	8005236 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_CS_GPIO_Port, 		LCD9488_CS_Pin, 	GPIO_PIN_RESET);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2104      	movs	r1, #4
 80030f0:	4825      	ldr	r0, [pc, #148]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 80030f2:	f002 f8a0 	bl	8005236 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_RST_GPIO_Port, 		LCD9488_RST_Pin, 	GPIO_PIN_RESET);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2102      	movs	r1, #2
 80030fa:	4823      	ldr	r0, [pc, #140]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 80030fc:	f002 f89b 	bl	8005236 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_LED_GPIO_Port, 		LCD9488_LED_Pin, 	GPIO_PIN_RESET);
 8003100:	2200      	movs	r2, #0
 8003102:	2108      	movs	r1, #8
 8003104:	4820      	ldr	r0, [pc, #128]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 8003106:	f002 f896 	bl	8005236 <HAL_GPIO_WritePin>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LCD9488_DC_RS_Pin;
 800310a:	2301      	movs	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310e:	2301      	movs	r3, #1
 8003110:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_DC_RS_GPIO_Port, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	4819      	ldr	r0, [pc, #100]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 8003122:	f001 fee3 	bl	8004eec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_CS_Pin;
 8003126:	2304      	movs	r3, #4
 8003128:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_CS_GPIO_Port, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	4812      	ldr	r0, [pc, #72]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 800313e:	f001 fed5 	bl	8004eec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_RST_Pin;
 8003142:	2302      	movs	r3, #2
 8003144:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003146:	2301      	movs	r3, #1
 8003148:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800314e:	2302      	movs	r3, #2
 8003150:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_RST_GPIO_Port, &GPIO_InitStruct);
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	4619      	mov	r1, r3
 8003158:	480b      	ldr	r0, [pc, #44]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 800315a:	f001 fec7 	bl	8004eec <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_LED_Pin;
 800315e:	2308      	movs	r3, #8
 8003160:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003162:	2301      	movs	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_LED_GPIO_Port, &GPIO_InitStruct);
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	4619      	mov	r1, r3
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <LCD9488_Init_GPIO+0x11c>)
 8003176:	f001 feb9 	bl	8004eec <HAL_GPIO_Init>
}
 800317a:	bf00      	nop
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40020800 	.word	0x40020800

0800318c <LCD9488_Init>:
//=======================================================================================
void LCD9488_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 8003190:	f7fe fee4 	bl	8001f5c <MX_SPI2_Init>
	HAL_Delay(100);
 8003194:	2064      	movs	r0, #100	; 0x64
 8003196:	f000 fdd1 	bl	8003d3c <HAL_Delay>
	LCD9488_Init_GPIO();
 800319a:	f7ff ff67 	bl	800306c <LCD9488_Init_GPIO>

	LCD9488_LED_SET;//Включить подсветку
 800319e:	2201      	movs	r2, #1
 80031a0:	2108      	movs	r1, #8
 80031a2:	4870      	ldr	r0, [pc, #448]	; (8003364 <LCD9488_Init+0x1d8>)
 80031a4:	f002 f847 	bl	8005236 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	f000 fdc7 	bl	8003d3c <HAL_Delay>
 	LCD9488_RESET();
 80031ae:	f000 fa3d 	bl	800362c <LCD9488_RESET>
 	HAL_Delay(100);
 80031b2:	2064      	movs	r0, #100	; 0x64
 80031b4:	f000 fdc2 	bl	8003d3c <HAL_Delay>

	LCD9488_Transport_WR_REG(0XF7);
 80031b8:	20f7      	movs	r0, #247	; 0xf7
 80031ba:	f000 f8ed 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xA9);
 80031be:	20a9      	movs	r0, #169	; 0xa9
 80031c0:	f000 f910 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x51);
 80031c4:	2051      	movs	r0, #81	; 0x51
 80031c6:	f000 f90d 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2C);
 80031ca:	202c      	movs	r0, #44	; 0x2c
 80031cc:	f000 f90a 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x82);
 80031d0:	2082      	movs	r0, #130	; 0x82
 80031d2:	f000 f907 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC0);
 80031d6:	20c0      	movs	r0, #192	; 0xc0
 80031d8:	f000 f8de 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x11);
 80031dc:	2011      	movs	r0, #17
 80031de:	f000 f901 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 80031e2:	2009      	movs	r0, #9
 80031e4:	f000 f8fe 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC1);
 80031e8:	20c1      	movs	r0, #193	; 0xc1
 80031ea:	f000 f8d5 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x41);
 80031ee:	2041      	movs	r0, #65	; 0x41
 80031f0:	f000 f8f8 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XC5);
 80031f4:	20c5      	movs	r0, #197	; 0xc5
 80031f6:	f000 f8cf 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f000 f8f2 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8003200:	200a      	movs	r0, #10
 8003202:	f000 f8ef 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x80);
 8003206:	2080      	movs	r0, #128	; 0x80
 8003208:	f000 f8ec 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB1);
 800320c:	20b1      	movs	r0, #177	; 0xb1
 800320e:	f000 f8c3 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xB0);
 8003212:	20b0      	movs	r0, #176	; 0xb0
 8003214:	f000 f8e6 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x11);
 8003218:	2011      	movs	r0, #17
 800321a:	f000 f8e3 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB4);
 800321e:	20b4      	movs	r0, #180	; 0xb4
 8003220:	f000 f8ba 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 8003224:	2002      	movs	r0, #2
 8003226:	f000 f8dd 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB6);
 800322a:	20b6      	movs	r0, #182	; 0xb6
 800322c:	f000 f8b4 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 8003230:	2002      	movs	r0, #2
 8003232:	f000 f8d7 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x42);
 8003236:	2042      	movs	r0, #66	; 0x42
 8003238:	f000 f8d4 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB7);
 800323c:	20b7      	movs	r0, #183	; 0xb7
 800323e:	f000 f8ab 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xc6);
 8003242:	20c6      	movs	r0, #198	; 0xc6
 8003244:	f000 f8ce 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xBE);
 8003248:	20be      	movs	r0, #190	; 0xbe
 800324a:	f000 f8a5 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 800324e:	2000      	movs	r0, #0
 8003250:	f000 f8c8 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 8003254:	2004      	movs	r0, #4
 8003256:	f000 f8c5 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE9);
 800325a:	20e9      	movs	r0, #233	; 0xe9
 800325c:	f000 f89c 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f000 f8bf 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x36);
 8003266:	2036      	movs	r0, #54	; 0x36
 8003268:	f000 f896 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA((1<<3)|(0<<7)|(1<<6)|(1<<5));
 800326c:	2068      	movs	r0, #104	; 0x68
 800326e:	f000 f8b9 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x3A);
 8003272:	203a      	movs	r0, #58	; 0x3a
 8003274:	f000 f890 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x66);
 8003278:	2066      	movs	r0, #102	; 0x66
 800327a:	f000 f8b3 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE0);
 800327e:	20e0      	movs	r0, #224	; 0xe0
 8003280:	f000 f88a 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f000 f8ad 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x07);
 800328a:	2007      	movs	r0, #7
 800328c:	f000 f8aa 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x10);
 8003290:	2010      	movs	r0, #16
 8003292:	f000 f8a7 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8003296:	2009      	movs	r0, #9
 8003298:	f000 f8a4 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 800329c:	2017      	movs	r0, #23
 800329e:	f000 f8a1 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0B);
 80032a2:	200b      	movs	r0, #11
 80032a4:	f000 f89e 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x41);
 80032a8:	2041      	movs	r0, #65	; 0x41
 80032aa:	f000 f89b 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x89);
 80032ae:	2089      	movs	r0, #137	; 0x89
 80032b0:	f000 f898 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x4B);
 80032b4:	204b      	movs	r0, #75	; 0x4b
 80032b6:	f000 f895 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 80032ba:	200a      	movs	r0, #10
 80032bc:	f000 f892 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0C);
 80032c0:	200c      	movs	r0, #12
 80032c2:	f000 f88f 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 80032c6:	200e      	movs	r0, #14
 80032c8:	f000 f88c 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x18);
 80032cc:	2018      	movs	r0, #24
 80032ce:	f000 f889 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1B);
 80032d2:	201b      	movs	r0, #27
 80032d4:	f000 f886 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 80032d8:	200f      	movs	r0, #15
 80032da:	f000 f883 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XE1);
 80032de:	20e1      	movs	r0, #225	; 0xe1
 80032e0:	f000 f85a 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f000 f87d 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 80032ea:	2017      	movs	r0, #23
 80032ec:	f000 f87a 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1A);
 80032f0:	201a      	movs	r0, #26
 80032f2:	f000 f877 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 80032f6:	2004      	movs	r0, #4
 80032f8:	f000 f874 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 80032fc:	200e      	movs	r0, #14
 80032fe:	f000 f871 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x06);
 8003302:	2006      	movs	r0, #6
 8003304:	f000 f86e 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2F);
 8003308:	202f      	movs	r0, #47	; 0x2f
 800330a:	f000 f86b 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x45);
 800330e:	2045      	movs	r0, #69	; 0x45
 8003310:	f000 f868 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x43);
 8003314:	2043      	movs	r0, #67	; 0x43
 8003316:	f000 f865 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x02);
 800331a:	2002      	movs	r0, #2
 800331c:	f000 f862 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8003320:	200a      	movs	r0, #10
 8003322:	f000 f85f 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8003326:	2009      	movs	r0, #9
 8003328:	f000 f85c 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x32);
 800332c:	2032      	movs	r0, #50	; 0x32
 800332e:	f000 f859 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x36);
 8003332:	2036      	movs	r0, #54	; 0x36
 8003334:	f000 f856 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 8003338:	200f      	movs	r0, #15
 800333a:	f000 f853 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x11);
 800333e:	2011      	movs	r0, #17
 8003340:	f000 f82a 	bl	8003398 <LCD9488_Transport_WR_REG>
	HAL_Delay(120);
 8003344:	2078      	movs	r0, #120	; 0x78
 8003346:	f000 fcf9 	bl	8003d3c <HAL_Delay>
	LCD9488_Transport_WR_REG(0x29);
 800334a:	2029      	movs	r0, #41	; 0x29
 800334c:	f000 f824 	bl	8003398 <LCD9488_Transport_WR_REG>

	LCD9488_GUI_SetOrientation(USE_HORIZONTAL);
 8003350:	2000      	movs	r0, #0
 8003352:	f000 f9d5 	bl	8003700 <LCD9488_GUI_SetOrientation>
	LCD9488_GUI_Clear(WHITE);
 8003356:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800335a:	f000 f8f7 	bl	800354c <LCD9488_GUI_Clear>

}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40020800 	.word	0x40020800

08003368 <LCD9488_Transport_SPI_WriteByte>:
//=======================================================================================
void LCD9488_Transport_SPI_WriteByte(uint8_t Byte)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8003372:	bf00      	nop
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f8      	beq.n	8003374 <LCD9488_Transport_SPI_WriteByte+0xc>
		LCD_SPI.Instance->DR = Byte;
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	79fa      	ldrb	r2, [r7, #7]
 8003388:	60da      	str	r2, [r3, #12]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	20003ba8 	.word	0x20003ba8

08003398 <LCD9488_Transport_WR_REG>:
//=======================================================================================
void LCD9488_Transport_WR_REG(uint8_t data)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 80033a2:	2200      	movs	r2, #0
 80033a4:	2104      	movs	r1, #4
 80033a6:	480d      	ldr	r0, [pc, #52]	; (80033dc <LCD9488_Transport_WR_REG+0x44>)
 80033a8:	f001 ff45 	bl	8005236 <HAL_GPIO_WritePin>
   LCD9488_RS_CLR;
 80033ac:	2200      	movs	r2, #0
 80033ae:	2101      	movs	r1, #1
 80033b0:	480a      	ldr	r0, [pc, #40]	; (80033dc <LCD9488_Transport_WR_REG+0x44>)
 80033b2:	f001 ff40 	bl	8005236 <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ffd5 	bl	8003368 <LCD9488_Transport_SPI_WriteByte>
   HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);
 80033be:	1df9      	adds	r1, r7, #7
 80033c0:	230a      	movs	r3, #10
 80033c2:	2201      	movs	r2, #1
 80033c4:	4806      	ldr	r0, [pc, #24]	; (80033e0 <LCD9488_Transport_WR_REG+0x48>)
 80033c6:	f004 fa5e 	bl	8007886 <HAL_SPI_Transmit>
   LCD9488_CS_SET;
 80033ca:	2201      	movs	r2, #1
 80033cc:	2104      	movs	r1, #4
 80033ce:	4803      	ldr	r0, [pc, #12]	; (80033dc <LCD9488_Transport_WR_REG+0x44>)
 80033d0:	f001 ff31 	bl	8005236 <HAL_GPIO_WritePin>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40020800 	.word	0x40020800
 80033e0:	20003ba8 	.word	0x20003ba8

080033e4 <LCD9488_Transport_WR_DATA>:
//=======================================================================================
void LCD9488_Transport_WR_DATA(uint8_t data)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 80033ee:	2200      	movs	r2, #0
 80033f0:	2104      	movs	r1, #4
 80033f2:	480a      	ldr	r0, [pc, #40]	; (800341c <LCD9488_Transport_WR_DATA+0x38>)
 80033f4:	f001 ff1f 	bl	8005236 <HAL_GPIO_WritePin>
   LCD9488_RS_SET;
 80033f8:	2201      	movs	r2, #1
 80033fa:	2101      	movs	r1, #1
 80033fc:	4807      	ldr	r0, [pc, #28]	; (800341c <LCD9488_Transport_WR_DATA+0x38>)
 80033fe:	f001 ff1a 	bl	8005236 <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ffaf 	bl	8003368 <LCD9488_Transport_SPI_WriteByte>
   LCD9488_CS_SET;
 800340a:	2201      	movs	r2, #1
 800340c:	2104      	movs	r1, #4
 800340e:	4803      	ldr	r0, [pc, #12]	; (800341c <LCD9488_Transport_WR_DATA+0x38>)
 8003410:	f001 ff11 	bl	8005236 <HAL_GPIO_WritePin>
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40020800 	.word	0x40020800

08003420 <LCD9488_WriteReg>:
//=======================================================================================
void LCD9488_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	460a      	mov	r2, r1
 800342a:	71fb      	strb	r3, [r7, #7]
 800342c:	4613      	mov	r3, r2
 800342e:	80bb      	strh	r3, [r7, #4]
	LCD9488_Transport_WR_REG(LCD_Reg);
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ffb0 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(LCD_RegValue);
 8003438:	88bb      	ldrh	r3, [r7, #4]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ffd1 	bl	80033e4 <LCD9488_Transport_WR_DATA>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <LCD9488_WriteRAM_Prepare>:
//=======================================================================================
void LCD9488_WriteRAM_Prepare(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
	LCD9488_Transport_WR_REG(LCD9488_DEV.WramCmd);
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <LCD9488_WriteRAM_Prepare+0x14>)
 8003452:	891b      	ldrh	r3, [r3, #8]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff9e 	bl	8003398 <LCD9488_Transport_WR_REG>
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20003f20 	.word	0x20003f20

08003464 <LCD9488_WriteData_16Bit>:
//=======================================================================================
void LCD9488_WriteData_16Bit(uint16_t Data)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
	uint8_t r = (Data>>8)&0xF8; 	// RED Color
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	b29b      	uxth	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (Data>>3)&0xFC; 	// Green Color
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	08db      	lsrs	r3, r3, #3
 8003480:	b29b      	uxth	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f023 0303 	bic.w	r3, r3, #3
 8003488:	73bb      	strb	r3, [r7, #14]
	uint8_t b = Data<<3; 			// Blue Color
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	737b      	strb	r3, [r7, #13]

	LCD9488_CS_CLR;
 8003492:	2200      	movs	r2, #0
 8003494:	2104      	movs	r1, #4
 8003496:	481e      	ldr	r0, [pc, #120]	; (8003510 <LCD9488_WriteData_16Bit+0xac>)
 8003498:	f001 fecd 	bl	8005236 <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 800349c:	2201      	movs	r2, #1
 800349e:	2101      	movs	r1, #1
 80034a0:	481b      	ldr	r0, [pc, #108]	; (8003510 <LCD9488_WriteData_16Bit+0xac>)
 80034a2:	f001 fec8 	bl	8005236 <HAL_GPIO_WritePin>
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80034a6:	bf00      	nop
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <LCD9488_WriteData_16Bit+0xb0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f8      	beq.n	80034a8 <LCD9488_WriteData_16Bit+0x44>
		LCD_SPI.Instance->DR = r;
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <LCD9488_WriteData_16Bit+0xb0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80034be:	bf00      	nop
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <LCD9488_WriteData_16Bit+0xb0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f8      	beq.n	80034c0 <LCD9488_WriteData_16Bit+0x5c>
		LCD_SPI.Instance->DR = g;
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <LCD9488_WriteData_16Bit+0xb0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	7bba      	ldrb	r2, [r7, #14]
 80034d4:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80034d6:	bf00      	nop
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <LCD9488_WriteData_16Bit+0xb0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f8      	beq.n	80034d8 <LCD9488_WriteData_16Bit+0x74>
		LCD_SPI.Instance->DR = b;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <LCD9488_WriteData_16Bit+0xb0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	7b7a      	ldrb	r2, [r7, #13]
 80034ec:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80034ee:	bf00      	nop
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <LCD9488_WriteData_16Bit+0xb0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f8      	beq.n	80034f0 <LCD9488_WriteData_16Bit+0x8c>

	LCD9488_CS_SET;
 80034fe:	2201      	movs	r2, #1
 8003500:	2104      	movs	r1, #4
 8003502:	4803      	ldr	r0, [pc, #12]	; (8003510 <LCD9488_WriteData_16Bit+0xac>)
 8003504:	f001 fe97 	bl	8005236 <HAL_GPIO_WritePin>
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40020800 	.word	0x40020800
 8003514:	20003ba8 	.word	0x20003ba8

08003518 <LCD9488_GUI_Draw_Point>:
//=======================================================================================
void LCD9488_GUI_Draw_Point(uint16_t x,uint16_t y)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	460a      	mov	r2, r1
 8003522:	80fb      	strh	r3, [r7, #6]
 8003524:	4613      	mov	r3, r2
 8003526:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetCursor(x,y);
 8003528:	88ba      	ldrh	r2, [r7, #4]
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f93e 	bl	80037b0 <LCD9488_GUI_SetCursor>
	LCD9488_WriteData_16Bit(LCD9488_Point_Color);
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <LCD9488_GUI_Draw_Point+0x30>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff93 	bl	8003464 <LCD9488_WriteData_16Bit>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	2000032c 	.word	0x2000032c

0800354c <LCD9488_GUI_Clear>:
//=======================================================================================
void LCD9488_GUI_Clear(uint16_t Color)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]
	LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 8003556:	4b32      	ldr	r3, [pc, #200]	; (8003620 <LCD9488_GUI_Clear+0xd4>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	4b30      	ldr	r3, [pc, #192]	; (8003620 <LCD9488_GUI_Clear+0xd4>)
 8003560:	885b      	ldrh	r3, [r3, #2]
 8003562:	3b01      	subs	r3, #1
 8003564:	b29b      	uxth	r3, r3
 8003566:	2100      	movs	r1, #0
 8003568:	2000      	movs	r0, #0
 800356a:	f000 f875 	bl	8003658 <LCD9488_GUI_SetWindows>
	LCD9488_CS_CLR;
 800356e:	2200      	movs	r2, #0
 8003570:	2104      	movs	r1, #4
 8003572:	482c      	ldr	r0, [pc, #176]	; (8003624 <LCD9488_GUI_Clear+0xd8>)
 8003574:	f001 fe5f 	bl	8005236 <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 8003578:	2201      	movs	r2, #1
 800357a:	2101      	movs	r1, #1
 800357c:	4829      	ldr	r0, [pc, #164]	; (8003624 <LCD9488_GUI_Clear+0xd8>)
 800357e:	f001 fe5a 	bl	8005236 <HAL_GPIO_WritePin>
	uint32_t cnt = LCD9488_DEV.Height * LCD9488_DEV.Width;
 8003582:	4b27      	ldr	r3, [pc, #156]	; (8003620 <LCD9488_GUI_Clear+0xd4>)
 8003584:	885b      	ldrh	r3, [r3, #2]
 8003586:	461a      	mov	r2, r3
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <LCD9488_GUI_Clear+0xd4>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	fb03 f302 	mul.w	r3, r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
	uint8_t r = (Color>>8)&0xF8; 	// RED Color
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	b29b      	uxth	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f023 0307 	bic.w	r3, r3, #7
 800359e:	72fb      	strb	r3, [r7, #11]
	uint8_t g = (Color>>3)&0xFC; 	// Green Color
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f023 0303 	bic.w	r3, r3, #3
 80035ac:	72bb      	strb	r3, [r7, #10]
	uint8_t b = Color<<3; 			// Blue Color
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	727b      	strb	r3, [r7, #9]

	while (cnt)
 80035b6:	e026      	b.n	8003606 <LCD9488_GUI_Clear+0xba>
	{
		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80035b8:	bf00      	nop
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <LCD9488_GUI_Clear+0xdc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f8      	beq.n	80035ba <LCD9488_GUI_Clear+0x6e>
			LCD_SPI.Instance->DR = r;//RED
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <LCD9488_GUI_Clear+0xdc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	7afa      	ldrb	r2, [r7, #11]
 80035ce:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80035d0:	bf00      	nop
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <LCD9488_GUI_Clear+0xdc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f8      	beq.n	80035d2 <LCD9488_GUI_Clear+0x86>
			LCD_SPI.Instance->DR = g;//GREEN
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <LCD9488_GUI_Clear+0xdc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	7aba      	ldrb	r2, [r7, #10]
 80035e6:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80035e8:	bf00      	nop
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <LCD9488_GUI_Clear+0xdc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f8      	beq.n	80035ea <LCD9488_GUI_Clear+0x9e>
			LCD_SPI.Instance->DR = b;//BLUE
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <LCD9488_GUI_Clear+0xdc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	7a7a      	ldrb	r2, [r7, #9]
 80035fe:	60da      	str	r2, [r3, #12]

		cnt--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3b01      	subs	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
	while (cnt)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1d5      	bne.n	80035b8 <LCD9488_GUI_Clear+0x6c>
	}
	LCD9488_CS_SET;
 800360c:	2201      	movs	r2, #1
 800360e:	2104      	movs	r1, #4
 8003610:	4804      	ldr	r0, [pc, #16]	; (8003624 <LCD9488_GUI_Clear+0xd8>)
 8003612:	f001 fe10 	bl	8005236 <HAL_GPIO_WritePin>
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20003f20 	.word	0x20003f20
 8003624:	40020800 	.word	0x40020800
 8003628:	20003ba8 	.word	0x20003ba8

0800362c <LCD9488_RESET>:

//=======================================================================================
void LCD9488_RESET(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	LCD9488_RST_CLR;
 8003630:	2200      	movs	r2, #0
 8003632:	2102      	movs	r1, #2
 8003634:	4807      	ldr	r0, [pc, #28]	; (8003654 <LCD9488_RESET+0x28>)
 8003636:	f001 fdfe 	bl	8005236 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800363a:	2064      	movs	r0, #100	; 0x64
 800363c:	f000 fb7e 	bl	8003d3c <HAL_Delay>
	LCD9488_RST_SET;
 8003640:	2201      	movs	r2, #1
 8003642:	2102      	movs	r1, #2
 8003644:	4803      	ldr	r0, [pc, #12]	; (8003654 <LCD9488_RESET+0x28>)
 8003646:	f001 fdf6 	bl	8005236 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800364a:	2032      	movs	r0, #50	; 0x32
 800364c:	f000 fb76 	bl	8003d3c <HAL_Delay>
}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40020800 	.word	0x40020800

08003658 <LCD9488_GUI_SetWindows>:
//=======================================================================================
void LCD9488_GUI_SetWindows(uint16_t xStar, uint16_t yStar,uint16_t xEnd,uint16_t yEnd)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4604      	mov	r4, r0
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4623      	mov	r3, r4
 8003668:	80fb      	strh	r3, [r7, #6]
 800366a:	4603      	mov	r3, r0
 800366c:	80bb      	strh	r3, [r7, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	807b      	strh	r3, [r7, #2]
 8003672:	4613      	mov	r3, r2
 8003674:	803b      	strh	r3, [r7, #0]
	LCD9488_Transport_WR_REG(LCD9488_DEV.SetXcmd);
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <LCD9488_GUI_SetWindows+0xa4>)
 8003678:	895b      	ldrh	r3, [r3, #10]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fe8b 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(xStar>>8);
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	b29b      	uxth	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff feaa 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xStar);
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fea5 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(xEnd>>8);
 800369a:	887b      	ldrh	r3, [r7, #2]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	b29b      	uxth	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fe9e 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xEnd);
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fe99 	bl	80033e4 <LCD9488_Transport_WR_DATA>

	LCD9488_Transport_WR_REG(LCD9488_DEV.SetYcmd);
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <LCD9488_GUI_SetWindows+0xa4>)
 80036b4:	899b      	ldrh	r3, [r3, #12]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fe6d 	bl	8003398 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(yStar>>8);
 80036be:	88bb      	ldrh	r3, [r7, #4]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe8c 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yStar);
 80036cc:	88bb      	ldrh	r3, [r7, #4]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fe87 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(yEnd>>8);
 80036d6:	883b      	ldrh	r3, [r7, #0]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	b29b      	uxth	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fe80 	bl	80033e4 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yEnd);
 80036e4:	883b      	ldrh	r3, [r7, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fe7b 	bl	80033e4 <LCD9488_Transport_WR_DATA>

	LCD9488_WriteRAM_Prepare();
 80036ee:	f7ff fead 	bl	800344c <LCD9488_WriteRAM_Prepare>
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd90      	pop	{r4, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20003f20 	.word	0x20003f20

08003700 <LCD9488_GUI_SetOrientation>:
//=======================================================================================
void LCD9488_GUI_SetOrientation(uint8_t direction)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
			LCD9488_DEV.SetXcmd=0x2A;
 800370a:	4b28      	ldr	r3, [pc, #160]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 800370c:	222a      	movs	r2, #42	; 0x2a
 800370e:	815a      	strh	r2, [r3, #10]
			LCD9488_DEV.SetYcmd=0x2B;
 8003710:	4b26      	ldr	r3, [pc, #152]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 8003712:	222b      	movs	r2, #43	; 0x2b
 8003714:	819a      	strh	r2, [r3, #12]
			LCD9488_DEV.WramCmd=0x2C;
 8003716:	4b25      	ldr	r3, [pc, #148]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 8003718:	222c      	movs	r2, #44	; 0x2c
 800371a:	811a      	strh	r2, [r3, #8]
	switch(direction){
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d83e      	bhi.n	80037a0 <LCD9488_GUI_SetOrientation+0xa0>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <LCD9488_GUI_SetOrientation+0x28>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003739 	.word	0x08003739
 800372c:	08003753 	.word	0x08003753
 8003730:	0800376d 	.word	0x0800376d
 8003734:	08003787 	.word	0x08003787
		case 0:										// 0 degree
			LCD9488_DEV.Width=LCD_W;
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 800373a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800373e:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 8003742:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003746:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8003748:	2108      	movs	r1, #8
 800374a:	2036      	movs	r0, #54	; 0x36
 800374c:	f7ff fe68 	bl	8003420 <LCD9488_WriteReg>
		break;
 8003750:	e027      	b.n	80037a2 <LCD9488_GUI_SetOrientation+0xa2>
		case 1:										// 90 degree
			LCD9488_DEV.Width=LCD_H;
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 8003754:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003758:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 800375c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003760:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003762:	2168      	movs	r1, #104	; 0x68
 8003764:	2036      	movs	r0, #54	; 0x36
 8003766:	f7ff fe5b 	bl	8003420 <LCD9488_WriteReg>
		break;
 800376a:	e01a      	b.n	80037a2 <LCD9488_GUI_SetOrientation+0xa2>
		case 2:										// 180 degree
			LCD9488_DEV.Width=LCD_W;
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 800376e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003772:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 8003776:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800377a:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800377c:	21c8      	movs	r1, #200	; 0xc8
 800377e:	2036      	movs	r0, #54	; 0x36
 8003780:	f7ff fe4e 	bl	8003420 <LCD9488_WriteReg>
		break;
 8003784:	e00d      	b.n	80037a2 <LCD9488_GUI_SetOrientation+0xa2>
		case 3:										// 270 degree
			LCD9488_DEV.Width=LCD_H;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 8003788:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800378c:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <LCD9488_GUI_SetOrientation+0xac>)
 8003790:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003794:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003796:	21a8      	movs	r1, #168	; 0xa8
 8003798:	2036      	movs	r0, #54	; 0x36
 800379a:	f7ff fe41 	bl	8003420 <LCD9488_WriteReg>
		break;
 800379e:	e000      	b.n	80037a2 <LCD9488_GUI_SetOrientation+0xa2>
		default:break;
 80037a0:	bf00      	nop
	}
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20003f20 	.word	0x20003f20

080037b0 <LCD9488_GUI_SetCursor>:
//=======================================================================================
void LCD9488_GUI_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	460a      	mov	r2, r1
 80037ba:	80fb      	strh	r3, [r7, #6]
 80037bc:	4613      	mov	r3, r2
 80037be:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetWindows(Xpos,Ypos,Xpos,Ypos);										// Окно размером в 1 точку
 80037c0:	88bb      	ldrh	r3, [r7, #4]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	88b9      	ldrh	r1, [r7, #4]
 80037c6:	88f8      	ldrh	r0, [r7, #6]
 80037c8:	f7ff ff46 	bl	8003658 <LCD9488_GUI_SetWindows>
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <LCD9488_GUI_SetFont>:
		LCD9488_GUI_Fill(a,y,b,y,LCD9488_Point_Color);
	}
}
//=======================================================================================
void LCD9488_GUI_SetFont(unsigned char* AFont, uint16_t AFontColor, uint16_t ABackgroundColor) // Установить параметры для выбранного шрифта
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	803b      	strh	r3, [r7, #0]
	LCD9488_CurrentFont = AFont;														// Указатель на массив с данными шрифта
 80037e4:	4a15      	ldr	r2, [pc, #84]	; (800383c <LCD9488_GUI_SetFont+0x68>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6013      	str	r3, [r2, #0]
	LCD9488_Point_Color = AFontColor;													// Цвет пикселей рисования
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <LCD9488_GUI_SetFont+0x6c>)
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	8013      	strh	r3, [r2, #0]
	LCD9488_Back_Color  = ABackgroundColor;												// Цвет фона
 80037f0:	4a14      	ldr	r2, [pc, #80]	; (8003844 <LCD9488_GUI_SetFont+0x70>)
 80037f2:	883b      	ldrh	r3, [r7, #0]
 80037f4:	8013      	strh	r3, [r2, #0]

	// Прочитать параметры шрифта
	LCD9488_CurrentFont_FirstChar		= LCD9488_CurrentFont[0];          				// Первый символ в наборе
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <LCD9488_GUI_SetFont+0x68>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <LCD9488_GUI_SetFont+0x74>)
 80037fe:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_LastChar		= LCD9488_CurrentFont[1];          				// Последний символ в наборе
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <LCD9488_GUI_SetFont+0x68>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	785a      	ldrb	r2, [r3, #1]
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <LCD9488_GUI_SetFont+0x78>)
 8003808:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_Offset			= LCD9488_CurrentFont[2];          				// Число байтов на 1 символ в массиве шрифта
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <LCD9488_GUI_SetFont+0x68>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	789a      	ldrb	r2, [r3, #2]
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <LCD9488_GUI_SetFont+0x7c>)
 8003812:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixHoriz 		= LCD9488_CurrentFont[3];           			// Размер символов по горизонтали
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <LCD9488_GUI_SetFont+0x68>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	78da      	ldrb	r2, [r3, #3]
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <LCD9488_GUI_SetFont+0x80>)
 800381c:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixVert 		= LCD9488_CurrentFont[4];                   	// Размер символов по вертикали
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <LCD9488_GUI_SetFont+0x68>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	791a      	ldrb	r2, [r3, #4]
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <LCD9488_GUI_SetFont+0x84>)
 8003826:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_BytesPerLine	= LCD9488_CurrentFont[5];                   	// Число байт на 1 горизонтальную линию в символе
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <LCD9488_GUI_SetFont+0x68>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	795a      	ldrb	r2, [r3, #5]
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <LCD9488_GUI_SetFont+0x88>)
 8003830:	701a      	strb	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	200039d4 	.word	0x200039d4
 8003840:	2000032c 	.word	0x2000032c
 8003844:	20000004 	.word	0x20000004
 8003848:	200039e3 	.word	0x200039e3
 800384c:	200039d8 	.word	0x200039d8
 8003850:	200039e2 	.word	0x200039e2
 8003854:	200039e1 	.word	0x200039e1
 8003858:	200039e0 	.word	0x200039e0
 800385c:	200039e4 	.word	0x200039e4

08003860 <LCD9488_GUI_GotoXY>:
//=======================================================================================
void LCD9488_GUI_GotoXY(uint16_t x1, uint16_t y1)										// Установить координаты начала для печати символа или строки
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	460a      	mov	r2, r1
 800386a:	80fb      	strh	r3, [r7, #6]
 800386c:	4613      	mov	r3, r2
 800386e:	80bb      	strh	r3, [r7, #4]
	char_x = x1;
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	4a05      	ldr	r2, [pc, #20]	; (8003888 <LCD9488_GUI_GotoXY+0x28>)
 8003874:	6013      	str	r3, [r2, #0]
	char_y = y1;
 8003876:	88bb      	ldrh	r3, [r7, #4]
 8003878:	4a04      	ldr	r2, [pc, #16]	; (800388c <LCD9488_GUI_GotoXY+0x2c>)
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	200039dc 	.word	0x200039dc
 800388c:	200039e8 	.word	0x200039e8

08003890 <LCD9488_GUI_Draw_Char>:
//=======================================================================================
void LCD9488_GUI_Draw_Char(uint16_t fc, uint16_t bc, uint8_t c, ADrawType Overlying)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	4604      	mov	r4, r0
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4623      	mov	r3, r4
 80038a0:	80fb      	strh	r3, [r7, #6]
 80038a2:	4603      	mov	r3, r0
 80038a4:	80bb      	strh	r3, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	70fb      	strb	r3, [r7, #3]
 80038aa:	4613      	mov	r3, r2
 80038ac:	70bb      	strb	r3, [r7, #2]
    unsigned int b;
    unsigned char* CurCharBitmap;														// начало данных для текущего символа в массиве шрифта
    unsigned char z, cur_width;

    if ((c < LCD9488_CurrentFont_FirstChar) || (c > LCD9488_CurrentFont_LastChar))
 80038ae:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <LCD9488_GUI_Draw_Char+0x1f0>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	f0c0 817b 	bcc.w	8003bb0 <LCD9488_GUI_Draw_Char+0x320>
 80038ba:	4b72      	ldr	r3, [pc, #456]	; (8003a84 <LCD9488_GUI_Draw_Char+0x1f4>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f200 8175 	bhi.w	8003bb0 <LCD9488_GUI_Draw_Char+0x320>
    {
    	return;  																		// работаем только с символами, которые есть в шрифте
    }

	c = c - LCD9488_CurrentFont_FirstChar; 												// сдвигаем до 1го символа в наборе (см ASCII таблицу)
 80038c6:	4b6e      	ldr	r3, [pc, #440]	; (8003a80 <LCD9488_GUI_Draw_Char+0x1f0>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	70fb      	strb	r3, [r7, #3]

    if (char_x + LCD9488_CurrentFont_PixHoriz > LCD9488_DEV.Width)
 80038d0:	4b6d      	ldr	r3, [pc, #436]	; (8003a88 <LCD9488_GUI_Draw_Char+0x1f8>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b6d      	ldr	r3, [pc, #436]	; (8003a8c <LCD9488_GUI_Draw_Char+0x1fc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	4a6c      	ldr	r2, [pc, #432]	; (8003a90 <LCD9488_GUI_Draw_Char+0x200>)
 80038de:	8812      	ldrh	r2, [r2, #0]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d918      	bls.n	8003916 <LCD9488_GUI_Draw_Char+0x86>
     {
         char_x = 0;
 80038e4:	4b69      	ldr	r3, [pc, #420]	; (8003a8c <LCD9488_GUI_Draw_Char+0x1fc>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
         char_y = char_y + LCD9488_CurrentFont_PixVert;
 80038ea:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <LCD9488_GUI_Draw_Char+0x204>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b69      	ldr	r3, [pc, #420]	; (8003a98 <LCD9488_GUI_Draw_Char+0x208>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	4a68      	ldr	r2, [pc, #416]	; (8003a98 <LCD9488_GUI_Draw_Char+0x208>)
 80038f8:	6013      	str	r3, [r2, #0]
         if (char_y >= (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <LCD9488_GUI_Draw_Char+0x200>)
 80038fc:	885b      	ldrh	r3, [r3, #2]
 80038fe:	461a      	mov	r2, r3
 8003900:	4b64      	ldr	r3, [pc, #400]	; (8003a94 <LCD9488_GUI_Draw_Char+0x204>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	461a      	mov	r2, r3
 8003908:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <LCD9488_GUI_Draw_Char+0x208>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d802      	bhi.n	8003916 <LCD9488_GUI_Draw_Char+0x86>
         {
             char_y = 0;
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <LCD9488_GUI_Draw_Char+0x208>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
         }
     }

    CurCharBitmap = &LCD9488_CurrentFont[((c) * LCD9488_CurrentFont_Offset) + 6]; 		// начало массива текущего символа (с = номер символа; offset = сколько байтов на символ в шрифте; 6 = первые 6 байт во всем массиве - заголовок с параметрами шрифта)
 8003916:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <LCD9488_GUI_Draw_Char+0x20c>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	4960      	ldr	r1, [pc, #384]	; (8003aa0 <LCD9488_GUI_Draw_Char+0x210>)
 800391e:	7809      	ldrb	r1, [r1, #0]
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	3306      	adds	r3, #6
 8003926:	4413      	add	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

    cur_width = CurCharBitmap[0];                          								// ширина текущего символа - в начале каждого символа первый байт - его ширина
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	74fb      	strb	r3, [r7, #19]

    if (Overlying == DRAW_OVERLYING)													// Если режим наложения - рисуем только значащие точки символа поверх того что уже нарисовано (медленно)
 8003930:	78bb      	ldrb	r3, [r7, #2]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d150      	bne.n	80039d8 <LCD9488_GUI_Draw_Char+0x148>
    {
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8003936:	2300      	movs	r3, #0
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e03c      	b.n	80039b6 <LCD9488_GUI_Draw_Char+0x126>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 800393c:	2300      	movs	r3, #0
 800393e:	77bb      	strb	r3, [r7, #30]
 8003940:	e031      	b.n	80039a6 <LCD9488_GUI_Draw_Char+0x116>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3) + 1];
 8003942:	4b58      	ldr	r3, [pc, #352]	; (8003aa4 <LCD9488_GUI_Draw_Char+0x214>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	7fbb      	ldrb	r3, [r7, #30]
 800394a:	fb03 f302 	mul.w	r3, r3, r2
 800394e:	7ffa      	ldrb	r2, [r7, #31]
 8003950:	08d2      	lsrs	r2, r2, #3
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	4413      	add	r3, r2
 8003956:	3301      	adds	r3, #1
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	74bb      	strb	r3, [r7, #18]

               b = 1 << (cur_y & 0x07);
 8003960:	7ffb      	ldrb	r3, [r7, #31]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 800396e:	7cba      	ldrb	r2, [r7, #18]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <LCD9488_GUI_Draw_Char+0x110>
               {

               }
               else																		// точка изображения символа
               {
            	   LCD9488_Point_Color = fc;											// устанавливаем цвет точки
 8003978:	4a4b      	ldr	r2, [pc, #300]	; (8003aa8 <LCD9488_GUI_Draw_Char+0x218>)
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	8013      	strh	r3, [r2, #0]
            	   LCD9488_GUI_Draw_Point(char_x + cur_x, char_y + cur_y);				// Рисуем точку по координатам
 800397e:	7fbb      	ldrb	r3, [r7, #30]
 8003980:	b29a      	uxth	r2, r3
 8003982:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <LCD9488_GUI_Draw_Char+0x1fc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	4413      	add	r3, r2
 800398a:	b298      	uxth	r0, r3
 800398c:	7ffb      	ldrb	r3, [r7, #31]
 800398e:	b29a      	uxth	r2, r3
 8003990:	4b41      	ldr	r3, [pc, #260]	; (8003a98 <LCD9488_GUI_Draw_Char+0x208>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4413      	add	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	4619      	mov	r1, r3
 800399c:	f7ff fdbc 	bl	8003518 <LCD9488_GUI_Draw_Point>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80039a0:	7fbb      	ldrb	r3, [r7, #30]
 80039a2:	3301      	adds	r3, #1
 80039a4:	77bb      	strb	r3, [r7, #30]
 80039a6:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <LCD9488_GUI_Draw_Char+0x1f8>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	7fba      	ldrb	r2, [r7, #30]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d3c8      	bcc.n	8003942 <LCD9488_GUI_Draw_Char+0xb2>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80039b0:	7ffb      	ldrb	r3, [r7, #31]
 80039b2:	3301      	adds	r3, #1
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <LCD9488_GUI_Draw_Char+0x204>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	7ffa      	ldrb	r2, [r7, #31]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d3bd      	bcc.n	800393c <LCD9488_GUI_Draw_Char+0xac>
               }


           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 80039c0:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <LCD9488_GUI_Draw_Char+0x200>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <LCD9488_GUI_Draw_Char+0x200>)
 80039ca:	885b      	ldrh	r3, [r3, #2]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2100      	movs	r1, #0
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7ff fe40 	bl	8003658 <LCD9488_GUI_SetWindows>

    }
    if (Overlying == DRAW_NO_OVERLYING)													// Если НЕ режим наложения - рисуем символ цветом fc на фоне bc
 80039d8:	78bb      	ldrb	r3, [r7, #2]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 80d1 	bne.w	8003b82 <LCD9488_GUI_Draw_Char+0x2f2>
    {
    	uint8_t red, green, blue;														// цветовые компопнеты точки

        LCD9488_GUI_SetWindows(char_x, char_y, char_x + LCD9488_CurrentFont_PixHoriz - 1, char_y + LCD9488_CurrentFont_PixVert);
 80039e0:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <LCD9488_GUI_Draw_Char+0x1fc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b298      	uxth	r0, r3
 80039e6:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <LCD9488_GUI_Draw_Char+0x208>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b299      	uxth	r1, r3
 80039ec:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <LCD9488_GUI_Draw_Char+0x1f8>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <LCD9488_GUI_Draw_Char+0x1fc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29c      	uxth	r4, r3
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <LCD9488_GUI_Draw_Char+0x204>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <LCD9488_GUI_Draw_Char+0x208>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4622      	mov	r2, r4
 8003a12:	f7ff fe21 	bl	8003658 <LCD9488_GUI_SetWindows>

        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8003a16:	2300      	movs	r3, #0
 8003a18:	76bb      	strb	r3, [r7, #26]
 8003a1a:	e0a0      	b.n	8003b5e <LCD9488_GUI_Draw_Char+0x2ce>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	767b      	strb	r3, [r7, #25]
 8003a20:	e094      	b.n	8003b4c <LCD9488_GUI_Draw_Char+0x2bc>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3)+1];
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <LCD9488_GUI_Draw_Char+0x214>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	7e7b      	ldrb	r3, [r7, #25]
 8003a2a:	fb03 f302 	mul.w	r3, r3, r2
 8003a2e:	7eba      	ldrb	r2, [r7, #26]
 8003a30:	08d2      	lsrs	r2, r2, #3
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	4413      	add	r3, r2
 8003a36:	3301      	adds	r3, #1
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	74bb      	strb	r3, [r7, #18]
               b = 1 << (cur_y & 0x07);
 8003a40:	7ebb      	ldrb	r3, [r7, #26]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	2201      	movs	r2, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 8003a4e:	7cba      	ldrb	r2, [r7, #18]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d129      	bne.n	8003aac <LCD9488_GUI_Draw_Char+0x21c>
               {
            	   red		= (bc>>8)&0xF8;
 8003a58:	88bb      	ldrh	r3, [r7, #4]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	777b      	strb	r3, [r7, #29]
            	   green 	= (bc>>3)&0xFC;
 8003a66:	88bb      	ldrh	r3, [r7, #4]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f023 0303 	bic.w	r3, r3, #3
 8003a72:	773b      	strb	r3, [r7, #28]
            	   blue	= bc<<3;
 8003a74:	88bb      	ldrh	r3, [r7, #4]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	76fb      	strb	r3, [r7, #27]
 8003a7c:	e028      	b.n	8003ad0 <LCD9488_GUI_Draw_Char+0x240>
 8003a7e:	bf00      	nop
 8003a80:	200039e3 	.word	0x200039e3
 8003a84:	200039d8 	.word	0x200039d8
 8003a88:	200039e1 	.word	0x200039e1
 8003a8c:	200039dc 	.word	0x200039dc
 8003a90:	20003f20 	.word	0x20003f20
 8003a94:	200039e0 	.word	0x200039e0
 8003a98:	200039e8 	.word	0x200039e8
 8003a9c:	200039d4 	.word	0x200039d4
 8003aa0:	200039e2 	.word	0x200039e2
 8003aa4:	200039e4 	.word	0x200039e4
 8003aa8:	2000032c 	.word	0x2000032c
               }
               else																		// точка изображения символа
               {
                  	red		= (fc>>8)&0xF8;
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f023 0307 	bic.w	r3, r3, #7
 8003ab8:	777b      	strb	r3, [r7, #29]
                  	green 	= (fc>>3)&0xFC;
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	773b      	strb	r3, [r7, #28]
                  	blue	= fc<<3;
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	76fb      	strb	r3, [r7, #27]
               }
               // Пишет компонеты цветов для текущей точик в символе
               LCD9488_CS_CLR;
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	4838      	ldr	r0, [pc, #224]	; (8003bb8 <LCD9488_GUI_Draw_Char+0x328>)
 8003ad6:	f001 fbae 	bl	8005236 <HAL_GPIO_WritePin>
               LCD9488_RS_SET;
 8003ada:	2201      	movs	r2, #1
 8003adc:	2101      	movs	r1, #1
 8003ade:	4836      	ldr	r0, [pc, #216]	; (8003bb8 <LCD9488_GUI_Draw_Char+0x328>)
 8003ae0:	f001 fba9 	bl	8005236 <HAL_GPIO_WritePin>
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8003ae4:	bf00      	nop
 8003ae6:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <LCD9488_GUI_Draw_Char+0x32c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f8      	beq.n	8003ae6 <LCD9488_GUI_Draw_Char+0x256>
               	   LCD_SPI.Instance->DR = red;
 8003af4:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <LCD9488_GUI_Draw_Char+0x32c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	7f7a      	ldrb	r2, [r7, #29]
 8003afa:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8003afc:	bf00      	nop
 8003afe:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <LCD9488_GUI_Draw_Char+0x32c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f8      	beq.n	8003afe <LCD9488_GUI_Draw_Char+0x26e>
               	   LCD_SPI.Instance->DR = green;
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <LCD9488_GUI_Draw_Char+0x32c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	7f3a      	ldrb	r2, [r7, #28]
 8003b12:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8003b14:	bf00      	nop
 8003b16:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <LCD9488_GUI_Draw_Char+0x32c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f8      	beq.n	8003b16 <LCD9488_GUI_Draw_Char+0x286>
               	   LCD_SPI.Instance->DR = blue;
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <LCD9488_GUI_Draw_Char+0x32c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	7efa      	ldrb	r2, [r7, #27]
 8003b2a:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8003b2c:	bf00      	nop
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <LCD9488_GUI_Draw_Char+0x32c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f8      	beq.n	8003b2e <LCD9488_GUI_Draw_Char+0x29e>

               LCD9488_CS_SET;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	2104      	movs	r1, #4
 8003b40:	481d      	ldr	r0, [pc, #116]	; (8003bb8 <LCD9488_GUI_Draw_Char+0x328>)
 8003b42:	f001 fb78 	bl	8005236 <HAL_GPIO_WritePin>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 8003b46:	7e7b      	ldrb	r3, [r7, #25]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	767b      	strb	r3, [r7, #25]
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <LCD9488_GUI_Draw_Char+0x330>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	7e7a      	ldrb	r2, [r7, #25]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	f4ff af65 	bcc.w	8003a22 <LCD9488_GUI_Draw_Char+0x192>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8003b58:	7ebb      	ldrb	r3, [r7, #26]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	76bb      	strb	r3, [r7, #26]
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <LCD9488_GUI_Draw_Char+0x334>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	7eba      	ldrb	r2, [r7, #26]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f4ff af59 	bcc.w	8003a1c <LCD9488_GUI_Draw_Char+0x18c>
           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <LCD9488_GUI_Draw_Char+0x338>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <LCD9488_GUI_Draw_Char+0x338>)
 8003b74:	885b      	ldrh	r3, [r3, #2]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7ff fd6b 	bl	8003658 <LCD9488_GUI_SetWindows>
    }

    // Сдвигаем позицию (char_x, char_y) для печати следующего символа
    if ((cur_width + 2) < LCD9488_CurrentFont_PixHoriz)
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	3302      	adds	r3, #2
 8003b86:	4a0e      	ldr	r2, [pc, #56]	; (8003bc0 <LCD9488_GUI_Draw_Char+0x330>)
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	da07      	bge.n	8003b9e <LCD9488_GUI_Draw_Char+0x30e>
    {
        char_x = char_x + cur_width + 2;
 8003b8e:	7cfa      	ldrb	r2, [r7, #19]
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <LCD9488_GUI_Draw_Char+0x33c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	3302      	adds	r3, #2
 8003b98:	4a0c      	ldr	r2, [pc, #48]	; (8003bcc <LCD9488_GUI_Draw_Char+0x33c>)
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	e009      	b.n	8003bb2 <LCD9488_GUI_Draw_Char+0x322>
    }
    else
    {
    	char_x = char_x + LCD9488_CurrentFont_PixHoriz;
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <LCD9488_GUI_Draw_Char+0x330>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <LCD9488_GUI_Draw_Char+0x33c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <LCD9488_GUI_Draw_Char+0x33c>)
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e000      	b.n	8003bb2 <LCD9488_GUI_Draw_Char+0x322>
    	return;  																		// работаем только с символами, которые есть в шрифте
 8003bb0:	bf00      	nop
    }
}
 8003bb2:	3724      	adds	r7, #36	; 0x24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}
 8003bb8:	40020800 	.word	0x40020800
 8003bbc:	20003ba8 	.word	0x20003ba8
 8003bc0:	200039e1 	.word	0x200039e1
 8003bc4:	200039e0 	.word	0x200039e0
 8003bc8:	20003f20 	.word	0x20003f20
 8003bcc:	200039dc 	.word	0x200039dc

08003bd0 <LCD9488_GUI_Draw_StringColor>:
        p++;
    }
}
//=======================================================================================
void LCD9488_GUI_Draw_StringColor(uint16_t x, uint16_t y, char* str, unsigned char* font, uint16_t fontcolor, uint16_t bgcolor, ADrawType Overlying)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60ba      	str	r2, [r7, #8]
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	4603      	mov	r3, r0
 8003bdc:	81fb      	strh	r3, [r7, #14]
 8003bde:	460b      	mov	r3, r1
 8003be0:	81bb      	strh	r3, [r7, #12]
	uint16_t x0 = x;
 8003be2:	89fb      	ldrh	r3, [r7, #14]
 8003be4:	82fb      	strh	r3, [r7, #22]

  	LCD9488_GUI_SetFont(font, fontcolor, bgcolor);
 8003be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be8:	8c3b      	ldrh	r3, [r7, #32]
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fdf1 	bl	80037d4 <LCD9488_GUI_SetFont>
  	LCD9488_GUI_GotoXY(x, y);
 8003bf2:	89ba      	ldrh	r2, [r7, #12]
 8003bf4:	89fb      	ldrh	r3, [r7, #14]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fe31 	bl	8003860 <LCD9488_GUI_GotoXY>
    while(*str != 0)
 8003bfe:	e030      	b.n	8003c62 <LCD9488_GUI_Draw_StringColor+0x92>
    {
		if( x > (LCD9488_DEV.Width - LCD9488_CurrentFont_PixHoriz/2) || y > (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 8003c00:	89fa      	ldrh	r2, [r7, #14]
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <LCD9488_GUI_Draw_StringColor+0xa4>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <LCD9488_GUI_Draw_StringColor+0xa8>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	1acb      	subs	r3, r1, r3
 8003c12:	429a      	cmp	r2, r3
 8003c14:	dc2a      	bgt.n	8003c6c <LCD9488_GUI_Draw_StringColor+0x9c>
 8003c16:	89ba      	ldrh	r2, [r7, #12]
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <LCD9488_GUI_Draw_StringColor+0xa4>)
 8003c1a:	885b      	ldrh	r3, [r3, #2]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <LCD9488_GUI_Draw_StringColor+0xac>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dc21      	bgt.n	8003c6c <LCD9488_GUI_Draw_StringColor+0x9c>
			return;

		if(*str == 0x0D)															// конец строки, перевод на новую строку
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b0d      	cmp	r3, #13
 8003c2e:	d10b      	bne.n	8003c48 <LCD9488_GUI_Draw_StringColor+0x78>
        {
            y = y + LCD9488_CurrentFont_PixVert;
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <LCD9488_GUI_Draw_StringColor+0xac>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	89bb      	ldrh	r3, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	81bb      	strh	r3, [r7, #12]
			x = x0;
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	81fb      	strh	r3, [r7, #14]
            str++;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	3301      	adds	r3, #1
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	e009      	b.n	8003c5c <LCD9488_GUI_Draw_StringColor+0x8c>
        }
        else
		{
        	LCD9488_GUI_Draw_Char(LCD9488_Point_Color,LCD9488_Back_Color,*str, Overlying);
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <LCD9488_GUI_Draw_StringColor+0xb0>)
 8003c4a:	8818      	ldrh	r0, [r3, #0]
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <LCD9488_GUI_Draw_StringColor+0xb4>)
 8003c4e:	8819      	ldrh	r1, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c58:	f7ff fe1a 	bl	8003890 <LCD9488_GUI_Draw_Char>
		}
		str++;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]
    while(*str != 0)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ca      	bne.n	8003c00 <LCD9488_GUI_Draw_StringColor+0x30>
 8003c6a:	e000      	b.n	8003c6e <LCD9488_GUI_Draw_StringColor+0x9e>
			return;
 8003c6c:	bf00      	nop
    }
}
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20003f20 	.word	0x20003f20
 8003c78:	200039e1 	.word	0x200039e1
 8003c7c:	200039e0 	.word	0x200039e0
 8003c80:	2000032c 	.word	0x2000032c
 8003c84:	20000004 	.word	0x20000004

08003c88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c8a:	e003      	b.n	8003c94 <LoopCopyDataInit>

08003c8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003c8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c92:	3104      	adds	r1, #4

08003c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c94:	480a      	ldr	r0, [pc, #40]	; (8003cc0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003c98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c9c:	d3f6      	bcc.n	8003c8c <CopyDataInit>
  ldr r2, =_sbss
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003ca0:	e002      	b.n	8003ca8 <LoopFillZerobss>

08003ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003ca2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003ca4:	f842 3b04 	str.w	r3, [r2], #4

08003ca8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003caa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003cac:	d3f9      	bcc.n	8003ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003cae:	f7ff f9d1 	bl	8003054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cb2:	f00d fa17 	bl	80110e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cb6:	f7fe fe6b 	bl	8002990 <main>
  bx lr
 8003cba:	4770      	bx	lr
  ldr r3, =_sidata
 8003cbc:	080196c8 	.word	0x080196c8
  ldr r0, =_sdata
 8003cc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003cc4:	20000310 	.word	0x20000310
  ldr r2, =_sbss
 8003cc8:	20000310 	.word	0x20000310
  ldr r3, = _ebss
 8003ccc:	20004b6c 	.word	0x20004b6c

08003cd0 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cd0:	e7fe      	b.n	8003cd0 <COMP_ACQ_IRQHandler>

08003cd2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cdc:	2003      	movs	r0, #3
 8003cde:	f000 fe81 	bl	80049e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7ff f870 	bl	8002dc8 <HAL_InitTick>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	71fb      	strb	r3, [r7, #7]
 8003cf2:	e001      	b.n	8003cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cf4:	f7ff f83a 	bl	8002d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_IncTick+0x1c>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_IncTick+0x20>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <HAL_IncTick+0x1c>)
 8003d14:	6013      	str	r3, [r2, #0]
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20003f30 	.word	0x20003f30
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <HAL_GetTick+0x10>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	20003f30 	.word	0x20003f30

08003d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff fff0 	bl	8003d28 <HAL_GetTick>
 8003d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d004      	beq.n	8003d60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_Delay+0x40>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d60:	bf00      	nop
 8003d62:	f7ff ffe1 	bl	8003d28 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d8f7      	bhi.n	8003d62 <HAL_Delay+0x26>
  {
  }
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000000c 	.word	0x2000000c

08003d80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08e      	sub	sp, #56	; 0x38
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e127      	b.n	8003ff0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d115      	bne.n	8003dda <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbc:	4b8e      	ldr	r3, [pc, #568]	; (8003ff8 <HAL_ADC_Init+0x278>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a8d      	ldr	r2, [pc, #564]	; (8003ff8 <HAL_ADC_Init+0x278>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	4b8b      	ldr	r3, [pc, #556]	; (8003ff8 <HAL_ADC_Init+0x278>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fd f8bb 	bl	8000f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80ff 	bne.w	8003fe6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003df0:	f023 0302 	bic.w	r3, r3, #2
 8003df4:	f043 0202 	orr.w	r2, r3, #2
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8003dfc:	4b7f      	ldr	r3, [pc, #508]	; (8003ffc <HAL_ADC_Init+0x27c>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	497c      	ldr	r1, [pc, #496]	; (8003ffc <HAL_ADC_Init+0x27c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8003e16:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e24:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	fa93 f3a3 	rbit	r3, r3
 8003e2c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8003e3a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e48:	4619      	mov	r1, r3
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8003e62:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8003e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e66:	4313      	orrs	r3, r2
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d007      	beq.n	8003e82 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d04f      	beq.n	8003f30 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e96:	4313      	orrs	r3, r2
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8003ea2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6912      	ldr	r2, [r2, #16]
 8003ea8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003eac:	d003      	beq.n	8003eb6 <HAL_ADC_Init+0x136>
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6912      	ldr	r2, [r2, #16]
 8003eb2:	2a01      	cmp	r2, #1
 8003eb4:	d102      	bne.n	8003ebc <HAL_ADC_Init+0x13c>
 8003eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eba:	e000      	b.n	8003ebe <HAL_ADC_Init+0x13e>
 8003ebc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8003ebe:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8003ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d125      	bne.n	8003f1c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d114      	bne.n	8003f04 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003ee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	fa92 f2a2 	rbit	r2, r2
 8003eec:	617a      	str	r2, [r7, #20]
  return result;
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	fab2 f282 	clz	r2, r2
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	4093      	lsls	r3, r2
 8003ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efe:	4313      	orrs	r3, r2
 8003f00:	633b      	str	r3, [r7, #48]	; 0x30
 8003f02:	e00b      	b.n	8003f1c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	f043 0201 	orr.w	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_ADC_Init+0x280>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_ADC_Init+0x284>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d003      	beq.n	8003f56 <HAL_ADC_Init+0x1d6>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d119      	bne.n	8003f8a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8003f6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	fa92 f2a2 	rbit	r2, r2
 8003f72:	60fa      	str	r2, [r7, #12]
  return result;
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	fab2 f282 	clz	r2, r2
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	fa03 f202 	lsl.w	r2, r3, r2
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
 8003f88:	e007      	b.n	8003f9a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_ADC_Init+0x288>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fc0:	e014      	b.n	8003fec <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	f023 0312 	bic.w	r3, r3, #18
 8003fca:	f043 0210 	orr.w	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003fe4:	e002      	b.n	8003fec <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3738      	adds	r7, #56	; 0x38
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40012700 	.word	0x40012700
 8004000:	fcfc16ff 	.word	0xfcfc16ff
 8004004:	c0fff189 	.word	0xc0fff189
 8004008:	bf80fffe 	.word	0xbf80fffe

0800400c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_ADC_Start+0x1a>
 8004022:	2302      	movs	r3, #2
 8004024:	e04e      	b.n	80040c4 <HAL_ADC_Start+0xb8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fb94 	bl	800475c <ADC_Enable>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d141      	bne.n	80040c2 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004068:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d106      	bne.n	800408c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	f023 0206 	bic.w	r2, r3, #6
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	651a      	str	r2, [r3, #80]	; 0x50
 800408a:	e002      	b.n	8004092 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040a2:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040c0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_Stop+0x1a>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e01a      	b.n	800411c <HAL_ADC_Stop+0x50>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fb8a 	bl	8004808 <ADC_ConversionStop_Disable>
 80040f4:	4603      	mov	r3, r0
 80040f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004140:	d113      	bne.n	800416a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800414c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004150:	d10b      	bne.n	800416a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e061      	b.n	800422e <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800416a:	f7ff fddd 	bl	8003d28 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004170:	e01a      	b.n	80041a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d016      	beq.n	80041a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_ADC_PollForConversion+0x6c>
 8004180:	f7ff fdd2 	bl	8003d28 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d20b      	bcs.n	80041a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004194:	f043 0204 	orr.w	r2, r3, #4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e042      	b.n	800422e <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0dd      	beq.n	8004172 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0212 	mvn.w	r2, #18
 80041c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d124      	bne.n	800422c <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d11f      	bne.n	800422c <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004204:	2b00      	cmp	r3, #0
 8004206:	d111      	bne.n	800422c <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b20      	cmp	r3, #32
 8004262:	d14e      	bne.n	8004302 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d147      	bne.n	8004302 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d12c      	bne.n	80042f2 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d127      	bne.n	80042f2 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d119      	bne.n	80042f2 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0220 	bic.w	r2, r2, #32
 80042cc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8ab 	bl	800444e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0212 	mvn.w	r2, #18
 8004300:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d15c      	bne.n	80043ca <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d155      	bne.n	80043ca <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d105      	bne.n	8004336 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d13a      	bne.n	80043ba <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800434e:	2b00      	cmp	r3, #0
 8004350:	d006      	beq.n	8004360 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800435c:	2b00      	cmp	r3, #0
 800435e:	d12c      	bne.n	80043ba <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800436a:	2b00      	cmp	r3, #0
 800436c:	d125      	bne.n	80043ba <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11e      	bne.n	80043ba <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d119      	bne.n	80043ba <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004394:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa5e 	bl	800487c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 020c 	mvn.w	r2, #12
 80043c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d114      	bne.n	8004402 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10d      	bne.n	8004402 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f834 	bl	8004460 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0201 	mvn.w	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800440c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004410:	d119      	bne.n	8004446 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d112      	bne.n	8004446 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	f043 0202 	orr.w	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0220 	mvn.w	r2, #32
 8004434:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f81b 	bl	8004472 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0220 	mvn.w	r2, #32
 8004444:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x20>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e14f      	b.n	8004744 <HAL_ADC_ConfigChannel+0x2c0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d81c      	bhi.n	80044ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	3b05      	subs	r3, #5
 80044c6:	221f      	movs	r2, #31
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	4019      	ands	r1, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	3b05      	subs	r3, #5
 80044e0:	fa00 f203 	lsl.w	r2, r0, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
 80044ec:	e07e      	b.n	80045ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d81c      	bhi.n	8004530 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	3b23      	subs	r3, #35	; 0x23
 8004508:	221f      	movs	r2, #31
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	4019      	ands	r1, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	3b23      	subs	r3, #35	; 0x23
 8004522:	fa00 f203 	lsl.w	r2, r0, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	63da      	str	r2, [r3, #60]	; 0x3c
 800452e:	e05d      	b.n	80045ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b12      	cmp	r3, #18
 8004536:	d81c      	bhi.n	8004572 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	3b41      	subs	r3, #65	; 0x41
 800454a:	221f      	movs	r2, #31
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	4019      	ands	r1, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	3b41      	subs	r3, #65	; 0x41
 8004564:	fa00 f203 	lsl.w	r2, r0, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
 8004570:	e03c      	b.n	80045ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b18      	cmp	r3, #24
 8004578:	d81c      	bhi.n	80045b4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	3b5f      	subs	r3, #95	; 0x5f
 800458c:	221f      	movs	r2, #31
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	4019      	ands	r1, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	3b5f      	subs	r3, #95	; 0x5f
 80045a6:	fa00 f203 	lsl.w	r2, r0, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34
 80045b2:	e01b      	b.n	80045ec <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	3b7d      	subs	r3, #125	; 0x7d
 80045c6:	221f      	movs	r2, #31
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	4019      	ands	r1, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	3b7d      	subs	r3, #125	; 0x7d
 80045e0:	fa00 f203 	lsl.w	r2, r0, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b09      	cmp	r3, #9
 80045f2:	d81a      	bhi.n	800462a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6959      	ldr	r1, [r3, #20]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	2207      	movs	r2, #7
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	4019      	ands	r1, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6898      	ldr	r0, [r3, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	fa00 f203 	lsl.w	r2, r0, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	615a      	str	r2, [r3, #20]
 8004628:	e05d      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b13      	cmp	r3, #19
 8004630:	d81c      	bhi.n	800466c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6919      	ldr	r1, [r3, #16]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	3b1e      	subs	r3, #30
 8004644:	2207      	movs	r2, #7
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	4019      	ands	r1, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6898      	ldr	r0, [r3, #8]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	3b1e      	subs	r3, #30
 800465e:	fa00 f203 	lsl.w	r2, r0, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	e03c      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b1d      	cmp	r3, #29
 8004672:	d81c      	bhi.n	80046ae <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68d9      	ldr	r1, [r3, #12]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	3b3c      	subs	r3, #60	; 0x3c
 8004686:	2207      	movs	r2, #7
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	4019      	ands	r1, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6898      	ldr	r0, [r3, #8]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4413      	add	r3, r2
 800469e:	3b3c      	subs	r3, #60	; 0x3c
 80046a0:	fa00 f203 	lsl.w	r2, r0, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	e01b      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	3b5a      	subs	r3, #90	; 0x5a
 80046c0:	2207      	movs	r2, #7
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	4019      	ands	r1, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6898      	ldr	r0, [r3, #8]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	3b5a      	subs	r3, #90	; 0x5a
 80046da:	fa00 f203 	lsl.w	r2, r0, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d003      	beq.n	80046f6 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80046f2:	2b11      	cmp	r3, #17
 80046f4:	d121      	bne.n	800473a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80046f6:	4b16      	ldr	r3, [pc, #88]	; (8004750 <HAL_ADC_ConfigChannel+0x2cc>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11b      	bne.n	800473a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <HAL_ADC_ConfigChannel+0x2cc>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <HAL_ADC_ConfigChannel+0x2cc>)
 8004708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800470c:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b10      	cmp	r3, #16
 8004714:	d111      	bne.n	800473a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <HAL_ADC_ConfigChannel+0x2d0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <HAL_ADC_ConfigChannel+0x2d4>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	0c9a      	lsrs	r2, r3, #18
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800472c:	e002      	b.n	8004734 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	3b01      	subs	r3, #1
 8004732:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f9      	bne.n	800472e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8004742:	7bfb      	ldrb	r3, [r7, #15]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40012700 	.word	0x40012700
 8004754:	20000000 	.word	0x20000000
 8004758:	431bde83 	.word	0x431bde83

0800475c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d03c      	beq.n	80047f4 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <ADC_Enable+0xa4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <ADC_Enable+0xa8>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	0c9a      	lsrs	r2, r3, #18
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800479e:	e002      	b.n	80047a6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f9      	bne.n	80047a0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80047ac:	f7ff fabc 	bl	8003d28 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80047b2:	e018      	b.n	80047e6 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80047b4:	f7ff fab8 	bl	8003d28 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d911      	bls.n	80047e6 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	f043 0210 	orr.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e007      	b.n	80047f6 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d1df      	bne.n	80047b4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000000 	.word	0x20000000
 8004804:	431bde83 	.word	0x431bde83

08004808 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d127      	bne.n	8004872 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004832:	f7ff fa79 	bl	8003d28 <HAL_GetTick>
 8004836:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004838:	e014      	b.n	8004864 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800483a:	f7ff fa75 	bl	8003d28 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d90d      	bls.n	8004864 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484c:	f043 0210 	orr.w	r2, r3, #16
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e007      	b.n	8004874 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d0e3      	beq.n	800483a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr
	...

08004890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <__NVIC_SetPriorityGrouping+0x44>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048ac:	4013      	ands	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048c2:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <__NVIC_SetPriorityGrouping+0x44>)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	60d3      	str	r3, [r2, #12]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048dc:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <__NVIC_GetPriorityGrouping+0x18>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	f003 0307 	and.w	r3, r3, #7
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	2b00      	cmp	r3, #0
 8004904:	db0b      	blt.n	800491e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	f003 021f 	and.w	r2, r3, #31
 800490c:	4906      	ldr	r1, [pc, #24]	; (8004928 <__NVIC_EnableIRQ+0x34>)
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2001      	movs	r0, #1
 8004916:	fa00 f202 	lsl.w	r2, r0, r2
 800491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	e000e100 	.word	0xe000e100

0800492c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	6039      	str	r1, [r7, #0]
 8004936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493c:	2b00      	cmp	r3, #0
 800493e:	db0a      	blt.n	8004956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	490c      	ldr	r1, [pc, #48]	; (8004978 <__NVIC_SetPriority+0x4c>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	0112      	lsls	r2, r2, #4
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	440b      	add	r3, r1
 8004950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004954:	e00a      	b.n	800496c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	4908      	ldr	r1, [pc, #32]	; (800497c <__NVIC_SetPriority+0x50>)
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	3b04      	subs	r3, #4
 8004964:	0112      	lsls	r2, r2, #4
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	440b      	add	r3, r1
 800496a:	761a      	strb	r2, [r3, #24]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	e000e100 	.word	0xe000e100
 800497c:	e000ed00 	.word	0xe000ed00

08004980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	; 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f1c3 0307 	rsb	r3, r3, #7
 800499a:	2b04      	cmp	r3, #4
 800499c:	bf28      	it	cs
 800499e:	2304      	movcs	r3, #4
 80049a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3304      	adds	r3, #4
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d902      	bls.n	80049b0 <NVIC_EncodePriority+0x30>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3b03      	subs	r3, #3
 80049ae:	e000      	b.n	80049b2 <NVIC_EncodePriority+0x32>
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43da      	mvns	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	401a      	ands	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049c8:	f04f 31ff 	mov.w	r1, #4294967295
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	43d9      	mvns	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d8:	4313      	orrs	r3, r2
         );
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	; 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ff4f 	bl	8004890 <__NVIC_SetPriorityGrouping>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a0c:	f7ff ff64 	bl	80048d8 <__NVIC_GetPriorityGrouping>
 8004a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff ffb2 	bl	8004980 <NVIC_EncodePriority>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff81 	bl	800492c <__NVIC_SetPriority>
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	4603      	mov	r3, r0
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff57 	bl	80048f4 <__NVIC_EnableIRQ>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e014      	b.n	8004a8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	791b      	ldrb	r3, [r3, #4]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc fd9f 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	795b      	ldrb	r3, [r3, #5]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_DAC_Start+0x16>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e03e      	b.n	8004b26 <HAL_DAC_Start+0x94>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004adc:	2b3c      	cmp	r3, #60	; 0x3c
 8004ade:	d11b      	bne.n	8004b18 <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	e012      	b.n	8004b18 <HAL_DAC_Start+0x86>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004afc:	213c      	movs	r1, #60	; 0x3c
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d107      	bne.n	8004b18 <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0202 	orr.w	r2, r2, #2
 8004b16:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d105      	bne.n	8004b5a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	3308      	adds	r3, #8
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e004      	b.n	8004b64 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4413      	add	r3, r2
 8004b60:	3314      	adds	r3, #20
 8004b62:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	461a      	mov	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	795b      	ldrb	r3, [r3, #5]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_DAC_ConfigChannel+0x18>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e044      	b.n	8004c1a <HAL_DAC_ConfigChannel+0xa2>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004ba4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	22c0      	movs	r2, #192	; 0xc0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	400a      	ands	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6819      	ldr	r1, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	22c0      	movs	r2, #192	; 0xc0
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	400a      	ands	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e059      	b.n	8004cea <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <HAL_DMA_Init+0xd0>)
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d80f      	bhi.n	8004c62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_DMA_Init+0xd4>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <HAL_DMA_Init+0xd8>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <HAL_DMA_Init+0xdc>)
 8004c5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c60:	e00e      	b.n	8004c80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <HAL_DMA_Init+0xe0>)
 8004c6a:	4413      	add	r3, r2
 8004c6c:	4a23      	ldr	r2, [pc, #140]	; (8004cfc <HAL_DMA_Init+0xd8>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	009a      	lsls	r2, r3, #2
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a22      	ldr	r2, [pc, #136]	; (8004d08 <HAL_DMA_Init+0xe4>)
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	40026407 	.word	0x40026407
 8004cf8:	bffd9ff8 	.word	0xbffd9ff8
 8004cfc:	cccccccd 	.word	0xcccccccd
 8004d00:	40026000 	.word	0x40026000
 8004d04:	bffd9bf8 	.word	0xbffd9bf8
 8004d08:	40026400 	.word	0x40026400

08004d0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d005      	beq.n	8004d30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2204      	movs	r2, #4
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	e029      	b.n	8004d84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 020e 	bic.w	r2, r2, #14
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f003 021c 	and.w	r2, r3, #28
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d62:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
    }
  }
  return status;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 031c 	and.w	r3, r3, #28
 8004dae:	2204      	movs	r2, #4
 8004db0:	409a      	lsls	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d026      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x7a>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d021      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d107      	bne.n	8004de2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0204 	bic.w	r2, r2, #4
 8004de0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f003 021c 	and.w	r2, r3, #28
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	2104      	movs	r1, #4
 8004df0:	fa01 f202 	lsl.w	r2, r1, r2
 8004df4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d071      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004e06:	e06c      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f003 031c 	and.w	r3, r3, #28
 8004e10:	2202      	movs	r2, #2
 8004e12:	409a      	lsls	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02e      	beq.n	8004e7a <HAL_DMA_IRQHandler+0xec>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d029      	beq.n	8004e7a <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 020a 	bic.w	r2, r2, #10
 8004e42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f003 021c 	and.w	r2, r3, #28
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	2102      	movs	r1, #2
 8004e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d038      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e78:	e033      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f003 031c 	and.w	r3, r3, #28
 8004e82:	2208      	movs	r2, #8
 8004e84:	409a      	lsls	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d02a      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x156>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d025      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 020e 	bic.w	r2, r2, #14
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f003 021c 	and.w	r2, r3, #28
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d004      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
}
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f02:	e160      	b.n	80051c6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	4013      	ands	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8152 	beq.w	80051c0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d00b      	beq.n	8004f3c <HAL_GPIO_Init+0x50>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d007      	beq.n	8004f3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f30:	2b11      	cmp	r3, #17
 8004f32:	d003      	beq.n	8004f3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b12      	cmp	r3, #18
 8004f3a:	d130      	bne.n	8004f9e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	2203      	movs	r2, #3
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004f72:	2201      	movs	r2, #1
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	f003 0201 	and.w	r2, r3, #1
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	2203      	movs	r2, #3
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0xf2>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b12      	cmp	r3, #18
 8004fdc:	d123      	bne.n	8005026 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	08da      	lsrs	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3208      	adds	r2, #8
 8004fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	08da      	lsrs	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3208      	adds	r2, #8
 8005020:	6939      	ldr	r1, [r7, #16]
 8005022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2203      	movs	r2, #3
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0203 	and.w	r2, r3, #3
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80ac 	beq.w	80051c0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005068:	4b5d      	ldr	r3, [pc, #372]	; (80051e0 <HAL_GPIO_Init+0x2f4>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	4a5c      	ldr	r2, [pc, #368]	; (80051e0 <HAL_GPIO_Init+0x2f4>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6213      	str	r3, [r2, #32]
 8005074:	4b5a      	ldr	r3, [pc, #360]	; (80051e0 <HAL_GPIO_Init+0x2f4>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005080:	4a58      	ldr	r2, [pc, #352]	; (80051e4 <HAL_GPIO_Init+0x2f8>)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	3302      	adds	r3, #2
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	220f      	movs	r2, #15
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a50      	ldr	r2, [pc, #320]	; (80051e8 <HAL_GPIO_Init+0x2fc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d025      	beq.n	80050f8 <HAL_GPIO_Init+0x20c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a4f      	ldr	r2, [pc, #316]	; (80051ec <HAL_GPIO_Init+0x300>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01f      	beq.n	80050f4 <HAL_GPIO_Init+0x208>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a4e      	ldr	r2, [pc, #312]	; (80051f0 <HAL_GPIO_Init+0x304>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d019      	beq.n	80050f0 <HAL_GPIO_Init+0x204>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a4d      	ldr	r2, [pc, #308]	; (80051f4 <HAL_GPIO_Init+0x308>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <HAL_GPIO_Init+0x200>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a4c      	ldr	r2, [pc, #304]	; (80051f8 <HAL_GPIO_Init+0x30c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00d      	beq.n	80050e8 <HAL_GPIO_Init+0x1fc>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a4b      	ldr	r2, [pc, #300]	; (80051fc <HAL_GPIO_Init+0x310>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <HAL_GPIO_Init+0x1f8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a4a      	ldr	r2, [pc, #296]	; (8005200 <HAL_GPIO_Init+0x314>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d101      	bne.n	80050e0 <HAL_GPIO_Init+0x1f4>
 80050dc:	2306      	movs	r3, #6
 80050de:	e00c      	b.n	80050fa <HAL_GPIO_Init+0x20e>
 80050e0:	2307      	movs	r3, #7
 80050e2:	e00a      	b.n	80050fa <HAL_GPIO_Init+0x20e>
 80050e4:	2305      	movs	r3, #5
 80050e6:	e008      	b.n	80050fa <HAL_GPIO_Init+0x20e>
 80050e8:	2304      	movs	r3, #4
 80050ea:	e006      	b.n	80050fa <HAL_GPIO_Init+0x20e>
 80050ec:	2303      	movs	r3, #3
 80050ee:	e004      	b.n	80050fa <HAL_GPIO_Init+0x20e>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e002      	b.n	80050fa <HAL_GPIO_Init+0x20e>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_GPIO_Init+0x20e>
 80050f8:	2300      	movs	r3, #0
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	f002 0203 	and.w	r2, r2, #3
 8005100:	0092      	lsls	r2, r2, #2
 8005102:	4093      	lsls	r3, r2
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800510a:	4936      	ldr	r1, [pc, #216]	; (80051e4 <HAL_GPIO_Init+0x2f8>)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	3302      	adds	r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005118:	4b3a      	ldr	r3, [pc, #232]	; (8005204 <HAL_GPIO_Init+0x318>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	43db      	mvns	r3, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4013      	ands	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800513c:	4a31      	ldr	r2, [pc, #196]	; (8005204 <HAL_GPIO_Init+0x318>)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005142:	4b30      	ldr	r3, [pc, #192]	; (8005204 <HAL_GPIO_Init+0x318>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	43db      	mvns	r3, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005166:	4a27      	ldr	r2, [pc, #156]	; (8005204 <HAL_GPIO_Init+0x318>)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800516c:	4b25      	ldr	r3, [pc, #148]	; (8005204 <HAL_GPIO_Init+0x318>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	43db      	mvns	r3, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4013      	ands	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <HAL_GPIO_Init+0x318>)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <HAL_GPIO_Init+0x318>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051ba:	4a12      	ldr	r2, [pc, #72]	; (8005204 <HAL_GPIO_Init+0x318>)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3301      	adds	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f ae97 	bne.w	8004f04 <HAL_GPIO_Init+0x18>
  }
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40020000 	.word	0x40020000
 80051ec:	40020400 	.word	0x40020400
 80051f0:	40020800 	.word	0x40020800
 80051f4:	40020c00 	.word	0x40020c00
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40021400 	.word	0x40021400
 8005200:	40021800 	.word	0x40021800
 8005204:	40010400 	.word	0x40010400

08005208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	887b      	ldrh	r3, [r7, #2]
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
 8005224:	e001      	b.n	800522a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	807b      	strh	r3, [r7, #2]
 8005242:	4613      	mov	r3, r2
 8005244:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005246:	787b      	ldrb	r3, [r7, #1]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800524c:	887a      	ldrh	r2, [r7, #2]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005252:	e003      	b.n	800525c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	041a      	lsls	r2, r3, #16
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	619a      	str	r2, [r3, #24]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005278:	887a      	ldrh	r2, [r7, #2]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4013      	ands	r3, r2
 800527e:	041a      	lsls	r2, r3, #16
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	43d9      	mvns	r1, r3
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	400b      	ands	r3, r1
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	619a      	str	r2, [r3, #24]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e11f      	b.n	80054ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fc fd30 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052fc:	f002 f982 	bl	8007604 <HAL_RCC_GetPCLK1Freq>
 8005300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4a7b      	ldr	r2, [pc, #492]	; (80054f4 <HAL_I2C_Init+0x25c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d807      	bhi.n	800531c <HAL_I2C_Init+0x84>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a7a      	ldr	r2, [pc, #488]	; (80054f8 <HAL_I2C_Init+0x260>)
 8005310:	4293      	cmp	r3, r2
 8005312:	bf94      	ite	ls
 8005314:	2301      	movls	r3, #1
 8005316:	2300      	movhi	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e006      	b.n	800532a <HAL_I2C_Init+0x92>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a77      	ldr	r2, [pc, #476]	; (80054fc <HAL_I2C_Init+0x264>)
 8005320:	4293      	cmp	r3, r2
 8005322:	bf94      	ite	ls
 8005324:	2301      	movls	r3, #1
 8005326:	2300      	movhi	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0db      	b.n	80054ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a72      	ldr	r2, [pc, #456]	; (8005500 <HAL_I2C_Init+0x268>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	0c9b      	lsrs	r3, r3, #18
 800533c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4a64      	ldr	r2, [pc, #400]	; (80054f4 <HAL_I2C_Init+0x25c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d802      	bhi.n	800536c <HAL_I2C_Init+0xd4>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3301      	adds	r3, #1
 800536a:	e009      	b.n	8005380 <HAL_I2C_Init+0xe8>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	4a63      	ldr	r2, [pc, #396]	; (8005504 <HAL_I2C_Init+0x26c>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	3301      	adds	r3, #1
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	430b      	orrs	r3, r1
 8005386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4956      	ldr	r1, [pc, #344]	; (80054f4 <HAL_I2C_Init+0x25c>)
 800539c:	428b      	cmp	r3, r1
 800539e:	d80d      	bhi.n	80053bc <HAL_I2C_Init+0x124>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1e59      	subs	r1, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ae:	3301      	adds	r3, #1
 80053b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	bf38      	it	cc
 80053b8:	2304      	movcc	r3, #4
 80053ba:	e04f      	b.n	800545c <HAL_I2C_Init+0x1c4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d111      	bne.n	80053e8 <HAL_I2C_Init+0x150>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1e58      	subs	r0, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6859      	ldr	r1, [r3, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	440b      	add	r3, r1
 80053d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053d6:	3301      	adds	r3, #1
 80053d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bf0c      	ite	eq
 80053e0:	2301      	moveq	r3, #1
 80053e2:	2300      	movne	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e012      	b.n	800540e <HAL_I2C_Init+0x176>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1e58      	subs	r0, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6859      	ldr	r1, [r3, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	0099      	lsls	r1, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80053fe:	3301      	adds	r3, #1
 8005400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_I2C_Init+0x17e>
 8005412:	2301      	movs	r3, #1
 8005414:	e022      	b.n	800545c <HAL_I2C_Init+0x1c4>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10e      	bne.n	800543c <HAL_I2C_Init+0x1a4>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1e58      	subs	r0, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	440b      	add	r3, r1
 800542c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005430:	3301      	adds	r3, #1
 8005432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	e00f      	b.n	800545c <HAL_I2C_Init+0x1c4>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1e58      	subs	r0, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6859      	ldr	r1, [r3, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	0099      	lsls	r1, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005452:	3301      	adds	r3, #1
 8005454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	6809      	ldr	r1, [r1, #0]
 8005460:	4313      	orrs	r3, r2
 8005462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800548a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6911      	ldr	r1, [r2, #16]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68d2      	ldr	r2, [r2, #12]
 8005496:	4311      	orrs	r1, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	430b      	orrs	r3, r1
 800549e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	000186a0 	.word	0x000186a0
 80054f8:	001e847f 	.word	0x001e847f
 80054fc:	003d08ff 	.word	0x003d08ff
 8005500:	431bde83 	.word	0x431bde83
 8005504:	10624dd3 	.word	0x10624dd3

08005508 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550a:	b08b      	sub	sp, #44	; 0x2c
 800550c:	af06      	add	r7, sp, #24
 800550e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e0d0      	b.n	80056bc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f00b fb22 	bl	8010b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2203      	movs	r2, #3
 8005538:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f003 ffd3 	bl	80094ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
 800554a:	e04c      	b.n	80055e6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	440b      	add	r3, r1
 800555c:	3301      	adds	r3, #1
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	440b      	add	r3, r1
 8005572:	7bfa      	ldrb	r2, [r7, #15]
 8005574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005576:	7bfa      	ldrb	r2, [r7, #15]
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	b298      	uxth	r0, r3
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	440b      	add	r3, r1
 8005588:	3336      	adds	r3, #54	; 0x36
 800558a:	4602      	mov	r2, r0
 800558c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	440b      	add	r3, r1
 800559e:	3303      	adds	r3, #3
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055a4:	7bfa      	ldrb	r2, [r7, #15]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	3338      	adds	r3, #56	; 0x38
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055b8:	7bfa      	ldrb	r2, [r7, #15]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	440b      	add	r3, r1
 80055c6:	333c      	adds	r3, #60	; 0x3c
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055cc:	7bfa      	ldrb	r2, [r7, #15]
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	440b      	add	r3, r1
 80055da:	3340      	adds	r3, #64	; 0x40
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	3301      	adds	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d3ad      	bcc.n	800554c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	73fb      	strb	r3, [r7, #15]
 80055f4:	e044      	b.n	8005680 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055f6:	7bfa      	ldrb	r2, [r7, #15]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	440b      	add	r3, r1
 800561a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005622:	7bfa      	ldrb	r2, [r7, #15]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	440b      	add	r3, r1
 8005630:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005638:	7bfa      	ldrb	r2, [r7, #15]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	440b      	add	r3, r1
 8005646:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800564e:	7bfa      	ldrb	r2, [r7, #15]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	440b      	add	r3, r1
 800565c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005664:	7bfa      	ldrb	r2, [r7, #15]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	440b      	add	r3, r1
 8005672:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	3301      	adds	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d3b5      	bcc.n	80055f6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	687e      	ldr	r6, [r7, #4]
 8005692:	466d      	mov	r5, sp
 8005694:	f106 0410 	add.w	r4, r6, #16
 8005698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800569a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	1d33      	adds	r3, r6, #4
 80056a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056a4:	6838      	ldr	r0, [r7, #0]
 80056a6:	f003 ff3b 	bl	8009520 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_PCD_Start+0x16>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e016      	b.n	8005708 <HAL_PCD_Start+0x44>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f003 feea 	bl	80094c0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80056ec:	2101      	movs	r1, #1
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fa0e 	bl	8006b10 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f005 fec6 	bl	800b48a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f005 febe 	bl	800b49e <USB_ReadInterrupts>
 8005722:	4603      	mov	r3, r0
 8005724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572c:	d102      	bne.n	8005734 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fb0f 	bl	8005d52 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f005 feb0 	bl	800b49e <USB_ReadInterrupts>
 800573e:	4603      	mov	r3, r0
 8005740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005748:	d112      	bne.n	8005770 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575c:	b292      	uxth	r2, r2
 800575e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f00b fa83 	bl	8010c6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005768:	2100      	movs	r1, #0
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8c7 	bl	80058fe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f005 fe92 	bl	800b49e <USB_ReadInterrupts>
 800577a:	4603      	mov	r3, r0
 800577c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005784:	d10b      	bne.n	800579e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005798:	b292      	uxth	r2, r2
 800579a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f005 fe7b 	bl	800b49e <USB_ReadInterrupts>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	d10b      	bne.n	80057cc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c6:	b292      	uxth	r2, r2
 80057c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f005 fe64 	bl	800b49e <USB_ReadInterrupts>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e0:	d126      	bne.n	8005830 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0204 	bic.w	r2, r2, #4
 80057f4:	b292      	uxth	r2, r2
 80057f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0208 	bic.w	r2, r2, #8
 800580c:	b292      	uxth	r2, r2
 800580e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f00b fa64 	bl	8010ce0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005820:	b29a      	uxth	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800582a:	b292      	uxth	r2, r2
 800582c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f005 fe32 	bl	800b49e <USB_ReadInterrupts>
 800583a:	4603      	mov	r3, r0
 800583c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005844:	d126      	bne.n	8005894 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0208 	orr.w	r2, r2, #8
 8005858:	b292      	uxth	r2, r2
 800585a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005870:	b292      	uxth	r2, r2
 8005872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800587e:	b29a      	uxth	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0204 	orr.w	r2, r2, #4
 8005888:	b292      	uxth	r2, r2
 800588a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f00b fa0c 	bl	8010cac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f005 fe00 	bl	800b49e <USB_ReadInterrupts>
 800589e:	4603      	mov	r3, r0
 80058a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a8:	d10e      	bne.n	80058c8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058bc:	b292      	uxth	r2, r2
 80058be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f00b f9c5 	bl	8010c52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f005 fde6 	bl	800b49e <USB_ReadInterrupts>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058dc:	d10b      	bne.n	80058f6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058f0:	b292      	uxth	r2, r2
 80058f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_PCD_SetAddress+0x1a>
 8005914:	2302      	movs	r3, #2
 8005916:	e013      	b.n	8005940 <HAL_PCD_SetAddress+0x42>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f005 fd97 	bl	800b464 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	461a      	mov	r2, r3
 8005956:	4603      	mov	r3, r0
 8005958:	70fb      	strb	r3, [r7, #3]
 800595a:	460b      	mov	r3, r1
 800595c:	803b      	strh	r3, [r7, #0]
 800595e:	4613      	mov	r3, r2
 8005960:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800596a:	2b00      	cmp	r3, #0
 800596c:	da0e      	bge.n	800598c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	705a      	strb	r2, [r3, #1]
 800598a:	e00e      	b.n	80059aa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	f003 0207 	and.w	r2, r3, #7
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059b6:	883a      	ldrh	r2, [r7, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	78ba      	ldrb	r2, [r7, #2]
 80059c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059d4:	78bb      	ldrb	r3, [r7, #2]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d102      	bne.n	80059e0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_PCD_EP_Open+0xa6>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e00e      	b.n	8005a0c <HAL_PCD_EP_Open+0xc4>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f003 fdaf 	bl	8009560 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005a0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da0e      	bge.n	8005a46 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	705a      	strb	r2, [r3, #1]
 8005a44:	e00e      	b.n	8005a64 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	f003 0207 	and.w	r2, r3, #7
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_PCD_EP_Close+0x6a>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e00e      	b.n	8005a9c <HAL_PCD_EP_Close+0x88>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f004 f8d1 	bl	8009c34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	f003 0207 	and.w	r2, r3, #7
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2200      	movs	r2, #0
 8005adc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ae4:	7afb      	ldrb	r3, [r7, #11]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f004 fa83 	bl	800a00c <USB_EPStartXfer>
 8005b06:	e005      	b.n	8005b14 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6979      	ldr	r1, [r7, #20]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f004 fa7c 	bl	800a00c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 0207 	and.w	r2, r3, #7
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005b40:	681b      	ldr	r3, [r3, #0]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2201      	movs	r2, #1
 8005b96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ba4:	7afb      	ldrb	r3, [r7, #11]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6979      	ldr	r1, [r7, #20]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f004 fa29 	bl	800a00c <USB_EPStartXfer>
 8005bba:	e005      	b.n	8005bc8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6979      	ldr	r1, [r7, #20]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f004 fa22 	bl	800a00c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 0207 	and.w	r2, r3, #7
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d901      	bls.n	8005bf0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e04c      	b.n	8005c8a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	da0e      	bge.n	8005c16 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	705a      	strb	r2, [r3, #1]
 8005c14:	e00c      	b.n	8005c30 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4413      	add	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c36:	78fb      	ldrb	r3, [r7, #3]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_PCD_EP_SetStall+0x7e>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e01c      	b.n	8005c8a <HAL_PCD_EP_SetStall+0xb8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f005 fb03 	bl	800b26a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d108      	bne.n	8005c80 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f005 fc1e 	bl	800b4bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	f003 020f 	and.w	r2, r3, #15
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d901      	bls.n	8005cb0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e040      	b.n	8005d32 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da0e      	bge.n	8005cd6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	705a      	strb	r2, [r3, #1]
 8005cd4:	e00e      	b.n	8005cf4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 0207 	and.w	r2, r3, #7
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_PCD_EP_ClrStall+0x82>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e00e      	b.n	8005d32 <HAL_PCD_EP_ClrStall+0xa0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68f9      	ldr	r1, [r7, #12]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f005 faf1 	bl	800b30a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr

08005d52 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08e      	sub	sp, #56	; 0x38
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d5a:	e2df      	b.n	800631c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d64:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005d66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005d72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 8158 	bne.w	800602c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005d7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d152      	bne.n	8005e2c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	81fb      	strh	r3, [r7, #14]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3328      	adds	r3, #40	; 0x28
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	441a      	add	r2, r3
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005dea:	2100      	movs	r1, #0
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f00a ff16 	bl	8010c1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 828e 	beq.w	800631c <PCD_EP_ISR_Handler+0x5ca>
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f040 8289 	bne.w	800631c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b292      	uxth	r2, r2
 8005e1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e2a:	e277      	b.n	800631c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005e3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d034      	beq.n	8005eb0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	3306      	adds	r3, #6
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f005 fb68 	bl	800b55a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e96:	4013      	ands	r3, r2
 8005e98:	823b      	strh	r3, [r7, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	8a3a      	ldrh	r2, [r7, #16]
 8005ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f00a fe8b 	bl	8010bc4 <HAL_PCD_SetupStageCallback>
 8005eae:	e235      	b.n	800631c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005eb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f280 8231 	bge.w	800631c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	83bb      	strh	r3, [r7, #28]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	8bba      	ldrh	r2, [r7, #28]
 8005ed0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4413      	add	r3, r2
 8005eec:	3306      	adds	r3, #6
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <PCD_EP_ISR_Handler+0x1ee>
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d015      	beq.n	8005f40 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	6959      	ldr	r1, [r3, #20]
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f005 fb18 	bl	800b55a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	441a      	add	r2, r3
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005f38:	2100      	movs	r1, #0
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f00a fe54 	bl	8010be8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	61bb      	str	r3, [r7, #24]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	4413      	add	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d112      	bne.n	8005f8e <PCD_EP_ISR_Handler+0x23c>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e02f      	b.n	8005fee <PCD_EP_ISR_Handler+0x29c>
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b3e      	cmp	r3, #62	; 0x3e
 8005f94:	d813      	bhi.n	8005fbe <PCD_EP_ISR_Handler+0x26c>
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <PCD_EP_ISR_Handler+0x25e>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	3301      	adds	r3, #1
 8005fae:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	029b      	lsls	r3, r3, #10
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e017      	b.n	8005fee <PCD_EP_ISR_Handler+0x29c>
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d102      	bne.n	8005fd8 <PCD_EP_ISR_Handler+0x286>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	029b      	lsls	r3, r3, #10
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	827b      	strh	r3, [r7, #18]
 8006000:	8a7b      	ldrh	r3, [r7, #18]
 8006002:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006006:	827b      	strh	r3, [r7, #18]
 8006008:	8a7b      	ldrh	r3, [r7, #18]
 800600a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800600e:	827b      	strh	r3, [r7, #18]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	8a7b      	ldrh	r3, [r7, #18]
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]
 800602a:	e177      	b.n	800631c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800603e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006042:	2b00      	cmp	r3, #0
 8006044:	f280 80ea 	bge.w	800621c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29a      	uxth	r2, r3
 800605a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800605e:	4013      	ands	r3, r2
 8006060:	853b      	strh	r3, [r7, #40]	; 0x28
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006076:	b292      	uxth	r2, r2
 8006078:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800607a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	7b1b      	ldrb	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d122      	bne.n	80060de <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4413      	add	r3, r2
 80060ac:	3306      	adds	r3, #6
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80060c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8087 	beq.w	80061d8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	6959      	ldr	r1, [r3, #20]
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	88da      	ldrh	r2, [r3, #6]
 80060d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060d8:	f005 fa3f 	bl	800b55a <USB_ReadPMA>
 80060dc:	e07c      	b.n	80061d8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	78db      	ldrb	r3, [r3, #3]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d108      	bne.n	80060f8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80060e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060e8:	461a      	mov	r2, r3
 80060ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f923 	bl	8006338 <HAL_PCD_EP_DB_Receive>
 80060f2:	4603      	mov	r3, r0
 80060f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80060f6:	e06f      	b.n	80061d8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	847b      	strh	r3, [r7, #34]	; 0x22
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d021      	beq.n	8006196 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615a:	b29b      	uxth	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4413      	add	r3, r2
 8006166:	3302      	adds	r3, #2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800617a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800617c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02a      	beq.n	80061d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	6959      	ldr	r1, [r3, #20]
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	891a      	ldrh	r2, [r3, #8]
 800618e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006190:	f005 f9e3 	bl	800b55a <USB_ReadPMA>
 8006194:	e020      	b.n	80061d8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4413      	add	r3, r2
 80061aa:	3306      	adds	r3, #6
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80061c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	6959      	ldr	r1, [r3, #20]
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	895a      	ldrh	r2, [r3, #10]
 80061d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061d4:	f005 f9c1 	bl	800b55a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061de:	441a      	add	r2, r3
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061ea:	441a      	add	r2, r3
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <PCD_EP_ISR_Handler+0x4b0>
 80061f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d206      	bcs.n	8006210 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f00a fced 	bl	8010be8 <HAL_PCD_DataOutStageCallback>
 800620e:	e005      	b.n	800621c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006216:	4618      	mov	r0, r3
 8006218:	f003 fef8 	bl	800a00c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800621c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d07a      	beq.n	800631c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8006226:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	843b      	strh	r3, [r7, #32]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	8c3b      	ldrh	r3, [r7, #32]
 8006266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	78db      	ldrb	r3, [r3, #3]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d108      	bne.n	800628c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800627e:	2b02      	cmp	r3, #2
 8006280:	d146      	bne.n	8006310 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d141      	bne.n	8006310 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4413      	add	r3, r2
 80062a0:	3302      	adds	r3, #2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	8bfb      	ldrh	r3, [r7, #30]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d906      	bls.n	80062ce <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	8bfb      	ldrh	r3, [r7, #30]
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	619a      	str	r2, [r3, #24]
 80062cc:	e002      	b.n	80062d4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2200      	movs	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f00a fc9b 	bl	8010c1e <HAL_PCD_DataInStageCallback>
 80062e8:	e018      	b.n	800631c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	8bfb      	ldrh	r3, [r7, #30]
 80062f0:	441a      	add	r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	8bfb      	ldrh	r3, [r7, #30]
 80062fc:	441a      	add	r2, r3
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006308:	4618      	mov	r0, r3
 800630a:	f003 fe7f 	bl	800a00c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800630e:	e005      	b.n	800631c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006310:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006312:	461a      	mov	r2, r3
 8006314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f91b 	bl	8006552 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006324:	b29b      	uxth	r3, r3
 8006326:	b21b      	sxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	f6ff ad17 	blt.w	8005d5c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3738      	adds	r7, #56	; 0x38
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d07e      	beq.n	800644e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4413      	add	r3, r2
 8006364:	3302      	adds	r3, #2
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006378:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	8b7b      	ldrh	r3, [r7, #26]
 8006380:	429a      	cmp	r2, r3
 8006382:	d306      	bcc.n	8006392 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	699a      	ldr	r2, [r3, #24]
 8006388:	8b7b      	ldrh	r3, [r7, #26]
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	619a      	str	r2, [r3, #24]
 8006390:	e002      	b.n	8006398 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2200      	movs	r2, #0
 8006396:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d123      	bne.n	80063e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	833b      	strh	r3, [r7, #24]
 80063bc:	8b3b      	ldrh	r3, [r7, #24]
 80063be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063c2:	833b      	strh	r3, [r7, #24]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	8b3b      	ldrh	r3, [r7, #24]
 80063d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01f      	beq.n	8006432 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640c:	82fb      	strh	r3, [r7, #22]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	8afb      	ldrh	r3, [r7, #22]
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006432:	8b7b      	ldrh	r3, [r7, #26]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8087 	beq.w	8006548 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6959      	ldr	r1, [r3, #20]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	891a      	ldrh	r2, [r3, #8]
 8006446:	8b7b      	ldrh	r3, [r7, #26]
 8006448:	f005 f887 	bl	800b55a <USB_ReadPMA>
 800644c:	e07c      	b.n	8006548 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006456:	b29b      	uxth	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4413      	add	r3, r2
 8006462:	3306      	adds	r3, #6
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006476:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	8b7b      	ldrh	r3, [r7, #26]
 800647e:	429a      	cmp	r2, r3
 8006480:	d306      	bcc.n	8006490 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	8b7b      	ldrh	r3, [r7, #26]
 8006488:	1ad2      	subs	r2, r2, r3
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	619a      	str	r2, [r3, #24]
 800648e:	e002      	b.n	8006496 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d123      	bne.n	80064e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	83fb      	strh	r3, [r7, #30]
 80064ba:	8bfb      	ldrh	r3, [r7, #30]
 80064bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c0:	83fb      	strh	r3, [r7, #30]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	8bfb      	ldrh	r3, [r7, #30]
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d11f      	bne.n	8006530 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	83bb      	strh	r3, [r7, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	8bbb      	ldrh	r3, [r7, #28]
 800651c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800652c:	b29b      	uxth	r3, r3
 800652e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006530:	8b7b      	ldrh	r3, [r7, #26]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6959      	ldr	r1, [r3, #20]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	895a      	ldrh	r2, [r3, #10]
 8006542:	8b7b      	ldrh	r3, [r7, #26]
 8006544:	f005 f809 	bl	800b55a <USB_ReadPMA>
    }
  }

  return count;
 8006548:	8b7b      	ldrh	r3, [r7, #26]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b092      	sub	sp, #72	; 0x48
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	4613      	mov	r3, r2
 800655e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8132 	beq.w	80067d0 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006574:	b29b      	uxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	3302      	adds	r3, #2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006594:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800659c:	429a      	cmp	r2, r3
 800659e:	d906      	bls.n	80065ae <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065a6:	1ad2      	subs	r2, r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	619a      	str	r2, [r3, #24]
 80065ac:	e002      	b.n	80065b4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d12c      	bne.n	8006616 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f00a fb2b 	bl	8010c1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 822f 	beq.w	8006a32 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	827b      	strh	r3, [r7, #18]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	8a7b      	ldrh	r3, [r7, #18]
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]
 8006614:	e20d      	b.n	8006a32 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01f      	beq.n	8006660 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800664c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665c:	b29b      	uxth	r3, r3
 800665e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006666:	2b01      	cmp	r3, #1
 8006668:	f040 81e3 	bne.w	8006a32 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006672:	441a      	add	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800667e:	441a      	add	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6a1a      	ldr	r2, [r3, #32]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	429a      	cmp	r2, r3
 800668e:	d309      	bcc.n	80066a4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	621a      	str	r2, [r3, #32]
 80066a2:	e014      	b.n	80066ce <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80066ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80066b8:	e009      	b.n	80066ce <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d155      	bne.n	8006782 <HAL_PCD_EP_DB_Transmit+0x230>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	4413      	add	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	011a      	lsls	r2, r3, #4
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d112      	bne.n	800672a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670e:	b29a      	uxth	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006722:	b29a      	uxth	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e047      	b.n	80067ba <HAL_PCD_EP_DB_Transmit+0x268>
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	2b3e      	cmp	r3, #62	; 0x3e
 800672e:	d811      	bhi.n	8006754 <HAL_PCD_EP_DB_Transmit+0x202>
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	3301      	adds	r3, #1
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	b29b      	uxth	r3, r3
 800674a:	029b      	lsls	r3, r3, #10
 800674c:	b29a      	uxth	r2, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	e032      	b.n	80067ba <HAL_PCD_EP_DB_Transmit+0x268>
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <HAL_PCD_EP_DB_Transmit+0x218>
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	3b01      	subs	r3, #1
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	b29b      	uxth	r3, r3
 800676e:	029b      	lsls	r3, r3, #10
 8006770:	b29b      	uxth	r3, r3
 8006772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677a:	b29a      	uxth	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e01b      	b.n	80067ba <HAL_PCD_EP_DB_Transmit+0x268>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d117      	bne.n	80067ba <HAL_PCD_EP_DB_Transmit+0x268>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006798:	b29b      	uxth	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	4413      	add	r3, r2
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	011a      	lsls	r2, r3, #4
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6959      	ldr	r1, [r3, #20]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	891a      	ldrh	r2, [r3, #8]
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f004 fe82 	bl	800b4d2 <USB_WritePMA>
 80067ce:	e130      	b.n	8006a32 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d8:	b29b      	uxth	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	4413      	add	r3, r2
 80067e4:	3306      	adds	r3, #6
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006800:	429a      	cmp	r2, r3
 8006802:	d306      	bcc.n	8006812 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	619a      	str	r2, [r3, #24]
 8006810:	e002      	b.n	8006818 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d12c      	bne.n	800687a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	4619      	mov	r1, r3
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f00a f9f9 	bl	8010c1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006832:	2b00      	cmp	r3, #0
 8006834:	f040 80fd 	bne.w	8006a32 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	441a      	add	r2, r3
 8006862:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]
 8006878:	e0db      	b.n	8006a32 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11f      	bne.n	80068c4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	f040 80b1 	bne.w	8006a32 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068d6:	441a      	add	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068e2:	441a      	add	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d309      	bcc.n	8006908 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	1ad2      	subs	r2, r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	621a      	str	r2, [r3, #32]
 8006906:	e014      	b.n	8006932 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8006910:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800691c:	e009      	b.n	8006932 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d155      	bne.n	80069ec <HAL_PCD_EP_DB_Transmit+0x49a>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	647b      	str	r3, [r7, #68]	; 0x44
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694e:	b29b      	uxth	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006954:	4413      	add	r3, r2
 8006956:	647b      	str	r3, [r7, #68]	; 0x44
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	011a      	lsls	r2, r3, #4
 800695e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006960:	4413      	add	r3, r2
 8006962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006966:	643b      	str	r3, [r7, #64]	; 0x40
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	2b00      	cmp	r3, #0
 800696c:	d112      	bne.n	8006994 <HAL_PCD_EP_DB_Transmit+0x442>
 800696e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006978:	b29a      	uxth	r2, r3
 800697a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698c:	b29a      	uxth	r2, r3
 800698e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e044      	b.n	8006a1e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	2b3e      	cmp	r3, #62	; 0x3e
 8006998:	d811      	bhi.n	80069be <HAL_PCD_EP_DB_Transmit+0x46c>
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_PCD_EP_DB_Transmit+0x45e>
 80069aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ac:	3301      	adds	r3, #1
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e02f      	b.n	8006a1e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <HAL_PCD_EP_DB_Transmit+0x482>
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	3b01      	subs	r3, #1
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e018      	b.n	8006a1e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d114      	bne.n	8006a1e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a02:	4413      	add	r3, r2
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6959      	ldr	r1, [r3, #20]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	895a      	ldrh	r2, [r3, #10]
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f004 fd50 	bl	800b4d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4c:	823b      	strh	r3, [r7, #16]
 8006a4e:	8a3b      	ldrh	r3, [r7, #16]
 8006a50:	f083 0310 	eor.w	r3, r3, #16
 8006a54:	823b      	strh	r3, [r7, #16]
 8006a56:	8a3b      	ldrh	r3, [r7, #16]
 8006a58:	f083 0320 	eor.w	r3, r3, #32
 8006a5c:	823b      	strh	r3, [r7, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	8a3b      	ldrh	r3, [r7, #16]
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3748      	adds	r7, #72	; 0x48
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	460b      	mov	r3, r1
 8006a98:	817b      	strh	r3, [r7, #10]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006a9e:	897b      	ldrh	r3, [r7, #10]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006aaa:	897b      	ldrh	r3, [r7, #10]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4413      	add	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	e009      	b.n	8006ad6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ac2:	897a      	ldrh	r2, [r7, #10]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006ad6:	893b      	ldrh	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d107      	bne.n	8006aec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	80da      	strh	r2, [r3, #6]
 8006aea:	e00b      	b.n	8006b04 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2201      	movs	r2, #1
 8006af0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
	...

08006b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e31d      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b3a:	4b94      	ldr	r3, [pc, #592]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b44:	4b91      	ldr	r3, [pc, #580]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d07b      	beq.n	8006c52 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d006      	beq.n	8006b6e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b0c      	cmp	r3, #12
 8006b64:	d10f      	bne.n	8006b86 <HAL_RCC_OscConfig+0x5e>
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6c:	d10b      	bne.n	8006b86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b6e:	4b87      	ldr	r3, [pc, #540]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d06a      	beq.n	8006c50 <HAL_RCC_OscConfig+0x128>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d166      	bne.n	8006c50 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e2f7      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCC_OscConfig+0x74>
 8006b8e:	4b7f      	ldr	r3, [pc, #508]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7e      	ldr	r2, [pc, #504]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e02d      	b.n	8006bf8 <HAL_RCC_OscConfig+0xd0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <HAL_RCC_OscConfig+0x96>
 8006ba4:	4b79      	ldr	r3, [pc, #484]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a78      	ldr	r2, [pc, #480]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	4b76      	ldr	r3, [pc, #472]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a75      	ldr	r2, [pc, #468]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e01c      	b.n	8006bf8 <HAL_RCC_OscConfig+0xd0>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCC_OscConfig+0xb8>
 8006bc6:	4b71      	ldr	r3, [pc, #452]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a70      	ldr	r2, [pc, #448]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	4b6e      	ldr	r3, [pc, #440]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a6d      	ldr	r2, [pc, #436]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e00b      	b.n	8006bf8 <HAL_RCC_OscConfig+0xd0>
 8006be0:	4b6a      	ldr	r3, [pc, #424]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a69      	ldr	r2, [pc, #420]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	4b67      	ldr	r3, [pc, #412]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a66      	ldr	r2, [pc, #408]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d013      	beq.n	8006c28 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c00:	f7fd f892 	bl	8003d28 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c08:	f7fd f88e 	bl	8003d28 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b64      	cmp	r3, #100	; 0x64
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e2ad      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c1a:	4b5c      	ldr	r3, [pc, #368]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0xe0>
 8006c26:	e014      	b.n	8006c52 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fd f87e 	bl	8003d28 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c30:	f7fd f87a 	bl	8003d28 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	; 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e299      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c42:	4b52      	ldr	r3, [pc, #328]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x108>
 8006c4e:	e000      	b.n	8006c52 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d05a      	beq.n	8006d14 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b0c      	cmp	r3, #12
 8006c68:	d119      	bne.n	8006c9e <HAL_RCC_OscConfig+0x176>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d116      	bne.n	8006c9e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c70:	4b46      	ldr	r3, [pc, #280]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_RCC_OscConfig+0x160>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d001      	beq.n	8006c88 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e276      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c88:	4b40      	ldr	r3, [pc, #256]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	493d      	ldr	r1, [pc, #244]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9c:	e03a      	b.n	8006d14 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d020      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca6:	4b3a      	ldr	r3, [pc, #232]	; (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cac:	f7fd f83c 	bl	8003d28 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cb4:	f7fd f838 	bl	8003d28 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e257      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cc6:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd2:	4b2e      	ldr	r3, [pc, #184]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	492a      	ldr	r1, [pc, #168]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	604b      	str	r3, [r1, #4]
 8006ce6:	e015      	b.n	8006d14 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ce8:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <HAL_RCC_OscConfig+0x268>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cee:	f7fd f81b 	bl	8003d28 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf6:	f7fd f817 	bl	8003d28 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e236      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d08:	4b20      	ldr	r3, [pc, #128]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f0      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80b8 	beq.w	8006e92 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d170      	bne.n	8006e0a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d28:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_OscConfig+0x218>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e21a      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d921      	bls.n	8006d94 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fcad 	bl	80076b4 <RCC_SetFlashLatencyFromMSIRange>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e208      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	4906      	ldr	r1, [pc, #24]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	061b      	lsls	r3, r3, #24
 8006d84:	4901      	ldr	r1, [pc, #4]	; (8006d8c <HAL_RCC_OscConfig+0x264>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	604b      	str	r3, [r1, #4]
 8006d8a:	e020      	b.n	8006dce <HAL_RCC_OscConfig+0x2a6>
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d94:	4ba4      	ldr	r3, [pc, #656]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	49a1      	ldr	r1, [pc, #644]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006da6:	4ba0      	ldr	r3, [pc, #640]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	061b      	lsls	r3, r3, #24
 8006db4:	499c      	ldr	r1, [pc, #624]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fc78 	bl	80076b4 <RCC_SetFlashLatencyFromMSIRange>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e1d3      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	0b5b      	lsrs	r3, r3, #13
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006dde:	4a92      	ldr	r2, [pc, #584]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006de0:	6892      	ldr	r2, [r2, #8]
 8006de2:	0912      	lsrs	r2, r2, #4
 8006de4:	f002 020f 	and.w	r2, r2, #15
 8006de8:	4990      	ldr	r1, [pc, #576]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006dea:	5c8a      	ldrb	r2, [r1, r2]
 8006dec:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006dee:	4a90      	ldr	r2, [pc, #576]	; (8007030 <HAL_RCC_OscConfig+0x508>)
 8006df0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006df2:	4b90      	ldr	r3, [pc, #576]	; (8007034 <HAL_RCC_OscConfig+0x50c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fb ffe6 	bl	8002dc8 <HAL_InitTick>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d045      	beq.n	8006e92 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	e1b5      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d029      	beq.n	8006e66 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e12:	4b89      	ldr	r3, [pc, #548]	; (8007038 <HAL_RCC_OscConfig+0x510>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e18:	f7fc ff86 	bl	8003d28 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e20:	f7fc ff82 	bl	8003d28 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e1a1      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e32:	4b7d      	ldr	r3, [pc, #500]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e3e:	4b7a      	ldr	r3, [pc, #488]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	4977      	ldr	r1, [pc, #476]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e50:	4b75      	ldr	r3, [pc, #468]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	4972      	ldr	r1, [pc, #456]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	604b      	str	r3, [r1, #4]
 8006e64:	e015      	b.n	8006e92 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e66:	4b74      	ldr	r3, [pc, #464]	; (8007038 <HAL_RCC_OscConfig+0x510>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6c:	f7fc ff5c 	bl	8003d28 <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e74:	f7fc ff58 	bl	8003d28 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e177      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006e86:	4b68      	ldr	r3, [pc, #416]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f0      	bne.n	8006e74 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d030      	beq.n	8006f00 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d016      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ea6:	4b65      	ldr	r3, [pc, #404]	; (800703c <HAL_RCC_OscConfig+0x514>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eac:	f7fc ff3c 	bl	8003d28 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eb4:	f7fc ff38 	bl	8003d28 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e157      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ec6:	4b58      	ldr	r3, [pc, #352]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x38c>
 8006ed2:	e015      	b.n	8006f00 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed4:	4b59      	ldr	r3, [pc, #356]	; (800703c <HAL_RCC_OscConfig+0x514>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eda:	f7fc ff25 	bl	8003d28 <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ee0:	e008      	b.n	8006ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee2:	f7fc ff21 	bl	8003d28 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e140      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ef4:	4b4c      	ldr	r3, [pc, #304]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1f0      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80b5 	beq.w	8007078 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f12:	4b45      	ldr	r3, [pc, #276]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10d      	bne.n	8006f3a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f1e:	4b42      	ldr	r3, [pc, #264]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	4a41      	ldr	r2, [pc, #260]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f28:	6253      	str	r3, [r2, #36]	; 0x24
 8006f2a:	4b3f      	ldr	r3, [pc, #252]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f32:	60bb      	str	r3, [r7, #8]
 8006f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f36:	2301      	movs	r3, #1
 8006f38:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f3a:	4b41      	ldr	r3, [pc, #260]	; (8007040 <HAL_RCC_OscConfig+0x518>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d118      	bne.n	8006f78 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f46:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <HAL_RCC_OscConfig+0x518>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <HAL_RCC_OscConfig+0x518>)
 8006f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f52:	f7fc fee9 	bl	8003d28 <HAL_GetTick>
 8006f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f5a:	f7fc fee5 	bl	8003d28 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b64      	cmp	r3, #100	; 0x64
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e104      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f6c:	4b34      	ldr	r3, [pc, #208]	; (8007040 <HAL_RCC_OscConfig+0x518>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0f0      	beq.n	8006f5a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d106      	bne.n	8006f8e <HAL_RCC_OscConfig+0x466>
 8006f80:	4b29      	ldr	r3, [pc, #164]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f84:	4a28      	ldr	r2, [pc, #160]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8a:	6353      	str	r3, [r2, #52]	; 0x34
 8006f8c:	e02d      	b.n	8006fea <HAL_RCC_OscConfig+0x4c2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10c      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x488>
 8006f96:	4b24      	ldr	r3, [pc, #144]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	4a23      	ldr	r2, [pc, #140]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa0:	6353      	str	r3, [r2, #52]	; 0x34
 8006fa2:	4b21      	ldr	r3, [pc, #132]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa6:	4a20      	ldr	r2, [pc, #128]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fac:	6353      	str	r3, [r2, #52]	; 0x34
 8006fae:	e01c      	b.n	8006fea <HAL_RCC_OscConfig+0x4c2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b05      	cmp	r3, #5
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x4aa>
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fc2:	6353      	str	r3, [r2, #52]	; 0x34
 8006fc4:	4b18      	ldr	r3, [pc, #96]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	4a17      	ldr	r2, [pc, #92]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fce:	6353      	str	r3, [r2, #52]	; 0x34
 8006fd0:	e00b      	b.n	8006fea <HAL_RCC_OscConfig+0x4c2>
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	4a14      	ldr	r2, [pc, #80]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fdc:	6353      	str	r3, [r2, #52]	; 0x34
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe2:	4a11      	ldr	r2, [pc, #68]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8006fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d015      	beq.n	800701e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff2:	f7fc fe99 	bl	8003d28 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff8:	e00a      	b.n	8007010 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ffa:	f7fc fe95 	bl	8003d28 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f241 3288 	movw	r2, #5000	; 0x1388
 8007008:	4293      	cmp	r3, r2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e0b2      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCC_OscConfig+0x500>)
 8007012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0ee      	beq.n	8006ffa <HAL_RCC_OscConfig+0x4d2>
 800701c:	e023      	b.n	8007066 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800701e:	f7fc fe83 	bl	8003d28 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007024:	e019      	b.n	800705a <HAL_RCC_OscConfig+0x532>
 8007026:	bf00      	nop
 8007028:	40023800 	.word	0x40023800
 800702c:	080158a4 	.word	0x080158a4
 8007030:	20000000 	.word	0x20000000
 8007034:	20000008 	.word	0x20000008
 8007038:	42470020 	.word	0x42470020
 800703c:	42470680 	.word	0x42470680
 8007040:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fc fe70 	bl	8003d28 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e08d      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800705a:	4b49      	ldr	r3, [pc, #292]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1ee      	bne.n	8007044 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007066:	7ffb      	ldrb	r3, [r7, #31]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d105      	bne.n	8007078 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706c:	4b44      	ldr	r3, [pc, #272]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	4a43      	ldr	r2, [pc, #268]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 8007072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007076:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	d079      	beq.n	8007174 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b0c      	cmp	r3, #12
 8007084:	d056      	beq.n	8007134 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b02      	cmp	r3, #2
 800708c:	d13b      	bne.n	8007106 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800708e:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <HAL_RCC_OscConfig+0x65c>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007094:	f7fc fe48 	bl	8003d28 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800709c:	f7fc fe44 	bl	8003d28 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e063      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ae:	4b34      	ldr	r3, [pc, #208]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f0      	bne.n	800709c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070ba:	4b31      	ldr	r3, [pc, #196]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	4319      	orrs	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	430b      	orrs	r3, r1
 80070d2:	492b      	ldr	r1, [pc, #172]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d8:	4b2a      	ldr	r3, [pc, #168]	; (8007184 <HAL_RCC_OscConfig+0x65c>)
 80070da:	2201      	movs	r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070de:	f7fc fe23 	bl	8003d28 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e6:	f7fc fe1f 	bl	8003d28 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e03e      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070f8:	4b21      	ldr	r3, [pc, #132]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x5be>
 8007104:	e036      	b.n	8007174 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007106:	4b1f      	ldr	r3, [pc, #124]	; (8007184 <HAL_RCC_OscConfig+0x65c>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710c:	f7fc fe0c 	bl	8003d28 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007114:	f7fc fe08 	bl	8003d28 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e027      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007126:	4b16      	ldr	r3, [pc, #88]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f0      	bne.n	8007114 <HAL_RCC_OscConfig+0x5ec>
 8007132:	e01f      	b.n	8007174 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e01a      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <HAL_RCC_OscConfig+0x658>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	429a      	cmp	r2, r3
 8007152:	d10d      	bne.n	8007170 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800715e:	429a      	cmp	r2, r3
 8007160:	d106      	bne.n	8007170 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800716c:	429a      	cmp	r2, r3
 800716e:	d001      	beq.n	8007174 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40023800 	.word	0x40023800
 8007184:	42470060 	.word	0x42470060

08007188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e11a      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800719c:	4b8f      	ldr	r3, [pc, #572]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d919      	bls.n	80071de <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d105      	bne.n	80071bc <HAL_RCC_ClockConfig+0x34>
 80071b0:	4b8a      	ldr	r3, [pc, #552]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a89      	ldr	r2, [pc, #548]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 80071b6:	f043 0304 	orr.w	r3, r3, #4
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	4b87      	ldr	r3, [pc, #540]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f023 0201 	bic.w	r2, r3, #1
 80071c4:	4985      	ldr	r1, [pc, #532]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071cc:	4b83      	ldr	r3, [pc, #524]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d001      	beq.n	80071de <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e0f9      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d008      	beq.n	80071fc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ea:	4b7d      	ldr	r3, [pc, #500]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	497a      	ldr	r1, [pc, #488]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 808e 	beq.w	8007326 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d107      	bne.n	8007222 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007212:	4b73      	ldr	r3, [pc, #460]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d121      	bne.n	8007262 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e0d7      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b03      	cmp	r3, #3
 8007228:	d107      	bne.n	800723a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800722a:	4b6d      	ldr	r3, [pc, #436]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d115      	bne.n	8007262 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0cb      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d107      	bne.n	8007252 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007242:	4b67      	ldr	r3, [pc, #412]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e0bf      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007252:	4b63      	ldr	r3, [pc, #396]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0b7      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007262:	4b5f      	ldr	r3, [pc, #380]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f023 0203 	bic.w	r2, r3, #3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	495c      	ldr	r1, [pc, #368]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007270:	4313      	orrs	r3, r2
 8007272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007274:	f7fc fd58 	bl	8003d28 <HAL_GetTick>
 8007278:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d112      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007282:	e00a      	b.n	800729a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007284:	f7fc fd50 	bl	8003d28 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007292:	4293      	cmp	r3, r2
 8007294:	d901      	bls.n	800729a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e09b      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800729a:	4b51      	ldr	r3, [pc, #324]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f003 030c 	and.w	r3, r3, #12
 80072a2:	2b08      	cmp	r3, #8
 80072a4:	d1ee      	bne.n	8007284 <HAL_RCC_ClockConfig+0xfc>
 80072a6:	e03e      	b.n	8007326 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d112      	bne.n	80072d6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072b0:	e00a      	b.n	80072c8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b2:	f7fc fd39 	bl	8003d28 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e084      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072c8:	4b45      	ldr	r3, [pc, #276]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 030c 	and.w	r3, r3, #12
 80072d0:	2b0c      	cmp	r3, #12
 80072d2:	d1ee      	bne.n	80072b2 <HAL_RCC_ClockConfig+0x12a>
 80072d4:	e027      	b.n	8007326 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d11d      	bne.n	800731a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072de:	e00a      	b.n	80072f6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e0:	f7fc fd22 	bl	8003d28 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e06d      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80072f6:	4b3a      	ldr	r3, [pc, #232]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d1ee      	bne.n	80072e0 <HAL_RCC_ClockConfig+0x158>
 8007302:	e010      	b.n	8007326 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007304:	f7fc fd10 	bl	8003d28 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e05b      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800731a:	4b31      	ldr	r3, [pc, #196]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 030c 	and.w	r3, r3, #12
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1ee      	bne.n	8007304 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007326:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d219      	bcs.n	8007368 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d105      	bne.n	8007346 <HAL_RCC_ClockConfig+0x1be>
 800733a:	4b28      	ldr	r3, [pc, #160]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a27      	ldr	r2, [pc, #156]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 8007340:	f043 0304 	orr.w	r3, r3, #4
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	4b25      	ldr	r3, [pc, #148]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f023 0201 	bic.w	r2, r3, #1
 800734e:	4923      	ldr	r1, [pc, #140]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	4313      	orrs	r3, r2
 8007354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b21      	ldr	r3, [pc, #132]	; (80073dc <HAL_RCC_ClockConfig+0x254>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d001      	beq.n	8007368 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e034      	b.n	80073d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007374:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4917      	ldr	r1, [pc, #92]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007382:	4313      	orrs	r3, r2
 8007384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007392:	4b13      	ldr	r3, [pc, #76]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	490f      	ldr	r1, [pc, #60]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073a6:	f000 f859 	bl	800745c <HAL_RCC_GetSysClockFreq>
 80073aa:	4601      	mov	r1, r0
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <HAL_RCC_ClockConfig+0x258>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	4a0b      	ldr	r2, [pc, #44]	; (80073e4 <HAL_RCC_ClockConfig+0x25c>)
 80073b8:	5cd3      	ldrb	r3, [r2, r3]
 80073ba:	fa21 f303 	lsr.w	r3, r1, r3
 80073be:	4a0a      	ldr	r2, [pc, #40]	; (80073e8 <HAL_RCC_ClockConfig+0x260>)
 80073c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <HAL_RCC_ClockConfig+0x264>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fb fcfe 	bl	8002dc8 <HAL_InitTick>
 80073cc:	4603      	mov	r3, r0
 80073ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80073d0:	7afb      	ldrb	r3, [r7, #11]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40023c00 	.word	0x40023c00
 80073e0:	40023800 	.word	0x40023800
 80073e4:	080158a4 	.word	0x080158a4
 80073e8:	20000000 	.word	0x20000000
 80073ec:	20000008 	.word	0x20000008

080073f0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	; 0x28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80073fc:	2302      	movs	r3, #2
 80073fe:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007400:	2302      	movs	r3, #2
 8007402:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8007408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800740c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8007412:	4b10      	ldr	r3, [pc, #64]	; (8007454 <HAL_RCC_MCOConfig+0x64>)
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	4a0f      	ldr	r2, [pc, #60]	; (8007454 <HAL_RCC_MCOConfig+0x64>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	61d3      	str	r3, [r2, #28]
 800741e:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <HAL_RCC_MCOConfig+0x64>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800742a:	f107 0314 	add.w	r3, r7, #20
 800742e:	4619      	mov	r1, r3
 8007430:	4809      	ldr	r0, [pc, #36]	; (8007458 <HAL_RCC_MCOConfig+0x68>)
 8007432:	f7fd fd5b 	bl	8004eec <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8007436:	4b07      	ldr	r3, [pc, #28]	; (8007454 <HAL_RCC_MCOConfig+0x64>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	430b      	orrs	r3, r1
 8007444:	4903      	ldr	r1, [pc, #12]	; (8007454 <HAL_RCC_MCOConfig+0x64>)
 8007446:	4313      	orrs	r3, r2
 8007448:	608b      	str	r3, [r1, #8]
}
 800744a:	bf00      	nop
 800744c:	3728      	adds	r7, #40	; 0x28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800
 8007458:	40020000 	.word	0x40020000

0800745c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8007462:	4b5f      	ldr	r3, [pc, #380]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 030c 	and.w	r3, r3, #12
 800746e:	2b08      	cmp	r3, #8
 8007470:	d007      	beq.n	8007482 <HAL_RCC_GetSysClockFreq+0x26>
 8007472:	2b0c      	cmp	r3, #12
 8007474:	d008      	beq.n	8007488 <HAL_RCC_GetSysClockFreq+0x2c>
 8007476:	2b04      	cmp	r3, #4
 8007478:	f040 809f 	bne.w	80075ba <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800747c:	4b59      	ldr	r3, [pc, #356]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x188>)
 800747e:	613b      	str	r3, [r7, #16]
      break;
 8007480:	e0a9      	b.n	80075d6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007482:	4b59      	ldr	r3, [pc, #356]	; (80075e8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8007484:	613b      	str	r3, [r7, #16]
      break;
 8007486:	e0a6      	b.n	80075d6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	0c9b      	lsrs	r3, r3, #18
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	4a56      	ldr	r2, [pc, #344]	; (80075ec <HAL_RCC_GetSysClockFreq+0x190>)
 8007492:	5cd3      	ldrb	r3, [r2, r3]
 8007494:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	0d9b      	lsrs	r3, r3, #22
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	3301      	adds	r3, #1
 80074a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074a2:	4b4f      	ldr	r3, [pc, #316]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d041      	beq.n	8007532 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	461d      	mov	r5, r3
 80074b2:	f04f 0600 	mov.w	r6, #0
 80074b6:	4629      	mov	r1, r5
 80074b8:	4632      	mov	r2, r6
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	f04f 0400 	mov.w	r4, #0
 80074c2:	0154      	lsls	r4, r2, #5
 80074c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80074c8:	014b      	lsls	r3, r1, #5
 80074ca:	4619      	mov	r1, r3
 80074cc:	4622      	mov	r2, r4
 80074ce:	1b49      	subs	r1, r1, r5
 80074d0:	eb62 0206 	sbc.w	r2, r2, r6
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	f04f 0400 	mov.w	r4, #0
 80074dc:	0194      	lsls	r4, r2, #6
 80074de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80074e2:	018b      	lsls	r3, r1, #6
 80074e4:	1a5b      	subs	r3, r3, r1
 80074e6:	eb64 0402 	sbc.w	r4, r4, r2
 80074ea:	f04f 0100 	mov.w	r1, #0
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	00e2      	lsls	r2, r4, #3
 80074f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80074f8:	00d9      	lsls	r1, r3, #3
 80074fa:	460b      	mov	r3, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	195b      	adds	r3, r3, r5
 8007500:	eb44 0406 	adc.w	r4, r4, r6
 8007504:	f04f 0100 	mov.w	r1, #0
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	0262      	lsls	r2, r4, #9
 800750e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007512:	0259      	lsls	r1, r3, #9
 8007514:	460b      	mov	r3, r1
 8007516:	4614      	mov	r4, r2
 8007518:	4618      	mov	r0, r3
 800751a:	4621      	mov	r1, r4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f04f 0400 	mov.w	r4, #0
 8007522:	461a      	mov	r2, r3
 8007524:	4623      	mov	r3, r4
 8007526:	f7f9 fb37 	bl	8000b98 <__aeabi_uldivmod>
 800752a:	4603      	mov	r3, r0
 800752c:	460c      	mov	r4, r1
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e040      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	461d      	mov	r5, r3
 8007536:	f04f 0600 	mov.w	r6, #0
 800753a:	4629      	mov	r1, r5
 800753c:	4632      	mov	r2, r6
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	f04f 0400 	mov.w	r4, #0
 8007546:	0154      	lsls	r4, r2, #5
 8007548:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800754c:	014b      	lsls	r3, r1, #5
 800754e:	4619      	mov	r1, r3
 8007550:	4622      	mov	r2, r4
 8007552:	1b49      	subs	r1, r1, r5
 8007554:	eb62 0206 	sbc.w	r2, r2, r6
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	f04f 0400 	mov.w	r4, #0
 8007560:	0194      	lsls	r4, r2, #6
 8007562:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007566:	018b      	lsls	r3, r1, #6
 8007568:	1a5b      	subs	r3, r3, r1
 800756a:	eb64 0402 	sbc.w	r4, r4, r2
 800756e:	f04f 0100 	mov.w	r1, #0
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	00e2      	lsls	r2, r4, #3
 8007578:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800757c:	00d9      	lsls	r1, r3, #3
 800757e:	460b      	mov	r3, r1
 8007580:	4614      	mov	r4, r2
 8007582:	195b      	adds	r3, r3, r5
 8007584:	eb44 0406 	adc.w	r4, r4, r6
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	02a2      	lsls	r2, r4, #10
 8007592:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007596:	0299      	lsls	r1, r3, #10
 8007598:	460b      	mov	r3, r1
 800759a:	4614      	mov	r4, r2
 800759c:	4618      	mov	r0, r3
 800759e:	4621      	mov	r1, r4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f04f 0400 	mov.w	r4, #0
 80075a6:	461a      	mov	r2, r3
 80075a8:	4623      	mov	r3, r4
 80075aa:	f7f9 faf5 	bl	8000b98 <__aeabi_uldivmod>
 80075ae:	4603      	mov	r3, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	613b      	str	r3, [r7, #16]
      break;
 80075b8:	e00d      	b.n	80075d6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	0b5b      	lsrs	r3, r3, #13
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	3301      	adds	r3, #1
 80075ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	613b      	str	r3, [r7, #16]
      break;
 80075d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075d6:	693b      	ldr	r3, [r7, #16]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e0:	40023800 	.word	0x40023800
 80075e4:	00f42400 	.word	0x00f42400
 80075e8:	007a1200 	.word	0x007a1200
 80075ec:	08015898 	.word	0x08015898

080075f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075f4:	4b02      	ldr	r3, [pc, #8]	; (8007600 <HAL_RCC_GetHCLKFreq+0x10>)
 80075f6:	681b      	ldr	r3, [r3, #0]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bc80      	pop	{r7}
 80075fe:	4770      	bx	lr
 8007600:	20000000 	.word	0x20000000

08007604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007608:	f7ff fff2 	bl	80075f0 <HAL_RCC_GetHCLKFreq>
 800760c:	4601      	mov	r1, r0
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	4a03      	ldr	r2, [pc, #12]	; (8007628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800761a:	5cd3      	ldrb	r3, [r2, r3]
 800761c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007620:	4618      	mov	r0, r3
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40023800 	.word	0x40023800
 8007628:	080158b4 	.word	0x080158b4

0800762c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007630:	f7ff ffde 	bl	80075f0 <HAL_RCC_GetHCLKFreq>
 8007634:	4601      	mov	r1, r0
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	0adb      	lsrs	r3, r3, #11
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	4a03      	ldr	r2, [pc, #12]	; (8007650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007642:	5cd3      	ldrb	r3, [r2, r3]
 8007644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007648:	4618      	mov	r0, r3
 800764a:	bd80      	pop	{r7, pc}
 800764c:	40023800 	.word	0x40023800
 8007650:	080158b4 	.word	0x080158b4

08007654 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	220f      	movs	r2, #15
 8007662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <HAL_RCC_GetClockConfig+0x58>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 0203 	and.w	r2, r3, #3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <HAL_RCC_GetClockConfig+0x58>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <HAL_RCC_GetClockConfig+0x58>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007688:	4b08      	ldr	r3, [pc, #32]	; (80076ac <HAL_RCC_GetClockConfig+0x58>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	08db      	lsrs	r3, r3, #3
 800768e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0201 	and.w	r2, r3, #1
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	601a      	str	r2, [r3, #0]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40023c00 	.word	0x40023c00

080076b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80076c0:	4b29      	ldr	r3, [pc, #164]	; (8007768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d12c      	bne.n	8007726 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80076cc:	4b26      	ldr	r3, [pc, #152]	; (8007768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80076d8:	4b24      	ldr	r3, [pc, #144]	; (800776c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	e016      	b.n	8007712 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076e4:	4b20      	ldr	r3, [pc, #128]	; (8007768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	4a1f      	ldr	r2, [pc, #124]	; (8007768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80076ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ee:	6253      	str	r3, [r2, #36]	; 0x24
 80076f0:	4b1d      	ldr	r3, [pc, #116]	; (8007768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80076fc:	4b1b      	ldr	r3, [pc, #108]	; (800776c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007704:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007706:	4b18      	ldr	r3, [pc, #96]	; (8007768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	4a17      	ldr	r2, [pc, #92]	; (8007768 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800770c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007710:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007718:	d105      	bne.n	8007726 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007720:	d101      	bne.n	8007726 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8007722:	2301      	movs	r3, #1
 8007724:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d105      	bne.n	8007738 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800772c:	4b10      	ldr	r3, [pc, #64]	; (8007770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0f      	ldr	r2, [pc, #60]	; (8007770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007732:	f043 0304 	orr.w	r3, r3, #4
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f023 0201 	bic.w	r2, r3, #1
 8007740:	490b      	ldr	r1, [pc, #44]	; (8007770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007748:	4b09      	ldr	r3, [pc, #36]	; (8007770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	d001      	beq.n	800775a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40023800 	.word	0x40023800
 800776c:	40007000 	.word	0x40007000
 8007770:	40023c00 	.word	0x40023c00

08007774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e07b      	b.n	800787e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	2b00      	cmp	r3, #0
 800778c:	d108      	bne.n	80077a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007796:	d009      	beq.n	80077ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	61da      	str	r2, [r3, #28]
 800779e:	e005      	b.n	80077ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fa fc00 	bl	8001fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	ea42 0103 	orr.w	r1, r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	0c1b      	lsrs	r3, r3, #16
 800784a:	f003 0104 	and.w	r1, r3, #4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	f003 0210 	and.w	r2, r3, #16
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800786c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b088      	sub	sp, #32
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_SPI_Transmit+0x22>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e126      	b.n	8007af6 <HAL_SPI_Transmit+0x270>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b0:	f7fc fa3a 	bl	8003d28 <HAL_GetTick>
 80078b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d002      	beq.n	80078cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078c6:	2302      	movs	r3, #2
 80078c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078ca:	e10b      	b.n	8007ae4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <HAL_SPI_Transmit+0x52>
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078dc:	e102      	b.n	8007ae4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2203      	movs	r2, #3
 80078e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	88fa      	ldrh	r2, [r7, #6]
 80078f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	88fa      	ldrh	r2, [r7, #6]
 80078fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007924:	d10f      	bne.n	8007946 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007950:	2b40      	cmp	r3, #64	; 0x40
 8007952:	d007      	beq.n	8007964 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800796c:	d14b      	bne.n	8007a06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <HAL_SPI_Transmit+0xf6>
 8007976:	8afb      	ldrh	r3, [r7, #22]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d13e      	bne.n	80079fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	881a      	ldrh	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	1c9a      	adds	r2, r3, #2
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079a0:	e02b      	b.n	80079fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d112      	bne.n	80079d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	881a      	ldrh	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	1c9a      	adds	r2, r3, #2
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80079d4:	e011      	b.n	80079fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079d6:	f7fc f9a7 	bl	8003d28 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d803      	bhi.n	80079ee <HAL_SPI_Transmit+0x168>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d102      	bne.n	80079f4 <HAL_SPI_Transmit+0x16e>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079f8:	e074      	b.n	8007ae4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1ce      	bne.n	80079a2 <HAL_SPI_Transmit+0x11c>
 8007a04:	e04c      	b.n	8007aa0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <HAL_SPI_Transmit+0x18e>
 8007a0e:	8afb      	ldrh	r3, [r7, #22]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d140      	bne.n	8007a96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a3a:	e02c      	b.n	8007a96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d113      	bne.n	8007a72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a70:	e011      	b.n	8007a96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a72:	f7fc f959 	bl	8003d28 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d803      	bhi.n	8007a8a <HAL_SPI_Transmit+0x204>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d102      	bne.n	8007a90 <HAL_SPI_Transmit+0x20a>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a94:	e026      	b.n	8007ae4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1cd      	bne.n	8007a3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f8b3 	bl	8007c10 <SPI_EndRxTxTransaction>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e000      	b.n	8007ae4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007ae2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3720      	adds	r7, #32
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b10:	f7fc f90a 	bl	8003d28 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	1a9b      	subs	r3, r3, r2
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b20:	f7fc f902 	bl	8003d28 <HAL_GetTick>
 8007b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b26:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	015b      	lsls	r3, r3, #5
 8007b2c:	0d1b      	lsrs	r3, r3, #20
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	fb02 f303 	mul.w	r3, r2, r3
 8007b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b36:	e054      	b.n	8007be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3e:	d050      	beq.n	8007be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b40:	f7fc f8f2 	bl	8003d28 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d902      	bls.n	8007b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d13d      	bne.n	8007bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6e:	d111      	bne.n	8007b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b78:	d004      	beq.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b82:	d107      	bne.n	8007b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9c:	d10f      	bne.n	8007bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e017      	b.n	8007c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4013      	ands	r3, r2
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	2300      	movne	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d19b      	bne.n	8007b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000000 	.word	0x20000000

08007c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c1c:	4b1b      	ldr	r3, [pc, #108]	; (8007c8c <SPI_EndRxTxTransaction+0x7c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1b      	ldr	r2, [pc, #108]	; (8007c90 <SPI_EndRxTxTransaction+0x80>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	0d5b      	lsrs	r3, r3, #21
 8007c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3a:	d112      	bne.n	8007c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	2180      	movs	r1, #128	; 0x80
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7ff ff5a 	bl	8007b00 <SPI_WaitFlagStateUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d016      	beq.n	8007c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	f043 0220 	orr.w	r2, r3, #32
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e00f      	b.n	8007c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c78:	2b80      	cmp	r3, #128	; 0x80
 8007c7a:	d0f2      	beq.n	8007c62 <SPI_EndRxTxTransaction+0x52>
 8007c7c:	e000      	b.n	8007c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c7e:	bf00      	nop
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000000 	.word	0x20000000
 8007c90:	165e9f81 	.word	0x165e9f81

08007c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e031      	b.n	8007d0a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fa fb88 	bl	80023d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f000 fd28 	bl	8008728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d001      	beq.n	8007d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e03a      	b.n	8007da2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4c:	d00e      	beq.n	8007d6c <HAL_TIM_Base_Start_IT+0x58>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a16      	ldr	r2, [pc, #88]	; (8007dac <HAL_TIM_Base_Start_IT+0x98>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d009      	beq.n	8007d6c <HAL_TIM_Base_Start_IT+0x58>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <HAL_TIM_Base_Start_IT+0x9c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <HAL_TIM_Base_Start_IT+0x58>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d111      	bne.n	8007d90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b06      	cmp	r3, #6
 8007d7c:	d010      	beq.n	8007da0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0201 	orr.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	e007      	b.n	8007da0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40010800 	.word	0x40010800

08007db8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0201 	bic.w	r2, r2, #1
 8007dce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6a1a      	ldr	r2, [r3, #32]
 8007dd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d107      	bne.n	8007df0 <HAL_TIM_Base_Stop_IT+0x38>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e031      	b.n	8007e7a <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f829 	bl	8007e82 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4619      	mov	r1, r3
 8007e42:	4610      	mov	r0, r2
 8007e44:	f000 fc70 	bl	8008728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr

08007e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e031      	b.n	8007f0a <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f829 	bl	8007f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	f000 fc28 	bl	8008728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <HAL_TIM_PWM_Start+0x24>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	bf14      	ite	ne
 8007f40:	2301      	movne	r3, #1
 8007f42:	2300      	moveq	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	e022      	b.n	8007f8e <HAL_TIM_PWM_Start+0x6a>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d109      	bne.n	8007f62 <HAL_TIM_PWM_Start+0x3e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	bf14      	ite	ne
 8007f5a:	2301      	movne	r3, #1
 8007f5c:	2300      	moveq	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	e015      	b.n	8007f8e <HAL_TIM_PWM_Start+0x6a>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d109      	bne.n	8007f7c <HAL_TIM_PWM_Start+0x58>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	bf14      	ite	ne
 8007f74:	2301      	movne	r3, #1
 8007f76:	2300      	moveq	r3, #0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	e008      	b.n	8007f8e <HAL_TIM_PWM_Start+0x6a>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e051      	b.n	800803a <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <HAL_TIM_PWM_Start+0x82>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8007fa4:	e013      	b.n	8007fce <HAL_TIM_PWM_Start+0xaa>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d104      	bne.n	8007fb6 <HAL_TIM_PWM_Start+0x92>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8007fb4:	e00b      	b.n	8007fce <HAL_TIM_PWM_Start+0xaa>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d104      	bne.n	8007fc6 <HAL_TIM_PWM_Start+0xa2>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007fc4:	e003      	b.n	8007fce <HAL_TIM_PWM_Start+0xaa>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fda1 	bl	8008b1e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe4:	d00e      	beq.n	8008004 <HAL_TIM_PWM_Start+0xe0>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a16      	ldr	r2, [pc, #88]	; (8008044 <HAL_TIM_PWM_Start+0x120>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d009      	beq.n	8008004 <HAL_TIM_PWM_Start+0xe0>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a14      	ldr	r2, [pc, #80]	; (8008048 <HAL_TIM_PWM_Start+0x124>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d004      	beq.n	8008004 <HAL_TIM_PWM_Start+0xe0>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <HAL_TIM_PWM_Start+0x128>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d111      	bne.n	8008028 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b06      	cmp	r3, #6
 8008014:	d010      	beq.n	8008038 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008026:	e007      	b.n	8008038 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40000400 	.word	0x40000400
 8008048:	40000800 	.word	0x40000800
 800804c:	40010800 	.word	0x40010800

08008050 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e08f      	b.n	8008184 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fa f983 	bl	8002384 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008094:	f023 0307 	bic.w	r3, r3, #7
 8008098:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3304      	adds	r3, #4
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f000 fb3f 	bl	8008728 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	4313      	orrs	r3, r2
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80080f0:	f023 030c 	bic.w	r3, r3, #12
 80080f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	4313      	orrs	r3, r2
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	011a      	lsls	r2, r3, #4
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	031b      	lsls	r3, r3, #12
 8008120:	4313      	orrs	r3, r2
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008136:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	4313      	orrs	r3, r2
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d122      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d11b      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0202 	mvn.w	r2, #2
 80081b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa8e 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 80081d4:	e005      	b.n	80081e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa81 	bl	80086de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fa90 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d122      	bne.n	800823c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b04      	cmp	r3, #4
 8008202:	d11b      	bne.n	800823c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0204 	mvn.w	r2, #4
 800820c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa64 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 8008228:	e005      	b.n	8008236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa57 	bl	80086de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa66 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	2b08      	cmp	r3, #8
 8008248:	d122      	bne.n	8008290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0308 	and.w	r3, r3, #8
 8008254:	2b08      	cmp	r3, #8
 8008256:	d11b      	bne.n	8008290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0208 	mvn.w	r2, #8
 8008260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2204      	movs	r2, #4
 8008266:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa3a 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 800827c:	e005      	b.n	800828a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa2d 	bl	80086de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fa3c 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b10      	cmp	r3, #16
 800829c:	d122      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b10      	cmp	r3, #16
 80082aa:	d11b      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0210 	mvn.w	r2, #16
 80082b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2208      	movs	r2, #8
 80082ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa10 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa03 	bl	80086de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa12 	bl	8008702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10e      	bne.n	8008310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d107      	bne.n	8008310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0201 	mvn.w	r2, #1
 8008308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7fa fc0e 	bl	8002b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b40      	cmp	r3, #64	; 0x40
 800831c:	d10e      	bne.n	800833c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	d107      	bne.n	800833c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f9ec 	bl	8008714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_TIM_OC_ConfigChannel+0x1a>
 800835a:	2302      	movs	r3, #2
 800835c:	e046      	b.n	80083ec <HAL_TIM_OC_ConfigChannel+0xa8>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b0c      	cmp	r3, #12
 800836a:	d839      	bhi.n	80083e0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800836c:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <HAL_TIM_OC_ConfigChannel+0x30>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	080083a9 	.word	0x080083a9
 8008378:	080083e1 	.word	0x080083e1
 800837c:	080083e1 	.word	0x080083e1
 8008380:	080083e1 	.word	0x080083e1
 8008384:	080083b7 	.word	0x080083b7
 8008388:	080083e1 	.word	0x080083e1
 800838c:	080083e1 	.word	0x080083e1
 8008390:	080083e1 	.word	0x080083e1
 8008394:	080083c5 	.word	0x080083c5
 8008398:	080083e1 	.word	0x080083e1
 800839c:	080083e1 	.word	0x080083e1
 80083a0:	080083e1 	.word	0x080083e1
 80083a4:	080083d3 	.word	0x080083d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fa2a 	bl	8008808 <TIM_OC1_SetConfig>
      break;
 80083b4:	e015      	b.n	80083e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fa5f 	bl	8008880 <TIM_OC2_SetConfig>
      break;
 80083c2:	e00e      	b.n	80083e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fa96 	bl	80088fc <TIM_OC3_SetConfig>
      break;
 80083d0:	e007      	b.n	80083e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 facc 	bl	8008976 <TIM_OC4_SetConfig>
      break;
 80083de:	e000      	b.n	80083e2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80083e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800840a:	2302      	movs	r3, #2
 800840c:	e0ac      	b.n	8008568 <HAL_TIM_PWM_ConfigChannel+0x174>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b0c      	cmp	r3, #12
 800841a:	f200 809f 	bhi.w	800855c <HAL_TIM_PWM_ConfigChannel+0x168>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008459 	.word	0x08008459
 8008428:	0800855d 	.word	0x0800855d
 800842c:	0800855d 	.word	0x0800855d
 8008430:	0800855d 	.word	0x0800855d
 8008434:	08008499 	.word	0x08008499
 8008438:	0800855d 	.word	0x0800855d
 800843c:	0800855d 	.word	0x0800855d
 8008440:	0800855d 	.word	0x0800855d
 8008444:	080084db 	.word	0x080084db
 8008448:	0800855d 	.word	0x0800855d
 800844c:	0800855d 	.word	0x0800855d
 8008450:	0800855d 	.word	0x0800855d
 8008454:	0800851b 	.word	0x0800851b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f9d2 	bl	8008808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0208 	orr.w	r2, r2, #8
 8008472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0204 	bic.w	r2, r2, #4
 8008482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6999      	ldr	r1, [r3, #24]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	619a      	str	r2, [r3, #24]
      break;
 8008496:	e062      	b.n	800855e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f9ee 	bl	8008880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699a      	ldr	r2, [r3, #24]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6999      	ldr	r1, [r3, #24]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	021a      	lsls	r2, r3, #8
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	619a      	str	r2, [r3, #24]
      break;
 80084d8:	e041      	b.n	800855e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fa0b 	bl	80088fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f042 0208 	orr.w	r2, r2, #8
 80084f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0204 	bic.w	r2, r2, #4
 8008504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69d9      	ldr	r1, [r3, #28]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	61da      	str	r2, [r3, #28]
      break;
 8008518:	e021      	b.n	800855e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fa28 	bl	8008976 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69da      	ldr	r2, [r3, #28]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69d9      	ldr	r1, [r3, #28]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	021a      	lsls	r2, r3, #8
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	61da      	str	r2, [r3, #28]
      break;
 800855a:	e000      	b.n	800855e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800855c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_TIM_ConfigClockSource+0x18>
 8008584:	2302      	movs	r3, #2
 8008586:	e0a6      	b.n	80086d6 <HAL_TIM_ConfigClockSource+0x166>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b40      	cmp	r3, #64	; 0x40
 80085be:	d067      	beq.n	8008690 <HAL_TIM_ConfigClockSource+0x120>
 80085c0:	2b40      	cmp	r3, #64	; 0x40
 80085c2:	d80b      	bhi.n	80085dc <HAL_TIM_ConfigClockSource+0x6c>
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d073      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x140>
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d802      	bhi.n	80085d2 <HAL_TIM_ConfigClockSource+0x62>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d06f      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80085d0:	e078      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d06c      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x140>
 80085d6:	2b30      	cmp	r3, #48	; 0x30
 80085d8:	d06a      	beq.n	80086b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80085da:	e073      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085dc:	2b70      	cmp	r3, #112	; 0x70
 80085de:	d00d      	beq.n	80085fc <HAL_TIM_ConfigClockSource+0x8c>
 80085e0:	2b70      	cmp	r3, #112	; 0x70
 80085e2:	d804      	bhi.n	80085ee <HAL_TIM_ConfigClockSource+0x7e>
 80085e4:	2b50      	cmp	r3, #80	; 0x50
 80085e6:	d033      	beq.n	8008650 <HAL_TIM_ConfigClockSource+0xe0>
 80085e8:	2b60      	cmp	r3, #96	; 0x60
 80085ea:	d041      	beq.n	8008670 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80085ec:	e06a      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f2:	d066      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x152>
 80085f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f8:	d017      	beq.n	800862a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80085fa:	e063      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	6899      	ldr	r1, [r3, #8]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f000 fa68 	bl	8008ae0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800861e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	609a      	str	r2, [r3, #8]
      break;
 8008628:	e04c      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6899      	ldr	r1, [r3, #8]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f000 fa51 	bl	8008ae0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800864c:	609a      	str	r2, [r3, #8]
      break;
 800864e:	e039      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	6859      	ldr	r1, [r3, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	461a      	mov	r2, r3
 800865e:	f000 f9c8 	bl	80089f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2150      	movs	r1, #80	; 0x50
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fa1f 	bl	8008aac <TIM_ITRx_SetConfig>
      break;
 800866e:	e029      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	6859      	ldr	r1, [r3, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	461a      	mov	r2, r3
 800867e:	f000 f9e6 	bl	8008a4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2160      	movs	r1, #96	; 0x60
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fa0f 	bl	8008aac <TIM_ITRx_SetConfig>
      break;
 800868e:	e019      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	6859      	ldr	r1, [r3, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	461a      	mov	r2, r3
 800869e:	f000 f9a8 	bl	80089f2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2140      	movs	r1, #64	; 0x40
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f9ff 	bl	8008aac <TIM_ITRx_SetConfig>
      break;
 80086ae:	e009      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f000 f9f6 	bl	8008aac <TIM_ITRx_SetConfig>
        break;
 80086c0:	e000      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80086c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr

08008702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr
	...

08008728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873e:	d00f      	beq.n	8008760 <TIM_Base_SetConfig+0x38>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a2b      	ldr	r2, [pc, #172]	; (80087f0 <TIM_Base_SetConfig+0xc8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00b      	beq.n	8008760 <TIM_Base_SetConfig+0x38>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a2a      	ldr	r2, [pc, #168]	; (80087f4 <TIM_Base_SetConfig+0xcc>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_Base_SetConfig+0x38>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a29      	ldr	r2, [pc, #164]	; (80087f8 <TIM_Base_SetConfig+0xd0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_Base_SetConfig+0x38>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a28      	ldr	r2, [pc, #160]	; (80087fc <TIM_Base_SetConfig+0xd4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d108      	bne.n	8008772 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008778:	d017      	beq.n	80087aa <TIM_Base_SetConfig+0x82>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1c      	ldr	r2, [pc, #112]	; (80087f0 <TIM_Base_SetConfig+0xc8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <TIM_Base_SetConfig+0x82>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1b      	ldr	r2, [pc, #108]	; (80087f4 <TIM_Base_SetConfig+0xcc>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00f      	beq.n	80087aa <TIM_Base_SetConfig+0x82>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1a      	ldr	r2, [pc, #104]	; (80087f8 <TIM_Base_SetConfig+0xd0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00b      	beq.n	80087aa <TIM_Base_SetConfig+0x82>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a19      	ldr	r2, [pc, #100]	; (80087fc <TIM_Base_SetConfig+0xd4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <TIM_Base_SetConfig+0x82>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a18      	ldr	r2, [pc, #96]	; (8008800 <TIM_Base_SetConfig+0xd8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_Base_SetConfig+0x82>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a17      	ldr	r2, [pc, #92]	; (8008804 <TIM_Base_SetConfig+0xdc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d108      	bne.n	80087bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	615a      	str	r2, [r3, #20]
}
 80087e6:	bf00      	nop
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800
 80087f8:	40000c00 	.word	0x40000c00
 80087fc:	40010800 	.word	0x40010800
 8008800:	40010c00 	.word	0x40010c00
 8008804:	40011000 	.word	0x40011000

08008808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f023 0201 	bic.w	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0303 	bic.w	r3, r3, #3
 800883e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f023 0302 	bic.w	r3, r3, #2
 8008850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	bc80      	pop	{r7}
 800887e:	4770      	bx	lr

08008880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	f023 0210 	bic.w	r2, r3, #16
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f023 0320 	bic.w	r3, r3, #32
 80088ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr

080088fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0303 	bic.w	r3, r3, #3
 8008932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	621a      	str	r2, [r3, #32]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr

08008976 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008976:	b480      	push	{r7}
 8008978:	b087      	sub	sp, #28
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	031b      	lsls	r3, r3, #12
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	621a      	str	r2, [r3, #32]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr

080089f2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b087      	sub	sp, #28
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
 80089fa:	60b9      	str	r1, [r7, #8]
 80089fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	f023 0201 	bic.w	r2, r3, #1
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 030a 	bic.w	r3, r3, #10
 8008a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	621a      	str	r2, [r3, #32]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr

08008a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b087      	sub	sp, #28
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	f023 0210 	bic.w	r2, r3, #16
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	031b      	lsls	r3, r3, #12
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	621a      	str	r2, [r3, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr

08008aac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	f043 0307 	orr.w	r3, r3, #7
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	609a      	str	r2, [r3, #8]
}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bc80      	pop	{r7}
 8008ade:	4770      	bx	lr

08008ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	021a      	lsls	r2, r3, #8
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	609a      	str	r2, [r3, #8]
}
 8008b14:	bf00      	nop
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr

08008b1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b087      	sub	sp, #28
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f003 031f 	and.w	r3, r3, #31
 8008b30:	2201      	movs	r2, #1
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a1a      	ldr	r2, [r3, #32]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	401a      	ands	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6a1a      	ldr	r2, [r3, #32]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	fa01 f303 	lsl.w	r3, r1, r3
 8008b56:	431a      	orrs	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	621a      	str	r2, [r3, #32]
}
 8008b5c:	bf00      	nop
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr
	...

08008b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e046      	b.n	8008c0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc2:	d00e      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a13      	ldr	r2, [pc, #76]	; (8008c18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d009      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a12      	ldr	r2, [pc, #72]	; (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d004      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a10      	ldr	r2, [pc, #64]	; (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d10c      	bne.n	8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr
 8008c18:	40000400 	.word	0x40000400
 8008c1c:	40000800 	.word	0x40000800
 8008c20:	40010800 	.word	0x40010800

08008c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e03f      	b.n	8008cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f9 fd4e 	bl	80026ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2224      	movs	r2, #36	; 0x24
 8008c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fb45 	bl	80092f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	695a      	ldr	r2, [r3, #20]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b088      	sub	sp, #32
 8008cc2:	af02      	add	r7, sp, #8
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	603b      	str	r3, [r7, #0]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	f040 8083 	bne.w	8008de6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <HAL_UART_Transmit+0x2e>
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e07b      	b.n	8008de8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d101      	bne.n	8008cfe <HAL_UART_Transmit+0x40>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	e074      	b.n	8008de8 <HAL_UART_Transmit+0x12a>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2221      	movs	r2, #33	; 0x21
 8008d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008d14:	f7fb f808 	bl	8003d28 <HAL_GetTick>
 8008d18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	88fa      	ldrh	r2, [r7, #6]
 8008d1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	88fa      	ldrh	r2, [r7, #6]
 8008d24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008d2e:	e042      	b.n	8008db6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d46:	d122      	bne.n	8008d8e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2180      	movs	r1, #128	; 0x80
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 f967 	bl	8009026 <UART_WaitOnFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e042      	b.n	8008de8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	3302      	adds	r3, #2
 8008d82:	60bb      	str	r3, [r7, #8]
 8008d84:	e017      	b.n	8008db6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60bb      	str	r3, [r7, #8]
 8008d8c:	e013      	b.n	8008db6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2200      	movs	r2, #0
 8008d96:	2180      	movs	r1, #128	; 0x80
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f944 	bl	8009026 <UART_WaitOnFlagUntilTimeout>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e01f      	b.n	8008de8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	60ba      	str	r2, [r7, #8]
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1b7      	bne.n	8008d30 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2140      	movs	r1, #64	; 0x40
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f000 f92b 	bl	8009026 <UART_WaitOnFlagUntilTimeout>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e006      	b.n	8008de8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10d      	bne.n	8008e42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	f003 0320 	and.w	r3, r3, #32
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d008      	beq.n	8008e42 <HAL_UART_IRQHandler+0x52>
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9db 	bl	80091f6 <UART_Receive_IT>
      return;
 8008e40:	e0d1      	b.n	8008fe6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80b0 	beq.w	8008faa <HAL_UART_IRQHandler+0x1ba>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d105      	bne.n	8008e60 <HAL_UART_IRQHandler+0x70>
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 80a5 	beq.w	8008faa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <HAL_UART_IRQHandler+0x90>
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e78:	f043 0201 	orr.w	r2, r3, #1
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <HAL_UART_IRQHandler+0xb0>
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e98:	f043 0202 	orr.w	r2, r3, #2
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <HAL_UART_IRQHandler+0xd0>
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb8:	f043 0204 	orr.w	r2, r3, #4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00f      	beq.n	8008eea <HAL_UART_IRQHandler+0xfa>
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <HAL_UART_IRQHandler+0xee>
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee2:	f043 0208 	orr.w	r2, r3, #8
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d078      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f003 0320 	and.w	r3, r3, #32
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <HAL_UART_IRQHandler+0x11c>
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	f003 0320 	and.w	r3, r3, #32
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f975 	bl	80091f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	bf0c      	ite	eq
 8008f1a:	2301      	moveq	r3, #1
 8008f1c:	2300      	movne	r3, #0
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f26:	f003 0308 	and.w	r3, r3, #8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <HAL_UART_IRQHandler+0x144>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d031      	beq.n	8008f98 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f8c0 	bl	80090ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f44:	2b40      	cmp	r3, #64	; 0x40
 8008f46:	d123      	bne.n	8008f90 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695a      	ldr	r2, [r3, #20]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f56:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d013      	beq.n	8008f88 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f64:	4a21      	ldr	r2, [pc, #132]	; (8008fec <HAL_UART_IRQHandler+0x1fc>)
 8008f66:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fb fecd 	bl	8004d0c <HAL_DMA_Abort_IT>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d016      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f82:	4610      	mov	r0, r2
 8008f84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f86:	e00e      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f843 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f8e:	e00a      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f83f 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f96:	e006      	b.n	8008fa6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f83b 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008fa4:	e01e      	b.n	8008fe4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa6:	bf00      	nop
    return;
 8008fa8:	e01c      	b.n	8008fe4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x1d6>
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f8ac 	bl	800911c <UART_Transmit_IT>
    return;
 8008fc4:	e00f      	b.n	8008fe6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x1f6>
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f8f3 	bl	80091c6 <UART_EndTransmit_IT>
    return;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008fe4:	bf00      	nop
  }
}
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	080090f5 	.word	0x080090f5

08008ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	bc80      	pop	{r7}
 8009012:	4770      	bx	lr

08009014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr

08009026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	4613      	mov	r3, r2
 8009034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009036:	e02c      	b.n	8009092 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d028      	beq.n	8009092 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <UART_WaitOnFlagUntilTimeout+0x30>
 8009046:	f7fa fe6f 	bl	8003d28 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	429a      	cmp	r2, r3
 8009054:	d21d      	bcs.n	8009092 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009064:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695a      	ldr	r2, [r3, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 0201 	bic.w	r2, r2, #1
 8009074:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2220      	movs	r2, #32
 800907a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2220      	movs	r2, #32
 8009082:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e00f      	b.n	80090b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4013      	ands	r3, r2
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	429a      	cmp	r2, r3
 80090a0:	bf0c      	ite	eq
 80090a2:	2301      	moveq	r3, #1
 80090a4:	2300      	movne	r3, #0
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	461a      	mov	r2, r3
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d0c3      	beq.n	8009038 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	695a      	ldr	r2, [r3, #20]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0201 	bic.w	r2, r2, #1
 80090e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7ff ff80 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009114:	bf00      	nop
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b21      	cmp	r3, #33	; 0x21
 800912e:	d144      	bne.n	80091ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009138:	d11a      	bne.n	8009170 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800914e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d105      	bne.n	8009164 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	1c9a      	adds	r2, r3, #2
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	621a      	str	r2, [r3, #32]
 8009162:	e00e      	b.n	8009182 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	621a      	str	r2, [r3, #32]
 800916e:	e008      	b.n	8009182 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	1c59      	adds	r1, r3, #1
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6211      	str	r1, [r2, #32]
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009186:	b29b      	uxth	r3, r3
 8009188:	3b01      	subs	r3, #1
 800918a:	b29b      	uxth	r3, r3
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	4619      	mov	r1, r3
 8009190:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10f      	bne.n	80091b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68da      	ldr	r2, [r3, #12]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e000      	b.n	80091bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80091ba:	2302      	movs	r3, #2
  }
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bc80      	pop	{r7}
 80091c4:	4770      	bx	lr

080091c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff ff02 	bl	8008ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b22      	cmp	r3, #34	; 0x22
 8009208:	d171      	bne.n	80092ee <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009212:	d123      	bne.n	800925c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10e      	bne.n	8009240 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	b29b      	uxth	r3, r3
 800922a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922e:	b29a      	uxth	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009238:	1c9a      	adds	r2, r3, #2
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	629a      	str	r2, [r3, #40]	; 0x28
 800923e:	e029      	b.n	8009294 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	b29b      	uxth	r3, r3
 8009248:	b2db      	uxtb	r3, r3
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	629a      	str	r2, [r3, #40]	; 0x28
 800925a:	e01b      	b.n	8009294 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6858      	ldr	r0, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	1c59      	adds	r1, r3, #1
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6291      	str	r1, [r2, #40]	; 0x28
 8009274:	b2c2      	uxtb	r2, r0
 8009276:	701a      	strb	r2, [r3, #0]
 8009278:	e00c      	b.n	8009294 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	b2da      	uxtb	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	1c58      	adds	r0, r3, #1
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	6288      	str	r0, [r1, #40]	; 0x28
 800928c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009290:	b2d2      	uxtb	r2, r2
 8009292:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	b29b      	uxth	r3, r3
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	4619      	mov	r1, r3
 80092a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d120      	bne.n	80092ea <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0220 	bic.w	r2, r2, #32
 80092b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	695a      	ldr	r2, [r3, #20]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0201 	bic.w	r2, r2, #1
 80092d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2220      	movs	r2, #32
 80092dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fe8e 	bl	8009002 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e002      	b.n	80092f0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	e000      	b.n	80092f0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80092ee:	2302      	movs	r3, #2
  }
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	431a      	orrs	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	4313      	orrs	r3, r2
 800932c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009338:	f023 030c 	bic.w	r3, r3, #12
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	6812      	ldr	r2, [r2, #0]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	430b      	orrs	r3, r1
 8009344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a55      	ldr	r2, [pc, #340]	; (80094b8 <UART_SetConfig+0x1c0>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d103      	bne.n	800936e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009366:	f7fe f961 	bl	800762c <HAL_RCC_GetPCLK2Freq>
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	e002      	b.n	8009374 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800936e:	f7fe f949 	bl	8007604 <HAL_RCC_GetPCLK1Freq>
 8009372:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800937c:	d14c      	bne.n	8009418 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009a      	lsls	r2, r3, #2
 8009388:	441a      	add	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	005b      	lsls	r3, r3, #1
 8009390:	fbb2 f3f3 	udiv	r3, r2, r3
 8009394:	4a49      	ldr	r2, [pc, #292]	; (80094bc <UART_SetConfig+0x1c4>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	095b      	lsrs	r3, r3, #5
 800939c:	0119      	lsls	r1, r3, #4
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	4613      	mov	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	009a      	lsls	r2, r3, #2
 80093a8:	441a      	add	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80093b4:	4b41      	ldr	r3, [pc, #260]	; (80094bc <UART_SetConfig+0x1c4>)
 80093b6:	fba3 0302 	umull	r0, r3, r3, r2
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	2064      	movs	r0, #100	; 0x64
 80093be:	fb00 f303 	mul.w	r3, r0, r3
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	3332      	adds	r3, #50	; 0x32
 80093c8:	4a3c      	ldr	r2, [pc, #240]	; (80094bc <UART_SetConfig+0x1c4>)
 80093ca:	fba2 2303 	umull	r2, r3, r2, r3
 80093ce:	095b      	lsrs	r3, r3, #5
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093d6:	4419      	add	r1, r3
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	009a      	lsls	r2, r3, #2
 80093e2:	441a      	add	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80093ee:	4b33      	ldr	r3, [pc, #204]	; (80094bc <UART_SetConfig+0x1c4>)
 80093f0:	fba3 0302 	umull	r0, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	2064      	movs	r0, #100	; 0x64
 80093f8:	fb00 f303 	mul.w	r3, r0, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	3332      	adds	r3, #50	; 0x32
 8009402:	4a2e      	ldr	r2, [pc, #184]	; (80094bc <UART_SetConfig+0x1c4>)
 8009404:	fba2 2303 	umull	r2, r3, r2, r3
 8009408:	095b      	lsrs	r3, r3, #5
 800940a:	f003 0207 	and.w	r2, r3, #7
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	440a      	add	r2, r1
 8009414:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009416:	e04a      	b.n	80094ae <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009a      	lsls	r2, r3, #2
 8009422:	441a      	add	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	fbb2 f3f3 	udiv	r3, r2, r3
 800942e:	4a23      	ldr	r2, [pc, #140]	; (80094bc <UART_SetConfig+0x1c4>)
 8009430:	fba2 2303 	umull	r2, r3, r2, r3
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	0119      	lsls	r1, r3, #4
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009a      	lsls	r2, r3, #2
 8009442:	441a      	add	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	fbb2 f2f3 	udiv	r2, r2, r3
 800944e:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <UART_SetConfig+0x1c4>)
 8009450:	fba3 0302 	umull	r0, r3, r3, r2
 8009454:	095b      	lsrs	r3, r3, #5
 8009456:	2064      	movs	r0, #100	; 0x64
 8009458:	fb00 f303 	mul.w	r3, r0, r3
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	011b      	lsls	r3, r3, #4
 8009460:	3332      	adds	r3, #50	; 0x32
 8009462:	4a16      	ldr	r2, [pc, #88]	; (80094bc <UART_SetConfig+0x1c4>)
 8009464:	fba2 2303 	umull	r2, r3, r2, r3
 8009468:	095b      	lsrs	r3, r3, #5
 800946a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800946e:	4419      	add	r1, r3
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	4613      	mov	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	009a      	lsls	r2, r3, #2
 800947a:	441a      	add	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	fbb2 f2f3 	udiv	r2, r2, r3
 8009486:	4b0d      	ldr	r3, [pc, #52]	; (80094bc <UART_SetConfig+0x1c4>)
 8009488:	fba3 0302 	umull	r0, r3, r3, r2
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	2064      	movs	r0, #100	; 0x64
 8009490:	fb00 f303 	mul.w	r3, r0, r3
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	3332      	adds	r3, #50	; 0x32
 800949a:	4a08      	ldr	r2, [pc, #32]	; (80094bc <UART_SetConfig+0x1c4>)
 800949c:	fba2 2303 	umull	r2, r3, r2, r3
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	f003 020f 	and.w	r2, r3, #15
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	440a      	add	r2, r1
 80094ac:	609a      	str	r2, [r3, #8]
}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	40013800 	.word	0x40013800
 80094bc:	51eb851f 	.word	0x51eb851f

080094c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80094d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80094d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr

080094ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80094f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80094f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009500:	b29a      	uxth	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	b29b      	uxth	r3, r3
 8009506:	43db      	mvns	r3, r3
 8009508:	b29b      	uxth	r3, r3
 800950a:	4013      	ands	r3, r2
 800950c:	b29a      	uxth	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	bc80      	pop	{r7}
 800951e:	4770      	bx	lr

08009520 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009520:	b084      	sub	sp, #16
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	f107 0014 	add.w	r0, r7, #20
 800952e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	b004      	add	sp, #16
 800955e:	4770      	bx	lr

08009560 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009560:	b480      	push	{r7}
 8009562:	b09b      	sub	sp, #108	; 0x6c
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009586:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	78db      	ldrb	r3, [r3, #3]
 800958e:	2b03      	cmp	r3, #3
 8009590:	d81f      	bhi.n	80095d2 <USB_ActivateEndpoint+0x72>
 8009592:	a201      	add	r2, pc, #4	; (adr r2, 8009598 <USB_ActivateEndpoint+0x38>)
 8009594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009598:	080095a9 	.word	0x080095a9
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095db 	.word	0x080095db
 80095a4:	080095b7 	.word	0x080095b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80095a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80095ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80095b4:	e012      	b.n	80095dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80095b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80095ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80095be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80095c2:	e00b      	b.n	80095dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80095c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80095c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80095d0:	e004      	b.n	80095dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80095d8:	e000      	b.n	80095dc <USB_ActivateEndpoint+0x7c>
      break;
 80095da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	441a      	add	r2, r3
 80095e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80095ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009614:	b29a      	uxth	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	441a      	add	r2, r3
 800962c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800963c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009640:	b29b      	uxth	r3, r3
 8009642:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	7b1b      	ldrb	r3, [r3, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f040 8149 	bne.w	80098e0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	785b      	ldrb	r3, [r3, #1]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8084 	beq.w	8009760 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009662:	b29b      	uxth	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	4413      	add	r3, r2
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	011a      	lsls	r2, r3, #4
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	88db      	ldrh	r3, [r3, #6]
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	b29b      	uxth	r3, r3
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	81fb      	strh	r3, [r7, #14]
 800969a:	89fb      	ldrh	r3, [r7, #14]
 800969c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d01b      	beq.n	80096dc <USB_ActivateEndpoint+0x17c>
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ba:	81bb      	strh	r3, [r7, #12]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	441a      	add	r2, r3
 80096c6:	89bb      	ldrh	r3, [r7, #12]
 80096c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096d8:	b29b      	uxth	r3, r3
 80096da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	78db      	ldrb	r3, [r3, #3]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d020      	beq.n	8009726 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096fa:	813b      	strh	r3, [r7, #8]
 80096fc:	893b      	ldrh	r3, [r7, #8]
 80096fe:	f083 0320 	eor.w	r3, r3, #32
 8009702:	813b      	strh	r3, [r7, #8]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	441a      	add	r2, r3
 800970e:	893b      	ldrh	r3, [r7, #8]
 8009710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800971c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009720:	b29b      	uxth	r3, r3
 8009722:	8013      	strh	r3, [r2, #0]
 8009724:	e27f      	b.n	8009c26 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800973c:	817b      	strh	r3, [r7, #10]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	441a      	add	r2, r3
 8009748:	897b      	ldrh	r3, [r7, #10]
 800974a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800974e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975a:	b29b      	uxth	r3, r3
 800975c:	8013      	strh	r3, [r2, #0]
 800975e:	e262      	b.n	8009c26 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976a:	b29b      	uxth	r3, r3
 800976c:	461a      	mov	r2, r3
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	4413      	add	r3, r2
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	011a      	lsls	r2, r3, #4
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	4413      	add	r3, r2
 800977e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009782:	62bb      	str	r3, [r7, #40]	; 0x28
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	88db      	ldrh	r3, [r3, #6]
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800979e:	b29b      	uxth	r3, r3
 80097a0:	461a      	mov	r2, r3
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	4413      	add	r3, r2
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	011a      	lsls	r2, r3, #4
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	4413      	add	r3, r2
 80097b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097b6:	623b      	str	r3, [r7, #32]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d112      	bne.n	80097e6 <USB_ActivateEndpoint+0x286>
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097de:	b29a      	uxth	r2, r3
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	801a      	strh	r2, [r3, #0]
 80097e4:	e02f      	b.n	8009846 <USB_ActivateEndpoint+0x2e6>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b3e      	cmp	r3, #62	; 0x3e
 80097ec:	d813      	bhi.n	8009816 <USB_ActivateEndpoint+0x2b6>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	085b      	lsrs	r3, r3, #1
 80097f4:	663b      	str	r3, [r7, #96]	; 0x60
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <USB_ActivateEndpoint+0x2a8>
 8009802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009804:	3301      	adds	r3, #1
 8009806:	663b      	str	r3, [r7, #96]	; 0x60
 8009808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800980a:	b29b      	uxth	r3, r3
 800980c:	029b      	lsls	r3, r3, #10
 800980e:	b29a      	uxth	r2, r3
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	801a      	strh	r2, [r3, #0]
 8009814:	e017      	b.n	8009846 <USB_ActivateEndpoint+0x2e6>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	095b      	lsrs	r3, r3, #5
 800981c:	663b      	str	r3, [r7, #96]	; 0x60
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f003 031f 	and.w	r3, r3, #31
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <USB_ActivateEndpoint+0x2d0>
 800982a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800982c:	3b01      	subs	r3, #1
 800982e:	663b      	str	r3, [r7, #96]	; 0x60
 8009830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009832:	b29b      	uxth	r3, r3
 8009834:	029b      	lsls	r3, r3, #10
 8009836:	b29b      	uxth	r3, r3
 8009838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800983c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009840:	b29a      	uxth	r2, r3
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	83fb      	strh	r3, [r7, #30]
 8009854:	8bfb      	ldrh	r3, [r7, #30]
 8009856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d01b      	beq.n	8009896 <USB_ActivateEndpoint+0x336>
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009874:	83bb      	strh	r3, [r7, #28]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	441a      	add	r2, r3
 8009880:	8bbb      	ldrh	r3, [r7, #28]
 8009882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800988a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	b29b      	uxth	r3, r3
 8009894:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ac:	837b      	strh	r3, [r7, #26]
 80098ae:	8b7b      	ldrh	r3, [r7, #26]
 80098b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098b4:	837b      	strh	r3, [r7, #26]
 80098b6:	8b7b      	ldrh	r3, [r7, #26]
 80098b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098bc:	837b      	strh	r3, [r7, #26]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	441a      	add	r2, r3
 80098c8:	8b7b      	ldrh	r3, [r7, #26]
 80098ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098da:	b29b      	uxth	r3, r3
 80098dc:	8013      	strh	r3, [r2, #0]
 80098de:	e1a2      	b.n	8009c26 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	441a      	add	r2, r3
 8009904:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800990c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009910:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009918:	b29b      	uxth	r3, r3
 800991a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009926:	b29b      	uxth	r3, r3
 8009928:	461a      	mov	r2, r3
 800992a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800992c:	4413      	add	r3, r2
 800992e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	011a      	lsls	r2, r3, #4
 8009936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009938:	4413      	add	r3, r2
 800993a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800993e:	657b      	str	r3, [r7, #84]	; 0x54
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	891b      	ldrh	r3, [r3, #8]
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	b29b      	uxth	r3, r3
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	653b      	str	r3, [r7, #80]	; 0x50
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800995a:	b29b      	uxth	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009960:	4413      	add	r3, r2
 8009962:	653b      	str	r3, [r7, #80]	; 0x50
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	011a      	lsls	r2, r3, #4
 800996a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800996c:	4413      	add	r3, r2
 800996e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	895b      	ldrh	r3, [r3, #10]
 8009978:	085b      	lsrs	r3, r3, #1
 800997a:	b29b      	uxth	r3, r3
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	b29a      	uxth	r2, r3
 8009980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009982:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	2b00      	cmp	r3, #0
 800998a:	f040 8091 	bne.w	8009ab0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800999c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800999e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01b      	beq.n	80099de <USB_ActivateEndpoint+0x47e>
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	441a      	add	r2, r3
 80099c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80099ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099da:	b29b      	uxth	r3, r3
 80099dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80099ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80099ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d01b      	beq.n	8009a2e <USB_ActivateEndpoint+0x4ce>
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	441a      	add	r2, r3
 8009a18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009a46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009a4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	441a      	add	r2, r3
 8009a60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a8c:	867b      	strh	r3, [r7, #50]	; 0x32
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	441a      	add	r2, r3
 8009a98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	8013      	strh	r3, [r2, #0]
 8009aae:	e0ba      	b.n	8009c26 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009ac0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01d      	beq.n	8009b08 <USB_ActivateEndpoint+0x5a8>
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	441a      	add	r2, r3
 8009af0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d01d      	beq.n	8009b60 <USB_ActivateEndpoint+0x600>
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	78db      	ldrb	r3, [r3, #3]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d024      	beq.n	8009bb2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b86:	f083 0320 	eor.w	r3, r3, #32
 8009b8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	441a      	add	r2, r3
 8009b98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	8013      	strh	r3, [r2, #0]
 8009bb0:	e01d      	b.n	8009bee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	441a      	add	r2, r3
 8009bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	441a      	add	r2, r3
 8009c10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009c26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	376c      	adds	r7, #108	; 0x6c
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr

08009c34 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b08d      	sub	sp, #52	; 0x34
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	7b1b      	ldrb	r3, [r3, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f040 808e 	bne.w	8009d64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d044      	beq.n	8009cda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	81bb      	strh	r3, [r7, #12]
 8009c5e:	89bb      	ldrh	r3, [r7, #12]
 8009c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01b      	beq.n	8009ca0 <USB_DeactivateEndpoint+0x6c>
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7e:	817b      	strh	r3, [r7, #10]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	441a      	add	r2, r3
 8009c8a:	897b      	ldrh	r3, [r7, #10]
 8009c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cb6:	813b      	strh	r3, [r7, #8]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	441a      	add	r2, r3
 8009cc2:	893b      	ldrh	r3, [r7, #8]
 8009cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	8013      	strh	r3, [r2, #0]
 8009cd8:	e192      	b.n	800a000 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	827b      	strh	r3, [r7, #18]
 8009ce8:	8a7b      	ldrh	r3, [r7, #18]
 8009cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01b      	beq.n	8009d2a <USB_DeactivateEndpoint+0xf6>
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d08:	823b      	strh	r3, [r7, #16]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	441a      	add	r2, r3
 8009d14:	8a3b      	ldrh	r3, [r7, #16]
 8009d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d40:	81fb      	strh	r3, [r7, #14]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	441a      	add	r2, r3
 8009d4c:	89fb      	ldrh	r3, [r7, #14]
 8009d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	8013      	strh	r3, [r2, #0]
 8009d62:	e14d      	b.n	800a000 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f040 80a5 	bne.w	8009eb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	843b      	strh	r3, [r7, #32]
 8009d7c:	8c3b      	ldrh	r3, [r7, #32]
 8009d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d01b      	beq.n	8009dbe <USB_DeactivateEndpoint+0x18a>
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9c:	83fb      	strh	r3, [r7, #30]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	441a      	add	r2, r3
 8009da8:	8bfb      	ldrh	r3, [r7, #30]
 8009daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	83bb      	strh	r3, [r7, #28]
 8009dcc:	8bbb      	ldrh	r3, [r7, #28]
 8009dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01b      	beq.n	8009e0e <USB_DeactivateEndpoint+0x1da>
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dec:	837b      	strh	r3, [r7, #26]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	441a      	add	r2, r3
 8009df8:	8b7b      	ldrh	r3, [r7, #26]
 8009dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e24:	833b      	strh	r3, [r7, #24]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	441a      	add	r2, r3
 8009e30:	8b3b      	ldrh	r3, [r7, #24]
 8009e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5c:	82fb      	strh	r3, [r7, #22]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	441a      	add	r2, r3
 8009e68:	8afb      	ldrh	r3, [r7, #22]
 8009e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e94:	82bb      	strh	r3, [r7, #20]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	441a      	add	r2, r3
 8009ea0:	8abb      	ldrh	r3, [r7, #20]
 8009ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	8013      	strh	r3, [r2, #0]
 8009eb6:	e0a3      	b.n	800a000 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d01b      	beq.n	8009f08 <USB_DeactivateEndpoint+0x2d4>
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	441a      	add	r2, r3
 8009ef2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009f16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d01b      	beq.n	8009f58 <USB_DeactivateEndpoint+0x324>
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	881b      	ldrh	r3, [r3, #0]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f36:	853b      	strh	r3, [r7, #40]	; 0x28
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	441a      	add	r2, r3
 8009f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	441a      	add	r2, r3
 8009f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	441a      	add	r2, r3
 8009fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fde:	847b      	strh	r3, [r7, #34]	; 0x22
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	441a      	add	r2, r3
 8009fea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3734      	adds	r7, #52	; 0x34
 800a006:	46bd      	mov	sp, r7
 800a008:	bc80      	pop	{r7}
 800a00a:	4770      	bx	lr

0800a00c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b0c4      	sub	sp, #272	; 0x110
 800a010:	af00      	add	r7, sp, #0
 800a012:	1d3b      	adds	r3, r7, #4
 800a014:	6018      	str	r0, [r3, #0]
 800a016:	463b      	mov	r3, r7
 800a018:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a01a:	463b      	mov	r3, r7
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	785b      	ldrb	r3, [r3, #1]
 800a020:	2b01      	cmp	r3, #1
 800a022:	f040 8566 	bne.w	800aaf2 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a026:	463b      	mov	r3, r7
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	699a      	ldr	r2, [r3, #24]
 800a02c:	463b      	mov	r3, r7
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	429a      	cmp	r2, r3
 800a034:	d905      	bls.n	800a042 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a036:	463b      	mov	r3, r7
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a040:	e004      	b.n	800a04c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a042:	463b      	mov	r3, r7
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a04c:	463b      	mov	r3, r7
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	7b1b      	ldrb	r3, [r3, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d12c      	bne.n	800a0b0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a056:	463b      	mov	r3, r7
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	6959      	ldr	r1, [r3, #20]
 800a05c:	463b      	mov	r3, r7
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	88da      	ldrh	r2, [r3, #6]
 800a062:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a066:	b29b      	uxth	r3, r3
 800a068:	1d38      	adds	r0, r7, #4
 800a06a:	6800      	ldr	r0, [r0, #0]
 800a06c:	f001 fa31 	bl	800b4d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a070:	1d3b      	adds	r3, r7, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	1d3b      	adds	r3, r7, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a07e:	b29b      	uxth	r3, r3
 800a080:	461a      	mov	r2, r3
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	4413      	add	r3, r2
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	463b      	mov	r3, r7
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	011a      	lsls	r2, r3, #4
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	4413      	add	r3, r2
 800a094:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a098:	f107 0310 	add.w	r3, r7, #16
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	f107 0310 	add.w	r3, r7, #16
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	f000 bcec 	b.w	800aa88 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	78db      	ldrb	r3, [r3, #3]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	f040 8356 	bne.w	800a768 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a0bc:	463b      	mov	r3, r7
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6a1a      	ldr	r2, [r3, #32]
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	f240 82fa 	bls.w	800a6c2 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a0ce:	1d3b      	adds	r3, r7, #4
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	463b      	mov	r3, r7
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800a0ec:	1d3b      	adds	r3, r7, #4
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	463b      	mov	r3, r7
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	441a      	add	r2, r3
 800a0fa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a0fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a106:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10e:	b29b      	uxth	r3, r3
 800a110:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800a112:	463b      	mov	r3, r7
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a11c:	463b      	mov	r3, r7
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6a1a      	ldr	r2, [r3, #32]
 800a122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a126:	1ad2      	subs	r2, r2, r3
 800a128:	463b      	mov	r3, r7
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a12e:	1d3b      	adds	r3, r7, #4
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	463b      	mov	r3, r7
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 815e 	beq.w	800a406 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a14a:	1d3b      	adds	r3, r7, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	637b      	str	r3, [r7, #52]	; 0x34
 800a150:	463b      	mov	r3, r7
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d164      	bne.n	800a224 <USB_EPStartXfer+0x218>
 800a15a:	1d3b      	adds	r3, r7, #4
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a160:	1d3b      	adds	r3, r7, #4
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a168:	b29b      	uxth	r3, r3
 800a16a:	461a      	mov	r2, r3
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	4413      	add	r3, r2
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a172:	463b      	mov	r3, r7
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	011a      	lsls	r2, r3, #4
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	4413      	add	r3, r2
 800a17e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a182:	62bb      	str	r3, [r7, #40]	; 0x28
 800a184:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d112      	bne.n	800a1b2 <USB_EPStartXfer+0x1a6>
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	b29b      	uxth	r3, r3
 800a192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a196:	b29a      	uxth	r2, r3
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	801a      	strh	r2, [r3, #0]
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	e054      	b.n	800a25c <USB_EPStartXfer+0x250>
 800a1b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1b6:	2b3e      	cmp	r3, #62	; 0x3e
 800a1b8:	d817      	bhi.n	800a1ea <USB_EPStartXfer+0x1de>
 800a1ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <USB_EPStartXfer+0x1ce>
 800a1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	029b      	lsls	r3, r3, #10
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	801a      	strh	r2, [r3, #0]
 800a1e8:	e038      	b.n	800a25c <USB_EPStartXfer+0x250>
 800a1ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1ee:	095b      	lsrs	r3, r3, #5
 800a1f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1f8:	f003 031f 	and.w	r3, r3, #31
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d104      	bne.n	800a20a <USB_EPStartXfer+0x1fe>
 800a200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a204:	3b01      	subs	r3, #1
 800a206:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a20e:	b29b      	uxth	r3, r3
 800a210:	029b      	lsls	r3, r3, #10
 800a212:	b29b      	uxth	r3, r3
 800a214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	801a      	strh	r2, [r3, #0]
 800a222:	e01b      	b.n	800a25c <USB_EPStartXfer+0x250>
 800a224:	463b      	mov	r3, r7
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	785b      	ldrb	r3, [r3, #1]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d116      	bne.n	800a25c <USB_EPStartXfer+0x250>
 800a22e:	1d3b      	adds	r3, r7, #4
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a236:	b29b      	uxth	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23c:	4413      	add	r3, r2
 800a23e:	637b      	str	r3, [r7, #52]	; 0x34
 800a240:	463b      	mov	r3, r7
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	011a      	lsls	r2, r3, #4
 800a248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24a:	4413      	add	r3, r2
 800a24c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a250:	633b      	str	r3, [r7, #48]	; 0x30
 800a252:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a256:	b29a      	uxth	r2, r3
 800a258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a25c:	463b      	mov	r3, r7
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	895b      	ldrh	r3, [r3, #10]
 800a262:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a266:	463b      	mov	r3, r7
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6959      	ldr	r1, [r3, #20]
 800a26c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a270:	b29b      	uxth	r3, r3
 800a272:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a276:	1d38      	adds	r0, r7, #4
 800a278:	6800      	ldr	r0, [r0, #0]
 800a27a:	f001 f92a 	bl	800b4d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a27e:	463b      	mov	r3, r7
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	695a      	ldr	r2, [r3, #20]
 800a284:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a288:	441a      	add	r2, r3
 800a28a:	463b      	mov	r3, r7
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a290:	463b      	mov	r3, r7
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6a1a      	ldr	r2, [r3, #32]
 800a296:	463b      	mov	r3, r7
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d90e      	bls.n	800a2be <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800a2a0:	463b      	mov	r3, r7
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800a2aa:	463b      	mov	r3, r7
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6a1a      	ldr	r2, [r3, #32]
 800a2b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2b4:	1ad2      	subs	r2, r2, r3
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	621a      	str	r2, [r3, #32]
 800a2bc:	e008      	b.n	800a2d0 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a2be:	463b      	mov	r3, r7
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800a2c8:	463b      	mov	r3, r7
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2d0:	463b      	mov	r3, r7
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d164      	bne.n	800a3a4 <USB_EPStartXfer+0x398>
 800a2da:	1d3b      	adds	r3, r7, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	1d3b      	adds	r3, r7, #4
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	011a      	lsls	r2, r3, #4
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a302:	61bb      	str	r3, [r7, #24]
 800a304:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d112      	bne.n	800a332 <USB_EPStartXfer+0x326>
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29b      	uxth	r3, r3
 800a312:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a316:	b29a      	uxth	r2, r3
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	801a      	strh	r2, [r3, #0]
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	e057      	b.n	800a3e2 <USB_EPStartXfer+0x3d6>
 800a332:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a336:	2b3e      	cmp	r3, #62	; 0x3e
 800a338:	d817      	bhi.n	800a36a <USB_EPStartXfer+0x35e>
 800a33a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a33e:	085b      	lsrs	r3, r3, #1
 800a340:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a344:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <USB_EPStartXfer+0x34e>
 800a350:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a354:	3301      	adds	r3, #1
 800a356:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a35a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a35e:	b29b      	uxth	r3, r3
 800a360:	029b      	lsls	r3, r3, #10
 800a362:	b29a      	uxth	r2, r3
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	801a      	strh	r2, [r3, #0]
 800a368:	e03b      	b.n	800a3e2 <USB_EPStartXfer+0x3d6>
 800a36a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a36e:	095b      	lsrs	r3, r3, #5
 800a370:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a378:	f003 031f 	and.w	r3, r3, #31
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d104      	bne.n	800a38a <USB_EPStartXfer+0x37e>
 800a380:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a384:	3b01      	subs	r3, #1
 800a386:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a38a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a38e:	b29b      	uxth	r3, r3
 800a390:	029b      	lsls	r3, r3, #10
 800a392:	b29b      	uxth	r3, r3
 800a394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	801a      	strh	r2, [r3, #0]
 800a3a2:	e01e      	b.n	800a3e2 <USB_EPStartXfer+0x3d6>
 800a3a4:	463b      	mov	r3, r7
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	785b      	ldrb	r3, [r3, #1]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d119      	bne.n	800a3e2 <USB_EPStartXfer+0x3d6>
 800a3ae:	1d3b      	adds	r3, r7, #4
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3b4:	1d3b      	adds	r3, r7, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	4413      	add	r3, r2
 800a3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	011a      	lsls	r2, r3, #4
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3d6:	623b      	str	r3, [r7, #32]
 800a3d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	891b      	ldrh	r3, [r3, #8]
 800a3e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3ec:	463b      	mov	r3, r7
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6959      	ldr	r1, [r3, #20]
 800a3f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a3fc:	1d38      	adds	r0, r7, #4
 800a3fe:	6800      	ldr	r0, [r0, #0]
 800a400:	f001 f867 	bl	800b4d2 <USB_WritePMA>
 800a404:	e340      	b.n	800aa88 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a406:	463b      	mov	r3, r7
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d164      	bne.n	800a4da <USB_EPStartXfer+0x4ce>
 800a410:	1d3b      	adds	r3, r7, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a416:	1d3b      	adds	r3, r7, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a41e:	b29b      	uxth	r3, r3
 800a420:	461a      	mov	r2, r3
 800a422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a424:	4413      	add	r3, r2
 800a426:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a428:	463b      	mov	r3, r7
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	011a      	lsls	r2, r3, #4
 800a430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a432:	4413      	add	r3, r2
 800a434:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a438:	64bb      	str	r3, [r7, #72]	; 0x48
 800a43a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d112      	bne.n	800a468 <USB_EPStartXfer+0x45c>
 800a442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	b29b      	uxth	r3, r3
 800a448:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a450:	801a      	strh	r2, [r3, #0]
 800a452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a45c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a460:	b29a      	uxth	r2, r3
 800a462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a464:	801a      	strh	r2, [r3, #0]
 800a466:	e057      	b.n	800a518 <USB_EPStartXfer+0x50c>
 800a468:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a46c:	2b3e      	cmp	r3, #62	; 0x3e
 800a46e:	d817      	bhi.n	800a4a0 <USB_EPStartXfer+0x494>
 800a470:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a474:	085b      	lsrs	r3, r3, #1
 800a476:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a47a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d004      	beq.n	800a490 <USB_EPStartXfer+0x484>
 800a486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a48a:	3301      	adds	r3, #1
 800a48c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a494:	b29b      	uxth	r3, r3
 800a496:	029b      	lsls	r3, r3, #10
 800a498:	b29a      	uxth	r2, r3
 800a49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a49c:	801a      	strh	r2, [r3, #0]
 800a49e:	e03b      	b.n	800a518 <USB_EPStartXfer+0x50c>
 800a4a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4a4:	095b      	lsrs	r3, r3, #5
 800a4a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4ae:	f003 031f 	and.w	r3, r3, #31
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <USB_EPStartXfer+0x4b4>
 800a4b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	029b      	lsls	r3, r3, #10
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	e01e      	b.n	800a518 <USB_EPStartXfer+0x50c>
 800a4da:	463b      	mov	r3, r7
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d119      	bne.n	800a518 <USB_EPStartXfer+0x50c>
 800a4e4:	1d3b      	adds	r3, r7, #4
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a4ea:	1d3b      	adds	r3, r7, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f8:	4413      	add	r3, r2
 800a4fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a4fc:	463b      	mov	r3, r7
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	011a      	lsls	r2, r3, #4
 800a504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a506:	4413      	add	r3, r2
 800a508:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a50c:	653b      	str	r3, [r7, #80]	; 0x50
 800a50e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a512:	b29a      	uxth	r2, r3
 800a514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a516:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a518:	463b      	mov	r3, r7
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	891b      	ldrh	r3, [r3, #8]
 800a51e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a522:	463b      	mov	r3, r7
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6959      	ldr	r1, [r3, #20]
 800a528:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a532:	1d38      	adds	r0, r7, #4
 800a534:	6800      	ldr	r0, [r0, #0]
 800a536:	f000 ffcc 	bl	800b4d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a53a:	463b      	mov	r3, r7
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	695a      	ldr	r2, [r3, #20]
 800a540:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a544:	441a      	add	r2, r3
 800a546:	463b      	mov	r3, r7
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a54c:	463b      	mov	r3, r7
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a1a      	ldr	r2, [r3, #32]
 800a552:	463b      	mov	r3, r7
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d90e      	bls.n	800a57a <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800a55c:	463b      	mov	r3, r7
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800a566:	463b      	mov	r3, r7
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6a1a      	ldr	r2, [r3, #32]
 800a56c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a570:	1ad2      	subs	r2, r2, r3
 800a572:	463b      	mov	r3, r7
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	621a      	str	r2, [r3, #32]
 800a578:	e008      	b.n	800a58c <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800a57a:	463b      	mov	r3, r7
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800a584:	463b      	mov	r3, r7
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2200      	movs	r2, #0
 800a58a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a58c:	1d3b      	adds	r3, r7, #4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	647b      	str	r3, [r7, #68]	; 0x44
 800a592:	463b      	mov	r3, r7
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	785b      	ldrb	r3, [r3, #1]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d164      	bne.n	800a666 <USB_EPStartXfer+0x65a>
 800a59c:	1d3b      	adds	r3, r7, #4
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a2:	1d3b      	adds	r3, r7, #4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b0:	4413      	add	r3, r2
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b4:	463b      	mov	r3, r7
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	011a      	lsls	r2, r3, #4
 800a5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5be:	4413      	add	r3, r2
 800a5c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a5c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d112      	bne.n	800a5f4 <USB_EPStartXfer+0x5e8>
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	801a      	strh	r2, [r3, #0]
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	801a      	strh	r2, [r3, #0]
 800a5f2:	e054      	b.n	800a69e <USB_EPStartXfer+0x692>
 800a5f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5f8:	2b3e      	cmp	r3, #62	; 0x3e
 800a5fa:	d817      	bhi.n	800a62c <USB_EPStartXfer+0x620>
 800a5fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a600:	085b      	lsrs	r3, r3, #1
 800a602:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a606:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d004      	beq.n	800a61c <USB_EPStartXfer+0x610>
 800a612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a616:	3301      	adds	r3, #1
 800a618:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a61c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a620:	b29b      	uxth	r3, r3
 800a622:	029b      	lsls	r3, r3, #10
 800a624:	b29a      	uxth	r2, r3
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	e038      	b.n	800a69e <USB_EPStartXfer+0x692>
 800a62c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a636:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a63a:	f003 031f 	and.w	r3, r3, #31
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <USB_EPStartXfer+0x640>
 800a642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a646:	3b01      	subs	r3, #1
 800a648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a64c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a650:	b29b      	uxth	r3, r3
 800a652:	029b      	lsls	r3, r3, #10
 800a654:	b29b      	uxth	r3, r3
 800a656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a65a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a65e:	b29a      	uxth	r2, r3
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	801a      	strh	r2, [r3, #0]
 800a664:	e01b      	b.n	800a69e <USB_EPStartXfer+0x692>
 800a666:	463b      	mov	r3, r7
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	785b      	ldrb	r3, [r3, #1]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d116      	bne.n	800a69e <USB_EPStartXfer+0x692>
 800a670:	1d3b      	adds	r3, r7, #4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a678:	b29b      	uxth	r3, r3
 800a67a:	461a      	mov	r2, r3
 800a67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67e:	4413      	add	r3, r2
 800a680:	647b      	str	r3, [r7, #68]	; 0x44
 800a682:	463b      	mov	r3, r7
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	011a      	lsls	r2, r3, #4
 800a68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68c:	4413      	add	r3, r2
 800a68e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a692:	643b      	str	r3, [r7, #64]	; 0x40
 800a694:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a698:	b29a      	uxth	r2, r3
 800a69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a69e:	463b      	mov	r3, r7
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	895b      	ldrh	r3, [r3, #10]
 800a6a4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6a8:	463b      	mov	r3, r7
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6959      	ldr	r1, [r3, #20]
 800a6ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a6b8:	1d38      	adds	r0, r7, #4
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	f000 ff09 	bl	800b4d2 <USB_WritePMA>
 800a6c0:	e1e2      	b.n	800aa88 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800a6c2:	463b      	mov	r3, r7
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a6cc:	1d3b      	adds	r3, r7, #4
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	463b      	mov	r3, r7
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a6ea:	1d3b      	adds	r3, r7, #4
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	441a      	add	r2, r3
 800a6f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a6fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a710:	1d3b      	adds	r3, r7, #4
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	663b      	str	r3, [r7, #96]	; 0x60
 800a716:	1d3b      	adds	r3, r7, #4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a71e:	b29b      	uxth	r3, r3
 800a720:	461a      	mov	r2, r3
 800a722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a724:	4413      	add	r3, r2
 800a726:	663b      	str	r3, [r7, #96]	; 0x60
 800a728:	463b      	mov	r3, r7
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	011a      	lsls	r2, r3, #4
 800a730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a732:	4413      	add	r3, r2
 800a734:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a73a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a73e:	b29a      	uxth	r2, r3
 800a740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a742:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a744:	463b      	mov	r3, r7
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	891b      	ldrh	r3, [r3, #8]
 800a74a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a74e:	463b      	mov	r3, r7
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6959      	ldr	r1, [r3, #20]
 800a754:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a758:	b29b      	uxth	r3, r3
 800a75a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a75e:	1d38      	adds	r0, r7, #4
 800a760:	6800      	ldr	r0, [r0, #0]
 800a762:	f000 feb6 	bl	800b4d2 <USB_WritePMA>
 800a766:	e18f      	b.n	800aa88 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a768:	1d3b      	adds	r3, r7, #4
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	463b      	mov	r3, r7
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 808f 	beq.w	800a8a2 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a784:	1d3b      	adds	r3, r7, #4
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	67bb      	str	r3, [r7, #120]	; 0x78
 800a78a:	463b      	mov	r3, r7
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d164      	bne.n	800a85e <USB_EPStartXfer+0x852>
 800a794:	1d3b      	adds	r3, r7, #4
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	673b      	str	r3, [r7, #112]	; 0x70
 800a79a:	1d3b      	adds	r3, r7, #4
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7a8:	4413      	add	r3, r2
 800a7aa:	673b      	str	r3, [r7, #112]	; 0x70
 800a7ac:	463b      	mov	r3, r7
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	011a      	lsls	r2, r3, #4
 800a7b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d112      	bne.n	800a7ec <USB_EPStartXfer+0x7e0>
 800a7c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d4:	801a      	strh	r2, [r3, #0]
 800a7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7e8:	801a      	strh	r2, [r3, #0]
 800a7ea:	e054      	b.n	800a896 <USB_EPStartXfer+0x88a>
 800a7ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7f0:	2b3e      	cmp	r3, #62	; 0x3e
 800a7f2:	d817      	bhi.n	800a824 <USB_EPStartXfer+0x818>
 800a7f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7f8:	085b      	lsrs	r3, r3, #1
 800a7fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d004      	beq.n	800a814 <USB_EPStartXfer+0x808>
 800a80a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a80e:	3301      	adds	r3, #1
 800a810:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a818:	b29b      	uxth	r3, r3
 800a81a:	029b      	lsls	r3, r3, #10
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a820:	801a      	strh	r2, [r3, #0]
 800a822:	e038      	b.n	800a896 <USB_EPStartXfer+0x88a>
 800a824:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a828:	095b      	lsrs	r3, r3, #5
 800a82a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a82e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a832:	f003 031f 	and.w	r3, r3, #31
 800a836:	2b00      	cmp	r3, #0
 800a838:	d104      	bne.n	800a844 <USB_EPStartXfer+0x838>
 800a83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83e:	3b01      	subs	r3, #1
 800a840:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a848:	b29b      	uxth	r3, r3
 800a84a:	029b      	lsls	r3, r3, #10
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a856:	b29a      	uxth	r2, r3
 800a858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	e01b      	b.n	800a896 <USB_EPStartXfer+0x88a>
 800a85e:	463b      	mov	r3, r7
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	785b      	ldrb	r3, [r3, #1]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d116      	bne.n	800a896 <USB_EPStartXfer+0x88a>
 800a868:	1d3b      	adds	r3, r7, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a870:	b29b      	uxth	r3, r3
 800a872:	461a      	mov	r2, r3
 800a874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a876:	4413      	add	r3, r2
 800a878:	67bb      	str	r3, [r7, #120]	; 0x78
 800a87a:	463b      	mov	r3, r7
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	011a      	lsls	r2, r3, #4
 800a882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a884:	4413      	add	r3, r2
 800a886:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a88a:	677b      	str	r3, [r7, #116]	; 0x74
 800a88c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a890:	b29a      	uxth	r2, r3
 800a892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a896:	463b      	mov	r3, r7
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	895b      	ldrh	r3, [r3, #10]
 800a89c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800a8a0:	e097      	b.n	800a9d2 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	785b      	ldrb	r3, [r3, #1]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d168      	bne.n	800a97e <USB_EPStartXfer+0x972>
 800a8ac:	1d3b      	adds	r3, r7, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8b4:	1d3b      	adds	r3, r7, #4
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	011a      	lsls	r2, r3, #4
 800a8d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d112      	bne.n	800a90c <USB_EPStartXfer+0x900>
 800a8e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8f4:	801a      	strh	r2, [r3, #0]
 800a8f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a904:	b29a      	uxth	r2, r3
 800a906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e05d      	b.n	800a9c8 <USB_EPStartXfer+0x9bc>
 800a90c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a910:	2b3e      	cmp	r3, #62	; 0x3e
 800a912:	d817      	bhi.n	800a944 <USB_EPStartXfer+0x938>
 800a914:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a918:	085b      	lsrs	r3, r3, #1
 800a91a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a91e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <USB_EPStartXfer+0x928>
 800a92a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a92e:	3301      	adds	r3, #1
 800a930:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a934:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a938:	b29b      	uxth	r3, r3
 800a93a:	029b      	lsls	r3, r3, #10
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a940:	801a      	strh	r2, [r3, #0]
 800a942:	e041      	b.n	800a9c8 <USB_EPStartXfer+0x9bc>
 800a944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a948:	095b      	lsrs	r3, r3, #5
 800a94a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a94e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a952:	f003 031f 	and.w	r3, r3, #31
 800a956:	2b00      	cmp	r3, #0
 800a958:	d104      	bne.n	800a964 <USB_EPStartXfer+0x958>
 800a95a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a95e:	3b01      	subs	r3, #1
 800a960:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a964:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a968:	b29b      	uxth	r3, r3
 800a96a:	029b      	lsls	r3, r3, #10
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a976:	b29a      	uxth	r2, r3
 800a978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a97a:	801a      	strh	r2, [r3, #0]
 800a97c:	e024      	b.n	800a9c8 <USB_EPStartXfer+0x9bc>
 800a97e:	463b      	mov	r3, r7
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	785b      	ldrb	r3, [r3, #1]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d11f      	bne.n	800a9c8 <USB_EPStartXfer+0x9bc>
 800a988:	1d3b      	adds	r3, r7, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a990:	1d3b      	adds	r3, r7, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a998:	b29b      	uxth	r3, r3
 800a99a:	461a      	mov	r2, r3
 800a99c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a9a6:	463b      	mov	r3, r7
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	011a      	lsls	r2, r3, #4
 800a9ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	891b      	ldrh	r3, [r3, #8]
 800a9ce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6959      	ldr	r1, [r3, #20]
 800a9d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a9e2:	1d38      	adds	r0, r7, #4
 800a9e4:	6800      	ldr	r0, [r0, #0]
 800a9e6:	f000 fd74 	bl	800b4d2 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	785b      	ldrb	r3, [r3, #1]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d122      	bne.n	800aa3a <USB_EPStartXfer+0xa2e>
 800a9f4:	1d3b      	adds	r3, r7, #4
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	463b      	mov	r3, r7
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa0e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800aa12:	1d3b      	adds	r3, r7, #4
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	463b      	mov	r3, r7
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	441a      	add	r2, r3
 800aa20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800aa24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	8013      	strh	r3, [r2, #0]
 800aa38:	e026      	b.n	800aa88 <USB_EPStartXfer+0xa7c>
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	785b      	ldrb	r3, [r3, #1]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d121      	bne.n	800aa88 <USB_EPStartXfer+0xa7c>
 800aa44:	1d3b      	adds	r3, r7, #4
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	463b      	mov	r3, r7
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa5e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800aa62:	1d3b      	adds	r3, r7, #4
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	463b      	mov	r3, r7
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	441a      	add	r2, r3
 800aa70:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800aa74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aa88:	1d3b      	adds	r3, r7, #4
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	f107 020e 	add.w	r2, r7, #14
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaa6:	8013      	strh	r3, [r2, #0]
 800aaa8:	f107 030e 	add.w	r3, r7, #14
 800aaac:	f107 020e 	add.w	r2, r7, #14
 800aab0:	8812      	ldrh	r2, [r2, #0]
 800aab2:	f082 0210 	eor.w	r2, r2, #16
 800aab6:	801a      	strh	r2, [r3, #0]
 800aab8:	f107 030e 	add.w	r3, r7, #14
 800aabc:	f107 020e 	add.w	r2, r7, #14
 800aac0:	8812      	ldrh	r2, [r2, #0]
 800aac2:	f082 0220 	eor.w	r2, r2, #32
 800aac6:	801a      	strh	r2, [r3, #0]
 800aac8:	1d3b      	adds	r3, r7, #4
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	463b      	mov	r3, r7
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	441a      	add	r2, r3
 800aad6:	f107 030e 	add.w	r3, r7, #14
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	8013      	strh	r3, [r2, #0]
 800aaf0:	e3b5      	b.n	800b25e <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aaf2:	463b      	mov	r3, r7
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	7b1b      	ldrb	r3, [r3, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f040 8090 	bne.w	800ac1e <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800aafe:	463b      	mov	r3, r7
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	699a      	ldr	r2, [r3, #24]
 800ab04:	463b      	mov	r3, r7
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d90e      	bls.n	800ab2c <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800ab0e:	463b      	mov	r3, r7
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800ab18:	463b      	mov	r3, r7
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	699a      	ldr	r2, [r3, #24]
 800ab1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab22:	1ad2      	subs	r2, r2, r3
 800ab24:	463b      	mov	r3, r7
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	619a      	str	r2, [r3, #24]
 800ab2a:	e008      	b.n	800ab3e <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800ab2c:	463b      	mov	r3, r7
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800ab36:	463b      	mov	r3, r7
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ab3e:	1d3b      	adds	r3, r7, #4
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab46:	1d3b      	adds	r3, r7, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab56:	4413      	add	r3, r2
 800ab58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	011a      	lsls	r2, r3, #4
 800ab64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab68:	4413      	add	r3, r2
 800ab6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d116      	bne.n	800aba8 <USB_EPStartXfer+0xb9c>
 800ab7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab8c:	801a      	strh	r2, [r3, #0]
 800ab8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aba4:	801a      	strh	r2, [r3, #0]
 800aba6:	e32c      	b.n	800b202 <USB_EPStartXfer+0x11f6>
 800aba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abac:	2b3e      	cmp	r3, #62	; 0x3e
 800abae:	d818      	bhi.n	800abe2 <USB_EPStartXfer+0xbd6>
 800abb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abb4:	085b      	lsrs	r3, r3, #1
 800abb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800abba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d004      	beq.n	800abd0 <USB_EPStartXfer+0xbc4>
 800abc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800abca:	3301      	adds	r3, #1
 800abcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800abd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	029b      	lsls	r3, r3, #10
 800abd8:	b29a      	uxth	r2, r3
 800abda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abde:	801a      	strh	r2, [r3, #0]
 800abe0:	e30f      	b.n	800b202 <USB_EPStartXfer+0x11f6>
 800abe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abe6:	095b      	lsrs	r3, r3, #5
 800abe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800abec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abf0:	f003 031f 	and.w	r3, r3, #31
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <USB_EPStartXfer+0xbf6>
 800abf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800abfc:	3b01      	subs	r3, #1
 800abfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	029b      	lsls	r3, r3, #10
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	e2f1      	b.n	800b202 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800ac1e:	463b      	mov	r3, r7
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	78db      	ldrb	r3, [r3, #3]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	f040 818f 	bne.w	800af48 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ac2a:	463b      	mov	r3, r7
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	785b      	ldrb	r3, [r3, #1]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d175      	bne.n	800ad20 <USB_EPStartXfer+0xd14>
 800ac34:	1d3b      	adds	r3, r7, #4
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac3c:	1d3b      	adds	r3, r7, #4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac52:	463b      	mov	r3, r7
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	011a      	lsls	r2, r3, #4
 800ac5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac5e:	4413      	add	r3, r2
 800ac60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac68:	463b      	mov	r3, r7
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d116      	bne.n	800aca0 <USB_EPStartXfer+0xc94>
 800ac72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac84:	801a      	strh	r2, [r3, #0]
 800ac86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac9c:	801a      	strh	r2, [r3, #0]
 800ac9e:	e065      	b.n	800ad6c <USB_EPStartXfer+0xd60>
 800aca0:	463b      	mov	r3, r7
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	2b3e      	cmp	r3, #62	; 0x3e
 800aca8:	d81a      	bhi.n	800ace0 <USB_EPStartXfer+0xcd4>
 800acaa:	463b      	mov	r3, r7
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800acb6:	463b      	mov	r3, r7
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d004      	beq.n	800acce <USB_EPStartXfer+0xcc2>
 800acc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800acc8:	3301      	adds	r3, #1
 800acca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800acce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	029b      	lsls	r3, r3, #10
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acdc:	801a      	strh	r2, [r3, #0]
 800acde:	e045      	b.n	800ad6c <USB_EPStartXfer+0xd60>
 800ace0:	463b      	mov	r3, r7
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	095b      	lsrs	r3, r3, #5
 800ace8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800acec:	463b      	mov	r3, r7
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	f003 031f 	and.w	r3, r3, #31
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d104      	bne.n	800ad04 <USB_EPStartXfer+0xcf8>
 800acfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800acfe:	3b01      	subs	r3, #1
 800ad00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	029b      	lsls	r3, r3, #10
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad1c:	801a      	strh	r2, [r3, #0]
 800ad1e:	e025      	b.n	800ad6c <USB_EPStartXfer+0xd60>
 800ad20:	463b      	mov	r3, r7
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	785b      	ldrb	r3, [r3, #1]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d120      	bne.n	800ad6c <USB_EPStartXfer+0xd60>
 800ad2a:	1d3b      	adds	r3, r7, #4
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad32:	1d3b      	adds	r3, r7, #4
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad42:	4413      	add	r3, r2
 800ad44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad48:	463b      	mov	r3, r7
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	011a      	lsls	r2, r3, #4
 800ad50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad54:	4413      	add	r3, r2
 800ad56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad5e:	463b      	mov	r3, r7
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad6a:	801a      	strh	r2, [r3, #0]
 800ad6c:	1d3b      	adds	r3, r7, #4
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad74:	463b      	mov	r3, r7
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d175      	bne.n	800ae6a <USB_EPStartXfer+0xe5e>
 800ad7e:	1d3b      	adds	r3, r7, #4
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad86:	1d3b      	adds	r3, r7, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad96:	4413      	add	r3, r2
 800ad98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad9c:	463b      	mov	r3, r7
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	011a      	lsls	r2, r3, #4
 800ada4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ada8:	4413      	add	r3, r2
 800adaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800adae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800adb2:	463b      	mov	r3, r7
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d116      	bne.n	800adea <USB_EPStartXfer+0xdde>
 800adbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adc8:	b29a      	uxth	r2, r3
 800adca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adce:	801a      	strh	r2, [r3, #0]
 800add0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800addc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ade6:	801a      	strh	r2, [r3, #0]
 800ade8:	e061      	b.n	800aeae <USB_EPStartXfer+0xea2>
 800adea:	463b      	mov	r3, r7
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	2b3e      	cmp	r3, #62	; 0x3e
 800adf2:	d81a      	bhi.n	800ae2a <USB_EPStartXfer+0xe1e>
 800adf4:	463b      	mov	r3, r7
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae00:	463b      	mov	r3, r7
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	f003 0301 	and.w	r3, r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d004      	beq.n	800ae18 <USB_EPStartXfer+0xe0c>
 800ae0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae12:	3301      	adds	r3, #1
 800ae14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	029b      	lsls	r3, r3, #10
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae26:	801a      	strh	r2, [r3, #0]
 800ae28:	e041      	b.n	800aeae <USB_EPStartXfer+0xea2>
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	095b      	lsrs	r3, r3, #5
 800ae32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae36:	463b      	mov	r3, r7
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	f003 031f 	and.w	r3, r3, #31
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d104      	bne.n	800ae4e <USB_EPStartXfer+0xe42>
 800ae44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	029b      	lsls	r3, r3, #10
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae66:	801a      	strh	r2, [r3, #0]
 800ae68:	e021      	b.n	800aeae <USB_EPStartXfer+0xea2>
 800ae6a:	463b      	mov	r3, r7
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	785b      	ldrb	r3, [r3, #1]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d11c      	bne.n	800aeae <USB_EPStartXfer+0xea2>
 800ae74:	1d3b      	adds	r3, r7, #4
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae84:	4413      	add	r3, r2
 800ae86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ae8a:	463b      	mov	r3, r7
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	011a      	lsls	r2, r3, #4
 800ae92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae96:	4413      	add	r3, r2
 800ae98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aea0:	463b      	mov	r3, r7
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aeac:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800aeae:	463b      	mov	r3, r7
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 81a4 	beq.w	800b202 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aeba:	1d3b      	adds	r3, r7, #4
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	463b      	mov	r3, r7
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aece:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <USB_EPStartXfer+0xeda>
 800aeda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10d      	bne.n	800af02 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aee6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aeea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 8187 	bne.w	800b202 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aef4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f040 8180 	bne.w	800b202 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800af02:	1d3b      	adds	r3, r7, #4
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	463b      	mov	r3, r7
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	b29b      	uxth	r3, r3
 800af14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800af20:	1d3b      	adds	r3, r7, #4
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	463b      	mov	r3, r7
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	441a      	add	r2, r3
 800af2e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800af32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af42:	b29b      	uxth	r3, r3
 800af44:	8013      	strh	r3, [r2, #0]
 800af46:	e15c      	b.n	800b202 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800af48:	463b      	mov	r3, r7
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	78db      	ldrb	r3, [r3, #3]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	f040 8155 	bne.w	800b1fe <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800af54:	463b      	mov	r3, r7
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	699a      	ldr	r2, [r3, #24]
 800af5a:	463b      	mov	r3, r7
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	429a      	cmp	r2, r3
 800af62:	d90e      	bls.n	800af82 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800af64:	463b      	mov	r3, r7
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800af6e:	463b      	mov	r3, r7
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699a      	ldr	r2, [r3, #24]
 800af74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800af78:	1ad2      	subs	r2, r2, r3
 800af7a:	463b      	mov	r3, r7
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	619a      	str	r2, [r3, #24]
 800af80:	e008      	b.n	800af94 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800af82:	463b      	mov	r3, r7
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800af8c:	463b      	mov	r3, r7
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2200      	movs	r2, #0
 800af92:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800af94:	463b      	mov	r3, r7
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d16f      	bne.n	800b07e <USB_EPStartXfer+0x1072>
 800af9e:	1d3b      	adds	r3, r7, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afa6:	1d3b      	adds	r3, r7, #4
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afae:	b29b      	uxth	r3, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afb6:	4413      	add	r3, r2
 800afb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afbc:	463b      	mov	r3, r7
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	011a      	lsls	r2, r3, #4
 800afc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afc8:	4413      	add	r3, r2
 800afca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800afce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d116      	bne.n	800b008 <USB_EPStartXfer+0xffc>
 800afda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afec:	801a      	strh	r2, [r3, #0]
 800afee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800affa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800affe:	b29a      	uxth	r2, r3
 800b000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b004:	801a      	strh	r2, [r3, #0]
 800b006:	e05f      	b.n	800b0c8 <USB_EPStartXfer+0x10bc>
 800b008:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b00c:	2b3e      	cmp	r3, #62	; 0x3e
 800b00e:	d818      	bhi.n	800b042 <USB_EPStartXfer+0x1036>
 800b010:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b014:	085b      	lsrs	r3, r3, #1
 800b016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b01a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d004      	beq.n	800b030 <USB_EPStartXfer+0x1024>
 800b026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b02a:	3301      	adds	r3, #1
 800b02c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b034:	b29b      	uxth	r3, r3
 800b036:	029b      	lsls	r3, r3, #10
 800b038:	b29a      	uxth	r2, r3
 800b03a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b03e:	801a      	strh	r2, [r3, #0]
 800b040:	e042      	b.n	800b0c8 <USB_EPStartXfer+0x10bc>
 800b042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b046:	095b      	lsrs	r3, r3, #5
 800b048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b04c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b050:	f003 031f 	and.w	r3, r3, #31
 800b054:	2b00      	cmp	r3, #0
 800b056:	d104      	bne.n	800b062 <USB_EPStartXfer+0x1056>
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05c:	3b01      	subs	r3, #1
 800b05e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b066:	b29b      	uxth	r3, r3
 800b068:	029b      	lsls	r3, r3, #10
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b074:	b29a      	uxth	r2, r3
 800b076:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b07a:	801a      	strh	r2, [r3, #0]
 800b07c:	e024      	b.n	800b0c8 <USB_EPStartXfer+0x10bc>
 800b07e:	463b      	mov	r3, r7
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d11f      	bne.n	800b0c8 <USB_EPStartXfer+0x10bc>
 800b088:	1d3b      	adds	r3, r7, #4
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b090:	1d3b      	adds	r3, r7, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b098:	b29b      	uxth	r3, r3
 800b09a:	461a      	mov	r2, r3
 800b09c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	011a      	lsls	r2, r3, #4
 800b0ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0b2:	4413      	add	r3, r2
 800b0b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b0b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b0bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0c6:	801a      	strh	r2, [r3, #0]
 800b0c8:	1d3b      	adds	r3, r7, #4
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	785b      	ldrb	r3, [r3, #1]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d16f      	bne.n	800b1ba <USB_EPStartXfer+0x11ae>
 800b0da:	1d3b      	adds	r3, r7, #4
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0e2:	1d3b      	adds	r3, r7, #4
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	011a      	lsls	r2, r3, #4
 800b100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b104:	4413      	add	r3, r2
 800b106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b10a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b10e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b112:	2b00      	cmp	r3, #0
 800b114:	d116      	bne.n	800b144 <USB_EPStartXfer+0x1138>
 800b116:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b122:	b29a      	uxth	r2, r3
 800b124:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b128:	801a      	strh	r2, [r3, #0]
 800b12a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	b29b      	uxth	r3, r3
 800b132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b140:	801a      	strh	r2, [r3, #0]
 800b142:	e05e      	b.n	800b202 <USB_EPStartXfer+0x11f6>
 800b144:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b148:	2b3e      	cmp	r3, #62	; 0x3e
 800b14a:	d818      	bhi.n	800b17e <USB_EPStartXfer+0x1172>
 800b14c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b150:	085b      	lsrs	r3, r3, #1
 800b152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b156:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <USB_EPStartXfer+0x1160>
 800b162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b166:	3301      	adds	r3, #1
 800b168:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b16c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b170:	b29b      	uxth	r3, r3
 800b172:	029b      	lsls	r3, r3, #10
 800b174:	b29a      	uxth	r2, r3
 800b176:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b17a:	801a      	strh	r2, [r3, #0]
 800b17c:	e041      	b.n	800b202 <USB_EPStartXfer+0x11f6>
 800b17e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b182:	095b      	lsrs	r3, r3, #5
 800b184:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b188:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b18c:	f003 031f 	and.w	r3, r3, #31
 800b190:	2b00      	cmp	r3, #0
 800b192:	d104      	bne.n	800b19e <USB_EPStartXfer+0x1192>
 800b194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b198:	3b01      	subs	r3, #1
 800b19a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b19e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	029b      	lsls	r3, r3, #10
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1b6:	801a      	strh	r2, [r3, #0]
 800b1b8:	e023      	b.n	800b202 <USB_EPStartXfer+0x11f6>
 800b1ba:	463b      	mov	r3, r7
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	785b      	ldrb	r3, [r3, #1]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d11e      	bne.n	800b202 <USB_EPStartXfer+0x11f6>
 800b1c4:	1d3b      	adds	r3, r7, #4
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1da:	463b      	mov	r3, r7
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	011a      	lsls	r2, r3, #4
 800b1e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b1fa:	801a      	strh	r2, [r3, #0]
 800b1fc:	e001      	b.n	800b202 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e02e      	b.n	800b260 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b202:	1d3b      	adds	r3, r7, #4
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	463b      	mov	r3, r7
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	b29b      	uxth	r3, r3
 800b214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b21c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b220:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b224:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b228:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b22c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b234:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800b238:	1d3b      	adds	r3, r7, #4
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	463b      	mov	r3, r7
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	441a      	add	r2, r3
 800b246:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b24a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b24e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b26a:	b480      	push	{r7}
 800b26c:	b085      	sub	sp, #20
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d020      	beq.n	800b2be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b28e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b292:	81bb      	strh	r3, [r7, #12]
 800b294:	89bb      	ldrh	r3, [r7, #12]
 800b296:	f083 0310 	eor.w	r3, r3, #16
 800b29a:	81bb      	strh	r3, [r7, #12]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	441a      	add	r2, r3
 800b2a6:	89bb      	ldrh	r3, [r7, #12]
 800b2a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	8013      	strh	r3, [r2, #0]
 800b2bc:	e01f      	b.n	800b2fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2d4:	81fb      	strh	r3, [r7, #14]
 800b2d6:	89fb      	ldrh	r3, [r7, #14]
 800b2d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b2dc:	81fb      	strh	r3, [r7, #14]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	441a      	add	r2, r3
 800b2e8:	89fb      	ldrh	r3, [r7, #14]
 800b2ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	bc80      	pop	{r7}
 800b308:	4770      	bx	lr

0800b30a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b087      	sub	sp, #28
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	7b1b      	ldrb	r3, [r3, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f040 809d 	bne.w	800b458 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	785b      	ldrb	r3, [r3, #1]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d04c      	beq.n	800b3c0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	823b      	strh	r3, [r7, #16]
 800b334:	8a3b      	ldrh	r3, [r7, #16]
 800b336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d01b      	beq.n	800b376 <USB_EPClearStall+0x6c>
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b354:	81fb      	strh	r3, [r7, #14]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	441a      	add	r2, r3
 800b360:	89fb      	ldrh	r3, [r7, #14]
 800b362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b36e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b372:	b29b      	uxth	r3, r3
 800b374:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	78db      	ldrb	r3, [r3, #3]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d06c      	beq.n	800b458 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b394:	81bb      	strh	r3, [r7, #12]
 800b396:	89bb      	ldrh	r3, [r7, #12]
 800b398:	f083 0320 	eor.w	r3, r3, #32
 800b39c:	81bb      	strh	r3, [r7, #12]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	441a      	add	r2, r3
 800b3a8:	89bb      	ldrh	r3, [r7, #12]
 800b3aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	8013      	strh	r3, [r2, #0]
 800b3be:	e04b      	b.n	800b458 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	82fb      	strh	r3, [r7, #22]
 800b3ce:	8afb      	ldrh	r3, [r7, #22]
 800b3d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d01b      	beq.n	800b410 <USB_EPClearStall+0x106>
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	881b      	ldrh	r3, [r3, #0]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ee:	82bb      	strh	r3, [r7, #20]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	441a      	add	r2, r3
 800b3fa:	8abb      	ldrh	r3, [r7, #20]
 800b3fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b426:	827b      	strh	r3, [r7, #18]
 800b428:	8a7b      	ldrh	r3, [r7, #18]
 800b42a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b42e:	827b      	strh	r3, [r7, #18]
 800b430:	8a7b      	ldrh	r3, [r7, #18]
 800b432:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b436:	827b      	strh	r3, [r7, #18]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	441a      	add	r2, r3
 800b442:	8a7b      	ldrh	r3, [r7, #18]
 800b444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b44c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b454:	b29b      	uxth	r3, r3
 800b456:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	bc80      	pop	{r7}
 800b462:	4770      	bx	lr

0800b464 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d103      	bne.n	800b47e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2280      	movs	r2, #128	; 0x80
 800b47a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	bc80      	pop	{r7}
 800b488:	4770      	bx	lr

0800b48a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	bc80      	pop	{r7}
 800b49c:	4770      	bx	lr

0800b49e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b085      	sub	sp, #20
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bc80      	pop	{r7}
 800b4ba:	4770      	bx	lr

0800b4bc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bc80      	pop	{r7}
 800b4d0:	4770      	bx	lr

0800b4d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b08d      	sub	sp, #52	; 0x34
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	4611      	mov	r1, r2
 800b4de:	461a      	mov	r2, r3
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	80fb      	strh	r3, [r7, #6]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b4e8:	88bb      	ldrh	r3, [r7, #4]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	085b      	lsrs	r3, r3, #1
 800b4ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b4f8:	88fb      	ldrh	r3, [r7, #6]
 800b4fa:	005a      	lsls	r2, r3, #1
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b504:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b50a:	e01e      	b.n	800b54a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	3301      	adds	r3, #1
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	021b      	lsls	r3, r3, #8
 800b520:	b29b      	uxth	r3, r3
 800b522:	461a      	mov	r2, r3
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	4313      	orrs	r3, r2
 800b528:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	3302      	adds	r3, #2
 800b536:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	3302      	adds	r3, #2
 800b53c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b540:	3301      	adds	r3, #1
 800b542:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	3b01      	subs	r3, #1
 800b548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1dd      	bne.n	800b50c <USB_WritePMA+0x3a>
  }
}
 800b550:	bf00      	nop
 800b552:	3734      	adds	r7, #52	; 0x34
 800b554:	46bd      	mov	sp, r7
 800b556:	bc80      	pop	{r7}
 800b558:	4770      	bx	lr

0800b55a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b08b      	sub	sp, #44	; 0x2c
 800b55e:	af00      	add	r7, sp, #0
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	4611      	mov	r1, r2
 800b566:	461a      	mov	r2, r3
 800b568:	460b      	mov	r3, r1
 800b56a:	80fb      	strh	r3, [r7, #6]
 800b56c:	4613      	mov	r3, r2
 800b56e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b570:	88bb      	ldrh	r3, [r7, #4]
 800b572:	085b      	lsrs	r3, r3, #1
 800b574:	b29b      	uxth	r3, r3
 800b576:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	005a      	lsls	r2, r3, #1
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b58c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
 800b592:	e01b      	b.n	800b5cc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	3302      	adds	r3, #2
 800b5a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	0a1b      	lsrs	r3, r3, #8
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e0      	bne.n	800b594 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b5d2:	88bb      	ldrh	r3, [r7, #4]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d007      	beq.n	800b5ee <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	701a      	strb	r2, [r3, #0]
  }
}
 800b5ee:	bf00      	nop
 800b5f0:	372c      	adds	r7, #44	; 0x2c
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr

0800b5f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b5fc:	4904      	ldr	r1, [pc, #16]	; (800b610 <MX_FATFS_Init+0x18>)
 800b5fe:	4805      	ldr	r0, [pc, #20]	; (800b614 <MX_FATFS_Init+0x1c>)
 800b600:	f002 faca 	bl	800db98 <FATFS_LinkDriver>
 800b604:	4603      	mov	r3, r0
 800b606:	461a      	mov	r2, r3
 800b608:	4b03      	ldr	r3, [pc, #12]	; (800b618 <MX_FATFS_Init+0x20>)
 800b60a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b60c:	bf00      	nop
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	20003f34 	.word	0x20003f34
 800b614:	20000014 	.word	0x20000014
 800b618:	20003f38 	.word	0x20003f38

0800b61c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b626:	4b05      	ldr	r3, [pc, #20]	; (800b63c <USER_initialize+0x20>)
 800b628:	2201      	movs	r2, #1
 800b62a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b62c:	4b03      	ldr	r3, [pc, #12]	; (800b63c <USER_initialize+0x20>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr
 800b63c:	20000010 	.word	0x20000010

0800b640 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b64a:	4b05      	ldr	r3, [pc, #20]	; (800b660 <USER_status+0x20>)
 800b64c:	2201      	movs	r2, #1
 800b64e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b650:	4b03      	ldr	r3, [pc, #12]	; (800b660 <USER_status+0x20>)
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bc80      	pop	{r7}
 800b65e:	4770      	bx	lr
 800b660:	20000010 	.word	0x20000010

0800b664 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	607a      	str	r2, [r7, #4]
 800b66e:	603b      	str	r3, [r7, #0]
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b674:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bc80      	pop	{r7}
 800b67e:	4770      	bx	lr

0800b680 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	607a      	str	r2, [r7, #4]
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	4603      	mov	r3, r0
 800b68e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b690:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	bc80      	pop	{r7}
 800b69a:	4770      	bx	lr

0800b69c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	603a      	str	r2, [r7, #0]
 800b6a6:	71fb      	strb	r3, [r7, #7]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	73fb      	strb	r3, [r7, #15]
    return res;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bc80      	pop	{r7}
 800b6ba:	4770      	bx	lr

0800b6bc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70fb      	strb	r3, [r7, #3]
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7c1b      	ldrb	r3, [r3, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d115      	bne.n	800b6fc <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f005 fb7a 	bl	8010dd2 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b6e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	2181      	movs	r1, #129	; 0x81
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f005 fb6f 	bl	8010dd2 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b6fa:	e012      	b.n	800b722 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b6fc:	2340      	movs	r3, #64	; 0x40
 800b6fe:	2202      	movs	r2, #2
 800b700:	2101      	movs	r1, #1
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f005 fb65 	bl	8010dd2 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b710:	2340      	movs	r3, #64	; 0x40
 800b712:	2202      	movs	r2, #2
 800b714:	2181      	movs	r1, #129	; 0x81
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f005 fb5b 	bl	8010dd2 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800b722:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800b726:	f005 fc9b 	bl	8011060 <USBD_static_malloc>
 800b72a:	4602      	mov	r2, r0
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 800b73c:	2302      	movs	r3, #2
 800b73e:	e003      	b.n	800b748 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f9d9 	bl	800baf8 <MSC_BOT_Init>

  return USBD_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	460b      	mov	r3, r1
 800b75a:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800b75c:	2101      	movs	r1, #1
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f005 fb5d 	bl	8010e1e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800b76c:	2181      	movs	r1, #129	; 0x81
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f005 fb55 	bl	8010e1e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa06 	bl	800bb8c <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b786:	2b00      	cmp	r3, #0
 800b788:	d009      	beq.n	800b79e <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b790:	4618      	mov	r0, r3
 800b792:	f005 fc71 	bl	8011078 <USBD_static_free>
    pdev->pClassData  = NULL;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b7b8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d04d      	beq.n	800b86a <USBD_MSC_Setup+0xc2>
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	f040 8113 	bne.w	800b9fa <USBD_MSC_Setup+0x252>
  {

    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	2bfe      	cmp	r3, #254	; 0xfe
 800b7da:	d002      	beq.n	800b7e2 <USBD_MSC_Setup+0x3a>
 800b7dc:	2bff      	cmp	r3, #255	; 0xff
 800b7de:	d024      	beq.n	800b82a <USBD_MSC_Setup+0x82>
 800b7e0:	e03b      	b.n	800b85a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	885b      	ldrh	r3, [r3, #2]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d118      	bne.n	800b81c <USBD_MSC_Setup+0x74>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	88db      	ldrh	r3, [r3, #6]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d114      	bne.n	800b81c <USBD_MSC_Setup+0x74>
         ((req->bmRequest & 0x80U) == 0x80U))
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	da0f      	bge.n	800b81c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	4798      	blx	r3
 800b806:	4603      	mov	r3, r0
 800b808:	461a      	mov	r2, r3
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	2201      	movs	r2, #1
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f002 f90f 	bl	800da38 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b81a:	e025      	b.n	800b868 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f002 f8a0 	bl	800d964 <USBD_CtlError>
        ret = USBD_FAIL;
 800b824:	2302      	movs	r3, #2
 800b826:	75fb      	strb	r3, [r7, #23]
      break;
 800b828:	e01e      	b.n	800b868 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	885b      	ldrh	r3, [r3, #2]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10c      	bne.n	800b84c <USBD_MSC_Setup+0xa4>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	88db      	ldrh	r3, [r3, #6]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d108      	bne.n	800b84c <USBD_MSC_Setup+0xa4>
         ((req->bmRequest & 0x80U) != 0x80U))
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b840:	2b00      	cmp	r3, #0
 800b842:	db03      	blt.n	800b84c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f987 	bl	800bb58 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev , req);
        ret = USBD_FAIL;
      }
      break;
 800b84a:	e00d      	b.n	800b868 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev , req);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f002 f888 	bl	800d964 <USBD_CtlError>
        ret = USBD_FAIL;
 800b854:	2302      	movs	r3, #2
 800b856:	75fb      	strb	r3, [r7, #23]
      break;
 800b858:	e006      	b.n	800b868 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev , req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f002 f881 	bl	800d964 <USBD_CtlError>
      ret = USBD_FAIL;
 800b862:	2302      	movs	r3, #2
 800b864:	75fb      	strb	r3, [r7, #23]
      break;
 800b866:	bf00      	nop
    }
    break;
 800b868:	e0ce      	b.n	800ba08 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b0b      	cmp	r3, #11
 800b870:	f200 80bb 	bhi.w	800b9ea <USBD_MSC_Setup+0x242>
 800b874:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <USBD_MSC_Setup+0xd4>)
 800b876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87a:	bf00      	nop
 800b87c:	0800b8ad 	.word	0x0800b8ad
 800b880:	0800b923 	.word	0x0800b923
 800b884:	0800b9eb 	.word	0x0800b9eb
 800b888:	0800b9eb 	.word	0x0800b9eb
 800b88c:	0800b9eb 	.word	0x0800b9eb
 800b890:	0800b9eb 	.word	0x0800b9eb
 800b894:	0800b9eb 	.word	0x0800b9eb
 800b898:	0800b9eb 	.word	0x0800b9eb
 800b89c:	0800b9eb 	.word	0x0800b9eb
 800b8a0:	0800b9eb 	.word	0x0800b9eb
 800b8a4:	0800b8d5 	.word	0x0800b8d5
 800b8a8:	0800b8fd 	.word	0x0800b8fd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d107      	bne.n	800b8c6 <USBD_MSC_Setup+0x11e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b8b6:	f107 030e 	add.w	r3, r7, #14
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f002 f8ba 	bl	800da38 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b8c4:	e098      	b.n	800b9f8 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f002 f84b 	bl	800d964 <USBD_CtlError>
        ret = USBD_FAIL;
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8d2:	e091      	b.n	800b9f8 <USBD_MSC_Setup+0x250>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d107      	bne.n	800b8ee <USBD_MSC_Setup+0x146>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f002 f8a6 	bl	800da38 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b8ec:	e084      	b.n	800b9f8 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f002 f837 	bl	800d964 <USBD_CtlError>
        ret = USBD_FAIL;
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8fa:	e07d      	b.n	800b9f8 <USBD_MSC_Setup+0x250>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b902:	2b03      	cmp	r3, #3
 800b904:	d106      	bne.n	800b914 <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	885b      	ldrh	r3, [r3, #2]
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	461a      	mov	r2, r3
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b912:	e071      	b.n	800b9f8 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f002 f824 	bl	800d964 <USBD_CtlError>
        ret = USBD_FAIL;
 800b91c:	2302      	movs	r3, #2
 800b91e:	75fb      	strb	r3, [r7, #23]
      break;
 800b920:	e06a      	b.n	800b9f8 <USBD_MSC_Setup+0x250>

    case USB_REQ_CLEAR_FEATURE:

      /* Flush the FIFO and Clear the stall status */
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	889b      	ldrh	r3, [r3, #4]
 800b926:	b2db      	uxtb	r3, r3
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f005 fa96 	bl	8010e5c <USBD_LL_FlushEP>

      /* Reactivate the EP */
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	889b      	ldrh	r3, [r3, #4]
 800b934:	b2db      	uxtb	r3, r3
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f005 fa70 	bl	8010e1e <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	889b      	ldrh	r3, [r3, #4]
 800b942:	b25b      	sxtb	r3, r3
 800b944:	2b00      	cmp	r3, #0
 800b946:	da23      	bge.n	800b990 <USBD_MSC_Setup+0x1e8>
      {
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	889b      	ldrh	r3, [r3, #4]
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 020f 	and.w	r2, r3, #15
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	440b      	add	r3, r1
 800b95e:	3318      	adds	r3, #24
 800b960:	2200      	movs	r2, #0
 800b962:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	7c1b      	ldrb	r3, [r3, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d107      	bne.n	800b97c <USBD_MSC_Setup+0x1d4>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800b96c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b970:	2202      	movs	r2, #2
 800b972:	2181      	movs	r1, #129	; 0x81
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f005 fa2c 	bl	8010dd2 <USBD_LL_OpenEP>
 800b97a:	e005      	b.n	800b988 <USBD_MSC_Setup+0x1e0>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800b97c:	2340      	movs	r3, #64	; 0x40
 800b97e:	2202      	movs	r2, #2
 800b980:	2181      	movs	r1, #129	; 0x81
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f005 fa25 	bl	8010dd2 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b98e:	e024      	b.n	800b9da <USBD_MSC_Setup+0x232>
      }
      else
      {
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	889b      	ldrh	r3, [r3, #4]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	f003 020f 	and.w	r2, r3, #15
 800b99a:	6879      	ldr	r1, [r7, #4]
 800b99c:	4613      	mov	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4413      	add	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	440b      	add	r3, r1
 800b9a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7c1b      	ldrb	r3, [r3, #16]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d107      	bne.n	800b9c6 <USBD_MSC_Setup+0x21e>
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800b9b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	2101      	movs	r1, #1
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f005 fa07 	bl	8010dd2 <USBD_LL_OpenEP>
 800b9c4:	e005      	b.n	800b9d2 <USBD_MSC_Setup+0x22a>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f005 fa00 	bl	8010dd2 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      }

      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	889b      	ldrh	r3, [r3, #4]
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa50 	bl	800be88 <MSC_BOT_CplClrFeature>
      break;
 800b9e8:	e006      	b.n	800b9f8 <USBD_MSC_Setup+0x250>

    default:
      USBD_CtlError (pdev, req);
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 ffb9 	bl	800d964 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f6:	bf00      	nop
    }
    break;
 800b9f8:	e006      	b.n	800ba08 <USBD_MSC_Setup+0x260>

  default:
    USBD_CtlError (pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f001 ffb1 	bl	800d964 <USBD_CtlError>
    ret = USBD_FAIL;
 800ba02:	2302      	movs	r3, #2
 800ba04:	75fb      	strb	r3, [r7, #23]
    break;
 800ba06:	bf00      	nop
  }

  return ret;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop

0800ba14 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800ba20:	78fb      	ldrb	r3, [r7, #3]
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f8c1 	bl	800bbac <MSC_BOT_DataIn>
  return USBD_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800ba40:	78fb      	ldrb	r3, [r7, #3]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f8e2 	bl	800bc0e <MSC_BOT_DataOut>
  return USBD_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800ba62:	4b03      	ldr	r3, [pc, #12]	; (800ba70 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bc80      	pop	{r7}
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	20000060 	.word	0x20000060

0800ba74 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800ba82:	4b03      	ldr	r3, [pc, #12]	; (800ba90 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bc80      	pop	{r7}
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	20000080 	.word	0x20000080

0800ba94 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800baa2:	4b03      	ldr	r3, [pc, #12]	; (800bab0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bc80      	pop	{r7}
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	200000a0 	.word	0x200000a0

0800bab4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	220a      	movs	r2, #10
 800bac0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800bac2:	4b03      	ldr	r3, [pc, #12]	; (800bad0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	bc80      	pop	{r7}
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	200000c0 	.word	0x200000c0

0800bad4 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bc80      	pop	{r7}
 800baf6:	4770      	bx	lr

0800baf8 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb06:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800bb30:	2101      	movs	r1, #1
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f005 f992 	bl	8010e5c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800bb38:	2181      	movs	r1, #129	; 0x81
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f005 f98e 	bl	8010e5c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800bb46:	231f      	movs	r3, #31
 800bb48:	2101      	movs	r1, #1
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f005 fa51 	bl	8010ff2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb66:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2201      	movs	r2, #1
 800bb72:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800bb7a:	231f      	movs	r3, #31
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f005 fa37 	bl	8010ff2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800bb84:	bf00      	nop
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb9a:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	721a      	strb	r2, [r3, #8]
}
 800bba2:	bf00      	nop
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bc80      	pop	{r7}
 800bbaa:	4770      	bx	lr

0800bbac <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bbbe:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	7a1b      	ldrb	r3, [r3, #8]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d004      	beq.n	800bbd2 <MSC_BOT_DataIn+0x26>
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	db19      	blt.n	800bc00 <MSC_BOT_DataIn+0x54>
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	dc17      	bgt.n	800bc00 <MSC_BOT_DataIn+0x54>
 800bbd0:	e011      	b.n	800bbf6 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f979 	bl	800bed8 <SCSI_ProcessCmd>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da0b      	bge.n	800bc04 <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800bbec:	2101      	movs	r1, #1
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f8f0 	bl	800bdd4 <MSC_BOT_SendCSW>
    }
    break;
 800bbf4:	e006      	b.n	800bc04 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f8eb 	bl	800bdd4 <MSC_BOT_SendCSW>

    break;
 800bbfe:	e002      	b.n	800bc06 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800bc00:	bf00      	nop
 800bc02:	e000      	b.n	800bc06 <MSC_BOT_DataIn+0x5a>
    break;
 800bc04:	bf00      	nop
  }
}
 800bc06:	bf00      	nop
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev,
                      uint8_t epnum)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc20:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	7a1b      	ldrb	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <MSC_BOT_DataOut+0x22>
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d004      	beq.n	800bc38 <MSC_BOT_DataOut+0x2a>
    }

    break;

  default:
    break;
 800bc2e:	e015      	b.n	800bc5c <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f817 	bl	800bc64 <MSC_BOT_CBW_Decode>
    break;
 800bc36:	e011      	b.n	800bc5c <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800bc44:	461a      	mov	r2, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f946 	bl	800bed8 <SCSI_ProcessCmd>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	da03      	bge.n	800bc5a <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800bc52:	2101      	movs	r1, #1
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f8bd 	bl	800bdd4 <MSC_BOT_SendCSW>
    break;
 800bc5a:	bf00      	nop
  }
}
 800bc5c:	bf00      	nop
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc72:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f005 f9d2 	bl	8011038 <USBD_LL_GetRxDataSize>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b1f      	cmp	r3, #31
 800bc98:	d114      	bne.n	800bcc4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800bca0:	4a32      	ldr	r2, [pc, #200]	; (800bd6c <MSC_BOT_CBW_Decode+0x108>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d10e      	bne.n	800bcc4 <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1U) ||
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d809      	bhi.n	800bcc4 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1U) ||
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800bcc0:	2b10      	cmp	r3, #16
 800bcc2:	d90e      	bls.n	800bce2 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800bcca:	2320      	movs	r3, #32
 800bccc:	2205      	movs	r2, #5
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fc48 	bl	800c564 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f8a6 	bl	800be2c <MSC_BOT_Abort>
 800bce0:	e041      	b.n	800bd66 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800bcee:	461a      	mov	r2, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f8f1 	bl	800bed8 <SCSI_ProcessCmd>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da0c      	bge.n	800bd16 <MSC_BOT_CBW_Decode+0xb2>
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	7a1b      	ldrb	r3, [r3, #8]
 800bd00:	2b05      	cmp	r3, #5
 800bd02:	d104      	bne.n	800bd0e <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800bd04:	2101      	movs	r1, #1
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f864 	bl	800bdd4 <MSC_BOT_SendCSW>
 800bd0c:	e02b      	b.n	800bd66 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f88c 	bl	800be2c <MSC_BOT_Abort>
 800bd14:	e027      	b.n	800bd66 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	7a1b      	ldrb	r3, [r3, #8]
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d022      	beq.n	800bd64 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d01e      	beq.n	800bd64 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	d01a      	beq.n	800bd64 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	895b      	ldrh	r3, [r3, #10]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d009      	beq.n	800bd4a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f103 010c 	add.w	r1, r3, #12
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	895b      	ldrh	r3, [r3, #10]
 800bd40:	461a      	mov	r2, r3
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f814 	bl	800bd70 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800bd48:	e00d      	b.n	800bd66 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	895b      	ldrh	r3, [r3, #10]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d104      	bne.n	800bd5c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800bd52:	2100      	movs	r1, #0
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f83d 	bl	800bdd4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800bd5a:	e004      	b.n	800bd66 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f865 	bl	800be2c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800bd62:	e000      	b.n	800bd66 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800bd64:	bf00      	nop
    }
  }
}
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	43425355 	.word	0x43425355

0800bd70 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t* pbuf,
                              uint16_t len)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd84:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800bd8c:	88fb      	ldrh	r3, [r7, #6]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d204      	bcs.n	800bd9c <MSC_BOT_SendData+0x2c>
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	e000      	b.n	800bd9e <MSC_BOT_SendData+0x2e>
 800bd9c:	88fb      	ldrh	r3, [r7, #6]
 800bd9e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800bda6:	88fb      	ldrh	r3, [r7, #6]
 800bda8:	1ad2      	subs	r2, r2, r3
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2204      	movs	r2, #4
 800bdbc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800bdbe:	8a7b      	ldrh	r3, [r7, #18]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	2181      	movs	r1, #129	; 0x81
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f005 f8f1 	bl	8010fac <USBD_LL_Transmit>
}
 800bdca:	bf00      	nop
 800bdcc:	3718      	adds	r7, #24
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
	...

0800bdd4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bde6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4a0f      	ldr	r2, [pc, #60]	; (800be28 <MSC_BOT_SendCSW+0x54>)
 800bdec:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	78fa      	ldrb	r2, [r7, #3]
 800bdf4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800be04:	230d      	movs	r3, #13
 800be06:	2181      	movs	r1, #129	; 0x81
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f005 f8cf 	bl	8010fac <USBD_LL_Transmit>
                    USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800be14:	231f      	movs	r3, #31
 800be16:	2101      	movs	r1, #1
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f005 f8ea 	bl	8010ff2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800be1e:	bf00      	nop
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	53425355 	.word	0x53425355

0800be2c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800be3a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10c      	bne.n	800be60 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d007      	beq.n	800be60 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800be54:	2b00      	cmp	r3, #0
 800be56:	d103      	bne.n	800be60 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800be58:	2101      	movs	r1, #1
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f005 f81d 	bl	8010e9a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800be60:	2181      	movs	r1, #129	; 0x81
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f005 f819 	bl	8010e9a <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	7a5b      	ldrb	r3, [r3, #9]
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d107      	bne.n	800be80 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800be76:	231f      	movs	r3, #31
 800be78:	2101      	movs	r1, #1
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f005 f8b9 	bl	8010ff2 <USBD_LL_PrepareReceive>
                            USBD_BOT_CBW_LENGTH);
  }
}
 800be80:	bf00      	nop
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800be9a:	60fb      	str	r3, [r7, #12]

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	7a5b      	ldrb	r3, [r3, #9]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d107      	bne.n	800beb4 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800bea4:	2181      	movs	r1, #129	; 0x81
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f004 fff7 	bl	8010e9a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	725a      	strb	r2, [r3, #9]
 800beb2:	e00d      	b.n	800bed0 <MSC_BOT_CplClrFeature+0x48>
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800beb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	da08      	bge.n	800bece <MSC_BOT_CplClrFeature+0x46>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	7a5b      	ldrb	r3, [r3, #9]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d004      	beq.n	800bece <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800bec4:	2101      	movs	r1, #1
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff ff84 	bl	800bdd4 <MSC_BOT_SendCSW>
 800becc:	e000      	b.n	800bed0 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800bece:	bf00      	nop
  }
}
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
	...

0800bed8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	460b      	mov	r3, r1
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	2b5a      	cmp	r3, #90	; 0x5a
 800beec:	f200 810e 	bhi.w	800c10c <SCSI_ProcessCmd+0x234>
 800bef0:	a201      	add	r2, pc, #4	; (adr r2, 800bef8 <SCSI_ProcessCmd+0x20>)
 800bef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef6:	bf00      	nop
 800bef8:	0800c065 	.word	0x0800c065
 800befc:	0800c10d 	.word	0x0800c10d
 800bf00:	0800c10d 	.word	0x0800c10d
 800bf04:	0800c073 	.word	0x0800c073
 800bf08:	0800c10d 	.word	0x0800c10d
 800bf0c:	0800c10d 	.word	0x0800c10d
 800bf10:	0800c10d 	.word	0x0800c10d
 800bf14:	0800c10d 	.word	0x0800c10d
 800bf18:	0800c10d 	.word	0x0800c10d
 800bf1c:	0800c10d 	.word	0x0800c10d
 800bf20:	0800c10d 	.word	0x0800c10d
 800bf24:	0800c10d 	.word	0x0800c10d
 800bf28:	0800c10d 	.word	0x0800c10d
 800bf2c:	0800c10d 	.word	0x0800c10d
 800bf30:	0800c10d 	.word	0x0800c10d
 800bf34:	0800c10d 	.word	0x0800c10d
 800bf38:	0800c10d 	.word	0x0800c10d
 800bf3c:	0800c10d 	.word	0x0800c10d
 800bf40:	0800c081 	.word	0x0800c081
 800bf44:	0800c10d 	.word	0x0800c10d
 800bf48:	0800c10d 	.word	0x0800c10d
 800bf4c:	0800c10d 	.word	0x0800c10d
 800bf50:	0800c10d 	.word	0x0800c10d
 800bf54:	0800c10d 	.word	0x0800c10d
 800bf58:	0800c10d 	.word	0x0800c10d
 800bf5c:	0800c10d 	.word	0x0800c10d
 800bf60:	0800c0ab 	.word	0x0800c0ab
 800bf64:	0800c08f 	.word	0x0800c08f
 800bf68:	0800c10d 	.word	0x0800c10d
 800bf6c:	0800c10d 	.word	0x0800c10d
 800bf70:	0800c09d 	.word	0x0800c09d
 800bf74:	0800c10d 	.word	0x0800c10d
 800bf78:	0800c10d 	.word	0x0800c10d
 800bf7c:	0800c10d 	.word	0x0800c10d
 800bf80:	0800c10d 	.word	0x0800c10d
 800bf84:	0800c0c7 	.word	0x0800c0c7
 800bf88:	0800c10d 	.word	0x0800c10d
 800bf8c:	0800c0d5 	.word	0x0800c0d5
 800bf90:	0800c10d 	.word	0x0800c10d
 800bf94:	0800c10d 	.word	0x0800c10d
 800bf98:	0800c0e3 	.word	0x0800c0e3
 800bf9c:	0800c10d 	.word	0x0800c10d
 800bfa0:	0800c0f1 	.word	0x0800c0f1
 800bfa4:	0800c10d 	.word	0x0800c10d
 800bfa8:	0800c10d 	.word	0x0800c10d
 800bfac:	0800c10d 	.word	0x0800c10d
 800bfb0:	0800c10d 	.word	0x0800c10d
 800bfb4:	0800c0ff 	.word	0x0800c0ff
 800bfb8:	0800c10d 	.word	0x0800c10d
 800bfbc:	0800c10d 	.word	0x0800c10d
 800bfc0:	0800c10d 	.word	0x0800c10d
 800bfc4:	0800c10d 	.word	0x0800c10d
 800bfc8:	0800c10d 	.word	0x0800c10d
 800bfcc:	0800c10d 	.word	0x0800c10d
 800bfd0:	0800c10d 	.word	0x0800c10d
 800bfd4:	0800c10d 	.word	0x0800c10d
 800bfd8:	0800c10d 	.word	0x0800c10d
 800bfdc:	0800c10d 	.word	0x0800c10d
 800bfe0:	0800c10d 	.word	0x0800c10d
 800bfe4:	0800c10d 	.word	0x0800c10d
 800bfe8:	0800c10d 	.word	0x0800c10d
 800bfec:	0800c10d 	.word	0x0800c10d
 800bff0:	0800c10d 	.word	0x0800c10d
 800bff4:	0800c10d 	.word	0x0800c10d
 800bff8:	0800c10d 	.word	0x0800c10d
 800bffc:	0800c10d 	.word	0x0800c10d
 800c000:	0800c10d 	.word	0x0800c10d
 800c004:	0800c10d 	.word	0x0800c10d
 800c008:	0800c10d 	.word	0x0800c10d
 800c00c:	0800c10d 	.word	0x0800c10d
 800c010:	0800c10d 	.word	0x0800c10d
 800c014:	0800c10d 	.word	0x0800c10d
 800c018:	0800c10d 	.word	0x0800c10d
 800c01c:	0800c10d 	.word	0x0800c10d
 800c020:	0800c10d 	.word	0x0800c10d
 800c024:	0800c10d 	.word	0x0800c10d
 800c028:	0800c10d 	.word	0x0800c10d
 800c02c:	0800c10d 	.word	0x0800c10d
 800c030:	0800c10d 	.word	0x0800c10d
 800c034:	0800c10d 	.word	0x0800c10d
 800c038:	0800c10d 	.word	0x0800c10d
 800c03c:	0800c10d 	.word	0x0800c10d
 800c040:	0800c10d 	.word	0x0800c10d
 800c044:	0800c10d 	.word	0x0800c10d
 800c048:	0800c10d 	.word	0x0800c10d
 800c04c:	0800c10d 	.word	0x0800c10d
 800c050:	0800c10d 	.word	0x0800c10d
 800c054:	0800c10d 	.word	0x0800c10d
 800c058:	0800c10d 	.word	0x0800c10d
 800c05c:	0800c10d 	.word	0x0800c10d
 800c060:	0800c0b9 	.word	0x0800c0b9
  {
  case SCSI_TEST_UNIT_READY:
    SCSI_TestUnitReady(pdev, lun, cmd);
 800c064:	7afb      	ldrb	r3, [r7, #11]
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	4619      	mov	r1, r3
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f000 f85c 	bl	800c128 <SCSI_TestUnitReady>
    break;
 800c070:	e055      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_REQUEST_SENSE:
    SCSI_RequestSense (pdev, lun, cmd);
 800c072:	7afb      	ldrb	r3, [r7, #11]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	4619      	mov	r1, r3
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f000 fa09 	bl	800c490 <SCSI_RequestSense>
    break;
 800c07e:	e04e      	b.n	800c11e <SCSI_ProcessCmd+0x246>
  case SCSI_INQUIRY:
    SCSI_Inquiry(pdev, lun, cmd);
 800c080:	7afb      	ldrb	r3, [r7, #11]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	4619      	mov	r1, r3
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f000 f888 	bl	800c19c <SCSI_Inquiry>
    break;
 800c08c:	e047      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_START_STOP_UNIT:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800c08e:	7afb      	ldrb	r3, [r7, #11]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	4619      	mov	r1, r3
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f000 fa9e 	bl	800c5d6 <SCSI_StartStopUnit>
    break;
 800c09a:	e040      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800c09c:	7afb      	ldrb	r3, [r7, #11]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 fa97 	bl	800c5d6 <SCSI_StartStopUnit>
    break;
 800c0a8:	e039      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE6:
    SCSI_ModeSense6 (pdev, lun, cmd);
 800c0aa:	7afb      	ldrb	r3, [r7, #11]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 f99d 	bl	800c3f0 <SCSI_ModeSense6>
    break;
 800c0b6:	e032      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE10:
    SCSI_ModeSense10 (pdev, lun, cmd);
 800c0b8:	7afb      	ldrb	r3, [r7, #11]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f9be 	bl	800c440 <SCSI_ModeSense10>
    break;
 800c0c4:	e02b      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_READ_FORMAT_CAPACITIES:
    SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800c0c6:	7afb      	ldrb	r3, [r7, #11]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f000 f92a 	bl	800c326 <SCSI_ReadFormatCapacity>
    break;
 800c0d2:	e024      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_READ_CAPACITY10:
    SCSI_ReadCapacity10(pdev, lun, cmd);
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f000 f8bc 	bl	800c258 <SCSI_ReadCapacity10>
    break;
 800c0e0:	e01d      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_READ10:
    SCSI_Read10(pdev, lun, cmd);
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 fa88 	bl	800c5fe <SCSI_Read10>
    break;
 800c0ee:	e016      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_WRITE10:
    SCSI_Write10(pdev, lun, cmd);
 800c0f0:	7afb      	ldrb	r3, [r7, #11]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 fb0d 	bl	800c716 <SCSI_Write10>
    break;
 800c0fc:	e00f      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  case SCSI_VERIFY10:
    SCSI_Verify10(pdev, lun, cmd);
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	4619      	mov	r1, r3
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 fbb6 	bl	800c876 <SCSI_Verify10>
    break;
 800c10a:	e008      	b.n	800c11e <SCSI_ProcessCmd+0x246>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800c10c:	7af9      	ldrb	r1, [r7, #11]
 800c10e:	2320      	movs	r3, #32
 800c110:	2205      	movs	r2, #5
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f000 fa26 	bl	800c564 <SCSI_SenseCode>
    return -1;
 800c118:	f04f 33ff 	mov.w	r3, #4294967295
 800c11c:	e000      	b.n	800c120 <SCSI_ProcessCmd+0x248>
  }
  return 0;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	460b      	mov	r3, r1
 800c132:	607a      	str	r2, [r7, #4]
 800c134:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c13c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00a      	beq.n	800c15e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800c14e:	2320      	movs	r3, #32
 800c150:	2205      	movs	r2, #5
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f000 fa06 	bl	800c564 <SCSI_SenseCode>

    return -1;
 800c158:	f04f 33ff 	mov.w	r3, #4294967295
 800c15c:	e019      	b.n	800c192 <SCSI_TestUnitReady+0x6a>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	7afa      	ldrb	r2, [r7, #11]
 800c168:	4610      	mov	r0, r2
 800c16a:	4798      	blx	r3
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00b      	beq.n	800c18a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c172:	7af9      	ldrb	r1, [r7, #11]
 800c174:	233a      	movs	r3, #58	; 0x3a
 800c176:	2202      	movs	r2, #2
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 f9f3 	bl	800c564 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2205      	movs	r2, #5
 800c182:	721a      	strb	r2, [r3, #8]

    return -1;
 800c184:	f04f 33ff 	mov.w	r3, #4294967295
 800c188:	e003      	b.n	800c192 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2200      	movs	r2, #0
 800c18e:	815a      	strh	r2, [r3, #10]

  return 0;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3718      	adds	r7, #24
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b089      	sub	sp, #36	; 0x24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1b0:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d014      	beq.n	800c1ea <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800c1c0:	2307      	movs	r3, #7
 800c1c2:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	8bfa      	ldrh	r2, [r7, #30]
 800c1c8:	815a      	strh	r2, [r3, #10]

    while (len)
 800c1ca:	e00a      	b.n	800c1e2 <SCSI_Inquiry+0x46>
    {
      len--;
 800c1cc:	8bfb      	ldrh	r3, [r7, #30]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800c1d2:	8bfa      	ldrh	r2, [r7, #30]
 800c1d4:	8bfb      	ldrh	r3, [r7, #30]
 800c1d6:	491f      	ldr	r1, [pc, #124]	; (800c254 <SCSI_Inquiry+0xb8>)
 800c1d8:	5c89      	ldrb	r1, [r1, r2]
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	4413      	add	r3, r2
 800c1de:	460a      	mov	r2, r1
 800c1e0:	731a      	strb	r2, [r3, #12]
    while (len)
 800c1e2:	8bfb      	ldrh	r3, [r7, #30]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1f1      	bne.n	800c1cc <SCSI_Inquiry+0x30>
 800c1e8:	e02e      	b.n	800c248 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1f0:	69d9      	ldr	r1, [r3, #28]
 800c1f2:	7afa      	ldrb	r2, [r7, #11]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	440b      	add	r3, r1
 800c1fe:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	3304      	adds	r3, #4
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	b29b      	uxth	r3, r3
 800c208:	3305      	adds	r3, #5
 800c20a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	3304      	adds	r3, #4
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b29b      	uxth	r3, r3
 800c214:	8bfa      	ldrh	r2, [r7, #30]
 800c216:	429a      	cmp	r2, r3
 800c218:	d303      	bcc.n	800c222 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3304      	adds	r3, #4
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	8bfa      	ldrh	r2, [r7, #30]
 800c226:	815a      	strh	r2, [r3, #10]

    while (len)
 800c228:	e00b      	b.n	800c242 <SCSI_Inquiry+0xa6>
    {
      len--;
 800c22a:	8bfb      	ldrh	r3, [r7, #30]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800c230:	8bfb      	ldrh	r3, [r7, #30]
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	441a      	add	r2, r3
 800c236:	8bfb      	ldrh	r3, [r7, #30]
 800c238:	7811      	ldrb	r1, [r2, #0]
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	4413      	add	r3, r2
 800c23e:	460a      	mov	r2, r1
 800c240:	731a      	strb	r2, [r3, #12]
    while (len)
 800c242:	8bfb      	ldrh	r3, [r7, #30]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1f0      	bne.n	800c22a <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3724      	adds	r7, #36	; 0x24
 800c24e:	46bd      	mov	sp, r7
 800c250:	bc80      	pop	{r7}
 800c252:	4770      	bx	lr
 800c254:	0801935c 	.word	0x0801935c

0800c258 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	460b      	mov	r3, r1
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c26c:	617b      	str	r3, [r7, #20]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800c282:	7af8      	ldrb	r0, [r7, #11]
 800c284:	4798      	blx	r3
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d008      	beq.n	800c29e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c28c:	7af9      	ldrb	r1, [r7, #11]
 800c28e:	233a      	movs	r3, #58	; 0x3a
 800c290:	2202      	movs	r2, #2
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f000 f966 	bl	800c564 <SCSI_SenseCode>
    return -1;
 800c298:	f04f 33ff 	mov.w	r3, #4294967295
 800c29c:	e03f      	b.n	800c31e <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	0e1b      	lsrs	r3, r3, #24
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	0c1b      	lsrs	r3, r3, #16
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	0a1b      	lsrs	r3, r3, #8
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800c2e4:	161b      	asrs	r3, r3, #24
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800c2f2:	141b      	asrs	r3, r3, #16
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800c300:	0a1b      	lsrs	r3, r3, #8
 800c302:	b29b      	uxth	r3, r3
 800c304:	b2da      	uxtb	r2, r3
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800c310:	b2da      	uxtb	r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2208      	movs	r2, #8
 800c31a:	815a      	strh	r2, [r3, #10]
    return 0;
 800c31c:	2300      	movs	r3, #0
  }
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b088      	sub	sp, #32
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	460b      	mov	r3, r1
 800c330:	607a      	str	r2, [r7, #4]
 800c332:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c33a:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for(i = 0U; i < 12U ; i++)
 800c33c:	2300      	movs	r3, #0
 800c33e:	83fb      	strh	r3, [r7, #30]
 800c340:	e007      	b.n	800c352 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800c342:	8bfb      	ldrh	r3, [r7, #30]
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	4413      	add	r3, r2
 800c348:	2200      	movs	r2, #0
 800c34a:	731a      	strb	r2, [r3, #12]
  for(i = 0U; i < 12U ; i++)
 800c34c:	8bfb      	ldrh	r3, [r7, #30]
 800c34e:	3301      	adds	r3, #1
 800c350:	83fb      	strh	r3, [r7, #30]
 800c352:	8bfb      	ldrh	r3, [r7, #30]
 800c354:	2b0b      	cmp	r3, #11
 800c356:	d9f4      	bls.n	800c342 <SCSI_ReadFormatCapacity+0x1c>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	f107 0216 	add.w	r2, r7, #22
 800c364:	f107 0110 	add.w	r1, r7, #16
 800c368:	7af8      	ldrb	r0, [r7, #11]
 800c36a:	4798      	blx	r3
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d008      	beq.n	800c384 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c372:	7af9      	ldrb	r1, [r7, #11]
 800c374:	233a      	movs	r3, #58	; 0x3a
 800c376:	2202      	movs	r2, #2
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 f8f3 	bl	800c564 <SCSI_SenseCode>
    return -1;
 800c37e:	f04f 33ff 	mov.w	r3, #4294967295
 800c382:	e030      	b.n	800c3e6 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	2208      	movs	r2, #8
 800c388:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	0e1b      	lsrs	r3, r3, #24
 800c390:	b2da      	uxtb	r2, r3
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	3b01      	subs	r3, #1
 800c39a:	0c1b      	lsrs	r3, r3, #16
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	0a1b      	lsrs	r3, r3, #8
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	2202      	movs	r2, #2
 800c3be:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c3c0:	8afb      	ldrh	r3, [r7, #22]
 800c3c2:	141b      	asrs	r3, r3, #16
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c3ca:	8afb      	ldrh	r3, [r7, #22]
 800c3cc:	0a1b      	lsrs	r3, r3, #8
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c3d6:	8afb      	ldrh	r3, [r7, #22]
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	220c      	movs	r2, #12
 800c3e2:	815a      	strh	r2, [r3, #10]
    return 0;
 800c3e4:	2300      	movs	r3, #0
  }
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3720      	adds	r7, #32
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
	...

0800c3f0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b087      	sub	sp, #28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c404:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800c406:	2308      	movs	r3, #8
 800c408:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	8afa      	ldrh	r2, [r7, #22]
 800c40e:	815a      	strh	r2, [r3, #10]

  while (len)
 800c410:	e00a      	b.n	800c428 <SCSI_ModeSense6+0x38>
  {
    len--;
 800c412:	8afb      	ldrh	r3, [r7, #22]
 800c414:	3b01      	subs	r3, #1
 800c416:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800c418:	8afa      	ldrh	r2, [r7, #22]
 800c41a:	8afb      	ldrh	r3, [r7, #22]
 800c41c:	4907      	ldr	r1, [pc, #28]	; (800c43c <SCSI_ModeSense6+0x4c>)
 800c41e:	5c89      	ldrb	r1, [r1, r2]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	4413      	add	r3, r2
 800c424:	460a      	mov	r2, r1
 800c426:	731a      	strb	r2, [r3, #12]
  while (len)
 800c428:	8afb      	ldrh	r3, [r7, #22]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1f1      	bne.n	800c412 <SCSI_ModeSense6+0x22>
  }
  return 0;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	371c      	adds	r7, #28
 800c434:	46bd      	mov	sp, r7
 800c436:	bc80      	pop	{r7}
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	08019364 	.word	0x08019364

0800c440 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c440:	b480      	push	{r7}
 800c442:	b087      	sub	sp, #28
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	460b      	mov	r3, r1
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800c44e:	2308      	movs	r3, #8
 800c450:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c458:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	8afa      	ldrh	r2, [r7, #22]
 800c45e:	815a      	strh	r2, [r3, #10]

  while (len)
 800c460:	e00a      	b.n	800c478 <SCSI_ModeSense10+0x38>
  {
    len--;
 800c462:	8afb      	ldrh	r3, [r7, #22]
 800c464:	3b01      	subs	r3, #1
 800c466:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800c468:	8afa      	ldrh	r2, [r7, #22]
 800c46a:	8afb      	ldrh	r3, [r7, #22]
 800c46c:	4907      	ldr	r1, [pc, #28]	; (800c48c <SCSI_ModeSense10+0x4c>)
 800c46e:	5c89      	ldrb	r1, [r1, r2]
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	4413      	add	r3, r2
 800c474:	460a      	mov	r2, r1
 800c476:	731a      	strb	r2, [r3, #12]
  while (len)
 800c478:	8afb      	ldrh	r3, [r7, #22]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1f1      	bne.n	800c462 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	371c      	adds	r7, #28
 800c484:	46bd      	mov	sp, r7
 800c486:	bc80      	pop	{r7}
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	0801936c 	.word	0x0801936c

0800c490 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	460b      	mov	r3, r1
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4a4:	613b      	str	r3, [r7, #16]

  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	75fb      	strb	r3, [r7, #23]
 800c4aa:	e007      	b.n	800c4bc <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
 800c4ae:	693a      	ldr	r2, [r7, #16]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	731a      	strb	r2, [r3, #12]
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	75fb      	strb	r3, [r7, #23]
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
 800c4be:	2b11      	cmp	r3, #17
 800c4c0:	d9f4      	bls.n	800c4ac <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0]	= 0x70U;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2270      	movs	r2, #112	; 0x70
 800c4c6:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	220c      	movs	r2, #12
 800c4cc:	74da      	strb	r2, [r3, #19]

  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d02e      	beq.n	800c53c <SCSI_RequestSense+0xac>

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	3347      	adds	r3, #71	; 0x47
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	4413      	add	r3, r2
 800c4ec:	791a      	ldrb	r2, [r3, #4]
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	3347      	adds	r3, #71	; 0x47
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	4413      	add	r3, r2
 800c500:	7a5a      	ldrb	r2, [r3, #9]
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	3347      	adds	r3, #71	; 0x47
 800c510:	00db      	lsls	r3, r3, #3
 800c512:	4413      	add	r3, r2
 800c514:	7a1a      	ldrb	r2, [r3, #8]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800c520:	3301      	adds	r3, #1
 800c522:	b2da      	uxtb	r2, r3
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800c530:	2b04      	cmp	r3, #4
 800c532:	d103      	bne.n	800c53c <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2200      	movs	r2, #0
 800c538:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	2212      	movs	r2, #18
 800c540:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3304      	adds	r3, #4
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2b12      	cmp	r3, #18
 800c54a:	d805      	bhi.n	800c558 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	3304      	adds	r3, #4
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	b29a      	uxth	r2, r3
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	371c      	adds	r7, #28
 800c55e:	46bd      	mov	sp, r7
 800c560:	bc80      	pop	{r7}
 800c562:	4770      	bx	lr

0800c564 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	4608      	mov	r0, r1
 800c56e:	4611      	mov	r1, r2
 800c570:	461a      	mov	r2, r3
 800c572:	4603      	mov	r3, r0
 800c574:	70fb      	strb	r3, [r7, #3]
 800c576:	460b      	mov	r3, r1
 800c578:	70bb      	strb	r3, [r7, #2]
 800c57a:	4613      	mov	r3, r2
 800c57c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c584:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	3347      	adds	r3, #71	; 0x47
 800c590:	00db      	lsls	r3, r3, #3
 800c592:	4413      	add	r3, r2
 800c594:	78ba      	ldrb	r2, [r7, #2]
 800c596:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	3347      	adds	r3, #71	; 0x47
 800c5a2:	00db      	lsls	r3, r3, #3
 800c5a4:	4413      	add	r3, r2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d103      	bne.n	800c5cc <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800c5cc:	bf00      	nop
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bc80      	pop	{r7}
 800c5d4:	4770      	bx	lr

0800c5d6 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b087      	sub	sp, #28
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	460b      	mov	r3, r1
 800c5e0:	607a      	str	r2, [r7, #4]
 800c5e2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5ea:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	815a      	strh	r2, [r3, #10]
  return 0;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	371c      	adds	r7, #28
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bc80      	pop	{r7}
 800c5fc:	4770      	bx	lr

0800c5fe <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b086      	sub	sp, #24
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	460b      	mov	r3, r1
 800c608:	607a      	str	r2, [r7, #4]
 800c60a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c612:	617b      	str	r3, [r7, #20]

  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	7a1b      	ldrb	r3, [r3, #8]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d16e      	bne.n	800c6fa <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800c622:	b25b      	sxtb	r3, r3
 800c624:	2b00      	cmp	r3, #0
 800c626:	db0a      	blt.n	800c63e <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800c62e:	2320      	movs	r3, #32
 800c630:	2205      	movs	r2, #5
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff ff96 	bl	800c564 <SCSI_SenseCode>
      return -1;
 800c638:	f04f 33ff 	mov.w	r3, #4294967295
 800c63c:	e067      	b.n	800c70e <SCSI_Read10+0x110>
    }

    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	7afa      	ldrb	r2, [r7, #11]
 800c648:	4610      	mov	r0, r2
 800c64a:	4798      	blx	r3
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d008      	beq.n	800c664 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c652:	7af9      	ldrb	r1, [r7, #11]
 800c654:	233a      	movs	r3, #58	; 0x3a
 800c656:	2202      	movs	r2, #2
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff ff83 	bl	800c564 <SCSI_SenseCode>
      return -1;
 800c65e:	f04f 33ff 	mov.w	r3, #4294967295
 800c662:	e054      	b.n	800c70e <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3302      	adds	r3, #2
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	3303      	adds	r3, #3
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c674:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3304      	adds	r3, #4
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c67e:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	3205      	adds	r2, #5
 800c684:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c686:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3307      	adds	r3, #7
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	021b      	lsls	r3, r3, #8
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	3208      	adds	r2, #8
 800c69a:	7812      	ldrb	r2, [r2, #0]
 800c69c:	431a      	orrs	r2, r3
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c6b0:	7af9      	ldrb	r1, [r7, #11]
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 f912 	bl	800c8dc <SCSI_CheckAddressRange>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	da02      	bge.n	800c6c4 <SCSI_Read10+0xc6>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c6be:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c2:	e024      	b.n	800c70e <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c6d6:	6979      	ldr	r1, [r7, #20]
 800c6d8:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800c6dc:	fb01 f303 	mul.w	r3, r1, r3
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d00a      	beq.n	800c6fa <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800c6ea:	2320      	movs	r3, #32
 800c6ec:	2205      	movs	r2, #5
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f7ff ff38 	bl	800c564 <SCSI_SenseCode>
      return -1;
 800c6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f8:	e009      	b.n	800c70e <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c700:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800c702:	7afb      	ldrb	r3, [r7, #11]
 800c704:	4619      	mov	r1, r3
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f000 f90a 	bl	800c920 <SCSI_ProcessRead>
 800c70c:	4603      	mov	r3, r0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b086      	sub	sp, #24
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	60f8      	str	r0, [r7, #12]
 800c71e:	460b      	mov	r3, r1
 800c720:	607a      	str	r2, [r7, #4]
 800c722:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c72a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	7a1b      	ldrb	r3, [r3, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f040 8096 	bne.w	800c862 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da0a      	bge.n	800c758 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800c748:	2320      	movs	r3, #32
 800c74a:	2205      	movs	r2, #5
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f7ff ff09 	bl	800c564 <SCSI_SenseCode>
      return -1;
 800c752:	f04f 33ff 	mov.w	r3, #4294967295
 800c756:	e08a      	b.n	800c86e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	7afa      	ldrb	r2, [r7, #11]
 800c762:	4610      	mov	r0, r2
 800c764:	4798      	blx	r3
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d008      	beq.n	800c77e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c76c:	7af9      	ldrb	r1, [r7, #11]
 800c76e:	233a      	movs	r3, #58	; 0x3a
 800c770:	2202      	movs	r2, #2
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff fef6 	bl	800c564 <SCSI_SenseCode>
      return -1;
 800c778:	f04f 33ff 	mov.w	r3, #4294967295
 800c77c:	e077      	b.n	800c86e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	7afa      	ldrb	r2, [r7, #11]
 800c788:	4610      	mov	r0, r2
 800c78a:	4798      	blx	r3
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d008      	beq.n	800c7a4 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c792:	7af9      	ldrb	r1, [r7, #11]
 800c794:	2327      	movs	r3, #39	; 0x27
 800c796:	2202      	movs	r2, #2
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7ff fee3 	bl	800c564 <SCSI_SenseCode>
      return -1;
 800c79e:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a2:	e064      	b.n	800c86e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3302      	adds	r3, #2
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3303      	adds	r3, #3
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c7b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c7be:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	3205      	adds	r2, #5
 800c7c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c7c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	021b      	lsls	r3, r3, #8
                          (uint32_t)params[8];
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	3208      	adds	r2, #8
 800c7da:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c7dc:	431a      	orrs	r2, r3
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c7f0:	7af9      	ldrb	r1, [r7, #11]
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 f872 	bl	800c8dc <SCSI_CheckAddressRange>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	da02      	bge.n	800c804 <SCSI_Write10+0xee>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c802:	e034      	b.n	800c86e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800c810:	fb02 f303 	mul.w	r3, r2, r3
 800c814:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d00a      	beq.n	800c838 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800c828:	2320      	movs	r3, #32
 800c82a:	2205      	movs	r2, #5
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f7ff fe99 	bl	800c564 <SCSI_SenseCode>
      return -1;
 800c832:	f04f 33ff 	mov.w	r3, #4294967295
 800c836:	e01a      	b.n	800c86e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c83e:	bf28      	it	cs
 800c840:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c844:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2201      	movs	r2, #1
 800c84a:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	f103 020c 	add.w	r2, r3, #12
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	b29b      	uxth	r3, r3
 800c856:	2101      	movs	r1, #1
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f004 fbca 	bl	8010ff2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	e005      	b.n	800c86e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800c862:	7afb      	ldrb	r3, [r7, #11]
 800c864:	4619      	mov	r1, r3
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 f8ce 	bl	800ca08 <SCSI_ProcessWrite>
 800c86c:	4603      	mov	r3, r0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b086      	sub	sp, #24
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	460b      	mov	r3, r1
 800c880:	607a      	str	r2, [r7, #4]
 800c882:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c88a:	617b      	str	r3, [r7, #20]

  if ((params[1]& 0x02U) == 0x02U)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	3301      	adds	r3, #1
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d008      	beq.n	800c8ac <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c89a:	7af9      	ldrb	r1, [r7, #11]
 800c89c:	2324      	movs	r3, #36	; 0x24
 800c89e:	2205      	movs	r2, #5
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f7ff fe5f 	bl	800c564 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800c8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8aa:	e013      	b.n	800c8d4 <SCSI_Verify10+0x5e>
  }

  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c8b8:	7af9      	ldrb	r1, [r7, #11]
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f000 f80e 	bl	800c8dc <SCSI_CheckAddressRange>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da02      	bge.n	800c8cc <SCSI_Verify10+0x56>
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800c8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ca:	e003      	b.n	800c8d4 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	815a      	strh	r2, [r3, #10]
  return 0;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	607a      	str	r2, [r7, #4]
 800c8e6:	603b      	str	r3, [r7, #0]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c8f2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	441a      	add	r2, r3
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800c900:	429a      	cmp	r2, r3
 800c902:	d908      	bls.n	800c916 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800c904:	7af9      	ldrb	r1, [r7, #11]
 800c906:	2321      	movs	r3, #33	; 0x21
 800c908:	2205      	movs	r2, #5
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7ff fe2a 	bl	800c564 <SCSI_SenseCode>
    return -1;
 800c910:	f04f 33ff 	mov.w	r3, #4294967295
 800c914:	e000      	b.n	800c918 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3718      	adds	r7, #24
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800c920:	b590      	push	{r4, r7, lr}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c932:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800c940:	fb02 f303 	mul.w	r3, r2, r3
 800c944:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c94c:	bf28      	it	cs
 800c94e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c952:	60bb      	str	r3, [r7, #8]

  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c95a:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data,
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f103 010c 	add.w	r1, r3, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800c96e:	4618      	mov	r0, r3
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800c976:	b29b      	uxth	r3, r3
 800c978:	78f8      	ldrb	r0, [r7, #3]
 800c97a:	47a0      	blx	r4
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	da08      	bge.n	800c994 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800c982:	78f9      	ldrb	r1, [r7, #3]
 800c984:	2311      	movs	r3, #17
 800c986:	2204      	movs	r2, #4
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f7ff fdeb 	bl	800c564 <SCSI_SenseCode>
    return -1;
 800c98e:	f04f 33ff 	mov.w	r3, #4294967295
 800c992:	e035      	b.n	800ca00 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f103 020c 	add.w	r2, r3, #12
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	2181      	movs	r1, #129	; 0x81
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f004 fb03 	bl	8010fac <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9ba:	441a      	add	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9d6:	1ad2      	subs	r2, r2, r3
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	1ad2      	subs	r2, r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2203      	movs	r2, #3
 800c9fc:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd90      	pop	{r4, r7, pc}

0800ca08 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800ca08:	b590      	push	{r4, r7, lr}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	460b      	mov	r3, r1
 800ca12:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca1a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800ca28:	fb02 f303 	mul.w	r3, r2, r3
 800ca2c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca34:	bf28      	it	cs
 800ca36:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ca3a:	60bb      	str	r3, [r7, #8]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca42:	695c      	ldr	r4, [r3, #20]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f103 010c 	add.w	r1, r3, #12
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ca56:	4618      	mov	r0, r3
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	78f8      	ldrb	r0, [r7, #3]
 800ca62:	47a0      	blx	r4
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	da08      	bge.n	800ca7c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ca6a:	78f9      	ldrb	r1, [r7, #3]
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	2204      	movs	r2, #4
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fd77 	bl	800c564 <SCSI_SenseCode>

    return -1;
 800ca76:	f04f 33ff 	mov.w	r3, #4294967295
 800ca7a:	e045      	b.n	800cb08 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ca88:	4619      	mov	r1, r3
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca90:	441a      	add	r2, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800caa4:	4619      	mov	r1, r3
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	fbb3 f3f1 	udiv	r3, r3, r1
 800caac:	1ad2      	subs	r2, r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	1ad2      	subs	r2, r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d104      	bne.n	800cad8 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800cace:	2100      	movs	r1, #0
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff f97f 	bl	800bdd4 <MSC_BOT_SendCSW>
 800cad6:	e016      	b.n	800cb06 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800cae4:	fb02 f303 	mul.w	r3, r2, r3
 800cae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caec:	bf28      	it	cs
 800caee:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800caf2:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f103 020c 	add.w	r2, r3, #12
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2101      	movs	r1, #1
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f004 fa76 	bl	8010ff2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd90      	pop	{r4, r7, pc}

0800cb10 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d101      	bne.n	800cb28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cb24:	2302      	movs	r3, #2
 800cb26:	e01a      	b.n	800cb5e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d003      	beq.n	800cb3a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d003      	beq.n	800cb48 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	79fa      	ldrb	r2, [r7, #7]
 800cb54:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f004 f8d0 	bl	8010cfc <USBD_LL_Init>

  return USBD_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b085      	sub	sp, #20
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d006      	beq.n	800cb88 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	73fb      	strb	r3, [r7, #15]
 800cb86:	e001      	b.n	800cb8c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800cb88:	2302      	movs	r3, #2
 800cb8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bc80      	pop	{r7}
 800cb96:	4770      	bx	lr

0800cb98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f004 f8fb 	bl	8010d9c <USBD_LL_Start>

  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bc80      	pop	{r7}
 800cbc2:	4770      	bx	lr

0800cbc4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00c      	beq.n	800cbf8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	78fa      	ldrb	r2, [r7, #3]
 800cbe8:	4611      	mov	r1, r2
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	4798      	blx	r3
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b082      	sub	sp, #8
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	78fa      	ldrb	r2, [r7, #3]
 800cc18:	4611      	mov	r1, r2
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	4798      	blx	r3
  return USBD_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 fe56 	bl	800d8ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800cc4e:	461a      	mov	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cc5c:	f003 031f 	and.w	r3, r3, #31
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d00c      	beq.n	800cc7e <USBD_LL_SetupStage+0x56>
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d302      	bcc.n	800cc6e <USBD_LL_SetupStage+0x46>
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d010      	beq.n	800cc8e <USBD_LL_SetupStage+0x66>
 800cc6c:	e017      	b.n	800cc9e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cc74:	4619      	mov	r1, r3
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 f9c6 	bl	800d008 <USBD_StdDevReq>
    break;
 800cc7c:	e01a      	b.n	800ccb4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fa28 	bl	800d0dc <USBD_StdItfReq>
    break;
 800cc8c:	e012      	b.n	800ccb4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cc94:	4619      	mov	r1, r3
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 fa66 	bl	800d168 <USBD_StdEPReq>
    break;
 800cc9c:	e00a      	b.n	800ccb4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cca4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f004 f8f4 	bl	8010e9a <USBD_LL_StallEP>
    break;
 800ccb2:	bf00      	nop
  }

  return USBD_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b086      	sub	sp, #24
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	60f8      	str	r0, [r7, #12]
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	607a      	str	r2, [r7, #4]
 800ccca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800cccc:	7afb      	ldrb	r3, [r7, #11]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d14b      	bne.n	800cd6a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ccd8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cce0:	2b03      	cmp	r3, #3
 800cce2:	d134      	bne.n	800cd4e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	68da      	ldr	r2, [r3, #12]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d919      	bls.n	800cd24 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	68da      	ldr	r2, [r3, #12]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	1ad2      	subs	r2, r2, r3
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	68da      	ldr	r2, [r3, #12]
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d203      	bcs.n	800cd12 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	e002      	b.n	800cd18 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	461a      	mov	r2, r3
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f000 feb9 	bl	800da94 <USBD_CtlContinueRx>
 800cd22:	e038      	b.n	800cd96 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00a      	beq.n	800cd46 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d105      	bne.n	800cd46 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f000 feb6 	bl	800dab8 <USBD_CtlSendStatus>
 800cd4c:	e023      	b.n	800cd96 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cd54:	2b05      	cmp	r3, #5
 800cd56:	d11e      	bne.n	800cd96 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800cd60:	2100      	movs	r1, #0
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f004 f899 	bl	8010e9a <USBD_LL_StallEP>
 800cd68:	e015      	b.n	800cd96 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00d      	beq.n	800cd92 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d108      	bne.n	800cd92 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	7afa      	ldrb	r2, [r7, #11]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	4798      	blx	r3
 800cd90:	e001      	b.n	800cd96 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cd92:	2302      	movs	r3, #2
 800cd94:	e000      	b.n	800cd98 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800cdae:	7afb      	ldrb	r3, [r7, #11]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d17f      	bne.n	800ceb4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d15c      	bne.n	800ce7e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	68da      	ldr	r2, [r3, #12]
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d915      	bls.n	800cdfc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	68da      	ldr	r2, [r3, #12]
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	1ad2      	subs	r2, r2, r3
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	461a      	mov	r2, r3
 800cde6:	6879      	ldr	r1, [r7, #4]
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 fe41 	bl	800da70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cdee:	2300      	movs	r3, #0
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f004 f8fc 	bl	8010ff2 <USBD_LL_PrepareReceive>
 800cdfa:	e04e      	b.n	800ce9a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	6912      	ldr	r2, [r2, #16]
 800ce04:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce08:	fb02 f201 	mul.w	r2, r2, r1
 800ce0c:	1a9b      	subs	r3, r3, r2
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d11c      	bne.n	800ce4c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	689a      	ldr	r2, [r3, #8]
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d316      	bcc.n	800ce4c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	689a      	ldr	r2, [r3, #8]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d20f      	bcs.n	800ce4c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2100      	movs	r1, #0
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 fe1d 	bl	800da70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ce3e:	2300      	movs	r3, #0
 800ce40:	2200      	movs	r2, #0
 800ce42:	2100      	movs	r1, #0
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f004 f8d4 	bl	8010ff2 <USBD_LL_PrepareReceive>
 800ce4a:	e026      	b.n	800ce9a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00a      	beq.n	800ce6e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d105      	bne.n	800ce6e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ce6e:	2180      	movs	r1, #128	; 0x80
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f004 f812 	bl	8010e9a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f000 fe31 	bl	800dade <USBD_CtlReceiveStatus>
 800ce7c:	e00d      	b.n	800ce9a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ce84:	2b04      	cmp	r3, #4
 800ce86:	d004      	beq.n	800ce92 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d103      	bne.n	800ce9a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ce92:	2180      	movs	r1, #128	; 0x80
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f004 f800 	bl	8010e9a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d11d      	bne.n	800cee0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7ff fe83 	bl	800cbb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800ceb2:	e015      	b.n	800cee0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00d      	beq.n	800cedc <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d108      	bne.n	800cedc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	7afa      	ldrb	r2, [r7, #11]
 800ced4:	4611      	mov	r1, r2
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	4798      	blx	r3
 800ceda:	e001      	b.n	800cee0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cedc:	2302      	movs	r3, #2
 800cede:	e000      	b.n	800cee2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b082      	sub	sp, #8
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cef2:	2340      	movs	r3, #64	; 0x40
 800cef4:	2200      	movs	r2, #0
 800cef6:	2100      	movs	r1, #0
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f003 ff6a 	bl	8010dd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2240      	movs	r2, #64	; 0x40
 800cf0a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf0e:	2340      	movs	r3, #64	; 0x40
 800cf10:	2200      	movs	r2, #0
 800cf12:	2180      	movs	r1, #128	; 0x80
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f003 ff5c 	bl	8010dd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2240      	movs	r2, #64	; 0x40
 800cf24:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d009      	beq.n	800cf62 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	6852      	ldr	r2, [r2, #4]
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	4798      	blx	r3
  }

  return USBD_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	78fa      	ldrb	r2, [r7, #3]
 800cf7c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bc80      	pop	{r7}
 800cf88:	4770      	bx	lr

0800cf8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	b083      	sub	sp, #12
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2204      	movs	r2, #4
 800cfa2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bc80      	pop	{r7}
 800cfb0:	4770      	bx	lr

0800cfb2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bc80      	pop	{r7}
 800cfd0:	4770      	bx	lr

0800cfd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cfe0:	2b03      	cmp	r3, #3
 800cfe2:	d10b      	bne.n	800cffc <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
	...

0800d008 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d01e:	2b20      	cmp	r3, #32
 800d020:	d004      	beq.n	800d02c <USBD_StdDevReq+0x24>
 800d022:	2b40      	cmp	r3, #64	; 0x40
 800d024:	d002      	beq.n	800d02c <USBD_StdDevReq+0x24>
 800d026:	2b00      	cmp	r3, #0
 800d028:	d008      	beq.n	800d03c <USBD_StdDevReq+0x34>
 800d02a:	e04c      	b.n	800d0c6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	6839      	ldr	r1, [r7, #0]
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	4798      	blx	r3
    break;
 800d03a:	e049      	b.n	800d0d0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	785b      	ldrb	r3, [r3, #1]
 800d040:	2b09      	cmp	r3, #9
 800d042:	d83a      	bhi.n	800d0ba <USBD_StdDevReq+0xb2>
 800d044:	a201      	add	r2, pc, #4	; (adr r2, 800d04c <USBD_StdDevReq+0x44>)
 800d046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04a:	bf00      	nop
 800d04c:	0800d09d 	.word	0x0800d09d
 800d050:	0800d0b1 	.word	0x0800d0b1
 800d054:	0800d0bb 	.word	0x0800d0bb
 800d058:	0800d0a7 	.word	0x0800d0a7
 800d05c:	0800d0bb 	.word	0x0800d0bb
 800d060:	0800d07f 	.word	0x0800d07f
 800d064:	0800d075 	.word	0x0800d075
 800d068:	0800d0bb 	.word	0x0800d0bb
 800d06c:	0800d093 	.word	0x0800d093
 800d070:	0800d089 	.word	0x0800d089
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f9d2 	bl	800d420 <USBD_GetDescriptor>
      break;
 800d07c:	e022      	b.n	800d0c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fac7 	bl	800d614 <USBD_SetAddress>
      break;
 800d086:	e01d      	b.n	800d0c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 fb04 	bl	800d698 <USBD_SetConfig>
      break;
 800d090:	e018      	b.n	800d0c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fb8d 	bl	800d7b4 <USBD_GetConfig>
      break;
 800d09a:	e013      	b.n	800d0c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d09c:	6839      	ldr	r1, [r7, #0]
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 fbbc 	bl	800d81c <USBD_GetStatus>
      break;
 800d0a4:	e00e      	b.n	800d0c4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fbea 	bl	800d882 <USBD_SetFeature>
      break;
 800d0ae:	e009      	b.n	800d0c4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fbf9 	bl	800d8aa <USBD_ClrFeature>
      break;
 800d0b8:	e004      	b.n	800d0c4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fc51 	bl	800d964 <USBD_CtlError>
      break;
 800d0c2:	bf00      	nop
    }
    break;
 800d0c4:	e004      	b.n	800d0d0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fc4b 	bl	800d964 <USBD_CtlError>
    break;
 800d0ce:	bf00      	nop
  }

  return ret;
 800d0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop

0800d0dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0f2:	2b20      	cmp	r3, #32
 800d0f4:	d003      	beq.n	800d0fe <USBD_StdItfReq+0x22>
 800d0f6:	2b40      	cmp	r3, #64	; 0x40
 800d0f8:	d001      	beq.n	800d0fe <USBD_StdItfReq+0x22>
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d12a      	bne.n	800d154 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d104:	3b01      	subs	r3, #1
 800d106:	2b02      	cmp	r3, #2
 800d108:	d81d      	bhi.n	800d146 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	889b      	ldrh	r3, [r3, #4]
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	2b01      	cmp	r3, #1
 800d112:	d813      	bhi.n	800d13c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	4798      	blx	r3
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	88db      	ldrh	r3, [r3, #6]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d110      	bne.n	800d150 <USBD_StdItfReq+0x74>
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10d      	bne.n	800d150 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fcbf 	bl	800dab8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d13a:	e009      	b.n	800d150 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fc10 	bl	800d964 <USBD_CtlError>
      break;
 800d144:	e004      	b.n	800d150 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fc0b 	bl	800d964 <USBD_CtlError>
      break;
 800d14e:	e000      	b.n	800d152 <USBD_StdItfReq+0x76>
      break;
 800d150:	bf00      	nop
    }
    break;
 800d152:	e004      	b.n	800d15e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fc04 	bl	800d964 <USBD_CtlError>
    break;
 800d15c:	bf00      	nop
  }

  return USBD_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	889b      	ldrh	r3, [r3, #4]
 800d17a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d184:	2b20      	cmp	r3, #32
 800d186:	d004      	beq.n	800d192 <USBD_StdEPReq+0x2a>
 800d188:	2b40      	cmp	r3, #64	; 0x40
 800d18a:	d002      	beq.n	800d192 <USBD_StdEPReq+0x2a>
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d008      	beq.n	800d1a2 <USBD_StdEPReq+0x3a>
 800d190:	e13b      	b.n	800d40a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	4798      	blx	r3
    break;
 800d1a0:	e138      	b.n	800d414 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1aa:	2b20      	cmp	r3, #32
 800d1ac:	d10a      	bne.n	800d1c4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	4798      	blx	r3
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	e128      	b.n	800d416 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	785b      	ldrb	r3, [r3, #1]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d03e      	beq.n	800d24a <USBD_StdEPReq+0xe2>
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	d002      	beq.n	800d1d6 <USBD_StdEPReq+0x6e>
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d070      	beq.n	800d2b6 <USBD_StdEPReq+0x14e>
 800d1d4:	e113      	b.n	800d3fe <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d002      	beq.n	800d1e6 <USBD_StdEPReq+0x7e>
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d015      	beq.n	800d210 <USBD_StdEPReq+0xa8>
 800d1e4:	e02b      	b.n	800d23e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00c      	beq.n	800d206 <USBD_StdEPReq+0x9e>
 800d1ec:	7bbb      	ldrb	r3, [r7, #14]
 800d1ee:	2b80      	cmp	r3, #128	; 0x80
 800d1f0:	d009      	beq.n	800d206 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f003 fe4f 	bl	8010e9a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d1fc:	2180      	movs	r1, #128	; 0x80
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f003 fe4b 	bl	8010e9a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d204:	e020      	b.n	800d248 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fbab 	bl	800d964 <USBD_CtlError>
        break;
 800d20e:	e01b      	b.n	800d248 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	885b      	ldrh	r3, [r3, #2]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10e      	bne.n	800d236 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d218:	7bbb      	ldrb	r3, [r7, #14]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00b      	beq.n	800d236 <USBD_StdEPReq+0xce>
 800d21e:	7bbb      	ldrb	r3, [r7, #14]
 800d220:	2b80      	cmp	r3, #128	; 0x80
 800d222:	d008      	beq.n	800d236 <USBD_StdEPReq+0xce>
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	88db      	ldrh	r3, [r3, #6]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d104      	bne.n	800d236 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d22c:	7bbb      	ldrb	r3, [r7, #14]
 800d22e:	4619      	mov	r1, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f003 fe32 	bl	8010e9a <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fc3e 	bl	800dab8 <USBD_CtlSendStatus>

        break;
 800d23c:	e004      	b.n	800d248 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fb8f 	bl	800d964 <USBD_CtlError>
        break;
 800d246:	bf00      	nop
      }
      break;
 800d248:	e0de      	b.n	800d408 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d250:	2b02      	cmp	r3, #2
 800d252:	d002      	beq.n	800d25a <USBD_StdEPReq+0xf2>
 800d254:	2b03      	cmp	r3, #3
 800d256:	d015      	beq.n	800d284 <USBD_StdEPReq+0x11c>
 800d258:	e026      	b.n	800d2a8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d25a:	7bbb      	ldrb	r3, [r7, #14]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00c      	beq.n	800d27a <USBD_StdEPReq+0x112>
 800d260:	7bbb      	ldrb	r3, [r7, #14]
 800d262:	2b80      	cmp	r3, #128	; 0x80
 800d264:	d009      	beq.n	800d27a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d266:	7bbb      	ldrb	r3, [r7, #14]
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f003 fe15 	bl	8010e9a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d270:	2180      	movs	r1, #128	; 0x80
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f003 fe11 	bl	8010e9a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d278:	e01c      	b.n	800d2b4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fb71 	bl	800d964 <USBD_CtlError>
        break;
 800d282:	e017      	b.n	800d2b4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	885b      	ldrh	r3, [r3, #2]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d112      	bne.n	800d2b2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d28c:	7bbb      	ldrb	r3, [r7, #14]
 800d28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d292:	2b00      	cmp	r3, #0
 800d294:	d004      	beq.n	800d2a0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d296:	7bbb      	ldrb	r3, [r7, #14]
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f003 fe1c 	bl	8010ed8 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fc09 	bl	800dab8 <USBD_CtlSendStatus>
        }
        break;
 800d2a6:	e004      	b.n	800d2b2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800d2a8:	6839      	ldr	r1, [r7, #0]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fb5a 	bl	800d964 <USBD_CtlError>
        break;
 800d2b0:	e000      	b.n	800d2b4 <USBD_StdEPReq+0x14c>
        break;
 800d2b2:	bf00      	nop
      }
      break;
 800d2b4:	e0a8      	b.n	800d408 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d002      	beq.n	800d2c6 <USBD_StdEPReq+0x15e>
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	d031      	beq.n	800d328 <USBD_StdEPReq+0x1c0>
 800d2c4:	e095      	b.n	800d3f2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2c6:	7bbb      	ldrb	r3, [r7, #14]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d007      	beq.n	800d2dc <USBD_StdEPReq+0x174>
 800d2cc:	7bbb      	ldrb	r3, [r7, #14]
 800d2ce:	2b80      	cmp	r3, #128	; 0x80
 800d2d0:	d004      	beq.n	800d2dc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fb45 	bl	800d964 <USBD_CtlError>
          break;
 800d2da:	e08f      	b.n	800d3fc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	da0b      	bge.n	800d2fc <USBD_StdEPReq+0x194>
 800d2e4:	7bbb      	ldrb	r3, [r7, #14]
 800d2e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4413      	add	r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	3310      	adds	r3, #16
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	e00a      	b.n	800d312 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
 800d2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d302:	4613      	mov	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4413      	add	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2200      	movs	r2, #0
 800d318:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2202      	movs	r2, #2
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 fb89 	bl	800da38 <USBD_CtlSendData>
          break;
 800d326:	e069      	b.n	800d3fc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	da11      	bge.n	800d354 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d330:	7bbb      	ldrb	r3, [r7, #14]
 800d332:	f003 020f 	and.w	r2, r3, #15
 800d336:	6879      	ldr	r1, [r7, #4]
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	440b      	add	r3, r1
 800d342:	3318      	adds	r3, #24
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d117      	bne.n	800d37a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fb09 	bl	800d964 <USBD_CtlError>
            break;
 800d352:	e053      	b.n	800d3fc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d354:	7bbb      	ldrb	r3, [r7, #14]
 800d356:	f003 020f 	and.w	r2, r3, #15
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	440b      	add	r3, r1
 800d366:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d104      	bne.n	800d37a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 faf6 	bl	800d964 <USBD_CtlError>
            break;
 800d378:	e040      	b.n	800d3fc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d37a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	da0b      	bge.n	800d39a <USBD_StdEPReq+0x232>
 800d382:	7bbb      	ldrb	r3, [r7, #14]
 800d384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d388:	4613      	mov	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	3310      	adds	r3, #16
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	4413      	add	r3, r2
 800d396:	3304      	adds	r3, #4
 800d398:	e00a      	b.n	800d3b0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d39a:	7bbb      	ldrb	r3, [r7, #14]
 800d39c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	4413      	add	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <USBD_StdEPReq+0x256>
 800d3b8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ba:	2b80      	cmp	r3, #128	; 0x80
 800d3bc:	d103      	bne.n	800d3c6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	e00e      	b.n	800d3e4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d3c6:	7bbb      	ldrb	r3, [r7, #14]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f003 fda3 	bl	8010f16 <USBD_LL_IsStallEP>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	e002      	b.n	800d3e4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2202      	movs	r2, #2
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 fb24 	bl	800da38 <USBD_CtlSendData>
          break;
 800d3f0:	e004      	b.n	800d3fc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fab5 	bl	800d964 <USBD_CtlError>
        break;
 800d3fa:	bf00      	nop
      }
      break;
 800d3fc:	e004      	b.n	800d408 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 faaf 	bl	800d964 <USBD_CtlError>
      break;
 800d406:	bf00      	nop
    }
    break;
 800d408:	e004      	b.n	800d414 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 faa9 	bl	800d964 <USBD_CtlError>
    break;
 800d412:	bf00      	nop
  }

  return ret;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	885b      	ldrh	r3, [r3, #2]
 800d42e:	0a1b      	lsrs	r3, r3, #8
 800d430:	b29b      	uxth	r3, r3
 800d432:	3b01      	subs	r3, #1
 800d434:	2b06      	cmp	r3, #6
 800d436:	f200 80c9 	bhi.w	800d5cc <USBD_GetDescriptor+0x1ac>
 800d43a:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <USBD_GetDescriptor+0x20>)
 800d43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d440:	0800d45d 	.word	0x0800d45d
 800d444:	0800d475 	.word	0x0800d475
 800d448:	0800d4b5 	.word	0x0800d4b5
 800d44c:	0800d5cd 	.word	0x0800d5cd
 800d450:	0800d5cd 	.word	0x0800d5cd
 800d454:	0800d579 	.word	0x0800d579
 800d458:	0800d59f 	.word	0x0800d59f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	7c12      	ldrb	r2, [r2, #16]
 800d468:	f107 010a 	add.w	r1, r7, #10
 800d46c:	4610      	mov	r0, r2
 800d46e:	4798      	blx	r3
 800d470:	60f8      	str	r0, [r7, #12]
    break;
 800d472:	e0b0      	b.n	800d5d6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	7c1b      	ldrb	r3, [r3, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10d      	bne.n	800d498 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d484:	f107 020a 	add.w	r2, r7, #10
 800d488:	4610      	mov	r0, r2
 800d48a:	4798      	blx	r3
 800d48c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3301      	adds	r3, #1
 800d492:	2202      	movs	r2, #2
 800d494:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d496:	e09e      	b.n	800d5d6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a0:	f107 020a 	add.w	r2, r7, #10
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	4798      	blx	r3
 800d4a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	701a      	strb	r2, [r3, #0]
    break;
 800d4b2:	e090      	b.n	800d5d6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	885b      	ldrh	r3, [r3, #2]
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	2b05      	cmp	r3, #5
 800d4bc:	d856      	bhi.n	800d56c <USBD_GetDescriptor+0x14c>
 800d4be:	a201      	add	r2, pc, #4	; (adr r2, 800d4c4 <USBD_GetDescriptor+0xa4>)
 800d4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c4:	0800d4dd 	.word	0x0800d4dd
 800d4c8:	0800d4f5 	.word	0x0800d4f5
 800d4cc:	0800d50d 	.word	0x0800d50d
 800d4d0:	0800d525 	.word	0x0800d525
 800d4d4:	0800d53d 	.word	0x0800d53d
 800d4d8:	0800d555 	.word	0x0800d555
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	7c12      	ldrb	r2, [r2, #16]
 800d4e8:	f107 010a 	add.w	r1, r7, #10
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
 800d4f0:	60f8      	str	r0, [r7, #12]
      break;
 800d4f2:	e040      	b.n	800d576 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	7c12      	ldrb	r2, [r2, #16]
 800d500:	f107 010a 	add.w	r1, r7, #10
 800d504:	4610      	mov	r0, r2
 800d506:	4798      	blx	r3
 800d508:	60f8      	str	r0, [r7, #12]
      break;
 800d50a:	e034      	b.n	800d576 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	7c12      	ldrb	r2, [r2, #16]
 800d518:	f107 010a 	add.w	r1, r7, #10
 800d51c:	4610      	mov	r0, r2
 800d51e:	4798      	blx	r3
 800d520:	60f8      	str	r0, [r7, #12]
      break;
 800d522:	e028      	b.n	800d576 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	7c12      	ldrb	r2, [r2, #16]
 800d530:	f107 010a 	add.w	r1, r7, #10
 800d534:	4610      	mov	r0, r2
 800d536:	4798      	blx	r3
 800d538:	60f8      	str	r0, [r7, #12]
      break;
 800d53a:	e01c      	b.n	800d576 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d542:	695b      	ldr	r3, [r3, #20]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	7c12      	ldrb	r2, [r2, #16]
 800d548:	f107 010a 	add.w	r1, r7, #10
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
      break;
 800d552:	e010      	b.n	800d576 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	7c12      	ldrb	r2, [r2, #16]
 800d560:	f107 010a 	add.w	r1, r7, #10
 800d564:	4610      	mov	r0, r2
 800d566:	4798      	blx	r3
 800d568:	60f8      	str	r0, [r7, #12]
      break;
 800d56a:	e004      	b.n	800d576 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f9f8 	bl	800d964 <USBD_CtlError>
      return;
 800d574:	e04b      	b.n	800d60e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d576:	e02e      	b.n	800d5d6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	7c1b      	ldrb	r3, [r3, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d109      	bne.n	800d594 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d588:	f107 020a 	add.w	r2, r7, #10
 800d58c:	4610      	mov	r0, r2
 800d58e:	4798      	blx	r3
 800d590:	60f8      	str	r0, [r7, #12]
      break;
 800d592:	e020      	b.n	800d5d6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f9e4 	bl	800d964 <USBD_CtlError>
      return;
 800d59c:	e037      	b.n	800d60e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7c1b      	ldrb	r3, [r3, #16]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10d      	bne.n	800d5c2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ae:	f107 020a 	add.w	r2, r7, #10
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	4798      	blx	r3
 800d5b6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	2207      	movs	r2, #7
 800d5be:	701a      	strb	r2, [r3, #0]
      break;
 800d5c0:	e009      	b.n	800d5d6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f9cd 	bl	800d964 <USBD_CtlError>
      return;
 800d5ca:	e020      	b.n	800d60e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f9c8 	bl	800d964 <USBD_CtlError>
    return;
 800d5d4:	e01b      	b.n	800d60e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d5d6:	897b      	ldrh	r3, [r7, #10]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d011      	beq.n	800d600 <USBD_GetDescriptor+0x1e0>
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	88db      	ldrh	r3, [r3, #6]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00d      	beq.n	800d600 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	88da      	ldrh	r2, [r3, #6]
 800d5e8:	897b      	ldrh	r3, [r7, #10]
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	bf28      	it	cs
 800d5ee:	4613      	movcs	r3, r2
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d5f4:	897b      	ldrh	r3, [r7, #10]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	68f9      	ldr	r1, [r7, #12]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fa1c 	bl	800da38 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	88db      	ldrh	r3, [r3, #6]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fa55 	bl	800dab8 <USBD_CtlSendStatus>
  }
}
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	889b      	ldrh	r3, [r3, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d130      	bne.n	800d688 <USBD_SetAddress+0x74>
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	88db      	ldrh	r3, [r3, #6]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d12c      	bne.n	800d688 <USBD_SetAddress+0x74>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	885b      	ldrh	r3, [r3, #2]
 800d632:	2b7f      	cmp	r3, #127	; 0x7f
 800d634:	d828      	bhi.n	800d688 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	885b      	ldrh	r3, [r3, #2]
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d648:	2b03      	cmp	r3, #3
 800d64a:	d104      	bne.n	800d656 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f988 	bl	800d964 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d654:	e01c      	b.n	800d690 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	7bfa      	ldrb	r2, [r7, #15]
 800d65a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f003 fc83 	bl	8010f6e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fa25 	bl	800dab8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2202      	movs	r2, #2
 800d678:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d67c:	e008      	b.n	800d690 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d686:	e003      	b.n	800d690 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d688:	6839      	ldr	r1, [r7, #0]
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f96a 	bl	800d964 <USBD_CtlError>
  }
}
 800d690:	bf00      	nop
 800d692:	3710      	adds	r7, #16
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	885b      	ldrh	r3, [r3, #2]
 800d6a6:	b2da      	uxtb	r2, r3
 800d6a8:	4b41      	ldr	r3, [pc, #260]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d6aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d6ac:	4b40      	ldr	r3, [pc, #256]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d904      	bls.n	800d6be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 f954 	bl	800d964 <USBD_CtlError>
 800d6bc:	e075      	b.n	800d7aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d002      	beq.n	800d6ce <USBD_SetConfig+0x36>
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d023      	beq.n	800d714 <USBD_SetConfig+0x7c>
 800d6cc:	e062      	b.n	800d794 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d6ce:	4b38      	ldr	r3, [pc, #224]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d01a      	beq.n	800d70c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d6d6:	4b36      	ldr	r3, [pc, #216]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2203      	movs	r2, #3
 800d6e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d6e8:	4b31      	ldr	r3, [pc, #196]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7ff fa68 	bl	800cbc4 <USBD_SetClassConfig>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	d104      	bne.n	800d704 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f931 	bl	800d964 <USBD_CtlError>
          return;
 800d702:	e052      	b.n	800d7aa <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f9d7 	bl	800dab8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d70a:	e04e      	b.n	800d7aa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f9d3 	bl	800dab8 <USBD_CtlSendStatus>
      break;
 800d712:	e04a      	b.n	800d7aa <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d714:	4b26      	ldr	r3, [pc, #152]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d112      	bne.n	800d742 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2202      	movs	r2, #2
 800d720:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d724:	4b22      	ldr	r3, [pc, #136]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	461a      	mov	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d72e:	4b20      	ldr	r3, [pc, #128]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	4619      	mov	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff fa64 	bl	800cc02 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f9bc 	bl	800dab8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d740:	e033      	b.n	800d7aa <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d742:	4b1b      	ldr	r3, [pc, #108]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d01d      	beq.n	800d78c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	b2db      	uxtb	r3, r3
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7ff fa52 	bl	800cc02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d75e:	4b14      	ldr	r3, [pc, #80]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	461a      	mov	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d768:	4b11      	ldr	r3, [pc, #68]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff fa28 	bl	800cbc4 <USBD_SetClassConfig>
 800d774:	4603      	mov	r3, r0
 800d776:	2b02      	cmp	r3, #2
 800d778:	d104      	bne.n	800d784 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f8f1 	bl	800d964 <USBD_CtlError>
          return;
 800d782:	e012      	b.n	800d7aa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f997 	bl	800dab8 <USBD_CtlSendStatus>
      break;
 800d78a:	e00e      	b.n	800d7aa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f993 	bl	800dab8 <USBD_CtlSendStatus>
      break;
 800d792:	e00a      	b.n	800d7aa <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 f8e4 	bl	800d964 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d79c:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <USBD_SetConfig+0x118>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff fa2d 	bl	800cc02 <USBD_ClrClassConfig>
      break;
 800d7a8:	bf00      	nop
    }
  }
}
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	2000032e 	.word	0x2000032e

0800d7b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	88db      	ldrh	r3, [r3, #6]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d004      	beq.n	800d7d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 f8cb 	bl	800d964 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d7ce:	e021      	b.n	800d814 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	db17      	blt.n	800d80a <USBD_GetConfig+0x56>
 800d7da:	2b02      	cmp	r3, #2
 800d7dc:	dd02      	ble.n	800d7e4 <USBD_GetConfig+0x30>
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d00b      	beq.n	800d7fa <USBD_GetConfig+0x46>
 800d7e2:	e012      	b.n	800d80a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	3308      	adds	r3, #8
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f920 	bl	800da38 <USBD_CtlSendData>
      break;
 800d7f8:	e00c      	b.n	800d814 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	2201      	movs	r2, #1
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f918 	bl	800da38 <USBD_CtlSendData>
      break;
 800d808:	e004      	b.n	800d814 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f8a9 	bl	800d964 <USBD_CtlError>
      break;
 800d812:	bf00      	nop
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d82c:	3b01      	subs	r3, #1
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d81e      	bhi.n	800d870 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	88db      	ldrh	r3, [r3, #6]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d004      	beq.n	800d844 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f891 	bl	800d964 <USBD_CtlError>
      break;
 800d842:	e01a      	b.n	800d87a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d005      	beq.n	800d860 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	f043 0202 	orr.w	r2, r3, #2
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	330c      	adds	r3, #12
 800d864:	2202      	movs	r2, #2
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f8e5 	bl	800da38 <USBD_CtlSendData>
    break;
 800d86e:	e004      	b.n	800d87a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f876 	bl	800d964 <USBD_CtlError>
    break;
 800d878:	bf00      	nop
  }
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b082      	sub	sp, #8
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	885b      	ldrh	r3, [r3, #2]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d106      	bne.n	800d8a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f90b 	bl	800dab8 <USBD_CtlSendStatus>
  }

}
 800d8a2:	bf00      	nop
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d80b      	bhi.n	800d8d8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	885b      	ldrh	r3, [r3, #2]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d10c      	bne.n	800d8e2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 f8f1 	bl	800dab8 <USBD_CtlSendStatus>
    }
    break;
 800d8d6:	e004      	b.n	800d8e2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d8d8:	6839      	ldr	r1, [r7, #0]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f842 	bl	800d964 <USBD_CtlError>
    break;
 800d8e0:	e000      	b.n	800d8e4 <USBD_ClrFeature+0x3a>
    break;
 800d8e2:	bf00      	nop
  }
}
 800d8e4:	bf00      	nop
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	781a      	ldrb	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	785a      	ldrb	r2, [r3, #1]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	3302      	adds	r3, #2
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	3303      	adds	r3, #3
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	b29b      	uxth	r3, r3
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	b29b      	uxth	r3, r3
 800d91a:	4413      	add	r3, r2
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	3304      	adds	r3, #4
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	b29a      	uxth	r2, r3
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	3305      	adds	r3, #5
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	b29b      	uxth	r3, r3
 800d932:	021b      	lsls	r3, r3, #8
 800d934:	b29b      	uxth	r3, r3
 800d936:	4413      	add	r3, r2
 800d938:	b29a      	uxth	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	3306      	adds	r3, #6
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	b29a      	uxth	r2, r3
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	3307      	adds	r3, #7
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	021b      	lsls	r3, r3, #8
 800d950:	b29b      	uxth	r3, r3
 800d952:	4413      	add	r3, r2
 800d954:	b29a      	uxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	80da      	strh	r2, [r3, #6]

}
 800d95a:	bf00      	nop
 800d95c:	370c      	adds	r7, #12
 800d95e:	46bd      	mov	sp, r7
 800d960:	bc80      	pop	{r7}
 800d962:	4770      	bx	lr

0800d964 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d96e:	2180      	movs	r1, #128	; 0x80
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f003 fa92 	bl	8010e9a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d976:	2100      	movs	r1, #0
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f003 fa8e 	bl	8010e9a <USBD_LL_StallEP>
}
 800d97e:	bf00      	nop
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b086      	sub	sp, #24
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	60f8      	str	r0, [r7, #12]
 800d98e:	60b9      	str	r1, [r7, #8]
 800d990:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d992:	2300      	movs	r3, #0
 800d994:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d032      	beq.n	800da02 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 f834 	bl	800da0a <USBD_GetLen>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d9b0:	7dfb      	ldrb	r3, [r7, #23]
 800d9b2:	1c5a      	adds	r2, r3, #1
 800d9b4:	75fa      	strb	r2, [r7, #23]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	7812      	ldrb	r2, [r2, #0]
 800d9c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d9c2:	7dfb      	ldrb	r3, [r7, #23]
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	75fa      	strb	r2, [r7, #23]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	2203      	movs	r2, #3
 800d9d0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d9d2:	e012      	b.n	800d9fa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	60fa      	str	r2, [r7, #12]
 800d9da:	7dfa      	ldrb	r2, [r7, #23]
 800d9dc:	1c51      	adds	r1, r2, #1
 800d9de:	75f9      	strb	r1, [r7, #23]
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	440a      	add	r2, r1
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d9ea:	7dfb      	ldrb	r3, [r7, #23]
 800d9ec:	1c5a      	adds	r2, r3, #1
 800d9ee:	75fa      	strb	r2, [r7, #23]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e8      	bne.n	800d9d4 <USBD_GetString+0x4e>
    }
  }
}
 800da02:	bf00      	nop
 800da04:	3718      	adds	r7, #24
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da0a:	b480      	push	{r7}
 800da0c:	b085      	sub	sp, #20
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800da12:	2300      	movs	r3, #0
 800da14:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800da16:	e005      	b.n	800da24 <USBD_GetLen+0x1a>
    {
        len++;
 800da18:	7bfb      	ldrb	r3, [r7, #15]
 800da1a:	3301      	adds	r3, #1
 800da1c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	3301      	adds	r3, #1
 800da22:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d1f5      	bne.n	800da18 <USBD_GetLen+0xe>
    }

    return len;
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	bc80      	pop	{r7}
 800da36:	4770      	bx	lr

0800da38 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	4613      	mov	r3, r2
 800da44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2202      	movs	r2, #2
 800da4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800da4e:	88fa      	ldrh	r2, [r7, #6]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800da54:	88fa      	ldrh	r2, [r7, #6]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800da5a:	88fb      	ldrh	r3, [r7, #6]
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	2100      	movs	r1, #0
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f003 faa3 	bl	8010fac <USBD_LL_Transmit>

  return USBD_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	4613      	mov	r3, r2
 800da7c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800da7e:	88fb      	ldrh	r3, [r7, #6]
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	2100      	movs	r1, #0
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f003 fa91 	bl	8010fac <USBD_LL_Transmit>

  return USBD_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	4613      	mov	r3, r2
 800daa0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800daa2:	88fb      	ldrh	r3, [r7, #6]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	2100      	movs	r1, #0
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f003 faa2 	bl	8010ff2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2204      	movs	r2, #4
 800dac4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dac8:	2300      	movs	r3, #0
 800daca:	2200      	movs	r2, #0
 800dacc:	2100      	movs	r1, #0
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f003 fa6c 	bl	8010fac <USBD_LL_Transmit>

  return USBD_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2205      	movs	r2, #5
 800daea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800daee:	2300      	movs	r3, #0
 800daf0:	2200      	movs	r2, #0
 800daf2:	2100      	movs	r1, #0
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f003 fa7c 	bl	8010ff2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800db04:	b480      	push	{r7}
 800db06:	b087      	sub	sp, #28
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	4613      	mov	r3, r2
 800db10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db12:	2301      	movs	r3, #1
 800db14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800db1a:	4b1e      	ldr	r3, [pc, #120]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db1c:	7a5b      	ldrb	r3, [r3, #9]
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b00      	cmp	r3, #0
 800db22:	d131      	bne.n	800db88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db24:	4b1b      	ldr	r3, [pc, #108]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db26:	7a5b      	ldrb	r3, [r3, #9]
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	461a      	mov	r2, r3
 800db2c:	4b19      	ldr	r3, [pc, #100]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db2e:	2100      	movs	r1, #0
 800db30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db32:	4b18      	ldr	r3, [pc, #96]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db34:	7a5b      	ldrb	r3, [r3, #9]
 800db36:	b2db      	uxtb	r3, r3
 800db38:	4a16      	ldr	r2, [pc, #88]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4413      	add	r3, r2
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db42:	4b14      	ldr	r3, [pc, #80]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db44:	7a5b      	ldrb	r3, [r3, #9]
 800db46:	b2db      	uxtb	r3, r3
 800db48:	461a      	mov	r2, r3
 800db4a:	4b12      	ldr	r3, [pc, #72]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db4c:	4413      	add	r3, r2
 800db4e:	79fa      	ldrb	r2, [r7, #7]
 800db50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db52:	4b10      	ldr	r3, [pc, #64]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db54:	7a5b      	ldrb	r3, [r3, #9]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	b2d1      	uxtb	r1, r2
 800db5c:	4a0d      	ldr	r2, [pc, #52]	; (800db94 <FATFS_LinkDriverEx+0x90>)
 800db5e:	7251      	strb	r1, [r2, #9]
 800db60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db62:	7dbb      	ldrb	r3, [r7, #22]
 800db64:	3330      	adds	r3, #48	; 0x30
 800db66:	b2da      	uxtb	r2, r3
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	3301      	adds	r3, #1
 800db70:	223a      	movs	r2, #58	; 0x3a
 800db72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	3302      	adds	r3, #2
 800db78:	222f      	movs	r2, #47	; 0x2f
 800db7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	3303      	adds	r3, #3
 800db80:	2200      	movs	r2, #0
 800db82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800db88:	7dfb      	ldrb	r3, [r7, #23]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	371c      	adds	r7, #28
 800db8e:	46bd      	mov	sp, r7
 800db90:	bc80      	pop	{r7}
 800db92:	4770      	bx	lr
 800db94:	20000330 	.word	0x20000330

0800db98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dba2:	2200      	movs	r2, #0
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7ff ffac 	bl	800db04 <FATFS_LinkDriverEx>
 800dbac:	4603      	mov	r3, r0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
	...

0800dbb8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbbe:	f3ef 8305 	mrs	r3, IPSR
 800dbc2:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10f      	bne.n	800dbea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbca:	f3ef 8310 	mrs	r3, PRIMASK
 800dbce:	607b      	str	r3, [r7, #4]
  return(result);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d109      	bne.n	800dbea <osKernelInitialize+0x32>
 800dbd6:	4b10      	ldr	r3, [pc, #64]	; (800dc18 <osKernelInitialize+0x60>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d109      	bne.n	800dbf2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbde:	f3ef 8311 	mrs	r3, BASEPRI
 800dbe2:	603b      	str	r3, [r7, #0]
  return(result);
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d003      	beq.n	800dbf2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dbea:	f06f 0305 	mvn.w	r3, #5
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e00c      	b.n	800dc0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dbf2:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <osKernelInitialize+0x60>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d105      	bne.n	800dc06 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800dbfa:	4b07      	ldr	r3, [pc, #28]	; (800dc18 <osKernelInitialize+0x60>)
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	60fb      	str	r3, [r7, #12]
 800dc04:	e002      	b.n	800dc0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dc06:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bc80      	pop	{r7}
 800dc16:	4770      	bx	lr
 800dc18:	2000033c 	.word	0x2000033c

0800dc1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc22:	f3ef 8305 	mrs	r3, IPSR
 800dc26:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10f      	bne.n	800dc4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc2e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc32:	607b      	str	r3, [r7, #4]
  return(result);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d109      	bne.n	800dc4e <osKernelStart+0x32>
 800dc3a:	4b11      	ldr	r3, [pc, #68]	; (800dc80 <osKernelStart+0x64>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d109      	bne.n	800dc56 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc42:	f3ef 8311 	mrs	r3, BASEPRI
 800dc46:	603b      	str	r3, [r7, #0]
  return(result);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <osKernelStart+0x3a>
    stat = osErrorISR;
 800dc4e:	f06f 0305 	mvn.w	r3, #5
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e00e      	b.n	800dc74 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc56:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <osKernelStart+0x64>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d107      	bne.n	800dc6e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800dc5e:	4b08      	ldr	r3, [pc, #32]	; (800dc80 <osKernelStart+0x64>)
 800dc60:	2202      	movs	r2, #2
 800dc62:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800dc64:	f001 fa0e 	bl	800f084 <vTaskStartScheduler>
      stat = osOK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	e002      	b.n	800dc74 <osKernelStart+0x58>
    } else {
      stat = osError;
 800dc6e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dc74:	68fb      	ldr	r3, [r7, #12]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	2000033c 	.word	0x2000033c

0800dc84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b092      	sub	sp, #72	; 0x48
 800dc88:	af04      	add	r7, sp, #16
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc94:	f3ef 8305 	mrs	r3, IPSR
 800dc98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f040 8094 	bne.w	800ddca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dca2:	f3ef 8310 	mrs	r3, PRIMASK
 800dca6:	623b      	str	r3, [r7, #32]
  return(result);
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f040 808d 	bne.w	800ddca <osThreadNew+0x146>
 800dcb0:	4b48      	ldr	r3, [pc, #288]	; (800ddd4 <osThreadNew+0x150>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d106      	bne.n	800dcc6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcb8:	f3ef 8311 	mrs	r3, BASEPRI
 800dcbc:	61fb      	str	r3, [r7, #28]
  return(result);
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f040 8082 	bne.w	800ddca <osThreadNew+0x146>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d07e      	beq.n	800ddca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800dccc:	2380      	movs	r3, #128	; 0x80
 800dcce:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800dcd0:	2318      	movs	r3, #24
 800dcd2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800dcd8:	f107 031b 	add.w	r3, r7, #27
 800dcdc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800dcde:	f04f 33ff 	mov.w	r3, #4294967295
 800dce2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d045      	beq.n	800dd76 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <osThreadNew+0x74>
        name = attr->name;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d008      	beq.n	800dd1e <osThreadNew+0x9a>
 800dd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0e:	2b38      	cmp	r3, #56	; 0x38
 800dd10:	d805      	bhi.n	800dd1e <osThreadNew+0x9a>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d001      	beq.n	800dd22 <osThreadNew+0x9e>
        return (NULL);
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e054      	b.n	800ddcc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	089b      	lsrs	r3, r3, #2
 800dd30:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00e      	beq.n	800dd58 <osThreadNew+0xd4>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	2b5b      	cmp	r3, #91	; 0x5b
 800dd40:	d90a      	bls.n	800dd58 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d006      	beq.n	800dd58 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <osThreadNew+0xd4>
        mem = 1;
 800dd52:	2301      	movs	r3, #1
 800dd54:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd56:	e010      	b.n	800dd7a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10c      	bne.n	800dd7a <osThreadNew+0xf6>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d108      	bne.n	800dd7a <osThreadNew+0xf6>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d104      	bne.n	800dd7a <osThreadNew+0xf6>
          mem = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd74:	e001      	b.n	800dd7a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d110      	bne.n	800dda2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd88:	9202      	str	r2, [sp, #8]
 800dd8a:	9301      	str	r3, [sp, #4]
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f000 ffac 	bl	800ecf4 <xTaskCreateStatic>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	e013      	b.n	800ddca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d110      	bne.n	800ddca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	f107 0314 	add.w	r3, r7, #20
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 fff3 	bl	800eda6 <xTaskCreate>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d001      	beq.n	800ddca <osThreadNew+0x146>
          hTask = NULL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ddca:	697b      	ldr	r3, [r7, #20]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3738      	adds	r7, #56	; 0x38
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	2000033c 	.word	0x2000033c

0800ddd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dde0:	f3ef 8305 	mrs	r3, IPSR
 800dde4:	613b      	str	r3, [r7, #16]
  return(result);
 800dde6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10f      	bne.n	800de0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddec:	f3ef 8310 	mrs	r3, PRIMASK
 800ddf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d109      	bne.n	800de0c <osDelay+0x34>
 800ddf8:	4b0d      	ldr	r3, [pc, #52]	; (800de30 <osDelay+0x58>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d109      	bne.n	800de14 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de00:	f3ef 8311 	mrs	r3, BASEPRI
 800de04:	60bb      	str	r3, [r7, #8]
  return(result);
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <osDelay+0x3c>
    stat = osErrorISR;
 800de0c:	f06f 0305 	mvn.w	r3, #5
 800de10:	617b      	str	r3, [r7, #20]
 800de12:	e007      	b.n	800de24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800de14:	2300      	movs	r3, #0
 800de16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <osDelay+0x4c>
      vTaskDelay(ticks);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f001 f8fc 	bl	800f01c <vTaskDelay>
    }
  }

  return (stat);
 800de24:	697b      	ldr	r3, [r7, #20]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	2000033c 	.word	0x2000033c

0800de34 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800de34:	b580      	push	{r7, lr}
 800de36:	b08a      	sub	sp, #40	; 0x28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800de3c:	2300      	movs	r3, #0
 800de3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de40:	f3ef 8305 	mrs	r3, IPSR
 800de44:	613b      	str	r3, [r7, #16]
  return(result);
 800de46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f040 8085 	bne.w	800df58 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de4e:	f3ef 8310 	mrs	r3, PRIMASK
 800de52:	60fb      	str	r3, [r7, #12]
  return(result);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d17e      	bne.n	800df58 <osMutexNew+0x124>
 800de5a:	4b42      	ldr	r3, [pc, #264]	; (800df64 <osMutexNew+0x130>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d105      	bne.n	800de6e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de62:	f3ef 8311 	mrs	r3, BASEPRI
 800de66:	60bb      	str	r3, [r7, #8]
  return(result);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d174      	bne.n	800df58 <osMutexNew+0x124>
    if (attr != NULL) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <osMutexNew+0x48>
      type = attr->attr_bits;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	623b      	str	r3, [r7, #32]
 800de7a:	e001      	b.n	800de80 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800de7c:	2300      	movs	r3, #0
 800de7e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800de80:	6a3b      	ldr	r3, [r7, #32]
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	2b00      	cmp	r3, #0
 800de88:	d002      	beq.n	800de90 <osMutexNew+0x5c>
      rmtx = 1U;
 800de8a:	2301      	movs	r3, #1
 800de8c:	61fb      	str	r3, [r7, #28]
 800de8e:	e001      	b.n	800de94 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800de90:	2300      	movs	r3, #0
 800de92:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	f003 0308 	and.w	r3, r3, #8
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d15c      	bne.n	800df58 <osMutexNew+0x124>
      mem = -1;
 800de9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dea2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d015      	beq.n	800ded6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d006      	beq.n	800dec0 <osMutexNew+0x8c>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	2b4f      	cmp	r3, #79	; 0x4f
 800deb8:	d902      	bls.n	800dec0 <osMutexNew+0x8c>
          mem = 1;
 800deba:	2301      	movs	r3, #1
 800debc:	61bb      	str	r3, [r7, #24]
 800debe:	e00c      	b.n	800deda <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d108      	bne.n	800deda <osMutexNew+0xa6>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d104      	bne.n	800deda <osMutexNew+0xa6>
            mem = 0;
 800ded0:	2300      	movs	r3, #0
 800ded2:	61bb      	str	r3, [r7, #24]
 800ded4:	e001      	b.n	800deda <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ded6:	2300      	movs	r3, #0
 800ded8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d112      	bne.n	800df06 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d007      	beq.n	800def6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	4619      	mov	r1, r3
 800deec:	2004      	movs	r0, #4
 800deee:	f000 fb0f 	bl	800e510 <xQueueCreateMutexStatic>
 800def2:	6278      	str	r0, [r7, #36]	; 0x24
 800def4:	e016      	b.n	800df24 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	4619      	mov	r1, r3
 800defc:	2001      	movs	r0, #1
 800defe:	f000 fb07 	bl	800e510 <xQueueCreateMutexStatic>
 800df02:	6278      	str	r0, [r7, #36]	; 0x24
 800df04:	e00e      	b.n	800df24 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10b      	bne.n	800df24 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d004      	beq.n	800df1c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800df12:	2004      	movs	r0, #4
 800df14:	f000 fae4 	bl	800e4e0 <xQueueCreateMutex>
 800df18:	6278      	str	r0, [r7, #36]	; 0x24
 800df1a:	e003      	b.n	800df24 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800df1c:	2001      	movs	r0, #1
 800df1e:	f000 fadf 	bl	800e4e0 <xQueueCreateMutex>
 800df22:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00c      	beq.n	800df44 <osMutexNew+0x110>
        if (attr != NULL) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d003      	beq.n	800df38 <osMutexNew+0x104>
          name = attr->name;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	617b      	str	r3, [r7, #20]
 800df36:	e001      	b.n	800df3c <osMutexNew+0x108>
        } else {
          name = NULL;
 800df38:	2300      	movs	r3, #0
 800df3a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800df3c:	6979      	ldr	r1, [r7, #20]
 800df3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df40:	f000 fe7c 	bl	800ec3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	2b00      	cmp	r3, #0
 800df48:	d006      	beq.n	800df58 <osMutexNew+0x124>
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d003      	beq.n	800df58 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	f043 0301 	orr.w	r3, r3, #1
 800df56:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800df58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3728      	adds	r7, #40	; 0x28
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	2000033c 	.word	0x2000033c

0800df68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800df68:	b580      	push	{r7, lr}
 800df6a:	b08c      	sub	sp, #48	; 0x30
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800df74:	2300      	movs	r3, #0
 800df76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df78:	f3ef 8305 	mrs	r3, IPSR
 800df7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800df7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800df80:	2b00      	cmp	r3, #0
 800df82:	d170      	bne.n	800e066 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df84:	f3ef 8310 	mrs	r3, PRIMASK
 800df88:	617b      	str	r3, [r7, #20]
  return(result);
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d16a      	bne.n	800e066 <osMessageQueueNew+0xfe>
 800df90:	4b37      	ldr	r3, [pc, #220]	; (800e070 <osMessageQueueNew+0x108>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2b02      	cmp	r3, #2
 800df96:	d105      	bne.n	800dfa4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df98:	f3ef 8311 	mrs	r3, BASEPRI
 800df9c:	613b      	str	r3, [r7, #16]
  return(result);
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d160      	bne.n	800e066 <osMessageQueueNew+0xfe>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d05d      	beq.n	800e066 <osMessageQueueNew+0xfe>
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d05a      	beq.n	800e066 <osMessageQueueNew+0xfe>
    mem = -1;
 800dfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d029      	beq.n	800e010 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d012      	beq.n	800dfea <osMessageQueueNew+0x82>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	2b4f      	cmp	r3, #79	; 0x4f
 800dfca:	d90e      	bls.n	800dfea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00a      	beq.n	800dfea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	695a      	ldr	r2, [r3, #20]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	fb01 f303 	mul.w	r3, r1, r3
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d302      	bcc.n	800dfea <osMessageQueueNew+0x82>
        mem = 1;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	623b      	str	r3, [r7, #32]
 800dfe8:	e014      	b.n	800e014 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d110      	bne.n	800e014 <osMessageQueueNew+0xac>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10c      	bne.n	800e014 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d108      	bne.n	800e014 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	695b      	ldr	r3, [r3, #20]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d104      	bne.n	800e014 <osMessageQueueNew+0xac>
          mem = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	623b      	str	r3, [r7, #32]
 800e00e:	e001      	b.n	800e014 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d10c      	bne.n	800e034 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	691a      	ldr	r2, [r3, #16]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6899      	ldr	r1, [r3, #8]
 800e022:	2300      	movs	r3, #0
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	460b      	mov	r3, r1
 800e028:	68b9      	ldr	r1, [r7, #8]
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 f96c 	bl	800e308 <xQueueGenericCreateStatic>
 800e030:	6278      	str	r0, [r7, #36]	; 0x24
 800e032:	e008      	b.n	800e046 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d105      	bne.n	800e046 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e03a:	2200      	movs	r2, #0
 800e03c:	68b9      	ldr	r1, [r7, #8]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f000 f9d4 	bl	800e3ec <xQueueGenericCreate>
 800e044:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00c      	beq.n	800e066 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d003      	beq.n	800e05a <osMessageQueueNew+0xf2>
        name = attr->name;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	61fb      	str	r3, [r7, #28]
 800e058:	e001      	b.n	800e05e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e05a:	2300      	movs	r3, #0
 800e05c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e05e:	69f9      	ldr	r1, [r7, #28]
 800e060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e062:	f000 fdeb 	bl	800ec3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3728      	adds	r7, #40	; 0x28
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	2000033c 	.word	0x2000033c

0800e074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	4a06      	ldr	r2, [pc, #24]	; (800e09c <vApplicationGetIdleTaskMemory+0x28>)
 800e084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	4a05      	ldr	r2, [pc, #20]	; (800e0a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800e08a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2280      	movs	r2, #128	; 0x80
 800e090:	601a      	str	r2, [r3, #0]
}
 800e092:	bf00      	nop
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	bc80      	pop	{r7}
 800e09a:	4770      	bx	lr
 800e09c:	20000340 	.word	0x20000340
 800e0a0:	2000039c 	.word	0x2000039c

0800e0a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	4a07      	ldr	r2, [pc, #28]	; (800e0d0 <vApplicationGetTimerTaskMemory+0x2c>)
 800e0b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	4a06      	ldr	r2, [pc, #24]	; (800e0d4 <vApplicationGetTimerTaskMemory+0x30>)
 800e0ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0c2:	601a      	str	r2, [r3, #0]
}
 800e0c4:	bf00      	nop
 800e0c6:	3714      	adds	r7, #20
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bc80      	pop	{r7}
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	2000059c 	.word	0x2000059c
 800e0d4:	200005f8 	.word	0x200005f8

0800e0d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f103 0208 	add.w	r2, r3, #8
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f103 0208 	add.w	r2, r3, #8
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f103 0208 	add.w	r2, r3, #8
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	bc80      	pop	{r7}
 800e114:	4770      	bx	lr

0800e116 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e116:	b480      	push	{r7}
 800e118:	b083      	sub	sp, #12
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e124:	bf00      	nop
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	bc80      	pop	{r7}
 800e12c:	4770      	bx	lr

0800e12e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e12e:	b480      	push	{r7}
 800e130:	b085      	sub	sp, #20
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	689a      	ldr	r2, [r3, #8]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	683a      	ldr	r2, [r7, #0]
 800e152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	601a      	str	r2, [r3, #0]
}
 800e16a:	bf00      	nop
 800e16c:	3714      	adds	r7, #20
 800e16e:	46bd      	mov	sp, r7
 800e170:	bc80      	pop	{r7}
 800e172:	4770      	bx	lr

0800e174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18a:	d103      	bne.n	800e194 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	e00c      	b.n	800e1ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3308      	adds	r3, #8
 800e198:	60fb      	str	r3, [r7, #12]
 800e19a:	e002      	b.n	800e1a2 <vListInsert+0x2e>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	60fb      	str	r3, [r7, #12]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d2f6      	bcs.n	800e19c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	685a      	ldr	r2, [r3, #4]
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	683a      	ldr	r2, [r7, #0]
 800e1bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	601a      	str	r2, [r3, #0]
}
 800e1da:	bf00      	nop
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bc80      	pop	{r7}
 800e1e2:	4770      	bx	lr

0800e1e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	6892      	ldr	r2, [r2, #8]
 800e1fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	6852      	ldr	r2, [r2, #4]
 800e204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d103      	bne.n	800e218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	1e5a      	subs	r2, r3, #1
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3714      	adds	r7, #20
 800e230:	46bd      	mov	sp, r7
 800e232:	bc80      	pop	{r7}
 800e234:	4770      	bx	lr
	...

0800e238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d109      	bne.n	800e260 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	60bb      	str	r3, [r7, #8]
 800e25e:	e7fe      	b.n	800e25e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e260:	f002 f822 	bl	80102a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e26c:	68f9      	ldr	r1, [r7, #12]
 800e26e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e270:	fb01 f303 	mul.w	r3, r1, r3
 800e274:	441a      	add	r2, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e290:	3b01      	subs	r3, #1
 800e292:	68f9      	ldr	r1, [r7, #12]
 800e294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e296:	fb01 f303 	mul.w	r3, r1, r3
 800e29a:	441a      	add	r2, r3
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	22ff      	movs	r2, #255	; 0xff
 800e2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	22ff      	movs	r2, #255	; 0xff
 800e2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d114      	bne.n	800e2e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	691b      	ldr	r3, [r3, #16]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d01a      	beq.n	800e2f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	3310      	adds	r3, #16
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f001 f962 	bl	800f58c <xTaskRemoveFromEventList>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d012      	beq.n	800e2f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2ce:	4b0d      	ldr	r3, [pc, #52]	; (800e304 <xQueueGenericReset+0xcc>)
 800e2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d4:	601a      	str	r2, [r3, #0]
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	e009      	b.n	800e2f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	3310      	adds	r3, #16
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7ff fef7 	bl	800e0d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3324      	adds	r3, #36	; 0x24
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff fef2 	bl	800e0d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2f4:	f002 f806 	bl	8010304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2f8:	2301      	movs	r3, #1
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	e000ed04 	.word	0xe000ed04

0800e308 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08e      	sub	sp, #56	; 0x38
 800e30c:	af02      	add	r7, sp, #8
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d109      	bne.n	800e330 <xQueueGenericCreateStatic+0x28>
 800e31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e320:	f383 8811 	msr	BASEPRI, r3
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e32e:	e7fe      	b.n	800e32e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d109      	bne.n	800e34a <xQueueGenericCreateStatic+0x42>
 800e336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	627b      	str	r3, [r7, #36]	; 0x24
 800e348:	e7fe      	b.n	800e348 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <xQueueGenericCreateStatic+0x4e>
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <xQueueGenericCreateStatic+0x52>
 800e356:	2301      	movs	r3, #1
 800e358:	e000      	b.n	800e35c <xQueueGenericCreateStatic+0x54>
 800e35a:	2300      	movs	r3, #0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d109      	bne.n	800e374 <xQueueGenericCreateStatic+0x6c>
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	623b      	str	r3, [r7, #32]
 800e372:	e7fe      	b.n	800e372 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d102      	bne.n	800e380 <xQueueGenericCreateStatic+0x78>
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <xQueueGenericCreateStatic+0x7c>
 800e380:	2301      	movs	r3, #1
 800e382:	e000      	b.n	800e386 <xQueueGenericCreateStatic+0x7e>
 800e384:	2300      	movs	r3, #0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d109      	bne.n	800e39e <xQueueGenericCreateStatic+0x96>
 800e38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38e:	f383 8811 	msr	BASEPRI, r3
 800e392:	f3bf 8f6f 	isb	sy
 800e396:	f3bf 8f4f 	dsb	sy
 800e39a:	61fb      	str	r3, [r7, #28]
 800e39c:	e7fe      	b.n	800e39c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e39e:	2350      	movs	r3, #80	; 0x50
 800e3a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2b50      	cmp	r3, #80	; 0x50
 800e3a6:	d009      	beq.n	800e3bc <xQueueGenericCreateStatic+0xb4>
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	61bb      	str	r3, [r7, #24]
 800e3ba:	e7fe      	b.n	800e3ba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00d      	beq.n	800e3e2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	68b9      	ldr	r1, [r7, #8]
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f000 f842 	bl	800e466 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3730      	adds	r7, #48	; 0x30
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08a      	sub	sp, #40	; 0x28
 800e3f0:	af02      	add	r7, sp, #8
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d109      	bne.n	800e414 <xQueueGenericCreate+0x28>
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	613b      	str	r3, [r7, #16]
 800e412:	e7fe      	b.n	800e412 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	61fb      	str	r3, [r7, #28]
 800e41e:	e004      	b.n	800e42a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	fb02 f303 	mul.w	r3, r2, r3
 800e428:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	3350      	adds	r3, #80	; 0x50
 800e42e:	4618      	mov	r0, r3
 800e430:	f002 f830 	bl	8010494 <pvPortMalloc>
 800e434:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00f      	beq.n	800e45c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	3350      	adds	r3, #80	; 0x50
 800e440:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	2200      	movs	r2, #0
 800e446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e44a:	79fa      	ldrb	r2, [r7, #7]
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	4613      	mov	r3, r2
 800e452:	697a      	ldr	r2, [r7, #20]
 800e454:	68b9      	ldr	r1, [r7, #8]
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 f805 	bl	800e466 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e45c:	69bb      	ldr	r3, [r7, #24]
	}
 800e45e:	4618      	mov	r0, r3
 800e460:	3720      	adds	r7, #32
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b084      	sub	sp, #16
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	60f8      	str	r0, [r7, #12]
 800e46e:	60b9      	str	r1, [r7, #8]
 800e470:	607a      	str	r2, [r7, #4]
 800e472:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d103      	bne.n	800e482 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	69ba      	ldr	r2, [r7, #24]
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	e002      	b.n	800e488 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e494:	2101      	movs	r1, #1
 800e496:	69b8      	ldr	r0, [r7, #24]
 800e498:	f7ff fece 	bl	800e238 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	78fa      	ldrb	r2, [r7, #3]
 800e4a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e4a4:	bf00      	nop
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00e      	beq.n	800e4d8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f838 	bl	800e548 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	617b      	str	r3, [r7, #20]
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	6939      	ldr	r1, [r7, #16]
 800e4f8:	6978      	ldr	r0, [r7, #20]
 800e4fa:	f7ff ff77 	bl	800e3ec <xQueueGenericCreate>
 800e4fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f7ff ffd3 	bl	800e4ac <prvInitialiseMutex>

		return pxNewQueue;
 800e506:	68fb      	ldr	r3, [r7, #12]
	}
 800e508:	4618      	mov	r0, r3
 800e50a:	3718      	adds	r7, #24
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e510:	b580      	push	{r7, lr}
 800e512:	b088      	sub	sp, #32
 800e514:	af02      	add	r7, sp, #8
 800e516:	4603      	mov	r3, r0
 800e518:	6039      	str	r1, [r7, #0]
 800e51a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e51c:	2301      	movs	r3, #1
 800e51e:	617b      	str	r3, [r7, #20]
 800e520:	2300      	movs	r3, #0
 800e522:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e524:	79fb      	ldrb	r3, [r7, #7]
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	2200      	movs	r2, #0
 800e52c:	6939      	ldr	r1, [r7, #16]
 800e52e:	6978      	ldr	r0, [r7, #20]
 800e530:	f7ff feea 	bl	800e308 <xQueueGenericCreateStatic>
 800e534:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f7ff ffb8 	bl	800e4ac <prvInitialiseMutex>

		return pxNewQueue;
 800e53c:	68fb      	ldr	r3, [r7, #12]
	}
 800e53e:	4618      	mov	r0, r3
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
	...

0800e548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08e      	sub	sp, #56	; 0x38
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
 800e554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e556:	2300      	movs	r3, #0
 800e558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	2b00      	cmp	r3, #0
 800e562:	d109      	bne.n	800e578 <xQueueGenericSend+0x30>
 800e564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	62bb      	str	r3, [r7, #40]	; 0x28
 800e576:	e7fe      	b.n	800e576 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d103      	bne.n	800e586 <xQueueGenericSend+0x3e>
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <xQueueGenericSend+0x42>
 800e586:	2301      	movs	r3, #1
 800e588:	e000      	b.n	800e58c <xQueueGenericSend+0x44>
 800e58a:	2300      	movs	r3, #0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d109      	bne.n	800e5a4 <xQueueGenericSend+0x5c>
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	627b      	str	r3, [r7, #36]	; 0x24
 800e5a2:	e7fe      	b.n	800e5a2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d103      	bne.n	800e5b2 <xQueueGenericSend+0x6a>
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d101      	bne.n	800e5b6 <xQueueGenericSend+0x6e>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e000      	b.n	800e5b8 <xQueueGenericSend+0x70>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d109      	bne.n	800e5d0 <xQueueGenericSend+0x88>
 800e5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c0:	f383 8811 	msr	BASEPRI, r3
 800e5c4:	f3bf 8f6f 	isb	sy
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	623b      	str	r3, [r7, #32]
 800e5ce:	e7fe      	b.n	800e5ce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5d0:	f001 f996 	bl	800f900 <xTaskGetSchedulerState>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d102      	bne.n	800e5e0 <xQueueGenericSend+0x98>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d101      	bne.n	800e5e4 <xQueueGenericSend+0x9c>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e000      	b.n	800e5e6 <xQueueGenericSend+0x9e>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d109      	bne.n	800e5fe <xQueueGenericSend+0xb6>
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	61fb      	str	r3, [r7, #28]
 800e5fc:	e7fe      	b.n	800e5fc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5fe:	f001 fe53 	bl	80102a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d302      	bcc.n	800e614 <xQueueGenericSend+0xcc>
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	2b02      	cmp	r3, #2
 800e612:	d129      	bne.n	800e668 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e614:	683a      	ldr	r2, [r7, #0]
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e61a:	f000 f9ff 	bl	800ea1c <prvCopyDataToQueue>
 800e61e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e624:	2b00      	cmp	r3, #0
 800e626:	d010      	beq.n	800e64a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	3324      	adds	r3, #36	; 0x24
 800e62c:	4618      	mov	r0, r3
 800e62e:	f000 ffad 	bl	800f58c <xTaskRemoveFromEventList>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d013      	beq.n	800e660 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e638:	4b3f      	ldr	r3, [pc, #252]	; (800e738 <xQueueGenericSend+0x1f0>)
 800e63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e63e:	601a      	str	r2, [r3, #0]
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	e00a      	b.n	800e660 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d007      	beq.n	800e660 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e650:	4b39      	ldr	r3, [pc, #228]	; (800e738 <xQueueGenericSend+0x1f0>)
 800e652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e660:	f001 fe50 	bl	8010304 <vPortExitCritical>
				return pdPASS;
 800e664:	2301      	movs	r3, #1
 800e666:	e063      	b.n	800e730 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d103      	bne.n	800e676 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e66e:	f001 fe49 	bl	8010304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e672:	2300      	movs	r3, #0
 800e674:	e05c      	b.n	800e730 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d106      	bne.n	800e68a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e67c:	f107 0314 	add.w	r3, r7, #20
 800e680:	4618      	mov	r0, r3
 800e682:	f000 ffe5 	bl	800f650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e686:	2301      	movs	r3, #1
 800e688:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e68a:	f001 fe3b 	bl	8010304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e68e:	f000 fd5d 	bl	800f14c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e692:	f001 fe09 	bl	80102a8 <vPortEnterCritical>
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e69c:	b25b      	sxtb	r3, r3
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a2:	d103      	bne.n	800e6ac <xQueueGenericSend+0x164>
 800e6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6b2:	b25b      	sxtb	r3, r3
 800e6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b8:	d103      	bne.n	800e6c2 <xQueueGenericSend+0x17a>
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6c2:	f001 fe1f 	bl	8010304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6c6:	1d3a      	adds	r2, r7, #4
 800e6c8:	f107 0314 	add.w	r3, r7, #20
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f000 ffd4 	bl	800f67c <xTaskCheckForTimeOut>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d124      	bne.n	800e724 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6dc:	f000 fa96 	bl	800ec0c <prvIsQueueFull>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d018      	beq.n	800e718 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	3310      	adds	r3, #16
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f000 fefe 	bl	800f4f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6f6:	f000 fa21 	bl	800eb3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e6fa:	f000 fd35 	bl	800f168 <xTaskResumeAll>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	f47f af7c 	bne.w	800e5fe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e706:	4b0c      	ldr	r3, [pc, #48]	; (800e738 <xQueueGenericSend+0x1f0>)
 800e708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	f3bf 8f6f 	isb	sy
 800e716:	e772      	b.n	800e5fe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e71a:	f000 fa0f 	bl	800eb3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e71e:	f000 fd23 	bl	800f168 <xTaskResumeAll>
 800e722:	e76c      	b.n	800e5fe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e726:	f000 fa09 	bl	800eb3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e72a:	f000 fd1d 	bl	800f168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e72e:	2300      	movs	r3, #0
		}
	}
}
 800e730:	4618      	mov	r0, r3
 800e732:	3738      	adds	r7, #56	; 0x38
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed04 	.word	0xe000ed04

0800e73c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08e      	sub	sp, #56	; 0x38
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
 800e748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e750:	2b00      	cmp	r3, #0
 800e752:	d109      	bne.n	800e768 <xQueueGenericSendFromISR+0x2c>
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
 800e766:	e7fe      	b.n	800e766 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d103      	bne.n	800e776 <xQueueGenericSendFromISR+0x3a>
 800e76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e772:	2b00      	cmp	r3, #0
 800e774:	d101      	bne.n	800e77a <xQueueGenericSendFromISR+0x3e>
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <xQueueGenericSendFromISR+0x40>
 800e77a:	2300      	movs	r3, #0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <xQueueGenericSendFromISR+0x58>
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	623b      	str	r3, [r7, #32]
 800e792:	e7fe      	b.n	800e792 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	2b02      	cmp	r3, #2
 800e798:	d103      	bne.n	800e7a2 <xQueueGenericSendFromISR+0x66>
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d101      	bne.n	800e7a6 <xQueueGenericSendFromISR+0x6a>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <xQueueGenericSendFromISR+0x6c>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d109      	bne.n	800e7c0 <xQueueGenericSendFromISR+0x84>
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	61fb      	str	r3, [r7, #28]
 800e7be:	e7fe      	b.n	800e7be <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7c0:	f001 fe2c 	bl	801041c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7c4:	f3ef 8211 	mrs	r2, BASEPRI
 800e7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7cc:	f383 8811 	msr	BASEPRI, r3
 800e7d0:	f3bf 8f6f 	isb	sy
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	61ba      	str	r2, [r7, #24]
 800e7da:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e7dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d302      	bcc.n	800e7f2 <xQueueGenericSendFromISR+0xb6>
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d12c      	bne.n	800e84c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	68b9      	ldr	r1, [r7, #8]
 800e800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e802:	f000 f90b 	bl	800ea1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e806:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e80e:	d112      	bne.n	800e836 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e814:	2b00      	cmp	r3, #0
 800e816:	d016      	beq.n	800e846 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81a:	3324      	adds	r3, #36	; 0x24
 800e81c:	4618      	mov	r0, r3
 800e81e:	f000 feb5 	bl	800f58c <xTaskRemoveFromEventList>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00e      	beq.n	800e846 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2201      	movs	r2, #1
 800e832:	601a      	str	r2, [r3, #0]
 800e834:	e007      	b.n	800e846 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e83a:	3301      	adds	r3, #1
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	b25a      	sxtb	r2, r3
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e846:	2301      	movs	r3, #1
 800e848:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e84a:	e001      	b.n	800e850 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e84c:	2300      	movs	r3, #0
 800e84e:	637b      	str	r3, [r7, #52]	; 0x34
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3738      	adds	r7, #56	; 0x38
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b08c      	sub	sp, #48	; 0x30
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e870:	2300      	movs	r3, #0
 800e872:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d109      	bne.n	800e892 <xQueueReceive+0x2e>
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	623b      	str	r3, [r7, #32]
 800e890:	e7fe      	b.n	800e890 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d103      	bne.n	800e8a0 <xQueueReceive+0x3c>
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <xQueueReceive+0x40>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e000      	b.n	800e8a6 <xQueueReceive+0x42>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d109      	bne.n	800e8be <xQueueReceive+0x5a>
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	61fb      	str	r3, [r7, #28]
 800e8bc:	e7fe      	b.n	800e8bc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8be:	f001 f81f 	bl	800f900 <xTaskGetSchedulerState>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d102      	bne.n	800e8ce <xQueueReceive+0x6a>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <xQueueReceive+0x6e>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e000      	b.n	800e8d4 <xQueueReceive+0x70>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d109      	bne.n	800e8ec <xQueueReceive+0x88>
 800e8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	61bb      	str	r3, [r7, #24]
 800e8ea:	e7fe      	b.n	800e8ea <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8ec:	f001 fcdc 	bl	80102a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d01f      	beq.n	800e93c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8fc:	68b9      	ldr	r1, [r7, #8]
 800e8fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e900:	f000 f8f6 	bl	800eaf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e906:	1e5a      	subs	r2, r3, #1
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00f      	beq.n	800e934 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e916:	3310      	adds	r3, #16
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 fe37 	bl	800f58c <xTaskRemoveFromEventList>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d007      	beq.n	800e934 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e924:	4b3c      	ldr	r3, [pc, #240]	; (800ea18 <xQueueReceive+0x1b4>)
 800e926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e934:	f001 fce6 	bl	8010304 <vPortExitCritical>
				return pdPASS;
 800e938:	2301      	movs	r3, #1
 800e93a:	e069      	b.n	800ea10 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d103      	bne.n	800e94a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e942:	f001 fcdf 	bl	8010304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e946:	2300      	movs	r3, #0
 800e948:	e062      	b.n	800ea10 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d106      	bne.n	800e95e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e950:	f107 0310 	add.w	r3, r7, #16
 800e954:	4618      	mov	r0, r3
 800e956:	f000 fe7b 	bl	800f650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e95a:	2301      	movs	r3, #1
 800e95c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e95e:	f001 fcd1 	bl	8010304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e962:	f000 fbf3 	bl	800f14c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e966:	f001 fc9f 	bl	80102a8 <vPortEnterCritical>
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e970:	b25b      	sxtb	r3, r3
 800e972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e976:	d103      	bne.n	800e980 <xQueueReceive+0x11c>
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e986:	b25b      	sxtb	r3, r3
 800e988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98c:	d103      	bne.n	800e996 <xQueueReceive+0x132>
 800e98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e996:	f001 fcb5 	bl	8010304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e99a:	1d3a      	adds	r2, r7, #4
 800e99c:	f107 0310 	add.w	r3, r7, #16
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 fe6a 	bl	800f67c <xTaskCheckForTimeOut>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d123      	bne.n	800e9f6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b0:	f000 f916 	bl	800ebe0 <prvIsQueueEmpty>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d017      	beq.n	800e9ea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	3324      	adds	r3, #36	; 0x24
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 fd94 	bl	800f4f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ca:	f000 f8b7 	bl	800eb3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9ce:	f000 fbcb 	bl	800f168 <xTaskResumeAll>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d189      	bne.n	800e8ec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ea18 <xQueueReceive+0x1b4>)
 800e9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9de:	601a      	str	r2, [r3, #0]
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	e780      	b.n	800e8ec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ec:	f000 f8a6 	bl	800eb3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9f0:	f000 fbba 	bl	800f168 <xTaskResumeAll>
 800e9f4:	e77a      	b.n	800e8ec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9f8:	f000 f8a0 	bl	800eb3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9fc:	f000 fbb4 	bl	800f168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea02:	f000 f8ed 	bl	800ebe0 <prvIsQueueEmpty>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f43f af6f 	beq.w	800e8ec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3730      	adds	r7, #48	; 0x30
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	e000ed04 	.word	0xe000ed04

0800ea1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10d      	bne.n	800ea56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d14d      	bne.n	800eade <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 ff78 	bl	800f93c <xTaskPriorityDisinherit>
 800ea4c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	605a      	str	r2, [r3, #4]
 800ea54:	e043      	b.n	800eade <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d119      	bne.n	800ea90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6898      	ldr	r0, [r3, #8]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea64:	461a      	mov	r2, r3
 800ea66:	68b9      	ldr	r1, [r7, #8]
 800ea68:	f002 fb60 	bl	801112c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	689a      	ldr	r2, [r3, #8]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea74:	441a      	add	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	689a      	ldr	r2, [r3, #8]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d32b      	bcc.n	800eade <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	609a      	str	r2, [r3, #8]
 800ea8e:	e026      	b.n	800eade <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	68d8      	ldr	r0, [r3, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea98:	461a      	mov	r2, r3
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	f002 fb46 	bl	801112c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	68da      	ldr	r2, [r3, #12]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaa8:	425b      	negs	r3, r3
 800eaaa:	441a      	add	r2, r3
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	68da      	ldr	r2, [r3, #12]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d207      	bcs.n	800eacc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	685a      	ldr	r2, [r3, #4]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac4:	425b      	negs	r3, r3
 800eac6:	441a      	add	r2, r3
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d105      	bne.n	800eade <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	3b01      	subs	r3, #1
 800eadc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eae6:	697b      	ldr	r3, [r7, #20]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d018      	beq.n	800eb34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	68da      	ldr	r2, [r3, #12]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb0a:	441a      	add	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68da      	ldr	r2, [r3, #12]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d303      	bcc.n	800eb24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	68d9      	ldr	r1, [r3, #12]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	6838      	ldr	r0, [r7, #0]
 800eb30:	f002 fafc 	bl	801112c <memcpy>
	}
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eb44:	f001 fbb0 	bl	80102a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb50:	e011      	b.n	800eb76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d012      	beq.n	800eb80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	3324      	adds	r3, #36	; 0x24
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f000 fd14 	bl	800f58c <xTaskRemoveFromEventList>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d001      	beq.n	800eb6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb6a:	f000 fde7 	bl	800f73c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb6e:	7bfb      	ldrb	r3, [r7, #15]
 800eb70:	3b01      	subs	r3, #1
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	dce9      	bgt.n	800eb52 <prvUnlockQueue+0x16>
 800eb7e:	e000      	b.n	800eb82 <prvUnlockQueue+0x46>
					break;
 800eb80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	22ff      	movs	r2, #255	; 0xff
 800eb86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800eb8a:	f001 fbbb 	bl	8010304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb8e:	f001 fb8b 	bl	80102a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb9a:	e011      	b.n	800ebc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d012      	beq.n	800ebca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3310      	adds	r3, #16
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f000 fcef 	bl	800f58c <xTaskRemoveFromEventList>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ebb4:	f000 fdc2 	bl	800f73c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	dce9      	bgt.n	800eb9c <prvUnlockQueue+0x60>
 800ebc8:	e000      	b.n	800ebcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ebca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	22ff      	movs	r2, #255	; 0xff
 800ebd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ebd4:	f001 fb96 	bl	8010304 <vPortExitCritical>
}
 800ebd8:	bf00      	nop
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebe8:	f001 fb5e 	bl	80102a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d102      	bne.n	800ebfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	60fb      	str	r3, [r7, #12]
 800ebf8:	e001      	b.n	800ebfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebfe:	f001 fb81 	bl	8010304 <vPortExitCritical>

	return xReturn;
 800ec02:	68fb      	ldr	r3, [r7, #12]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec14:	f001 fb48 	bl	80102a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d102      	bne.n	800ec2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec24:	2301      	movs	r3, #1
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	e001      	b.n	800ec2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec2e:	f001 fb69 	bl	8010304 <vPortExitCritical>

	return xReturn;
 800ec32:	68fb      	ldr	r3, [r7, #12]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec46:	2300      	movs	r3, #0
 800ec48:	60fb      	str	r3, [r7, #12]
 800ec4a:	e014      	b.n	800ec76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec4c:	4a0e      	ldr	r2, [pc, #56]	; (800ec88 <vQueueAddToRegistry+0x4c>)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d10b      	bne.n	800ec70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec58:	490b      	ldr	r1, [pc, #44]	; (800ec88 <vQueueAddToRegistry+0x4c>)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	683a      	ldr	r2, [r7, #0]
 800ec5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec62:	4a09      	ldr	r2, [pc, #36]	; (800ec88 <vQueueAddToRegistry+0x4c>)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	4413      	add	r3, r2
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec6e:	e005      	b.n	800ec7c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3301      	adds	r3, #1
 800ec74:	60fb      	str	r3, [r7, #12]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b07      	cmp	r3, #7
 800ec7a:	d9e7      	bls.n	800ec4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec7c:	bf00      	nop
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bc80      	pop	{r7}
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	200043a0 	.word	0x200043a0

0800ec8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b086      	sub	sp, #24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ec9c:	f001 fb04 	bl	80102a8 <vPortEnterCritical>
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eca6:	b25b      	sxtb	r3, r3
 800eca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecac:	d103      	bne.n	800ecb6 <vQueueWaitForMessageRestricted+0x2a>
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecbc:	b25b      	sxtb	r3, r3
 800ecbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc2:	d103      	bne.n	800eccc <vQueueWaitForMessageRestricted+0x40>
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eccc:	f001 fb1a 	bl	8010304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d106      	bne.n	800ece6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	3324      	adds	r3, #36	; 0x24
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	68b9      	ldr	r1, [r7, #8]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f000 fc29 	bl	800f538 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ece6:	6978      	ldr	r0, [r7, #20]
 800ece8:	f7ff ff28 	bl	800eb3c <prvUnlockQueue>
	}
 800ecec:	bf00      	nop
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b08e      	sub	sp, #56	; 0x38
 800ecf8:	af04      	add	r7, sp, #16
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d109      	bne.n	800ed1c <xTaskCreateStatic+0x28>
 800ed08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f3bf 8f6f 	isb	sy
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	623b      	str	r3, [r7, #32]
 800ed1a:	e7fe      	b.n	800ed1a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d109      	bne.n	800ed36 <xTaskCreateStatic+0x42>
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	61fb      	str	r3, [r7, #28]
 800ed34:	e7fe      	b.n	800ed34 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed36:	235c      	movs	r3, #92	; 0x5c
 800ed38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	2b5c      	cmp	r3, #92	; 0x5c
 800ed3e:	d009      	beq.n	800ed54 <xTaskCreateStatic+0x60>
 800ed40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	61bb      	str	r3, [r7, #24]
 800ed52:	e7fe      	b.n	800ed52 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d01e      	beq.n	800ed98 <xTaskCreateStatic+0xa4>
 800ed5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d01b      	beq.n	800ed98 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed72:	2300      	movs	r3, #0
 800ed74:	9303      	str	r3, [sp, #12]
 800ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed78:	9302      	str	r3, [sp, #8]
 800ed7a:	f107 0314 	add.w	r3, r7, #20
 800ed7e:	9301      	str	r3, [sp, #4]
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	68b9      	ldr	r1, [r7, #8]
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f000 f850 	bl	800ee30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed92:	f000 f8d3 	bl	800ef3c <prvAddNewTaskToReadyList>
 800ed96:	e001      	b.n	800ed9c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ed9c:	697b      	ldr	r3, [r7, #20]
	}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3728      	adds	r7, #40	; 0x28
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b08c      	sub	sp, #48	; 0x30
 800edaa:	af04      	add	r7, sp, #16
 800edac:	60f8      	str	r0, [r7, #12]
 800edae:	60b9      	str	r1, [r7, #8]
 800edb0:	603b      	str	r3, [r7, #0]
 800edb2:	4613      	mov	r3, r2
 800edb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edb6:	88fb      	ldrh	r3, [r7, #6]
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	4618      	mov	r0, r3
 800edbc:	f001 fb6a 	bl	8010494 <pvPortMalloc>
 800edc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00e      	beq.n	800ede6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800edc8:	205c      	movs	r0, #92	; 0x5c
 800edca:	f001 fb63 	bl	8010494 <pvPortMalloc>
 800edce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d003      	beq.n	800edde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	631a      	str	r2, [r3, #48]	; 0x30
 800eddc:	e005      	b.n	800edea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800edde:	6978      	ldr	r0, [r7, #20]
 800ede0:	f001 fc1a 	bl	8010618 <vPortFree>
 800ede4:	e001      	b.n	800edea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ede6:	2300      	movs	r3, #0
 800ede8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800edea:	69fb      	ldr	r3, [r7, #28]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d017      	beq.n	800ee20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800edf8:	88fa      	ldrh	r2, [r7, #6]
 800edfa:	2300      	movs	r3, #0
 800edfc:	9303      	str	r3, [sp, #12]
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	9302      	str	r3, [sp, #8]
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	9301      	str	r3, [sp, #4]
 800ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	68b9      	ldr	r1, [r7, #8]
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f000 f80e 	bl	800ee30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee14:	69f8      	ldr	r0, [r7, #28]
 800ee16:	f000 f891 	bl	800ef3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	61bb      	str	r3, [r7, #24]
 800ee1e:	e002      	b.n	800ee26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee20:	f04f 33ff 	mov.w	r3, #4294967295
 800ee24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee26:	69bb      	ldr	r3, [r7, #24]
	}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3720      	adds	r7, #32
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b088      	sub	sp, #32
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
 800ee3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	461a      	mov	r2, r3
 800ee48:	21a5      	movs	r1, #165	; 0xa5
 800ee4a:	f002 f97a 	bl	8011142 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	4413      	add	r3, r2
 800ee5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	f023 0307 	bic.w	r3, r3, #7
 800ee66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	f003 0307 	and.w	r3, r3, #7
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d009      	beq.n	800ee86 <prvInitialiseNewTask+0x56>
 800ee72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	617b      	str	r3, [r7, #20]
 800ee84:	e7fe      	b.n	800ee84 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee86:	2300      	movs	r3, #0
 800ee88:	61fb      	str	r3, [r7, #28]
 800ee8a:	e012      	b.n	800eeb2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee8c:	68ba      	ldr	r2, [r7, #8]
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	4413      	add	r3, r2
 800ee92:	7819      	ldrb	r1, [r3, #0]
 800ee94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	4413      	add	r3, r2
 800ee9a:	3334      	adds	r3, #52	; 0x34
 800ee9c:	460a      	mov	r2, r1
 800ee9e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800eea0:	68ba      	ldr	r2, [r7, #8]
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	4413      	add	r3, r2
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d006      	beq.n	800eeba <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	61fb      	str	r3, [r7, #28]
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	2b0f      	cmp	r3, #15
 800eeb6:	d9e9      	bls.n	800ee8c <prvInitialiseNewTask+0x5c>
 800eeb8:	e000      	b.n	800eebc <prvInitialiseNewTask+0x8c>
		{
			break;
 800eeba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	2b37      	cmp	r3, #55	; 0x37
 800eec8:	d901      	bls.n	800eece <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eeca:	2337      	movs	r3, #55	; 0x37
 800eecc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eed2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eed8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	2200      	movs	r2, #0
 800eede:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee2:	3304      	adds	r3, #4
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff f916 	bl	800e116 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeec:	3318      	adds	r3, #24
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7ff f911 	bl	800e116 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eef8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef12:	2200      	movs	r2, #0
 800ef14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef18:	683a      	ldr	r2, [r7, #0]
 800ef1a:	68f9      	ldr	r1, [r7, #12]
 800ef1c:	69b8      	ldr	r0, [r7, #24]
 800ef1e:	f001 f8d7 	bl	80100d0 <pxPortInitialiseStack>
 800ef22:	4602      	mov	r2, r0
 800ef24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ef28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d002      	beq.n	800ef34 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef34:	bf00      	nop
 800ef36:	3720      	adds	r7, #32
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef44:	f001 f9b0 	bl	80102a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef48:	4b2d      	ldr	r3, [pc, #180]	; (800f000 <prvAddNewTaskToReadyList+0xc4>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	4a2c      	ldr	r2, [pc, #176]	; (800f000 <prvAddNewTaskToReadyList+0xc4>)
 800ef50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef52:	4b2c      	ldr	r3, [pc, #176]	; (800f004 <prvAddNewTaskToReadyList+0xc8>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d109      	bne.n	800ef6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ef5a:	4a2a      	ldr	r2, [pc, #168]	; (800f004 <prvAddNewTaskToReadyList+0xc8>)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef60:	4b27      	ldr	r3, [pc, #156]	; (800f000 <prvAddNewTaskToReadyList+0xc4>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d110      	bne.n	800ef8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef68:	f000 fc0c 	bl	800f784 <prvInitialiseTaskLists>
 800ef6c:	e00d      	b.n	800ef8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef6e:	4b26      	ldr	r3, [pc, #152]	; (800f008 <prvAddNewTaskToReadyList+0xcc>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d109      	bne.n	800ef8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef76:	4b23      	ldr	r3, [pc, #140]	; (800f004 <prvAddNewTaskToReadyList+0xc8>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d802      	bhi.n	800ef8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ef84:	4a1f      	ldr	r2, [pc, #124]	; (800f004 <prvAddNewTaskToReadyList+0xc8>)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ef8a:	4b20      	ldr	r3, [pc, #128]	; (800f00c <prvAddNewTaskToReadyList+0xd0>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	4a1e      	ldr	r2, [pc, #120]	; (800f00c <prvAddNewTaskToReadyList+0xd0>)
 800ef92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ef94:	4b1d      	ldr	r3, [pc, #116]	; (800f00c <prvAddNewTaskToReadyList+0xd0>)
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa0:	4b1b      	ldr	r3, [pc, #108]	; (800f010 <prvAddNewTaskToReadyList+0xd4>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d903      	bls.n	800efb0 <prvAddNewTaskToReadyList+0x74>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efac:	4a18      	ldr	r2, [pc, #96]	; (800f010 <prvAddNewTaskToReadyList+0xd4>)
 800efae:	6013      	str	r3, [r2, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efb4:	4613      	mov	r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	4413      	add	r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4a15      	ldr	r2, [pc, #84]	; (800f014 <prvAddNewTaskToReadyList+0xd8>)
 800efbe:	441a      	add	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	3304      	adds	r3, #4
 800efc4:	4619      	mov	r1, r3
 800efc6:	4610      	mov	r0, r2
 800efc8:	f7ff f8b1 	bl	800e12e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800efcc:	f001 f99a 	bl	8010304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800efd0:	4b0d      	ldr	r3, [pc, #52]	; (800f008 <prvAddNewTaskToReadyList+0xcc>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00e      	beq.n	800eff6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800efd8:	4b0a      	ldr	r3, [pc, #40]	; (800f004 <prvAddNewTaskToReadyList+0xc8>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d207      	bcs.n	800eff6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800efe6:	4b0c      	ldr	r3, [pc, #48]	; (800f018 <prvAddNewTaskToReadyList+0xdc>)
 800efe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efec:	601a      	str	r2, [r3, #0]
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eff6:	bf00      	nop
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	20000ecc 	.word	0x20000ecc
 800f004:	200009f8 	.word	0x200009f8
 800f008:	20000ed8 	.word	0x20000ed8
 800f00c:	20000ee8 	.word	0x20000ee8
 800f010:	20000ed4 	.word	0x20000ed4
 800f014:	200009fc 	.word	0x200009fc
 800f018:	e000ed04 	.word	0xe000ed04

0800f01c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f024:	2300      	movs	r3, #0
 800f026:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d016      	beq.n	800f05c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f02e:	4b13      	ldr	r3, [pc, #76]	; (800f07c <vTaskDelay+0x60>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d009      	beq.n	800f04a <vTaskDelay+0x2e>
 800f036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	60bb      	str	r3, [r7, #8]
 800f048:	e7fe      	b.n	800f048 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800f04a:	f000 f87f 	bl	800f14c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f04e:	2100      	movs	r1, #0
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 fcdf 	bl	800fa14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f056:	f000 f887 	bl	800f168 <xTaskResumeAll>
 800f05a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d107      	bne.n	800f072 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800f062:	4b07      	ldr	r3, [pc, #28]	; (800f080 <vTaskDelay+0x64>)
 800f064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f072:	bf00      	nop
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	20000ef4 	.word	0x20000ef4
 800f080:	e000ed04 	.word	0xe000ed04

0800f084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	; 0x28
 800f088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f092:	463a      	mov	r2, r7
 800f094:	1d39      	adds	r1, r7, #4
 800f096:	f107 0308 	add.w	r3, r7, #8
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe ffea 	bl	800e074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68ba      	ldr	r2, [r7, #8]
 800f0a6:	9202      	str	r2, [sp, #8]
 800f0a8:	9301      	str	r3, [sp, #4]
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	460a      	mov	r2, r1
 800f0b2:	4920      	ldr	r1, [pc, #128]	; (800f134 <vTaskStartScheduler+0xb0>)
 800f0b4:	4820      	ldr	r0, [pc, #128]	; (800f138 <vTaskStartScheduler+0xb4>)
 800f0b6:	f7ff fe1d 	bl	800ecf4 <xTaskCreateStatic>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	4b1f      	ldr	r3, [pc, #124]	; (800f13c <vTaskStartScheduler+0xb8>)
 800f0be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0c0:	4b1e      	ldr	r3, [pc, #120]	; (800f13c <vTaskStartScheduler+0xb8>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	617b      	str	r3, [r7, #20]
 800f0cc:	e001      	b.n	800f0d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d102      	bne.n	800f0de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f0d8:	f000 fcf0 	bl	800fabc <xTimerCreateTimerTask>
 800f0dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d115      	bne.n	800f110 <vTaskStartScheduler+0x8c>
 800f0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e8:	f383 8811 	msr	BASEPRI, r3
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f3bf 8f4f 	dsb	sy
 800f0f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f0f6:	4b12      	ldr	r3, [pc, #72]	; (800f140 <vTaskStartScheduler+0xbc>)
 800f0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f0fe:	4b11      	ldr	r3, [pc, #68]	; (800f144 <vTaskStartScheduler+0xc0>)
 800f100:	2201      	movs	r2, #1
 800f102:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f104:	4b10      	ldr	r3, [pc, #64]	; (800f148 <vTaskStartScheduler+0xc4>)
 800f106:	2200      	movs	r2, #0
 800f108:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f10a:	f001 f85d 	bl	80101c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f10e:	e00d      	b.n	800f12c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f116:	d109      	bne.n	800f12c <vTaskStartScheduler+0xa8>
 800f118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11c:	f383 8811 	msr	BASEPRI, r3
 800f120:	f3bf 8f6f 	isb	sy
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	60fb      	str	r3, [r7, #12]
 800f12a:	e7fe      	b.n	800f12a <vTaskStartScheduler+0xa6>
}
 800f12c:	bf00      	nop
 800f12e:	3718      	adds	r7, #24
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	0801573c 	.word	0x0801573c
 800f138:	0800f755 	.word	0x0800f755
 800f13c:	20000ef0 	.word	0x20000ef0
 800f140:	20000eec 	.word	0x20000eec
 800f144:	20000ed8 	.word	0x20000ed8
 800f148:	20000ed0 	.word	0x20000ed0

0800f14c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f14c:	b480      	push	{r7}
 800f14e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f150:	4b04      	ldr	r3, [pc, #16]	; (800f164 <vTaskSuspendAll+0x18>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	4a03      	ldr	r2, [pc, #12]	; (800f164 <vTaskSuspendAll+0x18>)
 800f158:	6013      	str	r3, [r2, #0]
}
 800f15a:	bf00      	nop
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bc80      	pop	{r7}
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	20000ef4 	.word	0x20000ef4

0800f168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f16e:	2300      	movs	r3, #0
 800f170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f172:	2300      	movs	r3, #0
 800f174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f176:	4b41      	ldr	r3, [pc, #260]	; (800f27c <xTaskResumeAll+0x114>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d109      	bne.n	800f192 <xTaskResumeAll+0x2a>
 800f17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f182:	f383 8811 	msr	BASEPRI, r3
 800f186:	f3bf 8f6f 	isb	sy
 800f18a:	f3bf 8f4f 	dsb	sy
 800f18e:	603b      	str	r3, [r7, #0]
 800f190:	e7fe      	b.n	800f190 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f192:	f001 f889 	bl	80102a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f196:	4b39      	ldr	r3, [pc, #228]	; (800f27c <xTaskResumeAll+0x114>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3b01      	subs	r3, #1
 800f19c:	4a37      	ldr	r2, [pc, #220]	; (800f27c <xTaskResumeAll+0x114>)
 800f19e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1a0:	4b36      	ldr	r3, [pc, #216]	; (800f27c <xTaskResumeAll+0x114>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d162      	bne.n	800f26e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1a8:	4b35      	ldr	r3, [pc, #212]	; (800f280 <xTaskResumeAll+0x118>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d05e      	beq.n	800f26e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1b0:	e02f      	b.n	800f212 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f1b2:	4b34      	ldr	r3, [pc, #208]	; (800f284 <xTaskResumeAll+0x11c>)
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3318      	adds	r3, #24
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff f810 	bl	800e1e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7ff f80b 	bl	800e1e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1d2:	4b2d      	ldr	r3, [pc, #180]	; (800f288 <xTaskResumeAll+0x120>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d903      	bls.n	800f1e2 <xTaskResumeAll+0x7a>
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1de:	4a2a      	ldr	r2, [pc, #168]	; (800f288 <xTaskResumeAll+0x120>)
 800f1e0:	6013      	str	r3, [r2, #0]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	4413      	add	r3, r2
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	4a27      	ldr	r2, [pc, #156]	; (800f28c <xTaskResumeAll+0x124>)
 800f1f0:	441a      	add	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3304      	adds	r3, #4
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	f7fe ff98 	bl	800e12e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f202:	4b23      	ldr	r3, [pc, #140]	; (800f290 <xTaskResumeAll+0x128>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f208:	429a      	cmp	r2, r3
 800f20a:	d302      	bcc.n	800f212 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f20c:	4b21      	ldr	r3, [pc, #132]	; (800f294 <xTaskResumeAll+0x12c>)
 800f20e:	2201      	movs	r2, #1
 800f210:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f212:	4b1c      	ldr	r3, [pc, #112]	; (800f284 <xTaskResumeAll+0x11c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d1cb      	bne.n	800f1b2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d001      	beq.n	800f224 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f220:	f000 fb4a 	bl	800f8b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f224:	4b1c      	ldr	r3, [pc, #112]	; (800f298 <xTaskResumeAll+0x130>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d010      	beq.n	800f252 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f230:	f000 f844 	bl	800f2bc <xTaskIncrementTick>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d002      	beq.n	800f240 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f23a:	4b16      	ldr	r3, [pc, #88]	; (800f294 <xTaskResumeAll+0x12c>)
 800f23c:	2201      	movs	r2, #1
 800f23e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	3b01      	subs	r3, #1
 800f244:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1f1      	bne.n	800f230 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f24c:	4b12      	ldr	r3, [pc, #72]	; (800f298 <xTaskResumeAll+0x130>)
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f252:	4b10      	ldr	r3, [pc, #64]	; (800f294 <xTaskResumeAll+0x12c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d009      	beq.n	800f26e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f25a:	2301      	movs	r3, #1
 800f25c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f25e:	4b0f      	ldr	r3, [pc, #60]	; (800f29c <xTaskResumeAll+0x134>)
 800f260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f26e:	f001 f849 	bl	8010304 <vPortExitCritical>

	return xAlreadyYielded;
 800f272:	68bb      	ldr	r3, [r7, #8]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3710      	adds	r7, #16
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	20000ef4 	.word	0x20000ef4
 800f280:	20000ecc 	.word	0x20000ecc
 800f284:	20000e8c 	.word	0x20000e8c
 800f288:	20000ed4 	.word	0x20000ed4
 800f28c:	200009fc 	.word	0x200009fc
 800f290:	200009f8 	.word	0x200009f8
 800f294:	20000ee0 	.word	0x20000ee0
 800f298:	20000edc 	.word	0x20000edc
 800f29c:	e000ed04 	.word	0xe000ed04

0800f2a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2a6:	4b04      	ldr	r3, [pc, #16]	; (800f2b8 <xTaskGetTickCount+0x18>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2ac:	687b      	ldr	r3, [r7, #4]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bc80      	pop	{r7}
 800f2b6:	4770      	bx	lr
 800f2b8:	20000ed0 	.word	0x20000ed0

0800f2bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2c6:	4b51      	ldr	r3, [pc, #324]	; (800f40c <xTaskIncrementTick+0x150>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f040 808d 	bne.w	800f3ea <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f2d0:	4b4f      	ldr	r3, [pc, #316]	; (800f410 <xTaskIncrementTick+0x154>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f2d8:	4a4d      	ldr	r2, [pc, #308]	; (800f410 <xTaskIncrementTick+0x154>)
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d11f      	bne.n	800f324 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f2e4:	4b4b      	ldr	r3, [pc, #300]	; (800f414 <xTaskIncrementTick+0x158>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d009      	beq.n	800f302 <xTaskIncrementTick+0x46>
 800f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	603b      	str	r3, [r7, #0]
 800f300:	e7fe      	b.n	800f300 <xTaskIncrementTick+0x44>
 800f302:	4b44      	ldr	r3, [pc, #272]	; (800f414 <xTaskIncrementTick+0x158>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	60fb      	str	r3, [r7, #12]
 800f308:	4b43      	ldr	r3, [pc, #268]	; (800f418 <xTaskIncrementTick+0x15c>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a41      	ldr	r2, [pc, #260]	; (800f414 <xTaskIncrementTick+0x158>)
 800f30e:	6013      	str	r3, [r2, #0]
 800f310:	4a41      	ldr	r2, [pc, #260]	; (800f418 <xTaskIncrementTick+0x15c>)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6013      	str	r3, [r2, #0]
 800f316:	4b41      	ldr	r3, [pc, #260]	; (800f41c <xTaskIncrementTick+0x160>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	3301      	adds	r3, #1
 800f31c:	4a3f      	ldr	r2, [pc, #252]	; (800f41c <xTaskIncrementTick+0x160>)
 800f31e:	6013      	str	r3, [r2, #0]
 800f320:	f000 faca 	bl	800f8b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f324:	4b3e      	ldr	r3, [pc, #248]	; (800f420 <xTaskIncrementTick+0x164>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	693a      	ldr	r2, [r7, #16]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d34e      	bcc.n	800f3cc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f32e:	4b39      	ldr	r3, [pc, #228]	; (800f414 <xTaskIncrementTick+0x158>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d101      	bne.n	800f33c <xTaskIncrementTick+0x80>
 800f338:	2301      	movs	r3, #1
 800f33a:	e000      	b.n	800f33e <xTaskIncrementTick+0x82>
 800f33c:	2300      	movs	r3, #0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d004      	beq.n	800f34c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f342:	4b37      	ldr	r3, [pc, #220]	; (800f420 <xTaskIncrementTick+0x164>)
 800f344:	f04f 32ff 	mov.w	r2, #4294967295
 800f348:	601a      	str	r2, [r3, #0]
					break;
 800f34a:	e03f      	b.n	800f3cc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f34c:	4b31      	ldr	r3, [pc, #196]	; (800f414 <xTaskIncrementTick+0x158>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f35c:	693a      	ldr	r2, [r7, #16]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	429a      	cmp	r2, r3
 800f362:	d203      	bcs.n	800f36c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f364:	4a2e      	ldr	r2, [pc, #184]	; (800f420 <xTaskIncrementTick+0x164>)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6013      	str	r3, [r2, #0]
						break;
 800f36a:	e02f      	b.n	800f3cc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	3304      	adds	r3, #4
 800f370:	4618      	mov	r0, r3
 800f372:	f7fe ff37 	bl	800e1e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d004      	beq.n	800f388 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	3318      	adds	r3, #24
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe ff2e 	bl	800e1e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f38c:	4b25      	ldr	r3, [pc, #148]	; (800f424 <xTaskIncrementTick+0x168>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	429a      	cmp	r2, r3
 800f392:	d903      	bls.n	800f39c <xTaskIncrementTick+0xe0>
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f398:	4a22      	ldr	r2, [pc, #136]	; (800f424 <xTaskIncrementTick+0x168>)
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3a0:	4613      	mov	r3, r2
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	009b      	lsls	r3, r3, #2
 800f3a8:	4a1f      	ldr	r2, [pc, #124]	; (800f428 <xTaskIncrementTick+0x16c>)
 800f3aa:	441a      	add	r2, r3
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	3304      	adds	r3, #4
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	f7fe febb 	bl	800e12e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3bc:	4b1b      	ldr	r3, [pc, #108]	; (800f42c <xTaskIncrementTick+0x170>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d3b3      	bcc.n	800f32e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3ca:	e7b0      	b.n	800f32e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f3cc:	4b17      	ldr	r3, [pc, #92]	; (800f42c <xTaskIncrementTick+0x170>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3d2:	4915      	ldr	r1, [pc, #84]	; (800f428 <xTaskIncrementTick+0x16c>)
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4413      	add	r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	440b      	add	r3, r1
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d907      	bls.n	800f3f4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	617b      	str	r3, [r7, #20]
 800f3e8:	e004      	b.n	800f3f4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f3ea:	4b11      	ldr	r3, [pc, #68]	; (800f430 <xTaskIncrementTick+0x174>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	4a0f      	ldr	r2, [pc, #60]	; (800f430 <xTaskIncrementTick+0x174>)
 800f3f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f3f4:	4b0f      	ldr	r3, [pc, #60]	; (800f434 <xTaskIncrementTick+0x178>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d001      	beq.n	800f400 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f400:	697b      	ldr	r3, [r7, #20]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	20000ef4 	.word	0x20000ef4
 800f410:	20000ed0 	.word	0x20000ed0
 800f414:	20000e84 	.word	0x20000e84
 800f418:	20000e88 	.word	0x20000e88
 800f41c:	20000ee4 	.word	0x20000ee4
 800f420:	20000eec 	.word	0x20000eec
 800f424:	20000ed4 	.word	0x20000ed4
 800f428:	200009fc 	.word	0x200009fc
 800f42c:	200009f8 	.word	0x200009f8
 800f430:	20000edc 	.word	0x20000edc
 800f434:	20000ee0 	.word	0x20000ee0

0800f438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f43e:	4b27      	ldr	r3, [pc, #156]	; (800f4dc <vTaskSwitchContext+0xa4>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d003      	beq.n	800f44e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f446:	4b26      	ldr	r3, [pc, #152]	; (800f4e0 <vTaskSwitchContext+0xa8>)
 800f448:	2201      	movs	r2, #1
 800f44a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f44c:	e040      	b.n	800f4d0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f44e:	4b24      	ldr	r3, [pc, #144]	; (800f4e0 <vTaskSwitchContext+0xa8>)
 800f450:	2200      	movs	r2, #0
 800f452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f454:	4b23      	ldr	r3, [pc, #140]	; (800f4e4 <vTaskSwitchContext+0xac>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e00f      	b.n	800f47c <vTaskSwitchContext+0x44>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d109      	bne.n	800f476 <vTaskSwitchContext+0x3e>
 800f462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	607b      	str	r3, [r7, #4]
 800f474:	e7fe      	b.n	800f474 <vTaskSwitchContext+0x3c>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	3b01      	subs	r3, #1
 800f47a:	60fb      	str	r3, [r7, #12]
 800f47c:	491a      	ldr	r1, [pc, #104]	; (800f4e8 <vTaskSwitchContext+0xb0>)
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	4613      	mov	r3, r2
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	4413      	add	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	440b      	add	r3, r1
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d0e5      	beq.n	800f45c <vTaskSwitchContext+0x24>
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	4613      	mov	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4413      	add	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4a13      	ldr	r2, [pc, #76]	; (800f4e8 <vTaskSwitchContext+0xb0>)
 800f49c:	4413      	add	r3, r2
 800f49e:	60bb      	str	r3, [r7, #8]
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	685a      	ldr	r2, [r3, #4]
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	605a      	str	r2, [r3, #4]
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d104      	bne.n	800f4c0 <vTaskSwitchContext+0x88>
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	605a      	str	r2, [r3, #4]
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	4a09      	ldr	r2, [pc, #36]	; (800f4ec <vTaskSwitchContext+0xb4>)
 800f4c8:	6013      	str	r3, [r2, #0]
 800f4ca:	4a06      	ldr	r2, [pc, #24]	; (800f4e4 <vTaskSwitchContext+0xac>)
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	6013      	str	r3, [r2, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	3714      	adds	r7, #20
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bc80      	pop	{r7}
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	20000ef4 	.word	0x20000ef4
 800f4e0:	20000ee0 	.word	0x20000ee0
 800f4e4:	20000ed4 	.word	0x20000ed4
 800f4e8:	200009fc 	.word	0x200009fc
 800f4ec:	200009f8 	.word	0x200009f8

0800f4f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d109      	bne.n	800f514 <vTaskPlaceOnEventList+0x24>
 800f500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f504:	f383 8811 	msr	BASEPRI, r3
 800f508:	f3bf 8f6f 	isb	sy
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	60fb      	str	r3, [r7, #12]
 800f512:	e7fe      	b.n	800f512 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f514:	4b07      	ldr	r3, [pc, #28]	; (800f534 <vTaskPlaceOnEventList+0x44>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	3318      	adds	r3, #24
 800f51a:	4619      	mov	r1, r3
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7fe fe29 	bl	800e174 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f522:	2101      	movs	r1, #1
 800f524:	6838      	ldr	r0, [r7, #0]
 800f526:	f000 fa75 	bl	800fa14 <prvAddCurrentTaskToDelayedList>
}
 800f52a:	bf00      	nop
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	200009f8 	.word	0x200009f8

0800f538 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d109      	bne.n	800f55e <vTaskPlaceOnEventListRestricted+0x26>
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	e7fe      	b.n	800f55c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f55e:	4b0a      	ldr	r3, [pc, #40]	; (800f588 <vTaskPlaceOnEventListRestricted+0x50>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	3318      	adds	r3, #24
 800f564:	4619      	mov	r1, r3
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f7fe fde1 	bl	800e12e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d002      	beq.n	800f578 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800f572:	f04f 33ff 	mov.w	r3, #4294967295
 800f576:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f578:	6879      	ldr	r1, [r7, #4]
 800f57a:	68b8      	ldr	r0, [r7, #8]
 800f57c:	f000 fa4a 	bl	800fa14 <prvAddCurrentTaskToDelayedList>
	}
 800f580:	bf00      	nop
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	200009f8 	.word	0x200009f8

0800f58c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d109      	bne.n	800f5b6 <xTaskRemoveFromEventList+0x2a>
 800f5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a6:	f383 8811 	msr	BASEPRI, r3
 800f5aa:	f3bf 8f6f 	isb	sy
 800f5ae:	f3bf 8f4f 	dsb	sy
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	e7fe      	b.n	800f5b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	3318      	adds	r3, #24
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fe fe12 	bl	800e1e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5c0:	4b1d      	ldr	r3, [pc, #116]	; (800f638 <xTaskRemoveFromEventList+0xac>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d11d      	bne.n	800f604 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fe09 	bl	800e1e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5d6:	4b19      	ldr	r3, [pc, #100]	; (800f63c <xTaskRemoveFromEventList+0xb0>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d903      	bls.n	800f5e6 <xTaskRemoveFromEventList+0x5a>
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e2:	4a16      	ldr	r2, [pc, #88]	; (800f63c <xTaskRemoveFromEventList+0xb0>)
 800f5e4:	6013      	str	r3, [r2, #0]
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	4413      	add	r3, r2
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	4a13      	ldr	r2, [pc, #76]	; (800f640 <xTaskRemoveFromEventList+0xb4>)
 800f5f4:	441a      	add	r2, r3
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	3304      	adds	r3, #4
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	4610      	mov	r0, r2
 800f5fe:	f7fe fd96 	bl	800e12e <vListInsertEnd>
 800f602:	e005      	b.n	800f610 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	3318      	adds	r3, #24
 800f608:	4619      	mov	r1, r3
 800f60a:	480e      	ldr	r0, [pc, #56]	; (800f644 <xTaskRemoveFromEventList+0xb8>)
 800f60c:	f7fe fd8f 	bl	800e12e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f614:	4b0c      	ldr	r3, [pc, #48]	; (800f648 <xTaskRemoveFromEventList+0xbc>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d905      	bls.n	800f62a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f61e:	2301      	movs	r3, #1
 800f620:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f622:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <xTaskRemoveFromEventList+0xc0>)
 800f624:	2201      	movs	r2, #1
 800f626:	601a      	str	r2, [r3, #0]
 800f628:	e001      	b.n	800f62e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f62a:	2300      	movs	r3, #0
 800f62c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800f62e:	697b      	ldr	r3, [r7, #20]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	20000ef4 	.word	0x20000ef4
 800f63c:	20000ed4 	.word	0x20000ed4
 800f640:	200009fc 	.word	0x200009fc
 800f644:	20000e8c 	.word	0x20000e8c
 800f648:	200009f8 	.word	0x200009f8
 800f64c:	20000ee0 	.word	0x20000ee0

0800f650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f658:	4b06      	ldr	r3, [pc, #24]	; (800f674 <vTaskInternalSetTimeOutState+0x24>)
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f660:	4b05      	ldr	r3, [pc, #20]	; (800f678 <vTaskInternalSetTimeOutState+0x28>)
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	605a      	str	r2, [r3, #4]
}
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bc80      	pop	{r7}
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	20000ee4 	.word	0x20000ee4
 800f678:	20000ed0 	.word	0x20000ed0

0800f67c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b088      	sub	sp, #32
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d109      	bne.n	800f6a0 <xTaskCheckForTimeOut+0x24>
 800f68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	613b      	str	r3, [r7, #16]
 800f69e:	e7fe      	b.n	800f69e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d109      	bne.n	800f6ba <xTaskCheckForTimeOut+0x3e>
 800f6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6aa:	f383 8811 	msr	BASEPRI, r3
 800f6ae:	f3bf 8f6f 	isb	sy
 800f6b2:	f3bf 8f4f 	dsb	sy
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	e7fe      	b.n	800f6b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f6ba:	f000 fdf5 	bl	80102a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f6be:	4b1d      	ldr	r3, [pc, #116]	; (800f734 <xTaskCheckForTimeOut+0xb8>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	69ba      	ldr	r2, [r7, #24]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d6:	d102      	bne.n	800f6de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	61fb      	str	r3, [r7, #28]
 800f6dc:	e023      	b.n	800f726 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	4b15      	ldr	r3, [pc, #84]	; (800f738 <xTaskCheckForTimeOut+0xbc>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d007      	beq.n	800f6fa <xTaskCheckForTimeOut+0x7e>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	69ba      	ldr	r2, [r7, #24]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d302      	bcc.n	800f6fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	61fb      	str	r3, [r7, #28]
 800f6f8:	e015      	b.n	800f726 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	697a      	ldr	r2, [r7, #20]
 800f700:	429a      	cmp	r2, r3
 800f702:	d20b      	bcs.n	800f71c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	1ad2      	subs	r2, r2, r3
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7ff ff9d 	bl	800f650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f716:	2300      	movs	r3, #0
 800f718:	61fb      	str	r3, [r7, #28]
 800f71a:	e004      	b.n	800f726 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2200      	movs	r2, #0
 800f720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f722:	2301      	movs	r3, #1
 800f724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f726:	f000 fded 	bl	8010304 <vPortExitCritical>

	return xReturn;
 800f72a:	69fb      	ldr	r3, [r7, #28]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3720      	adds	r7, #32
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	20000ed0 	.word	0x20000ed0
 800f738:	20000ee4 	.word	0x20000ee4

0800f73c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f740:	4b03      	ldr	r3, [pc, #12]	; (800f750 <vTaskMissedYield+0x14>)
 800f742:	2201      	movs	r2, #1
 800f744:	601a      	str	r2, [r3, #0]
}
 800f746:	bf00      	nop
 800f748:	46bd      	mov	sp, r7
 800f74a:	bc80      	pop	{r7}
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	20000ee0 	.word	0x20000ee0

0800f754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f75c:	f000 f852 	bl	800f804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f760:	4b06      	ldr	r3, [pc, #24]	; (800f77c <prvIdleTask+0x28>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d9f9      	bls.n	800f75c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f768:	4b05      	ldr	r3, [pc, #20]	; (800f780 <prvIdleTask+0x2c>)
 800f76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f76e:	601a      	str	r2, [r3, #0]
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f778:	e7f0      	b.n	800f75c <prvIdleTask+0x8>
 800f77a:	bf00      	nop
 800f77c:	200009fc 	.word	0x200009fc
 800f780:	e000ed04 	.word	0xe000ed04

0800f784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f78a:	2300      	movs	r3, #0
 800f78c:	607b      	str	r3, [r7, #4]
 800f78e:	e00c      	b.n	800f7aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	4613      	mov	r3, r2
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	4413      	add	r3, r2
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	4a12      	ldr	r2, [pc, #72]	; (800f7e4 <prvInitialiseTaskLists+0x60>)
 800f79c:	4413      	add	r3, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fe fc9a 	bl	800e0d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	607b      	str	r3, [r7, #4]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2b37      	cmp	r3, #55	; 0x37
 800f7ae:	d9ef      	bls.n	800f790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f7b0:	480d      	ldr	r0, [pc, #52]	; (800f7e8 <prvInitialiseTaskLists+0x64>)
 800f7b2:	f7fe fc91 	bl	800e0d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f7b6:	480d      	ldr	r0, [pc, #52]	; (800f7ec <prvInitialiseTaskLists+0x68>)
 800f7b8:	f7fe fc8e 	bl	800e0d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f7bc:	480c      	ldr	r0, [pc, #48]	; (800f7f0 <prvInitialiseTaskLists+0x6c>)
 800f7be:	f7fe fc8b 	bl	800e0d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f7c2:	480c      	ldr	r0, [pc, #48]	; (800f7f4 <prvInitialiseTaskLists+0x70>)
 800f7c4:	f7fe fc88 	bl	800e0d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f7c8:	480b      	ldr	r0, [pc, #44]	; (800f7f8 <prvInitialiseTaskLists+0x74>)
 800f7ca:	f7fe fc85 	bl	800e0d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f7ce:	4b0b      	ldr	r3, [pc, #44]	; (800f7fc <prvInitialiseTaskLists+0x78>)
 800f7d0:	4a05      	ldr	r2, [pc, #20]	; (800f7e8 <prvInitialiseTaskLists+0x64>)
 800f7d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f7d4:	4b0a      	ldr	r3, [pc, #40]	; (800f800 <prvInitialiseTaskLists+0x7c>)
 800f7d6:	4a05      	ldr	r2, [pc, #20]	; (800f7ec <prvInitialiseTaskLists+0x68>)
 800f7d8:	601a      	str	r2, [r3, #0]
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	200009fc 	.word	0x200009fc
 800f7e8:	20000e5c 	.word	0x20000e5c
 800f7ec:	20000e70 	.word	0x20000e70
 800f7f0:	20000e8c 	.word	0x20000e8c
 800f7f4:	20000ea0 	.word	0x20000ea0
 800f7f8:	20000eb8 	.word	0x20000eb8
 800f7fc:	20000e84 	.word	0x20000e84
 800f800:	20000e88 	.word	0x20000e88

0800f804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f80a:	e019      	b.n	800f840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f80c:	f000 fd4c 	bl	80102a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f810:	4b0f      	ldr	r3, [pc, #60]	; (800f850 <prvCheckTasksWaitingTermination+0x4c>)
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe fce1 	bl	800e1e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f822:	4b0c      	ldr	r3, [pc, #48]	; (800f854 <prvCheckTasksWaitingTermination+0x50>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3b01      	subs	r3, #1
 800f828:	4a0a      	ldr	r2, [pc, #40]	; (800f854 <prvCheckTasksWaitingTermination+0x50>)
 800f82a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f82c:	4b0a      	ldr	r3, [pc, #40]	; (800f858 <prvCheckTasksWaitingTermination+0x54>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	3b01      	subs	r3, #1
 800f832:	4a09      	ldr	r2, [pc, #36]	; (800f858 <prvCheckTasksWaitingTermination+0x54>)
 800f834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f836:	f000 fd65 	bl	8010304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f80e 	bl	800f85c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f840:	4b05      	ldr	r3, [pc, #20]	; (800f858 <prvCheckTasksWaitingTermination+0x54>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1e1      	bne.n	800f80c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f848:	bf00      	nop
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	20000ea0 	.word	0x20000ea0
 800f854:	20000ecc 	.word	0x20000ecc
 800f858:	20000eb4 	.word	0x20000eb4

0800f85c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d108      	bne.n	800f880 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f872:	4618      	mov	r0, r3
 800f874:	f000 fed0 	bl	8010618 <vPortFree>
				vPortFree( pxTCB );
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fecd 	bl	8010618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f87e:	e017      	b.n	800f8b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f886:	2b01      	cmp	r3, #1
 800f888:	d103      	bne.n	800f892 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 fec4 	bl	8010618 <vPortFree>
	}
 800f890:	e00e      	b.n	800f8b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f898:	2b02      	cmp	r3, #2
 800f89a:	d009      	beq.n	800f8b0 <prvDeleteTCB+0x54>
 800f89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a0:	f383 8811 	msr	BASEPRI, r3
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	60fb      	str	r3, [r7, #12]
 800f8ae:	e7fe      	b.n	800f8ae <prvDeleteTCB+0x52>
	}
 800f8b0:	bf00      	nop
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8be:	4b0e      	ldr	r3, [pc, #56]	; (800f8f8 <prvResetNextTaskUnblockTime+0x40>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <prvResetNextTaskUnblockTime+0x14>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e000      	b.n	800f8ce <prvResetNextTaskUnblockTime+0x16>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d004      	beq.n	800f8dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f8d2:	4b0a      	ldr	r3, [pc, #40]	; (800f8fc <prvResetNextTaskUnblockTime+0x44>)
 800f8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f8da:	e008      	b.n	800f8ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f8dc:	4b06      	ldr	r3, [pc, #24]	; (800f8f8 <prvResetNextTaskUnblockTime+0x40>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	4a04      	ldr	r2, [pc, #16]	; (800f8fc <prvResetNextTaskUnblockTime+0x44>)
 800f8ec:	6013      	str	r3, [r2, #0]
}
 800f8ee:	bf00      	nop
 800f8f0:	370c      	adds	r7, #12
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bc80      	pop	{r7}
 800f8f6:	4770      	bx	lr
 800f8f8:	20000e84 	.word	0x20000e84
 800f8fc:	20000eec 	.word	0x20000eec

0800f900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f906:	4b0b      	ldr	r3, [pc, #44]	; (800f934 <xTaskGetSchedulerState+0x34>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d102      	bne.n	800f914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f90e:	2301      	movs	r3, #1
 800f910:	607b      	str	r3, [r7, #4]
 800f912:	e008      	b.n	800f926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f914:	4b08      	ldr	r3, [pc, #32]	; (800f938 <xTaskGetSchedulerState+0x38>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d102      	bne.n	800f922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f91c:	2302      	movs	r3, #2
 800f91e:	607b      	str	r3, [r7, #4]
 800f920:	e001      	b.n	800f926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f922:	2300      	movs	r3, #0
 800f924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f926:	687b      	ldr	r3, [r7, #4]
	}
 800f928:	4618      	mov	r0, r3
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bc80      	pop	{r7}
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	20000ed8 	.word	0x20000ed8
 800f938:	20000ef4 	.word	0x20000ef4

0800f93c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b086      	sub	sp, #24
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f948:	2300      	movs	r3, #0
 800f94a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d054      	beq.n	800f9fc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f952:	4b2d      	ldr	r3, [pc, #180]	; (800fa08 <xTaskPriorityDisinherit+0xcc>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d009      	beq.n	800f970 <xTaskPriorityDisinherit+0x34>
 800f95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f960:	f383 8811 	msr	BASEPRI, r3
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	60fb      	str	r3, [r7, #12]
 800f96e:	e7fe      	b.n	800f96e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f974:	2b00      	cmp	r3, #0
 800f976:	d109      	bne.n	800f98c <xTaskPriorityDisinherit+0x50>
 800f978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97c:	f383 8811 	msr	BASEPRI, r3
 800f980:	f3bf 8f6f 	isb	sy
 800f984:	f3bf 8f4f 	dsb	sy
 800f988:	60bb      	str	r3, [r7, #8]
 800f98a:	e7fe      	b.n	800f98a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f990:	1e5a      	subs	r2, r3, #1
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d02c      	beq.n	800f9fc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d128      	bne.n	800f9fc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	3304      	adds	r3, #4
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fe fc18 	bl	800e1e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9cc:	4b0f      	ldr	r3, [pc, #60]	; (800fa0c <xTaskPriorityDisinherit+0xd0>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d903      	bls.n	800f9dc <xTaskPriorityDisinherit+0xa0>
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d8:	4a0c      	ldr	r2, [pc, #48]	; (800fa0c <xTaskPriorityDisinherit+0xd0>)
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	4413      	add	r3, r2
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	4a09      	ldr	r2, [pc, #36]	; (800fa10 <xTaskPriorityDisinherit+0xd4>)
 800f9ea:	441a      	add	r2, r3
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	3304      	adds	r3, #4
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	f7fe fb9b 	bl	800e12e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f9fc:	697b      	ldr	r3, [r7, #20]
	}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3718      	adds	r7, #24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	200009f8 	.word	0x200009f8
 800fa0c:	20000ed4 	.word	0x20000ed4
 800fa10:	200009fc 	.word	0x200009fc

0800fa14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fa1e:	4b21      	ldr	r3, [pc, #132]	; (800faa4 <prvAddCurrentTaskToDelayedList+0x90>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa24:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	3304      	adds	r3, #4
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fe fbda 	bl	800e1e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa36:	d10a      	bne.n	800fa4e <prvAddCurrentTaskToDelayedList+0x3a>
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d007      	beq.n	800fa4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa3e:	4b1a      	ldr	r3, [pc, #104]	; (800faa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3304      	adds	r3, #4
 800fa44:	4619      	mov	r1, r3
 800fa46:	4819      	ldr	r0, [pc, #100]	; (800faac <prvAddCurrentTaskToDelayedList+0x98>)
 800fa48:	f7fe fb71 	bl	800e12e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fa4c:	e026      	b.n	800fa9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4413      	add	r3, r2
 800fa54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fa56:	4b14      	ldr	r3, [pc, #80]	; (800faa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fa5e:	68ba      	ldr	r2, [r7, #8]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d209      	bcs.n	800fa7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa66:	4b12      	ldr	r3, [pc, #72]	; (800fab0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	4b0f      	ldr	r3, [pc, #60]	; (800faa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	3304      	adds	r3, #4
 800fa70:	4619      	mov	r1, r3
 800fa72:	4610      	mov	r0, r2
 800fa74:	f7fe fb7e 	bl	800e174 <vListInsert>
}
 800fa78:	e010      	b.n	800fa9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa7a:	4b0e      	ldr	r3, [pc, #56]	; (800fab4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	4b0a      	ldr	r3, [pc, #40]	; (800faa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3304      	adds	r3, #4
 800fa84:	4619      	mov	r1, r3
 800fa86:	4610      	mov	r0, r2
 800fa88:	f7fe fb74 	bl	800e174 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa8c:	4b0a      	ldr	r3, [pc, #40]	; (800fab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d202      	bcs.n	800fa9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fa96:	4a08      	ldr	r2, [pc, #32]	; (800fab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	6013      	str	r3, [r2, #0]
}
 800fa9c:	bf00      	nop
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20000ed0 	.word	0x20000ed0
 800faa8:	200009f8 	.word	0x200009f8
 800faac:	20000eb8 	.word	0x20000eb8
 800fab0:	20000e88 	.word	0x20000e88
 800fab4:	20000e84 	.word	0x20000e84
 800fab8:	20000eec 	.word	0x20000eec

0800fabc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b08a      	sub	sp, #40	; 0x28
 800fac0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fac2:	2300      	movs	r3, #0
 800fac4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fac6:	f000 fac3 	bl	8010050 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800faca:	4b1c      	ldr	r3, [pc, #112]	; (800fb3c <xTimerCreateTimerTask+0x80>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d021      	beq.n	800fb16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fad2:	2300      	movs	r3, #0
 800fad4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fad6:	2300      	movs	r3, #0
 800fad8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fada:	1d3a      	adds	r2, r7, #4
 800fadc:	f107 0108 	add.w	r1, r7, #8
 800fae0:	f107 030c 	add.w	r3, r7, #12
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe fadd 	bl	800e0a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800faea:	6879      	ldr	r1, [r7, #4]
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	9202      	str	r2, [sp, #8]
 800faf2:	9301      	str	r3, [sp, #4]
 800faf4:	2302      	movs	r3, #2
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	2300      	movs	r3, #0
 800fafa:	460a      	mov	r2, r1
 800fafc:	4910      	ldr	r1, [pc, #64]	; (800fb40 <xTimerCreateTimerTask+0x84>)
 800fafe:	4811      	ldr	r0, [pc, #68]	; (800fb44 <xTimerCreateTimerTask+0x88>)
 800fb00:	f7ff f8f8 	bl	800ecf4 <xTaskCreateStatic>
 800fb04:	4602      	mov	r2, r0
 800fb06:	4b10      	ldr	r3, [pc, #64]	; (800fb48 <xTimerCreateTimerTask+0x8c>)
 800fb08:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fb0a:	4b0f      	ldr	r3, [pc, #60]	; (800fb48 <xTimerCreateTimerTask+0x8c>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fb12:	2301      	movs	r3, #1
 800fb14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d109      	bne.n	800fb30 <xTimerCreateTimerTask+0x74>
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	613b      	str	r3, [r7, #16]
 800fb2e:	e7fe      	b.n	800fb2e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800fb30:	697b      	ldr	r3, [r7, #20]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3718      	adds	r7, #24
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20000f28 	.word	0x20000f28
 800fb40:	08015744 	.word	0x08015744
 800fb44:	0800fc65 	.word	0x0800fc65
 800fb48:	20000f2c 	.word	0x20000f2c

0800fb4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b08a      	sub	sp, #40	; 0x28
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d109      	bne.n	800fb78 <xTimerGenericCommand+0x2c>
 800fb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb68:	f383 8811 	msr	BASEPRI, r3
 800fb6c:	f3bf 8f6f 	isb	sy
 800fb70:	f3bf 8f4f 	dsb	sy
 800fb74:	623b      	str	r3, [r7, #32]
 800fb76:	e7fe      	b.n	800fb76 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fb78:	4b19      	ldr	r3, [pc, #100]	; (800fbe0 <xTimerGenericCommand+0x94>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d02a      	beq.n	800fbd6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2b05      	cmp	r3, #5
 800fb90:	dc18      	bgt.n	800fbc4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fb92:	f7ff feb5 	bl	800f900 <xTaskGetSchedulerState>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d109      	bne.n	800fbb0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fb9c:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <xTimerGenericCommand+0x94>)
 800fb9e:	6818      	ldr	r0, [r3, #0]
 800fba0:	f107 0110 	add.w	r1, r7, #16
 800fba4:	2300      	movs	r3, #0
 800fba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fba8:	f7fe fcce 	bl	800e548 <xQueueGenericSend>
 800fbac:	6278      	str	r0, [r7, #36]	; 0x24
 800fbae:	e012      	b.n	800fbd6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fbb0:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <xTimerGenericCommand+0x94>)
 800fbb2:	6818      	ldr	r0, [r3, #0]
 800fbb4:	f107 0110 	add.w	r1, r7, #16
 800fbb8:	2300      	movs	r3, #0
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f7fe fcc4 	bl	800e548 <xQueueGenericSend>
 800fbc0:	6278      	str	r0, [r7, #36]	; 0x24
 800fbc2:	e008      	b.n	800fbd6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fbc4:	4b06      	ldr	r3, [pc, #24]	; (800fbe0 <xTimerGenericCommand+0x94>)
 800fbc6:	6818      	ldr	r0, [r3, #0]
 800fbc8:	f107 0110 	add.w	r1, r7, #16
 800fbcc:	2300      	movs	r3, #0
 800fbce:	683a      	ldr	r2, [r7, #0]
 800fbd0:	f7fe fdb4 	bl	800e73c <xQueueGenericSendFromISR>
 800fbd4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3728      	adds	r7, #40	; 0x28
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	20000f28 	.word	0x20000f28

0800fbe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b088      	sub	sp, #32
 800fbe8:	af02      	add	r7, sp, #8
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbee:	4b1c      	ldr	r3, [pc, #112]	; (800fc60 <prvProcessExpiredTimer+0x7c>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	3304      	adds	r3, #4
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe faf1 	bl	800e1e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	69db      	ldr	r3, [r3, #28]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d121      	bne.n	800fc4e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	699a      	ldr	r2, [r3, #24]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	18d1      	adds	r1, r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	683a      	ldr	r2, [r7, #0]
 800fc16:	6978      	ldr	r0, [r7, #20]
 800fc18:	f000 f8c8 	bl	800fdac <prvInsertTimerInActiveList>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d015      	beq.n	800fc4e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc22:	2300      	movs	r3, #0
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	2300      	movs	r3, #0
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	6978      	ldr	r0, [r7, #20]
 800fc2e:	f7ff ff8d 	bl	800fb4c <xTimerGenericCommand>
 800fc32:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d109      	bne.n	800fc4e <prvProcessExpiredTimer+0x6a>
 800fc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	60fb      	str	r3, [r7, #12]
 800fc4c:	e7fe      	b.n	800fc4c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc52:	6978      	ldr	r0, [r7, #20]
 800fc54:	4798      	blx	r3
}
 800fc56:	bf00      	nop
 800fc58:	3718      	adds	r7, #24
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	20000f20 	.word	0x20000f20

0800fc64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc6c:	f107 0308 	add.w	r3, r7, #8
 800fc70:	4618      	mov	r0, r3
 800fc72:	f000 f857 	bl	800fd24 <prvGetNextExpireTime>
 800fc76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f000 f803 	bl	800fc88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fc82:	f000 f8d5 	bl	800fe30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc86:	e7f1      	b.n	800fc6c <prvTimerTask+0x8>

0800fc88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fc92:	f7ff fa5b 	bl	800f14c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc96:	f107 0308 	add.w	r3, r7, #8
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 f866 	bl	800fd6c <prvSampleTimeNow>
 800fca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d130      	bne.n	800fd0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d10a      	bne.n	800fcc4 <prvProcessTimerOrBlockTask+0x3c>
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d806      	bhi.n	800fcc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fcb6:	f7ff fa57 	bl	800f168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fcba:	68f9      	ldr	r1, [r7, #12]
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff ff91 	bl	800fbe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fcc2:	e024      	b.n	800fd0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d008      	beq.n	800fcdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fcca:	4b13      	ldr	r3, [pc, #76]	; (800fd18 <prvProcessTimerOrBlockTask+0x90>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	bf0c      	ite	eq
 800fcd4:	2301      	moveq	r3, #1
 800fcd6:	2300      	movne	r3, #0
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fcdc:	4b0f      	ldr	r3, [pc, #60]	; (800fd1c <prvProcessTimerOrBlockTask+0x94>)
 800fcde:	6818      	ldr	r0, [r3, #0]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	683a      	ldr	r2, [r7, #0]
 800fce8:	4619      	mov	r1, r3
 800fcea:	f7fe ffcf 	bl	800ec8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fcee:	f7ff fa3b 	bl	800f168 <xTaskResumeAll>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d10a      	bne.n	800fd0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fcf8:	4b09      	ldr	r3, [pc, #36]	; (800fd20 <prvProcessTimerOrBlockTask+0x98>)
 800fcfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcfe:	601a      	str	r2, [r3, #0]
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	f3bf 8f6f 	isb	sy
}
 800fd08:	e001      	b.n	800fd0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fd0a:	f7ff fa2d 	bl	800f168 <xTaskResumeAll>
}
 800fd0e:	bf00      	nop
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	20000f24 	.word	0x20000f24
 800fd1c:	20000f28 	.word	0x20000f28
 800fd20:	e000ed04 	.word	0xe000ed04

0800fd24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fd2c:	4b0e      	ldr	r3, [pc, #56]	; (800fd68 <prvGetNextExpireTime+0x44>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bf0c      	ite	eq
 800fd36:	2301      	moveq	r3, #1
 800fd38:	2300      	movne	r3, #0
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d105      	bne.n	800fd56 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd4a:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <prvGetNextExpireTime+0x44>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	e001      	b.n	800fd5a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fd56:	2300      	movs	r3, #0
 800fd58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3714      	adds	r7, #20
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bc80      	pop	{r7}
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	20000f20 	.word	0x20000f20

0800fd6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fd74:	f7ff fa94 	bl	800f2a0 <xTaskGetTickCount>
 800fd78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fd7a:	4b0b      	ldr	r3, [pc, #44]	; (800fda8 <prvSampleTimeNow+0x3c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d205      	bcs.n	800fd90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fd84:	f000 f904 	bl	800ff90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	601a      	str	r2, [r3, #0]
 800fd8e:	e002      	b.n	800fd96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2200      	movs	r2, #0
 800fd94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fd96:	4a04      	ldr	r2, [pc, #16]	; (800fda8 <prvSampleTimeNow+0x3c>)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	20000f30 	.word	0x20000f30

0800fdac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
 800fdb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	68ba      	ldr	r2, [r7, #8]
 800fdc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d812      	bhi.n	800fdf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	1ad2      	subs	r2, r2, r3
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	699b      	ldr	r3, [r3, #24]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d302      	bcc.n	800fde6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fde0:	2301      	movs	r3, #1
 800fde2:	617b      	str	r3, [r7, #20]
 800fde4:	e01b      	b.n	800fe1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fde6:	4b10      	ldr	r3, [pc, #64]	; (800fe28 <prvInsertTimerInActiveList+0x7c>)
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3304      	adds	r3, #4
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	f7fe f9bf 	bl	800e174 <vListInsert>
 800fdf6:	e012      	b.n	800fe1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d206      	bcs.n	800fe0e <prvInsertTimerInActiveList+0x62>
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d302      	bcc.n	800fe0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	617b      	str	r3, [r7, #20]
 800fe0c:	e007      	b.n	800fe1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe0e:	4b07      	ldr	r3, [pc, #28]	; (800fe2c <prvInsertTimerInActiveList+0x80>)
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	3304      	adds	r3, #4
 800fe16:	4619      	mov	r1, r3
 800fe18:	4610      	mov	r0, r2
 800fe1a:	f7fe f9ab 	bl	800e174 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fe1e:	697b      	ldr	r3, [r7, #20]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3718      	adds	r7, #24
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	20000f24 	.word	0x20000f24
 800fe2c:	20000f20 	.word	0x20000f20

0800fe30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b08e      	sub	sp, #56	; 0x38
 800fe34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe36:	e099      	b.n	800ff6c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	da17      	bge.n	800fe6e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fe3e:	1d3b      	adds	r3, r7, #4
 800fe40:	3304      	adds	r3, #4
 800fe42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fe44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d109      	bne.n	800fe5e <prvProcessReceivedCommands+0x2e>
 800fe4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4e:	f383 8811 	msr	BASEPRI, r3
 800fe52:	f3bf 8f6f 	isb	sy
 800fe56:	f3bf 8f4f 	dsb	sy
 800fe5a:	61fb      	str	r3, [r7, #28]
 800fe5c:	e7fe      	b.n	800fe5c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe64:	6850      	ldr	r0, [r2, #4]
 800fe66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe68:	6892      	ldr	r2, [r2, #8]
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	db7a      	blt.n	800ff6a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	695b      	ldr	r3, [r3, #20]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d004      	beq.n	800fe8a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	3304      	adds	r3, #4
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe f9ad 	bl	800e1e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe8a:	463b      	mov	r3, r7
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff ff6d 	bl	800fd6c <prvSampleTimeNow>
 800fe92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2b09      	cmp	r3, #9
 800fe98:	d868      	bhi.n	800ff6c <prvProcessReceivedCommands+0x13c>
 800fe9a:	a201      	add	r2, pc, #4	; (adr r2, 800fea0 <prvProcessReceivedCommands+0x70>)
 800fe9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea0:	0800fec9 	.word	0x0800fec9
 800fea4:	0800fec9 	.word	0x0800fec9
 800fea8:	0800fec9 	.word	0x0800fec9
 800feac:	0800ff6d 	.word	0x0800ff6d
 800feb0:	0800ff23 	.word	0x0800ff23
 800feb4:	0800ff59 	.word	0x0800ff59
 800feb8:	0800fec9 	.word	0x0800fec9
 800febc:	0800fec9 	.word	0x0800fec9
 800fec0:	0800ff6d 	.word	0x0800ff6d
 800fec4:	0800ff23 	.word	0x0800ff23
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fecc:	699b      	ldr	r3, [r3, #24]
 800fece:	18d1      	adds	r1, r2, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fed6:	f7ff ff69 	bl	800fdac <prvInsertTimerInActiveList>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d045      	beq.n	800ff6c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fee6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	2b01      	cmp	r3, #1
 800feee:	d13d      	bne.n	800ff6c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fef0:	68ba      	ldr	r2, [r7, #8]
 800fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef4:	699b      	ldr	r3, [r3, #24]
 800fef6:	441a      	add	r2, r3
 800fef8:	2300      	movs	r3, #0
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	2300      	movs	r3, #0
 800fefe:	2100      	movs	r1, #0
 800ff00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff02:	f7ff fe23 	bl	800fb4c <xTimerGenericCommand>
 800ff06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ff08:	6a3b      	ldr	r3, [r7, #32]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d12e      	bne.n	800ff6c <prvProcessReceivedCommands+0x13c>
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	61bb      	str	r3, [r7, #24]
 800ff20:	e7fe      	b.n	800ff20 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ff28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2a:	699b      	ldr	r3, [r3, #24]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d109      	bne.n	800ff44 <prvProcessReceivedCommands+0x114>
 800ff30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	617b      	str	r3, [r7, #20]
 800ff42:	e7fe      	b.n	800ff42 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	699a      	ldr	r2, [r3, #24]
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	18d1      	adds	r1, r2, r3
 800ff4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff52:	f7ff ff2b 	bl	800fdac <prvInsertTimerInActiveList>
					break;
 800ff56:	e009      	b.n	800ff6c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ff58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d104      	bne.n	800ff6c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800ff62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff64:	f000 fb58 	bl	8010618 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff68:	e000      	b.n	800ff6c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ff6a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff6c:	4b07      	ldr	r3, [pc, #28]	; (800ff8c <prvProcessReceivedCommands+0x15c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	1d39      	adds	r1, r7, #4
 800ff72:	2200      	movs	r2, #0
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fe fc75 	bl	800e864 <xQueueReceive>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f47f af5b 	bne.w	800fe38 <prvProcessReceivedCommands+0x8>
	}
}
 800ff82:	bf00      	nop
 800ff84:	3730      	adds	r7, #48	; 0x30
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20000f28 	.word	0x20000f28

0800ff90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b088      	sub	sp, #32
 800ff94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff96:	e044      	b.n	8010022 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff98:	4b2b      	ldr	r3, [pc, #172]	; (8010048 <prvSwitchTimerLists+0xb8>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffa2:	4b29      	ldr	r3, [pc, #164]	; (8010048 <prvSwitchTimerLists+0xb8>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	3304      	adds	r3, #4
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fe f917 	bl	800e1e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d12d      	bne.n	8010022 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	699b      	ldr	r3, [r3, #24]
 800ffca:	693a      	ldr	r2, [r7, #16]
 800ffcc:	4413      	add	r3, r2
 800ffce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d90e      	bls.n	800fff6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ffe4:	4b18      	ldr	r3, [pc, #96]	; (8010048 <prvSwitchTimerLists+0xb8>)
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	3304      	adds	r3, #4
 800ffec:	4619      	mov	r1, r3
 800ffee:	4610      	mov	r0, r2
 800fff0:	f7fe f8c0 	bl	800e174 <vListInsert>
 800fff4:	e015      	b.n	8010022 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fff6:	2300      	movs	r3, #0
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	2300      	movs	r3, #0
 800fffc:	693a      	ldr	r2, [r7, #16]
 800fffe:	2100      	movs	r1, #0
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7ff fda3 	bl	800fb4c <xTimerGenericCommand>
 8010006:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d109      	bne.n	8010022 <prvSwitchTimerLists+0x92>
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	603b      	str	r3, [r7, #0]
 8010020:	e7fe      	b.n	8010020 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010022:	4b09      	ldr	r3, [pc, #36]	; (8010048 <prvSwitchTimerLists+0xb8>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d1b5      	bne.n	800ff98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801002c:	4b06      	ldr	r3, [pc, #24]	; (8010048 <prvSwitchTimerLists+0xb8>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010032:	4b06      	ldr	r3, [pc, #24]	; (801004c <prvSwitchTimerLists+0xbc>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a04      	ldr	r2, [pc, #16]	; (8010048 <prvSwitchTimerLists+0xb8>)
 8010038:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801003a:	4a04      	ldr	r2, [pc, #16]	; (801004c <prvSwitchTimerLists+0xbc>)
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	6013      	str	r3, [r2, #0]
}
 8010040:	bf00      	nop
 8010042:	3718      	adds	r7, #24
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	20000f20 	.word	0x20000f20
 801004c:	20000f24 	.word	0x20000f24

08010050 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010056:	f000 f927 	bl	80102a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801005a:	4b15      	ldr	r3, [pc, #84]	; (80100b0 <prvCheckForValidListAndQueue+0x60>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d120      	bne.n	80100a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010062:	4814      	ldr	r0, [pc, #80]	; (80100b4 <prvCheckForValidListAndQueue+0x64>)
 8010064:	f7fe f838 	bl	800e0d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010068:	4813      	ldr	r0, [pc, #76]	; (80100b8 <prvCheckForValidListAndQueue+0x68>)
 801006a:	f7fe f835 	bl	800e0d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801006e:	4b13      	ldr	r3, [pc, #76]	; (80100bc <prvCheckForValidListAndQueue+0x6c>)
 8010070:	4a10      	ldr	r2, [pc, #64]	; (80100b4 <prvCheckForValidListAndQueue+0x64>)
 8010072:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010074:	4b12      	ldr	r3, [pc, #72]	; (80100c0 <prvCheckForValidListAndQueue+0x70>)
 8010076:	4a10      	ldr	r2, [pc, #64]	; (80100b8 <prvCheckForValidListAndQueue+0x68>)
 8010078:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801007a:	2300      	movs	r3, #0
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	4b11      	ldr	r3, [pc, #68]	; (80100c4 <prvCheckForValidListAndQueue+0x74>)
 8010080:	4a11      	ldr	r2, [pc, #68]	; (80100c8 <prvCheckForValidListAndQueue+0x78>)
 8010082:	2110      	movs	r1, #16
 8010084:	200a      	movs	r0, #10
 8010086:	f7fe f93f 	bl	800e308 <xQueueGenericCreateStatic>
 801008a:	4602      	mov	r2, r0
 801008c:	4b08      	ldr	r3, [pc, #32]	; (80100b0 <prvCheckForValidListAndQueue+0x60>)
 801008e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010090:	4b07      	ldr	r3, [pc, #28]	; (80100b0 <prvCheckForValidListAndQueue+0x60>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d005      	beq.n	80100a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010098:	4b05      	ldr	r3, [pc, #20]	; (80100b0 <prvCheckForValidListAndQueue+0x60>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	490b      	ldr	r1, [pc, #44]	; (80100cc <prvCheckForValidListAndQueue+0x7c>)
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fe fdcc 	bl	800ec3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100a4:	f000 f92e 	bl	8010304 <vPortExitCritical>
}
 80100a8:	bf00      	nop
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	20000f28 	.word	0x20000f28
 80100b4:	20000ef8 	.word	0x20000ef8
 80100b8:	20000f0c 	.word	0x20000f0c
 80100bc:	20000f20 	.word	0x20000f20
 80100c0:	20000f24 	.word	0x20000f24
 80100c4:	20000fd4 	.word	0x20000fd4
 80100c8:	20000f34 	.word	0x20000f34
 80100cc:	0801574c 	.word	0x0801574c

080100d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	3b04      	subs	r3, #4
 80100e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80100e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	3b04      	subs	r3, #4
 80100ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	f023 0201 	bic.w	r2, r3, #1
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	3b04      	subs	r3, #4
 80100fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010100:	4a08      	ldr	r2, [pc, #32]	; (8010124 <pxPortInitialiseStack+0x54>)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	3b14      	subs	r3, #20
 801010a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3b20      	subs	r3, #32
 8010116:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010118:	68fb      	ldr	r3, [r7, #12]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3714      	adds	r7, #20
 801011e:	46bd      	mov	sp, r7
 8010120:	bc80      	pop	{r7}
 8010122:	4770      	bx	lr
 8010124:	08010129 	.word	0x08010129

08010128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010128:	b480      	push	{r7}
 801012a:	b085      	sub	sp, #20
 801012c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801012e:	2300      	movs	r3, #0
 8010130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010132:	4b10      	ldr	r3, [pc, #64]	; (8010174 <prvTaskExitError+0x4c>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013a:	d009      	beq.n	8010150 <prvTaskExitError+0x28>
 801013c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010140:	f383 8811 	msr	BASEPRI, r3
 8010144:	f3bf 8f6f 	isb	sy
 8010148:	f3bf 8f4f 	dsb	sy
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	e7fe      	b.n	801014e <prvTaskExitError+0x26>
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010162:	bf00      	nop
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d0fc      	beq.n	8010164 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801016a:	bf00      	nop
 801016c:	3714      	adds	r7, #20
 801016e:	46bd      	mov	sp, r7
 8010170:	bc80      	pop	{r7}
 8010172:	4770      	bx	lr
 8010174:	200000cc 	.word	0x200000cc
	...

08010180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010180:	4b07      	ldr	r3, [pc, #28]	; (80101a0 <pxCurrentTCBConst2>)
 8010182:	6819      	ldr	r1, [r3, #0]
 8010184:	6808      	ldr	r0, [r1, #0]
 8010186:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801018a:	f380 8809 	msr	PSP, r0
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f04f 0000 	mov.w	r0, #0
 8010196:	f380 8811 	msr	BASEPRI, r0
 801019a:	f04e 0e0d 	orr.w	lr, lr, #13
 801019e:	4770      	bx	lr

080101a0 <pxCurrentTCBConst2>:
 80101a0:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101a4:	bf00      	nop
 80101a6:	bf00      	nop

080101a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80101a8:	4806      	ldr	r0, [pc, #24]	; (80101c4 <prvPortStartFirstTask+0x1c>)
 80101aa:	6800      	ldr	r0, [r0, #0]
 80101ac:	6800      	ldr	r0, [r0, #0]
 80101ae:	f380 8808 	msr	MSP, r0
 80101b2:	b662      	cpsie	i
 80101b4:	b661      	cpsie	f
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	df00      	svc	0
 80101c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80101c2:	bf00      	nop
 80101c4:	e000ed08 	.word	0xe000ed08

080101c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80101ce:	4b31      	ldr	r3, [pc, #196]	; (8010294 <xPortStartScheduler+0xcc>)
 80101d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	22ff      	movs	r2, #255	; 0xff
 80101de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101e8:	78fb      	ldrb	r3, [r7, #3]
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80101f0:	b2da      	uxtb	r2, r3
 80101f2:	4b29      	ldr	r3, [pc, #164]	; (8010298 <xPortStartScheduler+0xd0>)
 80101f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101f6:	4b29      	ldr	r3, [pc, #164]	; (801029c <xPortStartScheduler+0xd4>)
 80101f8:	2207      	movs	r2, #7
 80101fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101fc:	e009      	b.n	8010212 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80101fe:	4b27      	ldr	r3, [pc, #156]	; (801029c <xPortStartScheduler+0xd4>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3b01      	subs	r3, #1
 8010204:	4a25      	ldr	r2, [pc, #148]	; (801029c <xPortStartScheduler+0xd4>)
 8010206:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010208:	78fb      	ldrb	r3, [r7, #3]
 801020a:	b2db      	uxtb	r3, r3
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	b2db      	uxtb	r3, r3
 8010210:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010212:	78fb      	ldrb	r3, [r7, #3]
 8010214:	b2db      	uxtb	r3, r3
 8010216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801021a:	2b80      	cmp	r3, #128	; 0x80
 801021c:	d0ef      	beq.n	80101fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801021e:	4b1f      	ldr	r3, [pc, #124]	; (801029c <xPortStartScheduler+0xd4>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f1c3 0307 	rsb	r3, r3, #7
 8010226:	2b04      	cmp	r3, #4
 8010228:	d009      	beq.n	801023e <xPortStartScheduler+0x76>
 801022a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801022e:	f383 8811 	msr	BASEPRI, r3
 8010232:	f3bf 8f6f 	isb	sy
 8010236:	f3bf 8f4f 	dsb	sy
 801023a:	60bb      	str	r3, [r7, #8]
 801023c:	e7fe      	b.n	801023c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801023e:	4b17      	ldr	r3, [pc, #92]	; (801029c <xPortStartScheduler+0xd4>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	4a15      	ldr	r2, [pc, #84]	; (801029c <xPortStartScheduler+0xd4>)
 8010246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010248:	4b14      	ldr	r3, [pc, #80]	; (801029c <xPortStartScheduler+0xd4>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010250:	4a12      	ldr	r2, [pc, #72]	; (801029c <xPortStartScheduler+0xd4>)
 8010252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	b2da      	uxtb	r2, r3
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801025c:	4b10      	ldr	r3, [pc, #64]	; (80102a0 <xPortStartScheduler+0xd8>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4a0f      	ldr	r2, [pc, #60]	; (80102a0 <xPortStartScheduler+0xd8>)
 8010262:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010268:	4b0d      	ldr	r3, [pc, #52]	; (80102a0 <xPortStartScheduler+0xd8>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a0c      	ldr	r2, [pc, #48]	; (80102a0 <xPortStartScheduler+0xd8>)
 801026e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010274:	f000 f8b0 	bl	80103d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010278:	4b0a      	ldr	r3, [pc, #40]	; (80102a4 <xPortStartScheduler+0xdc>)
 801027a:	2200      	movs	r2, #0
 801027c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801027e:	f7ff ff93 	bl	80101a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010282:	f7ff f8d9 	bl	800f438 <vTaskSwitchContext>
	prvTaskExitError();
 8010286:	f7ff ff4f 	bl	8010128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801028a:	2300      	movs	r3, #0
}
 801028c:	4618      	mov	r0, r3
 801028e:	3710      	adds	r7, #16
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	e000e400 	.word	0xe000e400
 8010298:	20001024 	.word	0x20001024
 801029c:	20001028 	.word	0x20001028
 80102a0:	e000ed20 	.word	0xe000ed20
 80102a4:	200000cc 	.word	0x200000cc

080102a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102c0:	4b0e      	ldr	r3, [pc, #56]	; (80102fc <vPortEnterCritical+0x54>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	3301      	adds	r3, #1
 80102c6:	4a0d      	ldr	r2, [pc, #52]	; (80102fc <vPortEnterCritical+0x54>)
 80102c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102ca:	4b0c      	ldr	r3, [pc, #48]	; (80102fc <vPortEnterCritical+0x54>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d10e      	bne.n	80102f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102d2:	4b0b      	ldr	r3, [pc, #44]	; (8010300 <vPortEnterCritical+0x58>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d009      	beq.n	80102f0 <vPortEnterCritical+0x48>
 80102dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e0:	f383 8811 	msr	BASEPRI, r3
 80102e4:	f3bf 8f6f 	isb	sy
 80102e8:	f3bf 8f4f 	dsb	sy
 80102ec:	603b      	str	r3, [r7, #0]
 80102ee:	e7fe      	b.n	80102ee <vPortEnterCritical+0x46>
	}
}
 80102f0:	bf00      	nop
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bc80      	pop	{r7}
 80102f8:	4770      	bx	lr
 80102fa:	bf00      	nop
 80102fc:	200000cc 	.word	0x200000cc
 8010300:	e000ed04 	.word	0xe000ed04

08010304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801030a:	4b10      	ldr	r3, [pc, #64]	; (801034c <vPortExitCritical+0x48>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d109      	bne.n	8010326 <vPortExitCritical+0x22>
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	607b      	str	r3, [r7, #4]
 8010324:	e7fe      	b.n	8010324 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8010326:	4b09      	ldr	r3, [pc, #36]	; (801034c <vPortExitCritical+0x48>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3b01      	subs	r3, #1
 801032c:	4a07      	ldr	r2, [pc, #28]	; (801034c <vPortExitCritical+0x48>)
 801032e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010330:	4b06      	ldr	r3, [pc, #24]	; (801034c <vPortExitCritical+0x48>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d104      	bne.n	8010342 <vPortExitCritical+0x3e>
 8010338:	2300      	movs	r3, #0
 801033a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010342:	bf00      	nop
 8010344:	370c      	adds	r7, #12
 8010346:	46bd      	mov	sp, r7
 8010348:	bc80      	pop	{r7}
 801034a:	4770      	bx	lr
 801034c:	200000cc 	.word	0x200000cc

08010350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010350:	f3ef 8009 	mrs	r0, PSP
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	4b0d      	ldr	r3, [pc, #52]	; (8010390 <pxCurrentTCBConst>)
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010360:	6010      	str	r0, [r2, #0]
 8010362:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010366:	f04f 0050 	mov.w	r0, #80	; 0x50
 801036a:	f380 8811 	msr	BASEPRI, r0
 801036e:	f7ff f863 	bl	800f438 <vTaskSwitchContext>
 8010372:	f04f 0000 	mov.w	r0, #0
 8010376:	f380 8811 	msr	BASEPRI, r0
 801037a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801037e:	6819      	ldr	r1, [r3, #0]
 8010380:	6808      	ldr	r0, [r1, #0]
 8010382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010386:	f380 8809 	msr	PSP, r0
 801038a:	f3bf 8f6f 	isb	sy
 801038e:	4770      	bx	lr

08010390 <pxCurrentTCBConst>:
 8010390:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010394:	bf00      	nop
 8010396:	bf00      	nop

08010398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
	__asm volatile
 801039e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103b0:	f7fe ff84 	bl	800f2bc <xTaskIncrementTick>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d003      	beq.n	80103c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103ba:	4b06      	ldr	r3, [pc, #24]	; (80103d4 <SysTick_Handler+0x3c>)
 80103bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103c0:	601a      	str	r2, [r3, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80103cc:	bf00      	nop
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	e000ed04 	.word	0xe000ed04

080103d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103d8:	b480      	push	{r7}
 80103da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103dc:	4b0a      	ldr	r3, [pc, #40]	; (8010408 <vPortSetupTimerInterrupt+0x30>)
 80103de:	2200      	movs	r2, #0
 80103e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103e2:	4b0a      	ldr	r3, [pc, #40]	; (801040c <vPortSetupTimerInterrupt+0x34>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103e8:	4b09      	ldr	r3, [pc, #36]	; (8010410 <vPortSetupTimerInterrupt+0x38>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a09      	ldr	r2, [pc, #36]	; (8010414 <vPortSetupTimerInterrupt+0x3c>)
 80103ee:	fba2 2303 	umull	r2, r3, r2, r3
 80103f2:	099b      	lsrs	r3, r3, #6
 80103f4:	4a08      	ldr	r2, [pc, #32]	; (8010418 <vPortSetupTimerInterrupt+0x40>)
 80103f6:	3b01      	subs	r3, #1
 80103f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103fa:	4b03      	ldr	r3, [pc, #12]	; (8010408 <vPortSetupTimerInterrupt+0x30>)
 80103fc:	2207      	movs	r2, #7
 80103fe:	601a      	str	r2, [r3, #0]
}
 8010400:	bf00      	nop
 8010402:	46bd      	mov	sp, r7
 8010404:	bc80      	pop	{r7}
 8010406:	4770      	bx	lr
 8010408:	e000e010 	.word	0xe000e010
 801040c:	e000e018 	.word	0xe000e018
 8010410:	20000000 	.word	0x20000000
 8010414:	10624dd3 	.word	0x10624dd3
 8010418:	e000e014 	.word	0xe000e014

0801041c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010422:	f3ef 8305 	mrs	r3, IPSR
 8010426:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2b0f      	cmp	r3, #15
 801042c:	d913      	bls.n	8010456 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801042e:	4a15      	ldr	r2, [pc, #84]	; (8010484 <vPortValidateInterruptPriority+0x68>)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4413      	add	r3, r2
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010438:	4b13      	ldr	r3, [pc, #76]	; (8010488 <vPortValidateInterruptPriority+0x6c>)
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	7afa      	ldrb	r2, [r7, #11]
 801043e:	429a      	cmp	r2, r3
 8010440:	d209      	bcs.n	8010456 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010446:	f383 8811 	msr	BASEPRI, r3
 801044a:	f3bf 8f6f 	isb	sy
 801044e:	f3bf 8f4f 	dsb	sy
 8010452:	607b      	str	r3, [r7, #4]
 8010454:	e7fe      	b.n	8010454 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010456:	4b0d      	ldr	r3, [pc, #52]	; (801048c <vPortValidateInterruptPriority+0x70>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801045e:	4b0c      	ldr	r3, [pc, #48]	; (8010490 <vPortValidateInterruptPriority+0x74>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	429a      	cmp	r2, r3
 8010464:	d909      	bls.n	801047a <vPortValidateInterruptPriority+0x5e>
 8010466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	603b      	str	r3, [r7, #0]
 8010478:	e7fe      	b.n	8010478 <vPortValidateInterruptPriority+0x5c>
	}
 801047a:	bf00      	nop
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	bc80      	pop	{r7}
 8010482:	4770      	bx	lr
 8010484:	e000e3f0 	.word	0xe000e3f0
 8010488:	20001024 	.word	0x20001024
 801048c:	e000ed0c 	.word	0xe000ed0c
 8010490:	20001028 	.word	0x20001028

08010494 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b08a      	sub	sp, #40	; 0x28
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801049c:	2300      	movs	r3, #0
 801049e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104a0:	f7fe fe54 	bl	800f14c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104a4:	4b57      	ldr	r3, [pc, #348]	; (8010604 <pvPortMalloc+0x170>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104ac:	f000 f90c 	bl	80106c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104b0:	4b55      	ldr	r3, [pc, #340]	; (8010608 <pvPortMalloc+0x174>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4013      	ands	r3, r2
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f040 808c 	bne.w	80105d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d01c      	beq.n	80104fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80104c4:	2208      	movs	r2, #8
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4413      	add	r3, r2
 80104ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f003 0307 	and.w	r3, r3, #7
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d013      	beq.n	80104fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f023 0307 	bic.w	r3, r3, #7
 80104dc:	3308      	adds	r3, #8
 80104de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f003 0307 	and.w	r3, r3, #7
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d009      	beq.n	80104fe <pvPortMalloc+0x6a>
 80104ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ee:	f383 8811 	msr	BASEPRI, r3
 80104f2:	f3bf 8f6f 	isb	sy
 80104f6:	f3bf 8f4f 	dsb	sy
 80104fa:	617b      	str	r3, [r7, #20]
 80104fc:	e7fe      	b.n	80104fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d068      	beq.n	80105d6 <pvPortMalloc+0x142>
 8010504:	4b41      	ldr	r3, [pc, #260]	; (801060c <pvPortMalloc+0x178>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	429a      	cmp	r2, r3
 801050c:	d863      	bhi.n	80105d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801050e:	4b40      	ldr	r3, [pc, #256]	; (8010610 <pvPortMalloc+0x17c>)
 8010510:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010512:	4b3f      	ldr	r3, [pc, #252]	; (8010610 <pvPortMalloc+0x17c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010518:	e004      	b.n	8010524 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	429a      	cmp	r2, r3
 801052c:	d903      	bls.n	8010536 <pvPortMalloc+0xa2>
 801052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1f1      	bne.n	801051a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010536:	4b33      	ldr	r3, [pc, #204]	; (8010604 <pvPortMalloc+0x170>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801053c:	429a      	cmp	r2, r3
 801053e:	d04a      	beq.n	80105d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010540:	6a3b      	ldr	r3, [r7, #32]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2208      	movs	r2, #8
 8010546:	4413      	add	r3, r2
 8010548:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010554:	685a      	ldr	r2, [r3, #4]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	1ad2      	subs	r2, r2, r3
 801055a:	2308      	movs	r3, #8
 801055c:	005b      	lsls	r3, r3, #1
 801055e:	429a      	cmp	r2, r3
 8010560:	d91e      	bls.n	80105a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4413      	add	r3, r2
 8010568:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	f003 0307 	and.w	r3, r3, #7
 8010570:	2b00      	cmp	r3, #0
 8010572:	d009      	beq.n	8010588 <pvPortMalloc+0xf4>
 8010574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010578:	f383 8811 	msr	BASEPRI, r3
 801057c:	f3bf 8f6f 	isb	sy
 8010580:	f3bf 8f4f 	dsb	sy
 8010584:	613b      	str	r3, [r7, #16]
 8010586:	e7fe      	b.n	8010586 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	1ad2      	subs	r2, r2, r3
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801059a:	69b8      	ldr	r0, [r7, #24]
 801059c:	f000 f8f6 	bl	801078c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105a0:	4b1a      	ldr	r3, [pc, #104]	; (801060c <pvPortMalloc+0x178>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	4a18      	ldr	r2, [pc, #96]	; (801060c <pvPortMalloc+0x178>)
 80105ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105ae:	4b17      	ldr	r3, [pc, #92]	; (801060c <pvPortMalloc+0x178>)
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	4b18      	ldr	r3, [pc, #96]	; (8010614 <pvPortMalloc+0x180>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d203      	bcs.n	80105c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105ba:	4b14      	ldr	r3, [pc, #80]	; (801060c <pvPortMalloc+0x178>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4a15      	ldr	r2, [pc, #84]	; (8010614 <pvPortMalloc+0x180>)
 80105c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c4:	685a      	ldr	r2, [r3, #4]
 80105c6:	4b10      	ldr	r3, [pc, #64]	; (8010608 <pvPortMalloc+0x174>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	431a      	orrs	r2, r3
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105d6:	f7fe fdc7 	bl	800f168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	f003 0307 	and.w	r3, r3, #7
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d009      	beq.n	80105f8 <pvPortMalloc+0x164>
 80105e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	60fb      	str	r3, [r7, #12]
 80105f6:	e7fe      	b.n	80105f6 <pvPortMalloc+0x162>
	return pvReturn;
 80105f8:	69fb      	ldr	r3, [r7, #28]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3728      	adds	r7, #40	; 0x28
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	20003744 	.word	0x20003744
 8010608:	20003750 	.word	0x20003750
 801060c:	20003748 	.word	0x20003748
 8010610:	2000373c 	.word	0x2000373c
 8010614:	2000374c 	.word	0x2000374c

08010618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b086      	sub	sp, #24
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d046      	beq.n	80106b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801062a:	2308      	movs	r3, #8
 801062c:	425b      	negs	r3, r3
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	4413      	add	r3, r2
 8010632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	4b20      	ldr	r3, [pc, #128]	; (80106c0 <vPortFree+0xa8>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4013      	ands	r3, r2
 8010642:	2b00      	cmp	r3, #0
 8010644:	d109      	bne.n	801065a <vPortFree+0x42>
 8010646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064a:	f383 8811 	msr	BASEPRI, r3
 801064e:	f3bf 8f6f 	isb	sy
 8010652:	f3bf 8f4f 	dsb	sy
 8010656:	60fb      	str	r3, [r7, #12]
 8010658:	e7fe      	b.n	8010658 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d009      	beq.n	8010676 <vPortFree+0x5e>
 8010662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010666:	f383 8811 	msr	BASEPRI, r3
 801066a:	f3bf 8f6f 	isb	sy
 801066e:	f3bf 8f4f 	dsb	sy
 8010672:	60bb      	str	r3, [r7, #8]
 8010674:	e7fe      	b.n	8010674 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	685a      	ldr	r2, [r3, #4]
 801067a:	4b11      	ldr	r3, [pc, #68]	; (80106c0 <vPortFree+0xa8>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4013      	ands	r3, r2
 8010680:	2b00      	cmp	r3, #0
 8010682:	d019      	beq.n	80106b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d115      	bne.n	80106b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	685a      	ldr	r2, [r3, #4]
 8010690:	4b0b      	ldr	r3, [pc, #44]	; (80106c0 <vPortFree+0xa8>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	43db      	mvns	r3, r3
 8010696:	401a      	ands	r2, r3
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801069c:	f7fe fd56 	bl	800f14c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	685a      	ldr	r2, [r3, #4]
 80106a4:	4b07      	ldr	r3, [pc, #28]	; (80106c4 <vPortFree+0xac>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4413      	add	r3, r2
 80106aa:	4a06      	ldr	r2, [pc, #24]	; (80106c4 <vPortFree+0xac>)
 80106ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106ae:	6938      	ldr	r0, [r7, #16]
 80106b0:	f000 f86c 	bl	801078c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80106b4:	f7fe fd58 	bl	800f168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106b8:	bf00      	nop
 80106ba:	3718      	adds	r7, #24
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20003750 	.word	0x20003750
 80106c4:	20003748 	.word	0x20003748

080106c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80106d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80106d4:	4b27      	ldr	r3, [pc, #156]	; (8010774 <prvHeapInit+0xac>)
 80106d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f003 0307 	and.w	r3, r3, #7
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00c      	beq.n	80106fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	3307      	adds	r3, #7
 80106e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f023 0307 	bic.w	r3, r3, #7
 80106ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80106f0:	68ba      	ldr	r2, [r7, #8]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	4a1f      	ldr	r2, [pc, #124]	; (8010774 <prvHeapInit+0xac>)
 80106f8:	4413      	add	r3, r2
 80106fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010700:	4a1d      	ldr	r2, [pc, #116]	; (8010778 <prvHeapInit+0xb0>)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010706:	4b1c      	ldr	r3, [pc, #112]	; (8010778 <prvHeapInit+0xb0>)
 8010708:	2200      	movs	r2, #0
 801070a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	68ba      	ldr	r2, [r7, #8]
 8010710:	4413      	add	r3, r2
 8010712:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010714:	2208      	movs	r2, #8
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	1a9b      	subs	r3, r3, r2
 801071a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f023 0307 	bic.w	r3, r3, #7
 8010722:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	4a15      	ldr	r2, [pc, #84]	; (801077c <prvHeapInit+0xb4>)
 8010728:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801072a:	4b14      	ldr	r3, [pc, #80]	; (801077c <prvHeapInit+0xb4>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2200      	movs	r2, #0
 8010730:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010732:	4b12      	ldr	r3, [pc, #72]	; (801077c <prvHeapInit+0xb4>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2200      	movs	r2, #0
 8010738:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	1ad2      	subs	r2, r2, r3
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010748:	4b0c      	ldr	r3, [pc, #48]	; (801077c <prvHeapInit+0xb4>)
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	4a0a      	ldr	r2, [pc, #40]	; (8010780 <prvHeapInit+0xb8>)
 8010756:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	4a09      	ldr	r2, [pc, #36]	; (8010784 <prvHeapInit+0xbc>)
 801075e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010760:	4b09      	ldr	r3, [pc, #36]	; (8010788 <prvHeapInit+0xc0>)
 8010762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010766:	601a      	str	r2, [r3, #0]
}
 8010768:	bf00      	nop
 801076a:	3714      	adds	r7, #20
 801076c:	46bd      	mov	sp, r7
 801076e:	bc80      	pop	{r7}
 8010770:	4770      	bx	lr
 8010772:	bf00      	nop
 8010774:	2000102c 	.word	0x2000102c
 8010778:	2000373c 	.word	0x2000373c
 801077c:	20003744 	.word	0x20003744
 8010780:	2000374c 	.word	0x2000374c
 8010784:	20003748 	.word	0x20003748
 8010788:	20003750 	.word	0x20003750

0801078c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010794:	4b27      	ldr	r3, [pc, #156]	; (8010834 <prvInsertBlockIntoFreeList+0xa8>)
 8010796:	60fb      	str	r3, [r7, #12]
 8010798:	e002      	b.n	80107a0 <prvInsertBlockIntoFreeList+0x14>
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	60fb      	str	r3, [r7, #12]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d8f7      	bhi.n	801079a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	4413      	add	r3, r2
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d108      	bne.n	80107ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	685a      	ldr	r2, [r3, #4]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	441a      	add	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	68ba      	ldr	r2, [r7, #8]
 80107d8:	441a      	add	r2, r3
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d118      	bne.n	8010814 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <prvInsertBlockIntoFreeList+0xac>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d00d      	beq.n	801080a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	685a      	ldr	r2, [r3, #4]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	441a      	add	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	601a      	str	r2, [r3, #0]
 8010808:	e008      	b.n	801081c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801080a:	4b0b      	ldr	r3, [pc, #44]	; (8010838 <prvInsertBlockIntoFreeList+0xac>)
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	601a      	str	r2, [r3, #0]
 8010812:	e003      	b.n	801081c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	429a      	cmp	r2, r3
 8010822:	d002      	beq.n	801082a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801082a:	bf00      	nop
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	bc80      	pop	{r7}
 8010832:	4770      	bx	lr
 8010834:	2000373c 	.word	0x2000373c
 8010838:	20003744 	.word	0x20003744

0801083c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010840:	2200      	movs	r2, #0
 8010842:	4914      	ldr	r1, [pc, #80]	; (8010894 <MX_USB_DEVICE_Init+0x58>)
 8010844:	4814      	ldr	r0, [pc, #80]	; (8010898 <MX_USB_DEVICE_Init+0x5c>)
 8010846:	f7fc f963 	bl	800cb10 <USBD_Init>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d002      	beq.n	8010856 <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler(1);
 8010850:	2001      	movs	r0, #1
 8010852:	f7f2 f9a7 	bl	8002ba4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8010856:	4911      	ldr	r1, [pc, #68]	; (801089c <MX_USB_DEVICE_Init+0x60>)
 8010858:	480f      	ldr	r0, [pc, #60]	; (8010898 <MX_USB_DEVICE_Init+0x5c>)
 801085a:	f7fc f984 	bl	800cb66 <USBD_RegisterClass>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d002      	beq.n	801086a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler(1);
 8010864:	2001      	movs	r0, #1
 8010866:	f7f2 f99d 	bl	8002ba4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801086a:	490d      	ldr	r1, [pc, #52]	; (80108a0 <MX_USB_DEVICE_Init+0x64>)
 801086c:	480a      	ldr	r0, [pc, #40]	; (8010898 <MX_USB_DEVICE_Init+0x5c>)
 801086e:	f7fb f931 	bl	800bad4 <USBD_MSC_RegisterStorage>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d002      	beq.n	801087e <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler(1);
 8010878:	2001      	movs	r0, #1
 801087a:	f7f2 f993 	bl	8002ba4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801087e:	4806      	ldr	r0, [pc, #24]	; (8010898 <MX_USB_DEVICE_Init+0x5c>)
 8010880:	f7fc f98a 	bl	800cb98 <USBD_Start>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d002      	beq.n	8010890 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler(1);
 801088a:	2001      	movs	r0, #1
 801088c:	f7f2 f98a 	bl	8002ba4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010890:	bf00      	nop
 8010892:	bd80      	pop	{r7, pc}
 8010894:	200000d0 	.word	0x200000d0
 8010898:	200043e0 	.word	0x200043e0
 801089c:	20000028 	.word	0x20000028
 80108a0:	20000120 	.word	0x20000120

080108a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	6039      	str	r1, [r7, #0]
 80108ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2212      	movs	r2, #18
 80108b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80108b6:	4b03      	ldr	r3, [pc, #12]	; (80108c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	bc80      	pop	{r7}
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	200000ec 	.word	0x200000ec

080108c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	4603      	mov	r3, r0
 80108d0:	6039      	str	r1, [r7, #0]
 80108d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2204      	movs	r2, #4
 80108d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80108da:	4b03      	ldr	r3, [pc, #12]	; (80108e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80108dc:	4618      	mov	r0, r3
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bc80      	pop	{r7}
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	20000100 	.word	0x20000100

080108ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	4603      	mov	r3, r0
 80108f4:	6039      	str	r1, [r7, #0]
 80108f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d105      	bne.n	801090a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108fe:	683a      	ldr	r2, [r7, #0]
 8010900:	4907      	ldr	r1, [pc, #28]	; (8010920 <USBD_FS_ProductStrDescriptor+0x34>)
 8010902:	4808      	ldr	r0, [pc, #32]	; (8010924 <USBD_FS_ProductStrDescriptor+0x38>)
 8010904:	f7fd f83f 	bl	800d986 <USBD_GetString>
 8010908:	e004      	b.n	8010914 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	4904      	ldr	r1, [pc, #16]	; (8010920 <USBD_FS_ProductStrDescriptor+0x34>)
 801090e:	4805      	ldr	r0, [pc, #20]	; (8010924 <USBD_FS_ProductStrDescriptor+0x38>)
 8010910:	f7fd f839 	bl	800d986 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010914:	4b02      	ldr	r3, [pc, #8]	; (8010920 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010916:	4618      	mov	r0, r3
 8010918:	3708      	adds	r7, #8
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	2000467c 	.word	0x2000467c
 8010924:	08015754 	.word	0x08015754

08010928 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	4603      	mov	r3, r0
 8010930:	6039      	str	r1, [r7, #0]
 8010932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	4904      	ldr	r1, [pc, #16]	; (8010948 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010938:	4804      	ldr	r0, [pc, #16]	; (801094c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801093a:	f7fd f824 	bl	800d986 <USBD_GetString>
  return USBD_StrDesc;
 801093e:	4b02      	ldr	r3, [pc, #8]	; (8010948 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010940:	4618      	mov	r0, r3
 8010942:	3708      	adds	r7, #8
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	2000467c 	.word	0x2000467c
 801094c:	08015768 	.word	0x08015768

08010950 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	4603      	mov	r3, r0
 8010958:	6039      	str	r1, [r7, #0]
 801095a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	221a      	movs	r2, #26
 8010960:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010962:	f000 f843 	bl	80109ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010966:	4b02      	ldr	r3, [pc, #8]	; (8010970 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20000104 	.word	0x20000104

08010974 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	4603      	mov	r3, r0
 801097c:	6039      	str	r1, [r7, #0]
 801097e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010980:	79fb      	ldrb	r3, [r7, #7]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d105      	bne.n	8010992 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	4907      	ldr	r1, [pc, #28]	; (80109a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801098a:	4808      	ldr	r0, [pc, #32]	; (80109ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801098c:	f7fc fffb 	bl	800d986 <USBD_GetString>
 8010990:	e004      	b.n	801099c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	4904      	ldr	r1, [pc, #16]	; (80109a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010996:	4805      	ldr	r0, [pc, #20]	; (80109ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8010998:	f7fc fff5 	bl	800d986 <USBD_GetString>
  }
  return USBD_StrDesc;
 801099c:	4b02      	ldr	r3, [pc, #8]	; (80109a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	2000467c 	.word	0x2000467c
 80109ac:	0801577c 	.word	0x0801577c

080109b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	4603      	mov	r3, r0
 80109b8:	6039      	str	r1, [r7, #0]
 80109ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80109bc:	79fb      	ldrb	r3, [r7, #7]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d105      	bne.n	80109ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109c2:	683a      	ldr	r2, [r7, #0]
 80109c4:	4907      	ldr	r1, [pc, #28]	; (80109e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109c6:	4808      	ldr	r0, [pc, #32]	; (80109e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109c8:	f7fc ffdd 	bl	800d986 <USBD_GetString>
 80109cc:	e004      	b.n	80109d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109ce:	683a      	ldr	r2, [r7, #0]
 80109d0:	4904      	ldr	r1, [pc, #16]	; (80109e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109d2:	4805      	ldr	r0, [pc, #20]	; (80109e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109d4:	f7fc ffd7 	bl	800d986 <USBD_GetString>
  }
  return USBD_StrDesc;
 80109d8:	4b02      	ldr	r3, [pc, #8]	; (80109e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3708      	adds	r7, #8
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	2000467c 	.word	0x2000467c
 80109e8:	08015788 	.word	0x08015788

080109ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80109f2:	4b0f      	ldr	r3, [pc, #60]	; (8010a30 <Get_SerialNum+0x44>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80109f8:	4b0e      	ldr	r3, [pc, #56]	; (8010a34 <Get_SerialNum+0x48>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80109fe:	4b0e      	ldr	r3, [pc, #56]	; (8010a38 <Get_SerialNum+0x4c>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4413      	add	r3, r2
 8010a0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d009      	beq.n	8010a26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010a12:	2208      	movs	r2, #8
 8010a14:	4909      	ldr	r1, [pc, #36]	; (8010a3c <Get_SerialNum+0x50>)
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f000 f814 	bl	8010a44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010a1c:	2204      	movs	r2, #4
 8010a1e:	4908      	ldr	r1, [pc, #32]	; (8010a40 <Get_SerialNum+0x54>)
 8010a20:	68b8      	ldr	r0, [r7, #8]
 8010a22:	f000 f80f 	bl	8010a44 <IntToUnicode>
  }
}
 8010a26:	bf00      	nop
 8010a28:	3710      	adds	r7, #16
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	1ff800d0 	.word	0x1ff800d0
 8010a34:	1ff800d4 	.word	0x1ff800d4
 8010a38:	1ff800d8 	.word	0x1ff800d8
 8010a3c:	20000106 	.word	0x20000106
 8010a40:	20000116 	.word	0x20000116

08010a44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b087      	sub	sp, #28
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	60b9      	str	r1, [r7, #8]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010a52:	2300      	movs	r3, #0
 8010a54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010a56:	2300      	movs	r3, #0
 8010a58:	75fb      	strb	r3, [r7, #23]
 8010a5a:	e027      	b.n	8010aac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	0f1b      	lsrs	r3, r3, #28
 8010a60:	2b09      	cmp	r3, #9
 8010a62:	d80b      	bhi.n	8010a7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	0f1b      	lsrs	r3, r3, #28
 8010a68:	b2da      	uxtb	r2, r3
 8010a6a:	7dfb      	ldrb	r3, [r7, #23]
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	4619      	mov	r1, r3
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	440b      	add	r3, r1
 8010a74:	3230      	adds	r2, #48	; 0x30
 8010a76:	b2d2      	uxtb	r2, r2
 8010a78:	701a      	strb	r2, [r3, #0]
 8010a7a:	e00a      	b.n	8010a92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	0f1b      	lsrs	r3, r3, #28
 8010a80:	b2da      	uxtb	r2, r3
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
 8010a84:	005b      	lsls	r3, r3, #1
 8010a86:	4619      	mov	r1, r3
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	440b      	add	r3, r1
 8010a8c:	3237      	adds	r2, #55	; 0x37
 8010a8e:	b2d2      	uxtb	r2, r2
 8010a90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	011b      	lsls	r3, r3, #4
 8010a96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a98:	7dfb      	ldrb	r3, [r7, #23]
 8010a9a:	005b      	lsls	r3, r3, #1
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	68ba      	ldr	r2, [r7, #8]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010aa6:	7dfb      	ldrb	r3, [r7, #23]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	75fb      	strb	r3, [r7, #23]
 8010aac:	7dfa      	ldrb	r2, [r7, #23]
 8010aae:	79fb      	ldrb	r3, [r7, #7]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d3d3      	bcc.n	8010a5c <IntToUnicode+0x18>
  }
}
 8010ab4:	bf00      	nop
 8010ab6:	371c      	adds	r7, #28
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bc80      	pop	{r7}
 8010abc:	4770      	bx	lr

08010abe <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8010abe:	b480      	push	{r7}
 8010ac0:	b083      	sub	sp, #12
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8010ac8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bc80      	pop	{r7}
 8010ad2:	4770      	bx	lr

08010ad4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b085      	sub	sp, #20
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	4603      	mov	r3, r0
 8010adc:	60b9      	str	r1, [r7, #8]
 8010ade:	607a      	str	r2, [r7, #4]
 8010ae0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010ae8:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010af0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8010af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bc80      	pop	{r7}
 8010afc:	4770      	bx	lr

08010afe <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8010afe:	b480      	push	{r7}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	4603      	mov	r3, r0
 8010b06:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010b08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bc80      	pop	{r7}
 8010b12:	4770      	bx	lr

08010b14 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8010b1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bc80      	pop	{r7}
 8010b28:	4770      	bx	lr

08010b2a <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010b2a:	b480      	push	{r7}
 8010b2c:	b085      	sub	sp, #20
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
 8010b34:	461a      	mov	r2, r3
 8010b36:	4603      	mov	r3, r0
 8010b38:	73fb      	strb	r3, [r7, #15]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8010b3e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bc80      	pop	{r7}
 8010b48:	4770      	bx	lr

08010b4a <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010b4a:	b480      	push	{r7}
 8010b4c:	b085      	sub	sp, #20
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
 8010b54:	461a      	mov	r2, r3
 8010b56:	4603      	mov	r3, r0
 8010b58:	73fb      	strb	r3, [r7, #15]
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8010b5e:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bc80      	pop	{r7}
 8010b68:	4770      	bx	lr

08010b6a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8010b6a:	b480      	push	{r7}
 8010b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8010b6e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bc80      	pop	{r7}
 8010b76:	4770      	bx	lr

08010b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4a0d      	ldr	r2, [pc, #52]	; (8010bbc <HAL_PCD_MspInit+0x44>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d113      	bne.n	8010bb2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010b8a:	4b0d      	ldr	r3, [pc, #52]	; (8010bc0 <HAL_PCD_MspInit+0x48>)
 8010b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8e:	4a0c      	ldr	r2, [pc, #48]	; (8010bc0 <HAL_PCD_MspInit+0x48>)
 8010b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010b94:	6253      	str	r3, [r2, #36]	; 0x24
 8010b96:	4b0a      	ldr	r3, [pc, #40]	; (8010bc0 <HAL_PCD_MspInit+0x48>)
 8010b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b9e:	60fb      	str	r3, [r7, #12]
 8010ba0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	2014      	movs	r0, #20
 8010ba8:	f7f3 ff27 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010bac:	2014      	movs	r0, #20
 8010bae:	f7f3 ff40 	bl	8004a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010bb2:	bf00      	nop
 8010bb4:	3710      	adds	r7, #16
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	40005c00 	.word	0x40005c00
 8010bc0:	40023800 	.word	0x40023800

08010bc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010bd8:	4619      	mov	r1, r3
 8010bda:	4610      	mov	r0, r2
 8010bdc:	f7fc f824 	bl	800cc28 <USBD_LL_SetupStage>
}
 8010be0:	bf00      	nop
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8010bfa:	78fa      	ldrb	r2, [r7, #3]
 8010bfc:	6879      	ldr	r1, [r7, #4]
 8010bfe:	4613      	mov	r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	4413      	add	r3, r2
 8010c04:	00db      	lsls	r3, r3, #3
 8010c06:	440b      	add	r3, r1
 8010c08:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	78fb      	ldrb	r3, [r7, #3]
 8010c10:	4619      	mov	r1, r3
 8010c12:	f7fc f854 	bl	800ccbe <USBD_LL_DataOutStage>
}
 8010c16:	bf00      	nop
 8010c18:	3708      	adds	r7, #8
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b082      	sub	sp, #8
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
 8010c26:	460b      	mov	r3, r1
 8010c28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8010c30:	78fa      	ldrb	r2, [r7, #3]
 8010c32:	6879      	ldr	r1, [r7, #4]
 8010c34:	4613      	mov	r3, r2
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	4413      	add	r3, r2
 8010c3a:	00db      	lsls	r3, r3, #3
 8010c3c:	440b      	add	r3, r1
 8010c3e:	333c      	adds	r3, #60	; 0x3c
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	78fb      	ldrb	r3, [r7, #3]
 8010c44:	4619      	mov	r1, r3
 8010c46:	f7fc f8ab 	bl	800cda0 <USBD_LL_DataInStage>
}
 8010c4a:	bf00      	nop
 8010c4c:	3708      	adds	r7, #8
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b082      	sub	sp, #8
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fc f9b6 	bl	800cfd2 <USBD_LL_SOF>
}
 8010c66:	bf00      	nop
 8010c68:	3708      	adds	r7, #8
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010c76:	2301      	movs	r3, #1
 8010c78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	689b      	ldr	r3, [r3, #8]
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d002      	beq.n	8010c88 <HAL_PCD_ResetCallback+0x1a>
  {
    Error_Handler(1);
 8010c82:	2001      	movs	r0, #1
 8010c84:	f7f1 ff8e 	bl	8002ba4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010c8e:	7bfa      	ldrb	r2, [r7, #15]
 8010c90:	4611      	mov	r1, r2
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fc f96a 	bl	800cf6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fc f923 	bl	800ceea <USBD_LL_Reset>
}
 8010ca4:	bf00      	nop
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7fc f965 	bl	800cf8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	699b      	ldr	r3, [r3, #24]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d005      	beq.n	8010cd4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010cc8:	4b04      	ldr	r3, [pc, #16]	; (8010cdc <HAL_PCD_SuspendCallback+0x30>)
 8010cca:	691b      	ldr	r3, [r3, #16]
 8010ccc:	4a03      	ldr	r2, [pc, #12]	; (8010cdc <HAL_PCD_SuspendCallback+0x30>)
 8010cce:	f043 0306 	orr.w	r3, r3, #6
 8010cd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010cd4:	bf00      	nop
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	e000ed00 	.word	0xe000ed00

08010ce0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fc f95f 	bl	800cfb2 <USBD_LL_Resume>
}
 8010cf4:	bf00      	nop
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8010d04:	4a23      	ldr	r2, [pc, #140]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4a21      	ldr	r2, [pc, #132]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8010d14:	4b1f      	ldr	r3, [pc, #124]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d16:	4a20      	ldr	r2, [pc, #128]	; (8010d98 <USBD_LL_Init+0x9c>)
 8010d18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010d1a:	4b1e      	ldr	r3, [pc, #120]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d1c:	2208      	movs	r2, #8
 8010d1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010d20:	4b1c      	ldr	r3, [pc, #112]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d22:	2202      	movs	r2, #2
 8010d24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d26:	4b1b      	ldr	r3, [pc, #108]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d28:	2202      	movs	r2, #2
 8010d2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010d2c:	4b19      	ldr	r3, [pc, #100]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010d32:	4b18      	ldr	r3, [pc, #96]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d34:	2200      	movs	r2, #0
 8010d36:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010d38:	4816      	ldr	r0, [pc, #88]	; (8010d94 <USBD_LL_Init+0x98>)
 8010d3a:	f7f4 fbe5 	bl	8005508 <HAL_PCD_Init>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d002      	beq.n	8010d4a <USBD_LL_Init+0x4e>
  {
    Error_Handler(1);
 8010d44:	2001      	movs	r0, #1
 8010d46:	f7f1 ff2d 	bl	8002ba4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010d50:	2318      	movs	r3, #24
 8010d52:	2200      	movs	r2, #0
 8010d54:	2100      	movs	r1, #0
 8010d56:	f7f5 fe99 	bl	8006a8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010d60:	2358      	movs	r3, #88	; 0x58
 8010d62:	2200      	movs	r2, #0
 8010d64:	2180      	movs	r1, #128	; 0x80
 8010d66:	f7f5 fe91 	bl	8006a8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010d70:	2398      	movs	r3, #152	; 0x98
 8010d72:	2200      	movs	r2, #0
 8010d74:	2181      	movs	r1, #129	; 0x81
 8010d76:	f7f5 fe89 	bl	8006a8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010d80:	23d8      	movs	r3, #216	; 0xd8
 8010d82:	2200      	movs	r2, #0
 8010d84:	2101      	movs	r1, #1
 8010d86:	f7f5 fe81 	bl	8006a8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8010d8a:	2300      	movs	r3, #0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	2000487c 	.word	0x2000487c
 8010d98:	40005c00 	.word	0x40005c00

08010d9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010da4:	2300      	movs	r3, #0
 8010da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010da8:	2300      	movs	r3, #0
 8010daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7f4 fc86 	bl	80056c4 <HAL_PCD_Start>
 8010db8:	4603      	mov	r3, r0
 8010dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f000 f964 	bl	801108c <USBD_Get_USB_Status>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b084      	sub	sp, #16
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	4608      	mov	r0, r1
 8010ddc:	4611      	mov	r1, r2
 8010dde:	461a      	mov	r2, r3
 8010de0:	4603      	mov	r3, r0
 8010de2:	70fb      	strb	r3, [r7, #3]
 8010de4:	460b      	mov	r3, r1
 8010de6:	70bb      	strb	r3, [r7, #2]
 8010de8:	4613      	mov	r3, r2
 8010dea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dec:	2300      	movs	r3, #0
 8010dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010df0:	2300      	movs	r3, #0
 8010df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010dfa:	78bb      	ldrb	r3, [r7, #2]
 8010dfc:	883a      	ldrh	r2, [r7, #0]
 8010dfe:	78f9      	ldrb	r1, [r7, #3]
 8010e00:	f7f4 fda2 	bl	8005948 <HAL_PCD_EP_Open>
 8010e04:	4603      	mov	r3, r0
 8010e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e08:	7bfb      	ldrb	r3, [r7, #15]
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f000 f93e 	bl	801108c <USBD_Get_USB_Status>
 8010e10:	4603      	mov	r3, r0
 8010e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b084      	sub	sp, #16
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
 8010e26:	460b      	mov	r3, r1
 8010e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010e38:	78fa      	ldrb	r2, [r7, #3]
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7f4 fde9 	bl	8005a14 <HAL_PCD_EP_Close>
 8010e42:	4603      	mov	r3, r0
 8010e44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e46:	7bfb      	ldrb	r3, [r7, #15]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f000 f91f 	bl	801108c <USBD_Get_USB_Status>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3710      	adds	r7, #16
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010e76:	78fa      	ldrb	r2, [r7, #3]
 8010e78:	4611      	mov	r1, r2
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7f4 ff5d 	bl	8005d3a <HAL_PCD_EP_Flush>
 8010e80:	4603      	mov	r3, r0
 8010e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 f900 	bl	801108c <USBD_Get_USB_Status>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3710      	adds	r7, #16
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b084      	sub	sp, #16
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010eb4:	78fa      	ldrb	r2, [r7, #3]
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7f4 fe8a 	bl	8005bd2 <HAL_PCD_EP_SetStall>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ec2:	7bfb      	ldrb	r3, [r7, #15]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f000 f8e1 	bl	801108c <USBD_Get_USB_Status>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010ef2:	78fa      	ldrb	r2, [r7, #3]
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7f4 fecb 	bl	8005c92 <HAL_PCD_EP_ClrStall>
 8010efc:	4603      	mov	r3, r0
 8010efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 f8c2 	bl	801108c <USBD_Get_USB_Status>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3710      	adds	r7, #16
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}

08010f16 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f16:	b480      	push	{r7}
 8010f18:	b085      	sub	sp, #20
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
 8010f1e:	460b      	mov	r3, r1
 8010f20:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010f28:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	da0c      	bge.n	8010f4c <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f32:	78fb      	ldrb	r3, [r7, #3]
 8010f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f38:	68f9      	ldr	r1, [r7, #12]
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	00db      	lsls	r3, r3, #3
 8010f44:	440b      	add	r3, r1
 8010f46:	3302      	adds	r3, #2
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	e00b      	b.n	8010f64 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f4c:	78fb      	ldrb	r3, [r7, #3]
 8010f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f52:	68f9      	ldr	r1, [r7, #12]
 8010f54:	4613      	mov	r3, r2
 8010f56:	009b      	lsls	r3, r3, #2
 8010f58:	4413      	add	r3, r2
 8010f5a:	00db      	lsls	r3, r3, #3
 8010f5c:	440b      	add	r3, r1
 8010f5e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010f62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3714      	adds	r7, #20
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bc80      	pop	{r7}
 8010f6c:	4770      	bx	lr

08010f6e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b084      	sub	sp, #16
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
 8010f76:	460b      	mov	r3, r1
 8010f78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010f88:	78fa      	ldrb	r2, [r7, #3]
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7f4 fcb6 	bl	80058fe <HAL_PCD_SetAddress>
 8010f92:	4603      	mov	r3, r0
 8010f94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f96:	7bfb      	ldrb	r3, [r7, #15]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 f877 	bl	801108c <USBD_Get_USB_Status>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3710      	adds	r7, #16
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b086      	sub	sp, #24
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	607a      	str	r2, [r7, #4]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	460b      	mov	r3, r1
 8010fba:	72fb      	strb	r3, [r7, #11]
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010fce:	893b      	ldrh	r3, [r7, #8]
 8010fd0:	7af9      	ldrb	r1, [r7, #11]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	f7f4 fdba 	bl	8005b4c <HAL_PCD_EP_Transmit>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fdc:	7dfb      	ldrb	r3, [r7, #23]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f000 f854 	bl	801108c <USBD_Get_USB_Status>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fe8:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3718      	adds	r7, #24
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b086      	sub	sp, #24
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	60f8      	str	r0, [r7, #12]
 8010ffa:	607a      	str	r2, [r7, #4]
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	460b      	mov	r3, r1
 8011000:	72fb      	strb	r3, [r7, #11]
 8011002:	4613      	mov	r3, r2
 8011004:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011006:	2300      	movs	r3, #0
 8011008:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011014:	893b      	ldrh	r3, [r7, #8]
 8011016:	7af9      	ldrb	r1, [r7, #11]
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	f7f4 fd43 	bl	8005aa4 <HAL_PCD_EP_Receive>
 801101e:	4603      	mov	r3, r0
 8011020:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011022:	7dfb      	ldrb	r3, [r7, #23]
 8011024:	4618      	mov	r0, r3
 8011026:	f000 f831 	bl	801108c <USBD_Get_USB_Status>
 801102a:	4603      	mov	r3, r0
 801102c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801102e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3718      	adds	r7, #24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801104a:	78fa      	ldrb	r2, [r7, #3]
 801104c:	4611      	mov	r1, r2
 801104e:	4618      	mov	r0, r3
 8011050:	f7f4 fd65 	bl	8005b1e <HAL_PCD_EP_GetRxCount>
 8011054:	4603      	mov	r3, r0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
	...

08011060 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011068:	4b02      	ldr	r3, [pc, #8]	; (8011074 <USBD_static_malloc+0x14>)
}
 801106a:	4618      	mov	r0, r3
 801106c:	370c      	adds	r7, #12
 801106e:	46bd      	mov	sp, r7
 8011070:	bc80      	pop	{r7}
 8011072:	4770      	bx	lr
 8011074:	20003754 	.word	0x20003754

08011078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]

}
 8011080:	bf00      	nop
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	bc80      	pop	{r7}
 8011088:	4770      	bx	lr
	...

0801108c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801108c:	b480      	push	{r7}
 801108e:	b085      	sub	sp, #20
 8011090:	af00      	add	r7, sp, #0
 8011092:	4603      	mov	r3, r0
 8011094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801109a:	79fb      	ldrb	r3, [r7, #7]
 801109c:	2b03      	cmp	r3, #3
 801109e:	d817      	bhi.n	80110d0 <USBD_Get_USB_Status+0x44>
 80110a0:	a201      	add	r2, pc, #4	; (adr r2, 80110a8 <USBD_Get_USB_Status+0x1c>)
 80110a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a6:	bf00      	nop
 80110a8:	080110b9 	.word	0x080110b9
 80110ac:	080110bf 	.word	0x080110bf
 80110b0:	080110c5 	.word	0x080110c5
 80110b4:	080110cb 	.word	0x080110cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80110b8:	2300      	movs	r3, #0
 80110ba:	73fb      	strb	r3, [r7, #15]
    break;
 80110bc:	e00b      	b.n	80110d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110be:	2302      	movs	r3, #2
 80110c0:	73fb      	strb	r3, [r7, #15]
    break;
 80110c2:	e008      	b.n	80110d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110c4:	2301      	movs	r3, #1
 80110c6:	73fb      	strb	r3, [r7, #15]
    break;
 80110c8:	e005      	b.n	80110d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110ca:	2302      	movs	r3, #2
 80110cc:	73fb      	strb	r3, [r7, #15]
    break;
 80110ce:	e002      	b.n	80110d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80110d0:	2302      	movs	r3, #2
 80110d2:	73fb      	strb	r3, [r7, #15]
    break;
 80110d4:	bf00      	nop
  }
  return usb_status;
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3714      	adds	r7, #20
 80110dc:	46bd      	mov	sp, r7
 80110de:	bc80      	pop	{r7}
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop

080110e4 <__libc_init_array>:
 80110e4:	b570      	push	{r4, r5, r6, lr}
 80110e6:	2500      	movs	r5, #0
 80110e8:	4e0c      	ldr	r6, [pc, #48]	; (801111c <__libc_init_array+0x38>)
 80110ea:	4c0d      	ldr	r4, [pc, #52]	; (8011120 <__libc_init_array+0x3c>)
 80110ec:	1ba4      	subs	r4, r4, r6
 80110ee:	10a4      	asrs	r4, r4, #2
 80110f0:	42a5      	cmp	r5, r4
 80110f2:	d109      	bne.n	8011108 <__libc_init_array+0x24>
 80110f4:	f004 fa70 	bl	80155d8 <_init>
 80110f8:	2500      	movs	r5, #0
 80110fa:	4e0a      	ldr	r6, [pc, #40]	; (8011124 <__libc_init_array+0x40>)
 80110fc:	4c0a      	ldr	r4, [pc, #40]	; (8011128 <__libc_init_array+0x44>)
 80110fe:	1ba4      	subs	r4, r4, r6
 8011100:	10a4      	asrs	r4, r4, #2
 8011102:	42a5      	cmp	r5, r4
 8011104:	d105      	bne.n	8011112 <__libc_init_array+0x2e>
 8011106:	bd70      	pop	{r4, r5, r6, pc}
 8011108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801110c:	4798      	blx	r3
 801110e:	3501      	adds	r5, #1
 8011110:	e7ee      	b.n	80110f0 <__libc_init_array+0xc>
 8011112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011116:	4798      	blx	r3
 8011118:	3501      	adds	r5, #1
 801111a:	e7f2      	b.n	8011102 <__libc_init_array+0x1e>
 801111c:	080196c0 	.word	0x080196c0
 8011120:	080196c0 	.word	0x080196c0
 8011124:	080196c0 	.word	0x080196c0
 8011128:	080196c4 	.word	0x080196c4

0801112c <memcpy>:
 801112c:	b510      	push	{r4, lr}
 801112e:	1e43      	subs	r3, r0, #1
 8011130:	440a      	add	r2, r1
 8011132:	4291      	cmp	r1, r2
 8011134:	d100      	bne.n	8011138 <memcpy+0xc>
 8011136:	bd10      	pop	{r4, pc}
 8011138:	f811 4b01 	ldrb.w	r4, [r1], #1
 801113c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011140:	e7f7      	b.n	8011132 <memcpy+0x6>

08011142 <memset>:
 8011142:	4603      	mov	r3, r0
 8011144:	4402      	add	r2, r0
 8011146:	4293      	cmp	r3, r2
 8011148:	d100      	bne.n	801114c <memset+0xa>
 801114a:	4770      	bx	lr
 801114c:	f803 1b01 	strb.w	r1, [r3], #1
 8011150:	e7f9      	b.n	8011146 <memset+0x4>

08011152 <__cvt>:
 8011152:	2b00      	cmp	r3, #0
 8011154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011158:	461e      	mov	r6, r3
 801115a:	bfbb      	ittet	lt
 801115c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011160:	461e      	movlt	r6, r3
 8011162:	2300      	movge	r3, #0
 8011164:	232d      	movlt	r3, #45	; 0x2d
 8011166:	b088      	sub	sp, #32
 8011168:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801116a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 801116e:	f027 0720 	bic.w	r7, r7, #32
 8011172:	2f46      	cmp	r7, #70	; 0x46
 8011174:	4614      	mov	r4, r2
 8011176:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011178:	700b      	strb	r3, [r1, #0]
 801117a:	d004      	beq.n	8011186 <__cvt+0x34>
 801117c:	2f45      	cmp	r7, #69	; 0x45
 801117e:	d100      	bne.n	8011182 <__cvt+0x30>
 8011180:	3501      	adds	r5, #1
 8011182:	2302      	movs	r3, #2
 8011184:	e000      	b.n	8011188 <__cvt+0x36>
 8011186:	2303      	movs	r3, #3
 8011188:	aa07      	add	r2, sp, #28
 801118a:	9204      	str	r2, [sp, #16]
 801118c:	aa06      	add	r2, sp, #24
 801118e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011192:	e9cd 3500 	strd	r3, r5, [sp]
 8011196:	4622      	mov	r2, r4
 8011198:	4633      	mov	r3, r6
 801119a:	f001 feb9 	bl	8012f10 <_dtoa_r>
 801119e:	2f47      	cmp	r7, #71	; 0x47
 80111a0:	4680      	mov	r8, r0
 80111a2:	d102      	bne.n	80111aa <__cvt+0x58>
 80111a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111a6:	07db      	lsls	r3, r3, #31
 80111a8:	d526      	bpl.n	80111f8 <__cvt+0xa6>
 80111aa:	2f46      	cmp	r7, #70	; 0x46
 80111ac:	eb08 0905 	add.w	r9, r8, r5
 80111b0:	d111      	bne.n	80111d6 <__cvt+0x84>
 80111b2:	f898 3000 	ldrb.w	r3, [r8]
 80111b6:	2b30      	cmp	r3, #48	; 0x30
 80111b8:	d10a      	bne.n	80111d0 <__cvt+0x7e>
 80111ba:	2200      	movs	r2, #0
 80111bc:	2300      	movs	r3, #0
 80111be:	4620      	mov	r0, r4
 80111c0:	4631      	mov	r1, r6
 80111c2:	f7ef fc09 	bl	80009d8 <__aeabi_dcmpeq>
 80111c6:	b918      	cbnz	r0, 80111d0 <__cvt+0x7e>
 80111c8:	f1c5 0501 	rsb	r5, r5, #1
 80111cc:	f8ca 5000 	str.w	r5, [sl]
 80111d0:	f8da 3000 	ldr.w	r3, [sl]
 80111d4:	4499      	add	r9, r3
 80111d6:	2200      	movs	r2, #0
 80111d8:	2300      	movs	r3, #0
 80111da:	4620      	mov	r0, r4
 80111dc:	4631      	mov	r1, r6
 80111de:	f7ef fbfb 	bl	80009d8 <__aeabi_dcmpeq>
 80111e2:	b938      	cbnz	r0, 80111f4 <__cvt+0xa2>
 80111e4:	2230      	movs	r2, #48	; 0x30
 80111e6:	9b07      	ldr	r3, [sp, #28]
 80111e8:	454b      	cmp	r3, r9
 80111ea:	d205      	bcs.n	80111f8 <__cvt+0xa6>
 80111ec:	1c59      	adds	r1, r3, #1
 80111ee:	9107      	str	r1, [sp, #28]
 80111f0:	701a      	strb	r2, [r3, #0]
 80111f2:	e7f8      	b.n	80111e6 <__cvt+0x94>
 80111f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80111f8:	4640      	mov	r0, r8
 80111fa:	9b07      	ldr	r3, [sp, #28]
 80111fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80111fe:	eba3 0308 	sub.w	r3, r3, r8
 8011202:	6013      	str	r3, [r2, #0]
 8011204:	b008      	add	sp, #32
 8011206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801120a <__exponent>:
 801120a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801120c:	2900      	cmp	r1, #0
 801120e:	bfb4      	ite	lt
 8011210:	232d      	movlt	r3, #45	; 0x2d
 8011212:	232b      	movge	r3, #43	; 0x2b
 8011214:	4604      	mov	r4, r0
 8011216:	bfb8      	it	lt
 8011218:	4249      	neglt	r1, r1
 801121a:	2909      	cmp	r1, #9
 801121c:	f804 2b02 	strb.w	r2, [r4], #2
 8011220:	7043      	strb	r3, [r0, #1]
 8011222:	dd21      	ble.n	8011268 <__exponent+0x5e>
 8011224:	f10d 0307 	add.w	r3, sp, #7
 8011228:	461f      	mov	r7, r3
 801122a:	260a      	movs	r6, #10
 801122c:	fb91 f5f6 	sdiv	r5, r1, r6
 8011230:	fb06 1115 	mls	r1, r6, r5, r1
 8011234:	2d09      	cmp	r5, #9
 8011236:	f101 0130 	add.w	r1, r1, #48	; 0x30
 801123a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801123e:	f103 32ff 	add.w	r2, r3, #4294967295
 8011242:	4629      	mov	r1, r5
 8011244:	dc09      	bgt.n	801125a <__exponent+0x50>
 8011246:	3130      	adds	r1, #48	; 0x30
 8011248:	3b02      	subs	r3, #2
 801124a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801124e:	42bb      	cmp	r3, r7
 8011250:	4622      	mov	r2, r4
 8011252:	d304      	bcc.n	801125e <__exponent+0x54>
 8011254:	1a10      	subs	r0, r2, r0
 8011256:	b003      	add	sp, #12
 8011258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125a:	4613      	mov	r3, r2
 801125c:	e7e6      	b.n	801122c <__exponent+0x22>
 801125e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011262:	f804 2b01 	strb.w	r2, [r4], #1
 8011266:	e7f2      	b.n	801124e <__exponent+0x44>
 8011268:	2330      	movs	r3, #48	; 0x30
 801126a:	4419      	add	r1, r3
 801126c:	7083      	strb	r3, [r0, #2]
 801126e:	1d02      	adds	r2, r0, #4
 8011270:	70c1      	strb	r1, [r0, #3]
 8011272:	e7ef      	b.n	8011254 <__exponent+0x4a>

08011274 <_printf_float>:
 8011274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011278:	b091      	sub	sp, #68	; 0x44
 801127a:	460c      	mov	r4, r1
 801127c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801127e:	4693      	mov	fp, r2
 8011280:	461e      	mov	r6, r3
 8011282:	4605      	mov	r5, r0
 8011284:	f003 f8a0 	bl	80143c8 <_localeconv_r>
 8011288:	6803      	ldr	r3, [r0, #0]
 801128a:	4618      	mov	r0, r3
 801128c:	9309      	str	r3, [sp, #36]	; 0x24
 801128e:	f7ee ff77 	bl	8000180 <strlen>
 8011292:	2300      	movs	r3, #0
 8011294:	930e      	str	r3, [sp, #56]	; 0x38
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	900a      	str	r0, [sp, #40]	; 0x28
 801129a:	3307      	adds	r3, #7
 801129c:	f023 0307 	bic.w	r3, r3, #7
 80112a0:	f103 0208 	add.w	r2, r3, #8
 80112a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80112a8:	f8d4 a000 	ldr.w	sl, [r4]
 80112ac:	603a      	str	r2, [r7, #0]
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80112b6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80112ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80112be:	930b      	str	r3, [sp, #44]	; 0x2c
 80112c0:	f04f 32ff 	mov.w	r2, #4294967295
 80112c4:	4ba6      	ldr	r3, [pc, #664]	; (8011560 <_printf_float+0x2ec>)
 80112c6:	4638      	mov	r0, r7
 80112c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112ca:	f7ef fbb7 	bl	8000a3c <__aeabi_dcmpun>
 80112ce:	bb68      	cbnz	r0, 801132c <_printf_float+0xb8>
 80112d0:	f04f 32ff 	mov.w	r2, #4294967295
 80112d4:	4ba2      	ldr	r3, [pc, #648]	; (8011560 <_printf_float+0x2ec>)
 80112d6:	4638      	mov	r0, r7
 80112d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112da:	f7ef fb91 	bl	8000a00 <__aeabi_dcmple>
 80112de:	bb28      	cbnz	r0, 801132c <_printf_float+0xb8>
 80112e0:	2200      	movs	r2, #0
 80112e2:	2300      	movs	r3, #0
 80112e4:	4638      	mov	r0, r7
 80112e6:	4649      	mov	r1, r9
 80112e8:	f7ef fb80 	bl	80009ec <__aeabi_dcmplt>
 80112ec:	b110      	cbz	r0, 80112f4 <_printf_float+0x80>
 80112ee:	232d      	movs	r3, #45	; 0x2d
 80112f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112f4:	4f9b      	ldr	r7, [pc, #620]	; (8011564 <_printf_float+0x2f0>)
 80112f6:	4b9c      	ldr	r3, [pc, #624]	; (8011568 <_printf_float+0x2f4>)
 80112f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80112fc:	bf98      	it	ls
 80112fe:	461f      	movls	r7, r3
 8011300:	2303      	movs	r3, #3
 8011302:	f04f 0900 	mov.w	r9, #0
 8011306:	6123      	str	r3, [r4, #16]
 8011308:	f02a 0304 	bic.w	r3, sl, #4
 801130c:	6023      	str	r3, [r4, #0]
 801130e:	9600      	str	r6, [sp, #0]
 8011310:	465b      	mov	r3, fp
 8011312:	aa0f      	add	r2, sp, #60	; 0x3c
 8011314:	4621      	mov	r1, r4
 8011316:	4628      	mov	r0, r5
 8011318:	f000 f9e2 	bl	80116e0 <_printf_common>
 801131c:	3001      	adds	r0, #1
 801131e:	f040 8090 	bne.w	8011442 <_printf_float+0x1ce>
 8011322:	f04f 30ff 	mov.w	r0, #4294967295
 8011326:	b011      	add	sp, #68	; 0x44
 8011328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132c:	463a      	mov	r2, r7
 801132e:	464b      	mov	r3, r9
 8011330:	4638      	mov	r0, r7
 8011332:	4649      	mov	r1, r9
 8011334:	f7ef fb82 	bl	8000a3c <__aeabi_dcmpun>
 8011338:	b110      	cbz	r0, 8011340 <_printf_float+0xcc>
 801133a:	4f8c      	ldr	r7, [pc, #560]	; (801156c <_printf_float+0x2f8>)
 801133c:	4b8c      	ldr	r3, [pc, #560]	; (8011570 <_printf_float+0x2fc>)
 801133e:	e7db      	b.n	80112f8 <_printf_float+0x84>
 8011340:	6863      	ldr	r3, [r4, #4]
 8011342:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8011346:	1c59      	adds	r1, r3, #1
 8011348:	a80d      	add	r0, sp, #52	; 0x34
 801134a:	a90e      	add	r1, sp, #56	; 0x38
 801134c:	d140      	bne.n	80113d0 <_printf_float+0x15c>
 801134e:	2306      	movs	r3, #6
 8011350:	6063      	str	r3, [r4, #4]
 8011352:	f04f 0c00 	mov.w	ip, #0
 8011356:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 801135a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801135e:	6863      	ldr	r3, [r4, #4]
 8011360:	6022      	str	r2, [r4, #0]
 8011362:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011366:	9300      	str	r3, [sp, #0]
 8011368:	463a      	mov	r2, r7
 801136a:	464b      	mov	r3, r9
 801136c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8011370:	4628      	mov	r0, r5
 8011372:	f7ff feee 	bl	8011152 <__cvt>
 8011376:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 801137a:	2b47      	cmp	r3, #71	; 0x47
 801137c:	4607      	mov	r7, r0
 801137e:	d109      	bne.n	8011394 <_printf_float+0x120>
 8011380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011382:	1cd8      	adds	r0, r3, #3
 8011384:	db02      	blt.n	801138c <_printf_float+0x118>
 8011386:	6862      	ldr	r2, [r4, #4]
 8011388:	4293      	cmp	r3, r2
 801138a:	dd47      	ble.n	801141c <_printf_float+0x1a8>
 801138c:	f1a8 0802 	sub.w	r8, r8, #2
 8011390:	fa5f f888 	uxtb.w	r8, r8
 8011394:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011398:	990d      	ldr	r1, [sp, #52]	; 0x34
 801139a:	d824      	bhi.n	80113e6 <_printf_float+0x172>
 801139c:	3901      	subs	r1, #1
 801139e:	4642      	mov	r2, r8
 80113a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80113a4:	910d      	str	r1, [sp, #52]	; 0x34
 80113a6:	f7ff ff30 	bl	801120a <__exponent>
 80113aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113ac:	4681      	mov	r9, r0
 80113ae:	1813      	adds	r3, r2, r0
 80113b0:	2a01      	cmp	r2, #1
 80113b2:	6123      	str	r3, [r4, #16]
 80113b4:	dc02      	bgt.n	80113bc <_printf_float+0x148>
 80113b6:	6822      	ldr	r2, [r4, #0]
 80113b8:	07d1      	lsls	r1, r2, #31
 80113ba:	d501      	bpl.n	80113c0 <_printf_float+0x14c>
 80113bc:	3301      	adds	r3, #1
 80113be:	6123      	str	r3, [r4, #16]
 80113c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d0a2      	beq.n	801130e <_printf_float+0x9a>
 80113c8:	232d      	movs	r3, #45	; 0x2d
 80113ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113ce:	e79e      	b.n	801130e <_printf_float+0x9a>
 80113d0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80113d4:	f000 816e 	beq.w	80116b4 <_printf_float+0x440>
 80113d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80113dc:	d1b9      	bne.n	8011352 <_printf_float+0xde>
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1b7      	bne.n	8011352 <_printf_float+0xde>
 80113e2:	2301      	movs	r3, #1
 80113e4:	e7b4      	b.n	8011350 <_printf_float+0xdc>
 80113e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80113ea:	d119      	bne.n	8011420 <_printf_float+0x1ac>
 80113ec:	2900      	cmp	r1, #0
 80113ee:	6863      	ldr	r3, [r4, #4]
 80113f0:	dd0c      	ble.n	801140c <_printf_float+0x198>
 80113f2:	6121      	str	r1, [r4, #16]
 80113f4:	b913      	cbnz	r3, 80113fc <_printf_float+0x188>
 80113f6:	6822      	ldr	r2, [r4, #0]
 80113f8:	07d2      	lsls	r2, r2, #31
 80113fa:	d502      	bpl.n	8011402 <_printf_float+0x18e>
 80113fc:	3301      	adds	r3, #1
 80113fe:	440b      	add	r3, r1
 8011400:	6123      	str	r3, [r4, #16]
 8011402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011404:	f04f 0900 	mov.w	r9, #0
 8011408:	65a3      	str	r3, [r4, #88]	; 0x58
 801140a:	e7d9      	b.n	80113c0 <_printf_float+0x14c>
 801140c:	b913      	cbnz	r3, 8011414 <_printf_float+0x1a0>
 801140e:	6822      	ldr	r2, [r4, #0]
 8011410:	07d0      	lsls	r0, r2, #31
 8011412:	d501      	bpl.n	8011418 <_printf_float+0x1a4>
 8011414:	3302      	adds	r3, #2
 8011416:	e7f3      	b.n	8011400 <_printf_float+0x18c>
 8011418:	2301      	movs	r3, #1
 801141a:	e7f1      	b.n	8011400 <_printf_float+0x18c>
 801141c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8011420:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8011424:	4293      	cmp	r3, r2
 8011426:	db05      	blt.n	8011434 <_printf_float+0x1c0>
 8011428:	6822      	ldr	r2, [r4, #0]
 801142a:	6123      	str	r3, [r4, #16]
 801142c:	07d1      	lsls	r1, r2, #31
 801142e:	d5e8      	bpl.n	8011402 <_printf_float+0x18e>
 8011430:	3301      	adds	r3, #1
 8011432:	e7e5      	b.n	8011400 <_printf_float+0x18c>
 8011434:	2b00      	cmp	r3, #0
 8011436:	bfcc      	ite	gt
 8011438:	2301      	movgt	r3, #1
 801143a:	f1c3 0302 	rsble	r3, r3, #2
 801143e:	4413      	add	r3, r2
 8011440:	e7de      	b.n	8011400 <_printf_float+0x18c>
 8011442:	6823      	ldr	r3, [r4, #0]
 8011444:	055a      	lsls	r2, r3, #21
 8011446:	d407      	bmi.n	8011458 <_printf_float+0x1e4>
 8011448:	6923      	ldr	r3, [r4, #16]
 801144a:	463a      	mov	r2, r7
 801144c:	4659      	mov	r1, fp
 801144e:	4628      	mov	r0, r5
 8011450:	47b0      	blx	r6
 8011452:	3001      	adds	r0, #1
 8011454:	d129      	bne.n	80114aa <_printf_float+0x236>
 8011456:	e764      	b.n	8011322 <_printf_float+0xae>
 8011458:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801145c:	f240 80d7 	bls.w	801160e <_printf_float+0x39a>
 8011460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011464:	2200      	movs	r2, #0
 8011466:	2300      	movs	r3, #0
 8011468:	f7ef fab6 	bl	80009d8 <__aeabi_dcmpeq>
 801146c:	b388      	cbz	r0, 80114d2 <_printf_float+0x25e>
 801146e:	2301      	movs	r3, #1
 8011470:	4a40      	ldr	r2, [pc, #256]	; (8011574 <_printf_float+0x300>)
 8011472:	4659      	mov	r1, fp
 8011474:	4628      	mov	r0, r5
 8011476:	47b0      	blx	r6
 8011478:	3001      	adds	r0, #1
 801147a:	f43f af52 	beq.w	8011322 <_printf_float+0xae>
 801147e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011482:	429a      	cmp	r2, r3
 8011484:	db02      	blt.n	801148c <_printf_float+0x218>
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	07d8      	lsls	r0, r3, #31
 801148a:	d50e      	bpl.n	80114aa <_printf_float+0x236>
 801148c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011490:	4659      	mov	r1, fp
 8011492:	4628      	mov	r0, r5
 8011494:	47b0      	blx	r6
 8011496:	3001      	adds	r0, #1
 8011498:	f43f af43 	beq.w	8011322 <_printf_float+0xae>
 801149c:	2700      	movs	r7, #0
 801149e:	f104 081a 	add.w	r8, r4, #26
 80114a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114a4:	3b01      	subs	r3, #1
 80114a6:	42bb      	cmp	r3, r7
 80114a8:	dc09      	bgt.n	80114be <_printf_float+0x24a>
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	079f      	lsls	r7, r3, #30
 80114ae:	f100 80fd 	bmi.w	80116ac <_printf_float+0x438>
 80114b2:	68e0      	ldr	r0, [r4, #12]
 80114b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114b6:	4298      	cmp	r0, r3
 80114b8:	bfb8      	it	lt
 80114ba:	4618      	movlt	r0, r3
 80114bc:	e733      	b.n	8011326 <_printf_float+0xb2>
 80114be:	2301      	movs	r3, #1
 80114c0:	4642      	mov	r2, r8
 80114c2:	4659      	mov	r1, fp
 80114c4:	4628      	mov	r0, r5
 80114c6:	47b0      	blx	r6
 80114c8:	3001      	adds	r0, #1
 80114ca:	f43f af2a 	beq.w	8011322 <_printf_float+0xae>
 80114ce:	3701      	adds	r7, #1
 80114d0:	e7e7      	b.n	80114a2 <_printf_float+0x22e>
 80114d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	dc2b      	bgt.n	8011530 <_printf_float+0x2bc>
 80114d8:	2301      	movs	r3, #1
 80114da:	4a26      	ldr	r2, [pc, #152]	; (8011574 <_printf_float+0x300>)
 80114dc:	4659      	mov	r1, fp
 80114de:	4628      	mov	r0, r5
 80114e0:	47b0      	blx	r6
 80114e2:	3001      	adds	r0, #1
 80114e4:	f43f af1d 	beq.w	8011322 <_printf_float+0xae>
 80114e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114ea:	b923      	cbnz	r3, 80114f6 <_printf_float+0x282>
 80114ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114ee:	b913      	cbnz	r3, 80114f6 <_printf_float+0x282>
 80114f0:	6823      	ldr	r3, [r4, #0]
 80114f2:	07d9      	lsls	r1, r3, #31
 80114f4:	d5d9      	bpl.n	80114aa <_printf_float+0x236>
 80114f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114fa:	4659      	mov	r1, fp
 80114fc:	4628      	mov	r0, r5
 80114fe:	47b0      	blx	r6
 8011500:	3001      	adds	r0, #1
 8011502:	f43f af0e 	beq.w	8011322 <_printf_float+0xae>
 8011506:	f04f 0800 	mov.w	r8, #0
 801150a:	f104 091a 	add.w	r9, r4, #26
 801150e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011510:	425b      	negs	r3, r3
 8011512:	4543      	cmp	r3, r8
 8011514:	dc01      	bgt.n	801151a <_printf_float+0x2a6>
 8011516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011518:	e797      	b.n	801144a <_printf_float+0x1d6>
 801151a:	2301      	movs	r3, #1
 801151c:	464a      	mov	r2, r9
 801151e:	4659      	mov	r1, fp
 8011520:	4628      	mov	r0, r5
 8011522:	47b0      	blx	r6
 8011524:	3001      	adds	r0, #1
 8011526:	f43f aefc 	beq.w	8011322 <_printf_float+0xae>
 801152a:	f108 0801 	add.w	r8, r8, #1
 801152e:	e7ee      	b.n	801150e <_printf_float+0x29a>
 8011530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011534:	429a      	cmp	r2, r3
 8011536:	bfa8      	it	ge
 8011538:	461a      	movge	r2, r3
 801153a:	2a00      	cmp	r2, #0
 801153c:	4690      	mov	r8, r2
 801153e:	dd07      	ble.n	8011550 <_printf_float+0x2dc>
 8011540:	4613      	mov	r3, r2
 8011542:	4659      	mov	r1, fp
 8011544:	463a      	mov	r2, r7
 8011546:	4628      	mov	r0, r5
 8011548:	47b0      	blx	r6
 801154a:	3001      	adds	r0, #1
 801154c:	f43f aee9 	beq.w	8011322 <_printf_float+0xae>
 8011550:	f104 031a 	add.w	r3, r4, #26
 8011554:	f04f 0a00 	mov.w	sl, #0
 8011558:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801155c:	930b      	str	r3, [sp, #44]	; 0x2c
 801155e:	e015      	b.n	801158c <_printf_float+0x318>
 8011560:	7fefffff 	.word	0x7fefffff
 8011564:	080193a0 	.word	0x080193a0
 8011568:	0801939c 	.word	0x0801939c
 801156c:	080193a8 	.word	0x080193a8
 8011570:	080193a4 	.word	0x080193a4
 8011574:	080193ac 	.word	0x080193ac
 8011578:	2301      	movs	r3, #1
 801157a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801157c:	4659      	mov	r1, fp
 801157e:	4628      	mov	r0, r5
 8011580:	47b0      	blx	r6
 8011582:	3001      	adds	r0, #1
 8011584:	f43f aecd 	beq.w	8011322 <_printf_float+0xae>
 8011588:	f10a 0a01 	add.w	sl, sl, #1
 801158c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011590:	eba9 0308 	sub.w	r3, r9, r8
 8011594:	4553      	cmp	r3, sl
 8011596:	dcef      	bgt.n	8011578 <_printf_float+0x304>
 8011598:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801159c:	429a      	cmp	r2, r3
 801159e:	444f      	add	r7, r9
 80115a0:	db14      	blt.n	80115cc <_printf_float+0x358>
 80115a2:	6823      	ldr	r3, [r4, #0]
 80115a4:	07da      	lsls	r2, r3, #31
 80115a6:	d411      	bmi.n	80115cc <_printf_float+0x358>
 80115a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80115ac:	eba3 0209 	sub.w	r2, r3, r9
 80115b0:	eba3 0901 	sub.w	r9, r3, r1
 80115b4:	4591      	cmp	r9, r2
 80115b6:	bfa8      	it	ge
 80115b8:	4691      	movge	r9, r2
 80115ba:	f1b9 0f00 	cmp.w	r9, #0
 80115be:	dc0d      	bgt.n	80115dc <_printf_float+0x368>
 80115c0:	2700      	movs	r7, #0
 80115c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80115c6:	f104 081a 	add.w	r8, r4, #26
 80115ca:	e018      	b.n	80115fe <_printf_float+0x38a>
 80115cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80115d0:	4659      	mov	r1, fp
 80115d2:	4628      	mov	r0, r5
 80115d4:	47b0      	blx	r6
 80115d6:	3001      	adds	r0, #1
 80115d8:	d1e6      	bne.n	80115a8 <_printf_float+0x334>
 80115da:	e6a2      	b.n	8011322 <_printf_float+0xae>
 80115dc:	464b      	mov	r3, r9
 80115de:	463a      	mov	r2, r7
 80115e0:	4659      	mov	r1, fp
 80115e2:	4628      	mov	r0, r5
 80115e4:	47b0      	blx	r6
 80115e6:	3001      	adds	r0, #1
 80115e8:	d1ea      	bne.n	80115c0 <_printf_float+0x34c>
 80115ea:	e69a      	b.n	8011322 <_printf_float+0xae>
 80115ec:	2301      	movs	r3, #1
 80115ee:	4642      	mov	r2, r8
 80115f0:	4659      	mov	r1, fp
 80115f2:	4628      	mov	r0, r5
 80115f4:	47b0      	blx	r6
 80115f6:	3001      	adds	r0, #1
 80115f8:	f43f ae93 	beq.w	8011322 <_printf_float+0xae>
 80115fc:	3701      	adds	r7, #1
 80115fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011602:	1a9b      	subs	r3, r3, r2
 8011604:	eba3 0309 	sub.w	r3, r3, r9
 8011608:	42bb      	cmp	r3, r7
 801160a:	dcef      	bgt.n	80115ec <_printf_float+0x378>
 801160c:	e74d      	b.n	80114aa <_printf_float+0x236>
 801160e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011610:	2a01      	cmp	r2, #1
 8011612:	dc01      	bgt.n	8011618 <_printf_float+0x3a4>
 8011614:	07db      	lsls	r3, r3, #31
 8011616:	d538      	bpl.n	801168a <_printf_float+0x416>
 8011618:	2301      	movs	r3, #1
 801161a:	463a      	mov	r2, r7
 801161c:	4659      	mov	r1, fp
 801161e:	4628      	mov	r0, r5
 8011620:	47b0      	blx	r6
 8011622:	3001      	adds	r0, #1
 8011624:	f43f ae7d 	beq.w	8011322 <_printf_float+0xae>
 8011628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801162c:	4659      	mov	r1, fp
 801162e:	4628      	mov	r0, r5
 8011630:	47b0      	blx	r6
 8011632:	3001      	adds	r0, #1
 8011634:	f107 0701 	add.w	r7, r7, #1
 8011638:	f43f ae73 	beq.w	8011322 <_printf_float+0xae>
 801163c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011642:	2200      	movs	r2, #0
 8011644:	f103 38ff 	add.w	r8, r3, #4294967295
 8011648:	2300      	movs	r3, #0
 801164a:	f7ef f9c5 	bl	80009d8 <__aeabi_dcmpeq>
 801164e:	b9c0      	cbnz	r0, 8011682 <_printf_float+0x40e>
 8011650:	4643      	mov	r3, r8
 8011652:	463a      	mov	r2, r7
 8011654:	4659      	mov	r1, fp
 8011656:	4628      	mov	r0, r5
 8011658:	47b0      	blx	r6
 801165a:	3001      	adds	r0, #1
 801165c:	d10d      	bne.n	801167a <_printf_float+0x406>
 801165e:	e660      	b.n	8011322 <_printf_float+0xae>
 8011660:	2301      	movs	r3, #1
 8011662:	4642      	mov	r2, r8
 8011664:	4659      	mov	r1, fp
 8011666:	4628      	mov	r0, r5
 8011668:	47b0      	blx	r6
 801166a:	3001      	adds	r0, #1
 801166c:	f43f ae59 	beq.w	8011322 <_printf_float+0xae>
 8011670:	3701      	adds	r7, #1
 8011672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011674:	3b01      	subs	r3, #1
 8011676:	42bb      	cmp	r3, r7
 8011678:	dcf2      	bgt.n	8011660 <_printf_float+0x3ec>
 801167a:	464b      	mov	r3, r9
 801167c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011680:	e6e4      	b.n	801144c <_printf_float+0x1d8>
 8011682:	2700      	movs	r7, #0
 8011684:	f104 081a 	add.w	r8, r4, #26
 8011688:	e7f3      	b.n	8011672 <_printf_float+0x3fe>
 801168a:	2301      	movs	r3, #1
 801168c:	e7e1      	b.n	8011652 <_printf_float+0x3de>
 801168e:	2301      	movs	r3, #1
 8011690:	4642      	mov	r2, r8
 8011692:	4659      	mov	r1, fp
 8011694:	4628      	mov	r0, r5
 8011696:	47b0      	blx	r6
 8011698:	3001      	adds	r0, #1
 801169a:	f43f ae42 	beq.w	8011322 <_printf_float+0xae>
 801169e:	3701      	adds	r7, #1
 80116a0:	68e3      	ldr	r3, [r4, #12]
 80116a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116a4:	1a9b      	subs	r3, r3, r2
 80116a6:	42bb      	cmp	r3, r7
 80116a8:	dcf1      	bgt.n	801168e <_printf_float+0x41a>
 80116aa:	e702      	b.n	80114b2 <_printf_float+0x23e>
 80116ac:	2700      	movs	r7, #0
 80116ae:	f104 0819 	add.w	r8, r4, #25
 80116b2:	e7f5      	b.n	80116a0 <_printf_float+0x42c>
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f43f ae94 	beq.w	80113e2 <_printf_float+0x16e>
 80116ba:	f04f 0c00 	mov.w	ip, #0
 80116be:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80116c2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80116c6:	6022      	str	r2, [r4, #0]
 80116c8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80116cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80116d0:	9300      	str	r3, [sp, #0]
 80116d2:	463a      	mov	r2, r7
 80116d4:	464b      	mov	r3, r9
 80116d6:	4628      	mov	r0, r5
 80116d8:	f7ff fd3b 	bl	8011152 <__cvt>
 80116dc:	4607      	mov	r7, r0
 80116de:	e64f      	b.n	8011380 <_printf_float+0x10c>

080116e0 <_printf_common>:
 80116e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116e4:	4691      	mov	r9, r2
 80116e6:	461f      	mov	r7, r3
 80116e8:	688a      	ldr	r2, [r1, #8]
 80116ea:	690b      	ldr	r3, [r1, #16]
 80116ec:	4606      	mov	r6, r0
 80116ee:	4293      	cmp	r3, r2
 80116f0:	bfb8      	it	lt
 80116f2:	4613      	movlt	r3, r2
 80116f4:	f8c9 3000 	str.w	r3, [r9]
 80116f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80116fc:	460c      	mov	r4, r1
 80116fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011702:	b112      	cbz	r2, 801170a <_printf_common+0x2a>
 8011704:	3301      	adds	r3, #1
 8011706:	f8c9 3000 	str.w	r3, [r9]
 801170a:	6823      	ldr	r3, [r4, #0]
 801170c:	0699      	lsls	r1, r3, #26
 801170e:	bf42      	ittt	mi
 8011710:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011714:	3302      	addmi	r3, #2
 8011716:	f8c9 3000 	strmi.w	r3, [r9]
 801171a:	6825      	ldr	r5, [r4, #0]
 801171c:	f015 0506 	ands.w	r5, r5, #6
 8011720:	d107      	bne.n	8011732 <_printf_common+0x52>
 8011722:	f104 0a19 	add.w	sl, r4, #25
 8011726:	68e3      	ldr	r3, [r4, #12]
 8011728:	f8d9 2000 	ldr.w	r2, [r9]
 801172c:	1a9b      	subs	r3, r3, r2
 801172e:	42ab      	cmp	r3, r5
 8011730:	dc29      	bgt.n	8011786 <_printf_common+0xa6>
 8011732:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011736:	6822      	ldr	r2, [r4, #0]
 8011738:	3300      	adds	r3, #0
 801173a:	bf18      	it	ne
 801173c:	2301      	movne	r3, #1
 801173e:	0692      	lsls	r2, r2, #26
 8011740:	d42e      	bmi.n	80117a0 <_printf_common+0xc0>
 8011742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011746:	4639      	mov	r1, r7
 8011748:	4630      	mov	r0, r6
 801174a:	47c0      	blx	r8
 801174c:	3001      	adds	r0, #1
 801174e:	d021      	beq.n	8011794 <_printf_common+0xb4>
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	68e5      	ldr	r5, [r4, #12]
 8011754:	f003 0306 	and.w	r3, r3, #6
 8011758:	2b04      	cmp	r3, #4
 801175a:	bf18      	it	ne
 801175c:	2500      	movne	r5, #0
 801175e:	f8d9 2000 	ldr.w	r2, [r9]
 8011762:	f04f 0900 	mov.w	r9, #0
 8011766:	bf08      	it	eq
 8011768:	1aad      	subeq	r5, r5, r2
 801176a:	68a3      	ldr	r3, [r4, #8]
 801176c:	6922      	ldr	r2, [r4, #16]
 801176e:	bf08      	it	eq
 8011770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011774:	4293      	cmp	r3, r2
 8011776:	bfc4      	itt	gt
 8011778:	1a9b      	subgt	r3, r3, r2
 801177a:	18ed      	addgt	r5, r5, r3
 801177c:	341a      	adds	r4, #26
 801177e:	454d      	cmp	r5, r9
 8011780:	d11a      	bne.n	80117b8 <_printf_common+0xd8>
 8011782:	2000      	movs	r0, #0
 8011784:	e008      	b.n	8011798 <_printf_common+0xb8>
 8011786:	2301      	movs	r3, #1
 8011788:	4652      	mov	r2, sl
 801178a:	4639      	mov	r1, r7
 801178c:	4630      	mov	r0, r6
 801178e:	47c0      	blx	r8
 8011790:	3001      	adds	r0, #1
 8011792:	d103      	bne.n	801179c <_printf_common+0xbc>
 8011794:	f04f 30ff 	mov.w	r0, #4294967295
 8011798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801179c:	3501      	adds	r5, #1
 801179e:	e7c2      	b.n	8011726 <_printf_common+0x46>
 80117a0:	2030      	movs	r0, #48	; 0x30
 80117a2:	18e1      	adds	r1, r4, r3
 80117a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117a8:	1c5a      	adds	r2, r3, #1
 80117aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117ae:	4422      	add	r2, r4
 80117b0:	3302      	adds	r3, #2
 80117b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117b6:	e7c4      	b.n	8011742 <_printf_common+0x62>
 80117b8:	2301      	movs	r3, #1
 80117ba:	4622      	mov	r2, r4
 80117bc:	4639      	mov	r1, r7
 80117be:	4630      	mov	r0, r6
 80117c0:	47c0      	blx	r8
 80117c2:	3001      	adds	r0, #1
 80117c4:	d0e6      	beq.n	8011794 <_printf_common+0xb4>
 80117c6:	f109 0901 	add.w	r9, r9, #1
 80117ca:	e7d8      	b.n	801177e <_printf_common+0x9e>

080117cc <_printf_i>:
 80117cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80117d4:	460c      	mov	r4, r1
 80117d6:	7e09      	ldrb	r1, [r1, #24]
 80117d8:	b085      	sub	sp, #20
 80117da:	296e      	cmp	r1, #110	; 0x6e
 80117dc:	4617      	mov	r7, r2
 80117de:	4606      	mov	r6, r0
 80117e0:	4698      	mov	r8, r3
 80117e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117e4:	f000 80b3 	beq.w	801194e <_printf_i+0x182>
 80117e8:	d822      	bhi.n	8011830 <_printf_i+0x64>
 80117ea:	2963      	cmp	r1, #99	; 0x63
 80117ec:	d036      	beq.n	801185c <_printf_i+0x90>
 80117ee:	d80a      	bhi.n	8011806 <_printf_i+0x3a>
 80117f0:	2900      	cmp	r1, #0
 80117f2:	f000 80b9 	beq.w	8011968 <_printf_i+0x19c>
 80117f6:	2958      	cmp	r1, #88	; 0x58
 80117f8:	f000 8083 	beq.w	8011902 <_printf_i+0x136>
 80117fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011800:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011804:	e032      	b.n	801186c <_printf_i+0xa0>
 8011806:	2964      	cmp	r1, #100	; 0x64
 8011808:	d001      	beq.n	801180e <_printf_i+0x42>
 801180a:	2969      	cmp	r1, #105	; 0x69
 801180c:	d1f6      	bne.n	80117fc <_printf_i+0x30>
 801180e:	6820      	ldr	r0, [r4, #0]
 8011810:	6813      	ldr	r3, [r2, #0]
 8011812:	0605      	lsls	r5, r0, #24
 8011814:	f103 0104 	add.w	r1, r3, #4
 8011818:	d52a      	bpl.n	8011870 <_printf_i+0xa4>
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	6011      	str	r1, [r2, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	da03      	bge.n	801182a <_printf_i+0x5e>
 8011822:	222d      	movs	r2, #45	; 0x2d
 8011824:	425b      	negs	r3, r3
 8011826:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801182a:	486f      	ldr	r0, [pc, #444]	; (80119e8 <_printf_i+0x21c>)
 801182c:	220a      	movs	r2, #10
 801182e:	e039      	b.n	80118a4 <_printf_i+0xd8>
 8011830:	2973      	cmp	r1, #115	; 0x73
 8011832:	f000 809d 	beq.w	8011970 <_printf_i+0x1a4>
 8011836:	d808      	bhi.n	801184a <_printf_i+0x7e>
 8011838:	296f      	cmp	r1, #111	; 0x6f
 801183a:	d020      	beq.n	801187e <_printf_i+0xb2>
 801183c:	2970      	cmp	r1, #112	; 0x70
 801183e:	d1dd      	bne.n	80117fc <_printf_i+0x30>
 8011840:	6823      	ldr	r3, [r4, #0]
 8011842:	f043 0320 	orr.w	r3, r3, #32
 8011846:	6023      	str	r3, [r4, #0]
 8011848:	e003      	b.n	8011852 <_printf_i+0x86>
 801184a:	2975      	cmp	r1, #117	; 0x75
 801184c:	d017      	beq.n	801187e <_printf_i+0xb2>
 801184e:	2978      	cmp	r1, #120	; 0x78
 8011850:	d1d4      	bne.n	80117fc <_printf_i+0x30>
 8011852:	2378      	movs	r3, #120	; 0x78
 8011854:	4865      	ldr	r0, [pc, #404]	; (80119ec <_printf_i+0x220>)
 8011856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801185a:	e055      	b.n	8011908 <_printf_i+0x13c>
 801185c:	6813      	ldr	r3, [r2, #0]
 801185e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011862:	1d19      	adds	r1, r3, #4
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	6011      	str	r1, [r2, #0]
 8011868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801186c:	2301      	movs	r3, #1
 801186e:	e08c      	b.n	801198a <_printf_i+0x1be>
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011876:	6011      	str	r1, [r2, #0]
 8011878:	bf18      	it	ne
 801187a:	b21b      	sxthne	r3, r3
 801187c:	e7cf      	b.n	801181e <_printf_i+0x52>
 801187e:	6813      	ldr	r3, [r2, #0]
 8011880:	6825      	ldr	r5, [r4, #0]
 8011882:	1d18      	adds	r0, r3, #4
 8011884:	6010      	str	r0, [r2, #0]
 8011886:	0628      	lsls	r0, r5, #24
 8011888:	d501      	bpl.n	801188e <_printf_i+0xc2>
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	e002      	b.n	8011894 <_printf_i+0xc8>
 801188e:	0668      	lsls	r0, r5, #25
 8011890:	d5fb      	bpl.n	801188a <_printf_i+0xbe>
 8011892:	881b      	ldrh	r3, [r3, #0]
 8011894:	296f      	cmp	r1, #111	; 0x6f
 8011896:	bf14      	ite	ne
 8011898:	220a      	movne	r2, #10
 801189a:	2208      	moveq	r2, #8
 801189c:	4852      	ldr	r0, [pc, #328]	; (80119e8 <_printf_i+0x21c>)
 801189e:	2100      	movs	r1, #0
 80118a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118a4:	6865      	ldr	r5, [r4, #4]
 80118a6:	2d00      	cmp	r5, #0
 80118a8:	60a5      	str	r5, [r4, #8]
 80118aa:	f2c0 8095 	blt.w	80119d8 <_printf_i+0x20c>
 80118ae:	6821      	ldr	r1, [r4, #0]
 80118b0:	f021 0104 	bic.w	r1, r1, #4
 80118b4:	6021      	str	r1, [r4, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d13d      	bne.n	8011936 <_printf_i+0x16a>
 80118ba:	2d00      	cmp	r5, #0
 80118bc:	f040 808e 	bne.w	80119dc <_printf_i+0x210>
 80118c0:	4665      	mov	r5, ip
 80118c2:	2a08      	cmp	r2, #8
 80118c4:	d10b      	bne.n	80118de <_printf_i+0x112>
 80118c6:	6823      	ldr	r3, [r4, #0]
 80118c8:	07db      	lsls	r3, r3, #31
 80118ca:	d508      	bpl.n	80118de <_printf_i+0x112>
 80118cc:	6923      	ldr	r3, [r4, #16]
 80118ce:	6862      	ldr	r2, [r4, #4]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	bfde      	ittt	le
 80118d4:	2330      	movle	r3, #48	; 0x30
 80118d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80118da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80118de:	ebac 0305 	sub.w	r3, ip, r5
 80118e2:	6123      	str	r3, [r4, #16]
 80118e4:	f8cd 8000 	str.w	r8, [sp]
 80118e8:	463b      	mov	r3, r7
 80118ea:	aa03      	add	r2, sp, #12
 80118ec:	4621      	mov	r1, r4
 80118ee:	4630      	mov	r0, r6
 80118f0:	f7ff fef6 	bl	80116e0 <_printf_common>
 80118f4:	3001      	adds	r0, #1
 80118f6:	d14d      	bne.n	8011994 <_printf_i+0x1c8>
 80118f8:	f04f 30ff 	mov.w	r0, #4294967295
 80118fc:	b005      	add	sp, #20
 80118fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011902:	4839      	ldr	r0, [pc, #228]	; (80119e8 <_printf_i+0x21c>)
 8011904:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011908:	6813      	ldr	r3, [r2, #0]
 801190a:	6821      	ldr	r1, [r4, #0]
 801190c:	1d1d      	adds	r5, r3, #4
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	6015      	str	r5, [r2, #0]
 8011912:	060a      	lsls	r2, r1, #24
 8011914:	d50b      	bpl.n	801192e <_printf_i+0x162>
 8011916:	07ca      	lsls	r2, r1, #31
 8011918:	bf44      	itt	mi
 801191a:	f041 0120 	orrmi.w	r1, r1, #32
 801191e:	6021      	strmi	r1, [r4, #0]
 8011920:	b91b      	cbnz	r3, 801192a <_printf_i+0x15e>
 8011922:	6822      	ldr	r2, [r4, #0]
 8011924:	f022 0220 	bic.w	r2, r2, #32
 8011928:	6022      	str	r2, [r4, #0]
 801192a:	2210      	movs	r2, #16
 801192c:	e7b7      	b.n	801189e <_printf_i+0xd2>
 801192e:	064d      	lsls	r5, r1, #25
 8011930:	bf48      	it	mi
 8011932:	b29b      	uxthmi	r3, r3
 8011934:	e7ef      	b.n	8011916 <_printf_i+0x14a>
 8011936:	4665      	mov	r5, ip
 8011938:	fbb3 f1f2 	udiv	r1, r3, r2
 801193c:	fb02 3311 	mls	r3, r2, r1, r3
 8011940:	5cc3      	ldrb	r3, [r0, r3]
 8011942:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011946:	460b      	mov	r3, r1
 8011948:	2900      	cmp	r1, #0
 801194a:	d1f5      	bne.n	8011938 <_printf_i+0x16c>
 801194c:	e7b9      	b.n	80118c2 <_printf_i+0xf6>
 801194e:	6813      	ldr	r3, [r2, #0]
 8011950:	6825      	ldr	r5, [r4, #0]
 8011952:	1d18      	adds	r0, r3, #4
 8011954:	6961      	ldr	r1, [r4, #20]
 8011956:	6010      	str	r0, [r2, #0]
 8011958:	0628      	lsls	r0, r5, #24
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	d501      	bpl.n	8011962 <_printf_i+0x196>
 801195e:	6019      	str	r1, [r3, #0]
 8011960:	e002      	b.n	8011968 <_printf_i+0x19c>
 8011962:	066a      	lsls	r2, r5, #25
 8011964:	d5fb      	bpl.n	801195e <_printf_i+0x192>
 8011966:	8019      	strh	r1, [r3, #0]
 8011968:	2300      	movs	r3, #0
 801196a:	4665      	mov	r5, ip
 801196c:	6123      	str	r3, [r4, #16]
 801196e:	e7b9      	b.n	80118e4 <_printf_i+0x118>
 8011970:	6813      	ldr	r3, [r2, #0]
 8011972:	1d19      	adds	r1, r3, #4
 8011974:	6011      	str	r1, [r2, #0]
 8011976:	681d      	ldr	r5, [r3, #0]
 8011978:	6862      	ldr	r2, [r4, #4]
 801197a:	2100      	movs	r1, #0
 801197c:	4628      	mov	r0, r5
 801197e:	f002 fdaf 	bl	80144e0 <memchr>
 8011982:	b108      	cbz	r0, 8011988 <_printf_i+0x1bc>
 8011984:	1b40      	subs	r0, r0, r5
 8011986:	6060      	str	r0, [r4, #4]
 8011988:	6863      	ldr	r3, [r4, #4]
 801198a:	6123      	str	r3, [r4, #16]
 801198c:	2300      	movs	r3, #0
 801198e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011992:	e7a7      	b.n	80118e4 <_printf_i+0x118>
 8011994:	6923      	ldr	r3, [r4, #16]
 8011996:	462a      	mov	r2, r5
 8011998:	4639      	mov	r1, r7
 801199a:	4630      	mov	r0, r6
 801199c:	47c0      	blx	r8
 801199e:	3001      	adds	r0, #1
 80119a0:	d0aa      	beq.n	80118f8 <_printf_i+0x12c>
 80119a2:	6823      	ldr	r3, [r4, #0]
 80119a4:	079b      	lsls	r3, r3, #30
 80119a6:	d413      	bmi.n	80119d0 <_printf_i+0x204>
 80119a8:	68e0      	ldr	r0, [r4, #12]
 80119aa:	9b03      	ldr	r3, [sp, #12]
 80119ac:	4298      	cmp	r0, r3
 80119ae:	bfb8      	it	lt
 80119b0:	4618      	movlt	r0, r3
 80119b2:	e7a3      	b.n	80118fc <_printf_i+0x130>
 80119b4:	2301      	movs	r3, #1
 80119b6:	464a      	mov	r2, r9
 80119b8:	4639      	mov	r1, r7
 80119ba:	4630      	mov	r0, r6
 80119bc:	47c0      	blx	r8
 80119be:	3001      	adds	r0, #1
 80119c0:	d09a      	beq.n	80118f8 <_printf_i+0x12c>
 80119c2:	3501      	adds	r5, #1
 80119c4:	68e3      	ldr	r3, [r4, #12]
 80119c6:	9a03      	ldr	r2, [sp, #12]
 80119c8:	1a9b      	subs	r3, r3, r2
 80119ca:	42ab      	cmp	r3, r5
 80119cc:	dcf2      	bgt.n	80119b4 <_printf_i+0x1e8>
 80119ce:	e7eb      	b.n	80119a8 <_printf_i+0x1dc>
 80119d0:	2500      	movs	r5, #0
 80119d2:	f104 0919 	add.w	r9, r4, #25
 80119d6:	e7f5      	b.n	80119c4 <_printf_i+0x1f8>
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d1ac      	bne.n	8011936 <_printf_i+0x16a>
 80119dc:	7803      	ldrb	r3, [r0, #0]
 80119de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119e6:	e76c      	b.n	80118c2 <_printf_i+0xf6>
 80119e8:	080193ae 	.word	0x080193ae
 80119ec:	080193bf 	.word	0x080193bf

080119f0 <_scanf_float>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	469a      	mov	sl, r3
 80119f6:	688b      	ldr	r3, [r1, #8]
 80119f8:	4616      	mov	r6, r2
 80119fa:	1e5a      	subs	r2, r3, #1
 80119fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011a00:	bf88      	it	hi
 8011a02:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011a06:	b087      	sub	sp, #28
 8011a08:	bf85      	ittet	hi
 8011a0a:	189b      	addhi	r3, r3, r2
 8011a0c:	9301      	strhi	r3, [sp, #4]
 8011a0e:	2300      	movls	r3, #0
 8011a10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011a14:	4688      	mov	r8, r1
 8011a16:	f04f 0b00 	mov.w	fp, #0
 8011a1a:	bf8c      	ite	hi
 8011a1c:	608b      	strhi	r3, [r1, #8]
 8011a1e:	9301      	strls	r3, [sp, #4]
 8011a20:	680b      	ldr	r3, [r1, #0]
 8011a22:	4607      	mov	r7, r0
 8011a24:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011a28:	f848 3b1c 	str.w	r3, [r8], #28
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	4645      	mov	r5, r8
 8011a30:	465a      	mov	r2, fp
 8011a32:	46d9      	mov	r9, fp
 8011a34:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011a38:	f8cd b008 	str.w	fp, [sp, #8]
 8011a3c:	68a1      	ldr	r1, [r4, #8]
 8011a3e:	b181      	cbz	r1, 8011a62 <_scanf_float+0x72>
 8011a40:	6833      	ldr	r3, [r6, #0]
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	2b49      	cmp	r3, #73	; 0x49
 8011a46:	d071      	beq.n	8011b2c <_scanf_float+0x13c>
 8011a48:	d84d      	bhi.n	8011ae6 <_scanf_float+0xf6>
 8011a4a:	2b39      	cmp	r3, #57	; 0x39
 8011a4c:	d840      	bhi.n	8011ad0 <_scanf_float+0xe0>
 8011a4e:	2b31      	cmp	r3, #49	; 0x31
 8011a50:	f080 8088 	bcs.w	8011b64 <_scanf_float+0x174>
 8011a54:	2b2d      	cmp	r3, #45	; 0x2d
 8011a56:	f000 8090 	beq.w	8011b7a <_scanf_float+0x18a>
 8011a5a:	d815      	bhi.n	8011a88 <_scanf_float+0x98>
 8011a5c:	2b2b      	cmp	r3, #43	; 0x2b
 8011a5e:	f000 808c 	beq.w	8011b7a <_scanf_float+0x18a>
 8011a62:	f1b9 0f00 	cmp.w	r9, #0
 8011a66:	d003      	beq.n	8011a70 <_scanf_float+0x80>
 8011a68:	6823      	ldr	r3, [r4, #0]
 8011a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a6e:	6023      	str	r3, [r4, #0]
 8011a70:	3a01      	subs	r2, #1
 8011a72:	2a01      	cmp	r2, #1
 8011a74:	f200 80ea 	bhi.w	8011c4c <_scanf_float+0x25c>
 8011a78:	4545      	cmp	r5, r8
 8011a7a:	f200 80dc 	bhi.w	8011c36 <_scanf_float+0x246>
 8011a7e:	2601      	movs	r6, #1
 8011a80:	4630      	mov	r0, r6
 8011a82:	b007      	add	sp, #28
 8011a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a88:	2b2e      	cmp	r3, #46	; 0x2e
 8011a8a:	f000 809f 	beq.w	8011bcc <_scanf_float+0x1dc>
 8011a8e:	2b30      	cmp	r3, #48	; 0x30
 8011a90:	d1e7      	bne.n	8011a62 <_scanf_float+0x72>
 8011a92:	6820      	ldr	r0, [r4, #0]
 8011a94:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011a98:	d064      	beq.n	8011b64 <_scanf_float+0x174>
 8011a9a:	9b01      	ldr	r3, [sp, #4]
 8011a9c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011aa0:	6020      	str	r0, [r4, #0]
 8011aa2:	f109 0901 	add.w	r9, r9, #1
 8011aa6:	b11b      	cbz	r3, 8011ab0 <_scanf_float+0xc0>
 8011aa8:	3b01      	subs	r3, #1
 8011aaa:	3101      	adds	r1, #1
 8011aac:	9301      	str	r3, [sp, #4]
 8011aae:	60a1      	str	r1, [r4, #8]
 8011ab0:	68a3      	ldr	r3, [r4, #8]
 8011ab2:	3b01      	subs	r3, #1
 8011ab4:	60a3      	str	r3, [r4, #8]
 8011ab6:	6923      	ldr	r3, [r4, #16]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	6123      	str	r3, [r4, #16]
 8011abc:	6873      	ldr	r3, [r6, #4]
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	6073      	str	r3, [r6, #4]
 8011ac4:	f340 80ac 	ble.w	8011c20 <_scanf_float+0x230>
 8011ac8:	6833      	ldr	r3, [r6, #0]
 8011aca:	3301      	adds	r3, #1
 8011acc:	6033      	str	r3, [r6, #0]
 8011ace:	e7b5      	b.n	8011a3c <_scanf_float+0x4c>
 8011ad0:	2b45      	cmp	r3, #69	; 0x45
 8011ad2:	f000 8085 	beq.w	8011be0 <_scanf_float+0x1f0>
 8011ad6:	2b46      	cmp	r3, #70	; 0x46
 8011ad8:	d06a      	beq.n	8011bb0 <_scanf_float+0x1c0>
 8011ada:	2b41      	cmp	r3, #65	; 0x41
 8011adc:	d1c1      	bne.n	8011a62 <_scanf_float+0x72>
 8011ade:	2a01      	cmp	r2, #1
 8011ae0:	d1bf      	bne.n	8011a62 <_scanf_float+0x72>
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	e046      	b.n	8011b74 <_scanf_float+0x184>
 8011ae6:	2b65      	cmp	r3, #101	; 0x65
 8011ae8:	d07a      	beq.n	8011be0 <_scanf_float+0x1f0>
 8011aea:	d818      	bhi.n	8011b1e <_scanf_float+0x12e>
 8011aec:	2b54      	cmp	r3, #84	; 0x54
 8011aee:	d066      	beq.n	8011bbe <_scanf_float+0x1ce>
 8011af0:	d811      	bhi.n	8011b16 <_scanf_float+0x126>
 8011af2:	2b4e      	cmp	r3, #78	; 0x4e
 8011af4:	d1b5      	bne.n	8011a62 <_scanf_float+0x72>
 8011af6:	2a00      	cmp	r2, #0
 8011af8:	d146      	bne.n	8011b88 <_scanf_float+0x198>
 8011afa:	f1b9 0f00 	cmp.w	r9, #0
 8011afe:	d145      	bne.n	8011b8c <_scanf_float+0x19c>
 8011b00:	6821      	ldr	r1, [r4, #0]
 8011b02:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011b06:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011b0a:	d13f      	bne.n	8011b8c <_scanf_float+0x19c>
 8011b0c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011b10:	6021      	str	r1, [r4, #0]
 8011b12:	2201      	movs	r2, #1
 8011b14:	e02e      	b.n	8011b74 <_scanf_float+0x184>
 8011b16:	2b59      	cmp	r3, #89	; 0x59
 8011b18:	d01e      	beq.n	8011b58 <_scanf_float+0x168>
 8011b1a:	2b61      	cmp	r3, #97	; 0x61
 8011b1c:	e7de      	b.n	8011adc <_scanf_float+0xec>
 8011b1e:	2b6e      	cmp	r3, #110	; 0x6e
 8011b20:	d0e9      	beq.n	8011af6 <_scanf_float+0x106>
 8011b22:	d815      	bhi.n	8011b50 <_scanf_float+0x160>
 8011b24:	2b66      	cmp	r3, #102	; 0x66
 8011b26:	d043      	beq.n	8011bb0 <_scanf_float+0x1c0>
 8011b28:	2b69      	cmp	r3, #105	; 0x69
 8011b2a:	d19a      	bne.n	8011a62 <_scanf_float+0x72>
 8011b2c:	f1bb 0f00 	cmp.w	fp, #0
 8011b30:	d138      	bne.n	8011ba4 <_scanf_float+0x1b4>
 8011b32:	f1b9 0f00 	cmp.w	r9, #0
 8011b36:	d197      	bne.n	8011a68 <_scanf_float+0x78>
 8011b38:	6821      	ldr	r1, [r4, #0]
 8011b3a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011b3e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011b42:	d195      	bne.n	8011a70 <_scanf_float+0x80>
 8011b44:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011b48:	6021      	str	r1, [r4, #0]
 8011b4a:	f04f 0b01 	mov.w	fp, #1
 8011b4e:	e011      	b.n	8011b74 <_scanf_float+0x184>
 8011b50:	2b74      	cmp	r3, #116	; 0x74
 8011b52:	d034      	beq.n	8011bbe <_scanf_float+0x1ce>
 8011b54:	2b79      	cmp	r3, #121	; 0x79
 8011b56:	d184      	bne.n	8011a62 <_scanf_float+0x72>
 8011b58:	f1bb 0f07 	cmp.w	fp, #7
 8011b5c:	d181      	bne.n	8011a62 <_scanf_float+0x72>
 8011b5e:	f04f 0b08 	mov.w	fp, #8
 8011b62:	e007      	b.n	8011b74 <_scanf_float+0x184>
 8011b64:	eb12 0f0b 	cmn.w	r2, fp
 8011b68:	f47f af7b 	bne.w	8011a62 <_scanf_float+0x72>
 8011b6c:	6821      	ldr	r1, [r4, #0]
 8011b6e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011b72:	6021      	str	r1, [r4, #0]
 8011b74:	702b      	strb	r3, [r5, #0]
 8011b76:	3501      	adds	r5, #1
 8011b78:	e79a      	b.n	8011ab0 <_scanf_float+0xc0>
 8011b7a:	6821      	ldr	r1, [r4, #0]
 8011b7c:	0608      	lsls	r0, r1, #24
 8011b7e:	f57f af70 	bpl.w	8011a62 <_scanf_float+0x72>
 8011b82:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011b86:	e7f4      	b.n	8011b72 <_scanf_float+0x182>
 8011b88:	2a02      	cmp	r2, #2
 8011b8a:	d047      	beq.n	8011c1c <_scanf_float+0x22c>
 8011b8c:	f1bb 0f01 	cmp.w	fp, #1
 8011b90:	d003      	beq.n	8011b9a <_scanf_float+0x1aa>
 8011b92:	f1bb 0f04 	cmp.w	fp, #4
 8011b96:	f47f af64 	bne.w	8011a62 <_scanf_float+0x72>
 8011b9a:	f10b 0b01 	add.w	fp, fp, #1
 8011b9e:	fa5f fb8b 	uxtb.w	fp, fp
 8011ba2:	e7e7      	b.n	8011b74 <_scanf_float+0x184>
 8011ba4:	f1bb 0f03 	cmp.w	fp, #3
 8011ba8:	d0f7      	beq.n	8011b9a <_scanf_float+0x1aa>
 8011baa:	f1bb 0f05 	cmp.w	fp, #5
 8011bae:	e7f2      	b.n	8011b96 <_scanf_float+0x1a6>
 8011bb0:	f1bb 0f02 	cmp.w	fp, #2
 8011bb4:	f47f af55 	bne.w	8011a62 <_scanf_float+0x72>
 8011bb8:	f04f 0b03 	mov.w	fp, #3
 8011bbc:	e7da      	b.n	8011b74 <_scanf_float+0x184>
 8011bbe:	f1bb 0f06 	cmp.w	fp, #6
 8011bc2:	f47f af4e 	bne.w	8011a62 <_scanf_float+0x72>
 8011bc6:	f04f 0b07 	mov.w	fp, #7
 8011bca:	e7d3      	b.n	8011b74 <_scanf_float+0x184>
 8011bcc:	6821      	ldr	r1, [r4, #0]
 8011bce:	0588      	lsls	r0, r1, #22
 8011bd0:	f57f af47 	bpl.w	8011a62 <_scanf_float+0x72>
 8011bd4:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011bd8:	6021      	str	r1, [r4, #0]
 8011bda:	f8cd 9008 	str.w	r9, [sp, #8]
 8011bde:	e7c9      	b.n	8011b74 <_scanf_float+0x184>
 8011be0:	6821      	ldr	r1, [r4, #0]
 8011be2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011be6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011bea:	d006      	beq.n	8011bfa <_scanf_float+0x20a>
 8011bec:	0548      	lsls	r0, r1, #21
 8011bee:	f57f af38 	bpl.w	8011a62 <_scanf_float+0x72>
 8011bf2:	f1b9 0f00 	cmp.w	r9, #0
 8011bf6:	f43f af3b 	beq.w	8011a70 <_scanf_float+0x80>
 8011bfa:	0588      	lsls	r0, r1, #22
 8011bfc:	bf58      	it	pl
 8011bfe:	9802      	ldrpl	r0, [sp, #8]
 8011c00:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011c04:	bf58      	it	pl
 8011c06:	eba9 0000 	subpl.w	r0, r9, r0
 8011c0a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8011c0e:	bf58      	it	pl
 8011c10:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011c14:	6021      	str	r1, [r4, #0]
 8011c16:	f04f 0900 	mov.w	r9, #0
 8011c1a:	e7ab      	b.n	8011b74 <_scanf_float+0x184>
 8011c1c:	2203      	movs	r2, #3
 8011c1e:	e7a9      	b.n	8011b74 <_scanf_float+0x184>
 8011c20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011c24:	4631      	mov	r1, r6
 8011c26:	4638      	mov	r0, r7
 8011c28:	9205      	str	r2, [sp, #20]
 8011c2a:	4798      	blx	r3
 8011c2c:	9a05      	ldr	r2, [sp, #20]
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	f43f af04 	beq.w	8011a3c <_scanf_float+0x4c>
 8011c34:	e715      	b.n	8011a62 <_scanf_float+0x72>
 8011c36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011c3a:	4632      	mov	r2, r6
 8011c3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011c40:	4638      	mov	r0, r7
 8011c42:	4798      	blx	r3
 8011c44:	6923      	ldr	r3, [r4, #16]
 8011c46:	3b01      	subs	r3, #1
 8011c48:	6123      	str	r3, [r4, #16]
 8011c4a:	e715      	b.n	8011a78 <_scanf_float+0x88>
 8011c4c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011c50:	2b06      	cmp	r3, #6
 8011c52:	d80a      	bhi.n	8011c6a <_scanf_float+0x27a>
 8011c54:	f1bb 0f02 	cmp.w	fp, #2
 8011c58:	d967      	bls.n	8011d2a <_scanf_float+0x33a>
 8011c5a:	f1ab 0b03 	sub.w	fp, fp, #3
 8011c5e:	fa5f fb8b 	uxtb.w	fp, fp
 8011c62:	eba5 0b0b 	sub.w	fp, r5, fp
 8011c66:	455d      	cmp	r5, fp
 8011c68:	d14a      	bne.n	8011d00 <_scanf_float+0x310>
 8011c6a:	6823      	ldr	r3, [r4, #0]
 8011c6c:	05da      	lsls	r2, r3, #23
 8011c6e:	d51f      	bpl.n	8011cb0 <_scanf_float+0x2c0>
 8011c70:	055b      	lsls	r3, r3, #21
 8011c72:	d467      	bmi.n	8011d44 <_scanf_float+0x354>
 8011c74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011c78:	6923      	ldr	r3, [r4, #16]
 8011c7a:	2965      	cmp	r1, #101	; 0x65
 8011c7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8011c80:	f105 3bff 	add.w	fp, r5, #4294967295
 8011c84:	6123      	str	r3, [r4, #16]
 8011c86:	d00d      	beq.n	8011ca4 <_scanf_float+0x2b4>
 8011c88:	2945      	cmp	r1, #69	; 0x45
 8011c8a:	d00b      	beq.n	8011ca4 <_scanf_float+0x2b4>
 8011c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011c90:	4632      	mov	r2, r6
 8011c92:	4638      	mov	r0, r7
 8011c94:	4798      	blx	r3
 8011c96:	6923      	ldr	r3, [r4, #16]
 8011c98:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	f1a5 0b02 	sub.w	fp, r5, #2
 8011ca2:	6123      	str	r3, [r4, #16]
 8011ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ca8:	4632      	mov	r2, r6
 8011caa:	4638      	mov	r0, r7
 8011cac:	4798      	blx	r3
 8011cae:	465d      	mov	r5, fp
 8011cb0:	6826      	ldr	r6, [r4, #0]
 8011cb2:	f016 0610 	ands.w	r6, r6, #16
 8011cb6:	d176      	bne.n	8011da6 <_scanf_float+0x3b6>
 8011cb8:	702e      	strb	r6, [r5, #0]
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011cc4:	d141      	bne.n	8011d4a <_scanf_float+0x35a>
 8011cc6:	9b02      	ldr	r3, [sp, #8]
 8011cc8:	eba9 0303 	sub.w	r3, r9, r3
 8011ccc:	425a      	negs	r2, r3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d148      	bne.n	8011d64 <_scanf_float+0x374>
 8011cd2:	4641      	mov	r1, r8
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	f000 ff2e 	bl	8012b38 <_strtod_r>
 8011cdc:	6825      	ldr	r5, [r4, #0]
 8011cde:	4680      	mov	r8, r0
 8011ce0:	f015 0f02 	tst.w	r5, #2
 8011ce4:	4689      	mov	r9, r1
 8011ce6:	f8da 3000 	ldr.w	r3, [sl]
 8011cea:	d046      	beq.n	8011d7a <_scanf_float+0x38a>
 8011cec:	1d1a      	adds	r2, r3, #4
 8011cee:	f8ca 2000 	str.w	r2, [sl]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	e9c3 8900 	strd	r8, r9, [r3]
 8011cf8:	68e3      	ldr	r3, [r4, #12]
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	60e3      	str	r3, [r4, #12]
 8011cfe:	e6bf      	b.n	8011a80 <_scanf_float+0x90>
 8011d00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011d04:	4632      	mov	r2, r6
 8011d06:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	4798      	blx	r3
 8011d0e:	6923      	ldr	r3, [r4, #16]
 8011d10:	3b01      	subs	r3, #1
 8011d12:	6123      	str	r3, [r4, #16]
 8011d14:	e7a7      	b.n	8011c66 <_scanf_float+0x276>
 8011d16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011d1a:	4632      	mov	r2, r6
 8011d1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011d20:	4638      	mov	r0, r7
 8011d22:	4798      	blx	r3
 8011d24:	6923      	ldr	r3, [r4, #16]
 8011d26:	3b01      	subs	r3, #1
 8011d28:	6123      	str	r3, [r4, #16]
 8011d2a:	4545      	cmp	r5, r8
 8011d2c:	d8f3      	bhi.n	8011d16 <_scanf_float+0x326>
 8011d2e:	e6a6      	b.n	8011a7e <_scanf_float+0x8e>
 8011d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011d34:	4632      	mov	r2, r6
 8011d36:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011d3a:	4638      	mov	r0, r7
 8011d3c:	4798      	blx	r3
 8011d3e:	6923      	ldr	r3, [r4, #16]
 8011d40:	3b01      	subs	r3, #1
 8011d42:	6123      	str	r3, [r4, #16]
 8011d44:	4545      	cmp	r5, r8
 8011d46:	d8f3      	bhi.n	8011d30 <_scanf_float+0x340>
 8011d48:	e699      	b.n	8011a7e <_scanf_float+0x8e>
 8011d4a:	9b03      	ldr	r3, [sp, #12]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d0c0      	beq.n	8011cd2 <_scanf_float+0x2e2>
 8011d50:	9904      	ldr	r1, [sp, #16]
 8011d52:	230a      	movs	r3, #10
 8011d54:	4632      	mov	r2, r6
 8011d56:	3101      	adds	r1, #1
 8011d58:	4638      	mov	r0, r7
 8011d5a:	f000 ff79 	bl	8012c50 <_strtol_r>
 8011d5e:	9b03      	ldr	r3, [sp, #12]
 8011d60:	9d04      	ldr	r5, [sp, #16]
 8011d62:	1ac2      	subs	r2, r0, r3
 8011d64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011d68:	429d      	cmp	r5, r3
 8011d6a:	bf28      	it	cs
 8011d6c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011d70:	490e      	ldr	r1, [pc, #56]	; (8011dac <_scanf_float+0x3bc>)
 8011d72:	4628      	mov	r0, r5
 8011d74:	f000 f89c 	bl	8011eb0 <siprintf>
 8011d78:	e7ab      	b.n	8011cd2 <_scanf_float+0x2e2>
 8011d7a:	1d1f      	adds	r7, r3, #4
 8011d7c:	f015 0504 	ands.w	r5, r5, #4
 8011d80:	f8ca 7000 	str.w	r7, [sl]
 8011d84:	d1b5      	bne.n	8011cf2 <_scanf_float+0x302>
 8011d86:	681f      	ldr	r7, [r3, #0]
 8011d88:	4602      	mov	r2, r0
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	f7ee fe56 	bl	8000a3c <__aeabi_dcmpun>
 8011d90:	b120      	cbz	r0, 8011d9c <_scanf_float+0x3ac>
 8011d92:	4628      	mov	r0, r5
 8011d94:	f000 f888 	bl	8011ea8 <nanf>
 8011d98:	6038      	str	r0, [r7, #0]
 8011d9a:	e7ad      	b.n	8011cf8 <_scanf_float+0x308>
 8011d9c:	4640      	mov	r0, r8
 8011d9e:	4649      	mov	r1, r9
 8011da0:	f7ee feaa 	bl	8000af8 <__aeabi_d2f>
 8011da4:	e7f8      	b.n	8011d98 <_scanf_float+0x3a8>
 8011da6:	2600      	movs	r6, #0
 8011da8:	e66a      	b.n	8011a80 <_scanf_float+0x90>
 8011daa:	bf00      	nop
 8011dac:	080193d0 	.word	0x080193d0

08011db0 <iprintf>:
 8011db0:	b40f      	push	{r0, r1, r2, r3}
 8011db2:	4b0a      	ldr	r3, [pc, #40]	; (8011ddc <iprintf+0x2c>)
 8011db4:	b513      	push	{r0, r1, r4, lr}
 8011db6:	681c      	ldr	r4, [r3, #0]
 8011db8:	b124      	cbz	r4, 8011dc4 <iprintf+0x14>
 8011dba:	69a3      	ldr	r3, [r4, #24]
 8011dbc:	b913      	cbnz	r3, 8011dc4 <iprintf+0x14>
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	f001 ff4a 	bl	8013c58 <__sinit>
 8011dc4:	ab05      	add	r3, sp, #20
 8011dc6:	9a04      	ldr	r2, [sp, #16]
 8011dc8:	68a1      	ldr	r1, [r4, #8]
 8011dca:	4620      	mov	r0, r4
 8011dcc:	9301      	str	r3, [sp, #4]
 8011dce:	f003 f9bb 	bl	8015148 <_vfiprintf_r>
 8011dd2:	b002      	add	sp, #8
 8011dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dd8:	b004      	add	sp, #16
 8011dda:	4770      	bx	lr
 8011ddc:	20000140 	.word	0x20000140

08011de0 <_puts_r>:
 8011de0:	b570      	push	{r4, r5, r6, lr}
 8011de2:	460e      	mov	r6, r1
 8011de4:	4605      	mov	r5, r0
 8011de6:	b118      	cbz	r0, 8011df0 <_puts_r+0x10>
 8011de8:	6983      	ldr	r3, [r0, #24]
 8011dea:	b90b      	cbnz	r3, 8011df0 <_puts_r+0x10>
 8011dec:	f001 ff34 	bl	8013c58 <__sinit>
 8011df0:	69ab      	ldr	r3, [r5, #24]
 8011df2:	68ac      	ldr	r4, [r5, #8]
 8011df4:	b913      	cbnz	r3, 8011dfc <_puts_r+0x1c>
 8011df6:	4628      	mov	r0, r5
 8011df8:	f001 ff2e 	bl	8013c58 <__sinit>
 8011dfc:	4b23      	ldr	r3, [pc, #140]	; (8011e8c <_puts_r+0xac>)
 8011dfe:	429c      	cmp	r4, r3
 8011e00:	d117      	bne.n	8011e32 <_puts_r+0x52>
 8011e02:	686c      	ldr	r4, [r5, #4]
 8011e04:	89a3      	ldrh	r3, [r4, #12]
 8011e06:	071b      	lsls	r3, r3, #28
 8011e08:	d51d      	bpl.n	8011e46 <_puts_r+0x66>
 8011e0a:	6923      	ldr	r3, [r4, #16]
 8011e0c:	b1db      	cbz	r3, 8011e46 <_puts_r+0x66>
 8011e0e:	3e01      	subs	r6, #1
 8011e10:	68a3      	ldr	r3, [r4, #8]
 8011e12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e16:	3b01      	subs	r3, #1
 8011e18:	60a3      	str	r3, [r4, #8]
 8011e1a:	b9e9      	cbnz	r1, 8011e58 <_puts_r+0x78>
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	da2e      	bge.n	8011e7e <_puts_r+0x9e>
 8011e20:	4622      	mov	r2, r4
 8011e22:	210a      	movs	r1, #10
 8011e24:	4628      	mov	r0, r5
 8011e26:	f000 ff25 	bl	8012c74 <__swbuf_r>
 8011e2a:	3001      	adds	r0, #1
 8011e2c:	d011      	beq.n	8011e52 <_puts_r+0x72>
 8011e2e:	200a      	movs	r0, #10
 8011e30:	e011      	b.n	8011e56 <_puts_r+0x76>
 8011e32:	4b17      	ldr	r3, [pc, #92]	; (8011e90 <_puts_r+0xb0>)
 8011e34:	429c      	cmp	r4, r3
 8011e36:	d101      	bne.n	8011e3c <_puts_r+0x5c>
 8011e38:	68ac      	ldr	r4, [r5, #8]
 8011e3a:	e7e3      	b.n	8011e04 <_puts_r+0x24>
 8011e3c:	4b15      	ldr	r3, [pc, #84]	; (8011e94 <_puts_r+0xb4>)
 8011e3e:	429c      	cmp	r4, r3
 8011e40:	bf08      	it	eq
 8011e42:	68ec      	ldreq	r4, [r5, #12]
 8011e44:	e7de      	b.n	8011e04 <_puts_r+0x24>
 8011e46:	4621      	mov	r1, r4
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 ff65 	bl	8012d18 <__swsetup_r>
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	d0dd      	beq.n	8011e0e <_puts_r+0x2e>
 8011e52:	f04f 30ff 	mov.w	r0, #4294967295
 8011e56:	bd70      	pop	{r4, r5, r6, pc}
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	da04      	bge.n	8011e66 <_puts_r+0x86>
 8011e5c:	69a2      	ldr	r2, [r4, #24]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	dc06      	bgt.n	8011e70 <_puts_r+0x90>
 8011e62:	290a      	cmp	r1, #10
 8011e64:	d004      	beq.n	8011e70 <_puts_r+0x90>
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	1c5a      	adds	r2, r3, #1
 8011e6a:	6022      	str	r2, [r4, #0]
 8011e6c:	7019      	strb	r1, [r3, #0]
 8011e6e:	e7cf      	b.n	8011e10 <_puts_r+0x30>
 8011e70:	4622      	mov	r2, r4
 8011e72:	4628      	mov	r0, r5
 8011e74:	f000 fefe 	bl	8012c74 <__swbuf_r>
 8011e78:	3001      	adds	r0, #1
 8011e7a:	d1c9      	bne.n	8011e10 <_puts_r+0x30>
 8011e7c:	e7e9      	b.n	8011e52 <_puts_r+0x72>
 8011e7e:	200a      	movs	r0, #10
 8011e80:	6823      	ldr	r3, [r4, #0]
 8011e82:	1c5a      	adds	r2, r3, #1
 8011e84:	6022      	str	r2, [r4, #0]
 8011e86:	7018      	strb	r0, [r3, #0]
 8011e88:	e7e5      	b.n	8011e56 <_puts_r+0x76>
 8011e8a:	bf00      	nop
 8011e8c:	08019458 	.word	0x08019458
 8011e90:	08019478 	.word	0x08019478
 8011e94:	08019438 	.word	0x08019438

08011e98 <puts>:
 8011e98:	4b02      	ldr	r3, [pc, #8]	; (8011ea4 <puts+0xc>)
 8011e9a:	4601      	mov	r1, r0
 8011e9c:	6818      	ldr	r0, [r3, #0]
 8011e9e:	f7ff bf9f 	b.w	8011de0 <_puts_r>
 8011ea2:	bf00      	nop
 8011ea4:	20000140 	.word	0x20000140

08011ea8 <nanf>:
 8011ea8:	4800      	ldr	r0, [pc, #0]	; (8011eac <nanf+0x4>)
 8011eaa:	4770      	bx	lr
 8011eac:	7fc00000 	.word	0x7fc00000

08011eb0 <siprintf>:
 8011eb0:	b40e      	push	{r1, r2, r3}
 8011eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011eb6:	b500      	push	{lr}
 8011eb8:	b09c      	sub	sp, #112	; 0x70
 8011eba:	ab1d      	add	r3, sp, #116	; 0x74
 8011ebc:	9002      	str	r0, [sp, #8]
 8011ebe:	9006      	str	r0, [sp, #24]
 8011ec0:	9107      	str	r1, [sp, #28]
 8011ec2:	9104      	str	r1, [sp, #16]
 8011ec4:	4808      	ldr	r0, [pc, #32]	; (8011ee8 <siprintf+0x38>)
 8011ec6:	4909      	ldr	r1, [pc, #36]	; (8011eec <siprintf+0x3c>)
 8011ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ecc:	9105      	str	r1, [sp, #20]
 8011ece:	6800      	ldr	r0, [r0, #0]
 8011ed0:	a902      	add	r1, sp, #8
 8011ed2:	9301      	str	r3, [sp, #4]
 8011ed4:	f003 f818 	bl	8014f08 <_svfiprintf_r>
 8011ed8:	2200      	movs	r2, #0
 8011eda:	9b02      	ldr	r3, [sp, #8]
 8011edc:	701a      	strb	r2, [r3, #0]
 8011ede:	b01c      	add	sp, #112	; 0x70
 8011ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ee4:	b003      	add	sp, #12
 8011ee6:	4770      	bx	lr
 8011ee8:	20000140 	.word	0x20000140
 8011eec:	ffff0208 	.word	0xffff0208

08011ef0 <sulp>:
 8011ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef4:	460f      	mov	r7, r1
 8011ef6:	4690      	mov	r8, r2
 8011ef8:	f002 fdca 	bl	8014a90 <__ulp>
 8011efc:	4604      	mov	r4, r0
 8011efe:	460d      	mov	r5, r1
 8011f00:	f1b8 0f00 	cmp.w	r8, #0
 8011f04:	d011      	beq.n	8011f2a <sulp+0x3a>
 8011f06:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8011f0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	dd0b      	ble.n	8011f2a <sulp+0x3a>
 8011f12:	2400      	movs	r4, #0
 8011f14:	051b      	lsls	r3, r3, #20
 8011f16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011f1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011f1e:	4622      	mov	r2, r4
 8011f20:	462b      	mov	r3, r5
 8011f22:	f7ee faf1 	bl	8000508 <__aeabi_dmul>
 8011f26:	4604      	mov	r4, r0
 8011f28:	460d      	mov	r5, r1
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f32:	0000      	movs	r0, r0
 8011f34:	0000      	movs	r0, r0
	...

08011f38 <_strtod_l>:
 8011f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	461f      	mov	r7, r3
 8011f3e:	2300      	movs	r3, #0
 8011f40:	b0a1      	sub	sp, #132	; 0x84
 8011f42:	4683      	mov	fp, r0
 8011f44:	4638      	mov	r0, r7
 8011f46:	460e      	mov	r6, r1
 8011f48:	9217      	str	r2, [sp, #92]	; 0x5c
 8011f4a:	931c      	str	r3, [sp, #112]	; 0x70
 8011f4c:	f002 fa39 	bl	80143c2 <__localeconv_l>
 8011f50:	4680      	mov	r8, r0
 8011f52:	6800      	ldr	r0, [r0, #0]
 8011f54:	f7ee f914 	bl	8000180 <strlen>
 8011f58:	f04f 0900 	mov.w	r9, #0
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	f04f 0a00 	mov.w	sl, #0
 8011f62:	961b      	str	r6, [sp, #108]	; 0x6c
 8011f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f66:	781a      	ldrb	r2, [r3, #0]
 8011f68:	2a0d      	cmp	r2, #13
 8011f6a:	d832      	bhi.n	8011fd2 <_strtod_l+0x9a>
 8011f6c:	2a09      	cmp	r2, #9
 8011f6e:	d236      	bcs.n	8011fde <_strtod_l+0xa6>
 8011f70:	2a00      	cmp	r2, #0
 8011f72:	d03e      	beq.n	8011ff2 <_strtod_l+0xba>
 8011f74:	2300      	movs	r3, #0
 8011f76:	930d      	str	r3, [sp, #52]	; 0x34
 8011f78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011f7a:	782b      	ldrb	r3, [r5, #0]
 8011f7c:	2b30      	cmp	r3, #48	; 0x30
 8011f7e:	f040 80ac 	bne.w	80120da <_strtod_l+0x1a2>
 8011f82:	786b      	ldrb	r3, [r5, #1]
 8011f84:	2b58      	cmp	r3, #88	; 0x58
 8011f86:	d001      	beq.n	8011f8c <_strtod_l+0x54>
 8011f88:	2b78      	cmp	r3, #120	; 0x78
 8011f8a:	d167      	bne.n	801205c <_strtod_l+0x124>
 8011f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f8e:	9702      	str	r7, [sp, #8]
 8011f90:	9301      	str	r3, [sp, #4]
 8011f92:	ab1c      	add	r3, sp, #112	; 0x70
 8011f94:	9300      	str	r3, [sp, #0]
 8011f96:	4a89      	ldr	r2, [pc, #548]	; (80121bc <_strtod_l+0x284>)
 8011f98:	ab1d      	add	r3, sp, #116	; 0x74
 8011f9a:	a91b      	add	r1, sp, #108	; 0x6c
 8011f9c:	4658      	mov	r0, fp
 8011f9e:	f001 ff35 	bl	8013e0c <__gethex>
 8011fa2:	f010 0407 	ands.w	r4, r0, #7
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	d005      	beq.n	8011fb6 <_strtod_l+0x7e>
 8011faa:	2c06      	cmp	r4, #6
 8011fac:	d12b      	bne.n	8012006 <_strtod_l+0xce>
 8011fae:	2300      	movs	r3, #0
 8011fb0:	3501      	adds	r5, #1
 8011fb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8011fb4:	930d      	str	r3, [sp, #52]	; 0x34
 8011fb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f040 85a6 	bne.w	8012b0a <_strtod_l+0xbd2>
 8011fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fc0:	b1e3      	cbz	r3, 8011ffc <_strtod_l+0xc4>
 8011fc2:	464a      	mov	r2, r9
 8011fc4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8011fc8:	4610      	mov	r0, r2
 8011fca:	4619      	mov	r1, r3
 8011fcc:	b021      	add	sp, #132	; 0x84
 8011fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd2:	2a2b      	cmp	r2, #43	; 0x2b
 8011fd4:	d015      	beq.n	8012002 <_strtod_l+0xca>
 8011fd6:	2a2d      	cmp	r2, #45	; 0x2d
 8011fd8:	d004      	beq.n	8011fe4 <_strtod_l+0xac>
 8011fda:	2a20      	cmp	r2, #32
 8011fdc:	d1ca      	bne.n	8011f74 <_strtod_l+0x3c>
 8011fde:	3301      	adds	r3, #1
 8011fe0:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fe2:	e7bf      	b.n	8011f64 <_strtod_l+0x2c>
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	920d      	str	r2, [sp, #52]	; 0x34
 8011fe8:	1c5a      	adds	r2, r3, #1
 8011fea:	921b      	str	r2, [sp, #108]	; 0x6c
 8011fec:	785b      	ldrb	r3, [r3, #1]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d1c2      	bne.n	8011f78 <_strtod_l+0x40>
 8011ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ff4:	961b      	str	r6, [sp, #108]	; 0x6c
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f040 8585 	bne.w	8012b06 <_strtod_l+0xbce>
 8011ffc:	464a      	mov	r2, r9
 8011ffe:	4653      	mov	r3, sl
 8012000:	e7e2      	b.n	8011fc8 <_strtod_l+0x90>
 8012002:	2200      	movs	r2, #0
 8012004:	e7ef      	b.n	8011fe6 <_strtod_l+0xae>
 8012006:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012008:	b13a      	cbz	r2, 801201a <_strtod_l+0xe2>
 801200a:	2135      	movs	r1, #53	; 0x35
 801200c:	a81e      	add	r0, sp, #120	; 0x78
 801200e:	f002 fe32 	bl	8014c76 <__copybits>
 8012012:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012014:	4658      	mov	r0, fp
 8012016:	f002 faa5 	bl	8014564 <_Bfree>
 801201a:	3c01      	subs	r4, #1
 801201c:	2c04      	cmp	r4, #4
 801201e:	d806      	bhi.n	801202e <_strtod_l+0xf6>
 8012020:	e8df f004 	tbb	[pc, r4]
 8012024:	1714030a 	.word	0x1714030a
 8012028:	0a          	.byte	0x0a
 8012029:	00          	.byte	0x00
 801202a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 801202e:	0731      	lsls	r1, r6, #28
 8012030:	d5c1      	bpl.n	8011fb6 <_strtod_l+0x7e>
 8012032:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8012036:	e7be      	b.n	8011fb6 <_strtod_l+0x7e>
 8012038:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801203a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 801203e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012042:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012046:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 801204a:	e7f0      	b.n	801202e <_strtod_l+0xf6>
 801204c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80121c0 <_strtod_l+0x288>
 8012050:	e7ed      	b.n	801202e <_strtod_l+0xf6>
 8012052:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8012056:	f04f 39ff 	mov.w	r9, #4294967295
 801205a:	e7e8      	b.n	801202e <_strtod_l+0xf6>
 801205c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	921b      	str	r2, [sp, #108]	; 0x6c
 8012062:	785b      	ldrb	r3, [r3, #1]
 8012064:	2b30      	cmp	r3, #48	; 0x30
 8012066:	d0f9      	beq.n	801205c <_strtod_l+0x124>
 8012068:	2b00      	cmp	r3, #0
 801206a:	d0a4      	beq.n	8011fb6 <_strtod_l+0x7e>
 801206c:	2301      	movs	r3, #1
 801206e:	2500      	movs	r5, #0
 8012070:	220a      	movs	r2, #10
 8012072:	9307      	str	r3, [sp, #28]
 8012074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012076:	9506      	str	r5, [sp, #24]
 8012078:	9308      	str	r3, [sp, #32]
 801207a:	9504      	str	r5, [sp, #16]
 801207c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801207e:	7807      	ldrb	r7, [r0, #0]
 8012080:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012084:	b2d9      	uxtb	r1, r3
 8012086:	2909      	cmp	r1, #9
 8012088:	d929      	bls.n	80120de <_strtod_l+0x1a6>
 801208a:	4622      	mov	r2, r4
 801208c:	f8d8 1000 	ldr.w	r1, [r8]
 8012090:	f003 f9c3 	bl	801541a <strncmp>
 8012094:	2800      	cmp	r0, #0
 8012096:	d031      	beq.n	80120fc <_strtod_l+0x1c4>
 8012098:	2000      	movs	r0, #0
 801209a:	463b      	mov	r3, r7
 801209c:	4602      	mov	r2, r0
 801209e:	9c04      	ldr	r4, [sp, #16]
 80120a0:	9005      	str	r0, [sp, #20]
 80120a2:	2b65      	cmp	r3, #101	; 0x65
 80120a4:	d001      	beq.n	80120aa <_strtod_l+0x172>
 80120a6:	2b45      	cmp	r3, #69	; 0x45
 80120a8:	d114      	bne.n	80120d4 <_strtod_l+0x19c>
 80120aa:	b924      	cbnz	r4, 80120b6 <_strtod_l+0x17e>
 80120ac:	b910      	cbnz	r0, 80120b4 <_strtod_l+0x17c>
 80120ae:	9b07      	ldr	r3, [sp, #28]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d09e      	beq.n	8011ff2 <_strtod_l+0xba>
 80120b4:	2400      	movs	r4, #0
 80120b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80120b8:	1c73      	adds	r3, r6, #1
 80120ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80120bc:	7873      	ldrb	r3, [r6, #1]
 80120be:	2b2b      	cmp	r3, #43	; 0x2b
 80120c0:	d078      	beq.n	80121b4 <_strtod_l+0x27c>
 80120c2:	2b2d      	cmp	r3, #45	; 0x2d
 80120c4:	d070      	beq.n	80121a8 <_strtod_l+0x270>
 80120c6:	f04f 0c00 	mov.w	ip, #0
 80120ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80120ce:	2f09      	cmp	r7, #9
 80120d0:	d97c      	bls.n	80121cc <_strtod_l+0x294>
 80120d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80120d4:	f04f 0e00 	mov.w	lr, #0
 80120d8:	e09a      	b.n	8012210 <_strtod_l+0x2d8>
 80120da:	2300      	movs	r3, #0
 80120dc:	e7c7      	b.n	801206e <_strtod_l+0x136>
 80120de:	9904      	ldr	r1, [sp, #16]
 80120e0:	3001      	adds	r0, #1
 80120e2:	2908      	cmp	r1, #8
 80120e4:	bfd7      	itett	le
 80120e6:	9906      	ldrle	r1, [sp, #24]
 80120e8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80120ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80120f0:	9306      	strle	r3, [sp, #24]
 80120f2:	9b04      	ldr	r3, [sp, #16]
 80120f4:	901b      	str	r0, [sp, #108]	; 0x6c
 80120f6:	3301      	adds	r3, #1
 80120f8:	9304      	str	r3, [sp, #16]
 80120fa:	e7bf      	b.n	801207c <_strtod_l+0x144>
 80120fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120fe:	191a      	adds	r2, r3, r4
 8012100:	921b      	str	r2, [sp, #108]	; 0x6c
 8012102:	9a04      	ldr	r2, [sp, #16]
 8012104:	5d1b      	ldrb	r3, [r3, r4]
 8012106:	2a00      	cmp	r2, #0
 8012108:	d037      	beq.n	801217a <_strtod_l+0x242>
 801210a:	4602      	mov	r2, r0
 801210c:	9c04      	ldr	r4, [sp, #16]
 801210e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012112:	2909      	cmp	r1, #9
 8012114:	d913      	bls.n	801213e <_strtod_l+0x206>
 8012116:	2101      	movs	r1, #1
 8012118:	9105      	str	r1, [sp, #20]
 801211a:	e7c2      	b.n	80120a2 <_strtod_l+0x16a>
 801211c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801211e:	3001      	adds	r0, #1
 8012120:	1c5a      	adds	r2, r3, #1
 8012122:	921b      	str	r2, [sp, #108]	; 0x6c
 8012124:	785b      	ldrb	r3, [r3, #1]
 8012126:	2b30      	cmp	r3, #48	; 0x30
 8012128:	d0f8      	beq.n	801211c <_strtod_l+0x1e4>
 801212a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801212e:	2a08      	cmp	r2, #8
 8012130:	f200 84f0 	bhi.w	8012b14 <_strtod_l+0xbdc>
 8012134:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012136:	9208      	str	r2, [sp, #32]
 8012138:	4602      	mov	r2, r0
 801213a:	2000      	movs	r0, #0
 801213c:	4604      	mov	r4, r0
 801213e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012142:	f100 0101 	add.w	r1, r0, #1
 8012146:	d012      	beq.n	801216e <_strtod_l+0x236>
 8012148:	440a      	add	r2, r1
 801214a:	270a      	movs	r7, #10
 801214c:	4621      	mov	r1, r4
 801214e:	eb00 0c04 	add.w	ip, r0, r4
 8012152:	458c      	cmp	ip, r1
 8012154:	d113      	bne.n	801217e <_strtod_l+0x246>
 8012156:	1821      	adds	r1, r4, r0
 8012158:	2908      	cmp	r1, #8
 801215a:	f104 0401 	add.w	r4, r4, #1
 801215e:	4404      	add	r4, r0
 8012160:	dc19      	bgt.n	8012196 <_strtod_l+0x25e>
 8012162:	210a      	movs	r1, #10
 8012164:	9b06      	ldr	r3, [sp, #24]
 8012166:	fb01 e303 	mla	r3, r1, r3, lr
 801216a:	9306      	str	r3, [sp, #24]
 801216c:	2100      	movs	r1, #0
 801216e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012170:	1c58      	adds	r0, r3, #1
 8012172:	901b      	str	r0, [sp, #108]	; 0x6c
 8012174:	785b      	ldrb	r3, [r3, #1]
 8012176:	4608      	mov	r0, r1
 8012178:	e7c9      	b.n	801210e <_strtod_l+0x1d6>
 801217a:	9804      	ldr	r0, [sp, #16]
 801217c:	e7d3      	b.n	8012126 <_strtod_l+0x1ee>
 801217e:	2908      	cmp	r1, #8
 8012180:	f101 0101 	add.w	r1, r1, #1
 8012184:	dc03      	bgt.n	801218e <_strtod_l+0x256>
 8012186:	9b06      	ldr	r3, [sp, #24]
 8012188:	437b      	muls	r3, r7
 801218a:	9306      	str	r3, [sp, #24]
 801218c:	e7e1      	b.n	8012152 <_strtod_l+0x21a>
 801218e:	2910      	cmp	r1, #16
 8012190:	bfd8      	it	le
 8012192:	437d      	mulle	r5, r7
 8012194:	e7dd      	b.n	8012152 <_strtod_l+0x21a>
 8012196:	2c10      	cmp	r4, #16
 8012198:	bfdc      	itt	le
 801219a:	210a      	movle	r1, #10
 801219c:	fb01 e505 	mlale	r5, r1, r5, lr
 80121a0:	e7e4      	b.n	801216c <_strtod_l+0x234>
 80121a2:	2301      	movs	r3, #1
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	e781      	b.n	80120ac <_strtod_l+0x174>
 80121a8:	f04f 0c01 	mov.w	ip, #1
 80121ac:	1cb3      	adds	r3, r6, #2
 80121ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80121b0:	78b3      	ldrb	r3, [r6, #2]
 80121b2:	e78a      	b.n	80120ca <_strtod_l+0x192>
 80121b4:	f04f 0c00 	mov.w	ip, #0
 80121b8:	e7f8      	b.n	80121ac <_strtod_l+0x274>
 80121ba:	bf00      	nop
 80121bc:	080193d8 	.word	0x080193d8
 80121c0:	7ff00000 	.word	0x7ff00000
 80121c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80121c6:	1c5f      	adds	r7, r3, #1
 80121c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80121ca:	785b      	ldrb	r3, [r3, #1]
 80121cc:	2b30      	cmp	r3, #48	; 0x30
 80121ce:	d0f9      	beq.n	80121c4 <_strtod_l+0x28c>
 80121d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80121d4:	2f08      	cmp	r7, #8
 80121d6:	f63f af7d 	bhi.w	80120d4 <_strtod_l+0x19c>
 80121da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80121de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80121e0:	9309      	str	r3, [sp, #36]	; 0x24
 80121e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80121e4:	1c5f      	adds	r7, r3, #1
 80121e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80121e8:	785b      	ldrb	r3, [r3, #1]
 80121ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80121ee:	f1b8 0f09 	cmp.w	r8, #9
 80121f2:	d937      	bls.n	8012264 <_strtod_l+0x32c>
 80121f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121f6:	1a7f      	subs	r7, r7, r1
 80121f8:	2f08      	cmp	r7, #8
 80121fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80121fe:	dc37      	bgt.n	8012270 <_strtod_l+0x338>
 8012200:	45be      	cmp	lr, r7
 8012202:	bfa8      	it	ge
 8012204:	46be      	movge	lr, r7
 8012206:	f1bc 0f00 	cmp.w	ip, #0
 801220a:	d001      	beq.n	8012210 <_strtod_l+0x2d8>
 801220c:	f1ce 0e00 	rsb	lr, lr, #0
 8012210:	2c00      	cmp	r4, #0
 8012212:	d151      	bne.n	80122b8 <_strtod_l+0x380>
 8012214:	2800      	cmp	r0, #0
 8012216:	f47f aece 	bne.w	8011fb6 <_strtod_l+0x7e>
 801221a:	9a07      	ldr	r2, [sp, #28]
 801221c:	2a00      	cmp	r2, #0
 801221e:	f47f aeca 	bne.w	8011fb6 <_strtod_l+0x7e>
 8012222:	9a05      	ldr	r2, [sp, #20]
 8012224:	2a00      	cmp	r2, #0
 8012226:	f47f aee4 	bne.w	8011ff2 <_strtod_l+0xba>
 801222a:	2b4e      	cmp	r3, #78	; 0x4e
 801222c:	d027      	beq.n	801227e <_strtod_l+0x346>
 801222e:	dc21      	bgt.n	8012274 <_strtod_l+0x33c>
 8012230:	2b49      	cmp	r3, #73	; 0x49
 8012232:	f47f aede 	bne.w	8011ff2 <_strtod_l+0xba>
 8012236:	49a4      	ldr	r1, [pc, #656]	; (80124c8 <_strtod_l+0x590>)
 8012238:	a81b      	add	r0, sp, #108	; 0x6c
 801223a:	f002 f81b 	bl	8014274 <__match>
 801223e:	2800      	cmp	r0, #0
 8012240:	f43f aed7 	beq.w	8011ff2 <_strtod_l+0xba>
 8012244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012246:	49a1      	ldr	r1, [pc, #644]	; (80124cc <_strtod_l+0x594>)
 8012248:	3b01      	subs	r3, #1
 801224a:	a81b      	add	r0, sp, #108	; 0x6c
 801224c:	931b      	str	r3, [sp, #108]	; 0x6c
 801224e:	f002 f811 	bl	8014274 <__match>
 8012252:	b910      	cbnz	r0, 801225a <_strtod_l+0x322>
 8012254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012256:	3301      	adds	r3, #1
 8012258:	931b      	str	r3, [sp, #108]	; 0x6c
 801225a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80124e0 <_strtod_l+0x5a8>
 801225e:	f04f 0900 	mov.w	r9, #0
 8012262:	e6a8      	b.n	8011fb6 <_strtod_l+0x7e>
 8012264:	210a      	movs	r1, #10
 8012266:	fb01 3e0e 	mla	lr, r1, lr, r3
 801226a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801226e:	e7b8      	b.n	80121e2 <_strtod_l+0x2aa>
 8012270:	46be      	mov	lr, r7
 8012272:	e7c8      	b.n	8012206 <_strtod_l+0x2ce>
 8012274:	2b69      	cmp	r3, #105	; 0x69
 8012276:	d0de      	beq.n	8012236 <_strtod_l+0x2fe>
 8012278:	2b6e      	cmp	r3, #110	; 0x6e
 801227a:	f47f aeba 	bne.w	8011ff2 <_strtod_l+0xba>
 801227e:	4994      	ldr	r1, [pc, #592]	; (80124d0 <_strtod_l+0x598>)
 8012280:	a81b      	add	r0, sp, #108	; 0x6c
 8012282:	f001 fff7 	bl	8014274 <__match>
 8012286:	2800      	cmp	r0, #0
 8012288:	f43f aeb3 	beq.w	8011ff2 <_strtod_l+0xba>
 801228c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	2b28      	cmp	r3, #40	; 0x28
 8012292:	d10e      	bne.n	80122b2 <_strtod_l+0x37a>
 8012294:	aa1e      	add	r2, sp, #120	; 0x78
 8012296:	498f      	ldr	r1, [pc, #572]	; (80124d4 <_strtod_l+0x59c>)
 8012298:	a81b      	add	r0, sp, #108	; 0x6c
 801229a:	f001 ffff 	bl	801429c <__hexnan>
 801229e:	2805      	cmp	r0, #5
 80122a0:	d107      	bne.n	80122b2 <_strtod_l+0x37a>
 80122a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122a4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80122a8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80122ac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80122b0:	e681      	b.n	8011fb6 <_strtod_l+0x7e>
 80122b2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80124e8 <_strtod_l+0x5b0>
 80122b6:	e7d2      	b.n	801225e <_strtod_l+0x326>
 80122b8:	ebae 0302 	sub.w	r3, lr, r2
 80122bc:	9307      	str	r3, [sp, #28]
 80122be:	9b04      	ldr	r3, [sp, #16]
 80122c0:	9806      	ldr	r0, [sp, #24]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	bf08      	it	eq
 80122c6:	4623      	moveq	r3, r4
 80122c8:	2c10      	cmp	r4, #16
 80122ca:	9304      	str	r3, [sp, #16]
 80122cc:	46a0      	mov	r8, r4
 80122ce:	bfa8      	it	ge
 80122d0:	f04f 0810 	movge.w	r8, #16
 80122d4:	f7ee f89e 	bl	8000414 <__aeabi_ui2d>
 80122d8:	2c09      	cmp	r4, #9
 80122da:	4681      	mov	r9, r0
 80122dc:	468a      	mov	sl, r1
 80122de:	dc13      	bgt.n	8012308 <_strtod_l+0x3d0>
 80122e0:	9b07      	ldr	r3, [sp, #28]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f43f ae67 	beq.w	8011fb6 <_strtod_l+0x7e>
 80122e8:	9b07      	ldr	r3, [sp, #28]
 80122ea:	dd7e      	ble.n	80123ea <_strtod_l+0x4b2>
 80122ec:	2b16      	cmp	r3, #22
 80122ee:	dc65      	bgt.n	80123bc <_strtod_l+0x484>
 80122f0:	4a79      	ldr	r2, [pc, #484]	; (80124d8 <_strtod_l+0x5a0>)
 80122f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80122f6:	464a      	mov	r2, r9
 80122f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80122fc:	4653      	mov	r3, sl
 80122fe:	f7ee f903 	bl	8000508 <__aeabi_dmul>
 8012302:	4681      	mov	r9, r0
 8012304:	468a      	mov	sl, r1
 8012306:	e656      	b.n	8011fb6 <_strtod_l+0x7e>
 8012308:	4b73      	ldr	r3, [pc, #460]	; (80124d8 <_strtod_l+0x5a0>)
 801230a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801230e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012312:	f7ee f8f9 	bl	8000508 <__aeabi_dmul>
 8012316:	4606      	mov	r6, r0
 8012318:	4628      	mov	r0, r5
 801231a:	460f      	mov	r7, r1
 801231c:	f7ee f87a 	bl	8000414 <__aeabi_ui2d>
 8012320:	4602      	mov	r2, r0
 8012322:	460b      	mov	r3, r1
 8012324:	4630      	mov	r0, r6
 8012326:	4639      	mov	r1, r7
 8012328:	f7ed ff38 	bl	800019c <__adddf3>
 801232c:	2c0f      	cmp	r4, #15
 801232e:	4681      	mov	r9, r0
 8012330:	468a      	mov	sl, r1
 8012332:	ddd5      	ble.n	80122e0 <_strtod_l+0x3a8>
 8012334:	9b07      	ldr	r3, [sp, #28]
 8012336:	eba4 0808 	sub.w	r8, r4, r8
 801233a:	4498      	add	r8, r3
 801233c:	f1b8 0f00 	cmp.w	r8, #0
 8012340:	f340 809a 	ble.w	8012478 <_strtod_l+0x540>
 8012344:	f018 030f 	ands.w	r3, r8, #15
 8012348:	d00a      	beq.n	8012360 <_strtod_l+0x428>
 801234a:	4963      	ldr	r1, [pc, #396]	; (80124d8 <_strtod_l+0x5a0>)
 801234c:	464a      	mov	r2, r9
 801234e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012356:	4653      	mov	r3, sl
 8012358:	f7ee f8d6 	bl	8000508 <__aeabi_dmul>
 801235c:	4681      	mov	r9, r0
 801235e:	468a      	mov	sl, r1
 8012360:	f038 080f 	bics.w	r8, r8, #15
 8012364:	d077      	beq.n	8012456 <_strtod_l+0x51e>
 8012366:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801236a:	dd4b      	ble.n	8012404 <_strtod_l+0x4cc>
 801236c:	f04f 0800 	mov.w	r8, #0
 8012370:	f8cd 8010 	str.w	r8, [sp, #16]
 8012374:	f8cd 8020 	str.w	r8, [sp, #32]
 8012378:	f8cd 8018 	str.w	r8, [sp, #24]
 801237c:	2322      	movs	r3, #34	; 0x22
 801237e:	f04f 0900 	mov.w	r9, #0
 8012382:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80124e0 <_strtod_l+0x5a8>
 8012386:	f8cb 3000 	str.w	r3, [fp]
 801238a:	9b08      	ldr	r3, [sp, #32]
 801238c:	2b00      	cmp	r3, #0
 801238e:	f43f ae12 	beq.w	8011fb6 <_strtod_l+0x7e>
 8012392:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012394:	4658      	mov	r0, fp
 8012396:	f002 f8e5 	bl	8014564 <_Bfree>
 801239a:	9906      	ldr	r1, [sp, #24]
 801239c:	4658      	mov	r0, fp
 801239e:	f002 f8e1 	bl	8014564 <_Bfree>
 80123a2:	9904      	ldr	r1, [sp, #16]
 80123a4:	4658      	mov	r0, fp
 80123a6:	f002 f8dd 	bl	8014564 <_Bfree>
 80123aa:	9908      	ldr	r1, [sp, #32]
 80123ac:	4658      	mov	r0, fp
 80123ae:	f002 f8d9 	bl	8014564 <_Bfree>
 80123b2:	4641      	mov	r1, r8
 80123b4:	4658      	mov	r0, fp
 80123b6:	f002 f8d5 	bl	8014564 <_Bfree>
 80123ba:	e5fc      	b.n	8011fb6 <_strtod_l+0x7e>
 80123bc:	9a07      	ldr	r2, [sp, #28]
 80123be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80123c2:	4293      	cmp	r3, r2
 80123c4:	dbb6      	blt.n	8012334 <_strtod_l+0x3fc>
 80123c6:	4d44      	ldr	r5, [pc, #272]	; (80124d8 <_strtod_l+0x5a0>)
 80123c8:	f1c4 040f 	rsb	r4, r4, #15
 80123cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80123d0:	464a      	mov	r2, r9
 80123d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123d6:	4653      	mov	r3, sl
 80123d8:	f7ee f896 	bl	8000508 <__aeabi_dmul>
 80123dc:	9b07      	ldr	r3, [sp, #28]
 80123de:	1b1c      	subs	r4, r3, r4
 80123e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80123e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80123e8:	e789      	b.n	80122fe <_strtod_l+0x3c6>
 80123ea:	f113 0f16 	cmn.w	r3, #22
 80123ee:	dba1      	blt.n	8012334 <_strtod_l+0x3fc>
 80123f0:	4a39      	ldr	r2, [pc, #228]	; (80124d8 <_strtod_l+0x5a0>)
 80123f2:	4648      	mov	r0, r9
 80123f4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80123f8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80123fc:	4651      	mov	r1, sl
 80123fe:	f7ee f9ad 	bl	800075c <__aeabi_ddiv>
 8012402:	e77e      	b.n	8012302 <_strtod_l+0x3ca>
 8012404:	2300      	movs	r3, #0
 8012406:	4648      	mov	r0, r9
 8012408:	4651      	mov	r1, sl
 801240a:	461d      	mov	r5, r3
 801240c:	4e33      	ldr	r6, [pc, #204]	; (80124dc <_strtod_l+0x5a4>)
 801240e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012412:	f1b8 0f01 	cmp.w	r8, #1
 8012416:	dc21      	bgt.n	801245c <_strtod_l+0x524>
 8012418:	b10b      	cbz	r3, 801241e <_strtod_l+0x4e6>
 801241a:	4681      	mov	r9, r0
 801241c:	468a      	mov	sl, r1
 801241e:	4b2f      	ldr	r3, [pc, #188]	; (80124dc <_strtod_l+0x5a4>)
 8012420:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8012424:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012428:	464a      	mov	r2, r9
 801242a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801242e:	4653      	mov	r3, sl
 8012430:	f7ee f86a 	bl	8000508 <__aeabi_dmul>
 8012434:	4b2a      	ldr	r3, [pc, #168]	; (80124e0 <_strtod_l+0x5a8>)
 8012436:	460a      	mov	r2, r1
 8012438:	400b      	ands	r3, r1
 801243a:	492a      	ldr	r1, [pc, #168]	; (80124e4 <_strtod_l+0x5ac>)
 801243c:	4681      	mov	r9, r0
 801243e:	428b      	cmp	r3, r1
 8012440:	d894      	bhi.n	801236c <_strtod_l+0x434>
 8012442:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012446:	428b      	cmp	r3, r1
 8012448:	bf86      	itte	hi
 801244a:	f04f 39ff 	movhi.w	r9, #4294967295
 801244e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80124ec <_strtod_l+0x5b4>
 8012452:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8012456:	2300      	movs	r3, #0
 8012458:	9305      	str	r3, [sp, #20]
 801245a:	e07b      	b.n	8012554 <_strtod_l+0x61c>
 801245c:	f018 0f01 	tst.w	r8, #1
 8012460:	d006      	beq.n	8012470 <_strtod_l+0x538>
 8012462:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246a:	f7ee f84d 	bl	8000508 <__aeabi_dmul>
 801246e:	2301      	movs	r3, #1
 8012470:	3501      	adds	r5, #1
 8012472:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012476:	e7cc      	b.n	8012412 <_strtod_l+0x4da>
 8012478:	d0ed      	beq.n	8012456 <_strtod_l+0x51e>
 801247a:	f1c8 0800 	rsb	r8, r8, #0
 801247e:	f018 020f 	ands.w	r2, r8, #15
 8012482:	d00a      	beq.n	801249a <_strtod_l+0x562>
 8012484:	4b14      	ldr	r3, [pc, #80]	; (80124d8 <_strtod_l+0x5a0>)
 8012486:	4648      	mov	r0, r9
 8012488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801248c:	4651      	mov	r1, sl
 801248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012492:	f7ee f963 	bl	800075c <__aeabi_ddiv>
 8012496:	4681      	mov	r9, r0
 8012498:	468a      	mov	sl, r1
 801249a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801249e:	d0da      	beq.n	8012456 <_strtod_l+0x51e>
 80124a0:	f1b8 0f1f 	cmp.w	r8, #31
 80124a4:	dd24      	ble.n	80124f0 <_strtod_l+0x5b8>
 80124a6:	f04f 0800 	mov.w	r8, #0
 80124aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80124ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80124b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80124b6:	2322      	movs	r3, #34	; 0x22
 80124b8:	f04f 0900 	mov.w	r9, #0
 80124bc:	f04f 0a00 	mov.w	sl, #0
 80124c0:	f8cb 3000 	str.w	r3, [fp]
 80124c4:	e761      	b.n	801238a <_strtod_l+0x452>
 80124c6:	bf00      	nop
 80124c8:	080193a1 	.word	0x080193a1
 80124cc:	0801942b 	.word	0x0801942b
 80124d0:	080193a9 	.word	0x080193a9
 80124d4:	080193ec 	.word	0x080193ec
 80124d8:	080194d0 	.word	0x080194d0
 80124dc:	080194a8 	.word	0x080194a8
 80124e0:	7ff00000 	.word	0x7ff00000
 80124e4:	7ca00000 	.word	0x7ca00000
 80124e8:	fff80000 	.word	0xfff80000
 80124ec:	7fefffff 	.word	0x7fefffff
 80124f0:	f018 0310 	ands.w	r3, r8, #16
 80124f4:	bf18      	it	ne
 80124f6:	236a      	movne	r3, #106	; 0x6a
 80124f8:	4648      	mov	r0, r9
 80124fa:	9305      	str	r3, [sp, #20]
 80124fc:	4651      	mov	r1, sl
 80124fe:	2300      	movs	r3, #0
 8012500:	4da1      	ldr	r5, [pc, #644]	; (8012788 <_strtod_l+0x850>)
 8012502:	f1b8 0f00 	cmp.w	r8, #0
 8012506:	f300 8113 	bgt.w	8012730 <_strtod_l+0x7f8>
 801250a:	b10b      	cbz	r3, 8012510 <_strtod_l+0x5d8>
 801250c:	4681      	mov	r9, r0
 801250e:	468a      	mov	sl, r1
 8012510:	9b05      	ldr	r3, [sp, #20]
 8012512:	b1bb      	cbz	r3, 8012544 <_strtod_l+0x60c>
 8012514:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8012518:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801251c:	2b00      	cmp	r3, #0
 801251e:	4651      	mov	r1, sl
 8012520:	dd10      	ble.n	8012544 <_strtod_l+0x60c>
 8012522:	2b1f      	cmp	r3, #31
 8012524:	f340 8110 	ble.w	8012748 <_strtod_l+0x810>
 8012528:	2b34      	cmp	r3, #52	; 0x34
 801252a:	bfd8      	it	le
 801252c:	f04f 32ff 	movle.w	r2, #4294967295
 8012530:	f04f 0900 	mov.w	r9, #0
 8012534:	bfcf      	iteee	gt
 8012536:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 801253a:	3b20      	suble	r3, #32
 801253c:	fa02 f303 	lslle.w	r3, r2, r3
 8012540:	ea03 0a01 	andle.w	sl, r3, r1
 8012544:	2200      	movs	r2, #0
 8012546:	2300      	movs	r3, #0
 8012548:	4648      	mov	r0, r9
 801254a:	4651      	mov	r1, sl
 801254c:	f7ee fa44 	bl	80009d8 <__aeabi_dcmpeq>
 8012550:	2800      	cmp	r0, #0
 8012552:	d1a8      	bne.n	80124a6 <_strtod_l+0x56e>
 8012554:	9b06      	ldr	r3, [sp, #24]
 8012556:	9a04      	ldr	r2, [sp, #16]
 8012558:	9300      	str	r3, [sp, #0]
 801255a:	9908      	ldr	r1, [sp, #32]
 801255c:	4623      	mov	r3, r4
 801255e:	4658      	mov	r0, fp
 8012560:	f002 f852 	bl	8014608 <__s2b>
 8012564:	9008      	str	r0, [sp, #32]
 8012566:	2800      	cmp	r0, #0
 8012568:	f43f af00 	beq.w	801236c <_strtod_l+0x434>
 801256c:	9a07      	ldr	r2, [sp, #28]
 801256e:	9b07      	ldr	r3, [sp, #28]
 8012570:	2a00      	cmp	r2, #0
 8012572:	f1c3 0300 	rsb	r3, r3, #0
 8012576:	bfa8      	it	ge
 8012578:	2300      	movge	r3, #0
 801257a:	f04f 0800 	mov.w	r8, #0
 801257e:	930e      	str	r3, [sp, #56]	; 0x38
 8012580:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012584:	9316      	str	r3, [sp, #88]	; 0x58
 8012586:	f8cd 8010 	str.w	r8, [sp, #16]
 801258a:	9b08      	ldr	r3, [sp, #32]
 801258c:	4658      	mov	r0, fp
 801258e:	6859      	ldr	r1, [r3, #4]
 8012590:	f001 ffb4 	bl	80144fc <_Balloc>
 8012594:	9006      	str	r0, [sp, #24]
 8012596:	2800      	cmp	r0, #0
 8012598:	f43f aef0 	beq.w	801237c <_strtod_l+0x444>
 801259c:	9b08      	ldr	r3, [sp, #32]
 801259e:	300c      	adds	r0, #12
 80125a0:	691a      	ldr	r2, [r3, #16]
 80125a2:	f103 010c 	add.w	r1, r3, #12
 80125a6:	3202      	adds	r2, #2
 80125a8:	0092      	lsls	r2, r2, #2
 80125aa:	f7fe fdbf 	bl	801112c <memcpy>
 80125ae:	ab1e      	add	r3, sp, #120	; 0x78
 80125b0:	9301      	str	r3, [sp, #4]
 80125b2:	ab1d      	add	r3, sp, #116	; 0x74
 80125b4:	9300      	str	r3, [sp, #0]
 80125b6:	464a      	mov	r2, r9
 80125b8:	4653      	mov	r3, sl
 80125ba:	4658      	mov	r0, fp
 80125bc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80125c0:	f002 fadc 	bl	8014b7c <__d2b>
 80125c4:	901c      	str	r0, [sp, #112]	; 0x70
 80125c6:	2800      	cmp	r0, #0
 80125c8:	f43f aed8 	beq.w	801237c <_strtod_l+0x444>
 80125cc:	2101      	movs	r1, #1
 80125ce:	4658      	mov	r0, fp
 80125d0:	f002 f8a6 	bl	8014720 <__i2b>
 80125d4:	9004      	str	r0, [sp, #16]
 80125d6:	4603      	mov	r3, r0
 80125d8:	2800      	cmp	r0, #0
 80125da:	f43f aecf 	beq.w	801237c <_strtod_l+0x444>
 80125de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80125e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80125e2:	2d00      	cmp	r5, #0
 80125e4:	bfab      	itete	ge
 80125e6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80125e8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80125ea:	18ee      	addge	r6, r5, r3
 80125ec:	1b5c      	sublt	r4, r3, r5
 80125ee:	9b05      	ldr	r3, [sp, #20]
 80125f0:	bfa8      	it	ge
 80125f2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80125f4:	eba5 0503 	sub.w	r5, r5, r3
 80125f8:	4415      	add	r5, r2
 80125fa:	4b64      	ldr	r3, [pc, #400]	; (801278c <_strtod_l+0x854>)
 80125fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8012600:	bfb8      	it	lt
 8012602:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012604:	429d      	cmp	r5, r3
 8012606:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801260a:	f280 80af 	bge.w	801276c <_strtod_l+0x834>
 801260e:	1b5b      	subs	r3, r3, r5
 8012610:	2b1f      	cmp	r3, #31
 8012612:	eba2 0203 	sub.w	r2, r2, r3
 8012616:	f04f 0701 	mov.w	r7, #1
 801261a:	f300 809c 	bgt.w	8012756 <_strtod_l+0x81e>
 801261e:	2500      	movs	r5, #0
 8012620:	fa07 f303 	lsl.w	r3, r7, r3
 8012624:	930f      	str	r3, [sp, #60]	; 0x3c
 8012626:	18b7      	adds	r7, r6, r2
 8012628:	9b05      	ldr	r3, [sp, #20]
 801262a:	42be      	cmp	r6, r7
 801262c:	4414      	add	r4, r2
 801262e:	441c      	add	r4, r3
 8012630:	4633      	mov	r3, r6
 8012632:	bfa8      	it	ge
 8012634:	463b      	movge	r3, r7
 8012636:	42a3      	cmp	r3, r4
 8012638:	bfa8      	it	ge
 801263a:	4623      	movge	r3, r4
 801263c:	2b00      	cmp	r3, #0
 801263e:	bfc2      	ittt	gt
 8012640:	1aff      	subgt	r7, r7, r3
 8012642:	1ae4      	subgt	r4, r4, r3
 8012644:	1af6      	subgt	r6, r6, r3
 8012646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012648:	b1bb      	cbz	r3, 801267a <_strtod_l+0x742>
 801264a:	461a      	mov	r2, r3
 801264c:	9904      	ldr	r1, [sp, #16]
 801264e:	4658      	mov	r0, fp
 8012650:	f002 f904 	bl	801485c <__pow5mult>
 8012654:	9004      	str	r0, [sp, #16]
 8012656:	2800      	cmp	r0, #0
 8012658:	f43f ae90 	beq.w	801237c <_strtod_l+0x444>
 801265c:	4601      	mov	r1, r0
 801265e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012660:	4658      	mov	r0, fp
 8012662:	f002 f866 	bl	8014732 <__multiply>
 8012666:	9009      	str	r0, [sp, #36]	; 0x24
 8012668:	2800      	cmp	r0, #0
 801266a:	f43f ae87 	beq.w	801237c <_strtod_l+0x444>
 801266e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012670:	4658      	mov	r0, fp
 8012672:	f001 ff77 	bl	8014564 <_Bfree>
 8012676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012678:	931c      	str	r3, [sp, #112]	; 0x70
 801267a:	2f00      	cmp	r7, #0
 801267c:	dc7a      	bgt.n	8012774 <_strtod_l+0x83c>
 801267e:	9b07      	ldr	r3, [sp, #28]
 8012680:	2b00      	cmp	r3, #0
 8012682:	dd08      	ble.n	8012696 <_strtod_l+0x75e>
 8012684:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012686:	9906      	ldr	r1, [sp, #24]
 8012688:	4658      	mov	r0, fp
 801268a:	f002 f8e7 	bl	801485c <__pow5mult>
 801268e:	9006      	str	r0, [sp, #24]
 8012690:	2800      	cmp	r0, #0
 8012692:	f43f ae73 	beq.w	801237c <_strtod_l+0x444>
 8012696:	2c00      	cmp	r4, #0
 8012698:	dd08      	ble.n	80126ac <_strtod_l+0x774>
 801269a:	4622      	mov	r2, r4
 801269c:	9906      	ldr	r1, [sp, #24]
 801269e:	4658      	mov	r0, fp
 80126a0:	f002 f92a 	bl	80148f8 <__lshift>
 80126a4:	9006      	str	r0, [sp, #24]
 80126a6:	2800      	cmp	r0, #0
 80126a8:	f43f ae68 	beq.w	801237c <_strtod_l+0x444>
 80126ac:	2e00      	cmp	r6, #0
 80126ae:	dd08      	ble.n	80126c2 <_strtod_l+0x78a>
 80126b0:	4632      	mov	r2, r6
 80126b2:	9904      	ldr	r1, [sp, #16]
 80126b4:	4658      	mov	r0, fp
 80126b6:	f002 f91f 	bl	80148f8 <__lshift>
 80126ba:	9004      	str	r0, [sp, #16]
 80126bc:	2800      	cmp	r0, #0
 80126be:	f43f ae5d 	beq.w	801237c <_strtod_l+0x444>
 80126c2:	9a06      	ldr	r2, [sp, #24]
 80126c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80126c6:	4658      	mov	r0, fp
 80126c8:	f002 f984 	bl	80149d4 <__mdiff>
 80126cc:	4680      	mov	r8, r0
 80126ce:	2800      	cmp	r0, #0
 80126d0:	f43f ae54 	beq.w	801237c <_strtod_l+0x444>
 80126d4:	2400      	movs	r4, #0
 80126d6:	68c3      	ldr	r3, [r0, #12]
 80126d8:	9904      	ldr	r1, [sp, #16]
 80126da:	60c4      	str	r4, [r0, #12]
 80126dc:	930c      	str	r3, [sp, #48]	; 0x30
 80126de:	f002 f95f 	bl	80149a0 <__mcmp>
 80126e2:	42a0      	cmp	r0, r4
 80126e4:	da54      	bge.n	8012790 <_strtod_l+0x858>
 80126e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126e8:	b9f3      	cbnz	r3, 8012728 <_strtod_l+0x7f0>
 80126ea:	f1b9 0f00 	cmp.w	r9, #0
 80126ee:	d11b      	bne.n	8012728 <_strtod_l+0x7f0>
 80126f0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80126f4:	b9c3      	cbnz	r3, 8012728 <_strtod_l+0x7f0>
 80126f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80126fa:	0d1b      	lsrs	r3, r3, #20
 80126fc:	051b      	lsls	r3, r3, #20
 80126fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012702:	d911      	bls.n	8012728 <_strtod_l+0x7f0>
 8012704:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012708:	b91b      	cbnz	r3, 8012712 <_strtod_l+0x7da>
 801270a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801270e:	2b01      	cmp	r3, #1
 8012710:	dd0a      	ble.n	8012728 <_strtod_l+0x7f0>
 8012712:	4641      	mov	r1, r8
 8012714:	2201      	movs	r2, #1
 8012716:	4658      	mov	r0, fp
 8012718:	f002 f8ee 	bl	80148f8 <__lshift>
 801271c:	9904      	ldr	r1, [sp, #16]
 801271e:	4680      	mov	r8, r0
 8012720:	f002 f93e 	bl	80149a0 <__mcmp>
 8012724:	2800      	cmp	r0, #0
 8012726:	dc68      	bgt.n	80127fa <_strtod_l+0x8c2>
 8012728:	9b05      	ldr	r3, [sp, #20]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d172      	bne.n	8012814 <_strtod_l+0x8dc>
 801272e:	e630      	b.n	8012392 <_strtod_l+0x45a>
 8012730:	f018 0f01 	tst.w	r8, #1
 8012734:	d004      	beq.n	8012740 <_strtod_l+0x808>
 8012736:	e9d5 2300 	ldrd	r2, r3, [r5]
 801273a:	f7ed fee5 	bl	8000508 <__aeabi_dmul>
 801273e:	2301      	movs	r3, #1
 8012740:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012744:	3508      	adds	r5, #8
 8012746:	e6dc      	b.n	8012502 <_strtod_l+0x5ca>
 8012748:	f04f 32ff 	mov.w	r2, #4294967295
 801274c:	fa02 f303 	lsl.w	r3, r2, r3
 8012750:	ea03 0909 	and.w	r9, r3, r9
 8012754:	e6f6      	b.n	8012544 <_strtod_l+0x60c>
 8012756:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801275a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801275e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8012762:	35e2      	adds	r5, #226	; 0xe2
 8012764:	fa07 f505 	lsl.w	r5, r7, r5
 8012768:	970f      	str	r7, [sp, #60]	; 0x3c
 801276a:	e75c      	b.n	8012626 <_strtod_l+0x6ee>
 801276c:	2301      	movs	r3, #1
 801276e:	2500      	movs	r5, #0
 8012770:	930f      	str	r3, [sp, #60]	; 0x3c
 8012772:	e758      	b.n	8012626 <_strtod_l+0x6ee>
 8012774:	463a      	mov	r2, r7
 8012776:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012778:	4658      	mov	r0, fp
 801277a:	f002 f8bd 	bl	80148f8 <__lshift>
 801277e:	901c      	str	r0, [sp, #112]	; 0x70
 8012780:	2800      	cmp	r0, #0
 8012782:	f47f af7c 	bne.w	801267e <_strtod_l+0x746>
 8012786:	e5f9      	b.n	801237c <_strtod_l+0x444>
 8012788:	08019400 	.word	0x08019400
 801278c:	fffffc02 	.word	0xfffffc02
 8012790:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012794:	f040 8089 	bne.w	80128aa <_strtod_l+0x972>
 8012798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801279a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801279e:	b342      	cbz	r2, 80127f2 <_strtod_l+0x8ba>
 80127a0:	4aaf      	ldr	r2, [pc, #700]	; (8012a60 <_strtod_l+0xb28>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d156      	bne.n	8012854 <_strtod_l+0x91c>
 80127a6:	9b05      	ldr	r3, [sp, #20]
 80127a8:	4648      	mov	r0, r9
 80127aa:	b1eb      	cbz	r3, 80127e8 <_strtod_l+0x8b0>
 80127ac:	4653      	mov	r3, sl
 80127ae:	4aad      	ldr	r2, [pc, #692]	; (8012a64 <_strtod_l+0xb2c>)
 80127b0:	f04f 31ff 	mov.w	r1, #4294967295
 80127b4:	401a      	ands	r2, r3
 80127b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80127ba:	d818      	bhi.n	80127ee <_strtod_l+0x8b6>
 80127bc:	0d12      	lsrs	r2, r2, #20
 80127be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80127c2:	fa01 f303 	lsl.w	r3, r1, r3
 80127c6:	4298      	cmp	r0, r3
 80127c8:	d144      	bne.n	8012854 <_strtod_l+0x91c>
 80127ca:	4ba7      	ldr	r3, [pc, #668]	; (8012a68 <_strtod_l+0xb30>)
 80127cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d102      	bne.n	80127d8 <_strtod_l+0x8a0>
 80127d2:	3001      	adds	r0, #1
 80127d4:	f43f add2 	beq.w	801237c <_strtod_l+0x444>
 80127d8:	4ba2      	ldr	r3, [pc, #648]	; (8012a64 <_strtod_l+0xb2c>)
 80127da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127dc:	f04f 0900 	mov.w	r9, #0
 80127e0:	401a      	ands	r2, r3
 80127e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80127e6:	e79f      	b.n	8012728 <_strtod_l+0x7f0>
 80127e8:	f04f 33ff 	mov.w	r3, #4294967295
 80127ec:	e7eb      	b.n	80127c6 <_strtod_l+0x88e>
 80127ee:	460b      	mov	r3, r1
 80127f0:	e7e9      	b.n	80127c6 <_strtod_l+0x88e>
 80127f2:	bb7b      	cbnz	r3, 8012854 <_strtod_l+0x91c>
 80127f4:	f1b9 0f00 	cmp.w	r9, #0
 80127f8:	d12c      	bne.n	8012854 <_strtod_l+0x91c>
 80127fa:	9905      	ldr	r1, [sp, #20]
 80127fc:	4653      	mov	r3, sl
 80127fe:	4a99      	ldr	r2, [pc, #612]	; (8012a64 <_strtod_l+0xb2c>)
 8012800:	b1f1      	cbz	r1, 8012840 <_strtod_l+0x908>
 8012802:	ea02 010a 	and.w	r1, r2, sl
 8012806:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801280a:	dc19      	bgt.n	8012840 <_strtod_l+0x908>
 801280c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012810:	f77f ae51 	ble.w	80124b6 <_strtod_l+0x57e>
 8012814:	2300      	movs	r3, #0
 8012816:	4a95      	ldr	r2, [pc, #596]	; (8012a6c <_strtod_l+0xb34>)
 8012818:	4648      	mov	r0, r9
 801281a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801281e:	4651      	mov	r1, sl
 8012820:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012824:	f7ed fe70 	bl	8000508 <__aeabi_dmul>
 8012828:	4681      	mov	r9, r0
 801282a:	468a      	mov	sl, r1
 801282c:	2900      	cmp	r1, #0
 801282e:	f47f adb0 	bne.w	8012392 <_strtod_l+0x45a>
 8012832:	2800      	cmp	r0, #0
 8012834:	f47f adad 	bne.w	8012392 <_strtod_l+0x45a>
 8012838:	2322      	movs	r3, #34	; 0x22
 801283a:	f8cb 3000 	str.w	r3, [fp]
 801283e:	e5a8      	b.n	8012392 <_strtod_l+0x45a>
 8012840:	4013      	ands	r3, r2
 8012842:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012846:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 801284a:	f04f 39ff 	mov.w	r9, #4294967295
 801284e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8012852:	e769      	b.n	8012728 <_strtod_l+0x7f0>
 8012854:	b19d      	cbz	r5, 801287e <_strtod_l+0x946>
 8012856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012858:	421d      	tst	r5, r3
 801285a:	f43f af65 	beq.w	8012728 <_strtod_l+0x7f0>
 801285e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012860:	9a05      	ldr	r2, [sp, #20]
 8012862:	4648      	mov	r0, r9
 8012864:	4651      	mov	r1, sl
 8012866:	b173      	cbz	r3, 8012886 <_strtod_l+0x94e>
 8012868:	f7ff fb42 	bl	8011ef0 <sulp>
 801286c:	4602      	mov	r2, r0
 801286e:	460b      	mov	r3, r1
 8012870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012874:	f7ed fc92 	bl	800019c <__adddf3>
 8012878:	4681      	mov	r9, r0
 801287a:	468a      	mov	sl, r1
 801287c:	e754      	b.n	8012728 <_strtod_l+0x7f0>
 801287e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012880:	ea13 0f09 	tst.w	r3, r9
 8012884:	e7e9      	b.n	801285a <_strtod_l+0x922>
 8012886:	f7ff fb33 	bl	8011ef0 <sulp>
 801288a:	4602      	mov	r2, r0
 801288c:	460b      	mov	r3, r1
 801288e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012892:	f7ed fc81 	bl	8000198 <__aeabi_dsub>
 8012896:	2200      	movs	r2, #0
 8012898:	2300      	movs	r3, #0
 801289a:	4681      	mov	r9, r0
 801289c:	468a      	mov	sl, r1
 801289e:	f7ee f89b 	bl	80009d8 <__aeabi_dcmpeq>
 80128a2:	2800      	cmp	r0, #0
 80128a4:	f47f ae07 	bne.w	80124b6 <_strtod_l+0x57e>
 80128a8:	e73e      	b.n	8012728 <_strtod_l+0x7f0>
 80128aa:	9904      	ldr	r1, [sp, #16]
 80128ac:	4640      	mov	r0, r8
 80128ae:	f002 f9b4 	bl	8014c1a <__ratio>
 80128b2:	2200      	movs	r2, #0
 80128b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80128b8:	4606      	mov	r6, r0
 80128ba:	460f      	mov	r7, r1
 80128bc:	f7ee f8a0 	bl	8000a00 <__aeabi_dcmple>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d075      	beq.n	80129b0 <_strtod_l+0xa78>
 80128c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d047      	beq.n	801295a <_strtod_l+0xa22>
 80128ca:	2600      	movs	r6, #0
 80128cc:	4f68      	ldr	r7, [pc, #416]	; (8012a70 <_strtod_l+0xb38>)
 80128ce:	4d68      	ldr	r5, [pc, #416]	; (8012a70 <_strtod_l+0xb38>)
 80128d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128d6:	0d1b      	lsrs	r3, r3, #20
 80128d8:	051b      	lsls	r3, r3, #20
 80128da:	930f      	str	r3, [sp, #60]	; 0x3c
 80128dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128de:	4b65      	ldr	r3, [pc, #404]	; (8012a74 <_strtod_l+0xb3c>)
 80128e0:	429a      	cmp	r2, r3
 80128e2:	f040 80cf 	bne.w	8012a84 <_strtod_l+0xb4c>
 80128e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80128ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80128ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f0:	4648      	mov	r0, r9
 80128f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80128f6:	4651      	mov	r1, sl
 80128f8:	f002 f8ca 	bl	8014a90 <__ulp>
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	4630      	mov	r0, r6
 8012902:	4639      	mov	r1, r7
 8012904:	f7ed fe00 	bl	8000508 <__aeabi_dmul>
 8012908:	464a      	mov	r2, r9
 801290a:	4653      	mov	r3, sl
 801290c:	f7ed fc46 	bl	800019c <__adddf3>
 8012910:	460b      	mov	r3, r1
 8012912:	4954      	ldr	r1, [pc, #336]	; (8012a64 <_strtod_l+0xb2c>)
 8012914:	4a58      	ldr	r2, [pc, #352]	; (8012a78 <_strtod_l+0xb40>)
 8012916:	4019      	ands	r1, r3
 8012918:	4291      	cmp	r1, r2
 801291a:	4681      	mov	r9, r0
 801291c:	d95e      	bls.n	80129dc <_strtod_l+0xaa4>
 801291e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012920:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012924:	4293      	cmp	r3, r2
 8012926:	d103      	bne.n	8012930 <_strtod_l+0x9f8>
 8012928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801292a:	3301      	adds	r3, #1
 801292c:	f43f ad26 	beq.w	801237c <_strtod_l+0x444>
 8012930:	f04f 39ff 	mov.w	r9, #4294967295
 8012934:	f8df a130 	ldr.w	sl, [pc, #304]	; 8012a68 <_strtod_l+0xb30>
 8012938:	991c      	ldr	r1, [sp, #112]	; 0x70
 801293a:	4658      	mov	r0, fp
 801293c:	f001 fe12 	bl	8014564 <_Bfree>
 8012940:	9906      	ldr	r1, [sp, #24]
 8012942:	4658      	mov	r0, fp
 8012944:	f001 fe0e 	bl	8014564 <_Bfree>
 8012948:	9904      	ldr	r1, [sp, #16]
 801294a:	4658      	mov	r0, fp
 801294c:	f001 fe0a 	bl	8014564 <_Bfree>
 8012950:	4641      	mov	r1, r8
 8012952:	4658      	mov	r0, fp
 8012954:	f001 fe06 	bl	8014564 <_Bfree>
 8012958:	e617      	b.n	801258a <_strtod_l+0x652>
 801295a:	f1b9 0f00 	cmp.w	r9, #0
 801295e:	d119      	bne.n	8012994 <_strtod_l+0xa5c>
 8012960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012966:	b9e3      	cbnz	r3, 80129a2 <_strtod_l+0xa6a>
 8012968:	2200      	movs	r2, #0
 801296a:	4b41      	ldr	r3, [pc, #260]	; (8012a70 <_strtod_l+0xb38>)
 801296c:	4630      	mov	r0, r6
 801296e:	4639      	mov	r1, r7
 8012970:	f7ee f83c 	bl	80009ec <__aeabi_dcmplt>
 8012974:	b9c8      	cbnz	r0, 80129aa <_strtod_l+0xa72>
 8012976:	2200      	movs	r2, #0
 8012978:	4b40      	ldr	r3, [pc, #256]	; (8012a7c <_strtod_l+0xb44>)
 801297a:	4630      	mov	r0, r6
 801297c:	4639      	mov	r1, r7
 801297e:	f7ed fdc3 	bl	8000508 <__aeabi_dmul>
 8012982:	4604      	mov	r4, r0
 8012984:	460d      	mov	r5, r1
 8012986:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801298a:	9418      	str	r4, [sp, #96]	; 0x60
 801298c:	9319      	str	r3, [sp, #100]	; 0x64
 801298e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8012992:	e79d      	b.n	80128d0 <_strtod_l+0x998>
 8012994:	f1b9 0f01 	cmp.w	r9, #1
 8012998:	d103      	bne.n	80129a2 <_strtod_l+0xa6a>
 801299a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801299c:	2b00      	cmp	r3, #0
 801299e:	f43f ad8a 	beq.w	80124b6 <_strtod_l+0x57e>
 80129a2:	2600      	movs	r6, #0
 80129a4:	4f36      	ldr	r7, [pc, #216]	; (8012a80 <_strtod_l+0xb48>)
 80129a6:	2400      	movs	r4, #0
 80129a8:	e791      	b.n	80128ce <_strtod_l+0x996>
 80129aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80129ac:	4d33      	ldr	r5, [pc, #204]	; (8012a7c <_strtod_l+0xb44>)
 80129ae:	e7ea      	b.n	8012986 <_strtod_l+0xa4e>
 80129b0:	4b32      	ldr	r3, [pc, #200]	; (8012a7c <_strtod_l+0xb44>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	4630      	mov	r0, r6
 80129b6:	4639      	mov	r1, r7
 80129b8:	f7ed fda6 	bl	8000508 <__aeabi_dmul>
 80129bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129be:	4604      	mov	r4, r0
 80129c0:	460d      	mov	r5, r1
 80129c2:	b933      	cbnz	r3, 80129d2 <_strtod_l+0xa9a>
 80129c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129c8:	9010      	str	r0, [sp, #64]	; 0x40
 80129ca:	9311      	str	r3, [sp, #68]	; 0x44
 80129cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80129d0:	e77e      	b.n	80128d0 <_strtod_l+0x998>
 80129d2:	4602      	mov	r2, r0
 80129d4:	460b      	mov	r3, r1
 80129d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80129da:	e7f7      	b.n	80129cc <_strtod_l+0xa94>
 80129dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80129e0:	9b05      	ldr	r3, [sp, #20]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1a8      	bne.n	8012938 <_strtod_l+0xa00>
 80129e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80129ea:	0d1b      	lsrs	r3, r3, #20
 80129ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129ee:	051b      	lsls	r3, r3, #20
 80129f0:	429a      	cmp	r2, r3
 80129f2:	4656      	mov	r6, sl
 80129f4:	d1a0      	bne.n	8012938 <_strtod_l+0xa00>
 80129f6:	4629      	mov	r1, r5
 80129f8:	4620      	mov	r0, r4
 80129fa:	f7ee f835 	bl	8000a68 <__aeabi_d2iz>
 80129fe:	f7ed fd19 	bl	8000434 <__aeabi_i2d>
 8012a02:	460b      	mov	r3, r1
 8012a04:	4602      	mov	r2, r0
 8012a06:	4629      	mov	r1, r5
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7ed fbc5 	bl	8000198 <__aeabi_dsub>
 8012a0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a10:	4604      	mov	r4, r0
 8012a12:	460d      	mov	r5, r1
 8012a14:	b933      	cbnz	r3, 8012a24 <_strtod_l+0xaec>
 8012a16:	f1b9 0f00 	cmp.w	r9, #0
 8012a1a:	d103      	bne.n	8012a24 <_strtod_l+0xaec>
 8012a1c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8012a20:	2e00      	cmp	r6, #0
 8012a22:	d06a      	beq.n	8012afa <_strtod_l+0xbc2>
 8012a24:	a30a      	add	r3, pc, #40	; (adr r3, 8012a50 <_strtod_l+0xb18>)
 8012a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	f7ed ffdd 	bl	80009ec <__aeabi_dcmplt>
 8012a32:	2800      	cmp	r0, #0
 8012a34:	f47f acad 	bne.w	8012392 <_strtod_l+0x45a>
 8012a38:	a307      	add	r3, pc, #28	; (adr r3, 8012a58 <_strtod_l+0xb20>)
 8012a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3e:	4620      	mov	r0, r4
 8012a40:	4629      	mov	r1, r5
 8012a42:	f7ed fff1 	bl	8000a28 <__aeabi_dcmpgt>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	f43f af76 	beq.w	8012938 <_strtod_l+0xa00>
 8012a4c:	e4a1      	b.n	8012392 <_strtod_l+0x45a>
 8012a4e:	bf00      	nop
 8012a50:	94a03595 	.word	0x94a03595
 8012a54:	3fdfffff 	.word	0x3fdfffff
 8012a58:	35afe535 	.word	0x35afe535
 8012a5c:	3fe00000 	.word	0x3fe00000
 8012a60:	000fffff 	.word	0x000fffff
 8012a64:	7ff00000 	.word	0x7ff00000
 8012a68:	7fefffff 	.word	0x7fefffff
 8012a6c:	39500000 	.word	0x39500000
 8012a70:	3ff00000 	.word	0x3ff00000
 8012a74:	7fe00000 	.word	0x7fe00000
 8012a78:	7c9fffff 	.word	0x7c9fffff
 8012a7c:	3fe00000 	.word	0x3fe00000
 8012a80:	bff00000 	.word	0xbff00000
 8012a84:	9b05      	ldr	r3, [sp, #20]
 8012a86:	b313      	cbz	r3, 8012ace <_strtod_l+0xb96>
 8012a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012a8e:	d81e      	bhi.n	8012ace <_strtod_l+0xb96>
 8012a90:	a325      	add	r3, pc, #148	; (adr r3, 8012b28 <_strtod_l+0xbf0>)
 8012a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a96:	4620      	mov	r0, r4
 8012a98:	4629      	mov	r1, r5
 8012a9a:	f7ed ffb1 	bl	8000a00 <__aeabi_dcmple>
 8012a9e:	b190      	cbz	r0, 8012ac6 <_strtod_l+0xb8e>
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f7ee f808 	bl	8000ab8 <__aeabi_d2uiz>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	bf08      	it	eq
 8012aac:	2001      	moveq	r0, #1
 8012aae:	f7ed fcb1 	bl	8000414 <__aeabi_ui2d>
 8012ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	460d      	mov	r5, r1
 8012ab8:	b9d3      	cbnz	r3, 8012af0 <_strtod_l+0xbb8>
 8012aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012abe:	9012      	str	r0, [sp, #72]	; 0x48
 8012ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8012ac2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8012ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ac8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8012acc:	1a9f      	subs	r7, r3, r2
 8012ace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012ad2:	f001 ffdd 	bl	8014a90 <__ulp>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	460b      	mov	r3, r1
 8012ada:	4630      	mov	r0, r6
 8012adc:	4639      	mov	r1, r7
 8012ade:	f7ed fd13 	bl	8000508 <__aeabi_dmul>
 8012ae2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012ae6:	f7ed fb59 	bl	800019c <__adddf3>
 8012aea:	4681      	mov	r9, r0
 8012aec:	468a      	mov	sl, r1
 8012aee:	e777      	b.n	80129e0 <_strtod_l+0xaa8>
 8012af0:	4602      	mov	r2, r0
 8012af2:	460b      	mov	r3, r1
 8012af4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8012af8:	e7e3      	b.n	8012ac2 <_strtod_l+0xb8a>
 8012afa:	a30d      	add	r3, pc, #52	; (adr r3, 8012b30 <_strtod_l+0xbf8>)
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	f7ed ff74 	bl	80009ec <__aeabi_dcmplt>
 8012b04:	e79f      	b.n	8012a46 <_strtod_l+0xb0e>
 8012b06:	2300      	movs	r3, #0
 8012b08:	930d      	str	r3, [sp, #52]	; 0x34
 8012b0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012b0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012b0e:	6013      	str	r3, [r2, #0]
 8012b10:	f7ff ba55 	b.w	8011fbe <_strtod_l+0x86>
 8012b14:	2b65      	cmp	r3, #101	; 0x65
 8012b16:	f04f 0200 	mov.w	r2, #0
 8012b1a:	f43f ab42 	beq.w	80121a2 <_strtod_l+0x26a>
 8012b1e:	2101      	movs	r1, #1
 8012b20:	4614      	mov	r4, r2
 8012b22:	9105      	str	r1, [sp, #20]
 8012b24:	f7ff babf 	b.w	80120a6 <_strtod_l+0x16e>
 8012b28:	ffc00000 	.word	0xffc00000
 8012b2c:	41dfffff 	.word	0x41dfffff
 8012b30:	94a03595 	.word	0x94a03595
 8012b34:	3fcfffff 	.word	0x3fcfffff

08012b38 <_strtod_r>:
 8012b38:	4b05      	ldr	r3, [pc, #20]	; (8012b50 <_strtod_r+0x18>)
 8012b3a:	b410      	push	{r4}
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4c05      	ldr	r4, [pc, #20]	; (8012b54 <_strtod_r+0x1c>)
 8012b40:	6a1b      	ldr	r3, [r3, #32]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	bf08      	it	eq
 8012b46:	4623      	moveq	r3, r4
 8012b48:	bc10      	pop	{r4}
 8012b4a:	f7ff b9f5 	b.w	8011f38 <_strtod_l>
 8012b4e:	bf00      	nop
 8012b50:	20000140 	.word	0x20000140
 8012b54:	200001a4 	.word	0x200001a4

08012b58 <_strtol_l.isra.0>:
 8012b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b5c:	4680      	mov	r8, r0
 8012b5e:	4689      	mov	r9, r1
 8012b60:	4692      	mov	sl, r2
 8012b62:	461e      	mov	r6, r3
 8012b64:	460f      	mov	r7, r1
 8012b66:	463d      	mov	r5, r7
 8012b68:	9808      	ldr	r0, [sp, #32]
 8012b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b6e:	f001 fc25 	bl	80143bc <__locale_ctype_ptr_l>
 8012b72:	4420      	add	r0, r4
 8012b74:	7843      	ldrb	r3, [r0, #1]
 8012b76:	f013 0308 	ands.w	r3, r3, #8
 8012b7a:	d132      	bne.n	8012be2 <_strtol_l.isra.0+0x8a>
 8012b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8012b7e:	d132      	bne.n	8012be6 <_strtol_l.isra.0+0x8e>
 8012b80:	2201      	movs	r2, #1
 8012b82:	787c      	ldrb	r4, [r7, #1]
 8012b84:	1cbd      	adds	r5, r7, #2
 8012b86:	2e00      	cmp	r6, #0
 8012b88:	d05d      	beq.n	8012c46 <_strtol_l.isra.0+0xee>
 8012b8a:	2e10      	cmp	r6, #16
 8012b8c:	d109      	bne.n	8012ba2 <_strtol_l.isra.0+0x4a>
 8012b8e:	2c30      	cmp	r4, #48	; 0x30
 8012b90:	d107      	bne.n	8012ba2 <_strtol_l.isra.0+0x4a>
 8012b92:	782b      	ldrb	r3, [r5, #0]
 8012b94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b98:	2b58      	cmp	r3, #88	; 0x58
 8012b9a:	d14f      	bne.n	8012c3c <_strtol_l.isra.0+0xe4>
 8012b9c:	2610      	movs	r6, #16
 8012b9e:	786c      	ldrb	r4, [r5, #1]
 8012ba0:	3502      	adds	r5, #2
 8012ba2:	2a00      	cmp	r2, #0
 8012ba4:	bf14      	ite	ne
 8012ba6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012baa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012bae:	2700      	movs	r7, #0
 8012bb0:	fbb1 fcf6 	udiv	ip, r1, r6
 8012bb4:	4638      	mov	r0, r7
 8012bb6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012bba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012bbe:	2b09      	cmp	r3, #9
 8012bc0:	d817      	bhi.n	8012bf2 <_strtol_l.isra.0+0x9a>
 8012bc2:	461c      	mov	r4, r3
 8012bc4:	42a6      	cmp	r6, r4
 8012bc6:	dd23      	ble.n	8012c10 <_strtol_l.isra.0+0xb8>
 8012bc8:	1c7b      	adds	r3, r7, #1
 8012bca:	d007      	beq.n	8012bdc <_strtol_l.isra.0+0x84>
 8012bcc:	4584      	cmp	ip, r0
 8012bce:	d31c      	bcc.n	8012c0a <_strtol_l.isra.0+0xb2>
 8012bd0:	d101      	bne.n	8012bd6 <_strtol_l.isra.0+0x7e>
 8012bd2:	45a6      	cmp	lr, r4
 8012bd4:	db19      	blt.n	8012c0a <_strtol_l.isra.0+0xb2>
 8012bd6:	2701      	movs	r7, #1
 8012bd8:	fb00 4006 	mla	r0, r0, r6, r4
 8012bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012be0:	e7eb      	b.n	8012bba <_strtol_l.isra.0+0x62>
 8012be2:	462f      	mov	r7, r5
 8012be4:	e7bf      	b.n	8012b66 <_strtol_l.isra.0+0xe>
 8012be6:	2c2b      	cmp	r4, #43	; 0x2b
 8012be8:	bf04      	itt	eq
 8012bea:	1cbd      	addeq	r5, r7, #2
 8012bec:	787c      	ldrbeq	r4, [r7, #1]
 8012bee:	461a      	mov	r2, r3
 8012bf0:	e7c9      	b.n	8012b86 <_strtol_l.isra.0+0x2e>
 8012bf2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012bf6:	2b19      	cmp	r3, #25
 8012bf8:	d801      	bhi.n	8012bfe <_strtol_l.isra.0+0xa6>
 8012bfa:	3c37      	subs	r4, #55	; 0x37
 8012bfc:	e7e2      	b.n	8012bc4 <_strtol_l.isra.0+0x6c>
 8012bfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012c02:	2b19      	cmp	r3, #25
 8012c04:	d804      	bhi.n	8012c10 <_strtol_l.isra.0+0xb8>
 8012c06:	3c57      	subs	r4, #87	; 0x57
 8012c08:	e7dc      	b.n	8012bc4 <_strtol_l.isra.0+0x6c>
 8012c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8012c0e:	e7e5      	b.n	8012bdc <_strtol_l.isra.0+0x84>
 8012c10:	1c7b      	adds	r3, r7, #1
 8012c12:	d108      	bne.n	8012c26 <_strtol_l.isra.0+0xce>
 8012c14:	2322      	movs	r3, #34	; 0x22
 8012c16:	4608      	mov	r0, r1
 8012c18:	f8c8 3000 	str.w	r3, [r8]
 8012c1c:	f1ba 0f00 	cmp.w	sl, #0
 8012c20:	d107      	bne.n	8012c32 <_strtol_l.isra.0+0xda>
 8012c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c26:	b102      	cbz	r2, 8012c2a <_strtol_l.isra.0+0xd2>
 8012c28:	4240      	negs	r0, r0
 8012c2a:	f1ba 0f00 	cmp.w	sl, #0
 8012c2e:	d0f8      	beq.n	8012c22 <_strtol_l.isra.0+0xca>
 8012c30:	b10f      	cbz	r7, 8012c36 <_strtol_l.isra.0+0xde>
 8012c32:	f105 39ff 	add.w	r9, r5, #4294967295
 8012c36:	f8ca 9000 	str.w	r9, [sl]
 8012c3a:	e7f2      	b.n	8012c22 <_strtol_l.isra.0+0xca>
 8012c3c:	2430      	movs	r4, #48	; 0x30
 8012c3e:	2e00      	cmp	r6, #0
 8012c40:	d1af      	bne.n	8012ba2 <_strtol_l.isra.0+0x4a>
 8012c42:	2608      	movs	r6, #8
 8012c44:	e7ad      	b.n	8012ba2 <_strtol_l.isra.0+0x4a>
 8012c46:	2c30      	cmp	r4, #48	; 0x30
 8012c48:	d0a3      	beq.n	8012b92 <_strtol_l.isra.0+0x3a>
 8012c4a:	260a      	movs	r6, #10
 8012c4c:	e7a9      	b.n	8012ba2 <_strtol_l.isra.0+0x4a>
	...

08012c50 <_strtol_r>:
 8012c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c52:	4c06      	ldr	r4, [pc, #24]	; (8012c6c <_strtol_r+0x1c>)
 8012c54:	4d06      	ldr	r5, [pc, #24]	; (8012c70 <_strtol_r+0x20>)
 8012c56:	6824      	ldr	r4, [r4, #0]
 8012c58:	6a24      	ldr	r4, [r4, #32]
 8012c5a:	2c00      	cmp	r4, #0
 8012c5c:	bf08      	it	eq
 8012c5e:	462c      	moveq	r4, r5
 8012c60:	9400      	str	r4, [sp, #0]
 8012c62:	f7ff ff79 	bl	8012b58 <_strtol_l.isra.0>
 8012c66:	b003      	add	sp, #12
 8012c68:	bd30      	pop	{r4, r5, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20000140 	.word	0x20000140
 8012c70:	200001a4 	.word	0x200001a4

08012c74 <__swbuf_r>:
 8012c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c76:	460e      	mov	r6, r1
 8012c78:	4614      	mov	r4, r2
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	b118      	cbz	r0, 8012c86 <__swbuf_r+0x12>
 8012c7e:	6983      	ldr	r3, [r0, #24]
 8012c80:	b90b      	cbnz	r3, 8012c86 <__swbuf_r+0x12>
 8012c82:	f000 ffe9 	bl	8013c58 <__sinit>
 8012c86:	4b21      	ldr	r3, [pc, #132]	; (8012d0c <__swbuf_r+0x98>)
 8012c88:	429c      	cmp	r4, r3
 8012c8a:	d12a      	bne.n	8012ce2 <__swbuf_r+0x6e>
 8012c8c:	686c      	ldr	r4, [r5, #4]
 8012c8e:	69a3      	ldr	r3, [r4, #24]
 8012c90:	60a3      	str	r3, [r4, #8]
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	071a      	lsls	r2, r3, #28
 8012c96:	d52e      	bpl.n	8012cf6 <__swbuf_r+0x82>
 8012c98:	6923      	ldr	r3, [r4, #16]
 8012c9a:	b363      	cbz	r3, 8012cf6 <__swbuf_r+0x82>
 8012c9c:	6923      	ldr	r3, [r4, #16]
 8012c9e:	6820      	ldr	r0, [r4, #0]
 8012ca0:	b2f6      	uxtb	r6, r6
 8012ca2:	1ac0      	subs	r0, r0, r3
 8012ca4:	6963      	ldr	r3, [r4, #20]
 8012ca6:	4637      	mov	r7, r6
 8012ca8:	4283      	cmp	r3, r0
 8012caa:	dc04      	bgt.n	8012cb6 <__swbuf_r+0x42>
 8012cac:	4621      	mov	r1, r4
 8012cae:	4628      	mov	r0, r5
 8012cb0:	f000 ff68 	bl	8013b84 <_fflush_r>
 8012cb4:	bb28      	cbnz	r0, 8012d02 <__swbuf_r+0x8e>
 8012cb6:	68a3      	ldr	r3, [r4, #8]
 8012cb8:	3001      	adds	r0, #1
 8012cba:	3b01      	subs	r3, #1
 8012cbc:	60a3      	str	r3, [r4, #8]
 8012cbe:	6823      	ldr	r3, [r4, #0]
 8012cc0:	1c5a      	adds	r2, r3, #1
 8012cc2:	6022      	str	r2, [r4, #0]
 8012cc4:	701e      	strb	r6, [r3, #0]
 8012cc6:	6963      	ldr	r3, [r4, #20]
 8012cc8:	4283      	cmp	r3, r0
 8012cca:	d004      	beq.n	8012cd6 <__swbuf_r+0x62>
 8012ccc:	89a3      	ldrh	r3, [r4, #12]
 8012cce:	07db      	lsls	r3, r3, #31
 8012cd0:	d519      	bpl.n	8012d06 <__swbuf_r+0x92>
 8012cd2:	2e0a      	cmp	r6, #10
 8012cd4:	d117      	bne.n	8012d06 <__swbuf_r+0x92>
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4628      	mov	r0, r5
 8012cda:	f000 ff53 	bl	8013b84 <_fflush_r>
 8012cde:	b190      	cbz	r0, 8012d06 <__swbuf_r+0x92>
 8012ce0:	e00f      	b.n	8012d02 <__swbuf_r+0x8e>
 8012ce2:	4b0b      	ldr	r3, [pc, #44]	; (8012d10 <__swbuf_r+0x9c>)
 8012ce4:	429c      	cmp	r4, r3
 8012ce6:	d101      	bne.n	8012cec <__swbuf_r+0x78>
 8012ce8:	68ac      	ldr	r4, [r5, #8]
 8012cea:	e7d0      	b.n	8012c8e <__swbuf_r+0x1a>
 8012cec:	4b09      	ldr	r3, [pc, #36]	; (8012d14 <__swbuf_r+0xa0>)
 8012cee:	429c      	cmp	r4, r3
 8012cf0:	bf08      	it	eq
 8012cf2:	68ec      	ldreq	r4, [r5, #12]
 8012cf4:	e7cb      	b.n	8012c8e <__swbuf_r+0x1a>
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f000 f80d 	bl	8012d18 <__swsetup_r>
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	d0cc      	beq.n	8012c9c <__swbuf_r+0x28>
 8012d02:	f04f 37ff 	mov.w	r7, #4294967295
 8012d06:	4638      	mov	r0, r7
 8012d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	08019458 	.word	0x08019458
 8012d10:	08019478 	.word	0x08019478
 8012d14:	08019438 	.word	0x08019438

08012d18 <__swsetup_r>:
 8012d18:	4b32      	ldr	r3, [pc, #200]	; (8012de4 <__swsetup_r+0xcc>)
 8012d1a:	b570      	push	{r4, r5, r6, lr}
 8012d1c:	681d      	ldr	r5, [r3, #0]
 8012d1e:	4606      	mov	r6, r0
 8012d20:	460c      	mov	r4, r1
 8012d22:	b125      	cbz	r5, 8012d2e <__swsetup_r+0x16>
 8012d24:	69ab      	ldr	r3, [r5, #24]
 8012d26:	b913      	cbnz	r3, 8012d2e <__swsetup_r+0x16>
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f000 ff95 	bl	8013c58 <__sinit>
 8012d2e:	4b2e      	ldr	r3, [pc, #184]	; (8012de8 <__swsetup_r+0xd0>)
 8012d30:	429c      	cmp	r4, r3
 8012d32:	d10f      	bne.n	8012d54 <__swsetup_r+0x3c>
 8012d34:	686c      	ldr	r4, [r5, #4]
 8012d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	0715      	lsls	r5, r2, #28
 8012d3e:	d42c      	bmi.n	8012d9a <__swsetup_r+0x82>
 8012d40:	06d0      	lsls	r0, r2, #27
 8012d42:	d411      	bmi.n	8012d68 <__swsetup_r+0x50>
 8012d44:	2209      	movs	r2, #9
 8012d46:	6032      	str	r2, [r6, #0]
 8012d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d4c:	81a3      	strh	r3, [r4, #12]
 8012d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d52:	e03e      	b.n	8012dd2 <__swsetup_r+0xba>
 8012d54:	4b25      	ldr	r3, [pc, #148]	; (8012dec <__swsetup_r+0xd4>)
 8012d56:	429c      	cmp	r4, r3
 8012d58:	d101      	bne.n	8012d5e <__swsetup_r+0x46>
 8012d5a:	68ac      	ldr	r4, [r5, #8]
 8012d5c:	e7eb      	b.n	8012d36 <__swsetup_r+0x1e>
 8012d5e:	4b24      	ldr	r3, [pc, #144]	; (8012df0 <__swsetup_r+0xd8>)
 8012d60:	429c      	cmp	r4, r3
 8012d62:	bf08      	it	eq
 8012d64:	68ec      	ldreq	r4, [r5, #12]
 8012d66:	e7e6      	b.n	8012d36 <__swsetup_r+0x1e>
 8012d68:	0751      	lsls	r1, r2, #29
 8012d6a:	d512      	bpl.n	8012d92 <__swsetup_r+0x7a>
 8012d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d6e:	b141      	cbz	r1, 8012d82 <__swsetup_r+0x6a>
 8012d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d74:	4299      	cmp	r1, r3
 8012d76:	d002      	beq.n	8012d7e <__swsetup_r+0x66>
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f001 ffc5 	bl	8014d08 <_free_r>
 8012d7e:	2300      	movs	r3, #0
 8012d80:	6363      	str	r3, [r4, #52]	; 0x34
 8012d82:	89a3      	ldrh	r3, [r4, #12]
 8012d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012d88:	81a3      	strh	r3, [r4, #12]
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	6063      	str	r3, [r4, #4]
 8012d8e:	6923      	ldr	r3, [r4, #16]
 8012d90:	6023      	str	r3, [r4, #0]
 8012d92:	89a3      	ldrh	r3, [r4, #12]
 8012d94:	f043 0308 	orr.w	r3, r3, #8
 8012d98:	81a3      	strh	r3, [r4, #12]
 8012d9a:	6923      	ldr	r3, [r4, #16]
 8012d9c:	b94b      	cbnz	r3, 8012db2 <__swsetup_r+0x9a>
 8012d9e:	89a3      	ldrh	r3, [r4, #12]
 8012da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012da8:	d003      	beq.n	8012db2 <__swsetup_r+0x9a>
 8012daa:	4621      	mov	r1, r4
 8012dac:	4630      	mov	r0, r6
 8012dae:	f001 fb3d 	bl	801442c <__smakebuf_r>
 8012db2:	89a2      	ldrh	r2, [r4, #12]
 8012db4:	f012 0301 	ands.w	r3, r2, #1
 8012db8:	d00c      	beq.n	8012dd4 <__swsetup_r+0xbc>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	60a3      	str	r3, [r4, #8]
 8012dbe:	6963      	ldr	r3, [r4, #20]
 8012dc0:	425b      	negs	r3, r3
 8012dc2:	61a3      	str	r3, [r4, #24]
 8012dc4:	6923      	ldr	r3, [r4, #16]
 8012dc6:	b953      	cbnz	r3, 8012dde <__swsetup_r+0xc6>
 8012dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dcc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012dd0:	d1ba      	bne.n	8012d48 <__swsetup_r+0x30>
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	0792      	lsls	r2, r2, #30
 8012dd6:	bf58      	it	pl
 8012dd8:	6963      	ldrpl	r3, [r4, #20]
 8012dda:	60a3      	str	r3, [r4, #8]
 8012ddc:	e7f2      	b.n	8012dc4 <__swsetup_r+0xac>
 8012dde:	2000      	movs	r0, #0
 8012de0:	e7f7      	b.n	8012dd2 <__swsetup_r+0xba>
 8012de2:	bf00      	nop
 8012de4:	20000140 	.word	0x20000140
 8012de8:	08019458 	.word	0x08019458
 8012dec:	08019478 	.word	0x08019478
 8012df0:	08019438 	.word	0x08019438

08012df4 <quorem>:
 8012df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df8:	6903      	ldr	r3, [r0, #16]
 8012dfa:	690c      	ldr	r4, [r1, #16]
 8012dfc:	4680      	mov	r8, r0
 8012dfe:	42a3      	cmp	r3, r4
 8012e00:	f2c0 8084 	blt.w	8012f0c <quorem+0x118>
 8012e04:	3c01      	subs	r4, #1
 8012e06:	f101 0714 	add.w	r7, r1, #20
 8012e0a:	f100 0614 	add.w	r6, r0, #20
 8012e0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012e12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012e16:	3501      	adds	r5, #1
 8012e18:	fbb0 f5f5 	udiv	r5, r0, r5
 8012e1c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012e20:	eb06 030c 	add.w	r3, r6, ip
 8012e24:	eb07 090c 	add.w	r9, r7, ip
 8012e28:	9301      	str	r3, [sp, #4]
 8012e2a:	b39d      	cbz	r5, 8012e94 <quorem+0xa0>
 8012e2c:	f04f 0a00 	mov.w	sl, #0
 8012e30:	4638      	mov	r0, r7
 8012e32:	46b6      	mov	lr, r6
 8012e34:	46d3      	mov	fp, sl
 8012e36:	f850 2b04 	ldr.w	r2, [r0], #4
 8012e3a:	b293      	uxth	r3, r2
 8012e3c:	fb05 a303 	mla	r3, r5, r3, sl
 8012e40:	0c12      	lsrs	r2, r2, #16
 8012e42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e46:	fb05 a202 	mla	r2, r5, r2, sl
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	ebab 0303 	sub.w	r3, fp, r3
 8012e50:	f8de b000 	ldr.w	fp, [lr]
 8012e54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012e58:	fa1f fb8b 	uxth.w	fp, fp
 8012e5c:	445b      	add	r3, fp
 8012e5e:	fa1f fb82 	uxth.w	fp, r2
 8012e62:	f8de 2000 	ldr.w	r2, [lr]
 8012e66:	4581      	cmp	r9, r0
 8012e68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e76:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012e7a:	f84e 3b04 	str.w	r3, [lr], #4
 8012e7e:	d2da      	bcs.n	8012e36 <quorem+0x42>
 8012e80:	f856 300c 	ldr.w	r3, [r6, ip]
 8012e84:	b933      	cbnz	r3, 8012e94 <quorem+0xa0>
 8012e86:	9b01      	ldr	r3, [sp, #4]
 8012e88:	3b04      	subs	r3, #4
 8012e8a:	429e      	cmp	r6, r3
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	d331      	bcc.n	8012ef4 <quorem+0x100>
 8012e90:	f8c8 4010 	str.w	r4, [r8, #16]
 8012e94:	4640      	mov	r0, r8
 8012e96:	f001 fd83 	bl	80149a0 <__mcmp>
 8012e9a:	2800      	cmp	r0, #0
 8012e9c:	db26      	blt.n	8012eec <quorem+0xf8>
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f04f 0c00 	mov.w	ip, #0
 8012ea4:	3501      	adds	r5, #1
 8012ea6:	f857 1b04 	ldr.w	r1, [r7], #4
 8012eaa:	f8d0 e000 	ldr.w	lr, [r0]
 8012eae:	b28b      	uxth	r3, r1
 8012eb0:	ebac 0303 	sub.w	r3, ip, r3
 8012eb4:	fa1f f28e 	uxth.w	r2, lr
 8012eb8:	4413      	add	r3, r2
 8012eba:	0c0a      	lsrs	r2, r1, #16
 8012ebc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012ec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012eca:	45b9      	cmp	r9, r7
 8012ecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012ed0:	f840 3b04 	str.w	r3, [r0], #4
 8012ed4:	d2e7      	bcs.n	8012ea6 <quorem+0xb2>
 8012ed6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012eda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012ede:	b92a      	cbnz	r2, 8012eec <quorem+0xf8>
 8012ee0:	3b04      	subs	r3, #4
 8012ee2:	429e      	cmp	r6, r3
 8012ee4:	461a      	mov	r2, r3
 8012ee6:	d30b      	bcc.n	8012f00 <quorem+0x10c>
 8012ee8:	f8c8 4010 	str.w	r4, [r8, #16]
 8012eec:	4628      	mov	r0, r5
 8012eee:	b003      	add	sp, #12
 8012ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef4:	6812      	ldr	r2, [r2, #0]
 8012ef6:	3b04      	subs	r3, #4
 8012ef8:	2a00      	cmp	r2, #0
 8012efa:	d1c9      	bne.n	8012e90 <quorem+0x9c>
 8012efc:	3c01      	subs	r4, #1
 8012efe:	e7c4      	b.n	8012e8a <quorem+0x96>
 8012f00:	6812      	ldr	r2, [r2, #0]
 8012f02:	3b04      	subs	r3, #4
 8012f04:	2a00      	cmp	r2, #0
 8012f06:	d1ef      	bne.n	8012ee8 <quorem+0xf4>
 8012f08:	3c01      	subs	r4, #1
 8012f0a:	e7ea      	b.n	8012ee2 <quorem+0xee>
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	e7ee      	b.n	8012eee <quorem+0xfa>

08012f10 <_dtoa_r>:
 8012f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f14:	4616      	mov	r6, r2
 8012f16:	461f      	mov	r7, r3
 8012f18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f1a:	b095      	sub	sp, #84	; 0x54
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8012f22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012f26:	b93d      	cbnz	r5, 8012f38 <_dtoa_r+0x28>
 8012f28:	2010      	movs	r0, #16
 8012f2a:	f001 fabf 	bl	80144ac <malloc>
 8012f2e:	6260      	str	r0, [r4, #36]	; 0x24
 8012f30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f34:	6005      	str	r5, [r0, #0]
 8012f36:	60c5      	str	r5, [r0, #12]
 8012f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f3a:	6819      	ldr	r1, [r3, #0]
 8012f3c:	b151      	cbz	r1, 8012f54 <_dtoa_r+0x44>
 8012f3e:	685a      	ldr	r2, [r3, #4]
 8012f40:	2301      	movs	r3, #1
 8012f42:	4093      	lsls	r3, r2
 8012f44:	604a      	str	r2, [r1, #4]
 8012f46:	608b      	str	r3, [r1, #8]
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f001 fb0b 	bl	8014564 <_Bfree>
 8012f4e:	2200      	movs	r2, #0
 8012f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f52:	601a      	str	r2, [r3, #0]
 8012f54:	1e3b      	subs	r3, r7, #0
 8012f56:	bfaf      	iteee	ge
 8012f58:	2300      	movge	r3, #0
 8012f5a:	2201      	movlt	r2, #1
 8012f5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012f60:	9303      	strlt	r3, [sp, #12]
 8012f62:	bfac      	ite	ge
 8012f64:	f8c8 3000 	strge.w	r3, [r8]
 8012f68:	f8c8 2000 	strlt.w	r2, [r8]
 8012f6c:	4bae      	ldr	r3, [pc, #696]	; (8013228 <_dtoa_r+0x318>)
 8012f6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012f72:	ea33 0308 	bics.w	r3, r3, r8
 8012f76:	d11b      	bne.n	8012fb0 <_dtoa_r+0xa0>
 8012f78:	f242 730f 	movw	r3, #9999	; 0x270f
 8012f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012f7e:	6013      	str	r3, [r2, #0]
 8012f80:	9b02      	ldr	r3, [sp, #8]
 8012f82:	b923      	cbnz	r3, 8012f8e <_dtoa_r+0x7e>
 8012f84:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012f88:	2800      	cmp	r0, #0
 8012f8a:	f000 8545 	beq.w	8013a18 <_dtoa_r+0xb08>
 8012f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f90:	b953      	cbnz	r3, 8012fa8 <_dtoa_r+0x98>
 8012f92:	4ba6      	ldr	r3, [pc, #664]	; (801322c <_dtoa_r+0x31c>)
 8012f94:	e021      	b.n	8012fda <_dtoa_r+0xca>
 8012f96:	4ba6      	ldr	r3, [pc, #664]	; (8013230 <_dtoa_r+0x320>)
 8012f98:	9306      	str	r3, [sp, #24]
 8012f9a:	3308      	adds	r3, #8
 8012f9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012f9e:	6013      	str	r3, [r2, #0]
 8012fa0:	9806      	ldr	r0, [sp, #24]
 8012fa2:	b015      	add	sp, #84	; 0x54
 8012fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa8:	4ba0      	ldr	r3, [pc, #640]	; (801322c <_dtoa_r+0x31c>)
 8012faa:	9306      	str	r3, [sp, #24]
 8012fac:	3303      	adds	r3, #3
 8012fae:	e7f5      	b.n	8012f9c <_dtoa_r+0x8c>
 8012fb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	4630      	mov	r0, r6
 8012fba:	4639      	mov	r1, r7
 8012fbc:	f7ed fd0c 	bl	80009d8 <__aeabi_dcmpeq>
 8012fc0:	4682      	mov	sl, r0
 8012fc2:	b160      	cbz	r0, 8012fde <_dtoa_r+0xce>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012fc8:	6013      	str	r3, [r2, #0]
 8012fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f000 8520 	beq.w	8013a12 <_dtoa_r+0xb02>
 8012fd2:	4b98      	ldr	r3, [pc, #608]	; (8013234 <_dtoa_r+0x324>)
 8012fd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012fd6:	6013      	str	r3, [r2, #0]
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	9306      	str	r3, [sp, #24]
 8012fdc:	e7e0      	b.n	8012fa0 <_dtoa_r+0x90>
 8012fde:	ab12      	add	r3, sp, #72	; 0x48
 8012fe0:	9301      	str	r3, [sp, #4]
 8012fe2:	ab13      	add	r3, sp, #76	; 0x4c
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	4632      	mov	r2, r6
 8012fe8:	463b      	mov	r3, r7
 8012fea:	4620      	mov	r0, r4
 8012fec:	f001 fdc6 	bl	8014b7c <__d2b>
 8012ff0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012ff4:	4683      	mov	fp, r0
 8012ff6:	2d00      	cmp	r5, #0
 8012ff8:	d07d      	beq.n	80130f6 <_dtoa_r+0x1e6>
 8012ffa:	46b0      	mov	r8, r6
 8012ffc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013000:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8013004:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8013008:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801300c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8013010:	2200      	movs	r2, #0
 8013012:	4b89      	ldr	r3, [pc, #548]	; (8013238 <_dtoa_r+0x328>)
 8013014:	4640      	mov	r0, r8
 8013016:	4649      	mov	r1, r9
 8013018:	f7ed f8be 	bl	8000198 <__aeabi_dsub>
 801301c:	a37c      	add	r3, pc, #496	; (adr r3, 8013210 <_dtoa_r+0x300>)
 801301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013022:	f7ed fa71 	bl	8000508 <__aeabi_dmul>
 8013026:	a37c      	add	r3, pc, #496	; (adr r3, 8013218 <_dtoa_r+0x308>)
 8013028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302c:	f7ed f8b6 	bl	800019c <__adddf3>
 8013030:	4606      	mov	r6, r0
 8013032:	4628      	mov	r0, r5
 8013034:	460f      	mov	r7, r1
 8013036:	f7ed f9fd 	bl	8000434 <__aeabi_i2d>
 801303a:	a379      	add	r3, pc, #484	; (adr r3, 8013220 <_dtoa_r+0x310>)
 801303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013040:	f7ed fa62 	bl	8000508 <__aeabi_dmul>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	4630      	mov	r0, r6
 801304a:	4639      	mov	r1, r7
 801304c:	f7ed f8a6 	bl	800019c <__adddf3>
 8013050:	4606      	mov	r6, r0
 8013052:	460f      	mov	r7, r1
 8013054:	f7ed fd08 	bl	8000a68 <__aeabi_d2iz>
 8013058:	2200      	movs	r2, #0
 801305a:	4682      	mov	sl, r0
 801305c:	2300      	movs	r3, #0
 801305e:	4630      	mov	r0, r6
 8013060:	4639      	mov	r1, r7
 8013062:	f7ed fcc3 	bl	80009ec <__aeabi_dcmplt>
 8013066:	b148      	cbz	r0, 801307c <_dtoa_r+0x16c>
 8013068:	4650      	mov	r0, sl
 801306a:	f7ed f9e3 	bl	8000434 <__aeabi_i2d>
 801306e:	4632      	mov	r2, r6
 8013070:	463b      	mov	r3, r7
 8013072:	f7ed fcb1 	bl	80009d8 <__aeabi_dcmpeq>
 8013076:	b908      	cbnz	r0, 801307c <_dtoa_r+0x16c>
 8013078:	f10a 3aff 	add.w	sl, sl, #4294967295
 801307c:	f1ba 0f16 	cmp.w	sl, #22
 8013080:	d85a      	bhi.n	8013138 <_dtoa_r+0x228>
 8013082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013086:	496d      	ldr	r1, [pc, #436]	; (801323c <_dtoa_r+0x32c>)
 8013088:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801308c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013090:	f7ed fcca 	bl	8000a28 <__aeabi_dcmpgt>
 8013094:	2800      	cmp	r0, #0
 8013096:	d051      	beq.n	801313c <_dtoa_r+0x22c>
 8013098:	2300      	movs	r3, #0
 801309a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801309e:	930d      	str	r3, [sp, #52]	; 0x34
 80130a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80130a2:	1b5d      	subs	r5, r3, r5
 80130a4:	1e6b      	subs	r3, r5, #1
 80130a6:	9307      	str	r3, [sp, #28]
 80130a8:	bf43      	ittte	mi
 80130aa:	2300      	movmi	r3, #0
 80130ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80130b0:	9307      	strmi	r3, [sp, #28]
 80130b2:	f04f 0900 	movpl.w	r9, #0
 80130b6:	f1ba 0f00 	cmp.w	sl, #0
 80130ba:	db41      	blt.n	8013140 <_dtoa_r+0x230>
 80130bc:	9b07      	ldr	r3, [sp, #28]
 80130be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80130c2:	4453      	add	r3, sl
 80130c4:	9307      	str	r3, [sp, #28]
 80130c6:	2300      	movs	r3, #0
 80130c8:	9308      	str	r3, [sp, #32]
 80130ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80130cc:	2b09      	cmp	r3, #9
 80130ce:	f200 808f 	bhi.w	80131f0 <_dtoa_r+0x2e0>
 80130d2:	2b05      	cmp	r3, #5
 80130d4:	bfc4      	itt	gt
 80130d6:	3b04      	subgt	r3, #4
 80130d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80130da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80130dc:	bfc8      	it	gt
 80130de:	2500      	movgt	r5, #0
 80130e0:	f1a3 0302 	sub.w	r3, r3, #2
 80130e4:	bfd8      	it	le
 80130e6:	2501      	movle	r5, #1
 80130e8:	2b03      	cmp	r3, #3
 80130ea:	f200 808d 	bhi.w	8013208 <_dtoa_r+0x2f8>
 80130ee:	e8df f003 	tbb	[pc, r3]
 80130f2:	7d7b      	.short	0x7d7b
 80130f4:	6f2f      	.short	0x6f2f
 80130f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80130fa:	441d      	add	r5, r3
 80130fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013100:	2820      	cmp	r0, #32
 8013102:	dd13      	ble.n	801312c <_dtoa_r+0x21c>
 8013104:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013108:	9b02      	ldr	r3, [sp, #8]
 801310a:	fa08 f800 	lsl.w	r8, r8, r0
 801310e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013112:	fa23 f000 	lsr.w	r0, r3, r0
 8013116:	ea48 0000 	orr.w	r0, r8, r0
 801311a:	f7ed f97b 	bl	8000414 <__aeabi_ui2d>
 801311e:	2301      	movs	r3, #1
 8013120:	4680      	mov	r8, r0
 8013122:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8013126:	3d01      	subs	r5, #1
 8013128:	9310      	str	r3, [sp, #64]	; 0x40
 801312a:	e771      	b.n	8013010 <_dtoa_r+0x100>
 801312c:	9b02      	ldr	r3, [sp, #8]
 801312e:	f1c0 0020 	rsb	r0, r0, #32
 8013132:	fa03 f000 	lsl.w	r0, r3, r0
 8013136:	e7f0      	b.n	801311a <_dtoa_r+0x20a>
 8013138:	2301      	movs	r3, #1
 801313a:	e7b0      	b.n	801309e <_dtoa_r+0x18e>
 801313c:	900d      	str	r0, [sp, #52]	; 0x34
 801313e:	e7af      	b.n	80130a0 <_dtoa_r+0x190>
 8013140:	f1ca 0300 	rsb	r3, sl, #0
 8013144:	9308      	str	r3, [sp, #32]
 8013146:	2300      	movs	r3, #0
 8013148:	eba9 090a 	sub.w	r9, r9, sl
 801314c:	930c      	str	r3, [sp, #48]	; 0x30
 801314e:	e7bc      	b.n	80130ca <_dtoa_r+0x1ba>
 8013150:	2301      	movs	r3, #1
 8013152:	9309      	str	r3, [sp, #36]	; 0x24
 8013154:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013156:	2b00      	cmp	r3, #0
 8013158:	dd74      	ble.n	8013244 <_dtoa_r+0x334>
 801315a:	4698      	mov	r8, r3
 801315c:	9304      	str	r3, [sp, #16]
 801315e:	2200      	movs	r2, #0
 8013160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013162:	6072      	str	r2, [r6, #4]
 8013164:	2204      	movs	r2, #4
 8013166:	f102 0014 	add.w	r0, r2, #20
 801316a:	4298      	cmp	r0, r3
 801316c:	6871      	ldr	r1, [r6, #4]
 801316e:	d96e      	bls.n	801324e <_dtoa_r+0x33e>
 8013170:	4620      	mov	r0, r4
 8013172:	f001 f9c3 	bl	80144fc <_Balloc>
 8013176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013178:	6030      	str	r0, [r6, #0]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f1b8 0f0e 	cmp.w	r8, #14
 8013180:	9306      	str	r3, [sp, #24]
 8013182:	f200 80ed 	bhi.w	8013360 <_dtoa_r+0x450>
 8013186:	2d00      	cmp	r5, #0
 8013188:	f000 80ea 	beq.w	8013360 <_dtoa_r+0x450>
 801318c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013190:	f1ba 0f00 	cmp.w	sl, #0
 8013194:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013198:	dd77      	ble.n	801328a <_dtoa_r+0x37a>
 801319a:	4a28      	ldr	r2, [pc, #160]	; (801323c <_dtoa_r+0x32c>)
 801319c:	f00a 030f 	and.w	r3, sl, #15
 80131a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80131a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80131a8:	06f0      	lsls	r0, r6, #27
 80131aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80131b2:	d568      	bpl.n	8013286 <_dtoa_r+0x376>
 80131b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80131b8:	4b21      	ldr	r3, [pc, #132]	; (8013240 <_dtoa_r+0x330>)
 80131ba:	2503      	movs	r5, #3
 80131bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80131c0:	f7ed facc 	bl	800075c <__aeabi_ddiv>
 80131c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131c8:	f006 060f 	and.w	r6, r6, #15
 80131cc:	4f1c      	ldr	r7, [pc, #112]	; (8013240 <_dtoa_r+0x330>)
 80131ce:	e04f      	b.n	8013270 <_dtoa_r+0x360>
 80131d0:	2301      	movs	r3, #1
 80131d2:	9309      	str	r3, [sp, #36]	; 0x24
 80131d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80131d6:	4453      	add	r3, sl
 80131d8:	f103 0801 	add.w	r8, r3, #1
 80131dc:	9304      	str	r3, [sp, #16]
 80131de:	4643      	mov	r3, r8
 80131e0:	2b01      	cmp	r3, #1
 80131e2:	bfb8      	it	lt
 80131e4:	2301      	movlt	r3, #1
 80131e6:	e7ba      	b.n	801315e <_dtoa_r+0x24e>
 80131e8:	2300      	movs	r3, #0
 80131ea:	e7b2      	b.n	8013152 <_dtoa_r+0x242>
 80131ec:	2300      	movs	r3, #0
 80131ee:	e7f0      	b.n	80131d2 <_dtoa_r+0x2c2>
 80131f0:	2501      	movs	r5, #1
 80131f2:	2300      	movs	r3, #0
 80131f4:	9509      	str	r5, [sp, #36]	; 0x24
 80131f6:	931e      	str	r3, [sp, #120]	; 0x78
 80131f8:	f04f 33ff 	mov.w	r3, #4294967295
 80131fc:	2200      	movs	r2, #0
 80131fe:	9304      	str	r3, [sp, #16]
 8013200:	4698      	mov	r8, r3
 8013202:	2312      	movs	r3, #18
 8013204:	921f      	str	r2, [sp, #124]	; 0x7c
 8013206:	e7aa      	b.n	801315e <_dtoa_r+0x24e>
 8013208:	2301      	movs	r3, #1
 801320a:	9309      	str	r3, [sp, #36]	; 0x24
 801320c:	e7f4      	b.n	80131f8 <_dtoa_r+0x2e8>
 801320e:	bf00      	nop
 8013210:	636f4361 	.word	0x636f4361
 8013214:	3fd287a7 	.word	0x3fd287a7
 8013218:	8b60c8b3 	.word	0x8b60c8b3
 801321c:	3fc68a28 	.word	0x3fc68a28
 8013220:	509f79fb 	.word	0x509f79fb
 8013224:	3fd34413 	.word	0x3fd34413
 8013228:	7ff00000 	.word	0x7ff00000
 801322c:	08019431 	.word	0x08019431
 8013230:	08019428 	.word	0x08019428
 8013234:	080193ad 	.word	0x080193ad
 8013238:	3ff80000 	.word	0x3ff80000
 801323c:	080194d0 	.word	0x080194d0
 8013240:	080194a8 	.word	0x080194a8
 8013244:	2301      	movs	r3, #1
 8013246:	9304      	str	r3, [sp, #16]
 8013248:	4698      	mov	r8, r3
 801324a:	461a      	mov	r2, r3
 801324c:	e7da      	b.n	8013204 <_dtoa_r+0x2f4>
 801324e:	3101      	adds	r1, #1
 8013250:	6071      	str	r1, [r6, #4]
 8013252:	0052      	lsls	r2, r2, #1
 8013254:	e787      	b.n	8013166 <_dtoa_r+0x256>
 8013256:	07f1      	lsls	r1, r6, #31
 8013258:	d508      	bpl.n	801326c <_dtoa_r+0x35c>
 801325a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801325e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013262:	f7ed f951 	bl	8000508 <__aeabi_dmul>
 8013266:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801326a:	3501      	adds	r5, #1
 801326c:	1076      	asrs	r6, r6, #1
 801326e:	3708      	adds	r7, #8
 8013270:	2e00      	cmp	r6, #0
 8013272:	d1f0      	bne.n	8013256 <_dtoa_r+0x346>
 8013274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801327c:	f7ed fa6e 	bl	800075c <__aeabi_ddiv>
 8013280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013284:	e01b      	b.n	80132be <_dtoa_r+0x3ae>
 8013286:	2502      	movs	r5, #2
 8013288:	e7a0      	b.n	80131cc <_dtoa_r+0x2bc>
 801328a:	f000 80a4 	beq.w	80133d6 <_dtoa_r+0x4c6>
 801328e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013292:	f1ca 0600 	rsb	r6, sl, #0
 8013296:	4ba0      	ldr	r3, [pc, #640]	; (8013518 <_dtoa_r+0x608>)
 8013298:	f006 020f 	and.w	r2, r6, #15
 801329c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	f7ed f930 	bl	8000508 <__aeabi_dmul>
 80132a8:	2502      	movs	r5, #2
 80132aa:	2300      	movs	r3, #0
 80132ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132b0:	4f9a      	ldr	r7, [pc, #616]	; (801351c <_dtoa_r+0x60c>)
 80132b2:	1136      	asrs	r6, r6, #4
 80132b4:	2e00      	cmp	r6, #0
 80132b6:	f040 8083 	bne.w	80133c0 <_dtoa_r+0x4b0>
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d1e0      	bne.n	8013280 <_dtoa_r+0x370>
 80132be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	f000 808a 	beq.w	80133da <_dtoa_r+0x4ca>
 80132c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80132ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80132d2:	2200      	movs	r2, #0
 80132d4:	4b92      	ldr	r3, [pc, #584]	; (8013520 <_dtoa_r+0x610>)
 80132d6:	f7ed fb89 	bl	80009ec <__aeabi_dcmplt>
 80132da:	2800      	cmp	r0, #0
 80132dc:	d07d      	beq.n	80133da <_dtoa_r+0x4ca>
 80132de:	f1b8 0f00 	cmp.w	r8, #0
 80132e2:	d07a      	beq.n	80133da <_dtoa_r+0x4ca>
 80132e4:	9b04      	ldr	r3, [sp, #16]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	dd36      	ble.n	8013358 <_dtoa_r+0x448>
 80132ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80132ee:	2200      	movs	r2, #0
 80132f0:	4b8c      	ldr	r3, [pc, #560]	; (8013524 <_dtoa_r+0x614>)
 80132f2:	f7ed f909 	bl	8000508 <__aeabi_dmul>
 80132f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132fa:	9e04      	ldr	r6, [sp, #16]
 80132fc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8013300:	3501      	adds	r5, #1
 8013302:	4628      	mov	r0, r5
 8013304:	f7ed f896 	bl	8000434 <__aeabi_i2d>
 8013308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801330c:	f7ed f8fc 	bl	8000508 <__aeabi_dmul>
 8013310:	2200      	movs	r2, #0
 8013312:	4b85      	ldr	r3, [pc, #532]	; (8013528 <_dtoa_r+0x618>)
 8013314:	f7ec ff42 	bl	800019c <__adddf3>
 8013318:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801331c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013320:	950b      	str	r5, [sp, #44]	; 0x2c
 8013322:	2e00      	cmp	r6, #0
 8013324:	d15c      	bne.n	80133e0 <_dtoa_r+0x4d0>
 8013326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801332a:	2200      	movs	r2, #0
 801332c:	4b7f      	ldr	r3, [pc, #508]	; (801352c <_dtoa_r+0x61c>)
 801332e:	f7ec ff33 	bl	8000198 <__aeabi_dsub>
 8013332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013334:	462b      	mov	r3, r5
 8013336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801333a:	f7ed fb75 	bl	8000a28 <__aeabi_dcmpgt>
 801333e:	2800      	cmp	r0, #0
 8013340:	f040 8281 	bne.w	8013846 <_dtoa_r+0x936>
 8013344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801334a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801334e:	f7ed fb4d 	bl	80009ec <__aeabi_dcmplt>
 8013352:	2800      	cmp	r0, #0
 8013354:	f040 8275 	bne.w	8013842 <_dtoa_r+0x932>
 8013358:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801335c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013362:	2b00      	cmp	r3, #0
 8013364:	f2c0 814b 	blt.w	80135fe <_dtoa_r+0x6ee>
 8013368:	f1ba 0f0e 	cmp.w	sl, #14
 801336c:	f300 8147 	bgt.w	80135fe <_dtoa_r+0x6ee>
 8013370:	4b69      	ldr	r3, [pc, #420]	; (8013518 <_dtoa_r+0x608>)
 8013372:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801337e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013380:	2b00      	cmp	r3, #0
 8013382:	f280 80d7 	bge.w	8013534 <_dtoa_r+0x624>
 8013386:	f1b8 0f00 	cmp.w	r8, #0
 801338a:	f300 80d3 	bgt.w	8013534 <_dtoa_r+0x624>
 801338e:	f040 8257 	bne.w	8013840 <_dtoa_r+0x930>
 8013392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013396:	2200      	movs	r2, #0
 8013398:	4b64      	ldr	r3, [pc, #400]	; (801352c <_dtoa_r+0x61c>)
 801339a:	f7ed f8b5 	bl	8000508 <__aeabi_dmul>
 801339e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133a2:	f7ed fb37 	bl	8000a14 <__aeabi_dcmpge>
 80133a6:	4646      	mov	r6, r8
 80133a8:	4647      	mov	r7, r8
 80133aa:	2800      	cmp	r0, #0
 80133ac:	f040 822d 	bne.w	801380a <_dtoa_r+0x8fa>
 80133b0:	9b06      	ldr	r3, [sp, #24]
 80133b2:	9a06      	ldr	r2, [sp, #24]
 80133b4:	1c5d      	adds	r5, r3, #1
 80133b6:	2331      	movs	r3, #49	; 0x31
 80133b8:	f10a 0a01 	add.w	sl, sl, #1
 80133bc:	7013      	strb	r3, [r2, #0]
 80133be:	e228      	b.n	8013812 <_dtoa_r+0x902>
 80133c0:	07f2      	lsls	r2, r6, #31
 80133c2:	d505      	bpl.n	80133d0 <_dtoa_r+0x4c0>
 80133c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133c8:	f7ed f89e 	bl	8000508 <__aeabi_dmul>
 80133cc:	2301      	movs	r3, #1
 80133ce:	3501      	adds	r5, #1
 80133d0:	1076      	asrs	r6, r6, #1
 80133d2:	3708      	adds	r7, #8
 80133d4:	e76e      	b.n	80132b4 <_dtoa_r+0x3a4>
 80133d6:	2502      	movs	r5, #2
 80133d8:	e771      	b.n	80132be <_dtoa_r+0x3ae>
 80133da:	4657      	mov	r7, sl
 80133dc:	4646      	mov	r6, r8
 80133de:	e790      	b.n	8013302 <_dtoa_r+0x3f2>
 80133e0:	4b4d      	ldr	r3, [pc, #308]	; (8013518 <_dtoa_r+0x608>)
 80133e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80133e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80133ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d048      	beq.n	8013482 <_dtoa_r+0x572>
 80133f0:	4602      	mov	r2, r0
 80133f2:	460b      	mov	r3, r1
 80133f4:	2000      	movs	r0, #0
 80133f6:	494e      	ldr	r1, [pc, #312]	; (8013530 <_dtoa_r+0x620>)
 80133f8:	f7ed f9b0 	bl	800075c <__aeabi_ddiv>
 80133fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013400:	f7ec feca 	bl	8000198 <__aeabi_dsub>
 8013404:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013408:	9d06      	ldr	r5, [sp, #24]
 801340a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801340e:	f7ed fb2b 	bl	8000a68 <__aeabi_d2iz>
 8013412:	9011      	str	r0, [sp, #68]	; 0x44
 8013414:	f7ed f80e 	bl	8000434 <__aeabi_i2d>
 8013418:	4602      	mov	r2, r0
 801341a:	460b      	mov	r3, r1
 801341c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013420:	f7ec feba 	bl	8000198 <__aeabi_dsub>
 8013424:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801342a:	3330      	adds	r3, #48	; 0x30
 801342c:	f805 3b01 	strb.w	r3, [r5], #1
 8013430:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013434:	f7ed fada 	bl	80009ec <__aeabi_dcmplt>
 8013438:	2800      	cmp	r0, #0
 801343a:	d163      	bne.n	8013504 <_dtoa_r+0x5f4>
 801343c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013440:	2000      	movs	r0, #0
 8013442:	4937      	ldr	r1, [pc, #220]	; (8013520 <_dtoa_r+0x610>)
 8013444:	f7ec fea8 	bl	8000198 <__aeabi_dsub>
 8013448:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801344c:	f7ed face 	bl	80009ec <__aeabi_dcmplt>
 8013450:	2800      	cmp	r0, #0
 8013452:	f040 80b5 	bne.w	80135c0 <_dtoa_r+0x6b0>
 8013456:	9b06      	ldr	r3, [sp, #24]
 8013458:	1aeb      	subs	r3, r5, r3
 801345a:	429e      	cmp	r6, r3
 801345c:	f77f af7c 	ble.w	8013358 <_dtoa_r+0x448>
 8013460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013464:	2200      	movs	r2, #0
 8013466:	4b2f      	ldr	r3, [pc, #188]	; (8013524 <_dtoa_r+0x614>)
 8013468:	f7ed f84e 	bl	8000508 <__aeabi_dmul>
 801346c:	2200      	movs	r2, #0
 801346e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013476:	4b2b      	ldr	r3, [pc, #172]	; (8013524 <_dtoa_r+0x614>)
 8013478:	f7ed f846 	bl	8000508 <__aeabi_dmul>
 801347c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013480:	e7c3      	b.n	801340a <_dtoa_r+0x4fa>
 8013482:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013486:	f7ed f83f 	bl	8000508 <__aeabi_dmul>
 801348a:	9b06      	ldr	r3, [sp, #24]
 801348c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013490:	199d      	adds	r5, r3, r6
 8013492:	461e      	mov	r6, r3
 8013494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013498:	f7ed fae6 	bl	8000a68 <__aeabi_d2iz>
 801349c:	9011      	str	r0, [sp, #68]	; 0x44
 801349e:	f7ec ffc9 	bl	8000434 <__aeabi_i2d>
 80134a2:	4602      	mov	r2, r0
 80134a4:	460b      	mov	r3, r1
 80134a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134aa:	f7ec fe75 	bl	8000198 <__aeabi_dsub>
 80134ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80134b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134b4:	3330      	adds	r3, #48	; 0x30
 80134b6:	f806 3b01 	strb.w	r3, [r6], #1
 80134ba:	42ae      	cmp	r6, r5
 80134bc:	f04f 0200 	mov.w	r2, #0
 80134c0:	d124      	bne.n	801350c <_dtoa_r+0x5fc>
 80134c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80134c6:	4b1a      	ldr	r3, [pc, #104]	; (8013530 <_dtoa_r+0x620>)
 80134c8:	f7ec fe68 	bl	800019c <__adddf3>
 80134cc:	4602      	mov	r2, r0
 80134ce:	460b      	mov	r3, r1
 80134d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134d4:	f7ed faa8 	bl	8000a28 <__aeabi_dcmpgt>
 80134d8:	2800      	cmp	r0, #0
 80134da:	d171      	bne.n	80135c0 <_dtoa_r+0x6b0>
 80134dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80134e0:	2000      	movs	r0, #0
 80134e2:	4913      	ldr	r1, [pc, #76]	; (8013530 <_dtoa_r+0x620>)
 80134e4:	f7ec fe58 	bl	8000198 <__aeabi_dsub>
 80134e8:	4602      	mov	r2, r0
 80134ea:	460b      	mov	r3, r1
 80134ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134f0:	f7ed fa7c 	bl	80009ec <__aeabi_dcmplt>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	f43f af2f 	beq.w	8013358 <_dtoa_r+0x448>
 80134fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80134fe:	1e6a      	subs	r2, r5, #1
 8013500:	2b30      	cmp	r3, #48	; 0x30
 8013502:	d001      	beq.n	8013508 <_dtoa_r+0x5f8>
 8013504:	46ba      	mov	sl, r7
 8013506:	e04a      	b.n	801359e <_dtoa_r+0x68e>
 8013508:	4615      	mov	r5, r2
 801350a:	e7f6      	b.n	80134fa <_dtoa_r+0x5ea>
 801350c:	4b05      	ldr	r3, [pc, #20]	; (8013524 <_dtoa_r+0x614>)
 801350e:	f7ec fffb 	bl	8000508 <__aeabi_dmul>
 8013512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013516:	e7bd      	b.n	8013494 <_dtoa_r+0x584>
 8013518:	080194d0 	.word	0x080194d0
 801351c:	080194a8 	.word	0x080194a8
 8013520:	3ff00000 	.word	0x3ff00000
 8013524:	40240000 	.word	0x40240000
 8013528:	401c0000 	.word	0x401c0000
 801352c:	40140000 	.word	0x40140000
 8013530:	3fe00000 	.word	0x3fe00000
 8013534:	9d06      	ldr	r5, [sp, #24]
 8013536:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801353a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801353e:	4630      	mov	r0, r6
 8013540:	4639      	mov	r1, r7
 8013542:	f7ed f90b 	bl	800075c <__aeabi_ddiv>
 8013546:	f7ed fa8f 	bl	8000a68 <__aeabi_d2iz>
 801354a:	4681      	mov	r9, r0
 801354c:	f7ec ff72 	bl	8000434 <__aeabi_i2d>
 8013550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013554:	f7ec ffd8 	bl	8000508 <__aeabi_dmul>
 8013558:	4602      	mov	r2, r0
 801355a:	460b      	mov	r3, r1
 801355c:	4630      	mov	r0, r6
 801355e:	4639      	mov	r1, r7
 8013560:	f7ec fe1a 	bl	8000198 <__aeabi_dsub>
 8013564:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8013568:	f805 6b01 	strb.w	r6, [r5], #1
 801356c:	9e06      	ldr	r6, [sp, #24]
 801356e:	4602      	mov	r2, r0
 8013570:	1bae      	subs	r6, r5, r6
 8013572:	45b0      	cmp	r8, r6
 8013574:	460b      	mov	r3, r1
 8013576:	d135      	bne.n	80135e4 <_dtoa_r+0x6d4>
 8013578:	f7ec fe10 	bl	800019c <__adddf3>
 801357c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013580:	4606      	mov	r6, r0
 8013582:	460f      	mov	r7, r1
 8013584:	f7ed fa50 	bl	8000a28 <__aeabi_dcmpgt>
 8013588:	b9c8      	cbnz	r0, 80135be <_dtoa_r+0x6ae>
 801358a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801358e:	4630      	mov	r0, r6
 8013590:	4639      	mov	r1, r7
 8013592:	f7ed fa21 	bl	80009d8 <__aeabi_dcmpeq>
 8013596:	b110      	cbz	r0, 801359e <_dtoa_r+0x68e>
 8013598:	f019 0f01 	tst.w	r9, #1
 801359c:	d10f      	bne.n	80135be <_dtoa_r+0x6ae>
 801359e:	4659      	mov	r1, fp
 80135a0:	4620      	mov	r0, r4
 80135a2:	f000 ffdf 	bl	8014564 <_Bfree>
 80135a6:	2300      	movs	r3, #0
 80135a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80135aa:	702b      	strb	r3, [r5, #0]
 80135ac:	f10a 0301 	add.w	r3, sl, #1
 80135b0:	6013      	str	r3, [r2, #0]
 80135b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f43f acf3 	beq.w	8012fa0 <_dtoa_r+0x90>
 80135ba:	601d      	str	r5, [r3, #0]
 80135bc:	e4f0      	b.n	8012fa0 <_dtoa_r+0x90>
 80135be:	4657      	mov	r7, sl
 80135c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80135c4:	1e6b      	subs	r3, r5, #1
 80135c6:	2a39      	cmp	r2, #57	; 0x39
 80135c8:	d106      	bne.n	80135d8 <_dtoa_r+0x6c8>
 80135ca:	9a06      	ldr	r2, [sp, #24]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d107      	bne.n	80135e0 <_dtoa_r+0x6d0>
 80135d0:	2330      	movs	r3, #48	; 0x30
 80135d2:	7013      	strb	r3, [r2, #0]
 80135d4:	4613      	mov	r3, r2
 80135d6:	3701      	adds	r7, #1
 80135d8:	781a      	ldrb	r2, [r3, #0]
 80135da:	3201      	adds	r2, #1
 80135dc:	701a      	strb	r2, [r3, #0]
 80135de:	e791      	b.n	8013504 <_dtoa_r+0x5f4>
 80135e0:	461d      	mov	r5, r3
 80135e2:	e7ed      	b.n	80135c0 <_dtoa_r+0x6b0>
 80135e4:	2200      	movs	r2, #0
 80135e6:	4b99      	ldr	r3, [pc, #612]	; (801384c <_dtoa_r+0x93c>)
 80135e8:	f7ec ff8e 	bl	8000508 <__aeabi_dmul>
 80135ec:	2200      	movs	r2, #0
 80135ee:	2300      	movs	r3, #0
 80135f0:	4606      	mov	r6, r0
 80135f2:	460f      	mov	r7, r1
 80135f4:	f7ed f9f0 	bl	80009d8 <__aeabi_dcmpeq>
 80135f8:	2800      	cmp	r0, #0
 80135fa:	d09e      	beq.n	801353a <_dtoa_r+0x62a>
 80135fc:	e7cf      	b.n	801359e <_dtoa_r+0x68e>
 80135fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013600:	2a00      	cmp	r2, #0
 8013602:	f000 8088 	beq.w	8013716 <_dtoa_r+0x806>
 8013606:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013608:	2a01      	cmp	r2, #1
 801360a:	dc6d      	bgt.n	80136e8 <_dtoa_r+0x7d8>
 801360c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801360e:	2a00      	cmp	r2, #0
 8013610:	d066      	beq.n	80136e0 <_dtoa_r+0x7d0>
 8013612:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013616:	464d      	mov	r5, r9
 8013618:	9e08      	ldr	r6, [sp, #32]
 801361a:	9a07      	ldr	r2, [sp, #28]
 801361c:	2101      	movs	r1, #1
 801361e:	441a      	add	r2, r3
 8013620:	4620      	mov	r0, r4
 8013622:	4499      	add	r9, r3
 8013624:	9207      	str	r2, [sp, #28]
 8013626:	f001 f87b 	bl	8014720 <__i2b>
 801362a:	4607      	mov	r7, r0
 801362c:	2d00      	cmp	r5, #0
 801362e:	dd0b      	ble.n	8013648 <_dtoa_r+0x738>
 8013630:	9b07      	ldr	r3, [sp, #28]
 8013632:	2b00      	cmp	r3, #0
 8013634:	dd08      	ble.n	8013648 <_dtoa_r+0x738>
 8013636:	42ab      	cmp	r3, r5
 8013638:	bfa8      	it	ge
 801363a:	462b      	movge	r3, r5
 801363c:	9a07      	ldr	r2, [sp, #28]
 801363e:	eba9 0903 	sub.w	r9, r9, r3
 8013642:	1aed      	subs	r5, r5, r3
 8013644:	1ad3      	subs	r3, r2, r3
 8013646:	9307      	str	r3, [sp, #28]
 8013648:	9b08      	ldr	r3, [sp, #32]
 801364a:	b1eb      	cbz	r3, 8013688 <_dtoa_r+0x778>
 801364c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801364e:	2b00      	cmp	r3, #0
 8013650:	d065      	beq.n	801371e <_dtoa_r+0x80e>
 8013652:	b18e      	cbz	r6, 8013678 <_dtoa_r+0x768>
 8013654:	4639      	mov	r1, r7
 8013656:	4632      	mov	r2, r6
 8013658:	4620      	mov	r0, r4
 801365a:	f001 f8ff 	bl	801485c <__pow5mult>
 801365e:	465a      	mov	r2, fp
 8013660:	4601      	mov	r1, r0
 8013662:	4607      	mov	r7, r0
 8013664:	4620      	mov	r0, r4
 8013666:	f001 f864 	bl	8014732 <__multiply>
 801366a:	4659      	mov	r1, fp
 801366c:	900a      	str	r0, [sp, #40]	; 0x28
 801366e:	4620      	mov	r0, r4
 8013670:	f000 ff78 	bl	8014564 <_Bfree>
 8013674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013676:	469b      	mov	fp, r3
 8013678:	9b08      	ldr	r3, [sp, #32]
 801367a:	1b9a      	subs	r2, r3, r6
 801367c:	d004      	beq.n	8013688 <_dtoa_r+0x778>
 801367e:	4659      	mov	r1, fp
 8013680:	4620      	mov	r0, r4
 8013682:	f001 f8eb 	bl	801485c <__pow5mult>
 8013686:	4683      	mov	fp, r0
 8013688:	2101      	movs	r1, #1
 801368a:	4620      	mov	r0, r4
 801368c:	f001 f848 	bl	8014720 <__i2b>
 8013690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013692:	4606      	mov	r6, r0
 8013694:	2b00      	cmp	r3, #0
 8013696:	f000 81c6 	beq.w	8013a26 <_dtoa_r+0xb16>
 801369a:	461a      	mov	r2, r3
 801369c:	4601      	mov	r1, r0
 801369e:	4620      	mov	r0, r4
 80136a0:	f001 f8dc 	bl	801485c <__pow5mult>
 80136a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80136a6:	4606      	mov	r6, r0
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	dc3e      	bgt.n	801372a <_dtoa_r+0x81a>
 80136ac:	9b02      	ldr	r3, [sp, #8]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d137      	bne.n	8013722 <_dtoa_r+0x812>
 80136b2:	9b03      	ldr	r3, [sp, #12]
 80136b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d134      	bne.n	8013726 <_dtoa_r+0x816>
 80136bc:	9b03      	ldr	r3, [sp, #12]
 80136be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136c2:	0d1b      	lsrs	r3, r3, #20
 80136c4:	051b      	lsls	r3, r3, #20
 80136c6:	b12b      	cbz	r3, 80136d4 <_dtoa_r+0x7c4>
 80136c8:	9b07      	ldr	r3, [sp, #28]
 80136ca:	f109 0901 	add.w	r9, r9, #1
 80136ce:	3301      	adds	r3, #1
 80136d0:	9307      	str	r3, [sp, #28]
 80136d2:	2301      	movs	r3, #1
 80136d4:	9308      	str	r3, [sp, #32]
 80136d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d128      	bne.n	801372e <_dtoa_r+0x81e>
 80136dc:	2001      	movs	r0, #1
 80136de:	e02e      	b.n	801373e <_dtoa_r+0x82e>
 80136e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80136e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80136e6:	e796      	b.n	8013616 <_dtoa_r+0x706>
 80136e8:	9b08      	ldr	r3, [sp, #32]
 80136ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80136ee:	42b3      	cmp	r3, r6
 80136f0:	bfb7      	itett	lt
 80136f2:	9b08      	ldrlt	r3, [sp, #32]
 80136f4:	1b9e      	subge	r6, r3, r6
 80136f6:	1af2      	sublt	r2, r6, r3
 80136f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80136fa:	bfbf      	itttt	lt
 80136fc:	9608      	strlt	r6, [sp, #32]
 80136fe:	189b      	addlt	r3, r3, r2
 8013700:	930c      	strlt	r3, [sp, #48]	; 0x30
 8013702:	2600      	movlt	r6, #0
 8013704:	f1b8 0f00 	cmp.w	r8, #0
 8013708:	bfb9      	ittee	lt
 801370a:	eba9 0508 	sublt.w	r5, r9, r8
 801370e:	2300      	movlt	r3, #0
 8013710:	464d      	movge	r5, r9
 8013712:	4643      	movge	r3, r8
 8013714:	e781      	b.n	801361a <_dtoa_r+0x70a>
 8013716:	9e08      	ldr	r6, [sp, #32]
 8013718:	464d      	mov	r5, r9
 801371a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801371c:	e786      	b.n	801362c <_dtoa_r+0x71c>
 801371e:	9a08      	ldr	r2, [sp, #32]
 8013720:	e7ad      	b.n	801367e <_dtoa_r+0x76e>
 8013722:	2300      	movs	r3, #0
 8013724:	e7d6      	b.n	80136d4 <_dtoa_r+0x7c4>
 8013726:	9b02      	ldr	r3, [sp, #8]
 8013728:	e7d4      	b.n	80136d4 <_dtoa_r+0x7c4>
 801372a:	2300      	movs	r3, #0
 801372c:	9308      	str	r3, [sp, #32]
 801372e:	6933      	ldr	r3, [r6, #16]
 8013730:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013734:	6918      	ldr	r0, [r3, #16]
 8013736:	f000 ffa5 	bl	8014684 <__hi0bits>
 801373a:	f1c0 0020 	rsb	r0, r0, #32
 801373e:	9b07      	ldr	r3, [sp, #28]
 8013740:	4418      	add	r0, r3
 8013742:	f010 001f 	ands.w	r0, r0, #31
 8013746:	d047      	beq.n	80137d8 <_dtoa_r+0x8c8>
 8013748:	f1c0 0320 	rsb	r3, r0, #32
 801374c:	2b04      	cmp	r3, #4
 801374e:	dd3b      	ble.n	80137c8 <_dtoa_r+0x8b8>
 8013750:	9b07      	ldr	r3, [sp, #28]
 8013752:	f1c0 001c 	rsb	r0, r0, #28
 8013756:	4481      	add	r9, r0
 8013758:	4405      	add	r5, r0
 801375a:	4403      	add	r3, r0
 801375c:	9307      	str	r3, [sp, #28]
 801375e:	f1b9 0f00 	cmp.w	r9, #0
 8013762:	dd05      	ble.n	8013770 <_dtoa_r+0x860>
 8013764:	4659      	mov	r1, fp
 8013766:	464a      	mov	r2, r9
 8013768:	4620      	mov	r0, r4
 801376a:	f001 f8c5 	bl	80148f8 <__lshift>
 801376e:	4683      	mov	fp, r0
 8013770:	9b07      	ldr	r3, [sp, #28]
 8013772:	2b00      	cmp	r3, #0
 8013774:	dd05      	ble.n	8013782 <_dtoa_r+0x872>
 8013776:	4631      	mov	r1, r6
 8013778:	461a      	mov	r2, r3
 801377a:	4620      	mov	r0, r4
 801377c:	f001 f8bc 	bl	80148f8 <__lshift>
 8013780:	4606      	mov	r6, r0
 8013782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013784:	b353      	cbz	r3, 80137dc <_dtoa_r+0x8cc>
 8013786:	4631      	mov	r1, r6
 8013788:	4658      	mov	r0, fp
 801378a:	f001 f909 	bl	80149a0 <__mcmp>
 801378e:	2800      	cmp	r0, #0
 8013790:	da24      	bge.n	80137dc <_dtoa_r+0x8cc>
 8013792:	2300      	movs	r3, #0
 8013794:	4659      	mov	r1, fp
 8013796:	220a      	movs	r2, #10
 8013798:	4620      	mov	r0, r4
 801379a:	f000 fefa 	bl	8014592 <__multadd>
 801379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80137a4:	4683      	mov	fp, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f000 8144 	beq.w	8013a34 <_dtoa_r+0xb24>
 80137ac:	2300      	movs	r3, #0
 80137ae:	4639      	mov	r1, r7
 80137b0:	220a      	movs	r2, #10
 80137b2:	4620      	mov	r0, r4
 80137b4:	f000 feed 	bl	8014592 <__multadd>
 80137b8:	9b04      	ldr	r3, [sp, #16]
 80137ba:	4607      	mov	r7, r0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	dc4d      	bgt.n	801385c <_dtoa_r+0x94c>
 80137c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80137c2:	2b02      	cmp	r3, #2
 80137c4:	dd4a      	ble.n	801385c <_dtoa_r+0x94c>
 80137c6:	e011      	b.n	80137ec <_dtoa_r+0x8dc>
 80137c8:	d0c9      	beq.n	801375e <_dtoa_r+0x84e>
 80137ca:	9a07      	ldr	r2, [sp, #28]
 80137cc:	331c      	adds	r3, #28
 80137ce:	441a      	add	r2, r3
 80137d0:	4499      	add	r9, r3
 80137d2:	441d      	add	r5, r3
 80137d4:	4613      	mov	r3, r2
 80137d6:	e7c1      	b.n	801375c <_dtoa_r+0x84c>
 80137d8:	4603      	mov	r3, r0
 80137da:	e7f6      	b.n	80137ca <_dtoa_r+0x8ba>
 80137dc:	f1b8 0f00 	cmp.w	r8, #0
 80137e0:	dc36      	bgt.n	8013850 <_dtoa_r+0x940>
 80137e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80137e4:	2b02      	cmp	r3, #2
 80137e6:	dd33      	ble.n	8013850 <_dtoa_r+0x940>
 80137e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80137ec:	9b04      	ldr	r3, [sp, #16]
 80137ee:	b963      	cbnz	r3, 801380a <_dtoa_r+0x8fa>
 80137f0:	4631      	mov	r1, r6
 80137f2:	2205      	movs	r2, #5
 80137f4:	4620      	mov	r0, r4
 80137f6:	f000 fecc 	bl	8014592 <__multadd>
 80137fa:	4601      	mov	r1, r0
 80137fc:	4606      	mov	r6, r0
 80137fe:	4658      	mov	r0, fp
 8013800:	f001 f8ce 	bl	80149a0 <__mcmp>
 8013804:	2800      	cmp	r0, #0
 8013806:	f73f add3 	bgt.w	80133b0 <_dtoa_r+0x4a0>
 801380a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801380c:	9d06      	ldr	r5, [sp, #24]
 801380e:	ea6f 0a03 	mvn.w	sl, r3
 8013812:	f04f 0900 	mov.w	r9, #0
 8013816:	4631      	mov	r1, r6
 8013818:	4620      	mov	r0, r4
 801381a:	f000 fea3 	bl	8014564 <_Bfree>
 801381e:	2f00      	cmp	r7, #0
 8013820:	f43f aebd 	beq.w	801359e <_dtoa_r+0x68e>
 8013824:	f1b9 0f00 	cmp.w	r9, #0
 8013828:	d005      	beq.n	8013836 <_dtoa_r+0x926>
 801382a:	45b9      	cmp	r9, r7
 801382c:	d003      	beq.n	8013836 <_dtoa_r+0x926>
 801382e:	4649      	mov	r1, r9
 8013830:	4620      	mov	r0, r4
 8013832:	f000 fe97 	bl	8014564 <_Bfree>
 8013836:	4639      	mov	r1, r7
 8013838:	4620      	mov	r0, r4
 801383a:	f000 fe93 	bl	8014564 <_Bfree>
 801383e:	e6ae      	b.n	801359e <_dtoa_r+0x68e>
 8013840:	2600      	movs	r6, #0
 8013842:	4637      	mov	r7, r6
 8013844:	e7e1      	b.n	801380a <_dtoa_r+0x8fa>
 8013846:	46ba      	mov	sl, r7
 8013848:	4637      	mov	r7, r6
 801384a:	e5b1      	b.n	80133b0 <_dtoa_r+0x4a0>
 801384c:	40240000 	.word	0x40240000
 8013850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013852:	f8cd 8010 	str.w	r8, [sp, #16]
 8013856:	2b00      	cmp	r3, #0
 8013858:	f000 80f3 	beq.w	8013a42 <_dtoa_r+0xb32>
 801385c:	2d00      	cmp	r5, #0
 801385e:	dd05      	ble.n	801386c <_dtoa_r+0x95c>
 8013860:	4639      	mov	r1, r7
 8013862:	462a      	mov	r2, r5
 8013864:	4620      	mov	r0, r4
 8013866:	f001 f847 	bl	80148f8 <__lshift>
 801386a:	4607      	mov	r7, r0
 801386c:	9b08      	ldr	r3, [sp, #32]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d04c      	beq.n	801390c <_dtoa_r+0x9fc>
 8013872:	6879      	ldr	r1, [r7, #4]
 8013874:	4620      	mov	r0, r4
 8013876:	f000 fe41 	bl	80144fc <_Balloc>
 801387a:	4605      	mov	r5, r0
 801387c:	693a      	ldr	r2, [r7, #16]
 801387e:	f107 010c 	add.w	r1, r7, #12
 8013882:	3202      	adds	r2, #2
 8013884:	0092      	lsls	r2, r2, #2
 8013886:	300c      	adds	r0, #12
 8013888:	f7fd fc50 	bl	801112c <memcpy>
 801388c:	2201      	movs	r2, #1
 801388e:	4629      	mov	r1, r5
 8013890:	4620      	mov	r0, r4
 8013892:	f001 f831 	bl	80148f8 <__lshift>
 8013896:	46b9      	mov	r9, r7
 8013898:	4607      	mov	r7, r0
 801389a:	9b06      	ldr	r3, [sp, #24]
 801389c:	9307      	str	r3, [sp, #28]
 801389e:	9b02      	ldr	r3, [sp, #8]
 80138a0:	f003 0301 	and.w	r3, r3, #1
 80138a4:	9308      	str	r3, [sp, #32]
 80138a6:	4631      	mov	r1, r6
 80138a8:	4658      	mov	r0, fp
 80138aa:	f7ff faa3 	bl	8012df4 <quorem>
 80138ae:	4649      	mov	r1, r9
 80138b0:	4605      	mov	r5, r0
 80138b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80138b6:	4658      	mov	r0, fp
 80138b8:	f001 f872 	bl	80149a0 <__mcmp>
 80138bc:	463a      	mov	r2, r7
 80138be:	9002      	str	r0, [sp, #8]
 80138c0:	4631      	mov	r1, r6
 80138c2:	4620      	mov	r0, r4
 80138c4:	f001 f886 	bl	80149d4 <__mdiff>
 80138c8:	68c3      	ldr	r3, [r0, #12]
 80138ca:	4602      	mov	r2, r0
 80138cc:	bb03      	cbnz	r3, 8013910 <_dtoa_r+0xa00>
 80138ce:	4601      	mov	r1, r0
 80138d0:	9009      	str	r0, [sp, #36]	; 0x24
 80138d2:	4658      	mov	r0, fp
 80138d4:	f001 f864 	bl	80149a0 <__mcmp>
 80138d8:	4603      	mov	r3, r0
 80138da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138dc:	4611      	mov	r1, r2
 80138de:	4620      	mov	r0, r4
 80138e0:	9309      	str	r3, [sp, #36]	; 0x24
 80138e2:	f000 fe3f 	bl	8014564 <_Bfree>
 80138e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138e8:	b9a3      	cbnz	r3, 8013914 <_dtoa_r+0xa04>
 80138ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80138ec:	b992      	cbnz	r2, 8013914 <_dtoa_r+0xa04>
 80138ee:	9a08      	ldr	r2, [sp, #32]
 80138f0:	b982      	cbnz	r2, 8013914 <_dtoa_r+0xa04>
 80138f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80138f6:	d029      	beq.n	801394c <_dtoa_r+0xa3c>
 80138f8:	9b02      	ldr	r3, [sp, #8]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	dd01      	ble.n	8013902 <_dtoa_r+0x9f2>
 80138fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013902:	9b07      	ldr	r3, [sp, #28]
 8013904:	1c5d      	adds	r5, r3, #1
 8013906:	f883 8000 	strb.w	r8, [r3]
 801390a:	e784      	b.n	8013816 <_dtoa_r+0x906>
 801390c:	4638      	mov	r0, r7
 801390e:	e7c2      	b.n	8013896 <_dtoa_r+0x986>
 8013910:	2301      	movs	r3, #1
 8013912:	e7e3      	b.n	80138dc <_dtoa_r+0x9cc>
 8013914:	9a02      	ldr	r2, [sp, #8]
 8013916:	2a00      	cmp	r2, #0
 8013918:	db04      	blt.n	8013924 <_dtoa_r+0xa14>
 801391a:	d123      	bne.n	8013964 <_dtoa_r+0xa54>
 801391c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801391e:	bb0a      	cbnz	r2, 8013964 <_dtoa_r+0xa54>
 8013920:	9a08      	ldr	r2, [sp, #32]
 8013922:	b9fa      	cbnz	r2, 8013964 <_dtoa_r+0xa54>
 8013924:	2b00      	cmp	r3, #0
 8013926:	ddec      	ble.n	8013902 <_dtoa_r+0x9f2>
 8013928:	4659      	mov	r1, fp
 801392a:	2201      	movs	r2, #1
 801392c:	4620      	mov	r0, r4
 801392e:	f000 ffe3 	bl	80148f8 <__lshift>
 8013932:	4631      	mov	r1, r6
 8013934:	4683      	mov	fp, r0
 8013936:	f001 f833 	bl	80149a0 <__mcmp>
 801393a:	2800      	cmp	r0, #0
 801393c:	dc03      	bgt.n	8013946 <_dtoa_r+0xa36>
 801393e:	d1e0      	bne.n	8013902 <_dtoa_r+0x9f2>
 8013940:	f018 0f01 	tst.w	r8, #1
 8013944:	d0dd      	beq.n	8013902 <_dtoa_r+0x9f2>
 8013946:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801394a:	d1d8      	bne.n	80138fe <_dtoa_r+0x9ee>
 801394c:	9b07      	ldr	r3, [sp, #28]
 801394e:	9a07      	ldr	r2, [sp, #28]
 8013950:	1c5d      	adds	r5, r3, #1
 8013952:	2339      	movs	r3, #57	; 0x39
 8013954:	7013      	strb	r3, [r2, #0]
 8013956:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801395a:	1e6a      	subs	r2, r5, #1
 801395c:	2b39      	cmp	r3, #57	; 0x39
 801395e:	d04d      	beq.n	80139fc <_dtoa_r+0xaec>
 8013960:	3301      	adds	r3, #1
 8013962:	e052      	b.n	8013a0a <_dtoa_r+0xafa>
 8013964:	9a07      	ldr	r2, [sp, #28]
 8013966:	2b00      	cmp	r3, #0
 8013968:	f102 0501 	add.w	r5, r2, #1
 801396c:	dd06      	ble.n	801397c <_dtoa_r+0xa6c>
 801396e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013972:	d0eb      	beq.n	801394c <_dtoa_r+0xa3c>
 8013974:	f108 0801 	add.w	r8, r8, #1
 8013978:	9b07      	ldr	r3, [sp, #28]
 801397a:	e7c4      	b.n	8013906 <_dtoa_r+0x9f6>
 801397c:	9b06      	ldr	r3, [sp, #24]
 801397e:	9a04      	ldr	r2, [sp, #16]
 8013980:	1aeb      	subs	r3, r5, r3
 8013982:	4293      	cmp	r3, r2
 8013984:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013988:	d021      	beq.n	80139ce <_dtoa_r+0xabe>
 801398a:	4659      	mov	r1, fp
 801398c:	2300      	movs	r3, #0
 801398e:	220a      	movs	r2, #10
 8013990:	4620      	mov	r0, r4
 8013992:	f000 fdfe 	bl	8014592 <__multadd>
 8013996:	45b9      	cmp	r9, r7
 8013998:	4683      	mov	fp, r0
 801399a:	f04f 0300 	mov.w	r3, #0
 801399e:	f04f 020a 	mov.w	r2, #10
 80139a2:	4649      	mov	r1, r9
 80139a4:	4620      	mov	r0, r4
 80139a6:	d105      	bne.n	80139b4 <_dtoa_r+0xaa4>
 80139a8:	f000 fdf3 	bl	8014592 <__multadd>
 80139ac:	4681      	mov	r9, r0
 80139ae:	4607      	mov	r7, r0
 80139b0:	9507      	str	r5, [sp, #28]
 80139b2:	e778      	b.n	80138a6 <_dtoa_r+0x996>
 80139b4:	f000 fded 	bl	8014592 <__multadd>
 80139b8:	4639      	mov	r1, r7
 80139ba:	4681      	mov	r9, r0
 80139bc:	2300      	movs	r3, #0
 80139be:	220a      	movs	r2, #10
 80139c0:	4620      	mov	r0, r4
 80139c2:	f000 fde6 	bl	8014592 <__multadd>
 80139c6:	4607      	mov	r7, r0
 80139c8:	e7f2      	b.n	80139b0 <_dtoa_r+0xaa0>
 80139ca:	f04f 0900 	mov.w	r9, #0
 80139ce:	4659      	mov	r1, fp
 80139d0:	2201      	movs	r2, #1
 80139d2:	4620      	mov	r0, r4
 80139d4:	f000 ff90 	bl	80148f8 <__lshift>
 80139d8:	4631      	mov	r1, r6
 80139da:	4683      	mov	fp, r0
 80139dc:	f000 ffe0 	bl	80149a0 <__mcmp>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	dcb8      	bgt.n	8013956 <_dtoa_r+0xa46>
 80139e4:	d102      	bne.n	80139ec <_dtoa_r+0xadc>
 80139e6:	f018 0f01 	tst.w	r8, #1
 80139ea:	d1b4      	bne.n	8013956 <_dtoa_r+0xa46>
 80139ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80139f0:	1e6a      	subs	r2, r5, #1
 80139f2:	2b30      	cmp	r3, #48	; 0x30
 80139f4:	f47f af0f 	bne.w	8013816 <_dtoa_r+0x906>
 80139f8:	4615      	mov	r5, r2
 80139fa:	e7f7      	b.n	80139ec <_dtoa_r+0xadc>
 80139fc:	9b06      	ldr	r3, [sp, #24]
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d105      	bne.n	8013a0e <_dtoa_r+0xafe>
 8013a02:	2331      	movs	r3, #49	; 0x31
 8013a04:	9a06      	ldr	r2, [sp, #24]
 8013a06:	f10a 0a01 	add.w	sl, sl, #1
 8013a0a:	7013      	strb	r3, [r2, #0]
 8013a0c:	e703      	b.n	8013816 <_dtoa_r+0x906>
 8013a0e:	4615      	mov	r5, r2
 8013a10:	e7a1      	b.n	8013956 <_dtoa_r+0xa46>
 8013a12:	4b17      	ldr	r3, [pc, #92]	; (8013a70 <_dtoa_r+0xb60>)
 8013a14:	f7ff bae1 	b.w	8012fda <_dtoa_r+0xca>
 8013a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f47f aabb 	bne.w	8012f96 <_dtoa_r+0x86>
 8013a20:	4b14      	ldr	r3, [pc, #80]	; (8013a74 <_dtoa_r+0xb64>)
 8013a22:	f7ff bada 	b.w	8012fda <_dtoa_r+0xca>
 8013a26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013a28:	2b01      	cmp	r3, #1
 8013a2a:	f77f ae3f 	ble.w	80136ac <_dtoa_r+0x79c>
 8013a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a30:	9308      	str	r3, [sp, #32]
 8013a32:	e653      	b.n	80136dc <_dtoa_r+0x7cc>
 8013a34:	9b04      	ldr	r3, [sp, #16]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	dc03      	bgt.n	8013a42 <_dtoa_r+0xb32>
 8013a3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013a3c:	2b02      	cmp	r3, #2
 8013a3e:	f73f aed5 	bgt.w	80137ec <_dtoa_r+0x8dc>
 8013a42:	9d06      	ldr	r5, [sp, #24]
 8013a44:	4631      	mov	r1, r6
 8013a46:	4658      	mov	r0, fp
 8013a48:	f7ff f9d4 	bl	8012df4 <quorem>
 8013a4c:	9b06      	ldr	r3, [sp, #24]
 8013a4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013a52:	f805 8b01 	strb.w	r8, [r5], #1
 8013a56:	9a04      	ldr	r2, [sp, #16]
 8013a58:	1aeb      	subs	r3, r5, r3
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	ddb5      	ble.n	80139ca <_dtoa_r+0xaba>
 8013a5e:	4659      	mov	r1, fp
 8013a60:	2300      	movs	r3, #0
 8013a62:	220a      	movs	r2, #10
 8013a64:	4620      	mov	r0, r4
 8013a66:	f000 fd94 	bl	8014592 <__multadd>
 8013a6a:	4683      	mov	fp, r0
 8013a6c:	e7ea      	b.n	8013a44 <_dtoa_r+0xb34>
 8013a6e:	bf00      	nop
 8013a70:	080193ac 	.word	0x080193ac
 8013a74:	08019428 	.word	0x08019428

08013a78 <__sflush_r>:
 8013a78:	898a      	ldrh	r2, [r1, #12]
 8013a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a7e:	4605      	mov	r5, r0
 8013a80:	0710      	lsls	r0, r2, #28
 8013a82:	460c      	mov	r4, r1
 8013a84:	d458      	bmi.n	8013b38 <__sflush_r+0xc0>
 8013a86:	684b      	ldr	r3, [r1, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	dc05      	bgt.n	8013a98 <__sflush_r+0x20>
 8013a8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	dc02      	bgt.n	8013a98 <__sflush_r+0x20>
 8013a92:	2000      	movs	r0, #0
 8013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a9a:	2e00      	cmp	r6, #0
 8013a9c:	d0f9      	beq.n	8013a92 <__sflush_r+0x1a>
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013aa4:	682f      	ldr	r7, [r5, #0]
 8013aa6:	6a21      	ldr	r1, [r4, #32]
 8013aa8:	602b      	str	r3, [r5, #0]
 8013aaa:	d032      	beq.n	8013b12 <__sflush_r+0x9a>
 8013aac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013aae:	89a3      	ldrh	r3, [r4, #12]
 8013ab0:	075a      	lsls	r2, r3, #29
 8013ab2:	d505      	bpl.n	8013ac0 <__sflush_r+0x48>
 8013ab4:	6863      	ldr	r3, [r4, #4]
 8013ab6:	1ac0      	subs	r0, r0, r3
 8013ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013aba:	b10b      	cbz	r3, 8013ac0 <__sflush_r+0x48>
 8013abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013abe:	1ac0      	subs	r0, r0, r3
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ac6:	6a21      	ldr	r1, [r4, #32]
 8013ac8:	4628      	mov	r0, r5
 8013aca:	47b0      	blx	r6
 8013acc:	1c43      	adds	r3, r0, #1
 8013ace:	89a3      	ldrh	r3, [r4, #12]
 8013ad0:	d106      	bne.n	8013ae0 <__sflush_r+0x68>
 8013ad2:	6829      	ldr	r1, [r5, #0]
 8013ad4:	291d      	cmp	r1, #29
 8013ad6:	d848      	bhi.n	8013b6a <__sflush_r+0xf2>
 8013ad8:	4a29      	ldr	r2, [pc, #164]	; (8013b80 <__sflush_r+0x108>)
 8013ada:	40ca      	lsrs	r2, r1
 8013adc:	07d6      	lsls	r6, r2, #31
 8013ade:	d544      	bpl.n	8013b6a <__sflush_r+0xf2>
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	6062      	str	r2, [r4, #4]
 8013ae4:	6922      	ldr	r2, [r4, #16]
 8013ae6:	04d9      	lsls	r1, r3, #19
 8013ae8:	6022      	str	r2, [r4, #0]
 8013aea:	d504      	bpl.n	8013af6 <__sflush_r+0x7e>
 8013aec:	1c42      	adds	r2, r0, #1
 8013aee:	d101      	bne.n	8013af4 <__sflush_r+0x7c>
 8013af0:	682b      	ldr	r3, [r5, #0]
 8013af2:	b903      	cbnz	r3, 8013af6 <__sflush_r+0x7e>
 8013af4:	6560      	str	r0, [r4, #84]	; 0x54
 8013af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013af8:	602f      	str	r7, [r5, #0]
 8013afa:	2900      	cmp	r1, #0
 8013afc:	d0c9      	beq.n	8013a92 <__sflush_r+0x1a>
 8013afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b02:	4299      	cmp	r1, r3
 8013b04:	d002      	beq.n	8013b0c <__sflush_r+0x94>
 8013b06:	4628      	mov	r0, r5
 8013b08:	f001 f8fe 	bl	8014d08 <_free_r>
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	6360      	str	r0, [r4, #52]	; 0x34
 8013b10:	e7c0      	b.n	8013a94 <__sflush_r+0x1c>
 8013b12:	2301      	movs	r3, #1
 8013b14:	4628      	mov	r0, r5
 8013b16:	47b0      	blx	r6
 8013b18:	1c41      	adds	r1, r0, #1
 8013b1a:	d1c8      	bne.n	8013aae <__sflush_r+0x36>
 8013b1c:	682b      	ldr	r3, [r5, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d0c5      	beq.n	8013aae <__sflush_r+0x36>
 8013b22:	2b1d      	cmp	r3, #29
 8013b24:	d001      	beq.n	8013b2a <__sflush_r+0xb2>
 8013b26:	2b16      	cmp	r3, #22
 8013b28:	d101      	bne.n	8013b2e <__sflush_r+0xb6>
 8013b2a:	602f      	str	r7, [r5, #0]
 8013b2c:	e7b1      	b.n	8013a92 <__sflush_r+0x1a>
 8013b2e:	89a3      	ldrh	r3, [r4, #12]
 8013b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b34:	81a3      	strh	r3, [r4, #12]
 8013b36:	e7ad      	b.n	8013a94 <__sflush_r+0x1c>
 8013b38:	690f      	ldr	r7, [r1, #16]
 8013b3a:	2f00      	cmp	r7, #0
 8013b3c:	d0a9      	beq.n	8013a92 <__sflush_r+0x1a>
 8013b3e:	0793      	lsls	r3, r2, #30
 8013b40:	bf18      	it	ne
 8013b42:	2300      	movne	r3, #0
 8013b44:	680e      	ldr	r6, [r1, #0]
 8013b46:	bf08      	it	eq
 8013b48:	694b      	ldreq	r3, [r1, #20]
 8013b4a:	eba6 0807 	sub.w	r8, r6, r7
 8013b4e:	600f      	str	r7, [r1, #0]
 8013b50:	608b      	str	r3, [r1, #8]
 8013b52:	f1b8 0f00 	cmp.w	r8, #0
 8013b56:	dd9c      	ble.n	8013a92 <__sflush_r+0x1a>
 8013b58:	4643      	mov	r3, r8
 8013b5a:	463a      	mov	r2, r7
 8013b5c:	6a21      	ldr	r1, [r4, #32]
 8013b5e:	4628      	mov	r0, r5
 8013b60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b62:	47b0      	blx	r6
 8013b64:	2800      	cmp	r0, #0
 8013b66:	dc06      	bgt.n	8013b76 <__sflush_r+0xfe>
 8013b68:	89a3      	ldrh	r3, [r4, #12]
 8013b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b6e:	81a3      	strh	r3, [r4, #12]
 8013b70:	f04f 30ff 	mov.w	r0, #4294967295
 8013b74:	e78e      	b.n	8013a94 <__sflush_r+0x1c>
 8013b76:	4407      	add	r7, r0
 8013b78:	eba8 0800 	sub.w	r8, r8, r0
 8013b7c:	e7e9      	b.n	8013b52 <__sflush_r+0xda>
 8013b7e:	bf00      	nop
 8013b80:	20400001 	.word	0x20400001

08013b84 <_fflush_r>:
 8013b84:	b538      	push	{r3, r4, r5, lr}
 8013b86:	690b      	ldr	r3, [r1, #16]
 8013b88:	4605      	mov	r5, r0
 8013b8a:	460c      	mov	r4, r1
 8013b8c:	b1db      	cbz	r3, 8013bc6 <_fflush_r+0x42>
 8013b8e:	b118      	cbz	r0, 8013b98 <_fflush_r+0x14>
 8013b90:	6983      	ldr	r3, [r0, #24]
 8013b92:	b90b      	cbnz	r3, 8013b98 <_fflush_r+0x14>
 8013b94:	f000 f860 	bl	8013c58 <__sinit>
 8013b98:	4b0c      	ldr	r3, [pc, #48]	; (8013bcc <_fflush_r+0x48>)
 8013b9a:	429c      	cmp	r4, r3
 8013b9c:	d109      	bne.n	8013bb2 <_fflush_r+0x2e>
 8013b9e:	686c      	ldr	r4, [r5, #4]
 8013ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ba4:	b17b      	cbz	r3, 8013bc6 <_fflush_r+0x42>
 8013ba6:	4621      	mov	r1, r4
 8013ba8:	4628      	mov	r0, r5
 8013baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bae:	f7ff bf63 	b.w	8013a78 <__sflush_r>
 8013bb2:	4b07      	ldr	r3, [pc, #28]	; (8013bd0 <_fflush_r+0x4c>)
 8013bb4:	429c      	cmp	r4, r3
 8013bb6:	d101      	bne.n	8013bbc <_fflush_r+0x38>
 8013bb8:	68ac      	ldr	r4, [r5, #8]
 8013bba:	e7f1      	b.n	8013ba0 <_fflush_r+0x1c>
 8013bbc:	4b05      	ldr	r3, [pc, #20]	; (8013bd4 <_fflush_r+0x50>)
 8013bbe:	429c      	cmp	r4, r3
 8013bc0:	bf08      	it	eq
 8013bc2:	68ec      	ldreq	r4, [r5, #12]
 8013bc4:	e7ec      	b.n	8013ba0 <_fflush_r+0x1c>
 8013bc6:	2000      	movs	r0, #0
 8013bc8:	bd38      	pop	{r3, r4, r5, pc}
 8013bca:	bf00      	nop
 8013bcc:	08019458 	.word	0x08019458
 8013bd0:	08019478 	.word	0x08019478
 8013bd4:	08019438 	.word	0x08019438

08013bd8 <std>:
 8013bd8:	2300      	movs	r3, #0
 8013bda:	b510      	push	{r4, lr}
 8013bdc:	4604      	mov	r4, r0
 8013bde:	e9c0 3300 	strd	r3, r3, [r0]
 8013be2:	6083      	str	r3, [r0, #8]
 8013be4:	8181      	strh	r1, [r0, #12]
 8013be6:	6643      	str	r3, [r0, #100]	; 0x64
 8013be8:	81c2      	strh	r2, [r0, #14]
 8013bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013bee:	6183      	str	r3, [r0, #24]
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	2208      	movs	r2, #8
 8013bf4:	305c      	adds	r0, #92	; 0x5c
 8013bf6:	f7fd faa4 	bl	8011142 <memset>
 8013bfa:	4b05      	ldr	r3, [pc, #20]	; (8013c10 <std+0x38>)
 8013bfc:	6224      	str	r4, [r4, #32]
 8013bfe:	6263      	str	r3, [r4, #36]	; 0x24
 8013c00:	4b04      	ldr	r3, [pc, #16]	; (8013c14 <std+0x3c>)
 8013c02:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c04:	4b04      	ldr	r3, [pc, #16]	; (8013c18 <std+0x40>)
 8013c06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c08:	4b04      	ldr	r3, [pc, #16]	; (8013c1c <std+0x44>)
 8013c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8013c0c:	bd10      	pop	{r4, pc}
 8013c0e:	bf00      	nop
 8013c10:	08015395 	.word	0x08015395
 8013c14:	080153b7 	.word	0x080153b7
 8013c18:	080153ef 	.word	0x080153ef
 8013c1c:	08015413 	.word	0x08015413

08013c20 <_cleanup_r>:
 8013c20:	4901      	ldr	r1, [pc, #4]	; (8013c28 <_cleanup_r+0x8>)
 8013c22:	f000 b885 	b.w	8013d30 <_fwalk_reent>
 8013c26:	bf00      	nop
 8013c28:	08013b85 	.word	0x08013b85

08013c2c <__sfmoreglue>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	2568      	movs	r5, #104	; 0x68
 8013c30:	1e4a      	subs	r2, r1, #1
 8013c32:	4355      	muls	r5, r2
 8013c34:	460e      	mov	r6, r1
 8013c36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013c3a:	f001 f8b1 	bl	8014da0 <_malloc_r>
 8013c3e:	4604      	mov	r4, r0
 8013c40:	b140      	cbz	r0, 8013c54 <__sfmoreglue+0x28>
 8013c42:	2100      	movs	r1, #0
 8013c44:	e9c0 1600 	strd	r1, r6, [r0]
 8013c48:	300c      	adds	r0, #12
 8013c4a:	60a0      	str	r0, [r4, #8]
 8013c4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013c50:	f7fd fa77 	bl	8011142 <memset>
 8013c54:	4620      	mov	r0, r4
 8013c56:	bd70      	pop	{r4, r5, r6, pc}

08013c58 <__sinit>:
 8013c58:	6983      	ldr	r3, [r0, #24]
 8013c5a:	b510      	push	{r4, lr}
 8013c5c:	4604      	mov	r4, r0
 8013c5e:	bb33      	cbnz	r3, 8013cae <__sinit+0x56>
 8013c60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013c64:	6503      	str	r3, [r0, #80]	; 0x50
 8013c66:	4b12      	ldr	r3, [pc, #72]	; (8013cb0 <__sinit+0x58>)
 8013c68:	4a12      	ldr	r2, [pc, #72]	; (8013cb4 <__sinit+0x5c>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	6282      	str	r2, [r0, #40]	; 0x28
 8013c6e:	4298      	cmp	r0, r3
 8013c70:	bf04      	itt	eq
 8013c72:	2301      	moveq	r3, #1
 8013c74:	6183      	streq	r3, [r0, #24]
 8013c76:	f000 f81f 	bl	8013cb8 <__sfp>
 8013c7a:	6060      	str	r0, [r4, #4]
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f000 f81b 	bl	8013cb8 <__sfp>
 8013c82:	60a0      	str	r0, [r4, #8]
 8013c84:	4620      	mov	r0, r4
 8013c86:	f000 f817 	bl	8013cb8 <__sfp>
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	60e0      	str	r0, [r4, #12]
 8013c8e:	2104      	movs	r1, #4
 8013c90:	6860      	ldr	r0, [r4, #4]
 8013c92:	f7ff ffa1 	bl	8013bd8 <std>
 8013c96:	2201      	movs	r2, #1
 8013c98:	2109      	movs	r1, #9
 8013c9a:	68a0      	ldr	r0, [r4, #8]
 8013c9c:	f7ff ff9c 	bl	8013bd8 <std>
 8013ca0:	2202      	movs	r2, #2
 8013ca2:	2112      	movs	r1, #18
 8013ca4:	68e0      	ldr	r0, [r4, #12]
 8013ca6:	f7ff ff97 	bl	8013bd8 <std>
 8013caa:	2301      	movs	r3, #1
 8013cac:	61a3      	str	r3, [r4, #24]
 8013cae:	bd10      	pop	{r4, pc}
 8013cb0:	08019398 	.word	0x08019398
 8013cb4:	08013c21 	.word	0x08013c21

08013cb8 <__sfp>:
 8013cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cba:	4b1b      	ldr	r3, [pc, #108]	; (8013d28 <__sfp+0x70>)
 8013cbc:	4607      	mov	r7, r0
 8013cbe:	681e      	ldr	r6, [r3, #0]
 8013cc0:	69b3      	ldr	r3, [r6, #24]
 8013cc2:	b913      	cbnz	r3, 8013cca <__sfp+0x12>
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f7ff ffc7 	bl	8013c58 <__sinit>
 8013cca:	3648      	adds	r6, #72	; 0x48
 8013ccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013cd0:	3b01      	subs	r3, #1
 8013cd2:	d503      	bpl.n	8013cdc <__sfp+0x24>
 8013cd4:	6833      	ldr	r3, [r6, #0]
 8013cd6:	b133      	cbz	r3, 8013ce6 <__sfp+0x2e>
 8013cd8:	6836      	ldr	r6, [r6, #0]
 8013cda:	e7f7      	b.n	8013ccc <__sfp+0x14>
 8013cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013ce0:	b16d      	cbz	r5, 8013cfe <__sfp+0x46>
 8013ce2:	3468      	adds	r4, #104	; 0x68
 8013ce4:	e7f4      	b.n	8013cd0 <__sfp+0x18>
 8013ce6:	2104      	movs	r1, #4
 8013ce8:	4638      	mov	r0, r7
 8013cea:	f7ff ff9f 	bl	8013c2c <__sfmoreglue>
 8013cee:	6030      	str	r0, [r6, #0]
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d1f1      	bne.n	8013cd8 <__sfp+0x20>
 8013cf4:	230c      	movs	r3, #12
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	603b      	str	r3, [r7, #0]
 8013cfa:	4620      	mov	r0, r4
 8013cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cfe:	4b0b      	ldr	r3, [pc, #44]	; (8013d2c <__sfp+0x74>)
 8013d00:	6665      	str	r5, [r4, #100]	; 0x64
 8013d02:	e9c4 5500 	strd	r5, r5, [r4]
 8013d06:	60a5      	str	r5, [r4, #8]
 8013d08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013d0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013d10:	2208      	movs	r2, #8
 8013d12:	4629      	mov	r1, r5
 8013d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013d18:	f7fd fa13 	bl	8011142 <memset>
 8013d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013d24:	e7e9      	b.n	8013cfa <__sfp+0x42>
 8013d26:	bf00      	nop
 8013d28:	08019398 	.word	0x08019398
 8013d2c:	ffff0001 	.word	0xffff0001

08013d30 <_fwalk_reent>:
 8013d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d34:	4680      	mov	r8, r0
 8013d36:	4689      	mov	r9, r1
 8013d38:	2600      	movs	r6, #0
 8013d3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d3e:	b914      	cbnz	r4, 8013d46 <_fwalk_reent+0x16>
 8013d40:	4630      	mov	r0, r6
 8013d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013d4a:	3f01      	subs	r7, #1
 8013d4c:	d501      	bpl.n	8013d52 <_fwalk_reent+0x22>
 8013d4e:	6824      	ldr	r4, [r4, #0]
 8013d50:	e7f5      	b.n	8013d3e <_fwalk_reent+0xe>
 8013d52:	89ab      	ldrh	r3, [r5, #12]
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d907      	bls.n	8013d68 <_fwalk_reent+0x38>
 8013d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	d003      	beq.n	8013d68 <_fwalk_reent+0x38>
 8013d60:	4629      	mov	r1, r5
 8013d62:	4640      	mov	r0, r8
 8013d64:	47c8      	blx	r9
 8013d66:	4306      	orrs	r6, r0
 8013d68:	3568      	adds	r5, #104	; 0x68
 8013d6a:	e7ee      	b.n	8013d4a <_fwalk_reent+0x1a>

08013d6c <rshift>:
 8013d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d6e:	6906      	ldr	r6, [r0, #16]
 8013d70:	114b      	asrs	r3, r1, #5
 8013d72:	429e      	cmp	r6, r3
 8013d74:	f100 0414 	add.w	r4, r0, #20
 8013d78:	dd31      	ble.n	8013dde <rshift+0x72>
 8013d7a:	f011 011f 	ands.w	r1, r1, #31
 8013d7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013d82:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013d86:	d108      	bne.n	8013d9a <rshift+0x2e>
 8013d88:	4621      	mov	r1, r4
 8013d8a:	42b2      	cmp	r2, r6
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	d211      	bcs.n	8013db4 <rshift+0x48>
 8013d90:	f852 3b04 	ldr.w	r3, [r2], #4
 8013d94:	f841 3b04 	str.w	r3, [r1], #4
 8013d98:	e7f7      	b.n	8013d8a <rshift+0x1e>
 8013d9a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013d9e:	4623      	mov	r3, r4
 8013da0:	f1c1 0c20 	rsb	ip, r1, #32
 8013da4:	40cd      	lsrs	r5, r1
 8013da6:	3204      	adds	r2, #4
 8013da8:	42b2      	cmp	r2, r6
 8013daa:	4617      	mov	r7, r2
 8013dac:	d30d      	bcc.n	8013dca <rshift+0x5e>
 8013dae:	601d      	str	r5, [r3, #0]
 8013db0:	b105      	cbz	r5, 8013db4 <rshift+0x48>
 8013db2:	3304      	adds	r3, #4
 8013db4:	42a3      	cmp	r3, r4
 8013db6:	eba3 0204 	sub.w	r2, r3, r4
 8013dba:	bf08      	it	eq
 8013dbc:	2300      	moveq	r3, #0
 8013dbe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013dc2:	6102      	str	r2, [r0, #16]
 8013dc4:	bf08      	it	eq
 8013dc6:	6143      	streq	r3, [r0, #20]
 8013dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dca:	683f      	ldr	r7, [r7, #0]
 8013dcc:	fa07 f70c 	lsl.w	r7, r7, ip
 8013dd0:	433d      	orrs	r5, r7
 8013dd2:	f843 5b04 	str.w	r5, [r3], #4
 8013dd6:	f852 5b04 	ldr.w	r5, [r2], #4
 8013dda:	40cd      	lsrs	r5, r1
 8013ddc:	e7e4      	b.n	8013da8 <rshift+0x3c>
 8013dde:	4623      	mov	r3, r4
 8013de0:	e7e8      	b.n	8013db4 <rshift+0x48>

08013de2 <__hexdig_fun>:
 8013de2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013de6:	2b09      	cmp	r3, #9
 8013de8:	d802      	bhi.n	8013df0 <__hexdig_fun+0xe>
 8013dea:	3820      	subs	r0, #32
 8013dec:	b2c0      	uxtb	r0, r0
 8013dee:	4770      	bx	lr
 8013df0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013df4:	2b05      	cmp	r3, #5
 8013df6:	d801      	bhi.n	8013dfc <__hexdig_fun+0x1a>
 8013df8:	3847      	subs	r0, #71	; 0x47
 8013dfa:	e7f7      	b.n	8013dec <__hexdig_fun+0xa>
 8013dfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013e00:	2b05      	cmp	r3, #5
 8013e02:	d801      	bhi.n	8013e08 <__hexdig_fun+0x26>
 8013e04:	3827      	subs	r0, #39	; 0x27
 8013e06:	e7f1      	b.n	8013dec <__hexdig_fun+0xa>
 8013e08:	2000      	movs	r0, #0
 8013e0a:	4770      	bx	lr

08013e0c <__gethex>:
 8013e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e10:	b08b      	sub	sp, #44	; 0x2c
 8013e12:	9002      	str	r0, [sp, #8]
 8013e14:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013e16:	468a      	mov	sl, r1
 8013e18:	4690      	mov	r8, r2
 8013e1a:	9306      	str	r3, [sp, #24]
 8013e1c:	f000 fad1 	bl	80143c2 <__localeconv_l>
 8013e20:	6803      	ldr	r3, [r0, #0]
 8013e22:	f04f 0b00 	mov.w	fp, #0
 8013e26:	4618      	mov	r0, r3
 8013e28:	9303      	str	r3, [sp, #12]
 8013e2a:	f7ec f9a9 	bl	8000180 <strlen>
 8013e2e:	9b03      	ldr	r3, [sp, #12]
 8013e30:	9001      	str	r0, [sp, #4]
 8013e32:	4403      	add	r3, r0
 8013e34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013e38:	9307      	str	r3, [sp, #28]
 8013e3a:	f8da 3000 	ldr.w	r3, [sl]
 8013e3e:	3302      	adds	r3, #2
 8013e40:	461f      	mov	r7, r3
 8013e42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013e46:	2830      	cmp	r0, #48	; 0x30
 8013e48:	d06c      	beq.n	8013f24 <__gethex+0x118>
 8013e4a:	f7ff ffca 	bl	8013de2 <__hexdig_fun>
 8013e4e:	4604      	mov	r4, r0
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d16a      	bne.n	8013f2a <__gethex+0x11e>
 8013e54:	9a01      	ldr	r2, [sp, #4]
 8013e56:	9903      	ldr	r1, [sp, #12]
 8013e58:	4638      	mov	r0, r7
 8013e5a:	f001 fade 	bl	801541a <strncmp>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d166      	bne.n	8013f30 <__gethex+0x124>
 8013e62:	9b01      	ldr	r3, [sp, #4]
 8013e64:	5cf8      	ldrb	r0, [r7, r3]
 8013e66:	18fe      	adds	r6, r7, r3
 8013e68:	f7ff ffbb 	bl	8013de2 <__hexdig_fun>
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	d062      	beq.n	8013f36 <__gethex+0x12a>
 8013e70:	4633      	mov	r3, r6
 8013e72:	7818      	ldrb	r0, [r3, #0]
 8013e74:	461f      	mov	r7, r3
 8013e76:	2830      	cmp	r0, #48	; 0x30
 8013e78:	f103 0301 	add.w	r3, r3, #1
 8013e7c:	d0f9      	beq.n	8013e72 <__gethex+0x66>
 8013e7e:	f7ff ffb0 	bl	8013de2 <__hexdig_fun>
 8013e82:	fab0 f580 	clz	r5, r0
 8013e86:	4634      	mov	r4, r6
 8013e88:	f04f 0b01 	mov.w	fp, #1
 8013e8c:	096d      	lsrs	r5, r5, #5
 8013e8e:	463a      	mov	r2, r7
 8013e90:	4616      	mov	r6, r2
 8013e92:	7830      	ldrb	r0, [r6, #0]
 8013e94:	3201      	adds	r2, #1
 8013e96:	f7ff ffa4 	bl	8013de2 <__hexdig_fun>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d1f8      	bne.n	8013e90 <__gethex+0x84>
 8013e9e:	9a01      	ldr	r2, [sp, #4]
 8013ea0:	9903      	ldr	r1, [sp, #12]
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f001 fab9 	bl	801541a <strncmp>
 8013ea8:	b950      	cbnz	r0, 8013ec0 <__gethex+0xb4>
 8013eaa:	b954      	cbnz	r4, 8013ec2 <__gethex+0xb6>
 8013eac:	9b01      	ldr	r3, [sp, #4]
 8013eae:	18f4      	adds	r4, r6, r3
 8013eb0:	4622      	mov	r2, r4
 8013eb2:	4616      	mov	r6, r2
 8013eb4:	7830      	ldrb	r0, [r6, #0]
 8013eb6:	3201      	adds	r2, #1
 8013eb8:	f7ff ff93 	bl	8013de2 <__hexdig_fun>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d1f8      	bne.n	8013eb2 <__gethex+0xa6>
 8013ec0:	b10c      	cbz	r4, 8013ec6 <__gethex+0xba>
 8013ec2:	1ba4      	subs	r4, r4, r6
 8013ec4:	00a4      	lsls	r4, r4, #2
 8013ec6:	7833      	ldrb	r3, [r6, #0]
 8013ec8:	2b50      	cmp	r3, #80	; 0x50
 8013eca:	d001      	beq.n	8013ed0 <__gethex+0xc4>
 8013ecc:	2b70      	cmp	r3, #112	; 0x70
 8013ece:	d140      	bne.n	8013f52 <__gethex+0x146>
 8013ed0:	7873      	ldrb	r3, [r6, #1]
 8013ed2:	2b2b      	cmp	r3, #43	; 0x2b
 8013ed4:	d031      	beq.n	8013f3a <__gethex+0x12e>
 8013ed6:	2b2d      	cmp	r3, #45	; 0x2d
 8013ed8:	d033      	beq.n	8013f42 <__gethex+0x136>
 8013eda:	f04f 0900 	mov.w	r9, #0
 8013ede:	1c71      	adds	r1, r6, #1
 8013ee0:	7808      	ldrb	r0, [r1, #0]
 8013ee2:	f7ff ff7e 	bl	8013de2 <__hexdig_fun>
 8013ee6:	1e43      	subs	r3, r0, #1
 8013ee8:	b2db      	uxtb	r3, r3
 8013eea:	2b18      	cmp	r3, #24
 8013eec:	d831      	bhi.n	8013f52 <__gethex+0x146>
 8013eee:	f1a0 0210 	sub.w	r2, r0, #16
 8013ef2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013ef6:	f7ff ff74 	bl	8013de2 <__hexdig_fun>
 8013efa:	1e43      	subs	r3, r0, #1
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	2b18      	cmp	r3, #24
 8013f00:	d922      	bls.n	8013f48 <__gethex+0x13c>
 8013f02:	f1b9 0f00 	cmp.w	r9, #0
 8013f06:	d000      	beq.n	8013f0a <__gethex+0xfe>
 8013f08:	4252      	negs	r2, r2
 8013f0a:	4414      	add	r4, r2
 8013f0c:	f8ca 1000 	str.w	r1, [sl]
 8013f10:	b30d      	cbz	r5, 8013f56 <__gethex+0x14a>
 8013f12:	f1bb 0f00 	cmp.w	fp, #0
 8013f16:	bf0c      	ite	eq
 8013f18:	2706      	moveq	r7, #6
 8013f1a:	2700      	movne	r7, #0
 8013f1c:	4638      	mov	r0, r7
 8013f1e:	b00b      	add	sp, #44	; 0x2c
 8013f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f24:	f10b 0b01 	add.w	fp, fp, #1
 8013f28:	e78a      	b.n	8013e40 <__gethex+0x34>
 8013f2a:	2500      	movs	r5, #0
 8013f2c:	462c      	mov	r4, r5
 8013f2e:	e7ae      	b.n	8013e8e <__gethex+0x82>
 8013f30:	463e      	mov	r6, r7
 8013f32:	2501      	movs	r5, #1
 8013f34:	e7c7      	b.n	8013ec6 <__gethex+0xba>
 8013f36:	4604      	mov	r4, r0
 8013f38:	e7fb      	b.n	8013f32 <__gethex+0x126>
 8013f3a:	f04f 0900 	mov.w	r9, #0
 8013f3e:	1cb1      	adds	r1, r6, #2
 8013f40:	e7ce      	b.n	8013ee0 <__gethex+0xd4>
 8013f42:	f04f 0901 	mov.w	r9, #1
 8013f46:	e7fa      	b.n	8013f3e <__gethex+0x132>
 8013f48:	230a      	movs	r3, #10
 8013f4a:	fb03 0202 	mla	r2, r3, r2, r0
 8013f4e:	3a10      	subs	r2, #16
 8013f50:	e7cf      	b.n	8013ef2 <__gethex+0xe6>
 8013f52:	4631      	mov	r1, r6
 8013f54:	e7da      	b.n	8013f0c <__gethex+0x100>
 8013f56:	4629      	mov	r1, r5
 8013f58:	1bf3      	subs	r3, r6, r7
 8013f5a:	3b01      	subs	r3, #1
 8013f5c:	2b07      	cmp	r3, #7
 8013f5e:	dc49      	bgt.n	8013ff4 <__gethex+0x1e8>
 8013f60:	9802      	ldr	r0, [sp, #8]
 8013f62:	f000 facb 	bl	80144fc <_Balloc>
 8013f66:	f04f 0b00 	mov.w	fp, #0
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	46da      	mov	sl, fp
 8013f6e:	9b01      	ldr	r3, [sp, #4]
 8013f70:	f100 0914 	add.w	r9, r0, #20
 8013f74:	f1c3 0301 	rsb	r3, r3, #1
 8013f78:	f8cd 9010 	str.w	r9, [sp, #16]
 8013f7c:	9308      	str	r3, [sp, #32]
 8013f7e:	42b7      	cmp	r7, r6
 8013f80:	d33b      	bcc.n	8013ffa <__gethex+0x1ee>
 8013f82:	9804      	ldr	r0, [sp, #16]
 8013f84:	f840 ab04 	str.w	sl, [r0], #4
 8013f88:	eba0 0009 	sub.w	r0, r0, r9
 8013f8c:	1080      	asrs	r0, r0, #2
 8013f8e:	6128      	str	r0, [r5, #16]
 8013f90:	0147      	lsls	r7, r0, #5
 8013f92:	4650      	mov	r0, sl
 8013f94:	f000 fb76 	bl	8014684 <__hi0bits>
 8013f98:	f8d8 6000 	ldr.w	r6, [r8]
 8013f9c:	1a3f      	subs	r7, r7, r0
 8013f9e:	42b7      	cmp	r7, r6
 8013fa0:	dd64      	ble.n	801406c <__gethex+0x260>
 8013fa2:	1bbf      	subs	r7, r7, r6
 8013fa4:	4639      	mov	r1, r7
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	f000 fe7f 	bl	8014caa <__any_on>
 8013fac:	4682      	mov	sl, r0
 8013fae:	b178      	cbz	r0, 8013fd0 <__gethex+0x1c4>
 8013fb0:	f04f 0a01 	mov.w	sl, #1
 8013fb4:	1e7b      	subs	r3, r7, #1
 8013fb6:	1159      	asrs	r1, r3, #5
 8013fb8:	f003 021f 	and.w	r2, r3, #31
 8013fbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013fc0:	fa0a f202 	lsl.w	r2, sl, r2
 8013fc4:	420a      	tst	r2, r1
 8013fc6:	d003      	beq.n	8013fd0 <__gethex+0x1c4>
 8013fc8:	4553      	cmp	r3, sl
 8013fca:	dc46      	bgt.n	801405a <__gethex+0x24e>
 8013fcc:	f04f 0a02 	mov.w	sl, #2
 8013fd0:	4639      	mov	r1, r7
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	f7ff feca 	bl	8013d6c <rshift>
 8013fd8:	443c      	add	r4, r7
 8013fda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013fde:	42a3      	cmp	r3, r4
 8013fe0:	da52      	bge.n	8014088 <__gethex+0x27c>
 8013fe2:	4629      	mov	r1, r5
 8013fe4:	9802      	ldr	r0, [sp, #8]
 8013fe6:	f000 fabd 	bl	8014564 <_Bfree>
 8013fea:	2300      	movs	r3, #0
 8013fec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013fee:	27a3      	movs	r7, #163	; 0xa3
 8013ff0:	6013      	str	r3, [r2, #0]
 8013ff2:	e793      	b.n	8013f1c <__gethex+0x110>
 8013ff4:	3101      	adds	r1, #1
 8013ff6:	105b      	asrs	r3, r3, #1
 8013ff8:	e7b0      	b.n	8013f5c <__gethex+0x150>
 8013ffa:	1e73      	subs	r3, r6, #1
 8013ffc:	9305      	str	r3, [sp, #20]
 8013ffe:	9a07      	ldr	r2, [sp, #28]
 8014000:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014004:	4293      	cmp	r3, r2
 8014006:	d018      	beq.n	801403a <__gethex+0x22e>
 8014008:	f1bb 0f20 	cmp.w	fp, #32
 801400c:	d107      	bne.n	801401e <__gethex+0x212>
 801400e:	9b04      	ldr	r3, [sp, #16]
 8014010:	f8c3 a000 	str.w	sl, [r3]
 8014014:	f04f 0a00 	mov.w	sl, #0
 8014018:	46d3      	mov	fp, sl
 801401a:	3304      	adds	r3, #4
 801401c:	9304      	str	r3, [sp, #16]
 801401e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014022:	f7ff fede 	bl	8013de2 <__hexdig_fun>
 8014026:	f000 000f 	and.w	r0, r0, #15
 801402a:	fa00 f00b 	lsl.w	r0, r0, fp
 801402e:	ea4a 0a00 	orr.w	sl, sl, r0
 8014032:	f10b 0b04 	add.w	fp, fp, #4
 8014036:	9b05      	ldr	r3, [sp, #20]
 8014038:	e00d      	b.n	8014056 <__gethex+0x24a>
 801403a:	9b05      	ldr	r3, [sp, #20]
 801403c:	9a08      	ldr	r2, [sp, #32]
 801403e:	4413      	add	r3, r2
 8014040:	42bb      	cmp	r3, r7
 8014042:	d3e1      	bcc.n	8014008 <__gethex+0x1fc>
 8014044:	4618      	mov	r0, r3
 8014046:	9a01      	ldr	r2, [sp, #4]
 8014048:	9903      	ldr	r1, [sp, #12]
 801404a:	9309      	str	r3, [sp, #36]	; 0x24
 801404c:	f001 f9e5 	bl	801541a <strncmp>
 8014050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014052:	2800      	cmp	r0, #0
 8014054:	d1d8      	bne.n	8014008 <__gethex+0x1fc>
 8014056:	461e      	mov	r6, r3
 8014058:	e791      	b.n	8013f7e <__gethex+0x172>
 801405a:	1eb9      	subs	r1, r7, #2
 801405c:	4628      	mov	r0, r5
 801405e:	f000 fe24 	bl	8014caa <__any_on>
 8014062:	2800      	cmp	r0, #0
 8014064:	d0b2      	beq.n	8013fcc <__gethex+0x1c0>
 8014066:	f04f 0a03 	mov.w	sl, #3
 801406a:	e7b1      	b.n	8013fd0 <__gethex+0x1c4>
 801406c:	da09      	bge.n	8014082 <__gethex+0x276>
 801406e:	1bf7      	subs	r7, r6, r7
 8014070:	4629      	mov	r1, r5
 8014072:	463a      	mov	r2, r7
 8014074:	9802      	ldr	r0, [sp, #8]
 8014076:	f000 fc3f 	bl	80148f8 <__lshift>
 801407a:	4605      	mov	r5, r0
 801407c:	1be4      	subs	r4, r4, r7
 801407e:	f100 0914 	add.w	r9, r0, #20
 8014082:	f04f 0a00 	mov.w	sl, #0
 8014086:	e7a8      	b.n	8013fda <__gethex+0x1ce>
 8014088:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801408c:	42a0      	cmp	r0, r4
 801408e:	dd6b      	ble.n	8014168 <__gethex+0x35c>
 8014090:	1b04      	subs	r4, r0, r4
 8014092:	42a6      	cmp	r6, r4
 8014094:	dc2e      	bgt.n	80140f4 <__gethex+0x2e8>
 8014096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801409a:	2b02      	cmp	r3, #2
 801409c:	d022      	beq.n	80140e4 <__gethex+0x2d8>
 801409e:	2b03      	cmp	r3, #3
 80140a0:	d024      	beq.n	80140ec <__gethex+0x2e0>
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d115      	bne.n	80140d2 <__gethex+0x2c6>
 80140a6:	42a6      	cmp	r6, r4
 80140a8:	d113      	bne.n	80140d2 <__gethex+0x2c6>
 80140aa:	2e01      	cmp	r6, #1
 80140ac:	dc0b      	bgt.n	80140c6 <__gethex+0x2ba>
 80140ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80140b2:	9a06      	ldr	r2, [sp, #24]
 80140b4:	2762      	movs	r7, #98	; 0x62
 80140b6:	6013      	str	r3, [r2, #0]
 80140b8:	2301      	movs	r3, #1
 80140ba:	612b      	str	r3, [r5, #16]
 80140bc:	f8c9 3000 	str.w	r3, [r9]
 80140c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80140c2:	601d      	str	r5, [r3, #0]
 80140c4:	e72a      	b.n	8013f1c <__gethex+0x110>
 80140c6:	1e71      	subs	r1, r6, #1
 80140c8:	4628      	mov	r0, r5
 80140ca:	f000 fdee 	bl	8014caa <__any_on>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	d1ed      	bne.n	80140ae <__gethex+0x2a2>
 80140d2:	4629      	mov	r1, r5
 80140d4:	9802      	ldr	r0, [sp, #8]
 80140d6:	f000 fa45 	bl	8014564 <_Bfree>
 80140da:	2300      	movs	r3, #0
 80140dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80140de:	2750      	movs	r7, #80	; 0x50
 80140e0:	6013      	str	r3, [r2, #0]
 80140e2:	e71b      	b.n	8013f1c <__gethex+0x110>
 80140e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d0e1      	beq.n	80140ae <__gethex+0x2a2>
 80140ea:	e7f2      	b.n	80140d2 <__gethex+0x2c6>
 80140ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1dd      	bne.n	80140ae <__gethex+0x2a2>
 80140f2:	e7ee      	b.n	80140d2 <__gethex+0x2c6>
 80140f4:	1e67      	subs	r7, r4, #1
 80140f6:	f1ba 0f00 	cmp.w	sl, #0
 80140fa:	d132      	bne.n	8014162 <__gethex+0x356>
 80140fc:	b127      	cbz	r7, 8014108 <__gethex+0x2fc>
 80140fe:	4639      	mov	r1, r7
 8014100:	4628      	mov	r0, r5
 8014102:	f000 fdd2 	bl	8014caa <__any_on>
 8014106:	4682      	mov	sl, r0
 8014108:	2301      	movs	r3, #1
 801410a:	117a      	asrs	r2, r7, #5
 801410c:	f007 071f 	and.w	r7, r7, #31
 8014110:	fa03 f707 	lsl.w	r7, r3, r7
 8014114:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014118:	4621      	mov	r1, r4
 801411a:	421f      	tst	r7, r3
 801411c:	f04f 0702 	mov.w	r7, #2
 8014120:	4628      	mov	r0, r5
 8014122:	bf18      	it	ne
 8014124:	f04a 0a02 	orrne.w	sl, sl, #2
 8014128:	1b36      	subs	r6, r6, r4
 801412a:	f7ff fe1f 	bl	8013d6c <rshift>
 801412e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014132:	f1ba 0f00 	cmp.w	sl, #0
 8014136:	d048      	beq.n	80141ca <__gethex+0x3be>
 8014138:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801413c:	2b02      	cmp	r3, #2
 801413e:	d015      	beq.n	801416c <__gethex+0x360>
 8014140:	2b03      	cmp	r3, #3
 8014142:	d017      	beq.n	8014174 <__gethex+0x368>
 8014144:	2b01      	cmp	r3, #1
 8014146:	d109      	bne.n	801415c <__gethex+0x350>
 8014148:	f01a 0f02 	tst.w	sl, #2
 801414c:	d006      	beq.n	801415c <__gethex+0x350>
 801414e:	f8d9 3000 	ldr.w	r3, [r9]
 8014152:	ea4a 0a03 	orr.w	sl, sl, r3
 8014156:	f01a 0f01 	tst.w	sl, #1
 801415a:	d10e      	bne.n	801417a <__gethex+0x36e>
 801415c:	f047 0710 	orr.w	r7, r7, #16
 8014160:	e033      	b.n	80141ca <__gethex+0x3be>
 8014162:	f04f 0a01 	mov.w	sl, #1
 8014166:	e7cf      	b.n	8014108 <__gethex+0x2fc>
 8014168:	2701      	movs	r7, #1
 801416a:	e7e2      	b.n	8014132 <__gethex+0x326>
 801416c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801416e:	f1c3 0301 	rsb	r3, r3, #1
 8014172:	9315      	str	r3, [sp, #84]	; 0x54
 8014174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014176:	2b00      	cmp	r3, #0
 8014178:	d0f0      	beq.n	801415c <__gethex+0x350>
 801417a:	f04f 0c00 	mov.w	ip, #0
 801417e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014182:	f105 0314 	add.w	r3, r5, #20
 8014186:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801418a:	eb03 010a 	add.w	r1, r3, sl
 801418e:	4618      	mov	r0, r3
 8014190:	f853 2b04 	ldr.w	r2, [r3], #4
 8014194:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014198:	d01c      	beq.n	80141d4 <__gethex+0x3c8>
 801419a:	3201      	adds	r2, #1
 801419c:	6002      	str	r2, [r0, #0]
 801419e:	2f02      	cmp	r7, #2
 80141a0:	f105 0314 	add.w	r3, r5, #20
 80141a4:	d138      	bne.n	8014218 <__gethex+0x40c>
 80141a6:	f8d8 2000 	ldr.w	r2, [r8]
 80141aa:	3a01      	subs	r2, #1
 80141ac:	42b2      	cmp	r2, r6
 80141ae:	d10a      	bne.n	80141c6 <__gethex+0x3ba>
 80141b0:	2201      	movs	r2, #1
 80141b2:	1171      	asrs	r1, r6, #5
 80141b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80141b8:	f006 061f 	and.w	r6, r6, #31
 80141bc:	fa02 f606 	lsl.w	r6, r2, r6
 80141c0:	421e      	tst	r6, r3
 80141c2:	bf18      	it	ne
 80141c4:	4617      	movne	r7, r2
 80141c6:	f047 0720 	orr.w	r7, r7, #32
 80141ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80141cc:	601d      	str	r5, [r3, #0]
 80141ce:	9b06      	ldr	r3, [sp, #24]
 80141d0:	601c      	str	r4, [r3, #0]
 80141d2:	e6a3      	b.n	8013f1c <__gethex+0x110>
 80141d4:	4299      	cmp	r1, r3
 80141d6:	f843 cc04 	str.w	ip, [r3, #-4]
 80141da:	d8d8      	bhi.n	801418e <__gethex+0x382>
 80141dc:	68ab      	ldr	r3, [r5, #8]
 80141de:	4599      	cmp	r9, r3
 80141e0:	db12      	blt.n	8014208 <__gethex+0x3fc>
 80141e2:	6869      	ldr	r1, [r5, #4]
 80141e4:	9802      	ldr	r0, [sp, #8]
 80141e6:	3101      	adds	r1, #1
 80141e8:	f000 f988 	bl	80144fc <_Balloc>
 80141ec:	4683      	mov	fp, r0
 80141ee:	692a      	ldr	r2, [r5, #16]
 80141f0:	f105 010c 	add.w	r1, r5, #12
 80141f4:	3202      	adds	r2, #2
 80141f6:	0092      	lsls	r2, r2, #2
 80141f8:	300c      	adds	r0, #12
 80141fa:	f7fc ff97 	bl	801112c <memcpy>
 80141fe:	4629      	mov	r1, r5
 8014200:	9802      	ldr	r0, [sp, #8]
 8014202:	f000 f9af 	bl	8014564 <_Bfree>
 8014206:	465d      	mov	r5, fp
 8014208:	692b      	ldr	r3, [r5, #16]
 801420a:	1c5a      	adds	r2, r3, #1
 801420c:	612a      	str	r2, [r5, #16]
 801420e:	2201      	movs	r2, #1
 8014210:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014214:	615a      	str	r2, [r3, #20]
 8014216:	e7c2      	b.n	801419e <__gethex+0x392>
 8014218:	692a      	ldr	r2, [r5, #16]
 801421a:	454a      	cmp	r2, r9
 801421c:	dd0b      	ble.n	8014236 <__gethex+0x42a>
 801421e:	2101      	movs	r1, #1
 8014220:	4628      	mov	r0, r5
 8014222:	f7ff fda3 	bl	8013d6c <rshift>
 8014226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801422a:	3401      	adds	r4, #1
 801422c:	42a3      	cmp	r3, r4
 801422e:	f6ff aed8 	blt.w	8013fe2 <__gethex+0x1d6>
 8014232:	2701      	movs	r7, #1
 8014234:	e7c7      	b.n	80141c6 <__gethex+0x3ba>
 8014236:	f016 061f 	ands.w	r6, r6, #31
 801423a:	d0fa      	beq.n	8014232 <__gethex+0x426>
 801423c:	449a      	add	sl, r3
 801423e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014242:	f000 fa1f 	bl	8014684 <__hi0bits>
 8014246:	f1c6 0620 	rsb	r6, r6, #32
 801424a:	42b0      	cmp	r0, r6
 801424c:	dbe7      	blt.n	801421e <__gethex+0x412>
 801424e:	e7f0      	b.n	8014232 <__gethex+0x426>

08014250 <L_shift>:
 8014250:	f1c2 0208 	rsb	r2, r2, #8
 8014254:	0092      	lsls	r2, r2, #2
 8014256:	b570      	push	{r4, r5, r6, lr}
 8014258:	f1c2 0620 	rsb	r6, r2, #32
 801425c:	6843      	ldr	r3, [r0, #4]
 801425e:	6804      	ldr	r4, [r0, #0]
 8014260:	fa03 f506 	lsl.w	r5, r3, r6
 8014264:	432c      	orrs	r4, r5
 8014266:	40d3      	lsrs	r3, r2
 8014268:	6004      	str	r4, [r0, #0]
 801426a:	f840 3f04 	str.w	r3, [r0, #4]!
 801426e:	4288      	cmp	r0, r1
 8014270:	d3f4      	bcc.n	801425c <L_shift+0xc>
 8014272:	bd70      	pop	{r4, r5, r6, pc}

08014274 <__match>:
 8014274:	b530      	push	{r4, r5, lr}
 8014276:	6803      	ldr	r3, [r0, #0]
 8014278:	3301      	adds	r3, #1
 801427a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801427e:	b914      	cbnz	r4, 8014286 <__match+0x12>
 8014280:	6003      	str	r3, [r0, #0]
 8014282:	2001      	movs	r0, #1
 8014284:	bd30      	pop	{r4, r5, pc}
 8014286:	f813 2b01 	ldrb.w	r2, [r3], #1
 801428a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801428e:	2d19      	cmp	r5, #25
 8014290:	bf98      	it	ls
 8014292:	3220      	addls	r2, #32
 8014294:	42a2      	cmp	r2, r4
 8014296:	d0f0      	beq.n	801427a <__match+0x6>
 8014298:	2000      	movs	r0, #0
 801429a:	e7f3      	b.n	8014284 <__match+0x10>

0801429c <__hexnan>:
 801429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a0:	2500      	movs	r5, #0
 80142a2:	680b      	ldr	r3, [r1, #0]
 80142a4:	4682      	mov	sl, r0
 80142a6:	115f      	asrs	r7, r3, #5
 80142a8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80142ac:	f013 031f 	ands.w	r3, r3, #31
 80142b0:	bf18      	it	ne
 80142b2:	3704      	addne	r7, #4
 80142b4:	1f3e      	subs	r6, r7, #4
 80142b6:	4690      	mov	r8, r2
 80142b8:	46b1      	mov	r9, r6
 80142ba:	4634      	mov	r4, r6
 80142bc:	46ab      	mov	fp, r5
 80142be:	b087      	sub	sp, #28
 80142c0:	6801      	ldr	r1, [r0, #0]
 80142c2:	9301      	str	r3, [sp, #4]
 80142c4:	f847 5c04 	str.w	r5, [r7, #-4]
 80142c8:	9502      	str	r5, [sp, #8]
 80142ca:	784a      	ldrb	r2, [r1, #1]
 80142cc:	1c4b      	adds	r3, r1, #1
 80142ce:	9303      	str	r3, [sp, #12]
 80142d0:	b342      	cbz	r2, 8014324 <__hexnan+0x88>
 80142d2:	4610      	mov	r0, r2
 80142d4:	9105      	str	r1, [sp, #20]
 80142d6:	9204      	str	r2, [sp, #16]
 80142d8:	f7ff fd83 	bl	8013de2 <__hexdig_fun>
 80142dc:	2800      	cmp	r0, #0
 80142de:	d143      	bne.n	8014368 <__hexnan+0xcc>
 80142e0:	9a04      	ldr	r2, [sp, #16]
 80142e2:	9905      	ldr	r1, [sp, #20]
 80142e4:	2a20      	cmp	r2, #32
 80142e6:	d818      	bhi.n	801431a <__hexnan+0x7e>
 80142e8:	9b02      	ldr	r3, [sp, #8]
 80142ea:	459b      	cmp	fp, r3
 80142ec:	dd13      	ble.n	8014316 <__hexnan+0x7a>
 80142ee:	454c      	cmp	r4, r9
 80142f0:	d206      	bcs.n	8014300 <__hexnan+0x64>
 80142f2:	2d07      	cmp	r5, #7
 80142f4:	dc04      	bgt.n	8014300 <__hexnan+0x64>
 80142f6:	462a      	mov	r2, r5
 80142f8:	4649      	mov	r1, r9
 80142fa:	4620      	mov	r0, r4
 80142fc:	f7ff ffa8 	bl	8014250 <L_shift>
 8014300:	4544      	cmp	r4, r8
 8014302:	d944      	bls.n	801438e <__hexnan+0xf2>
 8014304:	2300      	movs	r3, #0
 8014306:	f1a4 0904 	sub.w	r9, r4, #4
 801430a:	f844 3c04 	str.w	r3, [r4, #-4]
 801430e:	461d      	mov	r5, r3
 8014310:	464c      	mov	r4, r9
 8014312:	f8cd b008 	str.w	fp, [sp, #8]
 8014316:	9903      	ldr	r1, [sp, #12]
 8014318:	e7d7      	b.n	80142ca <__hexnan+0x2e>
 801431a:	2a29      	cmp	r2, #41	; 0x29
 801431c:	d14a      	bne.n	80143b4 <__hexnan+0x118>
 801431e:	3102      	adds	r1, #2
 8014320:	f8ca 1000 	str.w	r1, [sl]
 8014324:	f1bb 0f00 	cmp.w	fp, #0
 8014328:	d044      	beq.n	80143b4 <__hexnan+0x118>
 801432a:	454c      	cmp	r4, r9
 801432c:	d206      	bcs.n	801433c <__hexnan+0xa0>
 801432e:	2d07      	cmp	r5, #7
 8014330:	dc04      	bgt.n	801433c <__hexnan+0xa0>
 8014332:	462a      	mov	r2, r5
 8014334:	4649      	mov	r1, r9
 8014336:	4620      	mov	r0, r4
 8014338:	f7ff ff8a 	bl	8014250 <L_shift>
 801433c:	4544      	cmp	r4, r8
 801433e:	d928      	bls.n	8014392 <__hexnan+0xf6>
 8014340:	4643      	mov	r3, r8
 8014342:	f854 2b04 	ldr.w	r2, [r4], #4
 8014346:	42a6      	cmp	r6, r4
 8014348:	f843 2b04 	str.w	r2, [r3], #4
 801434c:	d2f9      	bcs.n	8014342 <__hexnan+0xa6>
 801434e:	2200      	movs	r2, #0
 8014350:	f843 2b04 	str.w	r2, [r3], #4
 8014354:	429e      	cmp	r6, r3
 8014356:	d2fb      	bcs.n	8014350 <__hexnan+0xb4>
 8014358:	6833      	ldr	r3, [r6, #0]
 801435a:	b91b      	cbnz	r3, 8014364 <__hexnan+0xc8>
 801435c:	4546      	cmp	r6, r8
 801435e:	d127      	bne.n	80143b0 <__hexnan+0x114>
 8014360:	2301      	movs	r3, #1
 8014362:	6033      	str	r3, [r6, #0]
 8014364:	2005      	movs	r0, #5
 8014366:	e026      	b.n	80143b6 <__hexnan+0x11a>
 8014368:	3501      	adds	r5, #1
 801436a:	2d08      	cmp	r5, #8
 801436c:	f10b 0b01 	add.w	fp, fp, #1
 8014370:	dd06      	ble.n	8014380 <__hexnan+0xe4>
 8014372:	4544      	cmp	r4, r8
 8014374:	d9cf      	bls.n	8014316 <__hexnan+0x7a>
 8014376:	2300      	movs	r3, #0
 8014378:	2501      	movs	r5, #1
 801437a:	f844 3c04 	str.w	r3, [r4, #-4]
 801437e:	3c04      	subs	r4, #4
 8014380:	6822      	ldr	r2, [r4, #0]
 8014382:	f000 000f 	and.w	r0, r0, #15
 8014386:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801438a:	6020      	str	r0, [r4, #0]
 801438c:	e7c3      	b.n	8014316 <__hexnan+0x7a>
 801438e:	2508      	movs	r5, #8
 8014390:	e7c1      	b.n	8014316 <__hexnan+0x7a>
 8014392:	9b01      	ldr	r3, [sp, #4]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d0df      	beq.n	8014358 <__hexnan+0xbc>
 8014398:	f04f 32ff 	mov.w	r2, #4294967295
 801439c:	f1c3 0320 	rsb	r3, r3, #32
 80143a0:	fa22 f303 	lsr.w	r3, r2, r3
 80143a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80143a8:	401a      	ands	r2, r3
 80143aa:	f847 2c04 	str.w	r2, [r7, #-4]
 80143ae:	e7d3      	b.n	8014358 <__hexnan+0xbc>
 80143b0:	3e04      	subs	r6, #4
 80143b2:	e7d1      	b.n	8014358 <__hexnan+0xbc>
 80143b4:	2004      	movs	r0, #4
 80143b6:	b007      	add	sp, #28
 80143b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143bc <__locale_ctype_ptr_l>:
 80143bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80143c0:	4770      	bx	lr

080143c2 <__localeconv_l>:
 80143c2:	30f0      	adds	r0, #240	; 0xf0
 80143c4:	4770      	bx	lr
	...

080143c8 <_localeconv_r>:
 80143c8:	4b04      	ldr	r3, [pc, #16]	; (80143dc <_localeconv_r+0x14>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	6a18      	ldr	r0, [r3, #32]
 80143ce:	4b04      	ldr	r3, [pc, #16]	; (80143e0 <_localeconv_r+0x18>)
 80143d0:	2800      	cmp	r0, #0
 80143d2:	bf08      	it	eq
 80143d4:	4618      	moveq	r0, r3
 80143d6:	30f0      	adds	r0, #240	; 0xf0
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop
 80143dc:	20000140 	.word	0x20000140
 80143e0:	200001a4 	.word	0x200001a4

080143e4 <__swhatbuf_r>:
 80143e4:	b570      	push	{r4, r5, r6, lr}
 80143e6:	460e      	mov	r6, r1
 80143e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143ec:	b096      	sub	sp, #88	; 0x58
 80143ee:	2900      	cmp	r1, #0
 80143f0:	4614      	mov	r4, r2
 80143f2:	461d      	mov	r5, r3
 80143f4:	da07      	bge.n	8014406 <__swhatbuf_r+0x22>
 80143f6:	2300      	movs	r3, #0
 80143f8:	602b      	str	r3, [r5, #0]
 80143fa:	89b3      	ldrh	r3, [r6, #12]
 80143fc:	061a      	lsls	r2, r3, #24
 80143fe:	d410      	bmi.n	8014422 <__swhatbuf_r+0x3e>
 8014400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014404:	e00e      	b.n	8014424 <__swhatbuf_r+0x40>
 8014406:	466a      	mov	r2, sp
 8014408:	f001 f848 	bl	801549c <_fstat_r>
 801440c:	2800      	cmp	r0, #0
 801440e:	dbf2      	blt.n	80143f6 <__swhatbuf_r+0x12>
 8014410:	9a01      	ldr	r2, [sp, #4]
 8014412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014416:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801441a:	425a      	negs	r2, r3
 801441c:	415a      	adcs	r2, r3
 801441e:	602a      	str	r2, [r5, #0]
 8014420:	e7ee      	b.n	8014400 <__swhatbuf_r+0x1c>
 8014422:	2340      	movs	r3, #64	; 0x40
 8014424:	2000      	movs	r0, #0
 8014426:	6023      	str	r3, [r4, #0]
 8014428:	b016      	add	sp, #88	; 0x58
 801442a:	bd70      	pop	{r4, r5, r6, pc}

0801442c <__smakebuf_r>:
 801442c:	898b      	ldrh	r3, [r1, #12]
 801442e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014430:	079d      	lsls	r5, r3, #30
 8014432:	4606      	mov	r6, r0
 8014434:	460c      	mov	r4, r1
 8014436:	d507      	bpl.n	8014448 <__smakebuf_r+0x1c>
 8014438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801443c:	6023      	str	r3, [r4, #0]
 801443e:	6123      	str	r3, [r4, #16]
 8014440:	2301      	movs	r3, #1
 8014442:	6163      	str	r3, [r4, #20]
 8014444:	b002      	add	sp, #8
 8014446:	bd70      	pop	{r4, r5, r6, pc}
 8014448:	ab01      	add	r3, sp, #4
 801444a:	466a      	mov	r2, sp
 801444c:	f7ff ffca 	bl	80143e4 <__swhatbuf_r>
 8014450:	9900      	ldr	r1, [sp, #0]
 8014452:	4605      	mov	r5, r0
 8014454:	4630      	mov	r0, r6
 8014456:	f000 fca3 	bl	8014da0 <_malloc_r>
 801445a:	b948      	cbnz	r0, 8014470 <__smakebuf_r+0x44>
 801445c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014460:	059a      	lsls	r2, r3, #22
 8014462:	d4ef      	bmi.n	8014444 <__smakebuf_r+0x18>
 8014464:	f023 0303 	bic.w	r3, r3, #3
 8014468:	f043 0302 	orr.w	r3, r3, #2
 801446c:	81a3      	strh	r3, [r4, #12]
 801446e:	e7e3      	b.n	8014438 <__smakebuf_r+0xc>
 8014470:	4b0d      	ldr	r3, [pc, #52]	; (80144a8 <__smakebuf_r+0x7c>)
 8014472:	62b3      	str	r3, [r6, #40]	; 0x28
 8014474:	89a3      	ldrh	r3, [r4, #12]
 8014476:	6020      	str	r0, [r4, #0]
 8014478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801447c:	81a3      	strh	r3, [r4, #12]
 801447e:	9b00      	ldr	r3, [sp, #0]
 8014480:	6120      	str	r0, [r4, #16]
 8014482:	6163      	str	r3, [r4, #20]
 8014484:	9b01      	ldr	r3, [sp, #4]
 8014486:	b15b      	cbz	r3, 80144a0 <__smakebuf_r+0x74>
 8014488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801448c:	4630      	mov	r0, r6
 801448e:	f001 f817 	bl	80154c0 <_isatty_r>
 8014492:	b128      	cbz	r0, 80144a0 <__smakebuf_r+0x74>
 8014494:	89a3      	ldrh	r3, [r4, #12]
 8014496:	f023 0303 	bic.w	r3, r3, #3
 801449a:	f043 0301 	orr.w	r3, r3, #1
 801449e:	81a3      	strh	r3, [r4, #12]
 80144a0:	89a3      	ldrh	r3, [r4, #12]
 80144a2:	431d      	orrs	r5, r3
 80144a4:	81a5      	strh	r5, [r4, #12]
 80144a6:	e7cd      	b.n	8014444 <__smakebuf_r+0x18>
 80144a8:	08013c21 	.word	0x08013c21

080144ac <malloc>:
 80144ac:	4b02      	ldr	r3, [pc, #8]	; (80144b8 <malloc+0xc>)
 80144ae:	4601      	mov	r1, r0
 80144b0:	6818      	ldr	r0, [r3, #0]
 80144b2:	f000 bc75 	b.w	8014da0 <_malloc_r>
 80144b6:	bf00      	nop
 80144b8:	20000140 	.word	0x20000140

080144bc <__ascii_mbtowc>:
 80144bc:	b082      	sub	sp, #8
 80144be:	b901      	cbnz	r1, 80144c2 <__ascii_mbtowc+0x6>
 80144c0:	a901      	add	r1, sp, #4
 80144c2:	b142      	cbz	r2, 80144d6 <__ascii_mbtowc+0x1a>
 80144c4:	b14b      	cbz	r3, 80144da <__ascii_mbtowc+0x1e>
 80144c6:	7813      	ldrb	r3, [r2, #0]
 80144c8:	600b      	str	r3, [r1, #0]
 80144ca:	7812      	ldrb	r2, [r2, #0]
 80144cc:	1c10      	adds	r0, r2, #0
 80144ce:	bf18      	it	ne
 80144d0:	2001      	movne	r0, #1
 80144d2:	b002      	add	sp, #8
 80144d4:	4770      	bx	lr
 80144d6:	4610      	mov	r0, r2
 80144d8:	e7fb      	b.n	80144d2 <__ascii_mbtowc+0x16>
 80144da:	f06f 0001 	mvn.w	r0, #1
 80144de:	e7f8      	b.n	80144d2 <__ascii_mbtowc+0x16>

080144e0 <memchr>:
 80144e0:	b510      	push	{r4, lr}
 80144e2:	b2c9      	uxtb	r1, r1
 80144e4:	4402      	add	r2, r0
 80144e6:	4290      	cmp	r0, r2
 80144e8:	4603      	mov	r3, r0
 80144ea:	d101      	bne.n	80144f0 <memchr+0x10>
 80144ec:	2300      	movs	r3, #0
 80144ee:	e003      	b.n	80144f8 <memchr+0x18>
 80144f0:	781c      	ldrb	r4, [r3, #0]
 80144f2:	3001      	adds	r0, #1
 80144f4:	428c      	cmp	r4, r1
 80144f6:	d1f6      	bne.n	80144e6 <memchr+0x6>
 80144f8:	4618      	mov	r0, r3
 80144fa:	bd10      	pop	{r4, pc}

080144fc <_Balloc>:
 80144fc:	b570      	push	{r4, r5, r6, lr}
 80144fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014500:	4604      	mov	r4, r0
 8014502:	460e      	mov	r6, r1
 8014504:	b93d      	cbnz	r5, 8014516 <_Balloc+0x1a>
 8014506:	2010      	movs	r0, #16
 8014508:	f7ff ffd0 	bl	80144ac <malloc>
 801450c:	6260      	str	r0, [r4, #36]	; 0x24
 801450e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014512:	6005      	str	r5, [r0, #0]
 8014514:	60c5      	str	r5, [r0, #12]
 8014516:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014518:	68eb      	ldr	r3, [r5, #12]
 801451a:	b183      	cbz	r3, 801453e <_Balloc+0x42>
 801451c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801451e:	68db      	ldr	r3, [r3, #12]
 8014520:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014524:	b9b8      	cbnz	r0, 8014556 <_Balloc+0x5a>
 8014526:	2101      	movs	r1, #1
 8014528:	fa01 f506 	lsl.w	r5, r1, r6
 801452c:	1d6a      	adds	r2, r5, #5
 801452e:	0092      	lsls	r2, r2, #2
 8014530:	4620      	mov	r0, r4
 8014532:	f000 fbdb 	bl	8014cec <_calloc_r>
 8014536:	b160      	cbz	r0, 8014552 <_Balloc+0x56>
 8014538:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801453c:	e00e      	b.n	801455c <_Balloc+0x60>
 801453e:	2221      	movs	r2, #33	; 0x21
 8014540:	2104      	movs	r1, #4
 8014542:	4620      	mov	r0, r4
 8014544:	f000 fbd2 	bl	8014cec <_calloc_r>
 8014548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801454a:	60e8      	str	r0, [r5, #12]
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d1e4      	bne.n	801451c <_Balloc+0x20>
 8014552:	2000      	movs	r0, #0
 8014554:	bd70      	pop	{r4, r5, r6, pc}
 8014556:	6802      	ldr	r2, [r0, #0]
 8014558:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801455c:	2300      	movs	r3, #0
 801455e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014562:	e7f7      	b.n	8014554 <_Balloc+0x58>

08014564 <_Bfree>:
 8014564:	b570      	push	{r4, r5, r6, lr}
 8014566:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014568:	4606      	mov	r6, r0
 801456a:	460d      	mov	r5, r1
 801456c:	b93c      	cbnz	r4, 801457e <_Bfree+0x1a>
 801456e:	2010      	movs	r0, #16
 8014570:	f7ff ff9c 	bl	80144ac <malloc>
 8014574:	6270      	str	r0, [r6, #36]	; 0x24
 8014576:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801457a:	6004      	str	r4, [r0, #0]
 801457c:	60c4      	str	r4, [r0, #12]
 801457e:	b13d      	cbz	r5, 8014590 <_Bfree+0x2c>
 8014580:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014582:	686a      	ldr	r2, [r5, #4]
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801458a:	6029      	str	r1, [r5, #0]
 801458c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014590:	bd70      	pop	{r4, r5, r6, pc}

08014592 <__multadd>:
 8014592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014596:	461f      	mov	r7, r3
 8014598:	4606      	mov	r6, r0
 801459a:	460c      	mov	r4, r1
 801459c:	2300      	movs	r3, #0
 801459e:	690d      	ldr	r5, [r1, #16]
 80145a0:	f101 0c14 	add.w	ip, r1, #20
 80145a4:	f8dc 0000 	ldr.w	r0, [ip]
 80145a8:	3301      	adds	r3, #1
 80145aa:	b281      	uxth	r1, r0
 80145ac:	fb02 7101 	mla	r1, r2, r1, r7
 80145b0:	0c00      	lsrs	r0, r0, #16
 80145b2:	0c0f      	lsrs	r7, r1, #16
 80145b4:	fb02 7000 	mla	r0, r2, r0, r7
 80145b8:	b289      	uxth	r1, r1
 80145ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80145be:	429d      	cmp	r5, r3
 80145c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80145c4:	f84c 1b04 	str.w	r1, [ip], #4
 80145c8:	dcec      	bgt.n	80145a4 <__multadd+0x12>
 80145ca:	b1d7      	cbz	r7, 8014602 <__multadd+0x70>
 80145cc:	68a3      	ldr	r3, [r4, #8]
 80145ce:	42ab      	cmp	r3, r5
 80145d0:	dc12      	bgt.n	80145f8 <__multadd+0x66>
 80145d2:	6861      	ldr	r1, [r4, #4]
 80145d4:	4630      	mov	r0, r6
 80145d6:	3101      	adds	r1, #1
 80145d8:	f7ff ff90 	bl	80144fc <_Balloc>
 80145dc:	4680      	mov	r8, r0
 80145de:	6922      	ldr	r2, [r4, #16]
 80145e0:	f104 010c 	add.w	r1, r4, #12
 80145e4:	3202      	adds	r2, #2
 80145e6:	0092      	lsls	r2, r2, #2
 80145e8:	300c      	adds	r0, #12
 80145ea:	f7fc fd9f 	bl	801112c <memcpy>
 80145ee:	4621      	mov	r1, r4
 80145f0:	4630      	mov	r0, r6
 80145f2:	f7ff ffb7 	bl	8014564 <_Bfree>
 80145f6:	4644      	mov	r4, r8
 80145f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80145fc:	3501      	adds	r5, #1
 80145fe:	615f      	str	r7, [r3, #20]
 8014600:	6125      	str	r5, [r4, #16]
 8014602:	4620      	mov	r0, r4
 8014604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014608 <__s2b>:
 8014608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801460c:	4615      	mov	r5, r2
 801460e:	2209      	movs	r2, #9
 8014610:	461f      	mov	r7, r3
 8014612:	3308      	adds	r3, #8
 8014614:	460c      	mov	r4, r1
 8014616:	fb93 f3f2 	sdiv	r3, r3, r2
 801461a:	4606      	mov	r6, r0
 801461c:	2201      	movs	r2, #1
 801461e:	2100      	movs	r1, #0
 8014620:	429a      	cmp	r2, r3
 8014622:	db20      	blt.n	8014666 <__s2b+0x5e>
 8014624:	4630      	mov	r0, r6
 8014626:	f7ff ff69 	bl	80144fc <_Balloc>
 801462a:	9b08      	ldr	r3, [sp, #32]
 801462c:	2d09      	cmp	r5, #9
 801462e:	6143      	str	r3, [r0, #20]
 8014630:	f04f 0301 	mov.w	r3, #1
 8014634:	6103      	str	r3, [r0, #16]
 8014636:	dd19      	ble.n	801466c <__s2b+0x64>
 8014638:	f104 0809 	add.w	r8, r4, #9
 801463c:	46c1      	mov	r9, r8
 801463e:	442c      	add	r4, r5
 8014640:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014644:	4601      	mov	r1, r0
 8014646:	3b30      	subs	r3, #48	; 0x30
 8014648:	220a      	movs	r2, #10
 801464a:	4630      	mov	r0, r6
 801464c:	f7ff ffa1 	bl	8014592 <__multadd>
 8014650:	45a1      	cmp	r9, r4
 8014652:	d1f5      	bne.n	8014640 <__s2b+0x38>
 8014654:	eb08 0405 	add.w	r4, r8, r5
 8014658:	3c08      	subs	r4, #8
 801465a:	1b2d      	subs	r5, r5, r4
 801465c:	1963      	adds	r3, r4, r5
 801465e:	42bb      	cmp	r3, r7
 8014660:	db07      	blt.n	8014672 <__s2b+0x6a>
 8014662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014666:	0052      	lsls	r2, r2, #1
 8014668:	3101      	adds	r1, #1
 801466a:	e7d9      	b.n	8014620 <__s2b+0x18>
 801466c:	340a      	adds	r4, #10
 801466e:	2509      	movs	r5, #9
 8014670:	e7f3      	b.n	801465a <__s2b+0x52>
 8014672:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014676:	4601      	mov	r1, r0
 8014678:	3b30      	subs	r3, #48	; 0x30
 801467a:	220a      	movs	r2, #10
 801467c:	4630      	mov	r0, r6
 801467e:	f7ff ff88 	bl	8014592 <__multadd>
 8014682:	e7eb      	b.n	801465c <__s2b+0x54>

08014684 <__hi0bits>:
 8014684:	0c02      	lsrs	r2, r0, #16
 8014686:	0412      	lsls	r2, r2, #16
 8014688:	4603      	mov	r3, r0
 801468a:	b9b2      	cbnz	r2, 80146ba <__hi0bits+0x36>
 801468c:	0403      	lsls	r3, r0, #16
 801468e:	2010      	movs	r0, #16
 8014690:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014694:	bf04      	itt	eq
 8014696:	021b      	lsleq	r3, r3, #8
 8014698:	3008      	addeq	r0, #8
 801469a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801469e:	bf04      	itt	eq
 80146a0:	011b      	lsleq	r3, r3, #4
 80146a2:	3004      	addeq	r0, #4
 80146a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80146a8:	bf04      	itt	eq
 80146aa:	009b      	lsleq	r3, r3, #2
 80146ac:	3002      	addeq	r0, #2
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	db06      	blt.n	80146c0 <__hi0bits+0x3c>
 80146b2:	005b      	lsls	r3, r3, #1
 80146b4:	d503      	bpl.n	80146be <__hi0bits+0x3a>
 80146b6:	3001      	adds	r0, #1
 80146b8:	4770      	bx	lr
 80146ba:	2000      	movs	r0, #0
 80146bc:	e7e8      	b.n	8014690 <__hi0bits+0xc>
 80146be:	2020      	movs	r0, #32
 80146c0:	4770      	bx	lr

080146c2 <__lo0bits>:
 80146c2:	6803      	ldr	r3, [r0, #0]
 80146c4:	4601      	mov	r1, r0
 80146c6:	f013 0207 	ands.w	r2, r3, #7
 80146ca:	d00b      	beq.n	80146e4 <__lo0bits+0x22>
 80146cc:	07da      	lsls	r2, r3, #31
 80146ce:	d423      	bmi.n	8014718 <__lo0bits+0x56>
 80146d0:	0798      	lsls	r0, r3, #30
 80146d2:	bf49      	itett	mi
 80146d4:	085b      	lsrmi	r3, r3, #1
 80146d6:	089b      	lsrpl	r3, r3, #2
 80146d8:	2001      	movmi	r0, #1
 80146da:	600b      	strmi	r3, [r1, #0]
 80146dc:	bf5c      	itt	pl
 80146de:	600b      	strpl	r3, [r1, #0]
 80146e0:	2002      	movpl	r0, #2
 80146e2:	4770      	bx	lr
 80146e4:	b298      	uxth	r0, r3
 80146e6:	b9a8      	cbnz	r0, 8014714 <__lo0bits+0x52>
 80146e8:	2010      	movs	r0, #16
 80146ea:	0c1b      	lsrs	r3, r3, #16
 80146ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80146f0:	bf04      	itt	eq
 80146f2:	0a1b      	lsreq	r3, r3, #8
 80146f4:	3008      	addeq	r0, #8
 80146f6:	071a      	lsls	r2, r3, #28
 80146f8:	bf04      	itt	eq
 80146fa:	091b      	lsreq	r3, r3, #4
 80146fc:	3004      	addeq	r0, #4
 80146fe:	079a      	lsls	r2, r3, #30
 8014700:	bf04      	itt	eq
 8014702:	089b      	lsreq	r3, r3, #2
 8014704:	3002      	addeq	r0, #2
 8014706:	07da      	lsls	r2, r3, #31
 8014708:	d402      	bmi.n	8014710 <__lo0bits+0x4e>
 801470a:	085b      	lsrs	r3, r3, #1
 801470c:	d006      	beq.n	801471c <__lo0bits+0x5a>
 801470e:	3001      	adds	r0, #1
 8014710:	600b      	str	r3, [r1, #0]
 8014712:	4770      	bx	lr
 8014714:	4610      	mov	r0, r2
 8014716:	e7e9      	b.n	80146ec <__lo0bits+0x2a>
 8014718:	2000      	movs	r0, #0
 801471a:	4770      	bx	lr
 801471c:	2020      	movs	r0, #32
 801471e:	4770      	bx	lr

08014720 <__i2b>:
 8014720:	b510      	push	{r4, lr}
 8014722:	460c      	mov	r4, r1
 8014724:	2101      	movs	r1, #1
 8014726:	f7ff fee9 	bl	80144fc <_Balloc>
 801472a:	2201      	movs	r2, #1
 801472c:	6144      	str	r4, [r0, #20]
 801472e:	6102      	str	r2, [r0, #16]
 8014730:	bd10      	pop	{r4, pc}

08014732 <__multiply>:
 8014732:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014736:	4614      	mov	r4, r2
 8014738:	690a      	ldr	r2, [r1, #16]
 801473a:	6923      	ldr	r3, [r4, #16]
 801473c:	4688      	mov	r8, r1
 801473e:	429a      	cmp	r2, r3
 8014740:	bfbe      	ittt	lt
 8014742:	460b      	movlt	r3, r1
 8014744:	46a0      	movlt	r8, r4
 8014746:	461c      	movlt	r4, r3
 8014748:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801474c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014750:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014754:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014758:	eb07 0609 	add.w	r6, r7, r9
 801475c:	42b3      	cmp	r3, r6
 801475e:	bfb8      	it	lt
 8014760:	3101      	addlt	r1, #1
 8014762:	f7ff fecb 	bl	80144fc <_Balloc>
 8014766:	f100 0514 	add.w	r5, r0, #20
 801476a:	462b      	mov	r3, r5
 801476c:	2200      	movs	r2, #0
 801476e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014772:	4573      	cmp	r3, lr
 8014774:	d316      	bcc.n	80147a4 <__multiply+0x72>
 8014776:	f104 0214 	add.w	r2, r4, #20
 801477a:	f108 0114 	add.w	r1, r8, #20
 801477e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014782:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014786:	9300      	str	r3, [sp, #0]
 8014788:	9b00      	ldr	r3, [sp, #0]
 801478a:	9201      	str	r2, [sp, #4]
 801478c:	4293      	cmp	r3, r2
 801478e:	d80c      	bhi.n	80147aa <__multiply+0x78>
 8014790:	2e00      	cmp	r6, #0
 8014792:	dd03      	ble.n	801479c <__multiply+0x6a>
 8014794:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014798:	2b00      	cmp	r3, #0
 801479a:	d05d      	beq.n	8014858 <__multiply+0x126>
 801479c:	6106      	str	r6, [r0, #16]
 801479e:	b003      	add	sp, #12
 80147a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a4:	f843 2b04 	str.w	r2, [r3], #4
 80147a8:	e7e3      	b.n	8014772 <__multiply+0x40>
 80147aa:	f8b2 b000 	ldrh.w	fp, [r2]
 80147ae:	f1bb 0f00 	cmp.w	fp, #0
 80147b2:	d023      	beq.n	80147fc <__multiply+0xca>
 80147b4:	4689      	mov	r9, r1
 80147b6:	46ac      	mov	ip, r5
 80147b8:	f04f 0800 	mov.w	r8, #0
 80147bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80147c0:	f8dc a000 	ldr.w	sl, [ip]
 80147c4:	b2a3      	uxth	r3, r4
 80147c6:	fa1f fa8a 	uxth.w	sl, sl
 80147ca:	fb0b a303 	mla	r3, fp, r3, sl
 80147ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80147d2:	f8dc 4000 	ldr.w	r4, [ip]
 80147d6:	4443      	add	r3, r8
 80147d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80147dc:	fb0b 840a 	mla	r4, fp, sl, r8
 80147e0:	46e2      	mov	sl, ip
 80147e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80147ec:	454f      	cmp	r7, r9
 80147ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80147f2:	f84a 3b04 	str.w	r3, [sl], #4
 80147f6:	d82b      	bhi.n	8014850 <__multiply+0x11e>
 80147f8:	f8cc 8004 	str.w	r8, [ip, #4]
 80147fc:	9b01      	ldr	r3, [sp, #4]
 80147fe:	3204      	adds	r2, #4
 8014800:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014804:	f1ba 0f00 	cmp.w	sl, #0
 8014808:	d020      	beq.n	801484c <__multiply+0x11a>
 801480a:	4689      	mov	r9, r1
 801480c:	46a8      	mov	r8, r5
 801480e:	f04f 0b00 	mov.w	fp, #0
 8014812:	682b      	ldr	r3, [r5, #0]
 8014814:	f8b9 c000 	ldrh.w	ip, [r9]
 8014818:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801481c:	b29b      	uxth	r3, r3
 801481e:	fb0a 440c 	mla	r4, sl, ip, r4
 8014822:	46c4      	mov	ip, r8
 8014824:	445c      	add	r4, fp
 8014826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801482a:	f84c 3b04 	str.w	r3, [ip], #4
 801482e:	f859 3b04 	ldr.w	r3, [r9], #4
 8014832:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014836:	0c1b      	lsrs	r3, r3, #16
 8014838:	fb0a b303 	mla	r3, sl, r3, fp
 801483c:	454f      	cmp	r7, r9
 801483e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014842:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014846:	d805      	bhi.n	8014854 <__multiply+0x122>
 8014848:	f8c8 3004 	str.w	r3, [r8, #4]
 801484c:	3504      	adds	r5, #4
 801484e:	e79b      	b.n	8014788 <__multiply+0x56>
 8014850:	46d4      	mov	ip, sl
 8014852:	e7b3      	b.n	80147bc <__multiply+0x8a>
 8014854:	46e0      	mov	r8, ip
 8014856:	e7dd      	b.n	8014814 <__multiply+0xe2>
 8014858:	3e01      	subs	r6, #1
 801485a:	e799      	b.n	8014790 <__multiply+0x5e>

0801485c <__pow5mult>:
 801485c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014860:	4615      	mov	r5, r2
 8014862:	f012 0203 	ands.w	r2, r2, #3
 8014866:	4606      	mov	r6, r0
 8014868:	460f      	mov	r7, r1
 801486a:	d007      	beq.n	801487c <__pow5mult+0x20>
 801486c:	4c21      	ldr	r4, [pc, #132]	; (80148f4 <__pow5mult+0x98>)
 801486e:	3a01      	subs	r2, #1
 8014870:	2300      	movs	r3, #0
 8014872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014876:	f7ff fe8c 	bl	8014592 <__multadd>
 801487a:	4607      	mov	r7, r0
 801487c:	10ad      	asrs	r5, r5, #2
 801487e:	d035      	beq.n	80148ec <__pow5mult+0x90>
 8014880:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014882:	b93c      	cbnz	r4, 8014894 <__pow5mult+0x38>
 8014884:	2010      	movs	r0, #16
 8014886:	f7ff fe11 	bl	80144ac <malloc>
 801488a:	6270      	str	r0, [r6, #36]	; 0x24
 801488c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014890:	6004      	str	r4, [r0, #0]
 8014892:	60c4      	str	r4, [r0, #12]
 8014894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801489c:	b94c      	cbnz	r4, 80148b2 <__pow5mult+0x56>
 801489e:	f240 2171 	movw	r1, #625	; 0x271
 80148a2:	4630      	mov	r0, r6
 80148a4:	f7ff ff3c 	bl	8014720 <__i2b>
 80148a8:	2300      	movs	r3, #0
 80148aa:	4604      	mov	r4, r0
 80148ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80148b0:	6003      	str	r3, [r0, #0]
 80148b2:	f04f 0800 	mov.w	r8, #0
 80148b6:	07eb      	lsls	r3, r5, #31
 80148b8:	d50a      	bpl.n	80148d0 <__pow5mult+0x74>
 80148ba:	4639      	mov	r1, r7
 80148bc:	4622      	mov	r2, r4
 80148be:	4630      	mov	r0, r6
 80148c0:	f7ff ff37 	bl	8014732 <__multiply>
 80148c4:	4681      	mov	r9, r0
 80148c6:	4639      	mov	r1, r7
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7ff fe4b 	bl	8014564 <_Bfree>
 80148ce:	464f      	mov	r7, r9
 80148d0:	106d      	asrs	r5, r5, #1
 80148d2:	d00b      	beq.n	80148ec <__pow5mult+0x90>
 80148d4:	6820      	ldr	r0, [r4, #0]
 80148d6:	b938      	cbnz	r0, 80148e8 <__pow5mult+0x8c>
 80148d8:	4622      	mov	r2, r4
 80148da:	4621      	mov	r1, r4
 80148dc:	4630      	mov	r0, r6
 80148de:	f7ff ff28 	bl	8014732 <__multiply>
 80148e2:	6020      	str	r0, [r4, #0]
 80148e4:	f8c0 8000 	str.w	r8, [r0]
 80148e8:	4604      	mov	r4, r0
 80148ea:	e7e4      	b.n	80148b6 <__pow5mult+0x5a>
 80148ec:	4638      	mov	r0, r7
 80148ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148f2:	bf00      	nop
 80148f4:	08019598 	.word	0x08019598

080148f8 <__lshift>:
 80148f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148fc:	460c      	mov	r4, r1
 80148fe:	4607      	mov	r7, r0
 8014900:	4616      	mov	r6, r2
 8014902:	6923      	ldr	r3, [r4, #16]
 8014904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014908:	eb0a 0903 	add.w	r9, sl, r3
 801490c:	6849      	ldr	r1, [r1, #4]
 801490e:	68a3      	ldr	r3, [r4, #8]
 8014910:	f109 0501 	add.w	r5, r9, #1
 8014914:	42ab      	cmp	r3, r5
 8014916:	db32      	blt.n	801497e <__lshift+0x86>
 8014918:	4638      	mov	r0, r7
 801491a:	f7ff fdef 	bl	80144fc <_Balloc>
 801491e:	2300      	movs	r3, #0
 8014920:	4680      	mov	r8, r0
 8014922:	461a      	mov	r2, r3
 8014924:	f100 0114 	add.w	r1, r0, #20
 8014928:	4553      	cmp	r3, sl
 801492a:	db2b      	blt.n	8014984 <__lshift+0x8c>
 801492c:	6920      	ldr	r0, [r4, #16]
 801492e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014932:	f104 0314 	add.w	r3, r4, #20
 8014936:	f016 021f 	ands.w	r2, r6, #31
 801493a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801493e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014942:	d025      	beq.n	8014990 <__lshift+0x98>
 8014944:	2000      	movs	r0, #0
 8014946:	f1c2 0e20 	rsb	lr, r2, #32
 801494a:	468a      	mov	sl, r1
 801494c:	681e      	ldr	r6, [r3, #0]
 801494e:	4096      	lsls	r6, r2
 8014950:	4330      	orrs	r0, r6
 8014952:	f84a 0b04 	str.w	r0, [sl], #4
 8014956:	f853 0b04 	ldr.w	r0, [r3], #4
 801495a:	459c      	cmp	ip, r3
 801495c:	fa20 f00e 	lsr.w	r0, r0, lr
 8014960:	d814      	bhi.n	801498c <__lshift+0x94>
 8014962:	6048      	str	r0, [r1, #4]
 8014964:	b108      	cbz	r0, 801496a <__lshift+0x72>
 8014966:	f109 0502 	add.w	r5, r9, #2
 801496a:	3d01      	subs	r5, #1
 801496c:	4638      	mov	r0, r7
 801496e:	f8c8 5010 	str.w	r5, [r8, #16]
 8014972:	4621      	mov	r1, r4
 8014974:	f7ff fdf6 	bl	8014564 <_Bfree>
 8014978:	4640      	mov	r0, r8
 801497a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801497e:	3101      	adds	r1, #1
 8014980:	005b      	lsls	r3, r3, #1
 8014982:	e7c7      	b.n	8014914 <__lshift+0x1c>
 8014984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014988:	3301      	adds	r3, #1
 801498a:	e7cd      	b.n	8014928 <__lshift+0x30>
 801498c:	4651      	mov	r1, sl
 801498e:	e7dc      	b.n	801494a <__lshift+0x52>
 8014990:	3904      	subs	r1, #4
 8014992:	f853 2b04 	ldr.w	r2, [r3], #4
 8014996:	459c      	cmp	ip, r3
 8014998:	f841 2f04 	str.w	r2, [r1, #4]!
 801499c:	d8f9      	bhi.n	8014992 <__lshift+0x9a>
 801499e:	e7e4      	b.n	801496a <__lshift+0x72>

080149a0 <__mcmp>:
 80149a0:	6903      	ldr	r3, [r0, #16]
 80149a2:	690a      	ldr	r2, [r1, #16]
 80149a4:	b530      	push	{r4, r5, lr}
 80149a6:	1a9b      	subs	r3, r3, r2
 80149a8:	d10c      	bne.n	80149c4 <__mcmp+0x24>
 80149aa:	0092      	lsls	r2, r2, #2
 80149ac:	3014      	adds	r0, #20
 80149ae:	3114      	adds	r1, #20
 80149b0:	1884      	adds	r4, r0, r2
 80149b2:	4411      	add	r1, r2
 80149b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80149b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80149bc:	4295      	cmp	r5, r2
 80149be:	d003      	beq.n	80149c8 <__mcmp+0x28>
 80149c0:	d305      	bcc.n	80149ce <__mcmp+0x2e>
 80149c2:	2301      	movs	r3, #1
 80149c4:	4618      	mov	r0, r3
 80149c6:	bd30      	pop	{r4, r5, pc}
 80149c8:	42a0      	cmp	r0, r4
 80149ca:	d3f3      	bcc.n	80149b4 <__mcmp+0x14>
 80149cc:	e7fa      	b.n	80149c4 <__mcmp+0x24>
 80149ce:	f04f 33ff 	mov.w	r3, #4294967295
 80149d2:	e7f7      	b.n	80149c4 <__mcmp+0x24>

080149d4 <__mdiff>:
 80149d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149d8:	460d      	mov	r5, r1
 80149da:	4607      	mov	r7, r0
 80149dc:	4611      	mov	r1, r2
 80149de:	4628      	mov	r0, r5
 80149e0:	4614      	mov	r4, r2
 80149e2:	f7ff ffdd 	bl	80149a0 <__mcmp>
 80149e6:	1e06      	subs	r6, r0, #0
 80149e8:	d108      	bne.n	80149fc <__mdiff+0x28>
 80149ea:	4631      	mov	r1, r6
 80149ec:	4638      	mov	r0, r7
 80149ee:	f7ff fd85 	bl	80144fc <_Balloc>
 80149f2:	2301      	movs	r3, #1
 80149f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80149f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149fc:	bfa4      	itt	ge
 80149fe:	4623      	movge	r3, r4
 8014a00:	462c      	movge	r4, r5
 8014a02:	4638      	mov	r0, r7
 8014a04:	6861      	ldr	r1, [r4, #4]
 8014a06:	bfa6      	itte	ge
 8014a08:	461d      	movge	r5, r3
 8014a0a:	2600      	movge	r6, #0
 8014a0c:	2601      	movlt	r6, #1
 8014a0e:	f7ff fd75 	bl	80144fc <_Balloc>
 8014a12:	f04f 0e00 	mov.w	lr, #0
 8014a16:	60c6      	str	r6, [r0, #12]
 8014a18:	692b      	ldr	r3, [r5, #16]
 8014a1a:	6926      	ldr	r6, [r4, #16]
 8014a1c:	f104 0214 	add.w	r2, r4, #20
 8014a20:	f105 0914 	add.w	r9, r5, #20
 8014a24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014a28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014a2c:	f100 0114 	add.w	r1, r0, #20
 8014a30:	f852 ab04 	ldr.w	sl, [r2], #4
 8014a34:	f859 5b04 	ldr.w	r5, [r9], #4
 8014a38:	fa1f f38a 	uxth.w	r3, sl
 8014a3c:	4473      	add	r3, lr
 8014a3e:	b2ac      	uxth	r4, r5
 8014a40:	1b1b      	subs	r3, r3, r4
 8014a42:	0c2c      	lsrs	r4, r5, #16
 8014a44:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8014a48:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8014a52:	45c8      	cmp	r8, r9
 8014a54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8014a58:	4694      	mov	ip, r2
 8014a5a:	f841 4b04 	str.w	r4, [r1], #4
 8014a5e:	d8e7      	bhi.n	8014a30 <__mdiff+0x5c>
 8014a60:	45bc      	cmp	ip, r7
 8014a62:	d304      	bcc.n	8014a6e <__mdiff+0x9a>
 8014a64:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014a68:	b183      	cbz	r3, 8014a8c <__mdiff+0xb8>
 8014a6a:	6106      	str	r6, [r0, #16]
 8014a6c:	e7c4      	b.n	80149f8 <__mdiff+0x24>
 8014a6e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8014a72:	b2a2      	uxth	r2, r4
 8014a74:	4472      	add	r2, lr
 8014a76:	1413      	asrs	r3, r2, #16
 8014a78:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014a7c:	b292      	uxth	r2, r2
 8014a7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014a82:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014a86:	f841 2b04 	str.w	r2, [r1], #4
 8014a8a:	e7e9      	b.n	8014a60 <__mdiff+0x8c>
 8014a8c:	3e01      	subs	r6, #1
 8014a8e:	e7e9      	b.n	8014a64 <__mdiff+0x90>

08014a90 <__ulp>:
 8014a90:	4b10      	ldr	r3, [pc, #64]	; (8014ad4 <__ulp+0x44>)
 8014a92:	400b      	ands	r3, r1
 8014a94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	dd02      	ble.n	8014aa2 <__ulp+0x12>
 8014a9c:	2000      	movs	r0, #0
 8014a9e:	4619      	mov	r1, r3
 8014aa0:	4770      	bx	lr
 8014aa2:	425b      	negs	r3, r3
 8014aa4:	151b      	asrs	r3, r3, #20
 8014aa6:	2b13      	cmp	r3, #19
 8014aa8:	f04f 0000 	mov.w	r0, #0
 8014aac:	f04f 0100 	mov.w	r1, #0
 8014ab0:	dc04      	bgt.n	8014abc <__ulp+0x2c>
 8014ab2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014ab6:	fa42 f103 	asr.w	r1, r2, r3
 8014aba:	4770      	bx	lr
 8014abc:	2201      	movs	r2, #1
 8014abe:	3b14      	subs	r3, #20
 8014ac0:	2b1e      	cmp	r3, #30
 8014ac2:	bfce      	itee	gt
 8014ac4:	4613      	movgt	r3, r2
 8014ac6:	f1c3 031f 	rsble	r3, r3, #31
 8014aca:	fa02 f303 	lslle.w	r3, r2, r3
 8014ace:	4618      	mov	r0, r3
 8014ad0:	4770      	bx	lr
 8014ad2:	bf00      	nop
 8014ad4:	7ff00000 	.word	0x7ff00000

08014ad8 <__b2d>:
 8014ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014adc:	6907      	ldr	r7, [r0, #16]
 8014ade:	f100 0914 	add.w	r9, r0, #20
 8014ae2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8014ae6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8014aea:	f1a7 0804 	sub.w	r8, r7, #4
 8014aee:	4630      	mov	r0, r6
 8014af0:	f7ff fdc8 	bl	8014684 <__hi0bits>
 8014af4:	f1c0 0320 	rsb	r3, r0, #32
 8014af8:	280a      	cmp	r0, #10
 8014afa:	600b      	str	r3, [r1, #0]
 8014afc:	491e      	ldr	r1, [pc, #120]	; (8014b78 <__b2d+0xa0>)
 8014afe:	dc17      	bgt.n	8014b30 <__b2d+0x58>
 8014b00:	45c1      	cmp	r9, r8
 8014b02:	bf28      	it	cs
 8014b04:	2200      	movcs	r2, #0
 8014b06:	f1c0 0c0b 	rsb	ip, r0, #11
 8014b0a:	fa26 f30c 	lsr.w	r3, r6, ip
 8014b0e:	bf38      	it	cc
 8014b10:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014b14:	ea43 0501 	orr.w	r5, r3, r1
 8014b18:	f100 0315 	add.w	r3, r0, #21
 8014b1c:	fa06 f303 	lsl.w	r3, r6, r3
 8014b20:	fa22 f20c 	lsr.w	r2, r2, ip
 8014b24:	ea43 0402 	orr.w	r4, r3, r2
 8014b28:	4620      	mov	r0, r4
 8014b2a:	4629      	mov	r1, r5
 8014b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b30:	45c1      	cmp	r9, r8
 8014b32:	bf3a      	itte	cc
 8014b34:	f1a7 0808 	subcc.w	r8, r7, #8
 8014b38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014b3c:	2200      	movcs	r2, #0
 8014b3e:	f1b0 030b 	subs.w	r3, r0, #11
 8014b42:	d015      	beq.n	8014b70 <__b2d+0x98>
 8014b44:	409e      	lsls	r6, r3
 8014b46:	f1c3 0720 	rsb	r7, r3, #32
 8014b4a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8014b4e:	fa22 f107 	lsr.w	r1, r2, r7
 8014b52:	45c8      	cmp	r8, r9
 8014b54:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8014b58:	ea46 0501 	orr.w	r5, r6, r1
 8014b5c:	bf94      	ite	ls
 8014b5e:	2100      	movls	r1, #0
 8014b60:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8014b64:	fa02 f003 	lsl.w	r0, r2, r3
 8014b68:	40f9      	lsrs	r1, r7
 8014b6a:	ea40 0401 	orr.w	r4, r0, r1
 8014b6e:	e7db      	b.n	8014b28 <__b2d+0x50>
 8014b70:	ea46 0501 	orr.w	r5, r6, r1
 8014b74:	4614      	mov	r4, r2
 8014b76:	e7d7      	b.n	8014b28 <__b2d+0x50>
 8014b78:	3ff00000 	.word	0x3ff00000

08014b7c <__d2b>:
 8014b7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014b80:	461c      	mov	r4, r3
 8014b82:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8014b86:	2101      	movs	r1, #1
 8014b88:	4690      	mov	r8, r2
 8014b8a:	f7ff fcb7 	bl	80144fc <_Balloc>
 8014b8e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8014b92:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8014b96:	4607      	mov	r7, r0
 8014b98:	bb34      	cbnz	r4, 8014be8 <__d2b+0x6c>
 8014b9a:	9201      	str	r2, [sp, #4]
 8014b9c:	f1b8 0200 	subs.w	r2, r8, #0
 8014ba0:	d027      	beq.n	8014bf2 <__d2b+0x76>
 8014ba2:	a802      	add	r0, sp, #8
 8014ba4:	f840 2d08 	str.w	r2, [r0, #-8]!
 8014ba8:	f7ff fd8b 	bl	80146c2 <__lo0bits>
 8014bac:	9900      	ldr	r1, [sp, #0]
 8014bae:	b1f0      	cbz	r0, 8014bee <__d2b+0x72>
 8014bb0:	9a01      	ldr	r2, [sp, #4]
 8014bb2:	f1c0 0320 	rsb	r3, r0, #32
 8014bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8014bba:	430b      	orrs	r3, r1
 8014bbc:	40c2      	lsrs	r2, r0
 8014bbe:	617b      	str	r3, [r7, #20]
 8014bc0:	9201      	str	r2, [sp, #4]
 8014bc2:	9b01      	ldr	r3, [sp, #4]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	bf14      	ite	ne
 8014bc8:	2102      	movne	r1, #2
 8014bca:	2101      	moveq	r1, #1
 8014bcc:	61bb      	str	r3, [r7, #24]
 8014bce:	6139      	str	r1, [r7, #16]
 8014bd0:	b1c4      	cbz	r4, 8014c04 <__d2b+0x88>
 8014bd2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014bd6:	4404      	add	r4, r0
 8014bd8:	6034      	str	r4, [r6, #0]
 8014bda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014bde:	6028      	str	r0, [r5, #0]
 8014be0:	4638      	mov	r0, r7
 8014be2:	b002      	add	sp, #8
 8014be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014be8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014bec:	e7d5      	b.n	8014b9a <__d2b+0x1e>
 8014bee:	6179      	str	r1, [r7, #20]
 8014bf0:	e7e7      	b.n	8014bc2 <__d2b+0x46>
 8014bf2:	a801      	add	r0, sp, #4
 8014bf4:	f7ff fd65 	bl	80146c2 <__lo0bits>
 8014bf8:	2101      	movs	r1, #1
 8014bfa:	9b01      	ldr	r3, [sp, #4]
 8014bfc:	6139      	str	r1, [r7, #16]
 8014bfe:	617b      	str	r3, [r7, #20]
 8014c00:	3020      	adds	r0, #32
 8014c02:	e7e5      	b.n	8014bd0 <__d2b+0x54>
 8014c04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014c08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014c0c:	6030      	str	r0, [r6, #0]
 8014c0e:	6918      	ldr	r0, [r3, #16]
 8014c10:	f7ff fd38 	bl	8014684 <__hi0bits>
 8014c14:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014c18:	e7e1      	b.n	8014bde <__d2b+0x62>

08014c1a <__ratio>:
 8014c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1e:	4688      	mov	r8, r1
 8014c20:	4669      	mov	r1, sp
 8014c22:	4681      	mov	r9, r0
 8014c24:	f7ff ff58 	bl	8014ad8 <__b2d>
 8014c28:	468b      	mov	fp, r1
 8014c2a:	4606      	mov	r6, r0
 8014c2c:	460f      	mov	r7, r1
 8014c2e:	4640      	mov	r0, r8
 8014c30:	a901      	add	r1, sp, #4
 8014c32:	f7ff ff51 	bl	8014ad8 <__b2d>
 8014c36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014c3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014c3e:	460d      	mov	r5, r1
 8014c40:	eba3 0c02 	sub.w	ip, r3, r2
 8014c44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014c48:	1a9b      	subs	r3, r3, r2
 8014c4a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	bfd5      	itete	le
 8014c52:	460a      	movle	r2, r1
 8014c54:	463a      	movgt	r2, r7
 8014c56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014c5a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8014c5e:	bfd8      	it	le
 8014c60:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8014c64:	462b      	mov	r3, r5
 8014c66:	4602      	mov	r2, r0
 8014c68:	4659      	mov	r1, fp
 8014c6a:	4630      	mov	r0, r6
 8014c6c:	f7eb fd76 	bl	800075c <__aeabi_ddiv>
 8014c70:	b003      	add	sp, #12
 8014c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c76 <__copybits>:
 8014c76:	3901      	subs	r1, #1
 8014c78:	b510      	push	{r4, lr}
 8014c7a:	1149      	asrs	r1, r1, #5
 8014c7c:	6914      	ldr	r4, [r2, #16]
 8014c7e:	3101      	adds	r1, #1
 8014c80:	f102 0314 	add.w	r3, r2, #20
 8014c84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014c88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014c8c:	42a3      	cmp	r3, r4
 8014c8e:	4602      	mov	r2, r0
 8014c90:	d303      	bcc.n	8014c9a <__copybits+0x24>
 8014c92:	2300      	movs	r3, #0
 8014c94:	428a      	cmp	r2, r1
 8014c96:	d305      	bcc.n	8014ca4 <__copybits+0x2e>
 8014c98:	bd10      	pop	{r4, pc}
 8014c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c9e:	f840 2b04 	str.w	r2, [r0], #4
 8014ca2:	e7f3      	b.n	8014c8c <__copybits+0x16>
 8014ca4:	f842 3b04 	str.w	r3, [r2], #4
 8014ca8:	e7f4      	b.n	8014c94 <__copybits+0x1e>

08014caa <__any_on>:
 8014caa:	f100 0214 	add.w	r2, r0, #20
 8014cae:	6900      	ldr	r0, [r0, #16]
 8014cb0:	114b      	asrs	r3, r1, #5
 8014cb2:	4298      	cmp	r0, r3
 8014cb4:	b510      	push	{r4, lr}
 8014cb6:	db11      	blt.n	8014cdc <__any_on+0x32>
 8014cb8:	dd0a      	ble.n	8014cd0 <__any_on+0x26>
 8014cba:	f011 011f 	ands.w	r1, r1, #31
 8014cbe:	d007      	beq.n	8014cd0 <__any_on+0x26>
 8014cc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014cc4:	fa24 f001 	lsr.w	r0, r4, r1
 8014cc8:	fa00 f101 	lsl.w	r1, r0, r1
 8014ccc:	428c      	cmp	r4, r1
 8014cce:	d10b      	bne.n	8014ce8 <__any_on+0x3e>
 8014cd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	d803      	bhi.n	8014ce0 <__any_on+0x36>
 8014cd8:	2000      	movs	r0, #0
 8014cda:	bd10      	pop	{r4, pc}
 8014cdc:	4603      	mov	r3, r0
 8014cde:	e7f7      	b.n	8014cd0 <__any_on+0x26>
 8014ce0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014ce4:	2900      	cmp	r1, #0
 8014ce6:	d0f5      	beq.n	8014cd4 <__any_on+0x2a>
 8014ce8:	2001      	movs	r0, #1
 8014cea:	e7f6      	b.n	8014cda <__any_on+0x30>

08014cec <_calloc_r>:
 8014cec:	b538      	push	{r3, r4, r5, lr}
 8014cee:	fb02 f401 	mul.w	r4, r2, r1
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	f000 f854 	bl	8014da0 <_malloc_r>
 8014cf8:	4605      	mov	r5, r0
 8014cfa:	b118      	cbz	r0, 8014d04 <_calloc_r+0x18>
 8014cfc:	4622      	mov	r2, r4
 8014cfe:	2100      	movs	r1, #0
 8014d00:	f7fc fa1f 	bl	8011142 <memset>
 8014d04:	4628      	mov	r0, r5
 8014d06:	bd38      	pop	{r3, r4, r5, pc}

08014d08 <_free_r>:
 8014d08:	b538      	push	{r3, r4, r5, lr}
 8014d0a:	4605      	mov	r5, r0
 8014d0c:	2900      	cmp	r1, #0
 8014d0e:	d043      	beq.n	8014d98 <_free_r+0x90>
 8014d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d14:	1f0c      	subs	r4, r1, #4
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	bfb8      	it	lt
 8014d1a:	18e4      	addlt	r4, r4, r3
 8014d1c:	f000 fc0b 	bl	8015536 <__malloc_lock>
 8014d20:	4a1e      	ldr	r2, [pc, #120]	; (8014d9c <_free_r+0x94>)
 8014d22:	6813      	ldr	r3, [r2, #0]
 8014d24:	4610      	mov	r0, r2
 8014d26:	b933      	cbnz	r3, 8014d36 <_free_r+0x2e>
 8014d28:	6063      	str	r3, [r4, #4]
 8014d2a:	6014      	str	r4, [r2, #0]
 8014d2c:	4628      	mov	r0, r5
 8014d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d32:	f000 bc01 	b.w	8015538 <__malloc_unlock>
 8014d36:	42a3      	cmp	r3, r4
 8014d38:	d90b      	bls.n	8014d52 <_free_r+0x4a>
 8014d3a:	6821      	ldr	r1, [r4, #0]
 8014d3c:	1862      	adds	r2, r4, r1
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	bf01      	itttt	eq
 8014d42:	681a      	ldreq	r2, [r3, #0]
 8014d44:	685b      	ldreq	r3, [r3, #4]
 8014d46:	1852      	addeq	r2, r2, r1
 8014d48:	6022      	streq	r2, [r4, #0]
 8014d4a:	6063      	str	r3, [r4, #4]
 8014d4c:	6004      	str	r4, [r0, #0]
 8014d4e:	e7ed      	b.n	8014d2c <_free_r+0x24>
 8014d50:	4613      	mov	r3, r2
 8014d52:	685a      	ldr	r2, [r3, #4]
 8014d54:	b10a      	cbz	r2, 8014d5a <_free_r+0x52>
 8014d56:	42a2      	cmp	r2, r4
 8014d58:	d9fa      	bls.n	8014d50 <_free_r+0x48>
 8014d5a:	6819      	ldr	r1, [r3, #0]
 8014d5c:	1858      	adds	r0, r3, r1
 8014d5e:	42a0      	cmp	r0, r4
 8014d60:	d10b      	bne.n	8014d7a <_free_r+0x72>
 8014d62:	6820      	ldr	r0, [r4, #0]
 8014d64:	4401      	add	r1, r0
 8014d66:	1858      	adds	r0, r3, r1
 8014d68:	4282      	cmp	r2, r0
 8014d6a:	6019      	str	r1, [r3, #0]
 8014d6c:	d1de      	bne.n	8014d2c <_free_r+0x24>
 8014d6e:	6810      	ldr	r0, [r2, #0]
 8014d70:	6852      	ldr	r2, [r2, #4]
 8014d72:	4401      	add	r1, r0
 8014d74:	6019      	str	r1, [r3, #0]
 8014d76:	605a      	str	r2, [r3, #4]
 8014d78:	e7d8      	b.n	8014d2c <_free_r+0x24>
 8014d7a:	d902      	bls.n	8014d82 <_free_r+0x7a>
 8014d7c:	230c      	movs	r3, #12
 8014d7e:	602b      	str	r3, [r5, #0]
 8014d80:	e7d4      	b.n	8014d2c <_free_r+0x24>
 8014d82:	6820      	ldr	r0, [r4, #0]
 8014d84:	1821      	adds	r1, r4, r0
 8014d86:	428a      	cmp	r2, r1
 8014d88:	bf01      	itttt	eq
 8014d8a:	6811      	ldreq	r1, [r2, #0]
 8014d8c:	6852      	ldreq	r2, [r2, #4]
 8014d8e:	1809      	addeq	r1, r1, r0
 8014d90:	6021      	streq	r1, [r4, #0]
 8014d92:	6062      	str	r2, [r4, #4]
 8014d94:	605c      	str	r4, [r3, #4]
 8014d96:	e7c9      	b.n	8014d2c <_free_r+0x24>
 8014d98:	bd38      	pop	{r3, r4, r5, pc}
 8014d9a:	bf00      	nop
 8014d9c:	200039c4 	.word	0x200039c4

08014da0 <_malloc_r>:
 8014da0:	b570      	push	{r4, r5, r6, lr}
 8014da2:	1ccd      	adds	r5, r1, #3
 8014da4:	f025 0503 	bic.w	r5, r5, #3
 8014da8:	3508      	adds	r5, #8
 8014daa:	2d0c      	cmp	r5, #12
 8014dac:	bf38      	it	cc
 8014dae:	250c      	movcc	r5, #12
 8014db0:	2d00      	cmp	r5, #0
 8014db2:	4606      	mov	r6, r0
 8014db4:	db01      	blt.n	8014dba <_malloc_r+0x1a>
 8014db6:	42a9      	cmp	r1, r5
 8014db8:	d903      	bls.n	8014dc2 <_malloc_r+0x22>
 8014dba:	230c      	movs	r3, #12
 8014dbc:	6033      	str	r3, [r6, #0]
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	bd70      	pop	{r4, r5, r6, pc}
 8014dc2:	f000 fbb8 	bl	8015536 <__malloc_lock>
 8014dc6:	4a21      	ldr	r2, [pc, #132]	; (8014e4c <_malloc_r+0xac>)
 8014dc8:	6814      	ldr	r4, [r2, #0]
 8014dca:	4621      	mov	r1, r4
 8014dcc:	b991      	cbnz	r1, 8014df4 <_malloc_r+0x54>
 8014dce:	4c20      	ldr	r4, [pc, #128]	; (8014e50 <_malloc_r+0xb0>)
 8014dd0:	6823      	ldr	r3, [r4, #0]
 8014dd2:	b91b      	cbnz	r3, 8014ddc <_malloc_r+0x3c>
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	f000 facd 	bl	8015374 <_sbrk_r>
 8014dda:	6020      	str	r0, [r4, #0]
 8014ddc:	4629      	mov	r1, r5
 8014dde:	4630      	mov	r0, r6
 8014de0:	f000 fac8 	bl	8015374 <_sbrk_r>
 8014de4:	1c43      	adds	r3, r0, #1
 8014de6:	d124      	bne.n	8014e32 <_malloc_r+0x92>
 8014de8:	230c      	movs	r3, #12
 8014dea:	4630      	mov	r0, r6
 8014dec:	6033      	str	r3, [r6, #0]
 8014dee:	f000 fba3 	bl	8015538 <__malloc_unlock>
 8014df2:	e7e4      	b.n	8014dbe <_malloc_r+0x1e>
 8014df4:	680b      	ldr	r3, [r1, #0]
 8014df6:	1b5b      	subs	r3, r3, r5
 8014df8:	d418      	bmi.n	8014e2c <_malloc_r+0x8c>
 8014dfa:	2b0b      	cmp	r3, #11
 8014dfc:	d90f      	bls.n	8014e1e <_malloc_r+0x7e>
 8014dfe:	600b      	str	r3, [r1, #0]
 8014e00:	18cc      	adds	r4, r1, r3
 8014e02:	50cd      	str	r5, [r1, r3]
 8014e04:	4630      	mov	r0, r6
 8014e06:	f000 fb97 	bl	8015538 <__malloc_unlock>
 8014e0a:	f104 000b 	add.w	r0, r4, #11
 8014e0e:	1d23      	adds	r3, r4, #4
 8014e10:	f020 0007 	bic.w	r0, r0, #7
 8014e14:	1ac3      	subs	r3, r0, r3
 8014e16:	d0d3      	beq.n	8014dc0 <_malloc_r+0x20>
 8014e18:	425a      	negs	r2, r3
 8014e1a:	50e2      	str	r2, [r4, r3]
 8014e1c:	e7d0      	b.n	8014dc0 <_malloc_r+0x20>
 8014e1e:	684b      	ldr	r3, [r1, #4]
 8014e20:	428c      	cmp	r4, r1
 8014e22:	bf16      	itet	ne
 8014e24:	6063      	strne	r3, [r4, #4]
 8014e26:	6013      	streq	r3, [r2, #0]
 8014e28:	460c      	movne	r4, r1
 8014e2a:	e7eb      	b.n	8014e04 <_malloc_r+0x64>
 8014e2c:	460c      	mov	r4, r1
 8014e2e:	6849      	ldr	r1, [r1, #4]
 8014e30:	e7cc      	b.n	8014dcc <_malloc_r+0x2c>
 8014e32:	1cc4      	adds	r4, r0, #3
 8014e34:	f024 0403 	bic.w	r4, r4, #3
 8014e38:	42a0      	cmp	r0, r4
 8014e3a:	d005      	beq.n	8014e48 <_malloc_r+0xa8>
 8014e3c:	1a21      	subs	r1, r4, r0
 8014e3e:	4630      	mov	r0, r6
 8014e40:	f000 fa98 	bl	8015374 <_sbrk_r>
 8014e44:	3001      	adds	r0, #1
 8014e46:	d0cf      	beq.n	8014de8 <_malloc_r+0x48>
 8014e48:	6025      	str	r5, [r4, #0]
 8014e4a:	e7db      	b.n	8014e04 <_malloc_r+0x64>
 8014e4c:	200039c4 	.word	0x200039c4
 8014e50:	200039c8 	.word	0x200039c8

08014e54 <__ssputs_r>:
 8014e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e58:	688e      	ldr	r6, [r1, #8]
 8014e5a:	4682      	mov	sl, r0
 8014e5c:	429e      	cmp	r6, r3
 8014e5e:	460c      	mov	r4, r1
 8014e60:	4690      	mov	r8, r2
 8014e62:	4699      	mov	r9, r3
 8014e64:	d837      	bhi.n	8014ed6 <__ssputs_r+0x82>
 8014e66:	898a      	ldrh	r2, [r1, #12]
 8014e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014e6c:	d031      	beq.n	8014ed2 <__ssputs_r+0x7e>
 8014e6e:	2302      	movs	r3, #2
 8014e70:	6825      	ldr	r5, [r4, #0]
 8014e72:	6909      	ldr	r1, [r1, #16]
 8014e74:	1a6f      	subs	r7, r5, r1
 8014e76:	6965      	ldr	r5, [r4, #20]
 8014e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8014e80:	f109 0301 	add.w	r3, r9, #1
 8014e84:	443b      	add	r3, r7
 8014e86:	429d      	cmp	r5, r3
 8014e88:	bf38      	it	cc
 8014e8a:	461d      	movcc	r5, r3
 8014e8c:	0553      	lsls	r3, r2, #21
 8014e8e:	d530      	bpl.n	8014ef2 <__ssputs_r+0x9e>
 8014e90:	4629      	mov	r1, r5
 8014e92:	f7ff ff85 	bl	8014da0 <_malloc_r>
 8014e96:	4606      	mov	r6, r0
 8014e98:	b950      	cbnz	r0, 8014eb0 <__ssputs_r+0x5c>
 8014e9a:	230c      	movs	r3, #12
 8014e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014ea0:	f8ca 3000 	str.w	r3, [sl]
 8014ea4:	89a3      	ldrh	r3, [r4, #12]
 8014ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014eaa:	81a3      	strh	r3, [r4, #12]
 8014eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eb0:	463a      	mov	r2, r7
 8014eb2:	6921      	ldr	r1, [r4, #16]
 8014eb4:	f7fc f93a 	bl	801112c <memcpy>
 8014eb8:	89a3      	ldrh	r3, [r4, #12]
 8014eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ec2:	81a3      	strh	r3, [r4, #12]
 8014ec4:	6126      	str	r6, [r4, #16]
 8014ec6:	443e      	add	r6, r7
 8014ec8:	6026      	str	r6, [r4, #0]
 8014eca:	464e      	mov	r6, r9
 8014ecc:	6165      	str	r5, [r4, #20]
 8014ece:	1bed      	subs	r5, r5, r7
 8014ed0:	60a5      	str	r5, [r4, #8]
 8014ed2:	454e      	cmp	r6, r9
 8014ed4:	d900      	bls.n	8014ed8 <__ssputs_r+0x84>
 8014ed6:	464e      	mov	r6, r9
 8014ed8:	4632      	mov	r2, r6
 8014eda:	4641      	mov	r1, r8
 8014edc:	6820      	ldr	r0, [r4, #0]
 8014ede:	f000 fb11 	bl	8015504 <memmove>
 8014ee2:	68a3      	ldr	r3, [r4, #8]
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	1b9b      	subs	r3, r3, r6
 8014ee8:	60a3      	str	r3, [r4, #8]
 8014eea:	6823      	ldr	r3, [r4, #0]
 8014eec:	441e      	add	r6, r3
 8014eee:	6026      	str	r6, [r4, #0]
 8014ef0:	e7dc      	b.n	8014eac <__ssputs_r+0x58>
 8014ef2:	462a      	mov	r2, r5
 8014ef4:	f000 fb21 	bl	801553a <_realloc_r>
 8014ef8:	4606      	mov	r6, r0
 8014efa:	2800      	cmp	r0, #0
 8014efc:	d1e2      	bne.n	8014ec4 <__ssputs_r+0x70>
 8014efe:	6921      	ldr	r1, [r4, #16]
 8014f00:	4650      	mov	r0, sl
 8014f02:	f7ff ff01 	bl	8014d08 <_free_r>
 8014f06:	e7c8      	b.n	8014e9a <__ssputs_r+0x46>

08014f08 <_svfiprintf_r>:
 8014f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f0c:	461d      	mov	r5, r3
 8014f0e:	898b      	ldrh	r3, [r1, #12]
 8014f10:	b09d      	sub	sp, #116	; 0x74
 8014f12:	061f      	lsls	r7, r3, #24
 8014f14:	4680      	mov	r8, r0
 8014f16:	460c      	mov	r4, r1
 8014f18:	4616      	mov	r6, r2
 8014f1a:	d50f      	bpl.n	8014f3c <_svfiprintf_r+0x34>
 8014f1c:	690b      	ldr	r3, [r1, #16]
 8014f1e:	b96b      	cbnz	r3, 8014f3c <_svfiprintf_r+0x34>
 8014f20:	2140      	movs	r1, #64	; 0x40
 8014f22:	f7ff ff3d 	bl	8014da0 <_malloc_r>
 8014f26:	6020      	str	r0, [r4, #0]
 8014f28:	6120      	str	r0, [r4, #16]
 8014f2a:	b928      	cbnz	r0, 8014f38 <_svfiprintf_r+0x30>
 8014f2c:	230c      	movs	r3, #12
 8014f2e:	f8c8 3000 	str.w	r3, [r8]
 8014f32:	f04f 30ff 	mov.w	r0, #4294967295
 8014f36:	e0c8      	b.n	80150ca <_svfiprintf_r+0x1c2>
 8014f38:	2340      	movs	r3, #64	; 0x40
 8014f3a:	6163      	str	r3, [r4, #20]
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f40:	2320      	movs	r3, #32
 8014f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f46:	2330      	movs	r3, #48	; 0x30
 8014f48:	f04f 0b01 	mov.w	fp, #1
 8014f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f50:	9503      	str	r5, [sp, #12]
 8014f52:	4637      	mov	r7, r6
 8014f54:	463d      	mov	r5, r7
 8014f56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014f5a:	b10b      	cbz	r3, 8014f60 <_svfiprintf_r+0x58>
 8014f5c:	2b25      	cmp	r3, #37	; 0x25
 8014f5e:	d13e      	bne.n	8014fde <_svfiprintf_r+0xd6>
 8014f60:	ebb7 0a06 	subs.w	sl, r7, r6
 8014f64:	d00b      	beq.n	8014f7e <_svfiprintf_r+0x76>
 8014f66:	4653      	mov	r3, sl
 8014f68:	4632      	mov	r2, r6
 8014f6a:	4621      	mov	r1, r4
 8014f6c:	4640      	mov	r0, r8
 8014f6e:	f7ff ff71 	bl	8014e54 <__ssputs_r>
 8014f72:	3001      	adds	r0, #1
 8014f74:	f000 80a4 	beq.w	80150c0 <_svfiprintf_r+0x1b8>
 8014f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f7a:	4453      	add	r3, sl
 8014f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8014f7e:	783b      	ldrb	r3, [r7, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	f000 809d 	beq.w	80150c0 <_svfiprintf_r+0x1b8>
 8014f86:	2300      	movs	r3, #0
 8014f88:	f04f 32ff 	mov.w	r2, #4294967295
 8014f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f90:	9304      	str	r3, [sp, #16]
 8014f92:	9307      	str	r3, [sp, #28]
 8014f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f98:	931a      	str	r3, [sp, #104]	; 0x68
 8014f9a:	462f      	mov	r7, r5
 8014f9c:	2205      	movs	r2, #5
 8014f9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014fa2:	4850      	ldr	r0, [pc, #320]	; (80150e4 <_svfiprintf_r+0x1dc>)
 8014fa4:	f7ff fa9c 	bl	80144e0 <memchr>
 8014fa8:	9b04      	ldr	r3, [sp, #16]
 8014faa:	b9d0      	cbnz	r0, 8014fe2 <_svfiprintf_r+0xda>
 8014fac:	06d9      	lsls	r1, r3, #27
 8014fae:	bf44      	itt	mi
 8014fb0:	2220      	movmi	r2, #32
 8014fb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014fb6:	071a      	lsls	r2, r3, #28
 8014fb8:	bf44      	itt	mi
 8014fba:	222b      	movmi	r2, #43	; 0x2b
 8014fbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014fc0:	782a      	ldrb	r2, [r5, #0]
 8014fc2:	2a2a      	cmp	r2, #42	; 0x2a
 8014fc4:	d015      	beq.n	8014ff2 <_svfiprintf_r+0xea>
 8014fc6:	462f      	mov	r7, r5
 8014fc8:	2000      	movs	r0, #0
 8014fca:	250a      	movs	r5, #10
 8014fcc:	9a07      	ldr	r2, [sp, #28]
 8014fce:	4639      	mov	r1, r7
 8014fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fd4:	3b30      	subs	r3, #48	; 0x30
 8014fd6:	2b09      	cmp	r3, #9
 8014fd8:	d94d      	bls.n	8015076 <_svfiprintf_r+0x16e>
 8014fda:	b1b8      	cbz	r0, 801500c <_svfiprintf_r+0x104>
 8014fdc:	e00f      	b.n	8014ffe <_svfiprintf_r+0xf6>
 8014fde:	462f      	mov	r7, r5
 8014fe0:	e7b8      	b.n	8014f54 <_svfiprintf_r+0x4c>
 8014fe2:	4a40      	ldr	r2, [pc, #256]	; (80150e4 <_svfiprintf_r+0x1dc>)
 8014fe4:	463d      	mov	r5, r7
 8014fe6:	1a80      	subs	r0, r0, r2
 8014fe8:	fa0b f000 	lsl.w	r0, fp, r0
 8014fec:	4318      	orrs	r0, r3
 8014fee:	9004      	str	r0, [sp, #16]
 8014ff0:	e7d3      	b.n	8014f9a <_svfiprintf_r+0x92>
 8014ff2:	9a03      	ldr	r2, [sp, #12]
 8014ff4:	1d11      	adds	r1, r2, #4
 8014ff6:	6812      	ldr	r2, [r2, #0]
 8014ff8:	9103      	str	r1, [sp, #12]
 8014ffa:	2a00      	cmp	r2, #0
 8014ffc:	db01      	blt.n	8015002 <_svfiprintf_r+0xfa>
 8014ffe:	9207      	str	r2, [sp, #28]
 8015000:	e004      	b.n	801500c <_svfiprintf_r+0x104>
 8015002:	4252      	negs	r2, r2
 8015004:	f043 0302 	orr.w	r3, r3, #2
 8015008:	9207      	str	r2, [sp, #28]
 801500a:	9304      	str	r3, [sp, #16]
 801500c:	783b      	ldrb	r3, [r7, #0]
 801500e:	2b2e      	cmp	r3, #46	; 0x2e
 8015010:	d10c      	bne.n	801502c <_svfiprintf_r+0x124>
 8015012:	787b      	ldrb	r3, [r7, #1]
 8015014:	2b2a      	cmp	r3, #42	; 0x2a
 8015016:	d133      	bne.n	8015080 <_svfiprintf_r+0x178>
 8015018:	9b03      	ldr	r3, [sp, #12]
 801501a:	3702      	adds	r7, #2
 801501c:	1d1a      	adds	r2, r3, #4
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	9203      	str	r2, [sp, #12]
 8015022:	2b00      	cmp	r3, #0
 8015024:	bfb8      	it	lt
 8015026:	f04f 33ff 	movlt.w	r3, #4294967295
 801502a:	9305      	str	r3, [sp, #20]
 801502c:	4d2e      	ldr	r5, [pc, #184]	; (80150e8 <_svfiprintf_r+0x1e0>)
 801502e:	2203      	movs	r2, #3
 8015030:	7839      	ldrb	r1, [r7, #0]
 8015032:	4628      	mov	r0, r5
 8015034:	f7ff fa54 	bl	80144e0 <memchr>
 8015038:	b138      	cbz	r0, 801504a <_svfiprintf_r+0x142>
 801503a:	2340      	movs	r3, #64	; 0x40
 801503c:	1b40      	subs	r0, r0, r5
 801503e:	fa03 f000 	lsl.w	r0, r3, r0
 8015042:	9b04      	ldr	r3, [sp, #16]
 8015044:	3701      	adds	r7, #1
 8015046:	4303      	orrs	r3, r0
 8015048:	9304      	str	r3, [sp, #16]
 801504a:	7839      	ldrb	r1, [r7, #0]
 801504c:	2206      	movs	r2, #6
 801504e:	4827      	ldr	r0, [pc, #156]	; (80150ec <_svfiprintf_r+0x1e4>)
 8015050:	1c7e      	adds	r6, r7, #1
 8015052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015056:	f7ff fa43 	bl	80144e0 <memchr>
 801505a:	2800      	cmp	r0, #0
 801505c:	d038      	beq.n	80150d0 <_svfiprintf_r+0x1c8>
 801505e:	4b24      	ldr	r3, [pc, #144]	; (80150f0 <_svfiprintf_r+0x1e8>)
 8015060:	bb13      	cbnz	r3, 80150a8 <_svfiprintf_r+0x1a0>
 8015062:	9b03      	ldr	r3, [sp, #12]
 8015064:	3307      	adds	r3, #7
 8015066:	f023 0307 	bic.w	r3, r3, #7
 801506a:	3308      	adds	r3, #8
 801506c:	9303      	str	r3, [sp, #12]
 801506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015070:	444b      	add	r3, r9
 8015072:	9309      	str	r3, [sp, #36]	; 0x24
 8015074:	e76d      	b.n	8014f52 <_svfiprintf_r+0x4a>
 8015076:	fb05 3202 	mla	r2, r5, r2, r3
 801507a:	2001      	movs	r0, #1
 801507c:	460f      	mov	r7, r1
 801507e:	e7a6      	b.n	8014fce <_svfiprintf_r+0xc6>
 8015080:	2300      	movs	r3, #0
 8015082:	250a      	movs	r5, #10
 8015084:	4619      	mov	r1, r3
 8015086:	3701      	adds	r7, #1
 8015088:	9305      	str	r3, [sp, #20]
 801508a:	4638      	mov	r0, r7
 801508c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015090:	3a30      	subs	r2, #48	; 0x30
 8015092:	2a09      	cmp	r2, #9
 8015094:	d903      	bls.n	801509e <_svfiprintf_r+0x196>
 8015096:	2b00      	cmp	r3, #0
 8015098:	d0c8      	beq.n	801502c <_svfiprintf_r+0x124>
 801509a:	9105      	str	r1, [sp, #20]
 801509c:	e7c6      	b.n	801502c <_svfiprintf_r+0x124>
 801509e:	fb05 2101 	mla	r1, r5, r1, r2
 80150a2:	2301      	movs	r3, #1
 80150a4:	4607      	mov	r7, r0
 80150a6:	e7f0      	b.n	801508a <_svfiprintf_r+0x182>
 80150a8:	ab03      	add	r3, sp, #12
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	4622      	mov	r2, r4
 80150ae:	4b11      	ldr	r3, [pc, #68]	; (80150f4 <_svfiprintf_r+0x1ec>)
 80150b0:	a904      	add	r1, sp, #16
 80150b2:	4640      	mov	r0, r8
 80150b4:	f7fc f8de 	bl	8011274 <_printf_float>
 80150b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80150bc:	4681      	mov	r9, r0
 80150be:	d1d6      	bne.n	801506e <_svfiprintf_r+0x166>
 80150c0:	89a3      	ldrh	r3, [r4, #12]
 80150c2:	065b      	lsls	r3, r3, #25
 80150c4:	f53f af35 	bmi.w	8014f32 <_svfiprintf_r+0x2a>
 80150c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150ca:	b01d      	add	sp, #116	; 0x74
 80150cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d0:	ab03      	add	r3, sp, #12
 80150d2:	9300      	str	r3, [sp, #0]
 80150d4:	4622      	mov	r2, r4
 80150d6:	4b07      	ldr	r3, [pc, #28]	; (80150f4 <_svfiprintf_r+0x1ec>)
 80150d8:	a904      	add	r1, sp, #16
 80150da:	4640      	mov	r0, r8
 80150dc:	f7fc fb76 	bl	80117cc <_printf_i>
 80150e0:	e7ea      	b.n	80150b8 <_svfiprintf_r+0x1b0>
 80150e2:	bf00      	nop
 80150e4:	080195a4 	.word	0x080195a4
 80150e8:	080195aa 	.word	0x080195aa
 80150ec:	080195ae 	.word	0x080195ae
 80150f0:	08011275 	.word	0x08011275
 80150f4:	08014e55 	.word	0x08014e55

080150f8 <__sfputc_r>:
 80150f8:	6893      	ldr	r3, [r2, #8]
 80150fa:	b410      	push	{r4}
 80150fc:	3b01      	subs	r3, #1
 80150fe:	2b00      	cmp	r3, #0
 8015100:	6093      	str	r3, [r2, #8]
 8015102:	da07      	bge.n	8015114 <__sfputc_r+0x1c>
 8015104:	6994      	ldr	r4, [r2, #24]
 8015106:	42a3      	cmp	r3, r4
 8015108:	db01      	blt.n	801510e <__sfputc_r+0x16>
 801510a:	290a      	cmp	r1, #10
 801510c:	d102      	bne.n	8015114 <__sfputc_r+0x1c>
 801510e:	bc10      	pop	{r4}
 8015110:	f7fd bdb0 	b.w	8012c74 <__swbuf_r>
 8015114:	6813      	ldr	r3, [r2, #0]
 8015116:	1c58      	adds	r0, r3, #1
 8015118:	6010      	str	r0, [r2, #0]
 801511a:	7019      	strb	r1, [r3, #0]
 801511c:	4608      	mov	r0, r1
 801511e:	bc10      	pop	{r4}
 8015120:	4770      	bx	lr

08015122 <__sfputs_r>:
 8015122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015124:	4606      	mov	r6, r0
 8015126:	460f      	mov	r7, r1
 8015128:	4614      	mov	r4, r2
 801512a:	18d5      	adds	r5, r2, r3
 801512c:	42ac      	cmp	r4, r5
 801512e:	d101      	bne.n	8015134 <__sfputs_r+0x12>
 8015130:	2000      	movs	r0, #0
 8015132:	e007      	b.n	8015144 <__sfputs_r+0x22>
 8015134:	463a      	mov	r2, r7
 8015136:	f814 1b01 	ldrb.w	r1, [r4], #1
 801513a:	4630      	mov	r0, r6
 801513c:	f7ff ffdc 	bl	80150f8 <__sfputc_r>
 8015140:	1c43      	adds	r3, r0, #1
 8015142:	d1f3      	bne.n	801512c <__sfputs_r+0xa>
 8015144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015148 <_vfiprintf_r>:
 8015148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514c:	460c      	mov	r4, r1
 801514e:	b09d      	sub	sp, #116	; 0x74
 8015150:	4617      	mov	r7, r2
 8015152:	461d      	mov	r5, r3
 8015154:	4606      	mov	r6, r0
 8015156:	b118      	cbz	r0, 8015160 <_vfiprintf_r+0x18>
 8015158:	6983      	ldr	r3, [r0, #24]
 801515a:	b90b      	cbnz	r3, 8015160 <_vfiprintf_r+0x18>
 801515c:	f7fe fd7c 	bl	8013c58 <__sinit>
 8015160:	4b7c      	ldr	r3, [pc, #496]	; (8015354 <_vfiprintf_r+0x20c>)
 8015162:	429c      	cmp	r4, r3
 8015164:	d158      	bne.n	8015218 <_vfiprintf_r+0xd0>
 8015166:	6874      	ldr	r4, [r6, #4]
 8015168:	89a3      	ldrh	r3, [r4, #12]
 801516a:	0718      	lsls	r0, r3, #28
 801516c:	d55e      	bpl.n	801522c <_vfiprintf_r+0xe4>
 801516e:	6923      	ldr	r3, [r4, #16]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d05b      	beq.n	801522c <_vfiprintf_r+0xe4>
 8015174:	2300      	movs	r3, #0
 8015176:	9309      	str	r3, [sp, #36]	; 0x24
 8015178:	2320      	movs	r3, #32
 801517a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801517e:	2330      	movs	r3, #48	; 0x30
 8015180:	f04f 0b01 	mov.w	fp, #1
 8015184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015188:	9503      	str	r5, [sp, #12]
 801518a:	46b8      	mov	r8, r7
 801518c:	4645      	mov	r5, r8
 801518e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015192:	b10b      	cbz	r3, 8015198 <_vfiprintf_r+0x50>
 8015194:	2b25      	cmp	r3, #37	; 0x25
 8015196:	d154      	bne.n	8015242 <_vfiprintf_r+0xfa>
 8015198:	ebb8 0a07 	subs.w	sl, r8, r7
 801519c:	d00b      	beq.n	80151b6 <_vfiprintf_r+0x6e>
 801519e:	4653      	mov	r3, sl
 80151a0:	463a      	mov	r2, r7
 80151a2:	4621      	mov	r1, r4
 80151a4:	4630      	mov	r0, r6
 80151a6:	f7ff ffbc 	bl	8015122 <__sfputs_r>
 80151aa:	3001      	adds	r0, #1
 80151ac:	f000 80c2 	beq.w	8015334 <_vfiprintf_r+0x1ec>
 80151b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151b2:	4453      	add	r3, sl
 80151b4:	9309      	str	r3, [sp, #36]	; 0x24
 80151b6:	f898 3000 	ldrb.w	r3, [r8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	f000 80ba 	beq.w	8015334 <_vfiprintf_r+0x1ec>
 80151c0:	2300      	movs	r3, #0
 80151c2:	f04f 32ff 	mov.w	r2, #4294967295
 80151c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151ca:	9304      	str	r3, [sp, #16]
 80151cc:	9307      	str	r3, [sp, #28]
 80151ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151d2:	931a      	str	r3, [sp, #104]	; 0x68
 80151d4:	46a8      	mov	r8, r5
 80151d6:	2205      	movs	r2, #5
 80151d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80151dc:	485e      	ldr	r0, [pc, #376]	; (8015358 <_vfiprintf_r+0x210>)
 80151de:	f7ff f97f 	bl	80144e0 <memchr>
 80151e2:	9b04      	ldr	r3, [sp, #16]
 80151e4:	bb78      	cbnz	r0, 8015246 <_vfiprintf_r+0xfe>
 80151e6:	06d9      	lsls	r1, r3, #27
 80151e8:	bf44      	itt	mi
 80151ea:	2220      	movmi	r2, #32
 80151ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80151f0:	071a      	lsls	r2, r3, #28
 80151f2:	bf44      	itt	mi
 80151f4:	222b      	movmi	r2, #43	; 0x2b
 80151f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80151fa:	782a      	ldrb	r2, [r5, #0]
 80151fc:	2a2a      	cmp	r2, #42	; 0x2a
 80151fe:	d02a      	beq.n	8015256 <_vfiprintf_r+0x10e>
 8015200:	46a8      	mov	r8, r5
 8015202:	2000      	movs	r0, #0
 8015204:	250a      	movs	r5, #10
 8015206:	9a07      	ldr	r2, [sp, #28]
 8015208:	4641      	mov	r1, r8
 801520a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801520e:	3b30      	subs	r3, #48	; 0x30
 8015210:	2b09      	cmp	r3, #9
 8015212:	d969      	bls.n	80152e8 <_vfiprintf_r+0x1a0>
 8015214:	b360      	cbz	r0, 8015270 <_vfiprintf_r+0x128>
 8015216:	e024      	b.n	8015262 <_vfiprintf_r+0x11a>
 8015218:	4b50      	ldr	r3, [pc, #320]	; (801535c <_vfiprintf_r+0x214>)
 801521a:	429c      	cmp	r4, r3
 801521c:	d101      	bne.n	8015222 <_vfiprintf_r+0xda>
 801521e:	68b4      	ldr	r4, [r6, #8]
 8015220:	e7a2      	b.n	8015168 <_vfiprintf_r+0x20>
 8015222:	4b4f      	ldr	r3, [pc, #316]	; (8015360 <_vfiprintf_r+0x218>)
 8015224:	429c      	cmp	r4, r3
 8015226:	bf08      	it	eq
 8015228:	68f4      	ldreq	r4, [r6, #12]
 801522a:	e79d      	b.n	8015168 <_vfiprintf_r+0x20>
 801522c:	4621      	mov	r1, r4
 801522e:	4630      	mov	r0, r6
 8015230:	f7fd fd72 	bl	8012d18 <__swsetup_r>
 8015234:	2800      	cmp	r0, #0
 8015236:	d09d      	beq.n	8015174 <_vfiprintf_r+0x2c>
 8015238:	f04f 30ff 	mov.w	r0, #4294967295
 801523c:	b01d      	add	sp, #116	; 0x74
 801523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015242:	46a8      	mov	r8, r5
 8015244:	e7a2      	b.n	801518c <_vfiprintf_r+0x44>
 8015246:	4a44      	ldr	r2, [pc, #272]	; (8015358 <_vfiprintf_r+0x210>)
 8015248:	4645      	mov	r5, r8
 801524a:	1a80      	subs	r0, r0, r2
 801524c:	fa0b f000 	lsl.w	r0, fp, r0
 8015250:	4318      	orrs	r0, r3
 8015252:	9004      	str	r0, [sp, #16]
 8015254:	e7be      	b.n	80151d4 <_vfiprintf_r+0x8c>
 8015256:	9a03      	ldr	r2, [sp, #12]
 8015258:	1d11      	adds	r1, r2, #4
 801525a:	6812      	ldr	r2, [r2, #0]
 801525c:	9103      	str	r1, [sp, #12]
 801525e:	2a00      	cmp	r2, #0
 8015260:	db01      	blt.n	8015266 <_vfiprintf_r+0x11e>
 8015262:	9207      	str	r2, [sp, #28]
 8015264:	e004      	b.n	8015270 <_vfiprintf_r+0x128>
 8015266:	4252      	negs	r2, r2
 8015268:	f043 0302 	orr.w	r3, r3, #2
 801526c:	9207      	str	r2, [sp, #28]
 801526e:	9304      	str	r3, [sp, #16]
 8015270:	f898 3000 	ldrb.w	r3, [r8]
 8015274:	2b2e      	cmp	r3, #46	; 0x2e
 8015276:	d10e      	bne.n	8015296 <_vfiprintf_r+0x14e>
 8015278:	f898 3001 	ldrb.w	r3, [r8, #1]
 801527c:	2b2a      	cmp	r3, #42	; 0x2a
 801527e:	d138      	bne.n	80152f2 <_vfiprintf_r+0x1aa>
 8015280:	9b03      	ldr	r3, [sp, #12]
 8015282:	f108 0802 	add.w	r8, r8, #2
 8015286:	1d1a      	adds	r2, r3, #4
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	9203      	str	r2, [sp, #12]
 801528c:	2b00      	cmp	r3, #0
 801528e:	bfb8      	it	lt
 8015290:	f04f 33ff 	movlt.w	r3, #4294967295
 8015294:	9305      	str	r3, [sp, #20]
 8015296:	4d33      	ldr	r5, [pc, #204]	; (8015364 <_vfiprintf_r+0x21c>)
 8015298:	2203      	movs	r2, #3
 801529a:	f898 1000 	ldrb.w	r1, [r8]
 801529e:	4628      	mov	r0, r5
 80152a0:	f7ff f91e 	bl	80144e0 <memchr>
 80152a4:	b140      	cbz	r0, 80152b8 <_vfiprintf_r+0x170>
 80152a6:	2340      	movs	r3, #64	; 0x40
 80152a8:	1b40      	subs	r0, r0, r5
 80152aa:	fa03 f000 	lsl.w	r0, r3, r0
 80152ae:	9b04      	ldr	r3, [sp, #16]
 80152b0:	f108 0801 	add.w	r8, r8, #1
 80152b4:	4303      	orrs	r3, r0
 80152b6:	9304      	str	r3, [sp, #16]
 80152b8:	f898 1000 	ldrb.w	r1, [r8]
 80152bc:	2206      	movs	r2, #6
 80152be:	482a      	ldr	r0, [pc, #168]	; (8015368 <_vfiprintf_r+0x220>)
 80152c0:	f108 0701 	add.w	r7, r8, #1
 80152c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152c8:	f7ff f90a 	bl	80144e0 <memchr>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d037      	beq.n	8015340 <_vfiprintf_r+0x1f8>
 80152d0:	4b26      	ldr	r3, [pc, #152]	; (801536c <_vfiprintf_r+0x224>)
 80152d2:	bb1b      	cbnz	r3, 801531c <_vfiprintf_r+0x1d4>
 80152d4:	9b03      	ldr	r3, [sp, #12]
 80152d6:	3307      	adds	r3, #7
 80152d8:	f023 0307 	bic.w	r3, r3, #7
 80152dc:	3308      	adds	r3, #8
 80152de:	9303      	str	r3, [sp, #12]
 80152e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e2:	444b      	add	r3, r9
 80152e4:	9309      	str	r3, [sp, #36]	; 0x24
 80152e6:	e750      	b.n	801518a <_vfiprintf_r+0x42>
 80152e8:	fb05 3202 	mla	r2, r5, r2, r3
 80152ec:	2001      	movs	r0, #1
 80152ee:	4688      	mov	r8, r1
 80152f0:	e78a      	b.n	8015208 <_vfiprintf_r+0xc0>
 80152f2:	2300      	movs	r3, #0
 80152f4:	250a      	movs	r5, #10
 80152f6:	4619      	mov	r1, r3
 80152f8:	f108 0801 	add.w	r8, r8, #1
 80152fc:	9305      	str	r3, [sp, #20]
 80152fe:	4640      	mov	r0, r8
 8015300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015304:	3a30      	subs	r2, #48	; 0x30
 8015306:	2a09      	cmp	r2, #9
 8015308:	d903      	bls.n	8015312 <_vfiprintf_r+0x1ca>
 801530a:	2b00      	cmp	r3, #0
 801530c:	d0c3      	beq.n	8015296 <_vfiprintf_r+0x14e>
 801530e:	9105      	str	r1, [sp, #20]
 8015310:	e7c1      	b.n	8015296 <_vfiprintf_r+0x14e>
 8015312:	fb05 2101 	mla	r1, r5, r1, r2
 8015316:	2301      	movs	r3, #1
 8015318:	4680      	mov	r8, r0
 801531a:	e7f0      	b.n	80152fe <_vfiprintf_r+0x1b6>
 801531c:	ab03      	add	r3, sp, #12
 801531e:	9300      	str	r3, [sp, #0]
 8015320:	4622      	mov	r2, r4
 8015322:	4b13      	ldr	r3, [pc, #76]	; (8015370 <_vfiprintf_r+0x228>)
 8015324:	a904      	add	r1, sp, #16
 8015326:	4630      	mov	r0, r6
 8015328:	f7fb ffa4 	bl	8011274 <_printf_float>
 801532c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015330:	4681      	mov	r9, r0
 8015332:	d1d5      	bne.n	80152e0 <_vfiprintf_r+0x198>
 8015334:	89a3      	ldrh	r3, [r4, #12]
 8015336:	065b      	lsls	r3, r3, #25
 8015338:	f53f af7e 	bmi.w	8015238 <_vfiprintf_r+0xf0>
 801533c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801533e:	e77d      	b.n	801523c <_vfiprintf_r+0xf4>
 8015340:	ab03      	add	r3, sp, #12
 8015342:	9300      	str	r3, [sp, #0]
 8015344:	4622      	mov	r2, r4
 8015346:	4b0a      	ldr	r3, [pc, #40]	; (8015370 <_vfiprintf_r+0x228>)
 8015348:	a904      	add	r1, sp, #16
 801534a:	4630      	mov	r0, r6
 801534c:	f7fc fa3e 	bl	80117cc <_printf_i>
 8015350:	e7ec      	b.n	801532c <_vfiprintf_r+0x1e4>
 8015352:	bf00      	nop
 8015354:	08019458 	.word	0x08019458
 8015358:	080195a4 	.word	0x080195a4
 801535c:	08019478 	.word	0x08019478
 8015360:	08019438 	.word	0x08019438
 8015364:	080195aa 	.word	0x080195aa
 8015368:	080195ae 	.word	0x080195ae
 801536c:	08011275 	.word	0x08011275
 8015370:	08015123 	.word	0x08015123

08015374 <_sbrk_r>:
 8015374:	b538      	push	{r3, r4, r5, lr}
 8015376:	2300      	movs	r3, #0
 8015378:	4c05      	ldr	r4, [pc, #20]	; (8015390 <_sbrk_r+0x1c>)
 801537a:	4605      	mov	r5, r0
 801537c:	4608      	mov	r0, r1
 801537e:	6023      	str	r3, [r4, #0]
 8015380:	f000 f91c 	bl	80155bc <_sbrk>
 8015384:	1c43      	adds	r3, r0, #1
 8015386:	d102      	bne.n	801538e <_sbrk_r+0x1a>
 8015388:	6823      	ldr	r3, [r4, #0]
 801538a:	b103      	cbz	r3, 801538e <_sbrk_r+0x1a>
 801538c:	602b      	str	r3, [r5, #0]
 801538e:	bd38      	pop	{r3, r4, r5, pc}
 8015390:	20004b68 	.word	0x20004b68

08015394 <__sread>:
 8015394:	b510      	push	{r4, lr}
 8015396:	460c      	mov	r4, r1
 8015398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801539c:	f000 f8f4 	bl	8015588 <_read_r>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	bfab      	itete	ge
 80153a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80153a6:	89a3      	ldrhlt	r3, [r4, #12]
 80153a8:	181b      	addge	r3, r3, r0
 80153aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80153ae:	bfac      	ite	ge
 80153b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80153b2:	81a3      	strhlt	r3, [r4, #12]
 80153b4:	bd10      	pop	{r4, pc}

080153b6 <__swrite>:
 80153b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ba:	461f      	mov	r7, r3
 80153bc:	898b      	ldrh	r3, [r1, #12]
 80153be:	4605      	mov	r5, r0
 80153c0:	05db      	lsls	r3, r3, #23
 80153c2:	460c      	mov	r4, r1
 80153c4:	4616      	mov	r6, r2
 80153c6:	d505      	bpl.n	80153d4 <__swrite+0x1e>
 80153c8:	2302      	movs	r3, #2
 80153ca:	2200      	movs	r2, #0
 80153cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153d0:	f000 f886 	bl	80154e0 <_lseek_r>
 80153d4:	89a3      	ldrh	r3, [r4, #12]
 80153d6:	4632      	mov	r2, r6
 80153d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153dc:	81a3      	strh	r3, [r4, #12]
 80153de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153e2:	463b      	mov	r3, r7
 80153e4:	4628      	mov	r0, r5
 80153e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153ea:	f000 b835 	b.w	8015458 <_write_r>

080153ee <__sseek>:
 80153ee:	b510      	push	{r4, lr}
 80153f0:	460c      	mov	r4, r1
 80153f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153f6:	f000 f873 	bl	80154e0 <_lseek_r>
 80153fa:	1c43      	adds	r3, r0, #1
 80153fc:	89a3      	ldrh	r3, [r4, #12]
 80153fe:	bf15      	itete	ne
 8015400:	6560      	strne	r0, [r4, #84]	; 0x54
 8015402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801540a:	81a3      	strheq	r3, [r4, #12]
 801540c:	bf18      	it	ne
 801540e:	81a3      	strhne	r3, [r4, #12]
 8015410:	bd10      	pop	{r4, pc}

08015412 <__sclose>:
 8015412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015416:	f000 b831 	b.w	801547c <_close_r>

0801541a <strncmp>:
 801541a:	b510      	push	{r4, lr}
 801541c:	b16a      	cbz	r2, 801543a <strncmp+0x20>
 801541e:	3901      	subs	r1, #1
 8015420:	1884      	adds	r4, r0, r2
 8015422:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015426:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801542a:	4293      	cmp	r3, r2
 801542c:	d103      	bne.n	8015436 <strncmp+0x1c>
 801542e:	42a0      	cmp	r0, r4
 8015430:	d001      	beq.n	8015436 <strncmp+0x1c>
 8015432:	2b00      	cmp	r3, #0
 8015434:	d1f5      	bne.n	8015422 <strncmp+0x8>
 8015436:	1a98      	subs	r0, r3, r2
 8015438:	bd10      	pop	{r4, pc}
 801543a:	4610      	mov	r0, r2
 801543c:	e7fc      	b.n	8015438 <strncmp+0x1e>

0801543e <__ascii_wctomb>:
 801543e:	b149      	cbz	r1, 8015454 <__ascii_wctomb+0x16>
 8015440:	2aff      	cmp	r2, #255	; 0xff
 8015442:	bf8b      	itete	hi
 8015444:	238a      	movhi	r3, #138	; 0x8a
 8015446:	700a      	strbls	r2, [r1, #0]
 8015448:	6003      	strhi	r3, [r0, #0]
 801544a:	2001      	movls	r0, #1
 801544c:	bf88      	it	hi
 801544e:	f04f 30ff 	movhi.w	r0, #4294967295
 8015452:	4770      	bx	lr
 8015454:	4608      	mov	r0, r1
 8015456:	4770      	bx	lr

08015458 <_write_r>:
 8015458:	b538      	push	{r3, r4, r5, lr}
 801545a:	4605      	mov	r5, r0
 801545c:	4608      	mov	r0, r1
 801545e:	4611      	mov	r1, r2
 8015460:	2200      	movs	r2, #0
 8015462:	4c05      	ldr	r4, [pc, #20]	; (8015478 <_write_r+0x20>)
 8015464:	6022      	str	r2, [r4, #0]
 8015466:	461a      	mov	r2, r3
 8015468:	f7ed fda7 	bl	8002fba <_write>
 801546c:	1c43      	adds	r3, r0, #1
 801546e:	d102      	bne.n	8015476 <_write_r+0x1e>
 8015470:	6823      	ldr	r3, [r4, #0]
 8015472:	b103      	cbz	r3, 8015476 <_write_r+0x1e>
 8015474:	602b      	str	r3, [r5, #0]
 8015476:	bd38      	pop	{r3, r4, r5, pc}
 8015478:	20004b68 	.word	0x20004b68

0801547c <_close_r>:
 801547c:	b538      	push	{r3, r4, r5, lr}
 801547e:	2300      	movs	r3, #0
 8015480:	4c05      	ldr	r4, [pc, #20]	; (8015498 <_close_r+0x1c>)
 8015482:	4605      	mov	r5, r0
 8015484:	4608      	mov	r0, r1
 8015486:	6023      	str	r3, [r4, #0]
 8015488:	f7ed fdb3 	bl	8002ff2 <_close>
 801548c:	1c43      	adds	r3, r0, #1
 801548e:	d102      	bne.n	8015496 <_close_r+0x1a>
 8015490:	6823      	ldr	r3, [r4, #0]
 8015492:	b103      	cbz	r3, 8015496 <_close_r+0x1a>
 8015494:	602b      	str	r3, [r5, #0]
 8015496:	bd38      	pop	{r3, r4, r5, pc}
 8015498:	20004b68 	.word	0x20004b68

0801549c <_fstat_r>:
 801549c:	b538      	push	{r3, r4, r5, lr}
 801549e:	2300      	movs	r3, #0
 80154a0:	4c06      	ldr	r4, [pc, #24]	; (80154bc <_fstat_r+0x20>)
 80154a2:	4605      	mov	r5, r0
 80154a4:	4608      	mov	r0, r1
 80154a6:	4611      	mov	r1, r2
 80154a8:	6023      	str	r3, [r4, #0]
 80154aa:	f7ed fdad 	bl	8003008 <_fstat>
 80154ae:	1c43      	adds	r3, r0, #1
 80154b0:	d102      	bne.n	80154b8 <_fstat_r+0x1c>
 80154b2:	6823      	ldr	r3, [r4, #0]
 80154b4:	b103      	cbz	r3, 80154b8 <_fstat_r+0x1c>
 80154b6:	602b      	str	r3, [r5, #0]
 80154b8:	bd38      	pop	{r3, r4, r5, pc}
 80154ba:	bf00      	nop
 80154bc:	20004b68 	.word	0x20004b68

080154c0 <_isatty_r>:
 80154c0:	b538      	push	{r3, r4, r5, lr}
 80154c2:	2300      	movs	r3, #0
 80154c4:	4c05      	ldr	r4, [pc, #20]	; (80154dc <_isatty_r+0x1c>)
 80154c6:	4605      	mov	r5, r0
 80154c8:	4608      	mov	r0, r1
 80154ca:	6023      	str	r3, [r4, #0]
 80154cc:	f7ed fdab 	bl	8003026 <_isatty>
 80154d0:	1c43      	adds	r3, r0, #1
 80154d2:	d102      	bne.n	80154da <_isatty_r+0x1a>
 80154d4:	6823      	ldr	r3, [r4, #0]
 80154d6:	b103      	cbz	r3, 80154da <_isatty_r+0x1a>
 80154d8:	602b      	str	r3, [r5, #0]
 80154da:	bd38      	pop	{r3, r4, r5, pc}
 80154dc:	20004b68 	.word	0x20004b68

080154e0 <_lseek_r>:
 80154e0:	b538      	push	{r3, r4, r5, lr}
 80154e2:	4605      	mov	r5, r0
 80154e4:	4608      	mov	r0, r1
 80154e6:	4611      	mov	r1, r2
 80154e8:	2200      	movs	r2, #0
 80154ea:	4c05      	ldr	r4, [pc, #20]	; (8015500 <_lseek_r+0x20>)
 80154ec:	6022      	str	r2, [r4, #0]
 80154ee:	461a      	mov	r2, r3
 80154f0:	f7ed fda3 	bl	800303a <_lseek>
 80154f4:	1c43      	adds	r3, r0, #1
 80154f6:	d102      	bne.n	80154fe <_lseek_r+0x1e>
 80154f8:	6823      	ldr	r3, [r4, #0]
 80154fa:	b103      	cbz	r3, 80154fe <_lseek_r+0x1e>
 80154fc:	602b      	str	r3, [r5, #0]
 80154fe:	bd38      	pop	{r3, r4, r5, pc}
 8015500:	20004b68 	.word	0x20004b68

08015504 <memmove>:
 8015504:	4288      	cmp	r0, r1
 8015506:	b510      	push	{r4, lr}
 8015508:	eb01 0302 	add.w	r3, r1, r2
 801550c:	d807      	bhi.n	801551e <memmove+0x1a>
 801550e:	1e42      	subs	r2, r0, #1
 8015510:	4299      	cmp	r1, r3
 8015512:	d00a      	beq.n	801552a <memmove+0x26>
 8015514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015518:	f802 4f01 	strb.w	r4, [r2, #1]!
 801551c:	e7f8      	b.n	8015510 <memmove+0xc>
 801551e:	4283      	cmp	r3, r0
 8015520:	d9f5      	bls.n	801550e <memmove+0xa>
 8015522:	1881      	adds	r1, r0, r2
 8015524:	1ad2      	subs	r2, r2, r3
 8015526:	42d3      	cmn	r3, r2
 8015528:	d100      	bne.n	801552c <memmove+0x28>
 801552a:	bd10      	pop	{r4, pc}
 801552c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015530:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015534:	e7f7      	b.n	8015526 <memmove+0x22>

08015536 <__malloc_lock>:
 8015536:	4770      	bx	lr

08015538 <__malloc_unlock>:
 8015538:	4770      	bx	lr

0801553a <_realloc_r>:
 801553a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553c:	4607      	mov	r7, r0
 801553e:	4614      	mov	r4, r2
 8015540:	460e      	mov	r6, r1
 8015542:	b921      	cbnz	r1, 801554e <_realloc_r+0x14>
 8015544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015548:	4611      	mov	r1, r2
 801554a:	f7ff bc29 	b.w	8014da0 <_malloc_r>
 801554e:	b922      	cbnz	r2, 801555a <_realloc_r+0x20>
 8015550:	f7ff fbda 	bl	8014d08 <_free_r>
 8015554:	4625      	mov	r5, r4
 8015556:	4628      	mov	r0, r5
 8015558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801555a:	f000 f827 	bl	80155ac <_malloc_usable_size_r>
 801555e:	42a0      	cmp	r0, r4
 8015560:	d20f      	bcs.n	8015582 <_realloc_r+0x48>
 8015562:	4621      	mov	r1, r4
 8015564:	4638      	mov	r0, r7
 8015566:	f7ff fc1b 	bl	8014da0 <_malloc_r>
 801556a:	4605      	mov	r5, r0
 801556c:	2800      	cmp	r0, #0
 801556e:	d0f2      	beq.n	8015556 <_realloc_r+0x1c>
 8015570:	4631      	mov	r1, r6
 8015572:	4622      	mov	r2, r4
 8015574:	f7fb fdda 	bl	801112c <memcpy>
 8015578:	4631      	mov	r1, r6
 801557a:	4638      	mov	r0, r7
 801557c:	f7ff fbc4 	bl	8014d08 <_free_r>
 8015580:	e7e9      	b.n	8015556 <_realloc_r+0x1c>
 8015582:	4635      	mov	r5, r6
 8015584:	e7e7      	b.n	8015556 <_realloc_r+0x1c>
	...

08015588 <_read_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4605      	mov	r5, r0
 801558c:	4608      	mov	r0, r1
 801558e:	4611      	mov	r1, r2
 8015590:	2200      	movs	r2, #0
 8015592:	4c05      	ldr	r4, [pc, #20]	; (80155a8 <_read_r+0x20>)
 8015594:	6022      	str	r2, [r4, #0]
 8015596:	461a      	mov	r2, r3
 8015598:	f7ed fcf2 	bl	8002f80 <_read>
 801559c:	1c43      	adds	r3, r0, #1
 801559e:	d102      	bne.n	80155a6 <_read_r+0x1e>
 80155a0:	6823      	ldr	r3, [r4, #0]
 80155a2:	b103      	cbz	r3, 80155a6 <_read_r+0x1e>
 80155a4:	602b      	str	r3, [r5, #0]
 80155a6:	bd38      	pop	{r3, r4, r5, pc}
 80155a8:	20004b68 	.word	0x20004b68

080155ac <_malloc_usable_size_r>:
 80155ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155b0:	1f18      	subs	r0, r3, #4
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	bfbc      	itt	lt
 80155b6:	580b      	ldrlt	r3, [r1, r0]
 80155b8:	18c0      	addlt	r0, r0, r3
 80155ba:	4770      	bx	lr

080155bc <_sbrk>:
 80155bc:	4b04      	ldr	r3, [pc, #16]	; (80155d0 <_sbrk+0x14>)
 80155be:	4602      	mov	r2, r0
 80155c0:	6819      	ldr	r1, [r3, #0]
 80155c2:	b909      	cbnz	r1, 80155c8 <_sbrk+0xc>
 80155c4:	4903      	ldr	r1, [pc, #12]	; (80155d4 <_sbrk+0x18>)
 80155c6:	6019      	str	r1, [r3, #0]
 80155c8:	6818      	ldr	r0, [r3, #0]
 80155ca:	4402      	add	r2, r0
 80155cc:	601a      	str	r2, [r3, #0]
 80155ce:	4770      	bx	lr
 80155d0:	200039cc 	.word	0x200039cc
 80155d4:	20004b70 	.word	0x20004b70

080155d8 <_init>:
 80155d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155da:	bf00      	nop
 80155dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155de:	bc08      	pop	{r3}
 80155e0:	469e      	mov	lr, r3
 80155e2:	4770      	bx	lr

080155e4 <_fini>:
 80155e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155e6:	bf00      	nop
 80155e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ea:	bc08      	pop	{r3}
 80155ec:	469e      	mov	lr, r3
 80155ee:	4770      	bx	lr

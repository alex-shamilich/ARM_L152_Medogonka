
Medogonka_L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016570  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004138  080166b0  080166b0  000266b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7e8  0801a7e8  00030310  2**0
                  CONTENTS
  4 .ARM          00000008  0801a7e8  0801a7e8  0002a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a7f0  0801a7f0  00030310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a7f0  0801a7f0  0002a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a7f4  0801a7f4  0002a7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0801a7f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004928  20000310  0801ab08  00030310  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004c38  0801ab08  00034c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d884  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008a6b  00000000  00000000  0008dbbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026e8  00000000  00000000  00096628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002308  00000000  00000000  00098d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028457  00000000  00000000  0009b018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032b7d  00000000  00000000  000c346f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b56ac  00000000  00000000  000f5fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ab698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af50  00000000  00000000  001ab714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000310 	.word	0x20000310
 800015c:	00000000 	.word	0x00000000
 8000160:	08016698 	.word	0x08016698

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000314 	.word	0x20000314
 800017c:	08016698 	.word	0x08016698

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	468c      	mov	ip, r1
 8000bce:	4604      	mov	r4, r0
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0c03 	orr.w	ip, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	fbbc f7fe 	udiv	r7, ip, lr
 8000bfe:	fa1f f885 	uxth.w	r8, r5
 8000c02:	fb0e c317 	mls	r3, lr, r7, ip
 8000c06:	fb07 f908 	mul.w	r9, r7, r8
 8000c0a:	0c21      	lsrs	r1, r4, #16
 8000c0c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c10:	4599      	cmp	r9, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 31ff 	add.w	r1, r7, #4294967295
 8000c1a:	f080 811c 	bcs.w	8000e56 <__udivmoddi4+0x28e>
 8000c1e:	4599      	cmp	r9, r3
 8000c20:	f240 8119 	bls.w	8000e56 <__udivmoddi4+0x28e>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	eba3 0309 	sub.w	r3, r3, r9
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	fb00 f108 	mul.w	r1, r0, r8
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3e:	42a1      	cmp	r1, r4
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	192c      	adds	r4, r5, r4
 8000c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c48:	f080 8107 	bcs.w	8000e5a <__udivmoddi4+0x292>
 8000c4c:	42a1      	cmp	r1, r4
 8000c4e:	f240 8104 	bls.w	8000e5a <__udivmoddi4+0x292>
 8000c52:	3802      	subs	r0, #2
 8000c54:	442c      	add	r4, r5
 8000c56:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	1a64      	subs	r4, r4, r1
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	2300      	movs	r3, #0
 8000c62:	40d4      	lsrs	r4, r2
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ec 	beq.w	8000e50 <__udivmoddi4+0x288>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d148      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fb 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	469c      	mov	ip, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4c00 	strd	r4, ip, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	2701      	movs	r7, #1
 8000cbc:	1b49      	subs	r1, r1, r5
 8000cbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cc2:	fa1f f985 	uxth.w	r9, r5
 8000cc6:	fbb1 fef8 	udiv	lr, r1, r8
 8000cca:	fb08 111e 	mls	r1, r8, lr, r1
 8000cce:	fb09 f00e 	mul.w	r0, r9, lr
 8000cd2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000cd6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x126>
 8000cde:	18eb      	adds	r3, r5, r3
 8000ce0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x124>
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	f200 80cd 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000cec:	468e      	mov	lr, r1
 8000cee:	1a1b      	subs	r3, r3, r0
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	fb09 f900 	mul.w	r9, r9, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d02:	45a1      	cmp	r9, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d06:	192c      	adds	r4, r5, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f200 80b6 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000d14:	4618      	mov	r0, r3
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d1e:	e79e      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d20:	f1c7 0520 	rsb	r5, r7, #32
 8000d24:	40bb      	lsls	r3, r7
 8000d26:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa21 f405 	lsr.w	r4, r1, r5
 8000d32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d36:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d3a:	fa1f f88c 	uxth.w	r8, ip
 8000d3e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d42:	fa20 f305 	lsr.w	r3, r0, r5
 8000d46:	40b9      	lsls	r1, r7
 8000d48:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	0c0b      	lsrs	r3, r1, #16
 8000d50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d54:	45a2      	cmp	sl, r4
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	eba4 040a 	sub.w	r4, r4, sl
 8000d7c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d80:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d84:	fb00 fa08 	mul.w	sl, r0, r8
 8000d88:	b289      	uxth	r1, r1
 8000d8a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x1dc>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9a:	d26b      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d969      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4464      	add	r4, ip
 8000da4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dac:	eba4 040a 	sub.w	r4, r4, sl
 8000db0:	454c      	cmp	r4, r9
 8000db2:	4641      	mov	r1, r8
 8000db4:	46ce      	mov	lr, r9
 8000db6:	d354      	bcc.n	8000e62 <__udivmoddi4+0x29a>
 8000db8:	d051      	beq.n	8000e5e <__udivmoddi4+0x296>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d069      	beq.n	8000e92 <__udivmoddi4+0x2ca>
 8000dbe:	1a5a      	subs	r2, r3, r1
 8000dc0:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc4:	fa04 f505 	lsl.w	r5, r4, r5
 8000dc8:	fa22 f307 	lsr.w	r3, r2, r7
 8000dcc:	40fc      	lsrs	r4, r7
 8000dce:	431d      	orrs	r5, r3
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	fa21 f003 	lsr.w	r0, r1, r3
 8000de2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000de6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dea:	fa1f f985 	uxth.w	r9, r5
 8000dee:	fb08 0017 	mls	r0, r8, r7, r0
 8000df2:	fa24 f303 	lsr.w	r3, r4, r3
 8000df6:	4091      	lsls	r1, r2
 8000df8:	fb07 fc09 	mul.w	ip, r7, r9
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	0c19      	lsrs	r1, r3, #16
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	458c      	cmp	ip, r1
 8000e06:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x254>
 8000e0c:	1869      	adds	r1, r5, r1
 8000e0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000e12:	d231      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e14:	458c      	cmp	ip, r1
 8000e16:	d92f      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	3f02      	subs	r7, #2
 8000e1a:	4429      	add	r1, r5
 8000e1c:	eba1 010c 	sub.w	r1, r1, ip
 8000e20:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e24:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e28:	fb00 fe09 	mul.w	lr, r0, r9
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3c:	d218      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e3e:	458e      	cmp	lr, r1
 8000e40:	d916      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	eba1 010e 	sub.w	r1, r1, lr
 8000e4a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4e:	e73a      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e50:	4637      	mov	r7, r6
 8000e52:	4630      	mov	r0, r6
 8000e54:	e708      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e56:	460f      	mov	r7, r1
 8000e58:	e6e6      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	e6fb      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000e5e:	4543      	cmp	r3, r8
 8000e60:	d2ab      	bcs.n	8000dba <__udivmoddi4+0x1f2>
 8000e62:	ebb8 0102 	subs.w	r1, r8, r2
 8000e66:	eb69 020c 	sbc.w	r2, r9, ip
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	4696      	mov	lr, r2
 8000e6e:	e7a4      	b.n	8000dba <__udivmoddi4+0x1f2>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e7e8      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e795      	b.n	8000da4 <__udivmoddi4+0x1dc>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e7cf      	b.n	8000e1c <__udivmoddi4+0x254>
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	442c      	add	r4, r5
 8000e84:	e747      	b.n	8000d16 <__udivmoddi4+0x14e>
 8000e86:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8a:	442b      	add	r3, r5
 8000e8c:	e72f      	b.n	8000cee <__udivmoddi4+0x126>
 8000e8e:	4638      	mov	r0, r7
 8000e90:	e707      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e92:	4637      	mov	r7, r6
 8000e94:	e6e8      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

//======================================================================================
void MX_ADC_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eae:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <MX_ADC_Init+0xb0>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_ADC_Init+0xac>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_ADC_Init+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_ADC_Init+0xac>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f0e:	f003 fcff 	bl	8004910 <HAL_ADC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <MX_ADC_Init+0x82>
  {
    Error_Handler(2);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f002 fc01 	bl	8003720 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_ADC_Init+0xac>)
 8000f30:	f004 f870 	bl	8005014 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <MX_ADC_Init+0xa4>
  {
    Error_Handler(2);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f002 fbf0 	bl	8003720 <Error_Handler>
  }

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20003a34 	.word	0x20003a34
 8000f4c:	40012400 	.word	0x40012400

08000f50 <HAL_ADC_MspInit>:
//======================================================================================
void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a31      	ldr	r2, [pc, #196]	; (8001034 <HAL_ADC_MspInit+0xe4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d15c      	bne.n	800102c <HAL_ADC_MspInit+0xdc>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4a30      	ldr	r2, [pc, #192]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7c:	6213      	str	r3, [r2, #32]
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a24      	ldr	r2, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_ADC_MspInit+0xe8>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PC5     ------> ADC_IN15
    PE8     ------> ADC_IN23
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = ADC_V_MOTOR_Pin|ADC_V_IN_12V_Pin;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <HAL_ADC_MspInit+0xec>)
 8000fe6:	f004 fd49 	bl	8005a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_SPEED_Pin;
 8000fea:	2320      	movs	r3, #32
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_SPEED_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <HAL_ADC_MspInit+0xf0>)
 8000ffe:	f004 fd3d 	bl	8005a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_I_IN_12V_Pin|ADC_I_MOTOR_Pin;
 8001002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <HAL_ADC_MspInit+0xf4>)
 8001018:	f004 fd30 	bl	8005a7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2012      	movs	r0, #18
 8001022:	f004 fab2 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001026:	2012      	movs	r0, #18
 8001028:	f004 facb 	bl	80055c2 <HAL_NVIC_EnableIRQ>

  }
}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40012400 	.word	0x40012400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020800 	.word	0x40020800
 8001044:	40021000 	.word	0x40021000

08001048 <ADC_GetRAWData>:
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
  }
}
//======================================================================================
uint32_t ADC_GetRAWData(uint32_t Channel)												// Получить сырые данные для обрботки по указанному каналу
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]

	sConfig.Rank         = ADC_REGULAR_RANK_1;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES;
 8001060:	2302      	movs	r3, #2
 8001062:	617b      	str	r3, [r7, #20]

	sConfig.Channel      = Channel;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	480f      	ldr	r0, [pc, #60]	; (80010ac <ADC_GetRAWData+0x64>)
 8001070:	f003 ffd0 	bl	8005014 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <ADC_GetRAWData+0x38>
	{
		Error_Handler(2);
 800107a:	2002      	movs	r0, #2
 800107c:	f002 fb50 	bl	8003720 <Error_Handler>
	}

	// Замер из АЦП
	HAL_ADC_Start(&hadc);
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <ADC_GetRAWData+0x64>)
 8001082:	f003 fd8b 	bl	8004b9c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 8001086:	210a      	movs	r1, #10
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <ADC_GetRAWData+0x64>)
 800108a:	f003 fe13 	bl	8004cb4 <HAL_ADC_PollForConversion>
	ADC_State.ADC_RAW = HAL_ADC_GetValue(&hadc);
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <ADC_GetRAWData+0x64>)
 8001090:	f003 fe99 	bl	8004dc6 <HAL_ADC_GetValue>
 8001094:	4602      	mov	r2, r0
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <ADC_GetRAWData+0x68>)
 8001098:	605a      	str	r2, [r3, #4]
	HAL_ADC_Stop(&hadc);
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <ADC_GetRAWData+0x64>)
 800109c:	f003 fdde 	bl	8004c5c <HAL_ADC_Stop>

	return ADC_State.ADC_RAW;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <ADC_GetRAWData+0x68>)
 80010a2:	685b      	ldr	r3, [r3, #4]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20003a34 	.word	0x20003a34
 80010b0:	20003a90 	.word	0x20003a90
 80010b4:	00000000 	.word	0x00000000

080010b8 <ADC_ScanState>:
//======================================================================================
void ADC_ScanState(void)																// Замер из АЦП по всем каналам сразу
{
 80010b8:	b598      	push	{r3, r4, r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	// ADC Channel: IN23						- ADC_I_IN_12V
	// ADC Channel: IN24						- ADC_I_MOTOR
	// ADC Channel: Temperature Sensor Channel 	- температура кристалла процессора
	// ADC Channel: Vrefint Channel				- Напряжение питания, для рассчетов опоры

	ADC_State.DataReady = 0;
 80010bc:	4ba8      	ldr	r3, [pc, #672]	; (8001360 <ADC_ScanState+0x2a8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]


	ADC_GetRAWData(ADC_CHANNEL_VREFINT);												// Канал АЦП - опорное напряжение для рассчета напряжения питания процессора
 80010c2:	2011      	movs	r0, #17
 80010c4:	f7ff ffc0 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80010c8:	4ba5      	ldr	r3, [pc, #660]	; (8001360 <ADC_ScanState+0x2a8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d0:	d222      	bcs.n	8001118 <ADC_ScanState+0x60>
	{
		// Реальное напряжение питания процессора, точнее питание аналоговой части
		ADC_State.ADC_Ref_Voltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_State.ADC_RAW, hadc.Init.Resolution) / 1000.0; // калибровка батареи - опорное напряжение АЦП
 80010d2:	4ba4      	ldr	r3, [pc, #656]	; (8001364 <ADC_ScanState+0x2ac>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010dc:	fb03 f202 	mul.w	r2, r3, r2
 80010e0:	4b9f      	ldr	r3, [pc, #636]	; (8001360 <ADC_ScanState+0x2a8>)
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <ADC_ScanState+0x2b0>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	0ddb      	lsrs	r3, r3, #23
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f98e 	bl	8000414 <__aeabi_ui2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b9b      	ldr	r3, [pc, #620]	; (800136c <ADC_ScanState+0x2b4>)
 80010fe:	f7ff fb2d 	bl	800075c <__aeabi_ddiv>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	4a96      	ldr	r2, [pc, #600]	; (8001360 <ADC_ScanState+0x2a8>)
 8001108:	e9c2 3402 	strd	r3, r4, [r2, #8]
		ADC_State.DataReady++;
 800110c:	4b94      	ldr	r3, [pc, #592]	; (8001360 <ADC_ScanState+0x2a8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b92      	ldr	r3, [pc, #584]	; (8001360 <ADC_ScanState+0x2a8>)
 8001116:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(ADC_CHANNEL_TEMPSENSOR);												// Канал АЦП - температура внутри процессора
 8001118:	2010      	movs	r0, #16
 800111a:	f7ff ff95 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800111e:	4b90      	ldr	r3, [pc, #576]	; (8001360 <ADC_ScanState+0x2a8>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001126:	d229      	bcs.n	800117c <ADC_ScanState+0xc4>
	{
		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, без учета реального напряжения питания
		ADC_State.CPU_Temperature 	= COMPUTATION_TEMPERATURE_TEMP30_TEMP110(ADC_State.ADC_RAW) - 2;
 8001128:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <ADC_ScanState+0x2a8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	4a8e      	ldr	r2, [pc, #568]	; (8001370 <ADC_ScanState+0x2b8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	099b      	lsrs	r3, r3, #6
 800113c:	461a      	mov	r2, r3
 800113e:	4b8d      	ldr	r3, [pc, #564]	; (8001374 <ADC_ScanState+0x2bc>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	1ad2      	subs	r2, r2, r3
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	461a      	mov	r2, r3
 800114e:	4b8a      	ldr	r3, [pc, #552]	; (8001378 <ADC_ScanState+0x2c0>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	4b87      	ldr	r3, [pc, #540]	; (8001374 <ADC_ScanState+0x2bc>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	1acb      	subs	r3, r1, r3
 800115a:	fb92 f3f3 	sdiv	r3, r2, r3
 800115e:	331c      	adds	r3, #28
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f967 	bl	8000434 <__aeabi_i2d>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4a7d      	ldr	r2, [pc, #500]	; (8001360 <ADC_ScanState+0x2a8>)
 800116c:	e9c2 3404 	strd	r3, r4, [r2, #16]

//		// Пересчет  сырых данных АЦП в температуру в градусах Цельсия, с учетом реального опопрного напряжения питания
//		ADC_State.CPU_Temperature_raw 	= __LL_ADC_CALC_DATA_TO_VOLTAGE(ADC_State.ADC_Ref_Voltage, ADC_State.ADC_RAW, hadc.Init.Resolution);  // пересчет из сырых данных АЦП в напряжение в вольтах с учетом разрядности
//		ADC_State.CPU_TemperatureRef    = __LL_ADC_CALC_TEMPERATURE((uint32_t)(1000*ADC_State.ADC_Ref_Voltage), ADC_State.ADC_RAW , hadc.Init.Resolution) - 2;

		ADC_State.DataReady++;
 8001170:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <ADC_ScanState+0x2a8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b79      	ldr	r3, [pc, #484]	; (8001360 <ADC_ScanState+0x2a8>)
 800117a:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_SPEED);													// Канал АЦП - регулятор скорости мотора (пременный резистор 0..3.3V)
 800117c:	200f      	movs	r0, #15
 800117e:	f7ff ff63 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 8001182:	4b77      	ldr	r3, [pc, #476]	; (8001360 <ADC_ScanState+0x2a8>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118a:	d235      	bcs.n	80011f8 <ADC_ScanState+0x140>
	{
		ADC_State.Speed_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_SPEED;
 800118c:	4b74      	ldr	r3, [pc, #464]	; (8001360 <ADC_ScanState+0x2a8>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f93f 	bl	8000414 <__aeabi_ui2d>
 8001196:	a366      	add	r3, pc, #408	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff f9b4 	bl	8000508 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4a6e      	ldr	r2, [pc, #440]	; (8001360 <ADC_ScanState+0x2a8>)
 80011a6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		ADC_State.Speed_value_percent	= (uint8_t)( (ADC_State.Speed_value_volts/ADC_REF_VOLTAGE_DEFAULT)*(double)100 );
 80011aa:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <ADC_ScanState+0x2a8>)
 80011ac:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011b0:	a361      	add	r3, pc, #388	; (adr r3, 8001338 <ADC_ScanState+0x280>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fad1 	bl	800075c <__aeabi_ddiv>
 80011ba:	4603      	mov	r3, r0
 80011bc:	460c      	mov	r4, r1
 80011be:	4618      	mov	r0, r3
 80011c0:	4621      	mov	r1, r4
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b6d      	ldr	r3, [pc, #436]	; (800137c <ADC_ScanState+0x2c4>)
 80011c8:	f7ff f99e 	bl	8000508 <__aeabi_dmul>
 80011cc:	4603      	mov	r3, r0
 80011ce:	460c      	mov	r4, r1
 80011d0:	4618      	mov	r0, r3
 80011d2:	4621      	mov	r1, r4
 80011d4:	f7ff fc70 	bl	8000ab8 <__aeabi_d2uiz>
 80011d8:	4603      	mov	r3, r0
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b60      	ldr	r3, [pc, #384]	; (8001360 <ADC_ScanState+0x2a8>)
 80011de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		Speed_value_percent = ADC_State.Speed_value_percent;
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <ADC_ScanState+0x2a8>)
 80011e4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80011e8:	4b65      	ldr	r3, [pc, #404]	; (8001380 <ADC_ScanState+0x2c8>)
 80011ea:	701a      	strb	r2, [r3, #0]

		ADC_State.DataReady++;
 80011ec:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <ADC_ScanState+0x2a8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <ADC_ScanState+0x2a8>)
 80011f6:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_IN_12V);												// Канал АЦП - напряжение питания на входе
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff ff25 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80011fe:	4b58      	ldr	r3, [pc, #352]	; (8001360 <ADC_ScanState+0x2a8>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001206:	d21d      	bcs.n	8001244 <ADC_ScanState+0x18c>
	{
		ADC_State.V_IN_12V_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_IN_12V;
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <ADC_ScanState+0x2a8>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f901 	bl	8000414 <__aeabi_ui2d>
 8001212:	a347      	add	r3, pc, #284	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f976 	bl	8000508 <__aeabi_dmul>
 800121c:	4603      	mov	r3, r0
 800121e:	460c      	mov	r4, r1
 8001220:	4618      	mov	r0, r3
 8001222:	4621      	mov	r1, r4
 8001224:	a346      	add	r3, pc, #280	; (adr r3, 8001340 <ADC_ScanState+0x288>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f96d 	bl	8000508 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <ADC_ScanState+0x2a8>)
 8001234:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

		ADC_State.DataReady++;
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <ADC_ScanState+0x2a8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b47      	ldr	r3, [pc, #284]	; (8001360 <ADC_ScanState+0x2a8>)
 8001242:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_V_MOTOR);												// Канал АЦП - напряжение питания мотора (среднее)
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff feff 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <ADC_ScanState+0x2a8>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001252:	d21d      	bcs.n	8001290 <ADC_ScanState+0x1d8>
	{
		ADC_State.V_IN_MOTOR_value_volts 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_V_MOTOR;
 8001254:	4b42      	ldr	r3, [pc, #264]	; (8001360 <ADC_ScanState+0x2a8>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f8db 	bl	8000414 <__aeabi_ui2d>
 800125e:	a334      	add	r3, pc, #208	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f950 	bl	8000508 <__aeabi_dmul>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	a335      	add	r3, pc, #212	; (adr r3, 8001348 <ADC_ScanState+0x290>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff f947 	bl	8000508 <__aeabi_dmul>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4a38      	ldr	r2, [pc, #224]	; (8001360 <ADC_ScanState+0x2a8>)
 8001280:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

		ADC_State.DataReady++;
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <ADC_ScanState+0x2a8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <ADC_ScanState+0x2a8>)
 800128e:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_IN_12V);												// Канал АЦП - общий входной ток
 8001290:	2017      	movs	r0, #23
 8001292:	f7ff fed9 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <ADC_ScanState+0x2a8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129e:	d21d      	bcs.n	80012dc <ADC_ScanState+0x224>
	{
		ADC_State.I_IN_12V_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_IN_12V;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <ADC_ScanState+0x2a8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8b5 	bl	8000414 <__aeabi_ui2d>
 80012aa:	a321      	add	r3, pc, #132	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff f92a 	bl	8000508 <__aeabi_dmul>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	a324      	add	r3, pc, #144	; (adr r3, 8001350 <ADC_ScanState+0x298>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f921 	bl	8000508 <__aeabi_dmul>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <ADC_ScanState+0x2a8>)
 80012cc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

		ADC_State.DataReady++;
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <ADC_ScanState+0x2a8>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <ADC_ScanState+0x2a8>)
 80012da:	701a      	strb	r2, [r3, #0]
	}

	ADC_GetRAWData(CHANNEL_ADC_I_MOTOR);												// Канал АЦП - ток мотора
 80012dc:	2018      	movs	r0, #24
 80012de:	f7ff feb3 	bl	8001048 <ADC_GetRAWData>
	if (ADC_State.ADC_RAW < 4096)
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <ADC_ScanState+0x2a8>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ea:	d21d      	bcs.n	8001328 <ADC_ScanState+0x270>
	{
		ADC_State.I_IN_MOTOR_value_amperes 	= ADC_State.ADC_RAW * (ADC_REF_VOLTAGE_DEFAULT / 4096) * DIVIDER_ADC_I_MOTOR;
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <ADC_ScanState+0x2a8>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f88f 	bl	8000414 <__aeabi_ui2d>
 80012f6:	a30e      	add	r3, pc, #56	; (adr r3, 8001330 <ADC_ScanState+0x278>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f7ff f904 	bl	8000508 <__aeabi_dmul>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	4618      	mov	r0, r3
 8001306:	4621      	mov	r1, r4
 8001308:	a313      	add	r3, pc, #76	; (adr r3, 8001358 <ADC_ScanState+0x2a0>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f8fb 	bl	8000508 <__aeabi_dmul>
 8001312:	4603      	mov	r3, r0
 8001314:	460c      	mov	r4, r1
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <ADC_ScanState+0x2a8>)
 8001318:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

		ADC_State.DataReady++;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <ADC_ScanState+0x2a8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <ADC_ScanState+0x2a8>)
 8001326:	701a      	strb	r2, [r3, #0]
	}

}
 8001328:	bf00      	nop
 800132a:	bd98      	pop	{r3, r4, r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	66666666 	.word	0x66666666
 8001334:	3f4a6666 	.word	0x3f4a6666
 8001338:	66666666 	.word	0x66666666
 800133c:	400a6666 	.word	0x400a6666
 8001340:	70a3d70a 	.word	0x70a3d70a
 8001344:	40180a3d 	.word	0x40180a3d
 8001348:	51eb851f 	.word	0x51eb851f
 800134c:	40181eb8 	.word	0x40181eb8
 8001350:	cccccccd 	.word	0xcccccccd
 8001354:	4010cccc 	.word	0x4010cccc
 8001358:	9999999a 	.word	0x9999999a
 800135c:	40099999 	.word	0x40099999
 8001360:	20003a90 	.word	0x20003a90
 8001364:	1ff800f8 	.word	0x1ff800f8
 8001368:	20003a34 	.word	0x20003a34
 800136c:	408f4000 	.word	0x408f4000
 8001370:	057619f1 	.word	0x057619f1
 8001374:	1ff800fa 	.word	0x1ff800fa
 8001378:	1ff800fe 	.word	0x1ff800fe
 800137c:	40590000 	.word	0x40590000
 8001380:	200039f8 	.word	0x200039f8

08001384 <BUZZER_Init>:

uint8_t			BUZZER_BuzzerState;														// состояние баззера (включен/выключен)

//======================================================================================
void BUZZER_Init(uint8_t state)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b090      	sub	sp, #64	; 0x40
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <BUZZER_Init+0x144>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <BUZZER_Init+0x144>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <BUZZER_Init+0x144>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <BUZZER_Init+0x144>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <BUZZER_Init+0x144>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <BUZZER_Init+0x144>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <BUZZER_Init+0x144>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a41      	ldr	r2, [pc, #260]	; (80014c8 <BUZZER_Init+0x144>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <BUZZER_Init+0x144>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <BUZZER_Init+0x144>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a3b      	ldr	r2, [pc, #236]	; (80014c8 <BUZZER_Init+0x144>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <BUZZER_Init+0x144>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <BUZZER_Init+0x144>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a35      	ldr	r2, [pc, #212]	; (80014c8 <BUZZER_Init+0x144>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <BUZZER_Init+0x144>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <BUZZER_Init+0x144>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a2f      	ldr	r2, [pc, #188]	; (80014c8 <BUZZER_Init+0x144>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <BUZZER_Init+0x144>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2120      	movs	r1, #32
 8001422:	482a      	ldr	r0, [pc, #168]	; (80014cc <BUZZER_Init+0x148>)
 8001424:	f004 fccf 	bl	8005dc6 <HAL_GPIO_WritePin>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <BUZZER_Init+0x144>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <BUZZER_Init+0x144>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	61d3      	str	r3, [r2, #28]
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <BUZZER_Init+0x144>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin 		= BUZZER_Pin;
 8001440:	2320      	movs	r3, #32
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull 		= GPIO_PULLDOWN;
 8001448:	2302      	movs	r3, #2
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38


	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001454:	4619      	mov	r1, r3
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <BUZZER_Init+0x148>)
 8001458:	f004 fb10 	bl	8005a7c <HAL_GPIO_Init>
	BUZZER_BuzzerState = state;
 800145c:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <BUZZER_Init+0x14c>)
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	7013      	strb	r3, [r2, #0]


	TIM_MasterConfigTypeDef sMasterConfig;

	htim6.Instance 				= TIM6;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <BUZZER_Init+0x150>)
 8001464:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <BUZZER_Init+0x154>)
 8001466:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler 		= 32;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <BUZZER_Init+0x150>)
 800146a:	2220      	movs	r2, #32
 800146c:	605a      	str	r2, [r3, #4]
	htim6.Init.Period 			= BUZZER_HALF_PERIOD_TIM;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <BUZZER_Init+0x150>)
 8001470:	2279      	movs	r2, #121	; 0x79
 8001472:	60da      	str	r2, [r3, #12]
	htim6.Init.CounterMode 		= TIM_COUNTERMODE_UP;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <BUZZER_Init+0x150>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <BUZZER_Init+0x150>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001480:	4814      	ldr	r0, [pc, #80]	; (80014d4 <BUZZER_Init+0x150>)
 8001482:	f007 f9cf 	bl	8008824 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <BUZZER_Init+0x10e>
	{
		Error_Handler(4);
 800148c:	2004      	movs	r0, #4
 800148e:	f002 f947 	bl	8003720 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger 	= TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
	sMasterConfig.MasterSlaveMode 		= TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <BUZZER_Init+0x150>)
 80014a2:	f008 fba1 	bl	8009be8 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <BUZZER_Init+0x12e>
	{
		Error_Handler(4);
 80014ac:	2004      	movs	r0, #4
 80014ae:	f002 f937 	bl	8003720 <Error_Handler>
	}

	HAL_TIM_Base_MspInit(&htim6);														// Настройка прерываний для таймера
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <BUZZER_Init+0x150>)
 80014b4:	f001 fc9e 	bl	8002df4 <HAL_TIM_Base_MspInit>

	HAL_TIM_MspPostInit(&htim6);
 80014b8:	4806      	ldr	r0, [pc, #24]	; (80014d4 <BUZZER_Init+0x150>)
 80014ba:	f001 fd3d 	bl	8002f38 <HAL_TIM_MspPostInit>

}
 80014be:	bf00      	nop
 80014c0:	3740      	adds	r7, #64	; 0x40
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400
 80014d0:	20003ae0 	.word	0x20003ae0
 80014d4:	20003de8 	.word	0x20003de8
 80014d8:	40001000 	.word	0x40001000

080014dc <BUZZER_Beep>:
//======================================================================================
void BUZZER_Beep(void) 																	// Generates one short beep in RealMode with stupid waiting
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
//	htim6.Init.Period = 100;
//	HAL_TIM_Base_Init(&htim6);
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <BUZZER_Beep+0x40>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d113      	bne.n	8001512 <BUZZER_Beep+0x36>
	{
		uint16_t len = BUZZER_NUM_HALF_PERIOD_NORM;
 80014ea:	2346      	movs	r3, #70	; 0x46
 80014ec:	80fb      	strh	r3, [r7, #6]
		while (len--)
 80014ee:	e006      	b.n	80014fe <BUZZER_Beep+0x22>
		{
			BUZZER_INV;
 80014f0:	2120      	movs	r1, #32
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <BUZZER_Beep+0x44>)
 80014f4:	f004 fc7f 	bl	8005df6 <HAL_GPIO_TogglePin>
			HAL_Delay(BUZZER_HALF_PERIOD);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f003 f9e7 	bl	80048cc <HAL_Delay>
		while (len--)
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	1e5a      	subs	r2, r3, #1
 8001502:	80fa      	strh	r2, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f3      	bne.n	80014f0 <BUZZER_Beep+0x14>
		}
		BUZZER_OFF;
 8001508:	2200      	movs	r2, #0
 800150a:	2120      	movs	r1, #32
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <BUZZER_Beep+0x44>)
 800150e:	f004 fc5a 	bl	8005dc6 <HAL_GPIO_WritePin>
	}
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20003ae0 	.word	0x20003ae0
 8001520:	40020400 	.word	0x40020400

08001524 <BUZZER_BeepTIM>:
//======================================================================================
void BUZZER_BeepTIM(void) 																// Generates one short beep under RTOS
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	if (BUZZER_BuzzerState == BUZZER_STSTE_ON)
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <BUZZER_BeepTIM+0x2c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10d      	bne.n	800154c <BUZZER_BeepTIM+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim6);													// Запуск тааймера, на обработчике состояния таймера - смена состояния пина баззера
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <BUZZER_BeepTIM+0x30>)
 8001532:	f007 fa1f 	bl	8008974 <HAL_TIM_Base_Start_IT>
		osDelay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через планировщик RTOS (минимум 1мс)
 8001536:	2046      	movs	r0, #70	; 0x46
 8001538:	f00d fc8e 	bl	800ee58 <osDelay>
	//	HAL_Delay(BUZZER_NUM_HALF_PERIOD_NORM);											// если задержка через HAL (минимум 1мс)
		HAL_TIM_Base_Stop_IT(&htim6);
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <BUZZER_BeepTIM+0x30>)
 800153e:	f007 fa6b 	bl	8008a18 <HAL_TIM_Base_Stop_IT>
		BUZZER_OFF;
 8001542:	2200      	movs	r2, #0
 8001544:	2120      	movs	r1, #32
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <BUZZER_BeepTIM+0x34>)
 8001548:	f004 fc3d 	bl	8005dc6 <HAL_GPIO_WritePin>
	}
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20003ae0 	.word	0x20003ae0
 8001554:	20003de8 	.word	0x20003de8
 8001558:	40020400 	.word	0x40020400

0800155c <MX_DAC_Init>:

DAC_HandleTypeDef DacHandle;

//======================================================================================
void MX_DAC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  DacHandle.Instance = DAC;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_DAC_Init+0x50>)
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <MX_DAC_Init+0x54>)
 800156e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&DacHandle) != HAL_OK)
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_DAC_Init+0x50>)
 8001572:	f004 f834 	bl	80055de <HAL_DAC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <MX_DAC_Init+0x26>
  {
    Error_Handler(3);
 800157c:	2003      	movs	r0, #3
 800157e:	f002 f8cf 	bl	8003720 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&DacHandle, &sConfig, DACx_CHANNEL) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_DAC_Init+0x50>)
 8001592:	f004 f8b9 	bl	8005708 <HAL_DAC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <MX_DAC_Init+0x46>
  {
    Error_Handler(3);
 800159c:	2003      	movs	r0, #3
 800159e:	f002 f8bf 	bl	8003720 <Error_Handler>
  }

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20003ae4 	.word	0x20003ae4
 80015b0:	40007400 	.word	0x40007400

080015b4 <HAL_DAC_MspInit>:
//======================================================================================
void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_DAC_MspInit+0x74>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d123      	bne.n	800161e <HAL_DAC_MspInit+0x6a>
  {
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015e0:	6253      	str	r3, [r2, #36]	; 0x24
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = DAC1__MOTOR_SPEED_Pin;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1__MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_DAC_MspInit+0x7c>)
 800161a:	f004 fa2f 	bl	8005a7c <HAL_GPIO_Init>

  }
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40007400 	.word	0x40007400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <DAC_SetValue>:
    HAL_GPIO_DeInit(DAC1__MOTOR_SPEED_GPIO_Port, DAC1__MOTOR_SPEED_Pin);
  }
}
//======================================================================================
void DAC_SetValue(uint8_t AValue)														// Установка значения в ЦАП
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	if (HAL_DAC_SetValue(&DacHandle, DACx_CHANNEL, DAC_ALIGN_8B_R, (uint32_t)AValue) != HAL_OK)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2208      	movs	r2, #8
 8001642:	2100      	movs	r1, #0
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <DAC_SetValue+0x40>)
 8001646:	f004 f83b 	bl	80056c0 <HAL_DAC_SetValue>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <DAC_SetValue+0x22>
	{
	  Error_Handler(21);//Setting value Error
 8001650:	2015      	movs	r0, #21
 8001652:	f002 f865 	bl	8003720 <Error_Handler>
	}

	if (HAL_DAC_Start(&DacHandle, DACx_CHANNEL) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <DAC_SetValue+0x40>)
 800165a:	f003 ffe2 	bl	8005622 <HAL_DAC_Start>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <DAC_SetValue+0x36>
	{
	  Error_Handler(21);//Start Error
 8001664:	2015      	movs	r0, #21
 8001666:	f002 f85b 	bl	8003720 <Error_Handler>
	}

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20003ae4 	.word	0x20003ae4

08001678 <MX_DMA_Init>:
#include <DMA.h>

//======================================================================================
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_DMA_Init+0x38>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <MX_DMA_Init+0x38>)
 8001684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_DMA_Init+0x38>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	200f      	movs	r0, #15
 800169c:	f003 ff75 	bl	800558a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016a0:	200f      	movs	r0, #15
 80016a2:	f003 ff8e 	bl	80055c2 <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800

080016b4 <DS18B20_Init>:

#include "main.h"
#include "cmsis_os.h" 																	// для osDelay(();
//=======================================================================================
void  DS18B20_Init(void)																// Инициализация термодатчиков
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <DS18B20_Init+0x120>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <DS18B20_Init+0x120>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <DS18B20_Init+0x120>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <DS18B20_Init+0x120>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a3b      	ldr	r2, [pc, #236]	; (80017d4 <DS18B20_Init+0x120>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <DS18B20_Init+0x120>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <DS18B20_Init+0x120>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a35      	ldr	r2, [pc, #212]	; (80017d4 <DS18B20_Init+0x120>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <DS18B20_Init+0x120>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <DS18B20_Init+0x120>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <DS18B20_Init+0x120>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <DS18B20_Init+0x120>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <DS18B20_Init+0x120>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <DS18B20_Init+0x120>)
 8001730:	f043 0310 	orr.w	r3, r3, #16
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <DS18B20_Init+0x120>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <DS18B20_Init+0x120>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <DS18B20_Init+0x120>)
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <DS18B20_Init+0x120>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin, 		GPIO_PIN_SET);
 800175a:	2201      	movs	r2, #1
 800175c:	2101      	movs	r1, #1
 800175e:	481e      	ldr	r0, [pc, #120]	; (80017d8 <DS18B20_Init+0x124>)
 8001760:	f004 fb31 	bl	8005dc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_MOTOR_1W_GPIO_Port, 		TEMP_MOTOR_1W_Pin, 		GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2102      	movs	r1, #2
 8001768:	481b      	ldr	r0, [pc, #108]	; (80017d8 <DS18B20_Init+0x124>)
 800176a:	f004 fb2c 	bl	8005dc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin, 	GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	2104      	movs	r1, #4
 8001772:	4819      	ldr	r0, [pc, #100]	; (80017d8 <DS18B20_Init+0x124>)
 8001774:	f004 fb27 	bl	8005dc6 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = TEMP_AIR_1W_Pin;
 8001778:	2301      	movs	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_AIR_1W_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <DS18B20_Init+0x124>)
 8001790:	f004 f974 	bl	8005a7c <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_MOTOR_1W_Pin;
 8001794:	2302      	movs	r3, #2
 8001796:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_MOTOR_1W_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <DS18B20_Init+0x124>)
 80017ac:	f004 f966 	bl	8005a7c <HAL_GPIO_Init>


	GPIO_InitStruct.Pin = TEMP_DRIVER_1W_Pin;
 80017b0:	2304      	movs	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TEMP_DRIVER_1W_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4804      	ldr	r0, [pc, #16]	; (80017d8 <DS18B20_Init+0x124>)
 80017c8:	f004 f958 	bl	8005a7c <HAL_GPIO_Init>
}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400

080017dc <DS18B20_ConfigPinToRead>:
//=======================================================================================
void  DS18B20_ConfigPinToRead(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как вход на чтение
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f004 f938 	bl	8005a7c <HAL_GPIO_Init>
}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <DS18B20_ConfigPinToWrite>:
//=======================================================================================
void  DS18B20_ConfigPinToWrite(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)					// Сконфигурировать GPIO пин как выход на запись
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
	// Настройка GPIO
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin  = GPIO_Pin;
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f004 f91c 	bl	8005a7c <HAL_GPIO_Init>
}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <DS18B20_ResetN>:

//=======================================================================================
// Транспортный уровень 1-Wire уровень программно:
//=======================================================================================
uint8_t DS18B20_ResetN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)							// Сделать RESET на 1-Wire линии
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 1;																	// Код возврата (0=Ок, 1=Ошибка)
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffd7 	bl	8001814 <DS18B20_ConfigPinToWrite>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001866:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 480 мкс
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f004 faa9 	bl	8005dc6 <HAL_GPIO_WritePin>
	Delay_us(480);
 8001874:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001878:	f001 fbbc 	bl	8002ff4 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ и ждем 60 мкс
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	2201      	movs	r2, #1
 8001880:	4619      	mov	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f004 fa9f 	bl	8005dc6 <HAL_GPIO_WritePin>
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffa5 	bl	80017dc <DS18B20_ConfigPinToRead>
	Delay_us(60);
 8001892:	203c      	movs	r0, #60	; 0x3c
 8001894:	f001 fbae 	bl	8002ff4 <Delay_us>
	ret = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии и ждем завершения 420 мкс
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f004 fa7b 	bl	8005d98 <HAL_GPIO_ReadPin>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80018a6:	b662      	cpsie	i
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(420);
 80018a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80018ac:	f001 fba2 	bl	8002ff4 <Delay_us>
	return ret;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <DS18B20_Write_BitN>:
//=======================================================================================
void DS18B20_Write_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) // Отправка 1 бита в 1-Wire
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]
 80018c6:	4613      	mov	r3, r2
 80018c8:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f004 fa78 	bl	8005dc6 <HAL_GPIO_WritePin>
	Delay_us(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f001 fb8c 	bl	8002ff4 <Delay_us>
	if (PinState == GPIO_PIN_SET)														// Если нужно записать 1
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d105      	bne.n	80018ee <DS18B20_Write_BitN+0x34>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);								// 		отпускаем линию ВВЕРХ
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f004 fa6c 	bl	8005dc6 <HAL_GPIO_WritePin>
	else																				// 		продолжаем держать линию ВНИЗу и ждем  60 мкс
	{
	}
	Delay_us(60);
 80018ee:	203c      	movs	r0, #60	; 0x3c
 80018f0:	f001 fb80 	bl	8002ff4 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// 		отпускаем линию ВВЕРХ
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f004 fa63 	bl	8005dc6 <HAL_GPIO_WritePin>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <DS18B20_Write_ByteN>:
//=======================================================================================
void DS18B20_Write_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t byte) 			// Отправка 1 байта в 1-Wire
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
	uint8_t i = 8;
 8001918:	2308      	movs	r3, #8
 800191a:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	73bb      	strb	r3, [r7, #14]
	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff75 	bl	8001814 <DS18B20_ConfigPinToWrite>
  __ASM volatile ("cpsid i" : : : "memory");
 800192a:	b672      	cpsid	i
	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 800192c:	e00c      	b.n	8001948 <DS18B20_Write_ByteN+0x40>
	{
		bit = byte & 1;
 800192e:	787b      	ldrb	r3, [r7, #1]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	73bb      	strb	r3, [r7, #14]
		DS18B20_Write_BitN(GPIOx, GPIO_Pin, bit);										// Пишем текущий бит
 8001936:	7bba      	ldrb	r2, [r7, #14]
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4619      	mov	r1, r3
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffbc 	bl	80018ba <DS18B20_Write_BitN>
		byte >>= 1;																		// и сдвигаем на 1 позицию вправо для записи следующего бита
 8001942:	787b      	ldrb	r3, [r7, #1]
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	707b      	strb	r3, [r7, #1]
	while (i--)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	73fa      	strb	r2, [r7, #15]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ed      	bne.n	800192e <DS18B20_Write_ByteN+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 8001952:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <DS18B20_Read_BitN>:
//=======================================================================================
uint8_t DS18B20_Read_BitN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 бита из 1-Wire
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
	uint8_t bit = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	737b      	strb	r3, [r7, #13]
	uint16_t wait = 5;
 800196c:	2305      	movs	r3, #5
 800196e:	81fb      	strh	r3, [r7, #14]

	DS18B20_ConfigPinToWrite(GPIOx, GPIO_Pin);											// переключить порт в режим выхода
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	4619      	mov	r1, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff4d 	bl	8001814 <DS18B20_ConfigPinToWrite>

	// запрос приема бита
//	__disable_irq(); 																	// Глобально запретить все прерывания здесь важна времянка и чтобы никто не отвлекал!!!
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);									// Опустить линию ВНИЗ и подождать 1 мкс
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f004 fa20 	bl	8005dc6 <HAL_GPIO_WritePin>
//	Delay_us(1);
	while (wait--);																		// делаем так, т.к. вверхед на Delay_us(1); сильно больше необходимого интервала
 8001986:	bf00      	nop
 8001988:	89fb      	ldrh	r3, [r7, #14]
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	81fa      	strh	r2, [r7, #14]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1fa      	bne.n	8001988 <DS18B20_Read_BitN+0x2c>

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);									// Освобождаем линию ВВЕРХ
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	2201      	movs	r2, #1
 8001996:	4619      	mov	r1, r3
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f004 fa14 	bl	8005dc6 <HAL_GPIO_WritePin>

	// читаем ответа бита
	DS18B20_ConfigPinToRead(GPIOx, GPIO_Pin);											// переключить порт в режим входа
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff1a 	bl	80017dc <DS18B20_ConfigPinToRead>
	//Delay_us(14);																		// и ждем 14 мкс
	//Delay_us(2);																		// Delay_us - не точно работает за счет оверхеда на HAL на таких задержках (при 14мкс пролетает мимо)

//	LED_LIGHT_SET;
	bit = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);											// Считываем состояние линии
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4619      	mov	r1, r3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f004 f9f3 	bl	8005d98 <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	737b      	strb	r3, [r7, #13]
//	LED_LIGHT_RESE  T;

//	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	Delay_us(50);																		// Ждем 45 мкс до конца, и возвращаем считанное значение
 80019b6:	2032      	movs	r0, #50	; 0x32
 80019b8:	f001 fb1c 	bl	8002ff4 <Delay_us>

	return bit;
 80019bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <DS18B20_Read_ByteN>:
//=======================================================================================
uint8_t DS18B20_Read_ByteN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) 						// Чтение 1 байта из 1-Wire
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
	uint8_t i = 8;
 80019d2:	2308      	movs	r3, #8
 80019d4:	73fb      	strb	r3, [r7, #15]
	uint8_t n = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80019da:	b672      	cpsid	i

	__disable_irq(); 																	// Глобально запретить все прерывания
	while (i--)
 80019dc:	e00f      	b.n	80019fe <DS18B20_Read_ByteN+0x38>
	{
		n >>= 1;																		// сдвигаем на 1 позицию вправо
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	73bb      	strb	r3, [r7, #14]
		n |= (DS18B20_Read_BitN(GPIOx, GPIO_Pin) << 7);									// и сохраняем считанное значение
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffb7 	bl	800195c <DS18B20_Read_BitN>
 80019ee:	4603      	mov	r3, r0
 80019f0:	01db      	lsls	r3, r3, #7
 80019f2:	b25a      	sxtb	r2, r3
 80019f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	73bb      	strb	r3, [r7, #14]
	while (i--)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	73fa      	strb	r2, [r7, #15]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ea      	bne.n	80019de <DS18B20_Read_ByteN+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a08:	b662      	cpsie	i
	}
	__enable_irq();  																	// Глобально разрешить обратно все прерывания

	return n;
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <DS18B20_Measure_Async_Start>:

//=======================================================================================
// High-level functions
//=======================================================================================
void DS18B20_Measure_Async_Start(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{	// Асинхронный старт измерения температуры чтобы в процессе можно было чем-то еще заняться.
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]

	// Установка битности преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff11 	bl	800184c <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	22cc      	movs	r2, #204	; 0xcc
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff69 	bl	8001908 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_WSCRATCHPAD);						// пошлем команду о том что мы будем сейчас писать данные в ScratchPad (3 байта)
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	224e      	movs	r2, #78	; 0x4e
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff63 	bl	8001908 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Th (верхний порог аларма, здесь нам не нужен)
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff5d 	bl	8001908 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, 0);											// запись регистра Tl (нижний порог аларма, здесь нам не нужен)
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	2200      	movs	r2, #0
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff57 	bl	8001908 <DS18B20_Write_ByteN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_RES_12BIT);							// запись регистра конфигурации (разрядность преобразования температуры)
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	227f      	movs	r2, #127	; 0x7f
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff51 	bl	8001908 <DS18B20_Write_ByteN>

	// Запуск преобразования
	DS18B20_ResetN(GPIOx, GPIO_Pin);													// Сброс линии
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff feee 	bl	800184c <DS18B20_ResetN>
	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);								// т.к. устройство только одно на линии - пропускаем проверку адреса
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	22cc      	movs	r2, #204	; 0xcc
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff46 	bl	8001908 <DS18B20_Write_ByteN>

	DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_CONVERTTEMP);						// пошлем команду о том что нужно запусить процесс измерения
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	2244      	movs	r2, #68	; 0x44
 8001a80:	4619      	mov	r1, r3
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff40 	bl	8001908 <DS18B20_Write_ByteN>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <DS18B20_Measure_Async_FinishN>:
//=======================================================================================
uint16_t DS18B20_Measure_Async_FinishN(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
	int16_t Temp_FULL = DS18B20_ERR;													// такого кода на бывает у этих датчиков (5 старших разрядов должны быть одинаково 0 или 1, там знак температуры пишется)
 8001a9c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001aa0:	83fb      	strh	r3, [r7, #30]
	int16_t Temp_LSByte;
	int16_t Temp_MSByte;
	uint8_t ScratchPad[DS18X20_SP_SIZE];
//	uint8_t CRC_Result = DS18X20_ERROR_CRC;

	if (DS18B20_ResetN(GPIOx, GPIO_Pin) == 0)											// Если на RESET пришел правильный ответ PRESENSE
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fed0 	bl	800184c <DS18B20_ResetN>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d13e      	bne.n	8001b30 <DS18B20_Measure_Async_FinishN+0xa0>
	{
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, OW_CMD_SKIPROM);
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	22cc      	movs	r2, #204	; 0xcc
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff25 	bl	8001908 <DS18B20_Write_ByteN>
		DS18B20_Write_ByteN(GPIOx, GPIO_Pin, DS18B20_CMD_RSCRATCHPAD);					// Запрос на чтение ScratchPad
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	22be      	movs	r2, #190	; 0xbe
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff1f 	bl	8001908 <DS18B20_Write_ByteN>

		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	e00f      	b.n	8001af0 <DS18B20_Measure_Async_FinishN+0x60>
			ScratchPad[i] = DS18B20_Read_ByteN(GPIOx, GPIO_Pin);
 8001ad0:	887b      	ldrh	r3, [r7, #2]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff76 	bl	80019c6 <DS18B20_Read_ByteN>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4619      	mov	r1, r3
 8001ade:	f107 0208 	add.w	r2, r7, #8
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DS18X20_SP_SIZE; i++ )										// вычитываем полностью весь ScratchPad чтобы проверить по CRC
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	ddec      	ble.n	8001ad0 <DS18B20_Measure_Async_FinishN+0x40>

		DS18B20_ResetN(GPIOx, GPIO_Pin);												// Сброс по окончании чтения ScratchPad
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fea6 	bl	800184c <DS18B20_ResetN>


		// После вычисления контрольной суммы мастер должен сравнить получившееся значение с переданной CRC.
		// Если эти значения совпадают, значит прием данных прошел без ошибок.
		// Можно также вычислить контрольную сумму для всех 64 принятых бит, тогда результат должен быть равен нулю. (Из статьи Ридико Л.И.)
		if ( DS18B20_CRC8( &ScratchPad[0], DS18X20_SP_SIZE ) == 0 )								// если CRC проверен, возвращаем 2 байта температуры (потом декодировать)
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	2109      	movs	r1, #9
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f8ec 	bl	8001ce4 <DS18B20_CRC8>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10b      	bne.n	8001b2a <DS18B20_Measure_Async_FinishN+0x9a>
		{
			Temp_LSByte = ScratchPad[0];							// temp LSByte младший
 8001b12:	7a3b      	ldrb	r3, [r7, #8]
 8001b14:	82fb      	strh	r3, [r7, #22]
			Temp_MSByte = ScratchPad[1];							// temp MSByte старший
 8001b16:	7a7b      	ldrb	r3, [r7, #9]
 8001b18:	82bb      	strh	r3, [r7, #20]
			Temp_FULL   = ((Temp_MSByte << 8) + (Temp_LSByte));
 8001b1a:	8abb      	ldrh	r3, [r7, #20]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	8afb      	ldrh	r3, [r7, #22]
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	83fb      	strh	r3, [r7, #30]
 8001b28:	e002      	b.n	8001b30 <DS18B20_Measure_Async_FinishN+0xa0>
//			CRC_Result = DS18X20_ERROR_CRC;
		}
		else
		{
			// Если передача прошла с ошибкой - передаем ошибку
			Temp_FULL = DS18B20_ERR;
 8001b2a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001b2e:	83fb      	strh	r3, [r7, #30]
		}

	}
	return Temp_FULL;
 8001b30:	8bfb      	ldrh	r3, [r7, #30]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <DS18B20_Temperature_Double>:
	}
	return (int8_t)((TempWord & 0b0000011111110000) >> 4);								// целая часть
}
//=======================================================================================
double DS18B20_Temperature_Double(uint16_t TempWord)									// Получить температуру полностью со знаком и в double
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
	double temp_c = -56.0;
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	4c62      	ldr	r4, [pc, #392]	; (8001cd4 <DS18B20_Temperature_Double+0x198>)
 8001b4c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (TempWord >= 0x800) 																// Ортицательная температура
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b56:	d363      	bcc.n	8001c20 <DS18B20_Temperature_Double+0xe4>
	{
		temp_c = 0;
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	f04f 0400 	mov.w	r4, #0
 8001b60:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c += 0.06250;
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <DS18B20_Temperature_Double+0x48>
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <DS18B20_Temperature_Double+0x19c>)
 8001b74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b78:	f7fe fb10 	bl	800019c <__adddf3>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	460c      	mov	r4, r1
 8001b80:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c += 0.12500;
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <DS18B20_Temperature_Double+0x6a>
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001b96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b9a:	f7fe faff 	bl	800019c <__adddf3>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c += 0.25000;
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <DS18B20_Temperature_Double+0x8a>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <DS18B20_Temperature_Double+0x1a0>)
 8001bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bba:	f7fe faef 	bl	800019c <__adddf3>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460c      	mov	r4, r1
 8001bc2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c += 0.50000;
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <DS18B20_Temperature_Double+0xaa>
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <DS18B20_Temperature_Double+0x1a4>)
 8001bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bda:	f7fe fadf 	bl	800019c <__adddf3>
 8001bde:	4603      	mov	r3, r0
 8001be0:	460c      	mov	r4, r1
 8001be2:	e9c7 3402 	strd	r3, r4, [r7, #8]

		// целая часть
		TempWord = (TempWord >> 4) & 0x00FF;
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	80fb      	strh	r3, [r7, #6]
		TempWord = TempWord - 0x0001; //subtract 1
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	80fb      	strh	r3, [r7, #6]
		TempWord = ~TempWord; //ones compliment
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	80fb      	strh	r3, [r7, #6]
		temp_c = temp_c - (double)(TempWord & 0xFF);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc17 	bl	8000434 <__aeabi_i2d>
 8001c06:	4603      	mov	r3, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c12:	f7fe fac1 	bl	8000198 <__aeabi_dsub>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8001c1e:	e051      	b.n	8001cc4 <DS18B20_Temperature_Double+0x188>
	}
	else 																				// Положительная температура
	{
		temp_c = 0;
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	f04f 0400 	mov.w	r4, #0
 8001c28:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// целая часть
		temp_c = (TempWord >> 4) & 0x00FF;
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fbfd 	bl	8000434 <__aeabi_i2d>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	e9c7 3402 	strd	r3, r4, [r7, #8]
		// дробная часть
		if(TempWord & 0x0001) temp_c = temp_c + 0.06250;
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <DS18B20_Temperature_Double+0x126>
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <DS18B20_Temperature_Double+0x19c>)
 8001c52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c56:	f7fe faa1 	bl	800019c <__adddf3>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	460c      	mov	r4, r1
 8001c5e:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0002) temp_c = temp_c + 0.12500;
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <DS18B20_Temperature_Double+0x148>
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001c74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c78:	f7fe fa90 	bl	800019c <__adddf3>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0004) temp_c = temp_c + 0.25000;
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <DS18B20_Temperature_Double+0x168>
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <DS18B20_Temperature_Double+0x1a0>)
 8001c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c98:	f7fe fa80 	bl	800019c <__adddf3>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if(TempWord & 0x0008) temp_c = temp_c + 0.50000;
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <DS18B20_Temperature_Double+0x188>
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <DS18B20_Temperature_Double+0x1a4>)
 8001cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb8:	f7fe fa70 	bl	800019c <__adddf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	}
	return temp_c;
 8001cc4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4621      	mov	r1, r4
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	c04c0000 	.word	0xc04c0000
 8001cd8:	3fb00000 	.word	0x3fb00000
 8001cdc:	3fd00000 	.word	0x3fd00000
 8001ce0:	3fe00000 	.word	0x3fe00000

08001ce4 <DS18B20_CRC8>:
//=======================================================================================
#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0
////=======================================================================================
uint8_t DS18B20_CRC8( uint8_t *data, uint16_t number_of_bytes_in_data )					// Рассчет CRC
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;

	crc = CRC8INIT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	81bb      	strh	r3, [r7, #12]
 8001cf8:	e02a      	b.n	8001d50 <DS18B20_CRC8+0x6c>
	{
		b = data[loop_count];
 8001cfa:	89bb      	ldrh	r3, [r7, #12]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	72bb      	strb	r3, [r7, #10]

		bit_counter = 8;
 8001d04:	2308      	movs	r3, #8
 8001d06:	72fb      	strb	r3, [r7, #11]
		do {
			feedback_bit = (crc ^ b) & 0x01;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	7abb      	ldrb	r3, [r7, #10]
 8001d0c:	4053      	eors	r3, r2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	727b      	strb	r3, [r7, #9]

			if ( feedback_bit == 0x01 ) {
 8001d16:	7a7b      	ldrb	r3, [r7, #9]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d103      	bne.n	8001d24 <DS18B20_CRC8+0x40>
				crc = crc ^ CRC8POLY;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	f083 0318 	eor.w	r3, r3, #24
 8001d22:	73fb      	strb	r3, [r7, #15]
			}
			crc = (crc >> 1) & 0x7F;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	085b      	lsrs	r3, r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
			if ( feedback_bit == 0x01 ) {
 8001d2a:	7a7b      	ldrb	r3, [r7, #9]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d103      	bne.n	8001d38 <DS18B20_CRC8+0x54>
				crc = crc | 0x80;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d36:	73fb      	strb	r3, [r7, #15]
			}

			b = b >> 1;
 8001d38:	7abb      	ldrb	r3, [r7, #10]
 8001d3a:	085b      	lsrs	r3, r3, #1
 8001d3c:	72bb      	strb	r3, [r7, #10]
			bit_counter--;
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	72fb      	strb	r3, [r7, #11]

		} while (bit_counter > 0);
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1de      	bne.n	8001d08 <DS18B20_CRC8+0x24>
	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
 8001d4a:	89bb      	ldrh	r3, [r7, #12]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	81bb      	strh	r3, [r7, #12]
 8001d50:	89ba      	ldrh	r2, [r7, #12]
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1d0      	bne.n	8001cfa <DS18B20_CRC8+0x16>
	}

	return crc;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <Display_Test>:

char str[18];																			// Для печати строк через sprintf

//======================================================================================
void Display_Test(uint16_t pos_x, uint16_t pos_y)										// Для тестов
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	80fb      	strh	r3, [r7, #6]
 8001d70:	4613      	mov	r3, r2
 8001d72:	80bb      	strh	r3, [r7, #4]
//	sprintf(str, "%04.3f", ADC_State.Speed_value_volts);
//	LCD9488_GUI_Draw_StringColor(10, 230, str, (unsigned char*)LCD55Mono37x48, RED, CYAN, DRAW_NO_OVERLYING);

	sprintf(str, "%02d", Speed_value_percent);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <Display_Test+0x44>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	490c      	ldr	r1, [pc, #48]	; (8001dac <Display_Test+0x48>)
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <Display_Test+0x4c>)
 8001d7e:	f011 f8f7 	bl	8012f70 <siprintf>
//	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Digital7Mono32x48, RED, CYAN, DRAW_NO_OVERLYING);
	LCD9488_GUI_Draw_StringColor(200, 230, str, (unsigned char*)Unispace32x48_Digits, RED, CYAN, DRAW_NO_OVERLYING);
 8001d82:	2300      	movs	r3, #0
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <Display_Test+0x50>)
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <Display_Test+0x4c>)
 8001d96:	21e6      	movs	r1, #230	; 0xe6
 8001d98:	20c8      	movs	r0, #200	; 0xc8
 8001d9a:	f002 fce1 	bl	8004760 <LCD9488_GUI_Draw_StringColor>


}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200039f8 	.word	0x200039f8
 8001dac:	080166b0 	.word	0x080166b0
 8001db0:	20003af8 	.word	0x20003af8
 8001db4:	08019cf8 	.word	0x08019cf8

08001db8 <Display_SystemVoltage>:
//======================================================================================
void Display_SystemVoltage(uint16_t pos_x, uint16_t pos_y)								// Показать напряжение питания процессора
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af04      	add	r7, sp, #16
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	80fb      	strh	r3, [r7, #6]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	80bb      	strh	r3, [r7, #4]
	unsigned char* Font = (unsigned char*)Arial_9;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <Display_SystemVoltage+0x8c>)
 8001dca:	60fb      	str	r3, [r7, #12]

	sprintf(str, "Vcc = %3.2fv", ADC_State.ADC_Ref_Voltage);
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <Display_SystemVoltage+0x90>)
 8001dce:	f103 0408 	add.w	r4, r3, #8
 8001dd2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4623      	mov	r3, r4
 8001dda:	491c      	ldr	r1, [pc, #112]	; (8001e4c <Display_SystemVoltage+0x94>)
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <Display_SystemVoltage+0x98>)
 8001dde:	f011 f8c7 	bl	8012f70 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001de2:	88b9      	ldrh	r1, [r7, #4]
 8001de4:	88f8      	ldrh	r0, [r7, #6]
 8001de6:	2300      	movs	r3, #0
 8001de8:	9302      	str	r3, [sp, #8]
 8001dea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <Display_SystemVoltage+0x98>)
 8001dfa:	f002 fcb1 	bl	8004760 <LCD9488_GUI_Draw_StringColor>

	sprintf(str, "Tmp = %+2dC", (int)ADC_State.CPU_Temperature);
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <Display_SystemVoltage+0x90>)
 8001e00:	f103 0410 	add.w	r4, r3, #16
 8001e04:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	f7fe fe2c 	bl	8000a68 <__aeabi_d2iz>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	490f      	ldr	r1, [pc, #60]	; (8001e54 <Display_SystemVoltage+0x9c>)
 8001e16:	480e      	ldr	r0, [pc, #56]	; (8001e50 <Display_SystemVoltage+0x98>)
 8001e18:	f011 f8aa 	bl	8012f70 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y + 10, str, Font, RED, CYAN, DRAW_NO_OVERLYING);
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	330a      	adds	r3, #10
 8001e20:	b299      	uxth	r1, r3
 8001e22:	88f8      	ldrh	r0, [r7, #6]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <Display_SystemVoltage+0x98>)
 8001e38:	f002 fc92 	bl	8004760 <LCD9488_GUI_Draw_StringColor>

}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	08019450 	.word	0x08019450
 8001e48:	20003a90 	.word	0x20003a90
 8001e4c:	080166b8 	.word	0x080166b8
 8001e50:	20003af8 	.word	0x20003af8
 8001e54:	080166c8 	.word	0x080166c8

08001e58 <Display_MotorDirection>:
//======================================================================================
void Display_MotorDirection(uint16_t pos_x, uint16_t pos_y, TMotorDirection AMotorDirection) // Показать направление вращения мотора
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af04      	add	r7, sp, #16
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
 8001e62:	460b      	mov	r3, r1
 8001e64:	80bb      	strh	r3, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	70fb      	strb	r3, [r7, #3]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <Display_MotorDirection+0x88>)
 8001e6c:	60fb      	str	r3, [r7, #12]
	switch (AMotorDirection)
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d013      	beq.n	8001e9c <Display_MotorDirection+0x44>
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d020      	beq.n	8001eba <Display_MotorDirection+0x62>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d000      	beq.n	8001e7e <Display_MotorDirection+0x26>
		case MD_REV:
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
			break;
	}

}
 8001e7c:	e02c      	b.n	8001ed8 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, " STOP  ", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001e7e:	88b9      	ldrh	r1, [r7, #4]
 8001e80:	88f8      	ldrh	r0, [r7, #6]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <Display_MotorDirection+0x8c>)
 8001e96:	f002 fc63 	bl	8004760 <LCD9488_GUI_Draw_StringColor>
			break;
 8001e9a:	e01d      	b.n	8001ed8 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "FORWARD", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001e9c:	88b9      	ldrh	r1, [r7, #4]
 8001e9e:	88f8      	ldrh	r0, [r7, #6]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <Display_MotorDirection+0x90>)
 8001eb4:	f002 fc54 	bl	8004760 <LCD9488_GUI_Draw_StringColor>
			break;
 8001eb8:	e00e      	b.n	8001ed8 <Display_MotorDirection+0x80>
			LCD9488_GUI_Draw_StringColor(pos_x, pos_y, "REVERSE", Font, RED, LIGHTBLUE, DRAW_NO_OVERLYING);
 8001eba:	88b9      	ldrh	r1, [r7, #4]
 8001ebc:	88f8      	ldrh	r0, [r7, #6]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <Display_MotorDirection+0x94>)
 8001ed2:	f002 fc45 	bl	8004760 <LCD9488_GUI_Draw_StringColor>
			break;
 8001ed6:	bf00      	nop
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	080169e8 	.word	0x080169e8
 8001ee4:	080166d4 	.word	0x080166d4
 8001ee8:	080166dc 	.word	0x080166dc
 8001eec:	080166e4 	.word	0x080166e4

08001ef0 <Display_MotorSpeed>:
//======================================================================================
void Display_MotorSpeed(uint16_t pos_x, uint16_t pos_y, uint16_t ASpeed) 					// Показать скорость вращения мотора
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
 8001efa:	460b      	mov	r3, r1
 8001efc:	80bb      	strh	r3, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	807b      	strh	r3, [r7, #2]
	unsigned char* Font = (unsigned char*)Unispace32x48_Digits;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <Display_MotorSpeed+0x44>)
 8001f04:	60fb      	str	r3, [r7, #12]

	sprintf(str, "%04d", (uint16_t)ASpeed);
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	490b      	ldr	r1, [pc, #44]	; (8001f38 <Display_MotorSpeed+0x48>)
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <Display_MotorSpeed+0x4c>)
 8001f0e:	f011 f82f 	bl	8012f70 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001f12:	88b9      	ldrh	r1, [r7, #4]
 8001f14:	88f8      	ldrh	r0, [r7, #6]
 8001f16:	2300      	movs	r3, #0
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	231f      	movs	r3, #31
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <Display_MotorSpeed+0x4c>)
 8001f28:	f002 fc1a 	bl	8004760 <LCD9488_GUI_Draw_StringColor>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	08019cf8 	.word	0x08019cf8
 8001f38:	080166ec 	.word	0x080166ec
 8001f3c:	20003af8 	.word	0x20003af8

08001f40 <Display_Temperature>:
//======================================================================================
void Display_Temperature(uint16_t pos_x, uint16_t pos_y, double ATemp) 						// Показать температуру
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af04      	add	r7, sp, #16
 8001f46:	e9c7 2300 	strd	r2, r3, [r7]
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	81fb      	strh	r3, [r7, #14]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	81bb      	strh	r3, [r7, #12]
	unsigned char* Font = (unsigned char*)Arial28x28;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <Display_Temperature+0x44>)
 8001f54:	617b      	str	r3, [r7, #20]

	sprintf(str, "Temp = %+2.1f C", ATemp );
 8001f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f5a:	490b      	ldr	r1, [pc, #44]	; (8001f88 <Display_Temperature+0x48>)
 8001f5c:	480b      	ldr	r0, [pc, #44]	; (8001f8c <Display_Temperature+0x4c>)
 8001f5e:	f011 f807 	bl	8012f70 <siprintf>
	LCD9488_GUI_Draw_StringColor(pos_x, pos_y, str, Font, BLUE, WHITE, DRAW_NO_OVERLYING);
 8001f62:	89b9      	ldrh	r1, [r7, #12]
 8001f64:	89f8      	ldrh	r0, [r7, #14]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	231f      	movs	r3, #31
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <Display_Temperature+0x4c>)
 8001f78:	f002 fbf2 	bl	8004760 <LCD9488_GUI_Draw_StringColor>
}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	080169e8 	.word	0x080169e8
 8001f88:	080166f4 	.word	0x080166f4
 8001f8c:	20003af8 	.word	0x20003af8

08001f90 <Encoder_Init>:

#include <Encoder.h>

//=======================================================================================
void  Encoder_Init(void)																	// Настройка GPIO портов для энкодера
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <Encoder_Init+0xfc>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a3c      	ldr	r2, [pc, #240]	; (800208c <Encoder_Init+0xfc>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	61d3      	str	r3, [r2, #28]
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <Encoder_Init+0xfc>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <Encoder_Init+0xfc>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a36      	ldr	r2, [pc, #216]	; (800208c <Encoder_Init+0xfc>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <Encoder_Init+0xfc>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <Encoder_Init+0xfc>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a30      	ldr	r2, [pc, #192]	; (800208c <Encoder_Init+0xfc>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <Encoder_Init+0xfc>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <Encoder_Init+0xfc>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a2a      	ldr	r2, [pc, #168]	; (800208c <Encoder_Init+0xfc>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b28      	ldr	r3, [pc, #160]	; (800208c <Encoder_Init+0xfc>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <Encoder_Init+0xfc>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	4a24      	ldr	r2, [pc, #144]	; (800208c <Encoder_Init+0xfc>)
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	61d3      	str	r3, [r2, #28]
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <Encoder_Init+0xfc>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <Encoder_Init+0xfc>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <Encoder_Init+0xfc>)
 8002014:	f043 0320 	orr.w	r3, r3, #32
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b1c      	ldr	r3, [pc, #112]	; (800208c <Encoder_Init+0xfc>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]


	GPIO_InitTypeDef GPIO_InitStruct;

	// ENC_BTN
	GPIO_InitStruct.Pin 		= ENC_BTN_Pin;
 8002026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <Encoder_Init+0x100>)
 800202e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002034:	2301      	movs	r3, #1
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4815      	ldr	r0, [pc, #84]	; (8002094 <Encoder_Init+0x104>)
 8002040:	f003 fd1c 	bl	8005a7c <HAL_GPIO_Init>

	// ENC_A
    GPIO_InitStruct.Pin 		= ENC_A_Pin;
 8002044:	2308      	movs	r3, #8
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate 	= GPIO_AF2_TIM3;
 8002054:	2302      	movs	r3, #2
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	480e      	ldr	r0, [pc, #56]	; (8002098 <Encoder_Init+0x108>)
 8002060:	f003 fd0c 	bl	8005a7c <HAL_GPIO_Init>

	// ENC_B
    GPIO_InitStruct.Pin 		= ENC_B_Pin;
 8002064:	2310      	movs	r3, #16
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002074:	2302      	movs	r3, #2
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <Encoder_Init+0x108>)
 8002080:	f003 fcfc 	bl	8005a7c <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 8002084:	bf00      	nop
 8002086:	3730      	adds	r7, #48	; 0x30
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	10210000 	.word	0x10210000
 8002094:	40020c00 	.word	0x40020c00
 8002098:	40021000 	.word	0x40021000

0800209c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
//__weak void configureTimerForRunTimeStats(void)
void configureTimerForRunTimeStats(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim9);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <configureTimerForRunTimeStats+0x10>)
 80020a2:	f006 fbff 	bl	80088a4 <HAL_TIM_Base_Start>
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20003e28 	.word	0x20003e28

080020b0 <getRunTimeCounterValue>:

//__weak unsigned long getRunTimeCounterValue(void)
unsigned long getRunTimeCounterValue(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
    static unsigned long counter = 0;

     counter += __HAL_TIM_GET_COUNTER(&htim9);
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <getRunTimeCounterValue+0x28>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <getRunTimeCounterValue+0x2c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <getRunTimeCounterValue+0x2c>)
 80020c2:	6013      	str	r3, [r2, #0]
     __HAL_TIM_SET_COUNTER(&htim9, 0);
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <getRunTimeCounterValue+0x28>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

     return counter;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <getRunTimeCounterValue+0x2c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	20003e28 	.word	0x20003e28
 80020dc:	2000032c 	.word	0x2000032c

080020e0 <MX_FREERTOS_Init>:

//======================================================================================
void MX_FREERTOS_Init(void)																// FreeRTOS initialization
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  // Create the mutex(es)
  myMutex_I2C1Handle 		= osMutexNew(&myMutex_I2C1_attributes);						// creation of myMutex_I2C1
 80020e4:	4823      	ldr	r0, [pc, #140]	; (8002174 <MX_FREERTOS_Init+0x94>)
 80020e6:	f00c fee5 	bl	800eeb4 <osMutexNew>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <MX_FREERTOS_Init+0x98>)
 80020ee:	601a      	str	r2, [r3, #0]

  // Create the queue(s)
  myQueue_UART_RxHandle 	= osMessageQueueNew (32, sizeof(uint8_t), &myQueue_UART_Rx_attributes);	// creation of myQueue_UART_Rx
 80020f0:	4a22      	ldr	r2, [pc, #136]	; (800217c <MX_FREERTOS_Init+0x9c>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	2020      	movs	r0, #32
 80020f6:	f00c ff77 	bl	800efe8 <osMessageQueueNew>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_FREERTOS_Init+0xa0>)
 80020fe:	601a      	str	r2, [r3, #0]

  // Create the thread(s)
  defaultTaskHandle 		= osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002100:	4a20      	ldr	r2, [pc, #128]	; (8002184 <MX_FREERTOS_Init+0xa4>)
 8002102:	2100      	movs	r1, #0
 8002104:	4820      	ldr	r0, [pc, #128]	; (8002188 <MX_FREERTOS_Init+0xa8>)
 8002106:	f00c fdfd 	bl	800ed04 <osThreadNew>
 800210a:	4602      	mov	r2, r0
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_FREERTOS_Init+0xac>)
 800210e:	601a      	str	r2, [r3, #0]
  myTask_IMUHandle 			= osThreadNew(StartTask_IMU, NULL, &myTask_IMU_attributes);
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <MX_FREERTOS_Init+0xb0>)
 8002112:	2100      	movs	r1, #0
 8002114:	481f      	ldr	r0, [pc, #124]	; (8002194 <MX_FREERTOS_Init+0xb4>)
 8002116:	f00c fdf5 	bl	800ed04 <osThreadNew>
 800211a:	4602      	mov	r2, r0
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <MX_FREERTOS_Init+0xb8>)
 800211e:	601a      	str	r2, [r3, #0]
  myTask_LCDHandle 			= osThreadNew(StartTask_LCD, NULL, &myTask_LCD_attributes);
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <MX_FREERTOS_Init+0xbc>)
 8002122:	2100      	movs	r1, #0
 8002124:	481e      	ldr	r0, [pc, #120]	; (80021a0 <MX_FREERTOS_Init+0xc0>)
 8002126:	f00c fded 	bl	800ed04 <osThreadNew>
 800212a:	4602      	mov	r2, r0
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <MX_FREERTOS_Init+0xc4>)
 800212e:	601a      	str	r2, [r3, #0]
  myTask_ADCHandle 			= osThreadNew(StartTask_ADC, NULL, &myTask_ADC_attributes);
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <MX_FREERTOS_Init+0xc8>)
 8002132:	2100      	movs	r1, #0
 8002134:	481d      	ldr	r0, [pc, #116]	; (80021ac <MX_FREERTOS_Init+0xcc>)
 8002136:	f00c fde5 	bl	800ed04 <osThreadNew>
 800213a:	4602      	mov	r2, r0
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <MX_FREERTOS_Init+0xd0>)
 800213e:	601a      	str	r2, [r3, #0]
  myTask_ScanCTRLHandle 	= osThreadNew(StartTask_ScanControls, NULL, &myTask_ScanCTRL_attributes);
 8002140:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <MX_FREERTOS_Init+0xd4>)
 8002142:	2100      	movs	r1, #0
 8002144:	481c      	ldr	r0, [pc, #112]	; (80021b8 <MX_FREERTOS_Init+0xd8>)
 8002146:	f00c fddd 	bl	800ed04 <osThreadNew>
 800214a:	4602      	mov	r2, r0
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_FREERTOS_Init+0xdc>)
 800214e:	601a      	str	r2, [r3, #0]
  myTask_ScanTempHandle 	= osThreadNew(StartTask_ScanTemperature, NULL, &myTask_ScanTemp_attributes);
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <MX_FREERTOS_Init+0xe0>)
 8002152:	2100      	movs	r1, #0
 8002154:	481b      	ldr	r0, [pc, #108]	; (80021c4 <MX_FREERTOS_Init+0xe4>)
 8002156:	f00c fdd5 	bl	800ed04 <osThreadNew>
 800215a:	4602      	mov	r2, r0
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <MX_FREERTOS_Init+0xe8>)
 800215e:	601a      	str	r2, [r3, #0]
  myTask_SetStateHandle 	= osThreadNew(StartTask_SetState, NULL, &myTask_SetState_attributes);
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <MX_FREERTOS_Init+0xec>)
 8002162:	2100      	movs	r1, #0
 8002164:	481a      	ldr	r0, [pc, #104]	; (80021d0 <MX_FREERTOS_Init+0xf0>)
 8002166:	f00c fdcd 	bl	800ed04 <osThreadNew>
 800216a:	4602      	mov	r2, r0
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <MX_FREERTOS_Init+0xf4>)
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	080169b4 	.word	0x080169b4
 8002178:	20003b90 	.word	0x20003b90
 800217c:	0801699c 	.word	0x0801699c
 8002180:	20003b18 	.word	0x20003b18
 8002184:	080168a0 	.word	0x080168a0
 8002188:	080021d9 	.word	0x080021d9
 800218c:	20003b0c 	.word	0x20003b0c
 8002190:	080168c4 	.word	0x080168c4
 8002194:	080021f1 	.word	0x080021f1
 8002198:	20003b10 	.word	0x20003b10
 800219c:	080168e8 	.word	0x080168e8
 80021a0:	08002201 	.word	0x08002201
 80021a4:	20003b9c 	.word	0x20003b9c
 80021a8:	0801690c 	.word	0x0801690c
 80021ac:	0800228d 	.word	0x0800228d
 80021b0:	20003b94 	.word	0x20003b94
 80021b4:	08016930 	.word	0x08016930
 80021b8:	080022a1 	.word	0x080022a1
 80021bc:	20003b6c 	.word	0x20003b6c
 80021c0:	08016954 	.word	0x08016954
 80021c4:	080022c9 	.word	0x080022c9
 80021c8:	20003b14 	.word	0x20003b14
 80021cc:	08016978 	.word	0x08016978
 80021d0:	08002389 	.word	0x08002389
 80021d4:	20003b98 	.word	0x20003b98

080021d8 <StartDefaultTask>:
//======================================================================================
void StartDefaultTask(void *argument)													// Поток по-умолчанию
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  MX_USB_DEVICE_Init();																	// init code for USB_DEVICE
 80021e0:	f00f fb8c 	bl	80118fc <MX_USB_DEVICE_Init>

  BUZZER_BeepTIM();																		// Квакнуть баззером при старте
 80021e4:	f7ff f99e 	bl	8001524 <BUZZER_BeepTIM>

  for(;;)
  {
	//LED_LIGHT_INV;
	// LED_GREEN_INV;
    osDelay(100);
 80021e8:	2064      	movs	r0, #100	; 0x64
 80021ea:	f00c fe35 	bl	800ee58 <osDelay>
 80021ee:	e7fb      	b.n	80021e8 <StartDefaultTask+0x10>

080021f0 <StartTask_IMU>:

  }
}
//======================================================================================
void StartTask_IMU(void *argument)														// Поток сканирования данных от МЕМС по вибрации
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f00c fe2d 	bl	800ee58 <osDelay>
 80021fe:	e7fb      	b.n	80021f8 <StartTask_IMU+0x8>

08002200 <StartTask_LCD>:
  }
}
//======================================================================================
void StartTask_LCD(void *argument)														// Поток вывода на LCD экран
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	Display_Test(0,0);
 8002208:	2100      	movs	r1, #0
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff fdaa 	bl	8001d64 <Display_Test>
	Display_MotorDirection(50, 50, MotorDirection);										// Показать направление вращения мотора
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <StartTask_LCD+0x74>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	2132      	movs	r1, #50	; 0x32
 8002218:	2032      	movs	r0, #50	; 0x32
 800221a:	f7ff fe1d 	bl	8001e58 <Display_MotorDirection>
	Display_MotorSpeed(250, 50, MotorSpeed);											// Показать скорость вращения мотора
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <StartTask_LCD+0x78>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	2132      	movs	r1, #50	; 0x32
 8002226:	20fa      	movs	r0, #250	; 0xfa
 8002228:	f7ff fe62 	bl	8001ef0 <Display_MotorSpeed>

	Display_SystemVoltage(100, 5);
 800222c:	2105      	movs	r1, #5
 800222e:	2064      	movs	r0, #100	; 0x64
 8002230:	f7ff fdc2 	bl	8001db8 <Display_SystemVoltage>

	Display_Temperature(10, 100, Temperature_Motor);									// Темература от датчика мотора
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <StartTask_LCD+0x7c>)
 8002236:	cb18      	ldmia	r3, {r3, r4}
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	2164      	movs	r1, #100	; 0x64
 800223e:	200a      	movs	r0, #10
 8002240:	f7ff fe7e 	bl	8001f40 <Display_Temperature>
	Display_Temperature(10, 140, Temperature_Driver);									// Темература от датчика драйвера
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <StartTask_LCD+0x80>)
 8002246:	cb18      	ldmia	r3, {r3, r4}
 8002248:	461a      	mov	r2, r3
 800224a:	4623      	mov	r3, r4
 800224c:	218c      	movs	r1, #140	; 0x8c
 800224e:	200a      	movs	r0, #10
 8002250:	f7ff fe76 	bl	8001f40 <Display_Temperature>
	Display_Temperature(10, 180, Temperature_Air);										// Темература от датчика воздуха
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <StartTask_LCD+0x84>)
 8002256:	cb18      	ldmia	r3, {r3, r4}
 8002258:	461a      	mov	r2, r3
 800225a:	4623      	mov	r3, r4
 800225c:	21b4      	movs	r1, #180	; 0xb4
 800225e:	200a      	movs	r0, #10
 8002260:	f7ff fe6e 	bl	8001f40 <Display_Temperature>

	LED_GREEN_INV;
 8002264:	2110      	movs	r1, #16
 8002266:	4808      	ldr	r0, [pc, #32]	; (8002288 <StartTask_LCD+0x88>)
 8002268:	f003 fdc5 	bl	8005df6 <HAL_GPIO_TogglePin>

    osDelay(200);
 800226c:	20c8      	movs	r0, #200	; 0xc8
 800226e:	f00c fdf3 	bl	800ee58 <osDelay>
	Display_Test(0,0);
 8002272:	e7c9      	b.n	8002208 <StartTask_LCD+0x8>
 8002274:	20003a88 	.word	0x20003a88
 8002278:	20003a0e 	.word	0x20003a0e
 800227c:	200039f0 	.word	0x200039f0
 8002280:	20003a20 	.word	0x20003a20
 8002284:	20003a00 	.word	0x20003a00
 8002288:	40020800 	.word	0x40020800

0800228c <StartTask_ADC>:
  }
}
//======================================================================================
void StartTask_ADC(void *argument)														// Поток для сканирования АЦП (Напряжения питания и мотора, Тока питания и мотора, положения регулятора скорости)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 8002294:	f7fe ff10 	bl	80010b8 <ADC_ScanState>
    osDelay(50);
 8002298:	2032      	movs	r0, #50	; 0x32
 800229a:	f00c fddd 	bl	800ee58 <osDelay>
	ADC_ScanState();																	// Замер из АЦП по всем каналам сразу
 800229e:	e7f9      	b.n	8002294 <StartTask_ADC+0x8>

080022a0 <StartTask_ScanControls>:
  }
}
//======================================================================================
void StartTask_ScanControls(void *argument)												// Поток сканироваяни элементов управления
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim4);
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <StartTask_ScanControls+0x24>)
 80022aa:	f006 fb63 	bl	8008974 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);											// Запустить TIM4 для анализа оборотов бака
 80022ae:	2100      	movs	r1, #0
 80022b0:	4804      	ldr	r0, [pc, #16]	; (80022c4 <StartTask_ScanControls+0x24>)
 80022b2:	f006 fcfd 	bl	8008cb0 <HAL_TIM_IC_Start_IT>

  for(;;)
  {
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 80022b6:	f001 fa6b 	bl	8003790 <Motor_Scan_DirectionState>
//	else
//		LED_LIGHT_SET;



    osDelay(10);
 80022ba:	200a      	movs	r0, #10
 80022bc:	f00c fdcc 	bl	800ee58 <osDelay>
	Motor_Scan_DirectionState(); 														// Сканирование переключателя направления движения мотора
 80022c0:	e7f9      	b.n	80022b6 <StartTask_ScanControls+0x16>
 80022c2:	bf00      	nop
 80022c4:	20003ce8 	.word	0x20003ce8

080022c8 <StartTask_ScanTemperature>:
  }
}
//======================================================================================
void StartTask_ScanTemperature(void *argument)											// Поток сканирования температуры по 1-Wire от термодатчиков DS18B20
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  osDelay(200);
 80022d0:	20c8      	movs	r0, #200	; 0xc8
 80022d2:	f00c fdc1 	bl	800ee58 <osDelay>

  for(;;)
  {
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 80022d6:	2102      	movs	r1, #2
 80022d8:	4824      	ldr	r0, [pc, #144]	; (800236c <StartTask_ScanTemperature+0xa4>)
 80022da:	f7ff fb9b 	bl	8001a14 <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_DRIVER_1W_GPIO_Port,	TEMP_DRIVER_1W_Pin);		// Запрос на старт замера температуры драйвера мотора
 80022de:	2104      	movs	r1, #4
 80022e0:	4822      	ldr	r0, [pc, #136]	; (800236c <StartTask_ScanTemperature+0xa4>)
 80022e2:	f7ff fb97 	bl	8001a14 <DS18B20_Measure_Async_Start>
	DS18B20_Measure_Async_Start(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Запрос на старт замера температуры воздуха
 80022e6:	2101      	movs	r1, #1
 80022e8:	4820      	ldr	r0, [pc, #128]	; (800236c <StartTask_ScanTemperature+0xa4>)
 80022ea:	f7ff fb93 	bl	8001a14 <DS18B20_Measure_Async_Start>
	osDelay(1000);																		// задержка для 12-битного преобразования
 80022ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f2:	f00c fdb1 	bl	800ee58 <osDelay>
	Temperature_Motor_RAW	= DS18B20_Measure_Async_FinishN(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры мотора
 80022f6:	2102      	movs	r1, #2
 80022f8:	481c      	ldr	r0, [pc, #112]	; (800236c <StartTask_ScanTemperature+0xa4>)
 80022fa:	f7ff fbc9 	bl	8001a90 <DS18B20_Measure_Async_FinishN>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <StartTask_ScanTemperature+0xa8>)
 8002304:	801a      	strh	r2, [r3, #0]
	Temperature_Driver_RAW	= DS18B20_Measure_Async_FinishN(TEMP_DRIVER_1W_GPIO_Port, 	TEMP_DRIVER_1W_Pin);		// Возврат ответа от финальной фазы замера для температуры драйвера мотора
 8002306:	2104      	movs	r1, #4
 8002308:	4818      	ldr	r0, [pc, #96]	; (800236c <StartTask_ScanTemperature+0xa4>)
 800230a:	f7ff fbc1 	bl	8001a90 <DS18B20_Measure_Async_FinishN>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <StartTask_ScanTemperature+0xac>)
 8002314:	801a      	strh	r2, [r3, #0]
	Temperature_Air_RAW		= DS18B20_Measure_Async_FinishN(TEMP_AIR_1W_GPIO_Port, 		TEMP_AIR_1W_Pin);			// Возврат ответа от финальной фазы замера для температуры воздуха
 8002316:	2101      	movs	r1, #1
 8002318:	4814      	ldr	r0, [pc, #80]	; (800236c <StartTask_ScanTemperature+0xa4>)
 800231a:	f7ff fbb9 	bl	8001a90 <DS18B20_Measure_Async_FinishN>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <StartTask_ScanTemperature+0xb0>)
 8002324:	801a      	strh	r2, [r3, #0]

	Temperature_Motor		= DS18B20_Temperature_Double(Temperature_Motor_RAW);		// Пересчет в double
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <StartTask_ScanTemperature+0xa8>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fc06 	bl	8001b3c <DS18B20_Temperature_Double>
 8002330:	4603      	mov	r3, r0
 8002332:	460c      	mov	r4, r1
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <StartTask_ScanTemperature+0xb4>)
 8002336:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Driver		= DS18B20_Temperature_Double(Temperature_Driver_RAW);		// Пересчет в double
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <StartTask_ScanTemperature+0xac>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fbfc 	bl	8001b3c <DS18B20_Temperature_Double>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <StartTask_ScanTemperature+0xb8>)
 800234a:	e9c2 3400 	strd	r3, r4, [r2]
	Temperature_Air			= DS18B20_Temperature_Double(Temperature_Air_RAW);			// Пересчет в double
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <StartTask_ScanTemperature+0xb0>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fbf2 	bl	8001b3c <DS18B20_Temperature_Double>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	4a09      	ldr	r2, [pc, #36]	; (8002384 <StartTask_ScanTemperature+0xbc>)
 800235e:	e9c2 3400 	strd	r3, r4, [r2]

    osDelay(15000);																		// Интервал сканирования температур - 10 сек
 8002362:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002366:	f00c fd77 	bl	800ee58 <osDelay>
	DS18B20_Measure_Async_Start(TEMP_MOTOR_1W_GPIO_Port, 	TEMP_MOTOR_1W_Pin);			// Запрос на старт замера температуры мотора
 800236a:	e7b4      	b.n	80022d6 <StartTask_ScanTemperature+0xe>
 800236c:	40020400 	.word	0x40020400
 8002370:	20003a2e 	.word	0x20003a2e
 8002374:	20003a10 	.word	0x20003a10
 8002378:	20003a2c 	.word	0x20003a2c
 800237c:	200039f0 	.word	0x200039f0
 8002380:	20003a20 	.word	0x20003a20
 8002384:	20003a00 	.word	0x20003a00

08002388 <StartTask_SetState>:
  }
}
//======================================================================================
void StartTask_SetState(void *argument)													// Поток установки сотояний системы
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <StartTask_SetState+0x98>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f001 fa4d 	bl	8003834 <Motor_Set_DirectionState>

	//DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)2.55));				// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V]
	DAC_SetValue((uint8_t)((double)Speed_value_percent*(double)1.58));					// Установить скорость мотора и пересчитать шкалу из  [0..100] в [0..255], получим на выход е DAC напряжение [0..3.3V] (1.58 - коэф чтобы получить на выходе 0..5V после ЦАП+ОУ)
 800239a:	4b22      	ldr	r3, [pc, #136]	; (8002424 <StartTask_SetState+0x9c>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f838 	bl	8000414 <__aeabi_ui2d>
 80023a4:	a31a      	add	r3, pc, #104	; (adr r3, 8002410 <StartTask_SetState+0x88>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f8ad 	bl	8000508 <__aeabi_dmul>
 80023ae:	4603      	mov	r3, r0
 80023b0:	460c      	mov	r4, r1
 80023b2:	4618      	mov	r0, r3
 80023b4:	4621      	mov	r1, r4
 80023b6:	f7fe fb7f 	bl	8000ab8 <__aeabi_d2uiz>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f938 	bl	8001634 <DAC_SetValue>

	MotorSpeed = ((MotorSpeed_Period > 0) ? ((uint16_t)((double)60000/(double)MotorSpeed_Period)) : (0) );			// Пересчет периода оборотов мотора от датчика Холла в скорость (стелано на таймере-4)
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <StartTask_SetState+0xa0>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d016      	beq.n	80023fa <StartTask_SetState+0x72>
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <StartTask_SetState+0xa0>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f81f 	bl	8000414 <__aeabi_ui2d>
 80023d6:	4603      	mov	r3, r0
 80023d8:	460c      	mov	r4, r1
 80023da:	461a      	mov	r2, r3
 80023dc:	4623      	mov	r3, r4
 80023de:	a10e      	add	r1, pc, #56	; (adr r1, 8002418 <StartTask_SetState+0x90>)
 80023e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023e4:	f7fe f9ba 	bl	800075c <__aeabi_ddiv>
 80023e8:	4603      	mov	r3, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	4618      	mov	r0, r3
 80023ee:	4621      	mov	r1, r4
 80023f0:	f7fe fb62 	bl	8000ab8 <__aeabi_d2uiz>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	e000      	b.n	80023fc <StartTask_SetState+0x74>
 80023fa:	2300      	movs	r3, #0
 80023fc:	4a0b      	ldr	r2, [pc, #44]	; (800242c <StartTask_SetState+0xa4>)
 80023fe:	8013      	strh	r3, [r2, #0]


	//FAN_Set_Speed(Speed_value_percent);													// Установить скорость мотора вентилятора охлаждения (ШИМ)
	FAN_Set_Speed(0);																	// Установить скорость мотора вентилятора охлаждения (ШИМ)
 8002400:	2000      	movs	r0, #0
 8002402:	f001 fa61 	bl	80038c8 <FAN_Set_Speed>



    osDelay(20);
 8002406:	2014      	movs	r0, #20
 8002408:	f00c fd26 	bl	800ee58 <osDelay>
	Motor_Set_DirectionState(MotorDirection);											// Установить направление мотора
 800240c:	e7c0      	b.n	8002390 <StartTask_SetState+0x8>
 800240e:	bf00      	nop
 8002410:	147ae148 	.word	0x147ae148
 8002414:	3ff947ae 	.word	0x3ff947ae
 8002418:	00000000 	.word	0x00000000
 800241c:	40ed4c00 	.word	0x40ed4c00
 8002420:	20003a88 	.word	0x20003a88
 8002424:	200039f8 	.word	0x200039f8
 8002428:	20003a28 	.word	0x20003a28
 800242c:	20003a0e 	.word	0x20003a0e

08002430 <MX_GPIO_Init>:
//         EXTI
//     PA8 ------> RCC_MCO

//======================================================================================
void MX_GPIO_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	; 0x30
 8002434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	4b52      	ldr	r3, [pc, #328]	; (8002590 <MX_GPIO_Init+0x160>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a51      	ldr	r2, [pc, #324]	; (8002590 <MX_GPIO_Init+0x160>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <MX_GPIO_Init+0x160>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <MX_GPIO_Init+0x160>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <MX_GPIO_Init+0x160>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <MX_GPIO_Init+0x160>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4b46      	ldr	r3, [pc, #280]	; (8002590 <MX_GPIO_Init+0x160>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a45      	ldr	r2, [pc, #276]	; (8002590 <MX_GPIO_Init+0x160>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	61d3      	str	r3, [r2, #28]
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <MX_GPIO_Init+0x160>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	4b40      	ldr	r3, [pc, #256]	; (8002590 <MX_GPIO_Init+0x160>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a3f      	ldr	r2, [pc, #252]	; (8002590 <MX_GPIO_Init+0x160>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	61d3      	str	r3, [r2, #28]
 800249a:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <MX_GPIO_Init+0x160>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <MX_GPIO_Init+0x160>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a39      	ldr	r2, [pc, #228]	; (8002590 <MX_GPIO_Init+0x160>)
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <MX_GPIO_Init+0x160>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <MX_GPIO_Init+0x160>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a33      	ldr	r2, [pc, #204]	; (8002590 <MX_GPIO_Init+0x160>)
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	61d3      	str	r3, [r2, #28]
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <MX_GPIO_Init+0x160>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	21e0      	movs	r1, #224	; 0xe0
 80024da:	482e      	ldr	r0, [pc, #184]	; (8002594 <MX_GPIO_Init+0x164>)
 80024dc:	f003 fc73 	bl	8005dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 80024e0:	2200      	movs	r2, #0
 80024e2:	211f      	movs	r1, #31
 80024e4:	482c      	ldr	r0, [pc, #176]	; (8002598 <MX_GPIO_Init+0x168>)
 80024e6:	f003 fc6e 	bl	8005dc6 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SD_CS_Pin, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f0:	482a      	ldr	r0, [pc, #168]	; (800259c <MX_GPIO_Init+0x16c>)
 80024f2:	f003 fc68 	bl	8005dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_LIGHT_Pin|MOTOR_FWD_Pin|MOTOR_BWD_Pin;
 80024f6:	23e0      	movs	r3, #224	; 0xe0
 80024f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	4821      	ldr	r0, [pc, #132]	; (8002594 <MX_GPIO_Init+0x164>)
 800250e:	f003 fab5 	bl	8005a7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_LCD_DC_Pin|SPI2_LCD_RST_Pin|SPI2_LCD_CS_Pin|SPI2_LCD_LED_Pin
 8002512:	231f      	movs	r3, #31
 8002514:	61fb      	str	r3, [r7, #28]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	4619      	mov	r1, r3
 8002528:	481b      	ldr	r0, [pc, #108]	; (8002598 <MX_GPIO_Init+0x168>)
 800252a:	f003 faa7 	bl	8005a7c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = SPI1_SD_CS_Pin;
 800252e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	4619      	mov	r1, r3
 8002546:	4815      	ldr	r0, [pc, #84]	; (800259c <MX_GPIO_Init+0x16c>)
 8002548:	f003 fa98 	bl	8005a7c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = INT_IMU_Pin;
 800254c:	2301      	movs	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <MX_GPIO_Init+0x170>)
 8002552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INT_IMU_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	4811      	ldr	r0, [pc, #68]	; (80025a4 <MX_GPIO_Init+0x174>)
 8002560:	f003 fa8c 	bl	8005a7c <HAL_GPIO_Init>

  // Выход тактовой частоты MCO
  GPIO_InitStruct.Pin = MCO_Pin;
 8002564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	4619      	mov	r1, r3
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <MX_GPIO_Init+0x178>)
 8002582:	f003 fa7b 	bl	8005a7c <HAL_GPIO_Init>

}
 8002586:	bf00      	nop
 8002588:	3730      	adds	r7, #48	; 0x30
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	40021000 	.word	0x40021000
 8002598:	40020800 	.word	0x40020800
 800259c:	40020400 	.word	0x40020400
 80025a0:	10110000 	.word	0x10110000
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40020000 	.word	0x40020000

080025ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

//======================================================================================
void MX_I2C1_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <MX_I2C1_Init+0x54>)
 80025b2:	4a14      	ldr	r2, [pc, #80]	; (8002604 <MX_I2C1_Init+0x58>)
 80025b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_I2C1_Init+0x54>)
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <MX_I2C1_Init+0x5c>)
 80025ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <MX_I2C1_Init+0x54>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <MX_I2C1_Init+0x54>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <MX_I2C1_Init+0x54>)
 80025ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <MX_I2C1_Init+0x54>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <MX_I2C1_Init+0x54>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <MX_I2C1_Init+0x54>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <MX_I2C1_Init+0x54>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <MX_I2C1_Init+0x54>)
 80025ea:	f003 fc1d 	bl	8005e28 <HAL_I2C_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <MX_I2C1_Init+0x4e>
  {
    Error_Handler(7);
 80025f4:	2007      	movs	r0, #7
 80025f6:	f001 f893 	bl	8003720 <Error_Handler>
  }

}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20003ba0 	.word	0x20003ba0
 8002604:	40005400 	.word	0x40005400
 8002608:	00061a80 	.word	0x00061a80

0800260c <HAL_I2C_MspInit>:
//======================================================================================
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_I2C_MspInit+0x7c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d128      	bne.n	8002680 <HAL_I2C_MspInit+0x74>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_I2C_MspInit+0x80>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_I2C_MspInit+0x80>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_I2C_MspInit+0x80>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002646:	f44f 7340 	mov.w	r3, #768	; 0x300
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264c:	2312      	movs	r3, #18
 800264e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002650:	2301      	movs	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002658:	2304      	movs	r3, #4
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4619      	mov	r1, r3
 8002662:	480b      	ldr	r0, [pc, #44]	; (8002690 <HAL_I2C_MspInit+0x84>)
 8002664:	f003 fa0a 	bl	8005a7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_I2C_MspInit+0x80>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_I2C_MspInit+0x80>)
 800266e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002672:	6253      	str	r3, [r2, #36]	; 0x24
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_I2C_MspInit+0x80>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
  }
}
 8002680:	bf00      	nop
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40005400 	.word	0x40005400
 800268c:	40023800 	.word	0x40023800
 8002690:	40020400 	.word	0x40020400

08002694 <Keys_Init>:
 */
#include "keys.h"

//=======================================================================================
void  Keys_Init(void)																	// Настройка GPIO портов для кнопок
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <Keys_Init+0x134>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <Keys_Init+0x134>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	61d3      	str	r3, [r2, #28]
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <Keys_Init+0x134>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <Keys_Init+0x134>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a44      	ldr	r2, [pc, #272]	; (80027c8 <Keys_Init+0x134>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b42      	ldr	r3, [pc, #264]	; (80027c8 <Keys_Init+0x134>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <Keys_Init+0x134>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a3e      	ldr	r2, [pc, #248]	; (80027c8 <Keys_Init+0x134>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	61d3      	str	r3, [r2, #28]
 80026d6:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <Keys_Init+0x134>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <Keys_Init+0x134>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <Keys_Init+0x134>)
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <Keys_Init+0x134>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80026fa:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <Keys_Init+0x134>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <Keys_Init+0x134>)
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	61d3      	str	r3, [r2, #28]
 8002706:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <Keys_Init+0x134>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <Keys_Init+0x134>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <Keys_Init+0x134>)
 8002718:	f043 0320 	orr.w	r3, r3, #32
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <Keys_Init+0x134>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;


	// BTN_START
	GPIO_InitStruct.Pin 		= BTN_START_Pin;
 800272a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8002730:	4b26      	ldr	r3, [pc, #152]	; (80027cc <Keys_Init+0x138>)
 8002732:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002738:	2301      	movs	r3, #1
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 800273c:	f107 031c 	add.w	r3, r7, #28
 8002740:	4619      	mov	r1, r3
 8002742:	4823      	ldr	r0, [pc, #140]	; (80027d0 <Keys_Init+0x13c>)
 8002744:	f003 f99a 	bl	8005a7c <HAL_GPIO_Init>


	// BTN_STOP
	GPIO_InitStruct.Pin 		= BTN_STOP_Pin;
 8002748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800274c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <Keys_Init+0x138>)
 8002750:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002756:	2301      	movs	r3, #1
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_STOP_GPIO_Port, &GPIO_InitStruct);
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4619      	mov	r1, r3
 8002760:	481b      	ldr	r0, [pc, #108]	; (80027d0 <Keys_Init+0x13c>)
 8002762:	f003 f98b 	bl	8005a7c <HAL_GPIO_Init>

	// BTN_MOTOR
	GPIO_InitStruct.Pin 		= BTN_MOTOR_Pin;
 8002766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <Keys_Init+0x138>)
 800276e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002774:	2301      	movs	r3, #1
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4814      	ldr	r0, [pc, #80]	; (80027d0 <Keys_Init+0x13c>)
 8002780:	f003 f97c 	bl	8005a7c <HAL_GPIO_Init>

	// Вход переключателя МОТОР ВПЕРЕД
	GPIO_InitStruct.Pin 		= BTN_FWD_Pin;
 8002784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002788:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <Keys_Init+0x138>)
 800278c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 8002792:	2301      	movs	r3, #1
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_FWD_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	4619      	mov	r1, r3
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <Keys_Init+0x13c>)
 800279e:	f003 f96d 	bl	8005a7c <HAL_GPIO_Init>

	// Вход переключателя МОТОР НАЗАД
	GPIO_InitStruct.Pin 		= BTN_BWD_Pin;
 80027a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <Keys_Init+0x138>)
 80027aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed		= GPIO_SPEED_FREQ_MEDIUM;
 80027b0:	2301      	movs	r3, #1
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BTN_BWD_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <Keys_Init+0x13c>)
 80027bc:	f003 f95e 	bl	8005a7c <HAL_GPIO_Init>
	 // включаем прерывания
	//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
	//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


}
 80027c0:	bf00      	nop
 80027c2:	3730      	adds	r7, #48	; 0x30
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	10210000 	.word	0x10210000
 80027d0:	40020c00 	.word	0x40020c00

080027d4 <MX_SPI1_Init>:

DMA_HandleTypeDef hdma_spi2_tx;

//======================================================================================
void MX_SPI1_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <MX_SPI1_Init+0x68>)
 80027da:	4a19      	ldr	r2, [pc, #100]	; (8002840 <MX_SPI1_Init+0x6c>)
 80027dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_SPI1_Init+0x68>)
 80027e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <MX_SPI1_Init+0x68>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <MX_SPI1_Init+0x68>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <MX_SPI1_Init+0x68>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <MX_SPI1_Init+0x68>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_SPI1_Init+0x68>)
 8002800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <MX_SPI1_Init+0x68>)
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MX_SPI1_Init+0x68>)
 800280e:	2200      	movs	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <MX_SPI1_Init+0x68>)
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <MX_SPI1_Init+0x68>)
 800281a:	2200      	movs	r2, #0
 800281c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <MX_SPI1_Init+0x68>)
 8002820:	220a      	movs	r2, #10
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002824:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_SPI1_Init+0x68>)
 8002826:	f005 fd6d 	bl	8008304 <HAL_SPI_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <MX_SPI1_Init+0x62>
  {
    Error_Handler(6);
 8002830:	2006      	movs	r0, #6
 8002832:	f000 ff75 	bl	8003720 <Error_Handler>
  }

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20003c4c 	.word	0x20003c4c
 8002840:	40013000 	.word	0x40013000

08002844 <MX_SPI2_Init>:
//======================================================================================
void MX_SPI2_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <MX_SPI2_Init+0x68>)
 800284a:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <MX_SPI2_Init+0x6c>)
 800284c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <MX_SPI2_Init+0x68>)
 8002850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002854:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_SPI2_Init+0x68>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <MX_SPI2_Init+0x68>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MX_SPI2_Init+0x68>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <MX_SPI2_Init+0x68>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MX_SPI2_Init+0x68>)
 8002870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002874:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <MX_SPI2_Init+0x68>)
 8002878:	2200      	movs	r2, #0
 800287a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <MX_SPI2_Init+0x68>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <MX_SPI2_Init+0x68>)
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <MX_SPI2_Init+0x68>)
 800288a:	2200      	movs	r2, #0
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <MX_SPI2_Init+0x68>)
 8002890:	220a      	movs	r2, #10
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_SPI2_Init+0x68>)
 8002896:	f005 fd35 	bl	8008304 <HAL_SPI_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <MX_SPI2_Init+0x62>
  {
    Error_Handler(6);
 80028a0:	2006      	movs	r0, #6
 80028a2:	f000 ff3d 	bl	8003720 <Error_Handler>
  }

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20003bf4 	.word	0x20003bf4
 80028b0:	40003800 	.word	0x40003800

080028b4 <HAL_SPI_MspInit>:
//======================================================================================
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a42      	ldr	r2, [pc, #264]	; (80029dc <HAL_SPI_MspInit+0x128>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d128      	bne.n	8002928 <HAL_SPI_MspInit+0x74>
  {
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028d6:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a41      	ldr	r2, [pc, #260]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 80028dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e0:	6213      	str	r3, [r2, #32]
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	61d3      	str	r3, [r2, #28]
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SD_SCK_Pin|SPI1_SD_MISO_Pin|SPI1_SD_MOSI_Pin;
 8002906:	23e0      	movs	r3, #224	; 0xe0
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002916:	2305      	movs	r3, #5
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	4830      	ldr	r0, [pc, #192]	; (80029e4 <HAL_SPI_MspInit+0x130>)
 8002922:	f003 f8ab 	bl	8005a7c <HAL_GPIO_Init>
      Error_Handler(6);
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
  }
}
 8002926:	e055      	b.n	80029d4 <HAL_SPI_MspInit+0x120>
  else if(spiHandle->Instance==SPI2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <HAL_SPI_MspInit+0x134>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d150      	bne.n	80029d4 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6253      	str	r3, [r2, #36]	; 0x24
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	61d3      	str	r3, [r2, #28]
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_SPI_MspInit+0x12c>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8002962:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	2303      	movs	r3, #3
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002974:	2305      	movs	r3, #5
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	481b      	ldr	r0, [pc, #108]	; (80029ec <HAL_SPI_MspInit+0x138>)
 8002980:	f003 f87c 	bl	8005a7c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 8002986:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_SPI_MspInit+0x140>)
 8002988:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 800298c:	2210      	movs	r2, #16
 800298e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 80029b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80029b6:	480e      	ldr	r0, [pc, #56]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 80029b8:	f002 fefc 	bl	80057b4 <HAL_DMA_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_SPI_MspInit+0x114>
      Error_Handler(6);
 80029c2:	2006      	movs	r0, #6
 80029c4:	f000 feac 	bl	8003720 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 80029cc:	649a      	str	r2, [r3, #72]	; 0x48
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_SPI_MspInit+0x13c>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80029d4:	bf00      	nop
 80029d6:	3730      	adds	r7, #48	; 0x30
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40013000 	.word	0x40013000
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020000 	.word	0x40020000
 80029e8:	40003800 	.word	0x40003800
 80029ec:	40020400 	.word	0x40020400
 80029f0:	20003ca4 	.word	0x20003ca4
 80029f4:	40026058 	.word	0x40026058

080029f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

//======================================================================================
void MX_TIM3_Init(void)																	// обслуживание энкодера для меню
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	2224      	movs	r2, #36	; 0x24
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f00f fbfb 	bl	8012202 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <MX_TIM3_Init+0xa8>)
 8002a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a28:	2264      	movs	r2, #100	; 0x64
 8002a2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a40:	2301      	movs	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a50:	2301      	movs	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	4619      	mov	r1, r3
 8002a62:	480e      	ldr	r0, [pc, #56]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a64:	f006 f9ee 	bl	8008e44 <HAL_TIM_Encoder_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <MX_TIM3_Init+0x7c>
  {
    Error_Handler(4);
 8002a6e:	2004      	movs	r0, #4
 8002a70:	f000 fe56 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4806      	ldr	r0, [pc, #24]	; (8002a9c <MX_TIM3_Init+0xa4>)
 8002a82:	f007 f8b1 	bl	8009be8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler(4);
 8002a8c:	2004      	movs	r0, #4
 8002a8e:	f000 fe47 	bl	8003720 <Error_Handler>
  }

}
 8002a92:	bf00      	nop
 8002a94:	3730      	adds	r7, #48	; 0x30
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20003d68 	.word	0x20003d68
 8002aa0:	40000400 	.word	0x40000400

08002aa4 <MX_TIM4_Init>:
//======================================================================================
void MX_TIM4_Init(void)																	// Для рассчета периода сигнала от магнитного датчика оборотов бака (скорость оборотов)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	f107 0318 	add.w	r3, r7, #24
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]

	  htim4.Instance = TIM4;
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002ad0:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <MX_TIM4_Init+0xec>)
 8002ad2:	601a      	str	r2, [r3, #0]
	  htim4.Init.Prescaler = 32000 - 1;													// точность счета по 100мкс
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002ad6:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8002ada:	605a      	str	r2, [r3, #4]
	  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
	  htim4.Init.Period = 3000; 														// переполнение за 3 сек (до 20 оборотов в минуту считаем нулевой скоростью)
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002ae4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ae8:	60da      	str	r2, [r3, #12]
	  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002aea:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af0:	611a      	str	r2, [r3, #16]
	  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	615a      	str	r2, [r3, #20]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002af8:	4824      	ldr	r0, [pc, #144]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002afa:	f005 fe93 	bl	8008824 <HAL_TIM_Base_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <MX_TIM4_Init+0x66>
	  {
	    Error_Handler(4);
 8002b04:	2004      	movs	r0, #4
 8002b06:	f000 fe0b 	bl	8003720 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b10:	f107 0318 	add.w	r3, r7, #24
 8002b14:	4619      	mov	r1, r3
 8002b16:	481d      	ldr	r0, [pc, #116]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002b18:	f006 fc60 	bl	80093dc <HAL_TIM_ConfigClockSource>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <MX_TIM4_Init+0x84>
	  {
	    Error_Handler(4);
 8002b22:	2004      	movs	r0, #4
 8002b24:	f000 fdfc 	bl	8003720 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002b28:	4818      	ldr	r0, [pc, #96]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002b2a:	f006 f879 	bl	8008c20 <HAL_TIM_IC_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <MX_TIM4_Init+0x96>
	  {
	    Error_Handler(4);
 8002b34:	2004      	movs	r0, #4
 8002b36:	f000 fdf3 	bl	8003720 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4619      	mov	r1, r3
 8002b48:	4810      	ldr	r0, [pc, #64]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002b4a:	f007 f84d 	bl	8009be8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <MX_TIM4_Init+0xb6>
	  {
	    Error_Handler(4);
 8002b54:	2004      	movs	r0, #4
 8002b56:	f000 fde3 	bl	8003720 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	603b      	str	r3, [r7, #0]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICFilter = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4806      	ldr	r0, [pc, #24]	; (8002b8c <MX_TIM4_Init+0xe8>)
 8002b72:	f006 fae1 	bl	8009138 <HAL_TIM_IC_ConfigChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <MX_TIM4_Init+0xde>
	  {
	    Error_Handler(4);
 8002b7c:	2004      	movs	r0, #4
 8002b7e:	f000 fdcf 	bl	8003720 <Error_Handler>
//  {
//    Error_Handler(4);
//  }
//  HAL_TIM_MspPostInit(&htim4);

}
 8002b82:	bf00      	nop
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20003ce8 	.word	0x20003ce8
 8002b90:	40000800 	.word	0x40000800

08002b94 <MX_TIM6_Init>:
//======================================================================================
void MX_TIM6_Init(void)																	// Для генерации звука на динамике (чтобы не хрипел от прерываний и RtOS)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
//  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
//  {
//    Error_Handler(4);
//  }
//
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <MX_TIM9_Init>:
//======================================================================================
void MX_TIM9_Init(void)																	// источник микросекундных тиков (для отладки FreeRTOS)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]

  htim9.Instance = TIM9;
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <MX_TIM9_Init+0x9c>)
 8002bc0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32;
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002be2:	4815      	ldr	r0, [pc, #84]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002be4:	f005 fe1e 	bl	8008824 <HAL_TIM_Base_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <MX_TIM9_Init+0x54>
  {
    Error_Handler(4);
 8002bee:	2004      	movs	r0, #4
 8002bf0:	f000 fd96 	bl	8003720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002bfa:	f107 0308 	add.w	r3, r7, #8
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002c02:	f006 fbeb 	bl	80093dc <HAL_TIM_ConfigClockSource>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <MX_TIM9_Init+0x72>
  {
    Error_Handler(4);
 8002c0c:	2004      	movs	r0, #4
 8002c0e:	f000 fd87 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4806      	ldr	r0, [pc, #24]	; (8002c38 <MX_TIM9_Init+0x98>)
 8002c20:	f006 ffe2 	bl	8009be8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <MX_TIM9_Init+0x90>
  {
    Error_Handler(4);
 8002c2a:	2004      	movs	r0, #4
 8002c2c:	f000 fd78 	bl	8003720 <Error_Handler>
  }

}
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20003e28 	.word	0x20003e28
 8002c3c:	40010800 	.word	0x40010800

08002c40 <MX_TIM10_Init>:
//======================================================================================
void MX_TIM10_Init(void)																	// источник микросекундных тиков (для DelayUS() )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c46:	f107 0308 	add.w	r3, r7, #8
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	463b      	mov	r3, r7
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]

  htim10.Instance = TIM10;
 8002c5c:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <MX_TIM10_Init+0x9c>)
 8002c60:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 32;
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002c64:	2220      	movs	r2, #32
 8002c66:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c74:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c82:	4815      	ldr	r0, [pc, #84]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002c84:	f005 fdce 	bl	8008824 <HAL_TIM_Base_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <MX_TIM10_Init+0x54>
  {
    Error_Handler(4);
 8002c8e:	2004      	movs	r0, #4
 8002c90:	f000 fd46 	bl	8003720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002c9a:	f107 0308 	add.w	r3, r7, #8
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002ca2:	f006 fb9b 	bl	80093dc <HAL_TIM_ConfigClockSource>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <MX_TIM10_Init+0x72>
  {
    Error_Handler(4);
 8002cac:	2004      	movs	r0, #4
 8002cae:	f000 fd37 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <MX_TIM10_Init+0x98>)
 8002cc0:	f006 ff92 	bl	8009be8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <MX_TIM10_Init+0x90>
  {
    Error_Handler(4);
 8002cca:	2004      	movs	r0, #4
 8002ccc:	f000 fd28 	bl	8003720 <Error_Handler>
  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20003d28 	.word	0x20003d28
 8002cdc:	40010c00 	.word	0x40010c00

08002ce0 <MX_TIM11_Init>:
//======================================================================================

void MX_TIM11_Init(void)																// ШИМ управление оборотами мотора вентилятора охлаждения контроллера двигателя
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce6:	f107 0310 	add.w	r3, r7, #16
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]

  htim11.Instance = TIM11;
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d02:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <MX_TIM11_Init+0xc4>)
 8002d04:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 32000;  														// Делим с тактовой процессора 32000000/32000 = 1000Гц на вход счетчика (1мс на 1 тик)
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d08:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002d0c:	605a      	str	r2, [r3, #4]
  htim11.Init.Period = 100;																// 100 тиков полный цикл = 100мс = 10Гц период ШИМ. В TIM11->CCR1 записывается сравнение 0..100 - получаем нужную скважность
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d10:	2264      	movs	r2, #100	; 0x64
 8002d12:	60da      	str	r2, [r3, #12]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d26:	481e      	ldr	r0, [pc, #120]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d28:	f005 fd7c 	bl	8008824 <HAL_TIM_Base_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <MX_TIM11_Init+0x58>
  {
    Error_Handler(4);
 8002d32:	2004      	movs	r0, #4
 8002d34:	f000 fcf4 	bl	8003720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	4619      	mov	r1, r3
 8002d44:	4816      	ldr	r0, [pc, #88]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d46:	f006 fb49 	bl	80093dc <HAL_TIM_ConfigClockSource>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <MX_TIM11_Init+0x76>
  {
    Error_Handler(4);
 8002d50:	2004      	movs	r0, #4
 8002d52:	f000 fce5 	bl	8003720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002d56:	4812      	ldr	r0, [pc, #72]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d58:	f005 fe84 	bl	8008a64 <HAL_TIM_PWM_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <MX_TIM11_Init+0x88>
  {
    Error_Handler(4);
 8002d62:	2004      	movs	r0, #4
 8002d64:	f000 fcdc 	bl	8003720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d68:	2360      	movs	r3, #96	; 0x60
 8002d6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d78:	463b      	mov	r3, r7
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4808      	ldr	r0, [pc, #32]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d80:	f006 fa6e 	bl	8009260 <HAL_TIM_PWM_ConfigChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <MX_TIM11_Init+0xb0>
  {
    Error_Handler(4);
 8002d8a:	2004      	movs	r0, #4
 8002d8c:	f000 fcc8 	bl	8003720 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 8002d90:	4803      	ldr	r0, [pc, #12]	; (8002da0 <MX_TIM11_Init+0xc0>)
 8002d92:	f000 f8d1 	bl	8002f38 <HAL_TIM_MspPostInit>

}
 8002d96:	bf00      	nop
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20003da8 	.word	0x20003da8
 8002da4:	40011000 	.word	0x40011000

08002da8 <HAL_TIM_Encoder_MspInit>:
//======================================================================================
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

//  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_encoderHandle->Instance==TIM3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_TIM_Encoder_MspInit+0x44>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d113      	bne.n	8002de2 <HAL_TIM_Encoder_MspInit+0x3a>
  {
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_TIM_Encoder_MspInit+0x48>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <HAL_TIM_Encoder_MspInit+0x48>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6253      	str	r3, [r2, #36]	; 0x24
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_TIM_Encoder_MspInit+0x48>)
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
//    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	201d      	movs	r0, #29
 8002dd8:	f002 fbd7 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ddc:	201d      	movs	r0, #29
 8002dde:	f002 fbf0 	bl	80055c2 <HAL_NVIC_EnableIRQ>
  }
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_TIM_Base_MspInit>:
//======================================================================================
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08e      	sub	sp, #56	; 0x38
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <HAL_TIM_Base_MspInit+0x128>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d12f      	bne.n	8002e76 <HAL_TIM_Base_MspInit+0x82>
  {
	/* TIM4 clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 8002e16:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	4a41      	ldr	r2, [pc, #260]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	6253      	str	r3, [r2, #36]	; 0x24
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	61d3      	str	r3, [r2, #28]
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
	/**TIM4 GPIO Configuration
	PB6     ------> TIM4_CH1
	*/
	GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 8002e46:	2340      	movs	r3, #64	; 0x40
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e56:	2302      	movs	r3, #2
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4830      	ldr	r0, [pc, #192]	; (8002f24 <HAL_TIM_Base_MspInit+0x130>)
 8002e62:	f002 fe0b 	bl	8005a7c <HAL_GPIO_Init>

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	201e      	movs	r0, #30
 8002e6c:	f002 fb8d 	bl	800558a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e70:	201e      	movs	r0, #30
 8002e72:	f002 fba6 	bl	80055c2 <HAL_NVIC_EnableIRQ>
  }
  if(tim_baseHandle->Instance==TIM6)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_TIM_Base_MspInit+0x134>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d114      	bne.n	8002eaa <HAL_TIM_Base_MspInit+0xb6>
  {
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e86:	f043 0310 	orr.w	r3, r3, #16
 8002e8a:	6253      	str	r3, [r2, #36]	; 0x24
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	69bb      	ldr	r3, [r7, #24]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	202b      	movs	r0, #43	; 0x2b
 8002e9e:	f002 fb74 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002ea2:	202b      	movs	r0, #43	; 0x2b
 8002ea4:	f002 fb8d 	bl	80055c2 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM11)
  {
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
  }
}
 8002ea8:	e034      	b.n	8002f14 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM9)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_TIM_Base_MspInit+0x138>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10c      	bne.n	8002ece <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
}
 8002ecc:	e022      	b.n	8002f14 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM10)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_TIM_Base_MspInit+0x13c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
}
 8002ef0:	e010      	b.n	8002f14 <HAL_TIM_Base_MspInit+0x120>
  else if(tim_baseHandle->Instance==TIM11)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <HAL_TIM_Base_MspInit+0x140>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10b      	bne.n	8002f14 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002f02:	f043 0310 	orr.w	r3, r3, #16
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_TIM_Base_MspInit+0x12c>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3738      	adds	r7, #56	; 0x38
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40001000 	.word	0x40001000
 8002f2c:	40010800 	.word	0x40010800
 8002f30:	40010c00 	.word	0x40010c00
 8002f34:	40011000 	.word	0x40011000

08002f38 <HAL_TIM_MspPostInit>:
//======================================================================================
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_TIM_MspPostInit+0xa8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d11c      	bne.n	8002f94 <HAL_TIM_MspPostInit+0x5c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_TIM_MspPostInit+0xac>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <HAL_TIM_MspPostInit+0xac>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	61d3      	str	r3, [r2, #28]
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_TIM_MspPostInit+0xac>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SNS_HALL_IN_Pin;
 8002f72:	2340      	movs	r3, #64	; 0x40
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f82:	2302      	movs	r3, #2
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SNS_HALL_IN_GPIO_Port, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4816      	ldr	r0, [pc, #88]	; (8002fe8 <HAL_TIM_MspPostInit+0xb0>)
 8002f8e:	f002 fd75 	bl	8005a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
  }

}
 8002f92:	e020      	b.n	8002fd6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM11)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_TIM_MspPostInit+0xb4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d11b      	bne.n	8002fd6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_TIM_MspPostInit+0xac>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_TIM_MspPostInit+0xac>)
 8002fa4:	f043 0310 	orr.w	r3, r3, #16
 8002fa8:	61d3      	str	r3, [r2, #28]
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_TIM_MspPostInit+0xac>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_COOLING_Pin;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_COOLING_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <HAL_TIM_MspPostInit+0xb8>)
 8002fd2:	f002 fd53 	bl	8005a7c <HAL_GPIO_Init>
}
 8002fd6:	bf00      	nop
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <Delay_us>:
    __HAL_RCC_TIM11_CLK_DISABLE();
  }
}
//======================================================================================
void Delay_us(uint16_t us)																// Микросекундные задержки 0 .. 65535 мкс
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
	// Таймер TIM10 настроен на тики равные 1 мкс
    __HAL_TIM_SET_COUNTER(&htim10, 0);													// обнуляем счётчик
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <Delay_us+0x34>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim10);
 8003006:	4808      	ldr	r0, [pc, #32]	; (8003028 <Delay_us+0x34>)
 8003008:	f005 fc4c 	bl	80088a4 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim10) <= us)								// ждем пока не натикает до
 800300c:	bf00      	nop
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <Delay_us+0x34>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	429a      	cmp	r2, r3
 8003018:	d9f9      	bls.n	800300e <Delay_us+0x1a>
    {
    }
    HAL_TIM_Base_Stop(&htim10);
 800301a:	4803      	ldr	r0, [pc, #12]	; (8003028 <Delay_us+0x34>)
 800301c:	f005 fc8c 	bl	8008938 <HAL_TIM_Base_Stop>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20003d28 	.word	0x20003d28

0800302c <__io_putchar>:
/**
  * @brief	Переопределение функции вывода симвода для того чтобы printf из стандартной C библиотеки выводил данные в виртуальный COM-порт через USART2
  * 		Retargets the C library printf function to the USART.
  */
PUTCHAR_PROTOTYPE
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* USART implementation of fputc  */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);		// вывод для отладки в виртуальный порт ПК		[115200bps 8N1]
 8003034:	1d39      	adds	r1, r7, #4
 8003036:	2364      	movs	r3, #100	; 0x64
 8003038:	2201      	movs	r2, #1
 800303a:	4804      	ldr	r0, [pc, #16]	; (800304c <__io_putchar+0x20>)
 800303c:	f006 fe7f 	bl	8009d3e <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 100);		// вывод для ПК									[115200bps 8N1]
//    huart2.Instance->DR = (uint8_t *)ch;
  return ch;
 8003040:	687b      	ldr	r3, [r7, #4]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20003f68 	.word	0x20003f68

08003050 <MX_USART1_UART_Init>:
//=======================================================================================

//======================================================================================
void MX_USART1_UART_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <MX_USART1_UART_Init+0x4c>)
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <MX_USART1_UART_Init+0x50>)
 8003058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <MX_USART1_UART_Init+0x4c>)
 800305c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <MX_USART1_UART_Init+0x4c>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <MX_USART1_UART_Init+0x4c>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <MX_USART1_UART_Init+0x4c>)
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <MX_USART1_UART_Init+0x4c>)
 8003076:	220c      	movs	r2, #12
 8003078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <MX_USART1_UART_Init+0x4c>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <MX_USART1_UART_Init+0x4c>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003086:	4805      	ldr	r0, [pc, #20]	; (800309c <MX_USART1_UART_Init+0x4c>)
 8003088:	f006 fe0c 	bl	8009ca4 <HAL_UART_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler(5);
 8003092:	2005      	movs	r0, #5
 8003094:	f000 fb44 	bl	8003720 <Error_Handler>
  }

}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20003ee8 	.word	0x20003ee8
 80030a0:	40013800 	.word	0x40013800

080030a4 <MX_USART2_UART_Init>:
//======================================================================================
void MX_USART2_UART_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <MX_USART2_UART_Init+0x50>)
 80030ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030ca:	220c      	movs	r2, #12
 80030cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030da:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_USART2_UART_Init+0x4c>)
 80030dc:	f006 fde2 	bl	8009ca4 <HAL_UART_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <MX_USART2_UART_Init+0x48>
  {
    Error_Handler(5);
 80030e6:	2005      	movs	r0, #5
 80030e8:	f000 fb1a 	bl	8003720 <Error_Handler>
  }

}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20003f68 	.word	0x20003f68
 80030f4:	40004400 	.word	0x40004400

080030f8 <MX_USART3_UART_Init>:
//======================================================================================
void MX_USART3_UART_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <MX_USART3_UART_Init+0x50>)
 8003100:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 8003104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003108:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 800311e:	220c      	movs	r2, #12
 8003120:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800312e:	4805      	ldr	r0, [pc, #20]	; (8003144 <MX_USART3_UART_Init+0x4c>)
 8003130:	f006 fdb8 	bl	8009ca4 <HAL_UART_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler(5);
 800313a:	2005      	movs	r0, #5
 800313c:	f000 faf0 	bl	8003720 <Error_Handler>
  }

}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20003e68 	.word	0x20003e68
 8003148:	40004800 	.word	0x40004800

0800314c <MX_UART4_Init>:
//======================================================================================
void MX_UART4_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <MX_UART4_Init+0x4c>)
 8003152:	4a12      	ldr	r2, [pc, #72]	; (800319c <MX_UART4_Init+0x50>)
 8003154:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <MX_UART4_Init+0x4c>)
 8003158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800315c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <MX_UART4_Init+0x4c>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <MX_UART4_Init+0x4c>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <MX_UART4_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <MX_UART4_Init+0x4c>)
 8003172:	220c      	movs	r2, #12
 8003174:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <MX_UART4_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <MX_UART4_Init+0x4c>)
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003182:	4805      	ldr	r0, [pc, #20]	; (8003198 <MX_UART4_Init+0x4c>)
 8003184:	f006 fd8e 	bl	8009ca4 <HAL_UART_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <MX_UART4_Init+0x48>
  {
    Error_Handler(5);
 800318e:	2005      	movs	r0, #5
 8003190:	f000 fac6 	bl	8003720 <Error_Handler>
  }

}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20003f28 	.word	0x20003f28
 800319c:	40004c00 	.word	0x40004c00

080031a0 <MX_UART5_Init>:
//======================================================================================
void MX_UART5_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_UART5_Init+0x4c>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <MX_UART5_Init+0x50>)
 80031a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <MX_UART5_Init+0x4c>)
 80031ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <MX_UART5_Init+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <MX_UART5_Init+0x4c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <MX_UART5_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <MX_UART5_Init+0x4c>)
 80031c6:	220c      	movs	r2, #12
 80031c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <MX_UART5_Init+0x4c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <MX_UART5_Init+0x4c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80031d6:	4805      	ldr	r0, [pc, #20]	; (80031ec <MX_UART5_Init+0x4c>)
 80031d8:	f006 fd64 	bl	8009ca4 <HAL_UART_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <MX_UART5_Init+0x48>
  {
    Error_Handler(5);
 80031e2:	2005      	movs	r0, #5
 80031e4:	f000 fa9c 	bl	8003720 <Error_Handler>
  }

}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20003ea8 	.word	0x20003ea8
 80031f0:	40005000 	.word	0x40005000

080031f4 <HAL_UART_MspInit>:
//======================================================================================
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b092      	sub	sp, #72	; 0x48
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]

  if(uartHandle->Instance==USART1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a97      	ldr	r2, [pc, #604]	; (8003470 <HAL_UART_MspInit+0x27c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d131      	bne.n	800327a <HAL_UART_MspInit+0x86>
  {
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003216:	4b97      	ldr	r3, [pc, #604]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a96      	ldr	r2, [pc, #600]	; (8003474 <HAL_UART_MspInit+0x280>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b94      	ldr	r3, [pc, #592]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322e:	4b91      	ldr	r3, [pc, #580]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	4a90      	ldr	r2, [pc, #576]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	61d3      	str	r3, [r2, #28]
 800323a:	4b8e      	ldr	r3, [pc, #568]	; (8003474 <HAL_UART_MspInit+0x280>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8003246:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003258:	2307      	movs	r3, #7
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003260:	4619      	mov	r1, r3
 8003262:	4885      	ldr	r0, [pc, #532]	; (8003478 <HAL_UART_MspInit+0x284>)
 8003264:	f002 fc0a 	bl	8005a7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2100      	movs	r1, #0
 800326c:	2025      	movs	r0, #37	; 0x25
 800326e:	f002 f98c 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003272:	2025      	movs	r0, #37	; 0x25
 8003274:	f002 f9a5 	bl	80055c2 <HAL_NVIC_EnableIRQ>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  }
}
 8003278:	e0f5      	b.n	8003466 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7f      	ldr	r2, [pc, #508]	; (800347c <HAL_UART_MspInit+0x288>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d130      	bne.n	80032e6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003284:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	4a7a      	ldr	r2, [pc, #488]	; (8003474 <HAL_UART_MspInit+0x280>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328e:	6253      	str	r3, [r2, #36]	; 0x24
 8003290:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329c:	4b75      	ldr	r3, [pc, #468]	; (8003474 <HAL_UART_MspInit+0x280>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4a74      	ldr	r2, [pc, #464]	; (8003474 <HAL_UART_MspInit+0x280>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	61d3      	str	r3, [r2, #28]
 80032a8:	4b72      	ldr	r3, [pc, #456]	; (8003474 <HAL_UART_MspInit+0x280>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80032b4:	230c      	movs	r3, #12
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032c4:	2307      	movs	r3, #7
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032cc:	4619      	mov	r1, r3
 80032ce:	486a      	ldr	r0, [pc, #424]	; (8003478 <HAL_UART_MspInit+0x284>)
 80032d0:	f002 fbd4 	bl	8005a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	2026      	movs	r0, #38	; 0x26
 80032da:	f002 f956 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032de:	2026      	movs	r0, #38	; 0x26
 80032e0:	f002 f96f 	bl	80055c2 <HAL_NVIC_EnableIRQ>
}
 80032e4:	e0bf      	b.n	8003466 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==USART3)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a65      	ldr	r2, [pc, #404]	; (8003480 <HAL_UART_MspInit+0x28c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d131      	bne.n	8003354 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032f0:	4b60      	ldr	r3, [pc, #384]	; (8003474 <HAL_UART_MspInit+0x280>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	4a5f      	ldr	r2, [pc, #380]	; (8003474 <HAL_UART_MspInit+0x280>)
 80032f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fa:	6253      	str	r3, [r2, #36]	; 0x24
 80032fc:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <HAL_UART_MspInit+0x280>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003304:	623b      	str	r3, [r7, #32]
 8003306:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_UART_MspInit+0x280>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4a59      	ldr	r2, [pc, #356]	; (8003474 <HAL_UART_MspInit+0x280>)
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	61d3      	str	r3, [r2, #28]
 8003314:	4b57      	ldr	r3, [pc, #348]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8003320:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003332:	2307      	movs	r3, #7
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800333a:	4619      	mov	r1, r3
 800333c:	4851      	ldr	r0, [pc, #324]	; (8003484 <HAL_UART_MspInit+0x290>)
 800333e:	f002 fb9d 	bl	8005a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	2027      	movs	r0, #39	; 0x27
 8003348:	f002 f91f 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800334c:	2027      	movs	r0, #39	; 0x27
 800334e:	f002 f938 	bl	80055c2 <HAL_NVIC_EnableIRQ>
}
 8003352:	e088      	b.n	8003466 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART4)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a4b      	ldr	r2, [pc, #300]	; (8003488 <HAL_UART_MspInit+0x294>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d131      	bne.n	80033c2 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART4_CLK_ENABLE();
 800335e:	4b45      	ldr	r3, [pc, #276]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	4a44      	ldr	r2, [pc, #272]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003368:	6253      	str	r3, [r2, #36]	; 0x24
 800336a:	4b42      	ldr	r3, [pc, #264]	; (8003474 <HAL_UART_MspInit+0x280>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4a3e      	ldr	r2, [pc, #248]	; (8003474 <HAL_UART_MspInit+0x280>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	61d3      	str	r3, [r2, #28]
 8003382:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 800338e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003398:	2301      	movs	r3, #1
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033a0:	2308      	movs	r3, #8
 80033a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033a8:	4619      	mov	r1, r3
 80033aa:	4838      	ldr	r0, [pc, #224]	; (800348c <HAL_UART_MspInit+0x298>)
 80033ac:	f002 fb66 	bl	8005a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2030      	movs	r0, #48	; 0x30
 80033b6:	f002 f8e8 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033ba:	2030      	movs	r0, #48	; 0x30
 80033bc:	f002 f901 	bl	80055c2 <HAL_NVIC_EnableIRQ>
}
 80033c0:	e051      	b.n	8003466 <HAL_UART_MspInit+0x272>
  else if(uartHandle->Instance==UART5)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a32      	ldr	r2, [pc, #200]	; (8003490 <HAL_UART_MspInit+0x29c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d14c      	bne.n	8003466 <HAL_UART_MspInit+0x272>
    __HAL_RCC_UART5_CLK_ENABLE();
 80033cc:	4b29      	ldr	r3, [pc, #164]	; (8003474 <HAL_UART_MspInit+0x280>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	4a28      	ldr	r2, [pc, #160]	; (8003474 <HAL_UART_MspInit+0x280>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d6:	6253      	str	r3, [r2, #36]	; 0x24
 80033d8:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_UART_MspInit+0x280>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <HAL_UART_MspInit+0x280>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a22      	ldr	r2, [pc, #136]	; (8003474 <HAL_UART_MspInit+0x280>)
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	61d3      	str	r3, [r2, #28]
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_UART_MspInit+0x280>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_UART_MspInit+0x280>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_UART_MspInit+0x280>)
 8003402:	f043 0308 	orr.w	r3, r3, #8
 8003406:	61d3      	str	r3, [r2, #28]
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_UART_MspInit+0x280>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8003414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800341e:	2301      	movs	r3, #1
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003426:	2308      	movs	r3, #8
 8003428:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 800342a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800342e:	4619      	mov	r1, r3
 8003430:	4816      	ldr	r0, [pc, #88]	; (800348c <HAL_UART_MspInit+0x298>)
 8003432:	f002 fb23 	bl	8005a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8003436:	2304      	movs	r3, #4
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800343e:	2301      	movs	r3, #1
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003442:	2303      	movs	r3, #3
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003446:	2308      	movs	r3, #8
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 800344a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800344e:	4619      	mov	r1, r3
 8003450:	4810      	ldr	r0, [pc, #64]	; (8003494 <HAL_UART_MspInit+0x2a0>)
 8003452:	f002 fb13 	bl	8005a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	2031      	movs	r0, #49	; 0x31
 800345c:	f002 f895 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003460:	2031      	movs	r0, #49	; 0x31
 8003462:	f002 f8ae 	bl	80055c2 <HAL_NVIC_EnableIRQ>
}
 8003466:	bf00      	nop
 8003468:	3748      	adds	r7, #72	; 0x48
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40013800 	.word	0x40013800
 8003474:	40023800 	.word	0x40023800
 8003478:	40020000 	.word	0x40020000
 800347c:	40004400 	.word	0x40004400
 8003480:	40004800 	.word	0x40004800
 8003484:	40020400 	.word	0x40020400
 8003488:	40004c00 	.word	0x40004c00
 800348c:	40020800 	.word	0x40020800
 8003490:	40005000 	.word	0x40005000
 8003494:	40020c00 	.word	0x40020c00

08003498 <main>:

void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
//======================================================================================
int main(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	HAL_Init();																			// Настройка HAL
 800349c:	f001 f9e1 	bl	8004862 <HAL_Init>
	SystemClock_Config();																// Настройка системы тактирования
 80034a0:	f000 f87e 	bl	80035a0 <SystemClock_Config>

	MX_GPIO_Init();																		// Настройка пинов GPIO, не привязанных к блокам SPI, UART, I2C, keys, encoder, ADC, DAC
 80034a4:	f7fe ffc4 	bl	8002430 <MX_GPIO_Init>
	MX_DMA_Init();																		// Настройка DMA
 80034a8:	f7fe f8e6 	bl	8001678 <MX_DMA_Init>
	MX_SPI1_Init();																		// Настройка SPI1 для работы с SD картой
 80034ac:	f7ff f992 	bl	80027d4 <MX_SPI1_Init>
	MX_SPI2_Init();																		// Настройка SPI2 для работы с LCD экраном ILI9488
 80034b0:	f7ff f9c8 	bl	8002844 <MX_SPI2_Init>
	MX_I2C1_Init();																		// Настройка I2C для работы с IMU
 80034b4:	f7ff f87a 	bl	80025ac <MX_I2C1_Init>

	MX_USART1_UART_Init();																// Настройка USART1
 80034b8:	f7ff fdca 	bl	8003050 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();																// Настройка USART2 для Virtual COM-Port
 80034bc:	f7ff fdf2 	bl	80030a4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();																// Настройка USART3
 80034c0:	f7ff fe1a 	bl	80030f8 <MX_USART3_UART_Init>
	MX_UART4_Init();																	// Настройка UART4 терминальной связи с ПК
 80034c4:	f7ff fe42 	bl	800314c <MX_UART4_Init>
	MX_UART5_Init();																	// Настройка UART5
 80034c8:	f7ff fe6a 	bl	80031a0 <MX_UART5_Init>

	MX_DAC_Init();																		// Настройка ЦАП для управления скоростью мотора
 80034cc:	f7fe f846 	bl	800155c <MX_DAC_Init>
	MX_ADC_Init();																		// Настройка АЦП для измерения токов, напряжений, регулятора скорости
 80034d0:	f7fd fce4 	bl	8000e9c <MX_ADC_Init>
	MX_TIM3_Init();																		// Настройка для работы энкодера
 80034d4:	f7ff fa90 	bl	80029f8 <MX_TIM3_Init>
	MX_TIM6_Init();																		// Настройка для работы динамика
 80034d8:	f7ff fb5c 	bl	8002b94 <MX_TIM6_Init>
	MX_TIM4_Init();																		// Настройка для работы тахометра оборотов бака
 80034dc:	f7ff fae2 	bl	8002aa4 <MX_TIM4_Init>
	MX_TIM9_Init();																		// Настройка для отладки FreeRTOS
 80034e0:	f7ff fb5e 	bl	8002ba0 <MX_TIM9_Init>
	MX_TIM10_Init();																	// Настройка источника микросекундных тиков (для DelayUS() со сбросом ) нужен для 1-Wire DS18B20
 80034e4:	f7ff fbac 	bl	8002c40 <MX_TIM10_Init>
	MX_TIM11_Init();																	// Настройка для ШИМ управления оборотами мотора вентилятора охлаждения контроллера двигателя
 80034e8:	f7ff fbfa 	bl	8002ce0 <MX_TIM11_Init>

	DS18B20_Init();																		// Инициализация термодатчиков
 80034ec:	f7fe f8e2 	bl	80016b4 <DS18B20_Init>

	MX_FATFS_Init();																	// Настройка для работы с файлами на SD Card
 80034f0:	f009 f8c2 	bl	800c678 <MX_FATFS_Init>

	Keys_Init();																		// Настройка GPIO портов для кнопок
 80034f4:	f7ff f8ce 	bl	8002694 <Keys_Init>
	Encoder_Init();																		// Настройка GPIO портов для энкодера
 80034f8:	f7fe fd4a 	bl	8001f90 <Encoder_Init>

	FAN_Init();																			// Настройка ШИМ-управления для двигателя вентилятора ихлажения
 80034fc:	f000 f9ce 	bl	800389c <FAN_Init>


	BUZZER_Init(BUZZER_STSTE_ON);														// Инициализация и включение пъезодинамика (пищалки/баззера)
 8003500:	2001      	movs	r0, #1
 8003502:	f7fd ff3f 	bl	8001384 <BUZZER_Init>

  //  // фейковый трансмит для настройки SPI
  //  uint8_t data = 0;
  //  HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);

	HAL_Delay(100);
 8003506:	2064      	movs	r0, #100	; 0x64
 8003508:	f001 f9e0 	bl	80048cc <HAL_Delay>
	LCD9488_Init();	   																	// Инициализаци экрана LCD ILI9488
 800350c:	f000 fc06 	bl	8003d1c <LCD9488_Init>
	HAL_Delay(100);
 8003510:	2064      	movs	r0, #100	; 0x64
 8003512:	f001 f9db 	bl	80048cc <HAL_Delay>

	LCD9488_GUI_SetOrientation(1);														// Установка ориентации экрана
 8003516:	2001      	movs	r0, #1
 8003518:	f000 feba 	bl	8004290 <LCD9488_GUI_SetOrientation>
	HAL_Delay(100);
 800351c:	2064      	movs	r0, #100	; 0x64
 800351e:	f001 f9d5 	bl	80048cc <HAL_Delay>


	BUZZER_Beep();
 8003522:	f7fd ffdb 	bl	80014dc <BUZZER_Beep>



	// Рисуем начальную заставку на UART2
	printf("\033[2J"); 																	// Очистка окна терминала.   //https://www.linux.org.ru/forum/development/628620
 8003526:	4812      	ldr	r0, [pc, #72]	; (8003570 <main+0xd8>)
 8003528:	f00f fca2 	bl	8012e70 <iprintf>
	printf("\033[0;0H"); 																// задает абсолютные координаты курсора (строка, столбец)  // https://www.opennet.ru/base/dev/console_ctl.txt.html
 800352c:	4811      	ldr	r0, [pc, #68]	; (8003574 <main+0xdc>)
 800352e:	f00f fc9f 	bl	8012e70 <iprintf>
	printf("Medogonka. Alex Shamilich\n");												// Строка приветствия
 8003532:	4811      	ldr	r0, [pc, #68]	; (8003578 <main+0xe0>)
 8003534:	f00f fd10 	bl	8012f58 <puts>
	printf("Version: %s\n", FIRMWARE_VER);
 8003538:	4910      	ldr	r1, [pc, #64]	; (800357c <main+0xe4>)
 800353a:	4811      	ldr	r0, [pc, #68]	; (8003580 <main+0xe8>)
 800353c:	f00f fc98 	bl	8012e70 <iprintf>
	printf("  Date: %s\n", __DATE__);
 8003540:	4910      	ldr	r1, [pc, #64]	; (8003584 <main+0xec>)
 8003542:	4811      	ldr	r0, [pc, #68]	; (8003588 <main+0xf0>)
 8003544:	f00f fc94 	bl	8012e70 <iprintf>
	printf("  Time: %s\n", __TIME__);
 8003548:	4910      	ldr	r1, [pc, #64]	; (800358c <main+0xf4>)
 800354a:	4811      	ldr	r0, [pc, #68]	; (8003590 <main+0xf8>)
 800354c:	f00f fc90 	bl	8012e70 <iprintf>
	printf("FreeRTOS. USART2->Virtual_COM, ADC, DAC\n");								// Строка приветствия
 8003550:	4810      	ldr	r0, [pc, #64]	; (8003594 <main+0xfc>)
 8003552:	f00f fd01 	bl	8012f58 <puts>
	printf("TIM4, TIM9, TIM10, TIM11 \n");												// Строка приветствия
 8003556:	4810      	ldr	r0, [pc, #64]	; (8003598 <main+0x100>)
 8003558:	f00f fcfe 	bl	8012f58 <puts>
	printf("18B20\n");
 800355c:	480f      	ldr	r0, [pc, #60]	; (800359c <main+0x104>)
 800355e:	f00f fcfb 	bl	8012f58 <puts>

//	main_test();																		// Тесты LCD

	osKernelInitialize();  																// Настройка планировщика FreeRTOS
 8003562:	f00b fb69 	bl	800ec38 <osKernelInitialize>
	MX_FREERTOS_Init();																	// Настройка объектов FreeRTOS
 8003566:	f7fe fdbb 	bl	80020e0 <MX_FREERTOS_Init>
	osKernelStart();																	// Запуск планировщика FreeRTOS
 800356a:	f00b fb97 	bl	800ec9c <osKernelStart>



	// После старта планировщика сюда мы никогда не должны зайти, поэтому бесконечный цикл.
	while (1)
 800356e:	e7fe      	b.n	800356e <main+0xd6>
 8003570:	08016784 	.word	0x08016784
 8003574:	0801678c 	.word	0x0801678c
 8003578:	08016794 	.word	0x08016794
 800357c:	080167b0 	.word	0x080167b0
 8003580:	080167b8 	.word	0x080167b8
 8003584:	080167c8 	.word	0x080167c8
 8003588:	080167d4 	.word	0x080167d4
 800358c:	080167e0 	.word	0x080167e0
 8003590:	080167ec 	.word	0x080167ec
 8003594:	080167f8 	.word	0x080167f8
 8003598:	08016820 	.word	0x08016820
 800359c:	0801683c 	.word	0x0801683c

080035a0 <SystemClock_Config>:
	{
	}
}
//======================================================================================
void SystemClock_Config(void)															// System Clock Configuration
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b092      	sub	sp, #72	; 0x48
 80035a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	2234      	movs	r2, #52	; 0x34
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f00e fe27 	bl	8012202 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035b4:	463b      	mov	r3, r7
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <SystemClock_Config+0xb0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <SystemClock_Config+0xb0>)
 80035cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035d0:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80035d2:	2303      	movs	r3, #3
 80035d4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035da:	2301      	movs	r3, #1
 80035dc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035de:	2310      	movs	r3, #16
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035e2:	2302      	movs	r3, #2
 80035e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80035ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035f0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80035f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80035f6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4618      	mov	r0, r3
 80035fe:	f004 f85b 	bl	80076b8 <HAL_RCC_OscConfig>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <SystemClock_Config+0x6e>
	{
	Error_Handler(0);
 8003608:	2000      	movs	r0, #0
 800360a:	f000 f889 	bl	8003720 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800360e:	230f      	movs	r3, #15
 8003610:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003612:	2303      	movs	r3, #3
 8003614:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003622:	463b      	mov	r3, r7
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f004 fb76 	bl	8007d18 <HAL_RCC_ClockConfig>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <SystemClock_Config+0x98>
	{
	Error_Handler(0);
 8003632:	2000      	movs	r0, #0
 8003634:	f000 f874 	bl	8003720 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_16);
 8003638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800363c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003640:	2000      	movs	r0, #0
 8003642:	f004 fc9d 	bl	8007f80 <HAL_RCC_MCOConfig>
}
 8003646:	bf00      	nop
 8003648:	3748      	adds	r7, #72	; 0x48
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40007000 	.word	0x40007000

08003654 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d102      	bne.n	800366c <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	MotorSpeed_Period 	= 0;															// Если натикало больше чем период таймера (htim4.Init.Period), то считаем скорость мотора нулевой
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003668:	2200      	movs	r2, #0
 800366a:	801a      	strh	r2, [r3, #0]
  }

  if (htim->Instance == TIM7)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0a      	ldr	r2, [pc, #40]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    HAL_IncTick();
 8003676:	f001 f90d 	bl	8004894 <HAL_IncTick>
  }
  if (htim->Instance == TIM6)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <HAL_TIM_PeriodElapsedCallback+0x38>
  {
	BUZZER_INV;																			// меняем состояние пина баззера
 8003684:	2120      	movs	r1, #32
 8003686:	4807      	ldr	r0, [pc, #28]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003688:	f002 fbb5 	bl	8005df6 <HAL_GPIO_TogglePin>
  }

}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40000800 	.word	0x40000800
 8003698:	20003a28 	.word	0x20003a28
 800369c:	40001400 	.word	0x40001400
 80036a0:	40001000 	.word	0x40001000
 80036a4:	40020400 	.word	0x40020400

080036a8 <HAL_TIM_IC_CaptureCallback>:
//======================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)															// Считаем скорость по интервалу импульсов от датчика скорости
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <HAL_TIM_IC_CaptureCallback+0x30>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d109      	bne.n	80036ce <HAL_TIM_IC_CaptureCallback+0x26>
	{
		MotorSpeed_Period = __HAL_TIM_GET_COUNTER(&htim4);
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_TIM_IC_CaptureCallback+0x34>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80036c4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_TIM_IC_CaptureCallback+0x34>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2200      	movs	r2, #0
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40000800 	.word	0x40000800
 80036dc:	20003ce8 	.word	0x20003ce8
 80036e0:	20003a28 	.word	0x20003a28

080036e4 <Delay_for_errror>:
//======================================================================================
void Delay_for_errror(uint32_t ms) 														// должна работать вне зависимости от прерываний. Когда все рухнуло и нужно диодом показать код ошибки
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    volatile uint32_t 	nCount;
    nCount = SystemCoreClock / 10000 * ms;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <Delay_for_errror+0x34>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <Delay_for_errror+0x38>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0b5b      	lsrs	r3, r3, #13
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	60fb      	str	r3, [r7, #12]
    for (; nCount!=0; nCount--);
 8003700:	e002      	b.n	8003708 <Delay_for_errror+0x24>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3b01      	subs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f9      	bne.n	8003702 <Delay_for_errror+0x1e>
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	20000000 	.word	0x20000000
 800371c:	d1b71759 	.word	0xd1b71759

08003720 <Error_Handler>:
//=======================================================================================
void Error_Handler(uint8_t err_num)														// Обработчик ошибок
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  //gl_err_num = err_num;
  while(1)
  {
	LED_GREEN_SET;
 800372a:	2201      	movs	r2, #1
 800372c:	2110      	movs	r1, #16
 800372e:	4817      	ldr	r0, [pc, #92]	; (800378c <Error_Handler+0x6c>)
 8003730:	f002 fb49 	bl	8005dc6 <HAL_GPIO_WritePin>
	Delay_for_errror(500);
 8003734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003738:	f7ff ffd4 	bl	80036e4 <Delay_for_errror>
	LED_GREEN_RESET;
 800373c:	2200      	movs	r2, #0
 800373e:	2110      	movs	r1, #16
 8003740:	4812      	ldr	r0, [pc, #72]	; (800378c <Error_Handler+0x6c>)
 8003742:	f002 fb40 	bl	8005dc6 <HAL_GPIO_WritePin>
    Delay_for_errror(500);
 8003746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800374a:	f7ff ffcb 	bl	80036e4 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e012      	b.n	800377a <Error_Handler+0x5a>
    {
    	LED_GREEN_SET;
 8003754:	2201      	movs	r2, #1
 8003756:	2110      	movs	r1, #16
 8003758:	480c      	ldr	r0, [pc, #48]	; (800378c <Error_Handler+0x6c>)
 800375a:	f002 fb34 	bl	8005dc6 <HAL_GPIO_WritePin>
    	Delay_for_errror(130);
 800375e:	2082      	movs	r0, #130	; 0x82
 8003760:	f7ff ffc0 	bl	80036e4 <Delay_for_errror>
    	LED_GREEN_RESET;
 8003764:	2200      	movs	r2, #0
 8003766:	2110      	movs	r1, #16
 8003768:	4808      	ldr	r0, [pc, #32]	; (800378c <Error_Handler+0x6c>)
 800376a:	f002 fb2c 	bl	8005dc6 <HAL_GPIO_WritePin>
        Delay_for_errror(130);
 800376e:	2082      	movs	r0, #130	; 0x82
 8003770:	f7ff ffb8 	bl	80036e4 <Delay_for_errror>
    for(uint8_t i=0; i < err_num; ++i)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	3301      	adds	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	429a      	cmp	r2, r3
 8003780:	d3e8      	bcc.n	8003754 <Error_Handler+0x34>
    }
    Delay_for_errror(1000);
 8003782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003786:	f7ff ffad 	bl	80036e4 <Delay_for_errror>
	LED_GREEN_SET;
 800378a:	e7ce      	b.n	800372a <Error_Handler+0xa>
 800378c:	40020800 	.word	0x40020800

08003790 <Motor_Scan_DirectionState>:
	osDelay(100);
	MOTOR_BWD_SET;
}
//=======================================================================================
void  Motor_Scan_DirectionState(void)													// Просканировать состояние переключателя направления мотора
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
	GPIO_PinState FWD = HAL_GPIO_ReadPin(BTN_FWD_GPIO_Port,  BTN_FWD_Pin);
 8003796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800379a:	4824      	ldr	r0, [pc, #144]	; (800382c <Motor_Scan_DirectionState+0x9c>)
 800379c:	f002 fafc 	bl	8005d98 <HAL_GPIO_ReadPin>
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState BWD = HAL_GPIO_ReadPin(BTN_BWD_GPIO_Port,  BTN_BWD_Pin);
 80037a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037a8:	4820      	ldr	r0, [pc, #128]	; (800382c <Motor_Scan_DirectionState+0x9c>)
 80037aa:	f002 faf5 	bl	8005d98 <HAL_GPIO_ReadPin>
 80037ae:	4603      	mov	r3, r0
 80037b0:	71bb      	strb	r3, [r7, #6]

	if ( (FWD == GPIO_PIN_SET) &
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	79bb      	ldrb	r3, [r7, #6]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	4013      	ands	r3, r2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <Motor_Scan_DirectionState+0x48>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_STOP;
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <Motor_Scan_DirectionState+0xa0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_SET) &
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	79bb      	ldrb	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf0c      	ite	eq
 80037ea:	2301      	moveq	r3, #1
 80037ec:	2300      	movne	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4013      	ands	r3, r2
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <Motor_Scan_DirectionState+0x6e>
		 (BWD == GPIO_PIN_RESET) )
	{
		MotorDirection = MD_FWD;
 80037f8:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <Motor_Scan_DirectionState+0xa0>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
	}
	if ( (FWD == GPIO_PIN_RESET) &
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2da      	uxtb	r2, r3
 800380a:	79bb      	ldrb	r3, [r7, #6]
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	4013      	ands	r3, r2
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <Motor_Scan_DirectionState+0x94>
		 (BWD == GPIO_PIN_SET) )
	{
		MotorDirection = MD_REV;
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <Motor_Scan_DirectionState+0xa0>)
 8003820:	2202      	movs	r2, #2
 8003822:	701a      	strb	r2, [r3, #0]
	}

}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40020c00 	.word	0x40020c00
 8003830:	20003a88 	.word	0x20003a88

08003834 <Motor_Set_DirectionState>:
//=======================================================================================
void  Motor_Set_DirectionState(TMotorDirection ADir)									// Установить направление мотора
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
	switch (ADir)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d00f      	beq.n	8003864 <Motor_Set_DirectionState+0x30>
 8003844:	2b02      	cmp	r3, #2
 8003846:	d018      	beq.n	800387a <Motor_Set_DirectionState+0x46>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d000      	beq.n	800384e <Motor_Set_DirectionState+0x1a>
			MOTOR_FWD_RESET;
			MOTOR_BWD_SET;
			break;
	}

}
 800384c:	e020      	b.n	8003890 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 800384e:	2200      	movs	r2, #0
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	4811      	ldr	r0, [pc, #68]	; (8003898 <Motor_Set_DirectionState+0x64>)
 8003854:	f002 fab7 	bl	8005dc6 <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 8003858:	2200      	movs	r2, #0
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	480e      	ldr	r0, [pc, #56]	; (8003898 <Motor_Set_DirectionState+0x64>)
 800385e:	f002 fab2 	bl	8005dc6 <HAL_GPIO_WritePin>
			break;
 8003862:	e015      	b.n	8003890 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_SET;
 8003864:	2201      	movs	r2, #1
 8003866:	2140      	movs	r1, #64	; 0x40
 8003868:	480b      	ldr	r0, [pc, #44]	; (8003898 <Motor_Set_DirectionState+0x64>)
 800386a:	f002 faac 	bl	8005dc6 <HAL_GPIO_WritePin>
			MOTOR_BWD_RESET;
 800386e:	2200      	movs	r2, #0
 8003870:	2180      	movs	r1, #128	; 0x80
 8003872:	4809      	ldr	r0, [pc, #36]	; (8003898 <Motor_Set_DirectionState+0x64>)
 8003874:	f002 faa7 	bl	8005dc6 <HAL_GPIO_WritePin>
			break;
 8003878:	e00a      	b.n	8003890 <Motor_Set_DirectionState+0x5c>
			MOTOR_FWD_RESET;
 800387a:	2200      	movs	r2, #0
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	4806      	ldr	r0, [pc, #24]	; (8003898 <Motor_Set_DirectionState+0x64>)
 8003880:	f002 faa1 	bl	8005dc6 <HAL_GPIO_WritePin>
			MOTOR_BWD_SET;
 8003884:	2201      	movs	r2, #1
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	4803      	ldr	r0, [pc, #12]	; (8003898 <Motor_Set_DirectionState+0x64>)
 800388a:	f002 fa9c 	bl	8005dc6 <HAL_GPIO_WritePin>
			break;
 800388e:	bf00      	nop
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000

0800389c <FAN_Init>:
//=======================================================================================
void  FAN_Init(void)																	// Инициализация управления мотором вентилятора охлажения
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	MX_TIM11_Init();																	// Инициализация таймера для ШИМ
 80038a0:	f7ff fa1e 	bl	8002ce0 <MX_TIM11_Init>

	FAN_Set_Start();																	// Включить мотор вентилятора охлажения
 80038a4:	f000 f806 	bl	80038b4 <FAN_Set_Start>
	FAN_Set_Speed(FAN_SPEED_DEFAULT);													// Установить скорость вентилятора по-умолчанию
 80038a8:	2064      	movs	r0, #100	; 0x64
 80038aa:	f000 f80d 	bl	80038c8 <FAN_Set_Speed>
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <FAN_Set_Start>:
//=======================================================================================
void  FAN_Set_Start(void)																// Включить мотор вентилятора охлажения
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80038b8:	2100      	movs	r1, #0
 80038ba:	4802      	ldr	r0, [pc, #8]	; (80038c4 <FAN_Set_Start+0x10>)
 80038bc:	f005 f91a 	bl	8008af4 <HAL_TIM_PWM_Start>
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20003da8 	.word	0x20003da8

080038c8 <FAN_Set_Speed>:
{
	HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
}
//=======================================================================================
void  FAN_Set_Speed(uint8_t APercent)													// Установить скорость мотора вентилятора охлажения
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, APercent);							// Т.к. период ШИМ таймера задан в (htim11.Init.Period = 100;),
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <FAN_Set_Speed+0x1c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	79fa      	ldrb	r2, [r7, #7]
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
																						// скважность тут задаем от 0 до 100.
																						// Частота ШИМ определяется соотношением (htim11.Init.Prescaler = 32000;) с тактовой частотой
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	20003da8 	.word	0x20003da8

080038e8 <HAL_MspInit>:
  ******************************************************************************
  */
#include "main.h"

void HAL_MspInit(void)																	// Initializes the Global MSP.
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0

  __HAL_RCC_COMP_CLK_ENABLE();
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <HAL_MspInit+0x58>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	4a13      	ldr	r2, [pc, #76]	; (8003940 <HAL_MspInit+0x58>)
 80038f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038f8:	6253      	str	r3, [r2, #36]	; 0x24
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_MspInit+0x58>)
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_MspInit+0x58>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <HAL_MspInit+0x58>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6213      	str	r3, [r2, #32]
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_MspInit+0x58>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_MspInit+0x58>)
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_MspInit+0x58>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6253      	str	r3, [r2, #36]	; 0x24
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_MspInit+0x58>)
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]

}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40023800 	.word	0x40023800

08003944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	; 0x30
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003954:	2200      	movs	r2, #0
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	202c      	movs	r0, #44	; 0x2c
 800395a:	f001 fe16 	bl	800558a <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800395e:	202c      	movs	r0, #44	; 0x2c
 8003960:	f001 fe2f 	bl	80055c2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_InitTick+0x9c>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_InitTick+0x9c>)
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	6253      	str	r3, [r2, #36]	; 0x24
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_InitTick+0x9c>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800397c:	f107 0210 	add.w	r2, r7, #16
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f004 fc2c 	bl	80081e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800398c:	f004 fc02 	bl	8008194 <HAL_RCC_GetPCLK1Freq>
 8003990:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <HAL_InitTick+0xa0>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	3b01      	subs	r3, #1
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_InitTick+0xa4>)
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <HAL_InitTick+0xa8>)
 80039a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_InitTick+0xa4>)
 80039a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039ac:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80039ae:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <HAL_InitTick+0xa4>)
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <HAL_InitTick+0xa4>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_InitTick+0xa4>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80039c0:	4809      	ldr	r0, [pc, #36]	; (80039e8 <HAL_InitTick+0xa4>)
 80039c2:	f004 ff2f 	bl	8008824 <HAL_TIM_Base_Init>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80039cc:	4806      	ldr	r0, [pc, #24]	; (80039e8 <HAL_InitTick+0xa4>)
 80039ce:	f004 ffd1 	bl	8008974 <HAL_TIM_Base_Start_IT>
 80039d2:	4603      	mov	r3, r0
 80039d4:	e000      	b.n	80039d8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3730      	adds	r7, #48	; 0x30
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	431bde83 	.word	0x431bde83
 80039e8:	20003fa8 	.word	0x20003fa8
 80039ec:	40001400 	.word	0x40001400

080039f0 <NMI_Handler>:
//======================================================================================
/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void)																	// Non maskable interrupt.
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HardFault_Handler>:
//======================================================================================
void HardFault_Handler(void)															// Hard fault interrupt.
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <HardFault_Handler+0x4>

08003a02 <MemManage_Handler>:
  {
  }
}
//======================================================================================
void MemManage_Handler(void)															// Memory management fault.
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  while (1)
 8003a06:	e7fe      	b.n	8003a06 <MemManage_Handler+0x4>

08003a08 <BusFault_Handler>:
  {
  }
}
//======================================================================================
void BusFault_Handler(void)																// Pre-fetch fault, memory access fault.
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  while (1)
 8003a0c:	e7fe      	b.n	8003a0c <BusFault_Handler+0x4>

08003a0e <UsageFault_Handler>:
  {
  }
}
//======================================================================================
void UsageFault_Handler(void)															// Undefined instruction or illegal state.
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <UsageFault_Handler+0x4>

08003a14 <DebugMon_Handler>:
//======================================================================================
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <DMA1_Channel5_IRQHandler>:
/* please refer to the startup file (startup_stm32l1xx.s).                    */
/******************************************************************************/

//======================================================================================
void DMA1_Channel5_IRQHandler(void)														// DMA1 channel5 global interrupt.
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <DMA1_Channel5_IRQHandler+0x10>)
 8003a26:	f001 ff7a 	bl	800591e <HAL_DMA_IRQHandler>
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20003ca4 	.word	0x20003ca4

08003a34 <ADC1_IRQHandler>:
//======================================================================================
void ADC1_IRQHandler(void)																// ADC global interrupt.
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <ADC1_IRQHandler+0x10>)
 8003a3a:	f001 f9d0 	bl	8004dde <HAL_ADC_IRQHandler>
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20003a34 	.word	0x20003a34

08003a48 <USB_LP_IRQHandler>:
//======================================================================================
void USB_LP_IRQHandler(void)															// USB low priority interrupt.
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <USB_LP_IRQHandler+0x10>)
 8003a4e:	f002 fc27 	bl	80062a0 <HAL_PCD_IRQHandler>
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20004948 	.word	0x20004948

08003a5c <USART1_IRQHandler>:
//======================================================================================
void USART1_IRQHandler(void)															// USART1 global interrupt.
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <USART1_IRQHandler+0x10>)
 8003a62:	f006 fa05 	bl	8009e70 <HAL_UART_IRQHandler>
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20003ee8 	.word	0x20003ee8

08003a70 <USART2_IRQHandler>:
//======================================================================================
void USART2_IRQHandler(void)															// USART2 global interrupt.
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <USART2_IRQHandler+0x10>)
 8003a76:	f006 f9fb 	bl	8009e70 <HAL_UART_IRQHandler>
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20003f68 	.word	0x20003f68

08003a84 <USART3_IRQHandler>:
//======================================================================================
void USART3_IRQHandler(void)															// USART3 global interrupt.
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <USART3_IRQHandler+0x10>)
 8003a8a:	f006 f9f1 	bl	8009e70 <HAL_UART_IRQHandler>
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20003e68 	.word	0x20003e68

08003a98 <UART4_IRQHandler>:
//======================================================================================
void UART4_IRQHandler(void)																// UART4 global interrupt.
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <UART4_IRQHandler+0x10>)
 8003a9e:	f006 f9e7 	bl	8009e70 <HAL_UART_IRQHandler>
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20003f28 	.word	0x20003f28

08003aac <UART5_IRQHandler>:
//======================================================================================
void UART5_IRQHandler(void)																// UART5 global interrupt.
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart5);
 8003ab0:	4802      	ldr	r0, [pc, #8]	; (8003abc <UART5_IRQHandler+0x10>)
 8003ab2:	f006 f9dd 	bl	8009e70 <HAL_UART_IRQHandler>
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20003ea8 	.word	0x20003ea8

08003ac0 <TIM3_IRQHandler>:
//======================================================================================
void TIM3_IRQHandler(void)																// TIM3 global interrupt.
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <TIM3_IRQHandler+0x10>)
 8003ac6:	f005 fa5b 	bl	8008f80 <HAL_TIM_IRQHandler>
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20003d68 	.word	0x20003d68

08003ad4 <TIM4_IRQHandler>:
//======================================================================================
void TIM4_IRQHandler(void)																// TIM4 global interrupt.
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <TIM4_IRQHandler+0x10>)
 8003ada:	f005 fa51 	bl	8008f80 <HAL_TIM_IRQHandler>
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20003ce8 	.word	0x20003ce8

08003ae8 <TIM6_IRQHandler>:
//======================================================================================
void TIM6_IRQHandler(void)																// TIM6 global interrupt.
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <TIM6_IRQHandler+0x10>)
 8003aee:	f005 fa47 	bl	8008f80 <HAL_TIM_IRQHandler>
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20003de8 	.word	0x20003de8

08003afc <TIM7_IRQHandler>:
//======================================================================================
void TIM7_IRQHandler(void)																// TIM7 global interrupt.
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <TIM7_IRQHandler+0x10>)
 8003b02:	f005 fa3d 	bl	8008f80 <HAL_TIM_IRQHandler>
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20003fa8 	.word	0x20003fa8

08003b10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e00a      	b.n	8003b38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b22:	f3af 8000 	nop.w
 8003b26:	4601      	mov	r1, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	60ba      	str	r2, [r7, #8]
 8003b2e:	b2ca      	uxtb	r2, r1
 8003b30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dbf0      	blt.n	8003b22 <_read+0x12>
	}

return len;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_write>:

int _write(int file, char *ptr, int len)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e009      	b.n	8003b70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	60ba      	str	r2, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fa61 	bl	800302c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	dbf1      	blt.n	8003b5c <_write+0x12>
	}
	return len;
 8003b78:	687b      	ldr	r3, [r7, #4]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_close>:
	return (caddr_t) prev_heap_end;
}
*/

int _close(int file)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
	return -1;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ba8:	605a      	str	r2, [r3, #4]
	return 0;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <_isatty>:

int _isatty(int file)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
	return 1;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
	return 0;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
	...

08003be4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <SystemInit+0x14>)
 8003bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bee:	609a      	str	r2, [r3, #8]
#endif
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <LCD9488_Init_GPIO>:
uint16_t LCD9488_Point_Color = 0x0000;
uint16_t LCD9488_Back_Color  = 0xFFFF;
uint16_t LCD9488_DeviceCode;
//=======================================================================================
void LCD9488_Init_GPIO(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	f107 0314 	add.w	r3, r7, #20
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a3f      	ldr	r2, [pc, #252]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	61d3      	str	r3, [r2, #28]
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	4a39      	ldr	r2, [pc, #228]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	61d3      	str	r3, [r2, #28]
 8003c36:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	4a33      	ldr	r2, [pc, #204]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	61d3      	str	r3, [r2, #28]
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003c5a:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	61d3      	str	r3, [r2, #28]
 8003c66:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <LCD9488_Init_GPIO+0x118>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD9488_DC_RS_GPIO_Port, 		LCD9488_DC_RS_Pin, 	GPIO_PIN_RESET);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2101      	movs	r1, #1
 8003c76:	4828      	ldr	r0, [pc, #160]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003c78:	f002 f8a5 	bl	8005dc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_CS_GPIO_Port, 		LCD9488_CS_Pin, 	GPIO_PIN_RESET);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2104      	movs	r1, #4
 8003c80:	4825      	ldr	r0, [pc, #148]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003c82:	f002 f8a0 	bl	8005dc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_RST_GPIO_Port, 		LCD9488_RST_Pin, 	GPIO_PIN_RESET);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2102      	movs	r1, #2
 8003c8a:	4823      	ldr	r0, [pc, #140]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003c8c:	f002 f89b 	bl	8005dc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD9488_LED_GPIO_Port, 		LCD9488_LED_Pin, 	GPIO_PIN_RESET);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2108      	movs	r1, #8
 8003c94:	4820      	ldr	r0, [pc, #128]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003c96:	f002 f896 	bl	8005dc6 <HAL_GPIO_WritePin>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LCD9488_DC_RS_Pin;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_DC_RS_GPIO_Port, &GPIO_InitStruct);
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4819      	ldr	r0, [pc, #100]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003cb2:	f001 fee3 	bl	8005a7c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_CS_Pin;
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_CS_GPIO_Port, &GPIO_InitStruct);
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4812      	ldr	r0, [pc, #72]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003cce:	f001 fed5 	bl	8005a7c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_RST_Pin;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_RST_GPIO_Port, &GPIO_InitStruct);
 8003ce2:	f107 0314 	add.w	r3, r7, #20
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480b      	ldr	r0, [pc, #44]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003cea:	f001 fec7 	bl	8005a7c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD9488_LED_Pin;
 8003cee:	2308      	movs	r3, #8
 8003cf0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD9488_LED_GPIO_Port, &GPIO_InitStruct);
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4619      	mov	r1, r3
 8003d04:	4804      	ldr	r0, [pc, #16]	; (8003d18 <LCD9488_Init_GPIO+0x11c>)
 8003d06:	f001 feb9 	bl	8005a7c <HAL_GPIO_Init>
}
 8003d0a:	bf00      	nop
 8003d0c:	3728      	adds	r7, #40	; 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40020800 	.word	0x40020800

08003d1c <LCD9488_Init>:
//=======================================================================================
void LCD9488_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
	MX_SPI2_Init();
 8003d20:	f7fe fd90 	bl	8002844 <MX_SPI2_Init>
	HAL_Delay(100);
 8003d24:	2064      	movs	r0, #100	; 0x64
 8003d26:	f000 fdd1 	bl	80048cc <HAL_Delay>
	LCD9488_Init_GPIO();
 8003d2a:	f7ff ff67 	bl	8003bfc <LCD9488_Init_GPIO>

	LCD9488_LED_SET;//Включить подсветку
 8003d2e:	2201      	movs	r2, #1
 8003d30:	2108      	movs	r1, #8
 8003d32:	4870      	ldr	r0, [pc, #448]	; (8003ef4 <LCD9488_Init+0x1d8>)
 8003d34:	f002 f847 	bl	8005dc6 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8003d38:	2064      	movs	r0, #100	; 0x64
 8003d3a:	f000 fdc7 	bl	80048cc <HAL_Delay>
 	LCD9488_RESET();
 8003d3e:	f000 fa3d 	bl	80041bc <LCD9488_RESET>
 	HAL_Delay(100);
 8003d42:	2064      	movs	r0, #100	; 0x64
 8003d44:	f000 fdc2 	bl	80048cc <HAL_Delay>

	LCD9488_Transport_WR_REG(0XF7);
 8003d48:	20f7      	movs	r0, #247	; 0xf7
 8003d4a:	f000 f8ed 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xA9);
 8003d4e:	20a9      	movs	r0, #169	; 0xa9
 8003d50:	f000 f910 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x51);
 8003d54:	2051      	movs	r0, #81	; 0x51
 8003d56:	f000 f90d 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2C);
 8003d5a:	202c      	movs	r0, #44	; 0x2c
 8003d5c:	f000 f90a 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x82);
 8003d60:	2082      	movs	r0, #130	; 0x82
 8003d62:	f000 f907 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC0);
 8003d66:	20c0      	movs	r0, #192	; 0xc0
 8003d68:	f000 f8de 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x11);
 8003d6c:	2011      	movs	r0, #17
 8003d6e:	f000 f901 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8003d72:	2009      	movs	r0, #9
 8003d74:	f000 f8fe 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xC1);
 8003d78:	20c1      	movs	r0, #193	; 0xc1
 8003d7a:	f000 f8d5 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x41);
 8003d7e:	2041      	movs	r0, #65	; 0x41
 8003d80:	f000 f8f8 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XC5);
 8003d84:	20c5      	movs	r0, #197	; 0xc5
 8003d86:	f000 f8cf 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f000 f8f2 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8003d90:	200a      	movs	r0, #10
 8003d92:	f000 f8ef 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x80);
 8003d96:	2080      	movs	r0, #128	; 0x80
 8003d98:	f000 f8ec 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB1);
 8003d9c:	20b1      	movs	r0, #177	; 0xb1
 8003d9e:	f000 f8c3 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xB0);
 8003da2:	20b0      	movs	r0, #176	; 0xb0
 8003da4:	f000 f8e6 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x11);
 8003da8:	2011      	movs	r0, #17
 8003daa:	f000 f8e3 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB4);
 8003dae:	20b4      	movs	r0, #180	; 0xb4
 8003db0:	f000 f8ba 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 8003db4:	2002      	movs	r0, #2
 8003db6:	f000 f8dd 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB6);
 8003dba:	20b6      	movs	r0, #182	; 0xb6
 8003dbc:	f000 f8b4 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x02);
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	f000 f8d7 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x42);
 8003dc6:	2042      	movs	r0, #66	; 0x42
 8003dc8:	f000 f8d4 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xB7);
 8003dcc:	20b7      	movs	r0, #183	; 0xb7
 8003dce:	f000 f8ab 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0xc6);
 8003dd2:	20c6      	movs	r0, #198	; 0xc6
 8003dd4:	f000 f8ce 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xBE);
 8003dd8:	20be      	movs	r0, #190	; 0xbe
 8003dda:	f000 f8a5 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003dde:	2000      	movs	r0, #0
 8003de0:	f000 f8c8 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 8003de4:	2004      	movs	r0, #4
 8003de6:	f000 f8c5 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE9);
 8003dea:	20e9      	movs	r0, #233	; 0xe9
 8003dec:	f000 f89c 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 f8bf 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x36);
 8003df6:	2036      	movs	r0, #54	; 0x36
 8003df8:	f000 f896 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA((1<<3)|(0<<7)|(1<<6)|(1<<5));
 8003dfc:	2068      	movs	r0, #104	; 0x68
 8003dfe:	f000 f8b9 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x3A);
 8003e02:	203a      	movs	r0, #58	; 0x3a
 8003e04:	f000 f890 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x66);
 8003e08:	2066      	movs	r0, #102	; 0x66
 8003e0a:	f000 f8b3 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0xE0);
 8003e0e:	20e0      	movs	r0, #224	; 0xe0
 8003e10:	f000 f88a 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003e14:	2000      	movs	r0, #0
 8003e16:	f000 f8ad 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x07);
 8003e1a:	2007      	movs	r0, #7
 8003e1c:	f000 f8aa 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x10);
 8003e20:	2010      	movs	r0, #16
 8003e22:	f000 f8a7 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8003e26:	2009      	movs	r0, #9
 8003e28:	f000 f8a4 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8003e2c:	2017      	movs	r0, #23
 8003e2e:	f000 f8a1 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0B);
 8003e32:	200b      	movs	r0, #11
 8003e34:	f000 f89e 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x41);
 8003e38:	2041      	movs	r0, #65	; 0x41
 8003e3a:	f000 f89b 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x89);
 8003e3e:	2089      	movs	r0, #137	; 0x89
 8003e40:	f000 f898 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x4B);
 8003e44:	204b      	movs	r0, #75	; 0x4b
 8003e46:	f000 f895 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8003e4a:	200a      	movs	r0, #10
 8003e4c:	f000 f892 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0C);
 8003e50:	200c      	movs	r0, #12
 8003e52:	f000 f88f 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 8003e56:	200e      	movs	r0, #14
 8003e58:	f000 f88c 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x18);
 8003e5c:	2018      	movs	r0, #24
 8003e5e:	f000 f889 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1B);
 8003e62:	201b      	movs	r0, #27
 8003e64:	f000 f886 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 8003e68:	200f      	movs	r0, #15
 8003e6a:	f000 f883 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0XE1);
 8003e6e:	20e1      	movs	r0, #225	; 0xe1
 8003e70:	f000 f85a 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f000 f87d 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x17);
 8003e7a:	2017      	movs	r0, #23
 8003e7c:	f000 f87a 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x1A);
 8003e80:	201a      	movs	r0, #26
 8003e82:	f000 f877 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x04);
 8003e86:	2004      	movs	r0, #4
 8003e88:	f000 f874 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0E);
 8003e8c:	200e      	movs	r0, #14
 8003e8e:	f000 f871 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x06);
 8003e92:	2006      	movs	r0, #6
 8003e94:	f000 f86e 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x2F);
 8003e98:	202f      	movs	r0, #47	; 0x2f
 8003e9a:	f000 f86b 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x45);
 8003e9e:	2045      	movs	r0, #69	; 0x45
 8003ea0:	f000 f868 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x43);
 8003ea4:	2043      	movs	r0, #67	; 0x43
 8003ea6:	f000 f865 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x02);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f000 f862 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0A);
 8003eb0:	200a      	movs	r0, #10
 8003eb2:	f000 f85f 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x09);
 8003eb6:	2009      	movs	r0, #9
 8003eb8:	f000 f85c 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x32);
 8003ebc:	2032      	movs	r0, #50	; 0x32
 8003ebe:	f000 f859 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x36);
 8003ec2:	2036      	movs	r0, #54	; 0x36
 8003ec4:	f000 f856 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x0F);
 8003ec8:	200f      	movs	r0, #15
 8003eca:	f000 f853 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_REG(0x11);
 8003ece:	2011      	movs	r0, #17
 8003ed0:	f000 f82a 	bl	8003f28 <LCD9488_Transport_WR_REG>
	HAL_Delay(120);
 8003ed4:	2078      	movs	r0, #120	; 0x78
 8003ed6:	f000 fcf9 	bl	80048cc <HAL_Delay>
	LCD9488_Transport_WR_REG(0x29);
 8003eda:	2029      	movs	r0, #41	; 0x29
 8003edc:	f000 f824 	bl	8003f28 <LCD9488_Transport_WR_REG>

	LCD9488_GUI_SetOrientation(USE_HORIZONTAL);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f000 f9d5 	bl	8004290 <LCD9488_GUI_SetOrientation>
	LCD9488_GUI_Clear(WHITE);
 8003ee6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003eea:	f000 f8f7 	bl	80040dc <LCD9488_GUI_Clear>

}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40020800 	.word	0x40020800

08003ef8 <LCD9488_Transport_SPI_WriteByte>:
//=======================================================================================
void LCD9488_Transport_SPI_WriteByte(uint8_t Byte)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8003f02:	bf00      	nop
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f8      	beq.n	8003f04 <LCD9488_Transport_SPI_WriteByte+0xc>
		LCD_SPI.Instance->DR = Byte;
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <LCD9488_Transport_SPI_WriteByte+0x2c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	79fa      	ldrb	r2, [r7, #7]
 8003f18:	60da      	str	r2, [r3, #12]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	20003bf4 	.word	0x20003bf4

08003f28 <LCD9488_Transport_WR_REG>:
//=======================================================================================
void LCD9488_Transport_WR_REG(uint8_t data)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 8003f32:	2200      	movs	r2, #0
 8003f34:	2104      	movs	r1, #4
 8003f36:	480d      	ldr	r0, [pc, #52]	; (8003f6c <LCD9488_Transport_WR_REG+0x44>)
 8003f38:	f001 ff45 	bl	8005dc6 <HAL_GPIO_WritePin>
   LCD9488_RS_CLR;
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2101      	movs	r1, #1
 8003f40:	480a      	ldr	r0, [pc, #40]	; (8003f6c <LCD9488_Transport_WR_REG+0x44>)
 8003f42:	f001 ff40 	bl	8005dc6 <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ffd5 	bl	8003ef8 <LCD9488_Transport_SPI_WriteByte>
   HAL_SPI_Transmit(&LCD_SPI, &data, 1, 10);
 8003f4e:	1df9      	adds	r1, r7, #7
 8003f50:	230a      	movs	r3, #10
 8003f52:	2201      	movs	r2, #1
 8003f54:	4806      	ldr	r0, [pc, #24]	; (8003f70 <LCD9488_Transport_WR_REG+0x48>)
 8003f56:	f004 fa5e 	bl	8008416 <HAL_SPI_Transmit>
   LCD9488_CS_SET;
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	2104      	movs	r1, #4
 8003f5e:	4803      	ldr	r0, [pc, #12]	; (8003f6c <LCD9488_Transport_WR_REG+0x44>)
 8003f60:	f001 ff31 	bl	8005dc6 <HAL_GPIO_WritePin>
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40020800 	.word	0x40020800
 8003f70:	20003bf4 	.word	0x20003bf4

08003f74 <LCD9488_Transport_WR_DATA>:
//=======================================================================================
void LCD9488_Transport_WR_DATA(uint8_t data)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
   LCD9488_CS_CLR;
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2104      	movs	r1, #4
 8003f82:	480a      	ldr	r0, [pc, #40]	; (8003fac <LCD9488_Transport_WR_DATA+0x38>)
 8003f84:	f001 ff1f 	bl	8005dc6 <HAL_GPIO_WritePin>
   LCD9488_RS_SET;
 8003f88:	2201      	movs	r2, #1
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4807      	ldr	r0, [pc, #28]	; (8003fac <LCD9488_Transport_WR_DATA+0x38>)
 8003f8e:	f001 ff1a 	bl	8005dc6 <HAL_GPIO_WritePin>
   LCD9488_Transport_SPI_WriteByte(data);
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ffaf 	bl	8003ef8 <LCD9488_Transport_SPI_WriteByte>
   LCD9488_CS_SET;
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	4803      	ldr	r0, [pc, #12]	; (8003fac <LCD9488_Transport_WR_DATA+0x38>)
 8003fa0:	f001 ff11 	bl	8005dc6 <HAL_GPIO_WritePin>
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40020800 	.word	0x40020800

08003fb0 <LCD9488_WriteReg>:
//=======================================================================================
void LCD9488_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	460a      	mov	r2, r1
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	80bb      	strh	r3, [r7, #4]
	LCD9488_Transport_WR_REG(LCD_Reg);
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ffb0 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(LCD_RegValue);
 8003fc8:	88bb      	ldrh	r3, [r7, #4]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ffd1 	bl	8003f74 <LCD9488_Transport_WR_DATA>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <LCD9488_WriteRAM_Prepare>:
//=======================================================================================
void LCD9488_WriteRAM_Prepare(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
	LCD9488_Transport_WR_REG(LCD9488_DEV.WramCmd);
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <LCD9488_WriteRAM_Prepare+0x14>)
 8003fe2:	891b      	ldrh	r3, [r3, #8]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ff9e 	bl	8003f28 <LCD9488_Transport_WR_REG>
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20003fec 	.word	0x20003fec

08003ff4 <LCD9488_WriteData_16Bit>:
//=======================================================================================
void LCD9488_WriteData_16Bit(uint16_t Data)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]
	uint8_t r = (Data>>8)&0xF8; 	// RED Color
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	b29b      	uxth	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f023 0307 	bic.w	r3, r3, #7
 800400a:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (Data>>3)&0xFC; 	// Green Color
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	08db      	lsrs	r3, r3, #3
 8004010:	b29b      	uxth	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f023 0303 	bic.w	r3, r3, #3
 8004018:	73bb      	strb	r3, [r7, #14]
	uint8_t b = Data<<3; 			// Blue Color
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	737b      	strb	r3, [r7, #13]

	LCD9488_CS_CLR;
 8004022:	2200      	movs	r2, #0
 8004024:	2104      	movs	r1, #4
 8004026:	481e      	ldr	r0, [pc, #120]	; (80040a0 <LCD9488_WriteData_16Bit+0xac>)
 8004028:	f001 fecd 	bl	8005dc6 <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 800402c:	2201      	movs	r2, #1
 800402e:	2101      	movs	r1, #1
 8004030:	481b      	ldr	r0, [pc, #108]	; (80040a0 <LCD9488_WriteData_16Bit+0xac>)
 8004032:	f001 fec8 	bl	8005dc6 <HAL_GPIO_WritePin>
	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004036:	bf00      	nop
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <LCD9488_WriteData_16Bit+0xb0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f8      	beq.n	8004038 <LCD9488_WriteData_16Bit+0x44>
		LCD_SPI.Instance->DR = r;
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <LCD9488_WriteData_16Bit+0xb0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800404e:	bf00      	nop
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <LCD9488_WriteData_16Bit+0xb0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f8      	beq.n	8004050 <LCD9488_WriteData_16Bit+0x5c>
		LCD_SPI.Instance->DR = g;
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <LCD9488_WriteData_16Bit+0xb0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	7bba      	ldrb	r2, [r7, #14]
 8004064:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004066:	bf00      	nop
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <LCD9488_WriteData_16Bit+0xb0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f8      	beq.n	8004068 <LCD9488_WriteData_16Bit+0x74>
		LCD_SPI.Instance->DR = b;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <LCD9488_WriteData_16Bit+0xb0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	7b7a      	ldrb	r2, [r7, #13]
 800407c:	60da      	str	r2, [r3, #12]

	while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800407e:	bf00      	nop
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <LCD9488_WriteData_16Bit+0xb0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f8      	beq.n	8004080 <LCD9488_WriteData_16Bit+0x8c>

	LCD9488_CS_SET;
 800408e:	2201      	movs	r2, #1
 8004090:	2104      	movs	r1, #4
 8004092:	4803      	ldr	r0, [pc, #12]	; (80040a0 <LCD9488_WriteData_16Bit+0xac>)
 8004094:	f001 fe97 	bl	8005dc6 <HAL_GPIO_WritePin>
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40020800 	.word	0x40020800
 80040a4:	20003bf4 	.word	0x20003bf4

080040a8 <LCD9488_GUI_Draw_Point>:
//=======================================================================================
void LCD9488_GUI_Draw_Point(uint16_t x,uint16_t y)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	460a      	mov	r2, r1
 80040b2:	80fb      	strh	r3, [r7, #6]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetCursor(x,y);
 80040b8:	88ba      	ldrh	r2, [r7, #4]
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f93e 	bl	8004340 <LCD9488_GUI_SetCursor>
	LCD9488_WriteData_16Bit(LCD9488_Point_Color);
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <LCD9488_GUI_Draw_Point+0x30>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff93 	bl	8003ff4 <LCD9488_WriteData_16Bit>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000330 	.word	0x20000330

080040dc <LCD9488_GUI_Clear>:
//=======================================================================================
void LCD9488_GUI_Clear(uint16_t Color)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	80fb      	strh	r3, [r7, #6]
	LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 80040e6:	4b32      	ldr	r3, [pc, #200]	; (80041b0 <LCD9488_GUI_Clear+0xd4>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <LCD9488_GUI_Clear+0xd4>)
 80040f0:	885b      	ldrh	r3, [r3, #2]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2100      	movs	r1, #0
 80040f8:	2000      	movs	r0, #0
 80040fa:	f000 f875 	bl	80041e8 <LCD9488_GUI_SetWindows>
	LCD9488_CS_CLR;
 80040fe:	2200      	movs	r2, #0
 8004100:	2104      	movs	r1, #4
 8004102:	482c      	ldr	r0, [pc, #176]	; (80041b4 <LCD9488_GUI_Clear+0xd8>)
 8004104:	f001 fe5f 	bl	8005dc6 <HAL_GPIO_WritePin>
	LCD9488_RS_SET;
 8004108:	2201      	movs	r2, #1
 800410a:	2101      	movs	r1, #1
 800410c:	4829      	ldr	r0, [pc, #164]	; (80041b4 <LCD9488_GUI_Clear+0xd8>)
 800410e:	f001 fe5a 	bl	8005dc6 <HAL_GPIO_WritePin>
	uint32_t cnt = LCD9488_DEV.Height * LCD9488_DEV.Width;
 8004112:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <LCD9488_GUI_Clear+0xd4>)
 8004114:	885b      	ldrh	r3, [r3, #2]
 8004116:	461a      	mov	r2, r3
 8004118:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <LCD9488_GUI_Clear+0xd4>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	fb03 f302 	mul.w	r3, r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
	uint8_t r = (Color>>8)&0xF8; 	// RED Color
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	b29b      	uxth	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	72fb      	strb	r3, [r7, #11]
	uint8_t g = (Color>>3)&0xFC; 	// Green Color
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	b29b      	uxth	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f023 0303 	bic.w	r3, r3, #3
 800413c:	72bb      	strb	r3, [r7, #10]
	uint8_t b = Color<<3; 			// Blue Color
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	727b      	strb	r3, [r7, #9]

	while (cnt)
 8004146:	e026      	b.n	8004196 <LCD9488_GUI_Clear+0xba>
	{
		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004148:	bf00      	nop
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <LCD9488_GUI_Clear+0xdc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f8      	beq.n	800414a <LCD9488_GUI_Clear+0x6e>
			LCD_SPI.Instance->DR = r;//RED
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <LCD9488_GUI_Clear+0xdc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	7afa      	ldrb	r2, [r7, #11]
 800415e:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004160:	bf00      	nop
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <LCD9488_GUI_Clear+0xdc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f8      	beq.n	8004162 <LCD9488_GUI_Clear+0x86>
			LCD_SPI.Instance->DR = g;//GREEN
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <LCD9488_GUI_Clear+0xdc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	7aba      	ldrb	r2, [r7, #10]
 8004176:	60da      	str	r2, [r3, #12]

		while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004178:	bf00      	nop
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <LCD9488_GUI_Clear+0xdc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f8      	beq.n	800417a <LCD9488_GUI_Clear+0x9e>
			LCD_SPI.Instance->DR = b;//BLUE
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <LCD9488_GUI_Clear+0xdc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	7a7a      	ldrb	r2, [r7, #9]
 800418e:	60da      	str	r2, [r3, #12]

		cnt--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b01      	subs	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
	while (cnt)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1d5      	bne.n	8004148 <LCD9488_GUI_Clear+0x6c>
	}
	LCD9488_CS_SET;
 800419c:	2201      	movs	r2, #1
 800419e:	2104      	movs	r1, #4
 80041a0:	4804      	ldr	r0, [pc, #16]	; (80041b4 <LCD9488_GUI_Clear+0xd8>)
 80041a2:	f001 fe10 	bl	8005dc6 <HAL_GPIO_WritePin>
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20003fec 	.word	0x20003fec
 80041b4:	40020800 	.word	0x40020800
 80041b8:	20003bf4 	.word	0x20003bf4

080041bc <LCD9488_RESET>:

//=======================================================================================
void LCD9488_RESET(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	LCD9488_RST_CLR;
 80041c0:	2200      	movs	r2, #0
 80041c2:	2102      	movs	r1, #2
 80041c4:	4807      	ldr	r0, [pc, #28]	; (80041e4 <LCD9488_RESET+0x28>)
 80041c6:	f001 fdfe 	bl	8005dc6 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80041ca:	2064      	movs	r0, #100	; 0x64
 80041cc:	f000 fb7e 	bl	80048cc <HAL_Delay>
	LCD9488_RST_SET;
 80041d0:	2201      	movs	r2, #1
 80041d2:	2102      	movs	r1, #2
 80041d4:	4803      	ldr	r0, [pc, #12]	; (80041e4 <LCD9488_RESET+0x28>)
 80041d6:	f001 fdf6 	bl	8005dc6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80041da:	2032      	movs	r0, #50	; 0x32
 80041dc:	f000 fb76 	bl	80048cc <HAL_Delay>
}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40020800 	.word	0x40020800

080041e8 <LCD9488_GUI_SetWindows>:
//=======================================================================================
void LCD9488_GUI_SetWindows(uint16_t xStar, uint16_t yStar,uint16_t xEnd,uint16_t yEnd)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	4623      	mov	r3, r4
 80041f8:	80fb      	strh	r3, [r7, #6]
 80041fa:	4603      	mov	r3, r0
 80041fc:	80bb      	strh	r3, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	807b      	strh	r3, [r7, #2]
 8004202:	4613      	mov	r3, r2
 8004204:	803b      	strh	r3, [r7, #0]
	LCD9488_Transport_WR_REG(LCD9488_DEV.SetXcmd);
 8004206:	4b21      	ldr	r3, [pc, #132]	; (800428c <LCD9488_GUI_SetWindows+0xa4>)
 8004208:	895b      	ldrh	r3, [r3, #10]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fe8b 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(xStar>>8);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b29b      	uxth	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff feaa 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xStar);
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fea5 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(xEnd>>8);
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	b29b      	uxth	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fe9e 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&xEnd);
 8004238:	887b      	ldrh	r3, [r7, #2]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fe99 	bl	8003f74 <LCD9488_Transport_WR_DATA>

	LCD9488_Transport_WR_REG(LCD9488_DEV.SetYcmd);
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <LCD9488_GUI_SetWindows+0xa4>)
 8004244:	899b      	ldrh	r3, [r3, #12]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fe6d 	bl	8003f28 <LCD9488_Transport_WR_REG>
	LCD9488_Transport_WR_DATA(yStar>>8);
 800424e:	88bb      	ldrh	r3, [r7, #4]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	b29b      	uxth	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fe8c 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yStar);
 800425c:	88bb      	ldrh	r3, [r7, #4]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe87 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(yEnd>>8);
 8004266:	883b      	ldrh	r3, [r7, #0]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	b29b      	uxth	r3, r3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fe80 	bl	8003f74 <LCD9488_Transport_WR_DATA>
	LCD9488_Transport_WR_DATA(0x00FF&yEnd);
 8004274:	883b      	ldrh	r3, [r7, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fe7b 	bl	8003f74 <LCD9488_Transport_WR_DATA>

	LCD9488_WriteRAM_Prepare();
 800427e:	f7ff fead 	bl	8003fdc <LCD9488_WriteRAM_Prepare>
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bd90      	pop	{r4, r7, pc}
 800428a:	bf00      	nop
 800428c:	20003fec 	.word	0x20003fec

08004290 <LCD9488_GUI_SetOrientation>:
//=======================================================================================
void LCD9488_GUI_SetOrientation(uint8_t direction)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
			LCD9488_DEV.SetXcmd=0x2A;
 800429a:	4b28      	ldr	r3, [pc, #160]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 800429c:	222a      	movs	r2, #42	; 0x2a
 800429e:	815a      	strh	r2, [r3, #10]
			LCD9488_DEV.SetYcmd=0x2B;
 80042a0:	4b26      	ldr	r3, [pc, #152]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 80042a2:	222b      	movs	r2, #43	; 0x2b
 80042a4:	819a      	strh	r2, [r3, #12]
			LCD9488_DEV.WramCmd=0x2C;
 80042a6:	4b25      	ldr	r3, [pc, #148]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 80042a8:	222c      	movs	r2, #44	; 0x2c
 80042aa:	811a      	strh	r2, [r3, #8]
	switch(direction){
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d83e      	bhi.n	8004330 <LCD9488_GUI_SetOrientation+0xa0>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <LCD9488_GUI_SetOrientation+0x28>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042e3 	.word	0x080042e3
 80042c0:	080042fd 	.word	0x080042fd
 80042c4:	08004317 	.word	0x08004317
		case 0:										// 0 degree
			LCD9488_DEV.Width=LCD_W;
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 80042ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042ce:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 80042d0:	4b1a      	ldr	r3, [pc, #104]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 80042d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80042d6:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80042d8:	2108      	movs	r1, #8
 80042da:	2036      	movs	r0, #54	; 0x36
 80042dc:	f7ff fe68 	bl	8003fb0 <LCD9488_WriteReg>
		break;
 80042e0:	e027      	b.n	8004332 <LCD9488_GUI_SetOrientation+0xa2>
		case 1:										// 90 degree
			LCD9488_DEV.Width=LCD_H;
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 80042e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80042e8:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 80042ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042f0:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80042f2:	2168      	movs	r1, #104	; 0x68
 80042f4:	2036      	movs	r0, #54	; 0x36
 80042f6:	f7ff fe5b 	bl	8003fb0 <LCD9488_WriteReg>
		break;
 80042fa:	e01a      	b.n	8004332 <LCD9488_GUI_SetOrientation+0xa2>
		case 2:										// 180 degree
			LCD9488_DEV.Width=LCD_W;
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 80042fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004302:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_H;
 8004304:	4b0d      	ldr	r3, [pc, #52]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 8004306:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800430a:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800430c:	21c8      	movs	r1, #200	; 0xc8
 800430e:	2036      	movs	r0, #54	; 0x36
 8004310:	f7ff fe4e 	bl	8003fb0 <LCD9488_WriteReg>
		break;
 8004314:	e00d      	b.n	8004332 <LCD9488_GUI_SetOrientation+0xa2>
		case 3:										// 270 degree
			LCD9488_DEV.Width=LCD_H;
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 8004318:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800431c:	801a      	strh	r2, [r3, #0]
			LCD9488_DEV.Height=LCD_W;
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <LCD9488_GUI_SetOrientation+0xac>)
 8004320:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004324:	805a      	strh	r2, [r3, #2]
			LCD9488_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8004326:	21a8      	movs	r1, #168	; 0xa8
 8004328:	2036      	movs	r0, #54	; 0x36
 800432a:	f7ff fe41 	bl	8003fb0 <LCD9488_WriteReg>
		break;
 800432e:	e000      	b.n	8004332 <LCD9488_GUI_SetOrientation+0xa2>
		default:break;
 8004330:	bf00      	nop
	}
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20003fec 	.word	0x20003fec

08004340 <LCD9488_GUI_SetCursor>:
//=======================================================================================
void LCD9488_GUI_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	460a      	mov	r2, r1
 800434a:	80fb      	strh	r3, [r7, #6]
 800434c:	4613      	mov	r3, r2
 800434e:	80bb      	strh	r3, [r7, #4]
	LCD9488_GUI_SetWindows(Xpos,Ypos,Xpos,Ypos);										// Окно размером в 1 точку
 8004350:	88bb      	ldrh	r3, [r7, #4]
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	88b9      	ldrh	r1, [r7, #4]
 8004356:	88f8      	ldrh	r0, [r7, #6]
 8004358:	f7ff ff46 	bl	80041e8 <LCD9488_GUI_SetWindows>
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <LCD9488_GUI_SetFont>:
		LCD9488_GUI_Fill(a,y,b,y,LCD9488_Point_Color);
	}
}
//=======================================================================================
void LCD9488_GUI_SetFont(unsigned char* AFont, uint16_t AFontColor, uint16_t ABackgroundColor) // Установить параметры для выбранного шрифта
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
 8004370:	4613      	mov	r3, r2
 8004372:	803b      	strh	r3, [r7, #0]
	LCD9488_CurrentFont = AFont;														// Указатель на массив с данными шрифта
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <LCD9488_GUI_SetFont+0x68>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6013      	str	r3, [r2, #0]
	LCD9488_Point_Color = AFontColor;													// Цвет пикселей рисования
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <LCD9488_GUI_SetFont+0x6c>)
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	8013      	strh	r3, [r2, #0]
	LCD9488_Back_Color  = ABackgroundColor;												// Цвет фона
 8004380:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <LCD9488_GUI_SetFont+0x70>)
 8004382:	883b      	ldrh	r3, [r7, #0]
 8004384:	8013      	strh	r3, [r2, #0]

	// Прочитать параметры шрифта
	LCD9488_CurrentFont_FirstChar		= LCD9488_CurrentFont[0];          				// Первый символ в наборе
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <LCD9488_GUI_SetFont+0x68>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <LCD9488_GUI_SetFont+0x74>)
 800438e:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_LastChar		= LCD9488_CurrentFont[1];          				// Последний символ в наборе
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <LCD9488_GUI_SetFont+0x68>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	785a      	ldrb	r2, [r3, #1]
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <LCD9488_GUI_SetFont+0x78>)
 8004398:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_Offset			= LCD9488_CurrentFont[2];          				// Число байтов на 1 символ в массиве шрифта
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <LCD9488_GUI_SetFont+0x68>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	789a      	ldrb	r2, [r3, #2]
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <LCD9488_GUI_SetFont+0x7c>)
 80043a2:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixHoriz 		= LCD9488_CurrentFont[3];           			// Размер символов по горизонтали
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <LCD9488_GUI_SetFont+0x68>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	78da      	ldrb	r2, [r3, #3]
 80043aa:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <LCD9488_GUI_SetFont+0x80>)
 80043ac:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_PixVert 		= LCD9488_CurrentFont[4];                   	// Размер символов по вертикали
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <LCD9488_GUI_SetFont+0x68>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	791a      	ldrb	r2, [r3, #4]
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <LCD9488_GUI_SetFont+0x84>)
 80043b6:	701a      	strb	r2, [r3, #0]
	LCD9488_CurrentFont_BytesPerLine	= LCD9488_CurrentFont[5];                   	// Число байт на 1 горизонтальную линию в символе
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <LCD9488_GUI_SetFont+0x68>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	795a      	ldrb	r2, [r3, #5]
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <LCD9488_GUI_SetFont+0x88>)
 80043c0:	701a      	strb	r2, [r3, #0]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	20003a08 	.word	0x20003a08
 80043d0:	20000330 	.word	0x20000330
 80043d4:	20000004 	.word	0x20000004
 80043d8:	20003a2a 	.word	0x20003a2a
 80043dc:	20003a0c 	.word	0x20003a0c
 80043e0:	20003a1a 	.word	0x20003a1a
 80043e4:	20003a19 	.word	0x20003a19
 80043e8:	20003a18 	.word	0x20003a18
 80043ec:	20003a2b 	.word	0x20003a2b

080043f0 <LCD9488_GUI_GotoXY>:
//=======================================================================================
void LCD9488_GUI_GotoXY(uint16_t x1, uint16_t y1)										// Установить координаты начала для печати символа или строки
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	460a      	mov	r2, r1
 80043fa:	80fb      	strh	r3, [r7, #6]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80bb      	strh	r3, [r7, #4]
	char_x = x1;
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	4a05      	ldr	r2, [pc, #20]	; (8004418 <LCD9488_GUI_GotoXY+0x28>)
 8004404:	6013      	str	r3, [r2, #0]
	char_y = y1;
 8004406:	88bb      	ldrh	r3, [r7, #4]
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <LCD9488_GUI_GotoXY+0x2c>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20003a14 	.word	0x20003a14
 800441c:	20003a30 	.word	0x20003a30

08004420 <LCD9488_GUI_Draw_Char>:
//=======================================================================================
void LCD9488_GUI_Draw_Char(uint16_t fc, uint16_t bc, uint8_t c, ADrawType Overlying)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b089      	sub	sp, #36	; 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4623      	mov	r3, r4
 8004430:	80fb      	strh	r3, [r7, #6]
 8004432:	4603      	mov	r3, r0
 8004434:	80bb      	strh	r3, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
 800443a:	4613      	mov	r3, r2
 800443c:	70bb      	strb	r3, [r7, #2]
    unsigned int b;
    unsigned char* CurCharBitmap;														// начало данных для текущего символа в массиве шрифта
    unsigned char z, cur_width;

    if ((c < LCD9488_CurrentFont_FirstChar) || (c > LCD9488_CurrentFont_LastChar))
 800443e:	4b74      	ldr	r3, [pc, #464]	; (8004610 <LCD9488_GUI_Draw_Char+0x1f0>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	429a      	cmp	r2, r3
 8004446:	f0c0 817b 	bcc.w	8004740 <LCD9488_GUI_Draw_Char+0x320>
 800444a:	4b72      	ldr	r3, [pc, #456]	; (8004614 <LCD9488_GUI_Draw_Char+0x1f4>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	429a      	cmp	r2, r3
 8004452:	f200 8175 	bhi.w	8004740 <LCD9488_GUI_Draw_Char+0x320>
    {
    	return;  																		// работаем только с символами, которые есть в шрифте
    }

	c = c - LCD9488_CurrentFont_FirstChar; 												// сдвигаем до 1го символа в наборе (см ASCII таблицу)
 8004456:	4b6e      	ldr	r3, [pc, #440]	; (8004610 <LCD9488_GUI_Draw_Char+0x1f0>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	70fb      	strb	r3, [r7, #3]

    if (char_x + LCD9488_CurrentFont_PixHoriz > LCD9488_DEV.Width)
 8004460:	4b6d      	ldr	r3, [pc, #436]	; (8004618 <LCD9488_GUI_Draw_Char+0x1f8>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	4b6d      	ldr	r3, [pc, #436]	; (800461c <LCD9488_GUI_Draw_Char+0x1fc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4413      	add	r3, r2
 800446c:	4a6c      	ldr	r2, [pc, #432]	; (8004620 <LCD9488_GUI_Draw_Char+0x200>)
 800446e:	8812      	ldrh	r2, [r2, #0]
 8004470:	4293      	cmp	r3, r2
 8004472:	d918      	bls.n	80044a6 <LCD9488_GUI_Draw_Char+0x86>
     {
         char_x = 0;
 8004474:	4b69      	ldr	r3, [pc, #420]	; (800461c <LCD9488_GUI_Draw_Char+0x1fc>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
         char_y = char_y + LCD9488_CurrentFont_PixVert;
 800447a:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <LCD9488_GUI_Draw_Char+0x204>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4b69      	ldr	r3, [pc, #420]	; (8004628 <LCD9488_GUI_Draw_Char+0x208>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4413      	add	r3, r2
 8004486:	4a68      	ldr	r2, [pc, #416]	; (8004628 <LCD9488_GUI_Draw_Char+0x208>)
 8004488:	6013      	str	r3, [r2, #0]
         if (char_y >= (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <LCD9488_GUI_Draw_Char+0x200>)
 800448c:	885b      	ldrh	r3, [r3, #2]
 800448e:	461a      	mov	r2, r3
 8004490:	4b64      	ldr	r3, [pc, #400]	; (8004624 <LCD9488_GUI_Draw_Char+0x204>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	461a      	mov	r2, r3
 8004498:	4b63      	ldr	r3, [pc, #396]	; (8004628 <LCD9488_GUI_Draw_Char+0x208>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d802      	bhi.n	80044a6 <LCD9488_GUI_Draw_Char+0x86>
         {
             char_y = 0;
 80044a0:	4b61      	ldr	r3, [pc, #388]	; (8004628 <LCD9488_GUI_Draw_Char+0x208>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
         }
     }

    CurCharBitmap = &LCD9488_CurrentFont[((c) * LCD9488_CurrentFont_Offset) + 6]; 		// начало массива текущего символа (с = номер символа; offset = сколько байтов на символ в шрифте; 6 = первые 6 байт во всем массиве - заголовок с параметрами шрифта)
 80044a6:	4b61      	ldr	r3, [pc, #388]	; (800462c <LCD9488_GUI_Draw_Char+0x20c>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	4960      	ldr	r1, [pc, #384]	; (8004630 <LCD9488_GUI_Draw_Char+0x210>)
 80044ae:	7809      	ldrb	r1, [r1, #0]
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	3306      	adds	r3, #6
 80044b6:	4413      	add	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

    cur_width = CurCharBitmap[0];                          								// ширина текущего символа - в начале каждого символа первый байт - его ширина
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	74fb      	strb	r3, [r7, #19]

    if (Overlying == DRAW_OVERLYING)													// Если режим наложения - рисуем только значащие точки символа поверх того что уже нарисовано (медленно)
 80044c0:	78bb      	ldrb	r3, [r7, #2]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d150      	bne.n	8004568 <LCD9488_GUI_Draw_Char+0x148>
    {
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80044c6:	2300      	movs	r3, #0
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e03c      	b.n	8004546 <LCD9488_GUI_Draw_Char+0x126>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80044cc:	2300      	movs	r3, #0
 80044ce:	77bb      	strb	r3, [r7, #30]
 80044d0:	e031      	b.n	8004536 <LCD9488_GUI_Draw_Char+0x116>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3) + 1];
 80044d2:	4b58      	ldr	r3, [pc, #352]	; (8004634 <LCD9488_GUI_Draw_Char+0x214>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	7fbb      	ldrb	r3, [r7, #30]
 80044da:	fb03 f302 	mul.w	r3, r3, r2
 80044de:	7ffa      	ldrb	r2, [r7, #31]
 80044e0:	08d2      	lsrs	r2, r2, #3
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	4413      	add	r3, r2
 80044e6:	3301      	adds	r3, #1
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	74bb      	strb	r3, [r7, #18]

               b = 1 << (cur_y & 0x07);
 80044f0:	7ffb      	ldrb	r3, [r7, #31]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	2201      	movs	r2, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 80044fe:	7cba      	ldrb	r2, [r7, #18]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <LCD9488_GUI_Draw_Char+0x110>
               {

               }
               else																		// точка изображения символа
               {
            	   LCD9488_Point_Color = fc;											// устанавливаем цвет точки
 8004508:	4a4b      	ldr	r2, [pc, #300]	; (8004638 <LCD9488_GUI_Draw_Char+0x218>)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	8013      	strh	r3, [r2, #0]
            	   LCD9488_GUI_Draw_Point(char_x + cur_x, char_y + cur_y);				// Рисуем точку по координатам
 800450e:	7fbb      	ldrb	r3, [r7, #30]
 8004510:	b29a      	uxth	r2, r3
 8004512:	4b42      	ldr	r3, [pc, #264]	; (800461c <LCD9488_GUI_Draw_Char+0x1fc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	4413      	add	r3, r2
 800451a:	b298      	uxth	r0, r3
 800451c:	7ffb      	ldrb	r3, [r7, #31]
 800451e:	b29a      	uxth	r2, r3
 8004520:	4b41      	ldr	r3, [pc, #260]	; (8004628 <LCD9488_GUI_Draw_Char+0x208>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	4413      	add	r3, r2
 8004528:	b29b      	uxth	r3, r3
 800452a:	4619      	mov	r1, r3
 800452c:	f7ff fdbc 	bl	80040a8 <LCD9488_GUI_Draw_Point>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 8004530:	7fbb      	ldrb	r3, [r7, #30]
 8004532:	3301      	adds	r3, #1
 8004534:	77bb      	strb	r3, [r7, #30]
 8004536:	4b38      	ldr	r3, [pc, #224]	; (8004618 <LCD9488_GUI_Draw_Char+0x1f8>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	7fba      	ldrb	r2, [r7, #30]
 800453c:	429a      	cmp	r2, r3
 800453e:	d3c8      	bcc.n	80044d2 <LCD9488_GUI_Draw_Char+0xb2>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 8004540:	7ffb      	ldrb	r3, [r7, #31]
 8004542:	3301      	adds	r3, #1
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <LCD9488_GUI_Draw_Char+0x204>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	7ffa      	ldrb	r2, [r7, #31]
 800454c:	429a      	cmp	r2, r3
 800454e:	d3bd      	bcc.n	80044cc <LCD9488_GUI_Draw_Char+0xac>
               }


           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <LCD9488_GUI_Draw_Char+0x200>)
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <LCD9488_GUI_Draw_Char+0x200>)
 800455a:	885b      	ldrh	r3, [r3, #2]
 800455c:	3b01      	subs	r3, #1
 800455e:	b29b      	uxth	r3, r3
 8004560:	2100      	movs	r1, #0
 8004562:	2000      	movs	r0, #0
 8004564:	f7ff fe40 	bl	80041e8 <LCD9488_GUI_SetWindows>

    }
    if (Overlying == DRAW_NO_OVERLYING)													// Если НЕ режим наложения - рисуем символ цветом fc на фоне bc
 8004568:	78bb      	ldrb	r3, [r7, #2]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 80d1 	bne.w	8004712 <LCD9488_GUI_Draw_Char+0x2f2>
    {
    	uint8_t red, green, blue;														// цветовые компопнеты точки

        LCD9488_GUI_SetWindows(char_x, char_y, char_x + LCD9488_CurrentFont_PixHoriz - 1, char_y + LCD9488_CurrentFont_PixVert);
 8004570:	4b2a      	ldr	r3, [pc, #168]	; (800461c <LCD9488_GUI_Draw_Char+0x1fc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b298      	uxth	r0, r3
 8004576:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <LCD9488_GUI_Draw_Char+0x208>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	b299      	uxth	r1, r3
 800457c:	4b26      	ldr	r3, [pc, #152]	; (8004618 <LCD9488_GUI_Draw_Char+0x1f8>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b29a      	uxth	r2, r3
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <LCD9488_GUI_Draw_Char+0x1fc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	4413      	add	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29c      	uxth	r4, r3
 8004590:	4b24      	ldr	r3, [pc, #144]	; (8004624 <LCD9488_GUI_Draw_Char+0x204>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b29a      	uxth	r2, r3
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <LCD9488_GUI_Draw_Char+0x208>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	4413      	add	r3, r2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4622      	mov	r2, r4
 80045a2:	f7ff fe21 	bl	80041e8 <LCD9488_GUI_SetWindows>

        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80045a6:	2300      	movs	r3, #0
 80045a8:	76bb      	strb	r3, [r7, #26]
 80045aa:	e0a0      	b.n	80046ee <LCD9488_GUI_Draw_Char+0x2ce>
        {
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80045ac:	2300      	movs	r3, #0
 80045ae:	767b      	strb	r3, [r7, #25]
 80045b0:	e094      	b.n	80046dc <LCD9488_GUI_Draw_Char+0x2bc>
           {
               z =  CurCharBitmap[LCD9488_CurrentFont_BytesPerLine * cur_x + ((cur_y & 0xF8) >> 3)+1];
 80045b2:	4b20      	ldr	r3, [pc, #128]	; (8004634 <LCD9488_GUI_Draw_Char+0x214>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	7e7b      	ldrb	r3, [r7, #25]
 80045ba:	fb03 f302 	mul.w	r3, r3, r2
 80045be:	7eba      	ldrb	r2, [r7, #26]
 80045c0:	08d2      	lsrs	r2, r2, #3
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	4413      	add	r3, r2
 80045c6:	3301      	adds	r3, #1
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	74bb      	strb	r3, [r7, #18]
               b = 1 << (cur_y & 0x07);
 80045d0:	7ebb      	ldrb	r3, [r7, #26]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2201      	movs	r2, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	60fb      	str	r3, [r7, #12]

               if (( z & b ) == 0x00) 													// фон, там где нет точки изображения символа
 80045de:	7cba      	ldrb	r2, [r7, #18]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d129      	bne.n	800463c <LCD9488_GUI_Draw_Char+0x21c>
               {
            	   red		= (bc>>8)&0xF8;
 80045e8:	88bb      	ldrh	r3, [r7, #4]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	777b      	strb	r3, [r7, #29]
            	   green 	= (bc>>3)&0xFC;
 80045f6:	88bb      	ldrh	r3, [r7, #4]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	773b      	strb	r3, [r7, #28]
            	   blue	= bc<<3;
 8004604:	88bb      	ldrh	r3, [r7, #4]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	76fb      	strb	r3, [r7, #27]
 800460c:	e028      	b.n	8004660 <LCD9488_GUI_Draw_Char+0x240>
 800460e:	bf00      	nop
 8004610:	20003a2a 	.word	0x20003a2a
 8004614:	20003a0c 	.word	0x20003a0c
 8004618:	20003a19 	.word	0x20003a19
 800461c:	20003a14 	.word	0x20003a14
 8004620:	20003fec 	.word	0x20003fec
 8004624:	20003a18 	.word	0x20003a18
 8004628:	20003a30 	.word	0x20003a30
 800462c:	20003a08 	.word	0x20003a08
 8004630:	20003a1a 	.word	0x20003a1a
 8004634:	20003a2b 	.word	0x20003a2b
 8004638:	20000330 	.word	0x20000330
               }
               else																		// точка изображения символа
               {
                  	red		= (fc>>8)&0xF8;
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	b29b      	uxth	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f023 0307 	bic.w	r3, r3, #7
 8004648:	777b      	strb	r3, [r7, #29]
                  	green 	= (fc>>3)&0xFC;
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	08db      	lsrs	r3, r3, #3
 800464e:	b29b      	uxth	r3, r3
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	773b      	strb	r3, [r7, #28]
                  	blue	= fc<<3;
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	76fb      	strb	r3, [r7, #27]
               }
               // Пишет компонеты цветов для текущей точик в символе
               LCD9488_CS_CLR;
 8004660:	2200      	movs	r2, #0
 8004662:	2104      	movs	r1, #4
 8004664:	4838      	ldr	r0, [pc, #224]	; (8004748 <LCD9488_GUI_Draw_Char+0x328>)
 8004666:	f001 fbae 	bl	8005dc6 <HAL_GPIO_WritePin>
               LCD9488_RS_SET;
 800466a:	2201      	movs	r2, #1
 800466c:	2101      	movs	r1, #1
 800466e:	4836      	ldr	r0, [pc, #216]	; (8004748 <LCD9488_GUI_Draw_Char+0x328>)
 8004670:	f001 fba9 	bl	8005dc6 <HAL_GPIO_WritePin>
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 8004674:	bf00      	nop
 8004676:	4b35      	ldr	r3, [pc, #212]	; (800474c <LCD9488_GUI_Draw_Char+0x32c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f8      	beq.n	8004676 <LCD9488_GUI_Draw_Char+0x256>
               	   LCD_SPI.Instance->DR = red;
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <LCD9488_GUI_Draw_Char+0x32c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	7f7a      	ldrb	r2, [r7, #29]
 800468a:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 800468c:	bf00      	nop
 800468e:	4b2f      	ldr	r3, [pc, #188]	; (800474c <LCD9488_GUI_Draw_Char+0x32c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f8      	beq.n	800468e <LCD9488_GUI_Draw_Char+0x26e>
               	   LCD_SPI.Instance->DR = green;
 800469c:	4b2b      	ldr	r3, [pc, #172]	; (800474c <LCD9488_GUI_Draw_Char+0x32c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	7f3a      	ldrb	r2, [r7, #28]
 80046a2:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80046a4:	bf00      	nop
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <LCD9488_GUI_Draw_Char+0x32c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f8      	beq.n	80046a6 <LCD9488_GUI_Draw_Char+0x286>
               	   LCD_SPI.Instance->DR = blue;
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <LCD9488_GUI_Draw_Char+0x32c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	7efa      	ldrb	r2, [r7, #27]
 80046ba:	60da      	str	r2, [r3, #12]
               while ( !( LCD_SPI.Instance->SR & SPI_SR_TXE ) );
 80046bc:	bf00      	nop
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <LCD9488_GUI_Draw_Char+0x32c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f8      	beq.n	80046be <LCD9488_GUI_Draw_Char+0x29e>

               LCD9488_CS_SET;
 80046cc:	2201      	movs	r2, #1
 80046ce:	2104      	movs	r1, #4
 80046d0:	481d      	ldr	r0, [pc, #116]	; (8004748 <LCD9488_GUI_Draw_Char+0x328>)
 80046d2:	f001 fb78 	bl	8005dc6 <HAL_GPIO_WritePin>
           for (uint8_t cur_x = 0; cur_x < LCD9488_CurrentFont_PixHoriz; cur_x++)		// перебор по горизонтали
 80046d6:	7e7b      	ldrb	r3, [r7, #25]
 80046d8:	3301      	adds	r3, #1
 80046da:	767b      	strb	r3, [r7, #25]
 80046dc:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <LCD9488_GUI_Draw_Char+0x330>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	7e7a      	ldrb	r2, [r7, #25]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	f4ff af65 	bcc.w	80045b2 <LCD9488_GUI_Draw_Char+0x192>
        for (uint8_t cur_y = 0; cur_y < LCD9488_CurrentFont_PixVert; cur_y++)			// перебор по вертикали
 80046e8:	7ebb      	ldrb	r3, [r7, #26]
 80046ea:	3301      	adds	r3, #1
 80046ec:	76bb      	strb	r3, [r7, #26]
 80046ee:	4b19      	ldr	r3, [pc, #100]	; (8004754 <LCD9488_GUI_Draw_Char+0x334>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	7eba      	ldrb	r2, [r7, #26]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	f4ff af59 	bcc.w	80045ac <LCD9488_GUI_Draw_Char+0x18c>
           }
       }
       LCD9488_GUI_SetWindows(0,0,LCD9488_DEV.Width-1,LCD9488_DEV.Height-1);
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <LCD9488_GUI_Draw_Char+0x338>)
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	4b15      	ldr	r3, [pc, #84]	; (8004758 <LCD9488_GUI_Draw_Char+0x338>)
 8004704:	885b      	ldrh	r3, [r3, #2]
 8004706:	3b01      	subs	r3, #1
 8004708:	b29b      	uxth	r3, r3
 800470a:	2100      	movs	r1, #0
 800470c:	2000      	movs	r0, #0
 800470e:	f7ff fd6b 	bl	80041e8 <LCD9488_GUI_SetWindows>
    }

    // Сдвигаем позицию (char_x, char_y) для печати следующего символа
    if ((cur_width + 2) < LCD9488_CurrentFont_PixHoriz)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	3302      	adds	r3, #2
 8004716:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <LCD9488_GUI_Draw_Char+0x330>)
 8004718:	7812      	ldrb	r2, [r2, #0]
 800471a:	4293      	cmp	r3, r2
 800471c:	da07      	bge.n	800472e <LCD9488_GUI_Draw_Char+0x30e>
    {
        char_x = char_x + cur_width + 2;
 800471e:	7cfa      	ldrb	r2, [r7, #19]
 8004720:	4b0e      	ldr	r3, [pc, #56]	; (800475c <LCD9488_GUI_Draw_Char+0x33c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4413      	add	r3, r2
 8004726:	3302      	adds	r3, #2
 8004728:	4a0c      	ldr	r2, [pc, #48]	; (800475c <LCD9488_GUI_Draw_Char+0x33c>)
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e009      	b.n	8004742 <LCD9488_GUI_Draw_Char+0x322>
    }
    else
    {
    	char_x = char_x + LCD9488_CurrentFont_PixHoriz;
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <LCD9488_GUI_Draw_Char+0x330>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <LCD9488_GUI_Draw_Char+0x33c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4413      	add	r3, r2
 800473a:	4a08      	ldr	r2, [pc, #32]	; (800475c <LCD9488_GUI_Draw_Char+0x33c>)
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e000      	b.n	8004742 <LCD9488_GUI_Draw_Char+0x322>
    	return;  																		// работаем только с символами, которые есть в шрифте
 8004740:	bf00      	nop
    }
}
 8004742:	3724      	adds	r7, #36	; 0x24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd90      	pop	{r4, r7, pc}
 8004748:	40020800 	.word	0x40020800
 800474c:	20003bf4 	.word	0x20003bf4
 8004750:	20003a19 	.word	0x20003a19
 8004754:	20003a18 	.word	0x20003a18
 8004758:	20003fec 	.word	0x20003fec
 800475c:	20003a14 	.word	0x20003a14

08004760 <LCD9488_GUI_Draw_StringColor>:
        p++;
    }
}
//=======================================================================================
void LCD9488_GUI_Draw_StringColor(uint16_t x, uint16_t y, char* str, unsigned char* font, uint16_t fontcolor, uint16_t bgcolor, ADrawType Overlying)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60ba      	str	r2, [r7, #8]
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	4603      	mov	r3, r0
 800476c:	81fb      	strh	r3, [r7, #14]
 800476e:	460b      	mov	r3, r1
 8004770:	81bb      	strh	r3, [r7, #12]
	uint16_t x0 = x;
 8004772:	89fb      	ldrh	r3, [r7, #14]
 8004774:	82fb      	strh	r3, [r7, #22]

  	LCD9488_GUI_SetFont(font, fontcolor, bgcolor);
 8004776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004778:	8c3b      	ldrh	r3, [r7, #32]
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fdf1 	bl	8004364 <LCD9488_GUI_SetFont>
  	LCD9488_GUI_GotoXY(x, y);
 8004782:	89ba      	ldrh	r2, [r7, #12]
 8004784:	89fb      	ldrh	r3, [r7, #14]
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fe31 	bl	80043f0 <LCD9488_GUI_GotoXY>
    while(*str != 0)
 800478e:	e030      	b.n	80047f2 <LCD9488_GUI_Draw_StringColor+0x92>
    {
		if( x > (LCD9488_DEV.Width - LCD9488_CurrentFont_PixHoriz/2) || y > (LCD9488_DEV.Height - LCD9488_CurrentFont_PixVert) )
 8004790:	89fa      	ldrh	r2, [r7, #14]
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <LCD9488_GUI_Draw_StringColor+0xa4>)
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <LCD9488_GUI_Draw_StringColor+0xa8>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	1acb      	subs	r3, r1, r3
 80047a2:	429a      	cmp	r2, r3
 80047a4:	dc2a      	bgt.n	80047fc <LCD9488_GUI_Draw_StringColor+0x9c>
 80047a6:	89ba      	ldrh	r2, [r7, #12]
 80047a8:	4b16      	ldr	r3, [pc, #88]	; (8004804 <LCD9488_GUI_Draw_StringColor+0xa4>)
 80047aa:	885b      	ldrh	r3, [r3, #2]
 80047ac:	4619      	mov	r1, r3
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <LCD9488_GUI_Draw_StringColor+0xac>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	1acb      	subs	r3, r1, r3
 80047b4:	429a      	cmp	r2, r3
 80047b6:	dc21      	bgt.n	80047fc <LCD9488_GUI_Draw_StringColor+0x9c>
			return;

		if(*str == 0x0D)															// конец строки, перевод на новую строку
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b0d      	cmp	r3, #13
 80047be:	d10b      	bne.n	80047d8 <LCD9488_GUI_Draw_StringColor+0x78>
        {
            y = y + LCD9488_CurrentFont_PixVert;
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <LCD9488_GUI_Draw_StringColor+0xac>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	89bb      	ldrh	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	81bb      	strh	r3, [r7, #12]
			x = x0;
 80047cc:	8afb      	ldrh	r3, [r7, #22]
 80047ce:	81fb      	strh	r3, [r7, #14]
            str++;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	e009      	b.n	80047ec <LCD9488_GUI_Draw_StringColor+0x8c>
        }
        else
		{
        	LCD9488_GUI_Draw_Char(LCD9488_Point_Color,LCD9488_Back_Color,*str, Overlying);
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <LCD9488_GUI_Draw_StringColor+0xb0>)
 80047da:	8818      	ldrh	r0, [r3, #0]
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <LCD9488_GUI_Draw_StringColor+0xb4>)
 80047de:	8819      	ldrh	r1, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047e8:	f7ff fe1a 	bl	8004420 <LCD9488_GUI_Draw_Char>
		}
		str++;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3301      	adds	r3, #1
 80047f0:	60bb      	str	r3, [r7, #8]
    while(*str != 0)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ca      	bne.n	8004790 <LCD9488_GUI_Draw_StringColor+0x30>
 80047fa:	e000      	b.n	80047fe <LCD9488_GUI_Draw_StringColor+0x9e>
			return;
 80047fc:	bf00      	nop
    }
}
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20003fec 	.word	0x20003fec
 8004808:	20003a19 	.word	0x20003a19
 800480c:	20003a18 	.word	0x20003a18
 8004810:	20000330 	.word	0x20000330
 8004814:	20000004 	.word	0x20000004

08004818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004818:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800481a:	e003      	b.n	8004824 <LoopCopyDataInit>

0800481c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800481e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004820:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004822:	3104      	adds	r1, #4

08004824 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004824:	480a      	ldr	r0, [pc, #40]	; (8004850 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004828:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800482a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800482c:	d3f6      	bcc.n	800481c <CopyDataInit>
  ldr r2, =_sbss
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004830:	e002      	b.n	8004838 <LoopFillZerobss>

08004832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004832:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004834:	f842 3b04 	str.w	r3, [r2], #4

08004838 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004838:	4b08      	ldr	r3, [pc, #32]	; (800485c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800483a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800483c:	d3f9      	bcc.n	8004832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800483e:	f7ff f9d1 	bl	8003be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004842:	f00d fcaf 	bl	80121a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004846:	f7fe fe27 	bl	8003498 <main>
  bx lr
 800484a:	4770      	bx	lr
  ldr r3, =_sidata
 800484c:	0801a7f8 	.word	0x0801a7f8
  ldr r0, =_sdata
 8004850:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004854:	20000310 	.word	0x20000310
  ldr r2, =_sbss
 8004858:	20000310 	.word	0x20000310
  ldr r3, = _ebss
 800485c:	20004c38 	.word	0x20004c38

08004860 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004860:	e7fe      	b.n	8004860 <COMP_ACQ_IRQHandler>

08004862 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800486c:	2003      	movs	r0, #3
 800486e:	f000 fe81 	bl	8005574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004872:	2000      	movs	r0, #0
 8004874:	f7ff f866 	bl	8003944 <HAL_InitTick>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	71fb      	strb	r3, [r7, #7]
 8004882:	e001      	b.n	8004888 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004884:	f7ff f830 	bl	80038e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004888:	79fb      	ldrb	r3, [r7, #7]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_IncTick+0x1c>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <HAL_IncTick+0x20>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4413      	add	r3, r2
 80048a2:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_IncTick+0x1c>)
 80048a4:	6013      	str	r3, [r2, #0]
}
 80048a6:	bf00      	nop
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20003ffc 	.word	0x20003ffc
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return uwTick;
 80048bc:	4b02      	ldr	r3, [pc, #8]	; (80048c8 <HAL_GetTick+0x10>)
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	20003ffc 	.word	0x20003ffc

080048cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048d4:	f7ff fff0 	bl	80048b8 <HAL_GetTick>
 80048d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d004      	beq.n	80048f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_Delay+0x40>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048f0:	bf00      	nop
 80048f2:	f7ff ffe1 	bl	80048b8 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d8f7      	bhi.n	80048f2 <HAL_Delay+0x26>
  {
  }
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	2000000c 	.word	0x2000000c

08004910 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08e      	sub	sp, #56	; 0x38
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e127      	b.n	8004b80 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d115      	bne.n	800496a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494c:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <HAL_ADC_Init+0x278>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4a8d      	ldr	r2, [pc, #564]	; (8004b88 <HAL_ADC_Init+0x278>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6213      	str	r3, [r2, #32]
 8004958:	4b8b      	ldr	r3, [pc, #556]	; (8004b88 <HAL_ADC_Init+0x278>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc faf3 	bl	8000f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	f040 80ff 	bne.w	8004b76 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004980:	f023 0302 	bic.w	r3, r3, #2
 8004984:	f043 0202 	orr.w	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800498c:	4b7f      	ldr	r3, [pc, #508]	; (8004b8c <HAL_ADC_Init+0x27c>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	497c      	ldr	r1, [pc, #496]	; (8004b8c <HAL_ADC_Init+0x27c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80049a6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ae:	4619      	mov	r1, r3
 80049b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049b4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80049ca:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80049d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049d8:	4619      	mov	r1, r3
 80049da:	2302      	movs	r3, #2
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80049f2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80049f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f6:	4313      	orrs	r3, r2
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d007      	beq.n	8004a12 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d04f      	beq.n	8004ac0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a26:	4313      	orrs	r3, r2
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004a32:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6912      	ldr	r2, [r2, #16]
 8004a38:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004a3c:	d003      	beq.n	8004a46 <HAL_ADC_Init+0x136>
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6912      	ldr	r2, [r2, #16]
 8004a42:	2a01      	cmp	r2, #1
 8004a44:	d102      	bne.n	8004a4c <HAL_ADC_Init+0x13c>
 8004a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a4a:	e000      	b.n	8004a4e <HAL_ADC_Init+0x13e>
 8004a4c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8004a4e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a52:	4313      	orrs	r3, r2
 8004a54:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d125      	bne.n	8004aac <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d114      	bne.n	8004a94 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004a74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	fa92 f2a2 	rbit	r2, r2
 8004a7c:	617a      	str	r2, [r7, #20]
  return result;
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	fab2 f282 	clz	r2, r2
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	4093      	lsls	r3, r2
 8004a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
 8004a92:	e00b      	b.n	8004aac <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	f043 0201 	orr.w	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <HAL_ADC_Init+0x280>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <HAL_ADC_Init+0x284>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004adc:	d003      	beq.n	8004ae6 <HAL_ADC_Init+0x1d6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d119      	bne.n	8004b1a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8004afa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	fa92 f2a2 	rbit	r2, r2
 8004b02:	60fa      	str	r2, [r7, #12]
  return result;
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	fab2 f282 	clz	r2, r2
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	fa03 f202 	lsl.w	r2, r3, r2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
 8004b18:	e007      	b.n	8004b2a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_ADC_Init+0x288>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d10b      	bne.n	8004b52 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b44:	f023 0303 	bic.w	r3, r3, #3
 8004b48:	f043 0201 	orr.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b50:	e014      	b.n	8004b7c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	f023 0312 	bic.w	r3, r3, #18
 8004b5a:	f043 0210 	orr.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004b74:	e002      	b.n	8004b7c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3738      	adds	r7, #56	; 0x38
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40012700 	.word	0x40012700
 8004b90:	fcfc16ff 	.word	0xfcfc16ff
 8004b94:	c0fff189 	.word	0xc0fff189
 8004b98:	bf80fffe 	.word	0xbf80fffe

08004b9c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_Start+0x1a>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e04e      	b.n	8004c54 <HAL_ADC_Start+0xb8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fb94 	bl	80052ec <ADC_Enable>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d141      	bne.n	8004c52 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bf8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0c:	d106      	bne.n	8004c1c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f023 0206 	bic.w	r2, r3, #6
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	651a      	str	r2, [r3, #80]	; 0x50
 8004c1a:	e002      	b.n	8004c22 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c32:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c50:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_ADC_Stop+0x1a>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e01a      	b.n	8004cac <HAL_ADC_Stop+0x50>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fb8a 	bl	8005398 <ADC_ConversionStop_Disable>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	f043 0201 	orr.w	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d113      	bne.n	8004cfa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce0:	d10b      	bne.n	8004cfa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e061      	b.n	8004dbe <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004cfa:	f7ff fddd 	bl	80048b8 <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004d00:	e01a      	b.n	8004d38 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d016      	beq.n	8004d38 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_ADC_PollForConversion+0x6c>
 8004d10:	f7ff fdd2 	bl	80048b8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d20b      	bcs.n	8004d38 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e042      	b.n	8004dbe <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0dd      	beq.n	8004d02 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f06f 0212 	mvn.w	r2, #18
 8004d56:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d124      	bne.n	8004dbc <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d11f      	bne.n	8004dbc <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d111      	bne.n	8004dbc <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db4:	f043 0201 	orr.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d14e      	bne.n	8004e92 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d147      	bne.n	8004e92 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d12c      	bne.n	8004e82 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d127      	bne.n	8004e82 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d006      	beq.n	8004e4e <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d119      	bne.n	8004e82 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0220 	bic.w	r2, r2, #32
 8004e5c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8ab 	bl	8004fde <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0212 	mvn.w	r2, #18
 8004e90:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d15c      	bne.n	8004f5a <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d155      	bne.n	8004f5a <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d13a      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d12c      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d125      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11e      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d119      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f24:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa5e 	bl	800540c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 020c 	mvn.w	r2, #12
 8004f58:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	d114      	bne.n	8004f92 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d10d      	bne.n	8004f92 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f834 	bl	8004ff0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0201 	mvn.w	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa0:	d119      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d112      	bne.n	8004fd6 <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	f043 0202 	orr.w	r2, r3, #2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0220 	mvn.w	r2, #32
 8004fc4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f81b 	bl	8005002 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0220 	mvn.w	r2, #32
 8004fd4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x20>
 8005030:	2302      	movs	r3, #2
 8005032:	e14f      	b.n	80052d4 <HAL_ADC_ConfigChannel+0x2c0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b06      	cmp	r3, #6
 8005042:	d81c      	bhi.n	800507e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	3b05      	subs	r3, #5
 8005056:	221f      	movs	r2, #31
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	4019      	ands	r1, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	3b05      	subs	r3, #5
 8005070:	fa00 f203 	lsl.w	r2, r0, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
 800507c:	e07e      	b.n	800517c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d81c      	bhi.n	80050c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	3b23      	subs	r3, #35	; 0x23
 8005098:	221f      	movs	r2, #31
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	4019      	ands	r1, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	3b23      	subs	r3, #35	; 0x23
 80050b2:	fa00 f203 	lsl.w	r2, r0, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80050be:	e05d      	b.n	800517c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b12      	cmp	r3, #18
 80050c6:	d81c      	bhi.n	8005102 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	3b41      	subs	r3, #65	; 0x41
 80050da:	221f      	movs	r2, #31
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	4019      	ands	r1, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	3b41      	subs	r3, #65	; 0x41
 80050f4:	fa00 f203 	lsl.w	r2, r0, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005100:	e03c      	b.n	800517c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b18      	cmp	r3, #24
 8005108:	d81c      	bhi.n	8005144 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	3b5f      	subs	r3, #95	; 0x5f
 800511c:	221f      	movs	r2, #31
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	4019      	ands	r1, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	3b5f      	subs	r3, #95	; 0x5f
 8005136:	fa00 f203 	lsl.w	r2, r0, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	635a      	str	r2, [r3, #52]	; 0x34
 8005142:	e01b      	b.n	800517c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	3b7d      	subs	r3, #125	; 0x7d
 8005156:	221f      	movs	r2, #31
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	4019      	ands	r1, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	3b7d      	subs	r3, #125	; 0x7d
 8005170:	fa00 f203 	lsl.w	r2, r0, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b09      	cmp	r3, #9
 8005182:	d81a      	bhi.n	80051ba <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6959      	ldr	r1, [r3, #20]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	2207      	movs	r2, #7
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	4019      	ands	r1, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6898      	ldr	r0, [r3, #8]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	fa00 f203 	lsl.w	r2, r0, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	615a      	str	r2, [r3, #20]
 80051b8:	e05d      	b.n	8005276 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b13      	cmp	r3, #19
 80051c0:	d81c      	bhi.n	80051fc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6919      	ldr	r1, [r3, #16]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	3b1e      	subs	r3, #30
 80051d4:	2207      	movs	r2, #7
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	4019      	ands	r1, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6898      	ldr	r0, [r3, #8]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	3b1e      	subs	r3, #30
 80051ee:	fa00 f203 	lsl.w	r2, r0, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	611a      	str	r2, [r3, #16]
 80051fa:	e03c      	b.n	8005276 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b1d      	cmp	r3, #29
 8005202:	d81c      	bhi.n	800523e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68d9      	ldr	r1, [r3, #12]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	3b3c      	subs	r3, #60	; 0x3c
 8005216:	2207      	movs	r2, #7
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	4019      	ands	r1, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6898      	ldr	r0, [r3, #8]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	3b3c      	subs	r3, #60	; 0x3c
 8005230:	fa00 f203 	lsl.w	r2, r0, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	e01b      	b.n	8005276 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	3b5a      	subs	r3, #90	; 0x5a
 8005250:	2207      	movs	r2, #7
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43db      	mvns	r3, r3
 8005258:	4019      	ands	r1, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6898      	ldr	r0, [r3, #8]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4413      	add	r3, r2
 8005268:	3b5a      	subs	r3, #90	; 0x5a
 800526a:	fa00 f203 	lsl.w	r2, r0, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b10      	cmp	r3, #16
 800527c:	d003      	beq.n	8005286 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005282:	2b11      	cmp	r3, #17
 8005284:	d121      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005286:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11b      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005298:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800529c:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d111      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <HAL_ADC_ConfigChannel+0x2d0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <HAL_ADC_ConfigChannel+0x2d4>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	0c9a      	lsrs	r2, r3, #18
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80052bc:	e002      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f9      	bne.n	80052be <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40012700 	.word	0x40012700
 80052e4:	20000000 	.word	0x20000000
 80052e8:	431bde83 	.word	0x431bde83

080052ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d03c      	beq.n	8005384 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800531a:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <ADC_Enable+0xa4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <ADC_Enable+0xa8>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	0c9a      	lsrs	r2, r3, #18
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800532e:	e002      	b.n	8005336 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	3b01      	subs	r3, #1
 8005334:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f9      	bne.n	8005330 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800533c:	f7ff fabc 	bl	80048b8 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005342:	e018      	b.n	8005376 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005344:	f7ff fab8 	bl	80048b8 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d911      	bls.n	8005376 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005356:	f043 0210 	orr.w	r2, r3, #16
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e007      	b.n	8005386 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d1df      	bne.n	8005344 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000000 	.word	0x20000000
 8005394:	431bde83 	.word	0x431bde83

08005398 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d127      	bne.n	8005402 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053c2:	f7ff fa79 	bl	80048b8 <HAL_GetTick>
 80053c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053c8:	e014      	b.n	80053f4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80053ca:	f7ff fa75 	bl	80048b8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d90d      	bls.n	80053f4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053dc:	f043 0210 	orr.w	r2, r3, #16
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e007      	b.n	8005404 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d0e3      	beq.n	80053ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr
	...

08005420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <__NVIC_SetPriorityGrouping+0x44>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800543c:	4013      	ands	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800544c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005452:	4a04      	ldr	r2, [pc, #16]	; (8005464 <__NVIC_SetPriorityGrouping+0x44>)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	60d3      	str	r3, [r2, #12]
}
 8005458:	bf00      	nop
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <__NVIC_GetPriorityGrouping+0x18>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 0307 	and.w	r3, r3, #7
}
 8005476:	4618      	mov	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000ed00 	.word	0xe000ed00

08005484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800548e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005492:	2b00      	cmp	r3, #0
 8005494:	db0b      	blt.n	80054ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	f003 021f 	and.w	r2, r3, #31
 800549c:	4906      	ldr	r1, [pc, #24]	; (80054b8 <__NVIC_EnableIRQ+0x34>)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2001      	movs	r0, #1
 80054a6:	fa00 f202 	lsl.w	r2, r0, r2
 80054aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	e000e100 	.word	0xe000e100

080054bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	6039      	str	r1, [r7, #0]
 80054c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	db0a      	blt.n	80054e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	490c      	ldr	r1, [pc, #48]	; (8005508 <__NVIC_SetPriority+0x4c>)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	0112      	lsls	r2, r2, #4
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	440b      	add	r3, r1
 80054e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054e4:	e00a      	b.n	80054fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	4908      	ldr	r1, [pc, #32]	; (800550c <__NVIC_SetPriority+0x50>)
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	3b04      	subs	r3, #4
 80054f4:	0112      	lsls	r2, r2, #4
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	440b      	add	r3, r1
 80054fa:	761a      	strb	r2, [r3, #24]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	e000e100 	.word	0xe000e100
 800550c:	e000ed00 	.word	0xe000ed00

08005510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f1c3 0307 	rsb	r3, r3, #7
 800552a:	2b04      	cmp	r3, #4
 800552c:	bf28      	it	cs
 800552e:	2304      	movcs	r3, #4
 8005530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3304      	adds	r3, #4
 8005536:	2b06      	cmp	r3, #6
 8005538:	d902      	bls.n	8005540 <NVIC_EncodePriority+0x30>
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3b03      	subs	r3, #3
 800553e:	e000      	b.n	8005542 <NVIC_EncodePriority+0x32>
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43da      	mvns	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	401a      	ands	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005558:	f04f 31ff 	mov.w	r1, #4294967295
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	43d9      	mvns	r1, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005568:	4313      	orrs	r3, r2
         );
}
 800556a:	4618      	mov	r0, r3
 800556c:	3724      	adds	r7, #36	; 0x24
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ff4f 	bl	8005420 <__NVIC_SetPriorityGrouping>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	4603      	mov	r3, r0
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800559c:	f7ff ff64 	bl	8005468 <__NVIC_GetPriorityGrouping>
 80055a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f7ff ffb2 	bl	8005510 <NVIC_EncodePriority>
 80055ac:	4602      	mov	r2, r0
 80055ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff ff81 	bl	80054bc <__NVIC_SetPriority>
}
 80055ba:	bf00      	nop
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	4603      	mov	r3, r0
 80055ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff57 	bl	8005484 <__NVIC_EnableIRQ>
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e014      	b.n	800561a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	791b      	ldrb	r3, [r3, #4]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fb ffd7 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	795b      	ldrb	r3, [r3, #5]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_DAC_Start+0x16>
 8005634:	2302      	movs	r3, #2
 8005636:	e03e      	b.n	80056b6 <HAL_DAC_Start+0x94>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10f      	bne.n	8005682 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800566c:	2b3c      	cmp	r3, #60	; 0x3c
 800566e:	d11b      	bne.n	80056a8 <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	605a      	str	r2, [r3, #4]
 8005680:	e012      	b.n	80056a8 <HAL_DAC_Start+0x86>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800568c:	213c      	movs	r1, #60	; 0x3c
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	429a      	cmp	r2, r3
 8005696:	d107      	bne.n	80056a8 <HAL_DAC_Start+0x86>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0202 	orr.w	r2, r2, #2
 80056a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d105      	bne.n	80056ea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	3308      	adds	r3, #8
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e004      	b.n	80056f4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	3314      	adds	r3, #20
 80056f2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	461a      	mov	r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	795b      	ldrb	r3, [r3, #5]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_DAC_ConfigChannel+0x18>
 800571c:	2302      	movs	r3, #2
 800571e:	e044      	b.n	80057aa <HAL_DAC_ConfigChannel+0xa2>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2202      	movs	r2, #2
 800572a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005734:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4013      	ands	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6819      	ldr	r1, [r3, #0]
 800576e:	22c0      	movs	r2, #192	; 0xc0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43da      	mvns	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	400a      	ands	r2, r1
 800577e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6819      	ldr	r1, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	22c0      	movs	r2, #192	; 0xc0
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	400a      	ands	r2, r1
 800579a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e059      	b.n	800587a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	4b2d      	ldr	r3, [pc, #180]	; (8005884 <HAL_DMA_Init+0xd0>)
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d80f      	bhi.n	80057f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_DMA_Init+0xd4>)
 80057da:	4413      	add	r3, r2
 80057dc:	4a2b      	ldr	r2, [pc, #172]	; (800588c <HAL_DMA_Init+0xd8>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	009a      	lsls	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a28      	ldr	r2, [pc, #160]	; (8005890 <HAL_DMA_Init+0xdc>)
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80057f0:	e00e      	b.n	8005810 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	4b26      	ldr	r3, [pc, #152]	; (8005894 <HAL_DMA_Init+0xe0>)
 80057fa:	4413      	add	r3, r2
 80057fc:	4a23      	ldr	r2, [pc, #140]	; (800588c <HAL_DMA_Init+0xd8>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	009a      	lsls	r2, r3, #2
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <HAL_DMA_Init+0xe4>)
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800584c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr
 8005884:	40026407 	.word	0x40026407
 8005888:	bffd9ff8 	.word	0xbffd9ff8
 800588c:	cccccccd 	.word	0xcccccccd
 8005890:	40026000 	.word	0x40026000
 8005894:	bffd9bf8 	.word	0xbffd9bf8
 8005898:	40026400 	.word	0x40026400

0800589c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d005      	beq.n	80058c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2204      	movs	r2, #4
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
 80058be:	e029      	b.n	8005914 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 020e 	bic.w	r2, r2, #14
 80058ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	f003 021c 	and.w	r2, r3, #28
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f202 	lsl.w	r2, r1, r2
 80058f2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
    }
  }
  return status;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 031c 	and.w	r3, r3, #28
 800593e:	2204      	movs	r2, #4
 8005940:	409a      	lsls	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d026      	beq.n	8005998 <HAL_DMA_IRQHandler+0x7a>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d021      	beq.n	8005998 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0204 	bic.w	r2, r2, #4
 8005970:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f003 021c 	and.w	r2, r3, #28
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	2104      	movs	r1, #4
 8005980:	fa01 f202 	lsl.w	r2, r1, r2
 8005984:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d071      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005996:	e06c      	b.n	8005a72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	f003 031c 	and.w	r3, r3, #28
 80059a0:	2202      	movs	r2, #2
 80059a2:	409a      	lsls	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02e      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xec>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d029      	beq.n	8005a0a <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 020a 	bic.w	r2, r2, #10
 80059d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f003 021c 	and.w	r2, r3, #28
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e8:	2102      	movs	r1, #2
 80059ea:	fa01 f202 	lsl.w	r2, r1, r2
 80059ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d038      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a08:	e033      	b.n	8005a72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 031c 	and.w	r3, r3, #28
 8005a12:	2208      	movs	r2, #8
 8005a14:	409a      	lsls	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d02a      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x156>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d025      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 020e 	bic.w	r2, r2, #14
 8005a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	f003 021c 	and.w	r2, r3, #28
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
}
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005a92:	e160      	b.n	8005d56 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	2101      	movs	r1, #1
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8152 	beq.w	8005d50 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d00b      	beq.n	8005acc <HAL_GPIO_Init+0x50>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d007      	beq.n	8005acc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ac0:	2b11      	cmp	r3, #17
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b12      	cmp	r3, #18
 8005aca:	d130      	bne.n	8005b2e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	43db      	mvns	r3, r3
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8005b02:	2201      	movs	r2, #1
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	f003 0201 	and.w	r2, r3, #1
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	2203      	movs	r2, #3
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4013      	ands	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_Init+0xf2>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b12      	cmp	r3, #18
 8005b6c:	d123      	bne.n	8005bb6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	08da      	lsrs	r2, r3, #3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3208      	adds	r2, #8
 8005b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	220f      	movs	r2, #15
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	08da      	lsrs	r2, r3, #3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3208      	adds	r2, #8
 8005bb0:	6939      	ldr	r1, [r7, #16]
 8005bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f003 0203 	and.w	r2, r3, #3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80ac 	beq.w	8005d50 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf8:	4b5d      	ldr	r3, [pc, #372]	; (8005d70 <HAL_GPIO_Init+0x2f4>)
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	4a5c      	ldr	r2, [pc, #368]	; (8005d70 <HAL_GPIO_Init+0x2f4>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6213      	str	r3, [r2, #32]
 8005c04:	4b5a      	ldr	r3, [pc, #360]	; (8005d70 <HAL_GPIO_Init+0x2f4>)
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c10:	4a58      	ldr	r2, [pc, #352]	; (8005d74 <HAL_GPIO_Init+0x2f8>)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	3302      	adds	r3, #2
 8005c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	220f      	movs	r2, #15
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4013      	ands	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a50      	ldr	r2, [pc, #320]	; (8005d78 <HAL_GPIO_Init+0x2fc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d025      	beq.n	8005c88 <HAL_GPIO_Init+0x20c>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a4f      	ldr	r2, [pc, #316]	; (8005d7c <HAL_GPIO_Init+0x300>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d01f      	beq.n	8005c84 <HAL_GPIO_Init+0x208>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a4e      	ldr	r2, [pc, #312]	; (8005d80 <HAL_GPIO_Init+0x304>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d019      	beq.n	8005c80 <HAL_GPIO_Init+0x204>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a4d      	ldr	r2, [pc, #308]	; (8005d84 <HAL_GPIO_Init+0x308>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_GPIO_Init+0x200>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a4c      	ldr	r2, [pc, #304]	; (8005d88 <HAL_GPIO_Init+0x30c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00d      	beq.n	8005c78 <HAL_GPIO_Init+0x1fc>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a4b      	ldr	r2, [pc, #300]	; (8005d8c <HAL_GPIO_Init+0x310>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <HAL_GPIO_Init+0x1f8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a4a      	ldr	r2, [pc, #296]	; (8005d90 <HAL_GPIO_Init+0x314>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d101      	bne.n	8005c70 <HAL_GPIO_Init+0x1f4>
 8005c6c:	2306      	movs	r3, #6
 8005c6e:	e00c      	b.n	8005c8a <HAL_GPIO_Init+0x20e>
 8005c70:	2307      	movs	r3, #7
 8005c72:	e00a      	b.n	8005c8a <HAL_GPIO_Init+0x20e>
 8005c74:	2305      	movs	r3, #5
 8005c76:	e008      	b.n	8005c8a <HAL_GPIO_Init+0x20e>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	e006      	b.n	8005c8a <HAL_GPIO_Init+0x20e>
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e004      	b.n	8005c8a <HAL_GPIO_Init+0x20e>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e002      	b.n	8005c8a <HAL_GPIO_Init+0x20e>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <HAL_GPIO_Init+0x20e>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	f002 0203 	and.w	r2, r2, #3
 8005c90:	0092      	lsls	r2, r2, #2
 8005c92:	4093      	lsls	r3, r2
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c9a:	4936      	ldr	r1, [pc, #216]	; (8005d74 <HAL_GPIO_Init+0x2f8>)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	089b      	lsrs	r3, r3, #2
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ca8:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005ccc:	4a31      	ldr	r2, [pc, #196]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cd2:	4b30      	ldr	r3, [pc, #192]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005cf6:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4013      	ands	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d4a:	4a12      	ldr	r2, [pc, #72]	; (8005d94 <HAL_GPIO_Init+0x318>)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3301      	adds	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f ae97 	bne.w	8005a94 <HAL_GPIO_Init+0x18>
  }
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40020000 	.word	0x40020000
 8005d7c:	40020400 	.word	0x40020400
 8005d80:	40020800 	.word	0x40020800
 8005d84:	40020c00 	.word	0x40020c00
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40021400 	.word	0x40021400
 8005d90:	40021800 	.word	0x40021800
 8005d94:	40010400 	.word	0x40010400

08005d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	887b      	ldrh	r3, [r7, #2]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e001      	b.n	8005dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	807b      	strh	r3, [r7, #2]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dd6:	787b      	ldrb	r3, [r7, #1]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ddc:	887a      	ldrh	r2, [r7, #2]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8005de2:	e003      	b.n	8005dec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005de4:	887b      	ldrh	r3, [r7, #2]
 8005de6:	041a      	lsls	r2, r3, #16
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	619a      	str	r2, [r3, #24]
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e08:	887a      	ldrh	r2, [r7, #2]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	041a      	lsls	r2, r3, #16
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	43d9      	mvns	r1, r3
 8005e14:	887b      	ldrh	r3, [r7, #2]
 8005e16:	400b      	ands	r3, r1
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	619a      	str	r2, [r3, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e11f      	b.n	800607a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fc fbdc 	bl	800260c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2224      	movs	r2, #36	; 0x24
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e8c:	f002 f982 	bl	8008194 <HAL_RCC_GetPCLK1Freq>
 8005e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4a7b      	ldr	r2, [pc, #492]	; (8006084 <HAL_I2C_Init+0x25c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d807      	bhi.n	8005eac <HAL_I2C_Init+0x84>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a7a      	ldr	r2, [pc, #488]	; (8006088 <HAL_I2C_Init+0x260>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	bf94      	ite	ls
 8005ea4:	2301      	movls	r3, #1
 8005ea6:	2300      	movhi	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e006      	b.n	8005eba <HAL_I2C_Init+0x92>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4a77      	ldr	r2, [pc, #476]	; (800608c <HAL_I2C_Init+0x264>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	bf94      	ite	ls
 8005eb4:	2301      	movls	r3, #1
 8005eb6:	2300      	movhi	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e0db      	b.n	800607a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a72      	ldr	r2, [pc, #456]	; (8006090 <HAL_I2C_Init+0x268>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0c9b      	lsrs	r3, r3, #18
 8005ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4a64      	ldr	r2, [pc, #400]	; (8006084 <HAL_I2C_Init+0x25c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d802      	bhi.n	8005efc <HAL_I2C_Init+0xd4>
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	e009      	b.n	8005f10 <HAL_I2C_Init+0xe8>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	4a63      	ldr	r2, [pc, #396]	; (8006094 <HAL_I2C_Init+0x26c>)
 8005f08:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0c:	099b      	lsrs	r3, r3, #6
 8005f0e:	3301      	adds	r3, #1
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	4956      	ldr	r1, [pc, #344]	; (8006084 <HAL_I2C_Init+0x25c>)
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	d80d      	bhi.n	8005f4c <HAL_I2C_Init+0x124>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	1e59      	subs	r1, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	bf38      	it	cc
 8005f48:	2304      	movcc	r3, #4
 8005f4a:	e04f      	b.n	8005fec <HAL_I2C_Init+0x1c4>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d111      	bne.n	8005f78 <HAL_I2C_Init+0x150>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1e58      	subs	r0, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	440b      	add	r3, r1
 8005f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f66:	3301      	adds	r3, #1
 8005f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	e012      	b.n	8005f9e <HAL_I2C_Init+0x176>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1e58      	subs	r0, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	0099      	lsls	r1, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_I2C_Init+0x17e>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e022      	b.n	8005fec <HAL_I2C_Init+0x1c4>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10e      	bne.n	8005fcc <HAL_I2C_Init+0x1a4>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1e58      	subs	r0, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	440b      	add	r3, r1
 8005fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fca:	e00f      	b.n	8005fec <HAL_I2C_Init+0x1c4>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1e58      	subs	r0, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	0099      	lsls	r1, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	6809      	ldr	r1, [r1, #0]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800601a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6911      	ldr	r1, [r2, #16]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68d2      	ldr	r2, [r2, #12]
 8006026:	4311      	orrs	r1, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	430b      	orrs	r3, r1
 800602e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	000186a0 	.word	0x000186a0
 8006088:	001e847f 	.word	0x001e847f
 800608c:	003d08ff 	.word	0x003d08ff
 8006090:	431bde83 	.word	0x431bde83
 8006094:	10624dd3 	.word	0x10624dd3

08006098 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	b08b      	sub	sp, #44	; 0x2c
 800609c:	af06      	add	r7, sp, #24
 800609e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e0d0      	b.n	800624c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f00b fdba 	bl	8011c38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2203      	movs	r2, #3
 80060c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f004 fa4b 	bl	800a56c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]
 80060da:	e04c      	b.n	8006176 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	440b      	add	r3, r1
 80060ec:	3301      	adds	r3, #1
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	440b      	add	r3, r1
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006106:	7bfa      	ldrb	r2, [r7, #15]
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	b298      	uxth	r0, r3
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	3336      	adds	r3, #54	; 0x36
 800611a:	4602      	mov	r2, r0
 800611c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	440b      	add	r3, r1
 800612e:	3303      	adds	r3, #3
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	440b      	add	r3, r1
 8006142:	3338      	adds	r3, #56	; 0x38
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006148:	7bfa      	ldrb	r2, [r7, #15]
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	440b      	add	r3, r1
 8006156:	333c      	adds	r3, #60	; 0x3c
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800615c:	7bfa      	ldrb	r2, [r7, #15]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	440b      	add	r3, r1
 800616a:	3340      	adds	r3, #64	; 0x40
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	3301      	adds	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
 8006176:	7bfa      	ldrb	r2, [r7, #15]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d3ad      	bcc.n	80060dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	e044      	b.n	8006210 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006186:	7bfa      	ldrb	r2, [r7, #15]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	440b      	add	r3, r1
 8006194:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800619c:	7bfa      	ldrb	r2, [r7, #15]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	440b      	add	r3, r1
 80061aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061b2:	7bfa      	ldrb	r2, [r7, #15]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	440b      	add	r3, r1
 80061c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061c8:	7bfa      	ldrb	r2, [r7, #15]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	440b      	add	r3, r1
 80061d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	440b      	add	r3, r1
 80061ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061f4:	7bfa      	ldrb	r2, [r7, #15]
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	3301      	adds	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d3b5      	bcc.n	8006186 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	687e      	ldr	r6, [r7, #4]
 8006222:	466d      	mov	r5, sp
 8006224:	f106 0410 	add.w	r4, r6, #16
 8006228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800622a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	1d33      	adds	r3, r6, #4
 8006232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006234:	6838      	ldr	r0, [r7, #0]
 8006236:	f004 f9b3 	bl	800a5a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006254 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_PCD_Start+0x16>
 8006266:	2302      	movs	r3, #2
 8006268:	e016      	b.n	8006298 <HAL_PCD_Start+0x44>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f004 f962 	bl	800a540 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800627c:	2101      	movs	r1, #1
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fa0e 	bl	80076a0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f006 f93e 	bl	800c50a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f006 f936 	bl	800c51e <USB_ReadInterrupts>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d102      	bne.n	80062c4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fb0f 	bl	80068e2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f006 f928 	bl	800c51e <USB_ReadInterrupts>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d8:	d112      	bne.n	8006300 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ec:	b292      	uxth	r2, r2
 80062ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f00b fd1b 	bl	8011d2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80062f8:	2100      	movs	r1, #0
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8c7 	bl	800648e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f006 f90a 	bl	800c51e <USB_ReadInterrupts>
 800630a:	4603      	mov	r3, r0
 800630c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006314:	d10b      	bne.n	800632e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006328:	b292      	uxth	r2, r2
 800632a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f006 f8f3 	bl	800c51e <USB_ReadInterrupts>
 8006338:	4603      	mov	r3, r0
 800633a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	d10b      	bne.n	800635c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006356:	b292      	uxth	r2, r2
 8006358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f006 f8dc 	bl	800c51e <USB_ReadInterrupts>
 8006366:	4603      	mov	r3, r0
 8006368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d126      	bne.n	80063c0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0204 	bic.w	r2, r2, #4
 8006384:	b292      	uxth	r2, r2
 8006386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0208 	bic.w	r2, r2, #8
 800639c:	b292      	uxth	r2, r2
 800639e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f00b fcfc 	bl	8011da0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063ba:	b292      	uxth	r2, r2
 80063bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f006 f8aa 	bl	800c51e <USB_ReadInterrupts>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d4:	d126      	bne.n	8006424 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0208 	orr.w	r2, r2, #8
 80063e8:	b292      	uxth	r2, r2
 80063ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006400:	b292      	uxth	r2, r2
 8006402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0204 	orr.w	r2, r2, #4
 8006418:	b292      	uxth	r2, r2
 800641a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f00b fca4 	bl	8011d6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f006 f878 	bl	800c51e <USB_ReadInterrupts>
 800642e:	4603      	mov	r3, r0
 8006430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006438:	d10e      	bne.n	8006458 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800644c:	b292      	uxth	r2, r2
 800644e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f00b fc5d 	bl	8011d12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f006 f85e 	bl	800c51e <USB_ReadInterrupts>
 8006462:	4603      	mov	r3, r0
 8006464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646c:	d10b      	bne.n	8006486 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006480:	b292      	uxth	r2, r2
 8006482:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_PCD_SetAddress+0x1a>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e013      	b.n	80064d0 <HAL_PCD_SetAddress+0x42>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f006 f80f 	bl	800c4e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	70fb      	strb	r3, [r7, #3]
 80064ea:	460b      	mov	r3, r1
 80064ec:	803b      	strh	r3, [r7, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	da0e      	bge.n	800651c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	4413      	add	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	705a      	strb	r2, [r3, #1]
 800651a:	e00e      	b.n	800653a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 0207 	and.w	r2, r3, #7
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	b2da      	uxtb	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006546:	883a      	ldrh	r2, [r7, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	78ba      	ldrb	r2, [r7, #2]
 8006550:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006564:	78bb      	ldrb	r3, [r7, #2]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d102      	bne.n	8006570 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_PCD_EP_Open+0xa6>
 800657a:	2302      	movs	r3, #2
 800657c:	e00e      	b.n	800659c <HAL_PCD_EP_Open+0xc4>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	4618      	mov	r0, r3
 800658e:	f004 f827 	bl	800a5e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800659a:	7afb      	ldrb	r3, [r7, #11]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	da0e      	bge.n	80065d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	4413      	add	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	705a      	strb	r2, [r3, #1]
 80065d4:	e00e      	b.n	80065f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	f003 0207 	and.w	r2, r3, #7
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4413      	add	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_PCD_EP_Close+0x6a>
 800660a:	2302      	movs	r3, #2
 800660c:	e00e      	b.n	800662c <HAL_PCD_EP_Close+0x88>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	4618      	mov	r0, r3
 800661e:	f004 fb49 	bl	800acb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	607a      	str	r2, [r7, #4]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	460b      	mov	r3, r1
 8006642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	f003 0207 	and.w	r2, r3, #7
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	b2da      	uxtb	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6979      	ldr	r1, [r7, #20]
 8006690:	4618      	mov	r0, r3
 8006692:	f004 fcfb 	bl	800b08c <USB_EPStartXfer>
 8006696:	e005      	b.n	80066a4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6979      	ldr	r1, [r7, #20]
 800669e:	4618      	mov	r0, r3
 80066a0:	f004 fcf4 	bl	800b08c <USB_EPStartXfer>
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	f003 0207 	and.w	r2, r3, #7
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	440b      	add	r3, r1
 80066cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80066d0:	681b      	ldr	r3, [r3, #0]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	460b      	mov	r3, r1
 80066ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2200      	movs	r2, #0
 8006720:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2201      	movs	r2, #1
 8006726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	b2da      	uxtb	r2, r3
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6979      	ldr	r1, [r7, #20]
 8006744:	4618      	mov	r0, r3
 8006746:	f004 fca1 	bl	800b08c <USB_EPStartXfer>
 800674a:	e005      	b.n	8006758 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6979      	ldr	r1, [r7, #20]
 8006752:	4618      	mov	r0, r3
 8006754:	f004 fc9a 	bl	800b08c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	f003 0207 	and.w	r2, r3, #7
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d901      	bls.n	8006780 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e04c      	b.n	800681a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006784:	2b00      	cmp	r3, #0
 8006786:	da0e      	bge.n	80067a6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	4413      	add	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	705a      	strb	r2, [r3, #1]
 80067a4:	e00c      	b.n	80067c0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067a6:	78fa      	ldrb	r2, [r7, #3]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	4413      	add	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_PCD_EP_SetStall+0x7e>
 80067dc:	2302      	movs	r3, #2
 80067de:	e01c      	b.n	800681a <HAL_PCD_EP_SetStall+0xb8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68f9      	ldr	r1, [r7, #12]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f005 fd7b 	bl	800c2ea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d108      	bne.n	8006810 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f005 fe96 	bl	800c53c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	f003 020f 	and.w	r2, r3, #15
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	429a      	cmp	r2, r3
 800683a:	d901      	bls.n	8006840 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e040      	b.n	80068c2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006844:	2b00      	cmp	r3, #0
 8006846:	da0e      	bge.n	8006866 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	705a      	strb	r2, [r3, #1]
 8006864:	e00e      	b.n	8006884 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 0207 	and.w	r2, r3, #7
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	4413      	add	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	b2da      	uxtb	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_PCD_EP_ClrStall+0x82>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e00e      	b.n	80068c2 <HAL_PCD_EP_ClrStall+0xa0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f005 fd69 	bl	800c38a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b08e      	sub	sp, #56	; 0x38
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068ea:	e2df      	b.n	8006eac <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80068f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006902:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 8158 	bne.w	8006bbc <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800690c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b00      	cmp	r3, #0
 8006914:	d152      	bne.n	80069bc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	81fb      	strh	r3, [r7, #14]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006936:	b29b      	uxth	r3, r3
 8006938:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3328      	adds	r3, #40	; 0x28
 800693e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006948:	b29b      	uxth	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4413      	add	r3, r2
 8006954:	3302      	adds	r3, #2
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	695a      	ldr	r2, [r3, #20]
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	441a      	add	r2, r3
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800697a:	2100      	movs	r1, #0
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f00b f9ae 	bl	8011cde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 828e 	beq.w	8006eac <PCD_EP_ISR_Handler+0x5ca>
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 8289 	bne.w	8006eac <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	b292      	uxth	r2, r2
 80069ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069ba:	e277      	b.n	8006eac <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80069cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80069ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d034      	beq.n	8006a40 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069de:	b29b      	uxth	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4413      	add	r3, r2
 80069ea:	3306      	adds	r3, #6
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f005 fde0 	bl	800c5da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a26:	4013      	ands	r3, r2
 8006a28:	823b      	strh	r3, [r7, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	8a3a      	ldrh	r2, [r7, #16]
 8006a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a34:	b292      	uxth	r2, r2
 8006a36:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f00b f923 	bl	8011c84 <HAL_PCD_SetupStageCallback>
 8006a3e:	e235      	b.n	8006eac <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a40:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f280 8231 	bge.w	8006eac <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a56:	4013      	ands	r3, r2
 8006a58:	83bb      	strh	r3, [r7, #28]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	8bba      	ldrh	r2, [r7, #28]
 8006a60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a64:	b292      	uxth	r2, r2
 8006a66:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3306      	adds	r3, #6
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d019      	beq.n	8006ad0 <PCD_EP_ISR_Handler+0x1ee>
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d015      	beq.n	8006ad0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	6959      	ldr	r1, [r3, #20]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f005 fd90 	bl	800c5da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	441a      	add	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006ac8:	2100      	movs	r1, #0
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f00b f8ec 	bl	8011ca8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d112      	bne.n	8006b1e <PCD_EP_ISR_Handler+0x23c>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	801a      	strh	r2, [r3, #0]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e02f      	b.n	8006b7e <PCD_EP_ISR_Handler+0x29c>
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b3e      	cmp	r3, #62	; 0x3e
 8006b24:	d813      	bhi.n	8006b4e <PCD_EP_ISR_Handler+0x26c>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <PCD_EP_ISR_Handler+0x25e>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	e017      	b.n	8006b7e <PCD_EP_ISR_Handler+0x29c>
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	633b      	str	r3, [r7, #48]	; 0x30
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d102      	bne.n	8006b68 <PCD_EP_ISR_Handler+0x286>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	3b01      	subs	r3, #1
 8006b66:	633b      	str	r3, [r7, #48]	; 0x30
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8e:	827b      	strh	r3, [r7, #18]
 8006b90:	8a7b      	ldrh	r3, [r7, #18]
 8006b92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b96:	827b      	strh	r3, [r7, #18]
 8006b98:	8a7b      	ldrh	r3, [r7, #18]
 8006b9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b9e:	827b      	strh	r3, [r7, #18]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	8a7b      	ldrh	r3, [r7, #18]
 8006ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	8013      	strh	r3, [r2, #0]
 8006bba:	e177      	b.n	8006eac <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f280 80ea 	bge.w	8006dac <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006bee:	4013      	ands	r3, r2
 8006bf0:	853b      	strh	r3, [r7, #40]	; 0x28
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c06:	b292      	uxth	r2, r2
 8006c08:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006c0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	7b1b      	ldrb	r3, [r3, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d122      	bne.n	8006c6e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3306      	adds	r3, #6
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c50:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006c52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8087 	beq.w	8006d68 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	6959      	ldr	r1, [r3, #20]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	88da      	ldrh	r2, [r3, #6]
 8006c66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c68:	f005 fcb7 	bl	800c5da <USB_ReadPMA>
 8006c6c:	e07c      	b.n	8006d68 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	78db      	ldrb	r3, [r3, #3]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d108      	bne.n	8006c88 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f923 	bl	8006ec8 <HAL_PCD_EP_DB_Receive>
 8006c82:	4603      	mov	r3, r0
 8006c84:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006c86:	e06f      	b.n	8006d68 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d021      	beq.n	8006d26 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006d0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d02a      	beq.n	8006d68 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	6959      	ldr	r1, [r3, #20]
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	891a      	ldrh	r2, [r3, #8]
 8006d1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d20:	f005 fc5b 	bl	800c5da <USB_ReadPMA>
 8006d24:	e020      	b.n	8006d68 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	4413      	add	r3, r2
 8006d3a:	3306      	adds	r3, #6
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d4e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006d50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	6959      	ldr	r1, [r3, #20]
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	895a      	ldrh	r2, [r3, #10]
 8006d62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d64:	f005 fc39 	bl	800c5da <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d6e:	441a      	add	r2, r3
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	695a      	ldr	r2, [r3, #20]
 8006d78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d7a:	441a      	add	r2, r3
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <PCD_EP_ISR_Handler+0x4b0>
 8006d88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d206      	bcs.n	8006da0 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f00a ff85 	bl	8011ca8 <HAL_PCD_DataOutStageCallback>
 8006d9e:	e005      	b.n	8006dac <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f004 f970 	bl	800b08c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d07a      	beq.n	8006eac <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8006db6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	843b      	strh	r3, [r7, #32]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	441a      	add	r2, r3
 8006df4:	8c3b      	ldrh	r3, [r7, #32]
 8006df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	78db      	ldrb	r3, [r3, #3]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d108      	bne.n	8006e1c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d146      	bne.n	8006ea0 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006e12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d141      	bne.n	8006ea0 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	4413      	add	r3, r2
 8006e30:	3302      	adds	r3, #2
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e44:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	8bfb      	ldrh	r3, [r7, #30]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d906      	bls.n	8006e5e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	699a      	ldr	r2, [r3, #24]
 8006e54:	8bfb      	ldrh	r3, [r7, #30]
 8006e56:	1ad2      	subs	r2, r2, r3
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	619a      	str	r2, [r3, #24]
 8006e5c:	e002      	b.n	8006e64 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	2200      	movs	r2, #0
 8006e62:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f00a ff33 	bl	8011cde <HAL_PCD_DataInStageCallback>
 8006e78:	e018      	b.n	8006eac <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	8bfb      	ldrh	r3, [r7, #30]
 8006e80:	441a      	add	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	8bfb      	ldrh	r3, [r7, #30]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f004 f8f7 	bl	800b08c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006e9e:	e005      	b.n	8006eac <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006ea0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f91b 	bl	80070e2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	b21b      	sxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f6ff ad17 	blt.w	80068ec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3738      	adds	r7, #56	; 0x38
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d07e      	beq.n	8006fde <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	3302      	adds	r3, #2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	8b7b      	ldrh	r3, [r7, #26]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d306      	bcc.n	8006f22 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	8b7b      	ldrh	r3, [r7, #26]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	619a      	str	r2, [r3, #24]
 8006f20:	e002      	b.n	8006f28 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2200      	movs	r2, #0
 8006f26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d123      	bne.n	8006f78 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4a:	833b      	strh	r3, [r7, #24]
 8006f4c:	8b3b      	ldrh	r3, [r7, #24]
 8006f4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f52:	833b      	strh	r3, [r7, #24]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	8b3b      	ldrh	r3, [r7, #24]
 8006f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01f      	beq.n	8006fc2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	82fb      	strh	r3, [r7, #22]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	8afb      	ldrh	r3, [r7, #22]
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006fc2:	8b7b      	ldrh	r3, [r7, #26]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8087 	beq.w	80070d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6959      	ldr	r1, [r3, #20]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	891a      	ldrh	r2, [r3, #8]
 8006fd6:	8b7b      	ldrh	r3, [r7, #26]
 8006fd8:	f005 faff 	bl	800c5da <USB_ReadPMA>
 8006fdc:	e07c      	b.n	80070d8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3306      	adds	r3, #6
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007006:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	699a      	ldr	r2, [r3, #24]
 800700c:	8b7b      	ldrh	r3, [r7, #26]
 800700e:	429a      	cmp	r2, r3
 8007010:	d306      	bcc.n	8007020 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	8b7b      	ldrh	r3, [r7, #26]
 8007018:	1ad2      	subs	r2, r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	619a      	str	r2, [r3, #24]
 800701e:	e002      	b.n	8007026 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2200      	movs	r2, #0
 8007024:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d123      	bne.n	8007076 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007048:	83fb      	strh	r3, [r7, #30]
 800704a:	8bfb      	ldrh	r3, [r7, #30]
 800704c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007050:	83fb      	strh	r3, [r7, #30]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	8bfb      	ldrh	r3, [r7, #30]
 8007062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800706e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007072:	b29b      	uxth	r3, r3
 8007074:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d11f      	bne.n	80070c0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	83bb      	strh	r3, [r7, #28]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	441a      	add	r2, r3
 80070aa:	8bbb      	ldrh	r3, [r7, #28]
 80070ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80070c0:	8b7b      	ldrh	r3, [r7, #26]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6959      	ldr	r1, [r3, #20]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	895a      	ldrh	r2, [r3, #10]
 80070d2:	8b7b      	ldrh	r3, [r7, #26]
 80070d4:	f005 fa81 	bl	800c5da <USB_ReadPMA>
    }
  }

  return count;
 80070d8:	8b7b      	ldrh	r3, [r7, #26]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b092      	sub	sp, #72	; 0x48
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	4613      	mov	r3, r2
 80070ee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8132 	beq.w	8007360 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007104:	b29b      	uxth	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	4413      	add	r3, r2
 8007110:	3302      	adds	r3, #2
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007124:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800712c:	429a      	cmp	r2, r3
 800712e:	d906      	bls.n	800713e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007136:	1ad2      	subs	r2, r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	619a      	str	r2, [r3, #24]
 800713c:	e002      	b.n	8007144 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2200      	movs	r2, #0
 8007142:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d12c      	bne.n	80071a6 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f00a fdc3 	bl	8011cde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 822f 	beq.w	80075c2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	827b      	strh	r3, [r7, #18]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	8a7b      	ldrh	r3, [r7, #18]
 8007190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800719c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8013      	strh	r3, [r2, #0]
 80071a4:	e20d      	b.n	80075c2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01f      	beq.n	80071f0 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	f040 81e3 	bne.w	80075c2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	695a      	ldr	r2, [r3, #20]
 8007200:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007202:	441a      	add	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800720e:	441a      	add	r2, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6a1a      	ldr	r2, [r3, #32]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d309      	bcc.n	8007234 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6a1a      	ldr	r2, [r3, #32]
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	1ad2      	subs	r2, r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	621a      	str	r2, [r3, #32]
 8007232:	e014      	b.n	800725e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800723c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800723e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007248:	e009      	b.n	800725e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d155      	bne.n	8007312 <HAL_PCD_EP_DB_Transmit+0x230>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007274:	b29b      	uxth	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	4413      	add	r3, r2
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	011a      	lsls	r2, r3, #4
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	4413      	add	r3, r2
 8007288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	2b00      	cmp	r3, #0
 8007292:	d112      	bne.n	80072ba <HAL_PCD_EP_DB_Transmit+0x1d8>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729e:	b29a      	uxth	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	e047      	b.n	800734a <HAL_PCD_EP_DB_Transmit+0x268>
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	2b3e      	cmp	r3, #62	; 0x3e
 80072be:	d811      	bhi.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x202>
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	3301      	adds	r3, #1
 80072d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	b29b      	uxth	r3, r3
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	b29a      	uxth	r2, r3
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	e032      	b.n	800734a <HAL_PCD_EP_DB_Transmit+0x268>
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <HAL_PCD_EP_DB_Transmit+0x218>
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	3b01      	subs	r3, #1
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730a:	b29a      	uxth	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e01b      	b.n	800734a <HAL_PCD_EP_DB_Transmit+0x268>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d117      	bne.n	800734a <HAL_PCD_EP_DB_Transmit+0x268>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	623b      	str	r3, [r7, #32]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007328:	b29b      	uxth	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	4413      	add	r3, r2
 8007330:	623b      	str	r3, [r7, #32]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	011a      	lsls	r2, r3, #4
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	4413      	add	r3, r2
 800733c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	b29a      	uxth	r2, r3
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6959      	ldr	r1, [r3, #20]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	891a      	ldrh	r2, [r3, #8]
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	b29b      	uxth	r3, r3
 800735a:	f005 f8fa 	bl	800c552 <USB_WritePMA>
 800735e:	e130      	b.n	80075c2 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007368:	b29b      	uxth	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	4413      	add	r3, r2
 8007374:	3306      	adds	r3, #6
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007388:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007390:	429a      	cmp	r2, r3
 8007392:	d306      	bcc.n	80073a2 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	619a      	str	r2, [r3, #24]
 80073a0:	e002      	b.n	80073a8 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2200      	movs	r2, #0
 80073a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d12c      	bne.n	800740a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f00a fc91 	bl	8011cde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 80fd 	bne.w	80075c2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007404:	b29b      	uxth	r3, r3
 8007406:	8013      	strh	r3, [r2, #0]
 8007408:	e0db      	b.n	80075c2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11f      	bne.n	8007454 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800744c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007450:	b29b      	uxth	r3, r3
 8007452:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800745a:	2b01      	cmp	r3, #1
 800745c:	f040 80b1 	bne.w	80075c2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	695a      	ldr	r2, [r3, #20]
 8007464:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007466:	441a      	add	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	69da      	ldr	r2, [r3, #28]
 8007470:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007472:	441a      	add	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6a1a      	ldr	r2, [r3, #32]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	d309      	bcc.n	8007498 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6a1a      	ldr	r2, [r3, #32]
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	621a      	str	r2, [r3, #32]
 8007496:	e014      	b.n	80074c2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80074a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074a2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074ac:	e009      	b.n	80074c2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	785b      	ldrb	r3, [r3, #1]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d155      	bne.n	800757c <HAL_PCD_EP_DB_Transmit+0x49a>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	647b      	str	r3, [r7, #68]	; 0x44
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e4:	4413      	add	r3, r2
 80074e6:	647b      	str	r3, [r7, #68]	; 0x44
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	011a      	lsls	r2, r3, #4
 80074ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f0:	4413      	add	r3, r2
 80074f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074f6:	643b      	str	r3, [r7, #64]	; 0x40
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d112      	bne.n	8007524 <HAL_PCD_EP_DB_Transmit+0x442>
 80074fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007508:	b29a      	uxth	r2, r3
 800750a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751c:	b29a      	uxth	r2, r3
 800751e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	e044      	b.n	80075ae <HAL_PCD_EP_DB_Transmit+0x4cc>
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	2b3e      	cmp	r3, #62	; 0x3e
 8007528:	d811      	bhi.n	800754e <HAL_PCD_EP_DB_Transmit+0x46c>
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_PCD_EP_DB_Transmit+0x45e>
 800753a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753c:	3301      	adds	r3, #1
 800753e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007542:	b29b      	uxth	r3, r3
 8007544:	029b      	lsls	r3, r3, #10
 8007546:	b29a      	uxth	r2, r3
 8007548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754a:	801a      	strh	r2, [r3, #0]
 800754c:	e02f      	b.n	80075ae <HAL_PCD_EP_DB_Transmit+0x4cc>
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <HAL_PCD_EP_DB_Transmit+0x482>
 800755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007560:	3b01      	subs	r3, #1
 8007562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007566:	b29b      	uxth	r3, r3
 8007568:	029b      	lsls	r3, r3, #10
 800756a:	b29b      	uxth	r3, r3
 800756c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007574:	b29a      	uxth	r2, r3
 8007576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007578:	801a      	strh	r2, [r3, #0]
 800757a:	e018      	b.n	80075ae <HAL_PCD_EP_DB_Transmit+0x4cc>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d114      	bne.n	80075ae <HAL_PCD_EP_DB_Transmit+0x4cc>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800758c:	b29b      	uxth	r3, r3
 800758e:	461a      	mov	r2, r3
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	4413      	add	r3, r2
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	011a      	lsls	r2, r3, #4
 800759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759e:	4413      	add	r3, r2
 80075a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075a4:	633b      	str	r3, [r7, #48]	; 0x30
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6959      	ldr	r1, [r3, #20]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	895a      	ldrh	r2, [r3, #10]
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f004 ffc8 	bl	800c552 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	823b      	strh	r3, [r7, #16]
 80075de:	8a3b      	ldrh	r3, [r7, #16]
 80075e0:	f083 0310 	eor.w	r3, r3, #16
 80075e4:	823b      	strh	r3, [r7, #16]
 80075e6:	8a3b      	ldrh	r3, [r7, #16]
 80075e8:	f083 0320 	eor.w	r3, r3, #32
 80075ec:	823b      	strh	r3, [r7, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	441a      	add	r2, r3
 80075fc:	8a3b      	ldrh	r3, [r7, #16]
 80075fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3748      	adds	r7, #72	; 0x48
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	607b      	str	r3, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	817b      	strh	r3, [r7, #10]
 800762a:	4613      	mov	r3, r2
 800762c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800762e:	897b      	ldrh	r3, [r7, #10]
 8007630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800763a:	897b      	ldrh	r3, [r7, #10]
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	e009      	b.n	8007666 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007652:	897a      	ldrh	r2, [r7, #10]
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007666:	893b      	ldrh	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d107      	bne.n	800767c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2200      	movs	r2, #0
 8007670:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	b29a      	uxth	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	80da      	strh	r2, [r3, #6]
 800767a:	e00b      	b.n	8007694 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2201      	movs	r2, #1
 8007680:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	b29a      	uxth	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	0c1b      	lsrs	r3, r3, #16
 800768e:	b29a      	uxth	r2, r3
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr
	...

080076b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e31d      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076ca:	4b94      	ldr	r3, [pc, #592]	; (800791c <HAL_RCC_OscConfig+0x264>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 030c 	and.w	r3, r3, #12
 80076d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076d4:	4b91      	ldr	r3, [pc, #580]	; (800791c <HAL_RCC_OscConfig+0x264>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076dc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d07b      	beq.n	80077e2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d006      	beq.n	80076fe <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b0c      	cmp	r3, #12
 80076f4:	d10f      	bne.n	8007716 <HAL_RCC_OscConfig+0x5e>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fc:	d10b      	bne.n	8007716 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076fe:	4b87      	ldr	r3, [pc, #540]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d06a      	beq.n	80077e0 <HAL_RCC_OscConfig+0x128>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d166      	bne.n	80077e0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e2f7      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d106      	bne.n	800772c <HAL_RCC_OscConfig+0x74>
 800771e:	4b7f      	ldr	r3, [pc, #508]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a7e      	ldr	r2, [pc, #504]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	e02d      	b.n	8007788 <HAL_RCC_OscConfig+0xd0>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10c      	bne.n	800774e <HAL_RCC_OscConfig+0x96>
 8007734:	4b79      	ldr	r3, [pc, #484]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a78      	ldr	r2, [pc, #480]	; (800791c <HAL_RCC_OscConfig+0x264>)
 800773a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	4b76      	ldr	r3, [pc, #472]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a75      	ldr	r2, [pc, #468]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	e01c      	b.n	8007788 <HAL_RCC_OscConfig+0xd0>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b05      	cmp	r3, #5
 8007754:	d10c      	bne.n	8007770 <HAL_RCC_OscConfig+0xb8>
 8007756:	4b71      	ldr	r3, [pc, #452]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a70      	ldr	r2, [pc, #448]	; (800791c <HAL_RCC_OscConfig+0x264>)
 800775c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	4b6e      	ldr	r3, [pc, #440]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a6d      	ldr	r2, [pc, #436]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e00b      	b.n	8007788 <HAL_RCC_OscConfig+0xd0>
 8007770:	4b6a      	ldr	r3, [pc, #424]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a69      	ldr	r2, [pc, #420]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	4b67      	ldr	r3, [pc, #412]	; (800791c <HAL_RCC_OscConfig+0x264>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a66      	ldr	r2, [pc, #408]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d013      	beq.n	80077b8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007790:	f7fd f892 	bl	80048b8 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007798:	f7fd f88e 	bl	80048b8 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b64      	cmp	r3, #100	; 0x64
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e2ad      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077aa:	4b5c      	ldr	r3, [pc, #368]	; (800791c <HAL_RCC_OscConfig+0x264>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0f0      	beq.n	8007798 <HAL_RCC_OscConfig+0xe0>
 80077b6:	e014      	b.n	80077e2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b8:	f7fd f87e 	bl	80048b8 <HAL_GetTick>
 80077bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077be:	e008      	b.n	80077d2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077c0:	f7fd f87a 	bl	80048b8 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b64      	cmp	r3, #100	; 0x64
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e299      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077d2:	4b52      	ldr	r3, [pc, #328]	; (800791c <HAL_RCC_OscConfig+0x264>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f0      	bne.n	80077c0 <HAL_RCC_OscConfig+0x108>
 80077de:	e000      	b.n	80077e2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d05a      	beq.n	80078a4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d005      	beq.n	8007800 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	2b0c      	cmp	r3, #12
 80077f8:	d119      	bne.n	800782e <HAL_RCC_OscConfig+0x176>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d116      	bne.n	800782e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007800:	4b46      	ldr	r3, [pc, #280]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_RCC_OscConfig+0x160>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d001      	beq.n	8007818 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e276      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007818:	4b40      	ldr	r3, [pc, #256]	; (800791c <HAL_RCC_OscConfig+0x264>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	493d      	ldr	r1, [pc, #244]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007828:	4313      	orrs	r3, r2
 800782a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800782c:	e03a      	b.n	80078a4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d020      	beq.n	8007878 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007836:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <HAL_RCC_OscConfig+0x268>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783c:	f7fd f83c 	bl	80048b8 <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007844:	f7fd f838 	bl	80048b8 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e257      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007856:	4b31      	ldr	r3, [pc, #196]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0f0      	beq.n	8007844 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007862:	4b2e      	ldr	r3, [pc, #184]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	492a      	ldr	r1, [pc, #168]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007872:	4313      	orrs	r3, r2
 8007874:	604b      	str	r3, [r1, #4]
 8007876:	e015      	b.n	80078a4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007878:	4b29      	ldr	r3, [pc, #164]	; (8007920 <HAL_RCC_OscConfig+0x268>)
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787e:	f7fd f81b 	bl	80048b8 <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007884:	e008      	b.n	8007898 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007886:	f7fd f817 	bl	80048b8 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e236      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007898:	4b20      	ldr	r3, [pc, #128]	; (800791c <HAL_RCC_OscConfig+0x264>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f0      	bne.n	8007886 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80b8 	beq.w	8007a22 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d170      	bne.n	800799a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80078b8:	4b18      	ldr	r3, [pc, #96]	; (800791c <HAL_RCC_OscConfig+0x264>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_RCC_OscConfig+0x218>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e21a      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	4b11      	ldr	r3, [pc, #68]	; (800791c <HAL_RCC_OscConfig+0x264>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80078dc:	429a      	cmp	r2, r3
 80078de:	d921      	bls.n	8007924 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fcad 	bl	8008244 <RCC_SetFlashLatencyFromMSIRange>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e208      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078f4:	4b09      	ldr	r3, [pc, #36]	; (800791c <HAL_RCC_OscConfig+0x264>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	4906      	ldr	r1, [pc, #24]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007902:	4313      	orrs	r3, r2
 8007904:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007906:	4b05      	ldr	r3, [pc, #20]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	061b      	lsls	r3, r3, #24
 8007914:	4901      	ldr	r1, [pc, #4]	; (800791c <HAL_RCC_OscConfig+0x264>)
 8007916:	4313      	orrs	r3, r2
 8007918:	604b      	str	r3, [r1, #4]
 800791a:	e020      	b.n	800795e <HAL_RCC_OscConfig+0x2a6>
 800791c:	40023800 	.word	0x40023800
 8007920:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007924:	4ba4      	ldr	r3, [pc, #656]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	49a1      	ldr	r1, [pc, #644]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007932:	4313      	orrs	r3, r2
 8007934:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007936:	4ba0      	ldr	r3, [pc, #640]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	061b      	lsls	r3, r3, #24
 8007944:	499c      	ldr	r1, [pc, #624]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007946:	4313      	orrs	r3, r2
 8007948:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fc78 	bl	8008244 <RCC_SetFlashLatencyFromMSIRange>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e1d3      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	0b5b      	lsrs	r3, r3, #13
 8007964:	3301      	adds	r3, #1
 8007966:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800796e:	4a92      	ldr	r2, [pc, #584]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007970:	6892      	ldr	r2, [r2, #8]
 8007972:	0912      	lsrs	r2, r2, #4
 8007974:	f002 020f 	and.w	r2, r2, #15
 8007978:	4990      	ldr	r1, [pc, #576]	; (8007bbc <HAL_RCC_OscConfig+0x504>)
 800797a:	5c8a      	ldrb	r2, [r1, r2]
 800797c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800797e:	4a90      	ldr	r2, [pc, #576]	; (8007bc0 <HAL_RCC_OscConfig+0x508>)
 8007980:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007982:	4b90      	ldr	r3, [pc, #576]	; (8007bc4 <HAL_RCC_OscConfig+0x50c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fb ffdc 	bl	8003944 <HAL_InitTick>
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d045      	beq.n	8007a22 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	e1b5      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d029      	beq.n	80079f6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80079a2:	4b89      	ldr	r3, [pc, #548]	; (8007bc8 <HAL_RCC_OscConfig+0x510>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a8:	f7fc ff86 	bl	80048b8 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079b0:	f7fc ff82 	bl	80048b8 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e1a1      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80079c2:	4b7d      	ldr	r3, [pc, #500]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079ce:	4b7a      	ldr	r3, [pc, #488]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	4977      	ldr	r1, [pc, #476]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079e0:	4b75      	ldr	r3, [pc, #468]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	061b      	lsls	r3, r3, #24
 80079ee:	4972      	ldr	r1, [pc, #456]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	604b      	str	r3, [r1, #4]
 80079f4:	e015      	b.n	8007a22 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80079f6:	4b74      	ldr	r3, [pc, #464]	; (8007bc8 <HAL_RCC_OscConfig+0x510>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079fc:	f7fc ff5c 	bl	80048b8 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a04:	f7fc ff58 	bl	80048b8 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e177      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007a16:	4b68      	ldr	r3, [pc, #416]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f0      	bne.n	8007a04 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0308 	and.w	r3, r3, #8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d030      	beq.n	8007a90 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a36:	4b65      	ldr	r3, [pc, #404]	; (8007bcc <HAL_RCC_OscConfig+0x514>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a3c:	f7fc ff3c 	bl	80048b8 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a44:	f7fc ff38 	bl	80048b8 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e157      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a56:	4b58      	ldr	r3, [pc, #352]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0f0      	beq.n	8007a44 <HAL_RCC_OscConfig+0x38c>
 8007a62:	e015      	b.n	8007a90 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a64:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <HAL_RCC_OscConfig+0x514>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a6a:	f7fc ff25 	bl	80048b8 <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a72:	f7fc ff21 	bl	80048b8 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e140      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a84:	4b4c      	ldr	r3, [pc, #304]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1f0      	bne.n	8007a72 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80b5 	beq.w	8007c08 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aa2:	4b45      	ldr	r3, [pc, #276]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10d      	bne.n	8007aca <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aae:	4b42      	ldr	r3, [pc, #264]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	4a41      	ldr	r2, [pc, #260]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab8:	6253      	str	r3, [r2, #36]	; 0x24
 8007aba:	4b3f      	ldr	r3, [pc, #252]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	60bb      	str	r3, [r7, #8]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aca:	4b41      	ldr	r3, [pc, #260]	; (8007bd0 <HAL_RCC_OscConfig+0x518>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d118      	bne.n	8007b08 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ad6:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <HAL_RCC_OscConfig+0x518>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a3d      	ldr	r2, [pc, #244]	; (8007bd0 <HAL_RCC_OscConfig+0x518>)
 8007adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ae2:	f7fc fee9 	bl	80048b8 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aea:	f7fc fee5 	bl	80048b8 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b64      	cmp	r3, #100	; 0x64
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e104      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007afc:	4b34      	ldr	r3, [pc, #208]	; (8007bd0 <HAL_RCC_OscConfig+0x518>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0f0      	beq.n	8007aea <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d106      	bne.n	8007b1e <HAL_RCC_OscConfig+0x466>
 8007b10:	4b29      	ldr	r3, [pc, #164]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	4a28      	ldr	r2, [pc, #160]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1a:	6353      	str	r3, [r2, #52]	; 0x34
 8007b1c:	e02d      	b.n	8007b7a <HAL_RCC_OscConfig+0x4c2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10c      	bne.n	8007b40 <HAL_RCC_OscConfig+0x488>
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2a:	4a23      	ldr	r2, [pc, #140]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b30:	6353      	str	r3, [r2, #52]	; 0x34
 8007b32:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	4a20      	ldr	r2, [pc, #128]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b3c:	6353      	str	r3, [r2, #52]	; 0x34
 8007b3e:	e01c      	b.n	8007b7a <HAL_RCC_OscConfig+0x4c2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2b05      	cmp	r3, #5
 8007b46:	d10c      	bne.n	8007b62 <HAL_RCC_OscConfig+0x4aa>
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4c:	4a1a      	ldr	r2, [pc, #104]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b52:	6353      	str	r3, [r2, #52]	; 0x34
 8007b54:	4b18      	ldr	r3, [pc, #96]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b58:	4a17      	ldr	r2, [pc, #92]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b5e:	6353      	str	r3, [r2, #52]	; 0x34
 8007b60:	e00b      	b.n	8007b7a <HAL_RCC_OscConfig+0x4c2>
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b66:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b6c:	6353      	str	r3, [r2, #52]	; 0x34
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	4a11      	ldr	r2, [pc, #68]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b78:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d015      	beq.n	8007bae <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b82:	f7fc fe99 	bl	80048b8 <HAL_GetTick>
 8007b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b88:	e00a      	b.n	8007ba0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b8a:	f7fc fe95 	bl	80048b8 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d901      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e0b2      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <HAL_RCC_OscConfig+0x500>)
 8007ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0ee      	beq.n	8007b8a <HAL_RCC_OscConfig+0x4d2>
 8007bac:	e023      	b.n	8007bf6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bae:	f7fc fe83 	bl	80048b8 <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bb4:	e019      	b.n	8007bea <HAL_RCC_OscConfig+0x532>
 8007bb6:	bf00      	nop
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	080169d0 	.word	0x080169d0
 8007bc0:	20000000 	.word	0x20000000
 8007bc4:	20000008 	.word	0x20000008
 8007bc8:	42470020 	.word	0x42470020
 8007bcc:	42470680 	.word	0x42470680
 8007bd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bd4:	f7fc fe70 	bl	80048b8 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e08d      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bea:	4b49      	ldr	r3, [pc, #292]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1ee      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007bf6:	7ffb      	ldrb	r3, [r7, #31]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d105      	bne.n	8007c08 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bfc:	4b44      	ldr	r3, [pc, #272]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	4a43      	ldr	r2, [pc, #268]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c06:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d079      	beq.n	8007d04 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b0c      	cmp	r3, #12
 8007c14:	d056      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d13b      	bne.n	8007c96 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c1e:	4b3d      	ldr	r3, [pc, #244]	; (8007d14 <HAL_RCC_OscConfig+0x65c>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c24:	f7fc fe48 	bl	80048b8 <HAL_GetTick>
 8007c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c2c:	f7fc fe44 	bl	80048b8 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e063      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c3e:	4b34      	ldr	r3, [pc, #208]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f0      	bne.n	8007c2c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c4a:	4b31      	ldr	r3, [pc, #196]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	4319      	orrs	r1, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	430b      	orrs	r3, r1
 8007c62:	492b      	ldr	r1, [pc, #172]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c68:	4b2a      	ldr	r3, [pc, #168]	; (8007d14 <HAL_RCC_OscConfig+0x65c>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c6e:	f7fc fe23 	bl	80048b8 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c74:	e008      	b.n	8007c88 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c76:	f7fc fe1f 	bl	80048b8 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e03e      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c88:	4b21      	ldr	r3, [pc, #132]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f0      	beq.n	8007c76 <HAL_RCC_OscConfig+0x5be>
 8007c94:	e036      	b.n	8007d04 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c96:	4b1f      	ldr	r3, [pc, #124]	; (8007d14 <HAL_RCC_OscConfig+0x65c>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c9c:	f7fc fe0c 	bl	80048b8 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ca4:	f7fc fe08 	bl	80048b8 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e027      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cb6:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f0      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x5ec>
 8007cc2:	e01f      	b.n	8007d04 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e01a      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <HAL_RCC_OscConfig+0x658>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d10d      	bne.n	8007d00 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d106      	bne.n	8007d00 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d001      	beq.n	8007d04 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e000      	b.n	8007d06 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	40023800 	.word	0x40023800
 8007d14:	42470060 	.word	0x42470060

08007d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e11a      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d2c:	4b8f      	ldr	r3, [pc, #572]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d919      	bls.n	8007d6e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d105      	bne.n	8007d4c <HAL_RCC_ClockConfig+0x34>
 8007d40:	4b8a      	ldr	r3, [pc, #552]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a89      	ldr	r2, [pc, #548]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007d46:	f043 0304 	orr.w	r3, r3, #4
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4b87      	ldr	r3, [pc, #540]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f023 0201 	bic.w	r2, r3, #1
 8007d54:	4985      	ldr	r1, [pc, #532]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d5c:	4b83      	ldr	r3, [pc, #524]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d001      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e0f9      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d008      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d7a:	4b7d      	ldr	r3, [pc, #500]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	497a      	ldr	r1, [pc, #488]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 808e 	beq.w	8007eb6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d107      	bne.n	8007db2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007da2:	4b73      	ldr	r3, [pc, #460]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d121      	bne.n	8007df2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e0d7      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d107      	bne.n	8007dca <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dba:	4b6d      	ldr	r3, [pc, #436]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d115      	bne.n	8007df2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e0cb      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d107      	bne.n	8007de2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dd2:	4b67      	ldr	r3, [pc, #412]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e0bf      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007de2:	4b63      	ldr	r3, [pc, #396]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e0b7      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007df2:	4b5f      	ldr	r3, [pc, #380]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f023 0203 	bic.w	r2, r3, #3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	495c      	ldr	r1, [pc, #368]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e04:	f7fc fd58 	bl	80048b8 <HAL_GetTick>
 8007e08:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d112      	bne.n	8007e38 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e12:	e00a      	b.n	8007e2a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e14:	f7fc fd50 	bl	80048b8 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e09b      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e2a:	4b51      	ldr	r3, [pc, #324]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 030c 	and.w	r3, r3, #12
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d1ee      	bne.n	8007e14 <HAL_RCC_ClockConfig+0xfc>
 8007e36:	e03e      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d112      	bne.n	8007e66 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e40:	e00a      	b.n	8007e58 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e42:	f7fc fd39 	bl	80048b8 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e084      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e58:	4b45      	ldr	r3, [pc, #276]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 030c 	and.w	r3, r3, #12
 8007e60:	2b0c      	cmp	r3, #12
 8007e62:	d1ee      	bne.n	8007e42 <HAL_RCC_ClockConfig+0x12a>
 8007e64:	e027      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d11d      	bne.n	8007eaa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e6e:	e00a      	b.n	8007e86 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e70:	f7fc fd22 	bl	80048b8 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e06d      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e86:	4b3a      	ldr	r3, [pc, #232]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 030c 	and.w	r3, r3, #12
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d1ee      	bne.n	8007e70 <HAL_RCC_ClockConfig+0x158>
 8007e92:	e010      	b.n	8007eb6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e94:	f7fc fd10 	bl	80048b8 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e05b      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007eaa:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f003 030c 	and.w	r3, r3, #12
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1ee      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007eb6:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d219      	bcs.n	8007ef8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d105      	bne.n	8007ed6 <HAL_RCC_ClockConfig+0x1be>
 8007eca:	4b28      	ldr	r3, [pc, #160]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a27      	ldr	r2, [pc, #156]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007ed0:	f043 0304 	orr.w	r3, r3, #4
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	4b25      	ldr	r3, [pc, #148]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	4923      	ldr	r1, [pc, #140]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee6:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <HAL_RCC_ClockConfig+0x254>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e034      	b.n	8007f62 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d008      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	4917      	ldr	r1, [pc, #92]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d009      	beq.n	8007f36 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	490f      	ldr	r1, [pc, #60]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f36:	f000 f859 	bl	8007fec <HAL_RCC_GetSysClockFreq>
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <HAL_RCC_ClockConfig+0x258>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	091b      	lsrs	r3, r3, #4
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	4a0b      	ldr	r2, [pc, #44]	; (8007f74 <HAL_RCC_ClockConfig+0x25c>)
 8007f48:	5cd3      	ldrb	r3, [r2, r3]
 8007f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <HAL_RCC_ClockConfig+0x260>)
 8007f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007f52:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <HAL_RCC_ClockConfig+0x264>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fb fcf4 	bl	8003944 <HAL_InitTick>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007f60:	7afb      	ldrb	r3, [r7, #11]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40023c00 	.word	0x40023c00
 8007f70:	40023800 	.word	0x40023800
 8007f74:	080169d0 	.word	0x080169d0
 8007f78:	20000000 	.word	0x20000000
 8007f7c:	20000008 	.word	0x20000008

08007f80 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007f90:	2302      	movs	r3, #2
 8007f92:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8007f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f9c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <HAL_RCC_MCOConfig+0x64>)
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	4a0f      	ldr	r2, [pc, #60]	; (8007fe4 <HAL_RCC_MCOConfig+0x64>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	61d3      	str	r3, [r2, #28]
 8007fae:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <HAL_RCC_MCOConfig+0x64>)
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8007fba:	f107 0314 	add.w	r3, r7, #20
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4809      	ldr	r0, [pc, #36]	; (8007fe8 <HAL_RCC_MCOConfig+0x68>)
 8007fc2:	f7fd fd5b 	bl	8005a7c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <HAL_RCC_MCOConfig+0x64>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	4903      	ldr	r1, [pc, #12]	; (8007fe4 <HAL_RCC_MCOConfig+0x64>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	608b      	str	r3, [r1, #8]
}
 8007fda:	bf00      	nop
 8007fdc:	3728      	adds	r7, #40	; 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	40020000 	.word	0x40020000

08007fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8007ff2:	4b5f      	ldr	r3, [pc, #380]	; (8008170 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f003 030c 	and.w	r3, r3, #12
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d007      	beq.n	8008012 <HAL_RCC_GetSysClockFreq+0x26>
 8008002:	2b0c      	cmp	r3, #12
 8008004:	d008      	beq.n	8008018 <HAL_RCC_GetSysClockFreq+0x2c>
 8008006:	2b04      	cmp	r3, #4
 8008008:	f040 809f 	bne.w	800814a <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800800c:	4b59      	ldr	r3, [pc, #356]	; (8008174 <HAL_RCC_GetSysClockFreq+0x188>)
 800800e:	613b      	str	r3, [r7, #16]
      break;
 8008010:	e0a9      	b.n	8008166 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008012:	4b59      	ldr	r3, [pc, #356]	; (8008178 <HAL_RCC_GetSysClockFreq+0x18c>)
 8008014:	613b      	str	r3, [r7, #16]
      break;
 8008016:	e0a6      	b.n	8008166 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	0c9b      	lsrs	r3, r3, #18
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	4a56      	ldr	r2, [pc, #344]	; (800817c <HAL_RCC_GetSysClockFreq+0x190>)
 8008022:	5cd3      	ldrb	r3, [r2, r3]
 8008024:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	0d9b      	lsrs	r3, r3, #22
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	3301      	adds	r3, #1
 8008030:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008032:	4b4f      	ldr	r3, [pc, #316]	; (8008170 <HAL_RCC_GetSysClockFreq+0x184>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d041      	beq.n	80080c2 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	461d      	mov	r5, r3
 8008042:	f04f 0600 	mov.w	r6, #0
 8008046:	4629      	mov	r1, r5
 8008048:	4632      	mov	r2, r6
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	f04f 0400 	mov.w	r4, #0
 8008052:	0154      	lsls	r4, r2, #5
 8008054:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008058:	014b      	lsls	r3, r1, #5
 800805a:	4619      	mov	r1, r3
 800805c:	4622      	mov	r2, r4
 800805e:	1b49      	subs	r1, r1, r5
 8008060:	eb62 0206 	sbc.w	r2, r2, r6
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	f04f 0400 	mov.w	r4, #0
 800806c:	0194      	lsls	r4, r2, #6
 800806e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008072:	018b      	lsls	r3, r1, #6
 8008074:	1a5b      	subs	r3, r3, r1
 8008076:	eb64 0402 	sbc.w	r4, r4, r2
 800807a:	f04f 0100 	mov.w	r1, #0
 800807e:	f04f 0200 	mov.w	r2, #0
 8008082:	00e2      	lsls	r2, r4, #3
 8008084:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008088:	00d9      	lsls	r1, r3, #3
 800808a:	460b      	mov	r3, r1
 800808c:	4614      	mov	r4, r2
 800808e:	195b      	adds	r3, r3, r5
 8008090:	eb44 0406 	adc.w	r4, r4, r6
 8008094:	f04f 0100 	mov.w	r1, #0
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	0262      	lsls	r2, r4, #9
 800809e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80080a2:	0259      	lsls	r1, r3, #9
 80080a4:	460b      	mov	r3, r1
 80080a6:	4614      	mov	r4, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	4621      	mov	r1, r4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f04f 0400 	mov.w	r4, #0
 80080b2:	461a      	mov	r2, r3
 80080b4:	4623      	mov	r3, r4
 80080b6:	f7f8 fd6f 	bl	8000b98 <__aeabi_uldivmod>
 80080ba:	4603      	mov	r3, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	e040      	b.n	8008144 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	461d      	mov	r5, r3
 80080c6:	f04f 0600 	mov.w	r6, #0
 80080ca:	4629      	mov	r1, r5
 80080cc:	4632      	mov	r2, r6
 80080ce:	f04f 0300 	mov.w	r3, #0
 80080d2:	f04f 0400 	mov.w	r4, #0
 80080d6:	0154      	lsls	r4, r2, #5
 80080d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80080dc:	014b      	lsls	r3, r1, #5
 80080de:	4619      	mov	r1, r3
 80080e0:	4622      	mov	r2, r4
 80080e2:	1b49      	subs	r1, r1, r5
 80080e4:	eb62 0206 	sbc.w	r2, r2, r6
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	f04f 0400 	mov.w	r4, #0
 80080f0:	0194      	lsls	r4, r2, #6
 80080f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80080f6:	018b      	lsls	r3, r1, #6
 80080f8:	1a5b      	subs	r3, r3, r1
 80080fa:	eb64 0402 	sbc.w	r4, r4, r2
 80080fe:	f04f 0100 	mov.w	r1, #0
 8008102:	f04f 0200 	mov.w	r2, #0
 8008106:	00e2      	lsls	r2, r4, #3
 8008108:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800810c:	00d9      	lsls	r1, r3, #3
 800810e:	460b      	mov	r3, r1
 8008110:	4614      	mov	r4, r2
 8008112:	195b      	adds	r3, r3, r5
 8008114:	eb44 0406 	adc.w	r4, r4, r6
 8008118:	f04f 0100 	mov.w	r1, #0
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	02a2      	lsls	r2, r4, #10
 8008122:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008126:	0299      	lsls	r1, r3, #10
 8008128:	460b      	mov	r3, r1
 800812a:	4614      	mov	r4, r2
 800812c:	4618      	mov	r0, r3
 800812e:	4621      	mov	r1, r4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f04f 0400 	mov.w	r4, #0
 8008136:	461a      	mov	r2, r3
 8008138:	4623      	mov	r3, r4
 800813a:	f7f8 fd2d 	bl	8000b98 <__aeabi_uldivmod>
 800813e:	4603      	mov	r3, r0
 8008140:	460c      	mov	r4, r1
 8008142:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	613b      	str	r3, [r7, #16]
      break;
 8008148:	e00d      	b.n	8008166 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <HAL_RCC_GetSysClockFreq+0x184>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	0b5b      	lsrs	r3, r3, #13
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	3301      	adds	r3, #1
 800815a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	613b      	str	r3, [r7, #16]
      break;
 8008164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008166:	693b      	ldr	r3, [r7, #16]
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008170:	40023800 	.word	0x40023800
 8008174:	00f42400 	.word	0x00f42400
 8008178:	007a1200 	.word	0x007a1200
 800817c:	080169c4 	.word	0x080169c4

08008180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008184:	4b02      	ldr	r3, [pc, #8]	; (8008190 <HAL_RCC_GetHCLKFreq+0x10>)
 8008186:	681b      	ldr	r3, [r3, #0]
}
 8008188:	4618      	mov	r0, r3
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr
 8008190:	20000000 	.word	0x20000000

08008194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008198:	f7ff fff2 	bl	8008180 <HAL_RCC_GetHCLKFreq>
 800819c:	4601      	mov	r1, r0
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	4a03      	ldr	r2, [pc, #12]	; (80081b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081aa:	5cd3      	ldrb	r3, [r2, r3]
 80081ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40023800 	.word	0x40023800
 80081b8:	080169e0 	.word	0x080169e0

080081bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081c0:	f7ff ffde 	bl	8008180 <HAL_RCC_GetHCLKFreq>
 80081c4:	4601      	mov	r1, r0
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	0adb      	lsrs	r3, r3, #11
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	4a03      	ldr	r2, [pc, #12]	; (80081e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081d2:	5cd3      	ldrb	r3, [r2, r3]
 80081d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80081d8:	4618      	mov	r0, r3
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40023800 	.word	0x40023800
 80081e0:	080169e0 	.word	0x080169e0

080081e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	220f      	movs	r2, #15
 80081f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80081f4:	4b11      	ldr	r3, [pc, #68]	; (800823c <HAL_RCC_GetClockConfig+0x58>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 0203 	and.w	r2, r3, #3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008200:	4b0e      	ldr	r3, [pc, #56]	; (800823c <HAL_RCC_GetClockConfig+0x58>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_RCC_GetClockConfig+0x58>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008218:	4b08      	ldr	r3, [pc, #32]	; (800823c <HAL_RCC_GetClockConfig+0x58>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	08db      	lsrs	r3, r3, #3
 800821e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008226:	4b06      	ldr	r3, [pc, #24]	; (8008240 <HAL_RCC_GetClockConfig+0x5c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0201 	and.w	r2, r3, #1
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	601a      	str	r2, [r3, #0]
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr
 800823c:	40023800 	.word	0x40023800
 8008240:	40023c00 	.word	0x40023c00

08008244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800824c:	2300      	movs	r3, #0
 800824e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008250:	4b29      	ldr	r3, [pc, #164]	; (80082f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d12c      	bne.n	80082b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800825c:	4b26      	ldr	r3, [pc, #152]	; (80082f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008268:	4b24      	ldr	r3, [pc, #144]	; (80082fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	e016      	b.n	80082a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008274:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800827a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800827e:	6253      	str	r3, [r2, #36]	; 0x24
 8008280:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800828c:	4b1b      	ldr	r3, [pc, #108]	; (80082fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008294:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8008296:	4b18      	ldr	r3, [pc, #96]	; (80082f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800829c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082a0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80082a8:	d105      	bne.n	80082b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082b0:	d101      	bne.n	80082b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80082b2:	2301      	movs	r3, #1
 80082b4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d105      	bne.n	80082c8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a0f      	ldr	r2, [pc, #60]	; (8008300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082c2:	f043 0304 	orr.w	r3, r3, #4
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	4b0d      	ldr	r3, [pc, #52]	; (8008300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f023 0201 	bic.w	r2, r3, #1
 80082d0:	490b      	ldr	r1, [pc, #44]	; (8008300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80082d8:	4b09      	ldr	r3, [pc, #36]	; (8008300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d001      	beq.n	80082ea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40023800 	.word	0x40023800
 80082fc:	40007000 	.word	0x40007000
 8008300:	40023c00 	.word	0x40023c00

08008304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e07b      	b.n	800840e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d108      	bne.n	8008330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008326:	d009      	beq.n	800833c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	61da      	str	r2, [r3, #28]
 800832e:	e005      	b.n	800833c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fa faac 	bl	80028b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008372:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	ea42 0103 	orr.w	r1, r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	0c1b      	lsrs	r3, r3, #16
 80083da:	f003 0104 	and.w	r1, r3, #4
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	f003 0210 	and.w	r2, r3, #16
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69da      	ldr	r2, [r3, #28]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b088      	sub	sp, #32
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_SPI_Transmit+0x22>
 8008434:	2302      	movs	r3, #2
 8008436:	e126      	b.n	8008686 <HAL_SPI_Transmit+0x270>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008440:	f7fc fa3a 	bl	80048b8 <HAL_GetTick>
 8008444:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b01      	cmp	r3, #1
 8008454:	d002      	beq.n	800845c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008456:	2302      	movs	r3, #2
 8008458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800845a:	e10b      	b.n	8008674 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_SPI_Transmit+0x52>
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d102      	bne.n	800846e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800846c:	e102      	b.n	8008674 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2203      	movs	r2, #3
 8008472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	88fa      	ldrh	r2, [r7, #6]
 8008486:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b4:	d10f      	bne.n	80084d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e0:	2b40      	cmp	r3, #64	; 0x40
 80084e2:	d007      	beq.n	80084f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084fc:	d14b      	bne.n	8008596 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_SPI_Transmit+0xf6>
 8008506:	8afb      	ldrh	r3, [r7, #22]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d13e      	bne.n	800858a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	881a      	ldrh	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851c:	1c9a      	adds	r2, r3, #2
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008530:	e02b      	b.n	800858a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b02      	cmp	r3, #2
 800853e:	d112      	bne.n	8008566 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	881a      	ldrh	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	1c9a      	adds	r2, r3, #2
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	86da      	strh	r2, [r3, #54]	; 0x36
 8008564:	e011      	b.n	800858a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008566:	f7fc f9a7 	bl	80048b8 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d803      	bhi.n	800857e <HAL_SPI_Transmit+0x168>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857c:	d102      	bne.n	8008584 <HAL_SPI_Transmit+0x16e>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d102      	bne.n	800858a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008588:	e074      	b.n	8008674 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800858e:	b29b      	uxth	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1ce      	bne.n	8008532 <HAL_SPI_Transmit+0x11c>
 8008594:	e04c      	b.n	8008630 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_SPI_Transmit+0x18e>
 800859e:	8afb      	ldrh	r3, [r7, #22]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d140      	bne.n	8008626 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80085ca:	e02c      	b.n	8008626 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d113      	bne.n	8008602 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	330c      	adds	r3, #12
 80085e4:	7812      	ldrb	r2, [r2, #0]
 80085e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8008600:	e011      	b.n	8008626 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008602:	f7fc f959 	bl	80048b8 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d803      	bhi.n	800861a <HAL_SPI_Transmit+0x204>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d102      	bne.n	8008620 <HAL_SPI_Transmit+0x20a>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008624:	e026      	b.n	8008674 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1cd      	bne.n	80085cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 f8b3 	bl	80087a0 <SPI_EndRxTxTransaction>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800864e:	2300      	movs	r3, #0
 8008650:	613b      	str	r3, [r7, #16]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	77fb      	strb	r3, [r7, #31]
 8008670:	e000      	b.n	8008674 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008672:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008684:	7ffb      	ldrb	r3, [r7, #31]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	4613      	mov	r3, r2
 800869e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086a0:	f7fc f90a 	bl	80048b8 <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	1a9b      	subs	r3, r3, r2
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4413      	add	r3, r2
 80086ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086b0:	f7fc f902 	bl	80048b8 <HAL_GetTick>
 80086b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086b6:	4b39      	ldr	r3, [pc, #228]	; (800879c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	015b      	lsls	r3, r3, #5
 80086bc:	0d1b      	lsrs	r3, r3, #20
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086c6:	e054      	b.n	8008772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ce:	d050      	beq.n	8008772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086d0:	f7fc f8f2 	bl	80048b8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d902      	bls.n	80086e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d13d      	bne.n	8008762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086fe:	d111      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008708:	d004      	beq.n	8008714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008712:	d107      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800872c:	d10f      	bne.n	800874e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800874c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e017      	b.n	8008792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	3b01      	subs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4013      	ands	r3, r2
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	429a      	cmp	r2, r3
 8008780:	bf0c      	ite	eq
 8008782:	2301      	moveq	r3, #1
 8008784:	2300      	movne	r3, #0
 8008786:	b2db      	uxtb	r3, r3
 8008788:	461a      	mov	r2, r3
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	429a      	cmp	r2, r3
 800878e:	d19b      	bne.n	80086c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3720      	adds	r7, #32
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000000 	.word	0x20000000

080087a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b088      	sub	sp, #32
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087ac:	4b1b      	ldr	r3, [pc, #108]	; (800881c <SPI_EndRxTxTransaction+0x7c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1b      	ldr	r2, [pc, #108]	; (8008820 <SPI_EndRxTxTransaction+0x80>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	0d5b      	lsrs	r3, r3, #21
 80087b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087bc:	fb02 f303 	mul.w	r3, r2, r3
 80087c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ca:	d112      	bne.n	80087f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2200      	movs	r2, #0
 80087d4:	2180      	movs	r1, #128	; 0x80
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff ff5a 	bl	8008690 <SPI_WaitFlagStateUntilTimeout>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	f043 0220 	orr.w	r2, r3, #32
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e00f      	b.n	8008812 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008808:	2b80      	cmp	r3, #128	; 0x80
 800880a:	d0f2      	beq.n	80087f2 <SPI_EndRxTxTransaction+0x52>
 800880c:	e000      	b.n	8008810 <SPI_EndRxTxTransaction+0x70>
        break;
 800880e:	bf00      	nop
  }

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000000 	.word	0x20000000
 8008820:	165e9f81 	.word	0x165e9f81

08008824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e031      	b.n	800889a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fa fad2 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f000 fe8c 	bl	8009580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d001      	beq.n	80088bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e032      	b.n	8008922 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088cc:	d00e      	beq.n	80088ec <HAL_TIM_Base_Start+0x48>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a16      	ldr	r2, [pc, #88]	; (800892c <HAL_TIM_Base_Start+0x88>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d009      	beq.n	80088ec <HAL_TIM_Base_Start+0x48>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a14      	ldr	r2, [pc, #80]	; (8008930 <HAL_TIM_Base_Start+0x8c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d004      	beq.n	80088ec <HAL_TIM_Base_Start+0x48>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a13      	ldr	r2, [pc, #76]	; (8008934 <HAL_TIM_Base_Start+0x90>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d111      	bne.n	8008910 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b06      	cmp	r3, #6
 80088fc:	d010      	beq.n	8008920 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f042 0201 	orr.w	r2, r2, #1
 800890c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890e:	e007      	b.n	8008920 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0201 	orr.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	bc80      	pop	{r7}
 800892a:	4770      	bx	lr
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40010800 	.word	0x40010800

08008938 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6a1a      	ldr	r2, [r3, #32]
 8008946:	f241 1311 	movw	r3, #4369	; 0x1111
 800894a:	4013      	ands	r3, r2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d107      	bne.n	8008960 <HAL_TIM_Base_Stop+0x28>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	d001      	beq.n	800898c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e03a      	b.n	8008a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0201 	orr.w	r2, r2, #1
 80089a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ac:	d00e      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x58>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a16      	ldr	r2, [pc, #88]	; (8008a0c <HAL_TIM_Base_Start_IT+0x98>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d009      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x58>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a14      	ldr	r2, [pc, #80]	; (8008a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d004      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x58>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a13      	ldr	r2, [pc, #76]	; (8008a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d111      	bne.n	80089f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b06      	cmp	r3, #6
 80089dc:	d010      	beq.n	8008a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f042 0201 	orr.w	r2, r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ee:	e007      	b.n	8008a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0201 	orr.w	r2, r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr
 8008a0c:	40000400 	.word	0x40000400
 8008a10:	40000800 	.word	0x40000800
 8008a14:	40010800 	.word	0x40010800

08008a18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0201 	bic.w	r2, r2, #1
 8008a2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d107      	bne.n	8008a50 <HAL_TIM_Base_Stop_IT+0x38>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0201 	bic.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr

08008a64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e031      	b.n	8008ada <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f829 	bl	8008ae2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f000 fd6c 	bl	8009580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d109      	bne.n	8008b18 <HAL_TIM_PWM_Start+0x24>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	bf14      	ite	ne
 8008b10:	2301      	movne	r3, #1
 8008b12:	2300      	moveq	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	e022      	b.n	8008b5e <HAL_TIM_PWM_Start+0x6a>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d109      	bne.n	8008b32 <HAL_TIM_PWM_Start+0x3e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	bf14      	ite	ne
 8008b2a:	2301      	movne	r3, #1
 8008b2c:	2300      	moveq	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	e015      	b.n	8008b5e <HAL_TIM_PWM_Start+0x6a>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d109      	bne.n	8008b4c <HAL_TIM_PWM_Start+0x58>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	bf14      	ite	ne
 8008b44:	2301      	movne	r3, #1
 8008b46:	2300      	moveq	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	e008      	b.n	8008b5e <HAL_TIM_PWM_Start+0x6a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	bf14      	ite	ne
 8008b58:	2301      	movne	r3, #1
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e051      	b.n	8008c0a <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <HAL_TIM_PWM_Start+0x82>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008b74:	e013      	b.n	8008b9e <HAL_TIM_PWM_Start+0xaa>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_PWM_Start+0x92>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008b84:	e00b      	b.n	8008b9e <HAL_TIM_PWM_Start+0xaa>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_PWM_Start+0xa2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b94:	e003      	b.n	8008b9e <HAL_TIM_PWM_Start+0xaa>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fff9 	bl	8009b9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb4:	d00e      	beq.n	8008bd4 <HAL_TIM_PWM_Start+0xe0>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a16      	ldr	r2, [pc, #88]	; (8008c14 <HAL_TIM_PWM_Start+0x120>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d009      	beq.n	8008bd4 <HAL_TIM_PWM_Start+0xe0>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a14      	ldr	r2, [pc, #80]	; (8008c18 <HAL_TIM_PWM_Start+0x124>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d004      	beq.n	8008bd4 <HAL_TIM_PWM_Start+0xe0>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a13      	ldr	r2, [pc, #76]	; (8008c1c <HAL_TIM_PWM_Start+0x128>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d111      	bne.n	8008bf8 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b06      	cmp	r3, #6
 8008be4:	d010      	beq.n	8008c08 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f042 0201 	orr.w	r2, r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf6:	e007      	b.n	8008c08 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40000400 	.word	0x40000400
 8008c18:	40000800 	.word	0x40000800
 8008c1c:	40010800 	.word	0x40010800

08008c20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e031      	b.n	8008c96 <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d106      	bne.n	8008c4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f829 	bl	8008c9e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f000 fc8e 	bl	8009580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <HAL_TIM_IC_Start_IT+0x1a>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	e013      	b.n	8008cf2 <HAL_TIM_IC_Start_IT+0x42>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d104      	bne.n	8008cda <HAL_TIM_IC_Start_IT+0x2a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	e00b      	b.n	8008cf2 <HAL_TIM_IC_Start_IT+0x42>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b08      	cmp	r3, #8
 8008cde:	d104      	bne.n	8008cea <HAL_TIM_IC_Start_IT+0x3a>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	e003      	b.n	8008cf2 <HAL_TIM_IC_Start_IT+0x42>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d001      	beq.n	8008cfe <HAL_TIM_IC_Start_IT+0x4e>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e097      	b.n	8008e2e <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d104      	bne.n	8008d0e <HAL_TIM_IC_Start_IT+0x5e>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008d0c:	e013      	b.n	8008d36 <HAL_TIM_IC_Start_IT+0x86>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d104      	bne.n	8008d1e <HAL_TIM_IC_Start_IT+0x6e>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008d1c:	e00b      	b.n	8008d36 <HAL_TIM_IC_Start_IT+0x86>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d104      	bne.n	8008d2e <HAL_TIM_IC_Start_IT+0x7e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d2c:	e003      	b.n	8008d36 <HAL_TIM_IC_Start_IT+0x86>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2202      	movs	r2, #2
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b0c      	cmp	r3, #12
 8008d3a:	d841      	bhi.n	8008dc0 <HAL_TIM_IC_Start_IT+0x110>
 8008d3c:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <HAL_TIM_IC_Start_IT+0x94>)
 8008d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d42:	bf00      	nop
 8008d44:	08008d79 	.word	0x08008d79
 8008d48:	08008dc1 	.word	0x08008dc1
 8008d4c:	08008dc1 	.word	0x08008dc1
 8008d50:	08008dc1 	.word	0x08008dc1
 8008d54:	08008d8b 	.word	0x08008d8b
 8008d58:	08008dc1 	.word	0x08008dc1
 8008d5c:	08008dc1 	.word	0x08008dc1
 8008d60:	08008dc1 	.word	0x08008dc1
 8008d64:	08008d9d 	.word	0x08008d9d
 8008d68:	08008dc1 	.word	0x08008dc1
 8008d6c:	08008dc1 	.word	0x08008dc1
 8008d70:	08008dc1 	.word	0x08008dc1
 8008d74:	08008daf 	.word	0x08008daf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0202 	orr.w	r2, r2, #2
 8008d86:	60da      	str	r2, [r3, #12]
      break;
 8008d88:	e01b      	b.n	8008dc2 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f042 0204 	orr.w	r2, r2, #4
 8008d98:	60da      	str	r2, [r3, #12]
      break;
 8008d9a:	e012      	b.n	8008dc2 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0208 	orr.w	r2, r2, #8
 8008daa:	60da      	str	r2, [r3, #12]
      break;
 8008dac:	e009      	b.n	8008dc2 <HAL_TIM_IC_Start_IT+0x112>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0210 	orr.w	r2, r2, #16
 8008dbc:	60da      	str	r2, [r3, #12]
      break;
 8008dbe:	e000      	b.n	8008dc2 <HAL_TIM_IC_Start_IT+0x112>
    }

    default:
      break;
 8008dc0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fee7 	bl	8009b9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd8:	d00e      	beq.n	8008df8 <HAL_TIM_IC_Start_IT+0x148>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a16      	ldr	r2, [pc, #88]	; (8008e38 <HAL_TIM_IC_Start_IT+0x188>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d009      	beq.n	8008df8 <HAL_TIM_IC_Start_IT+0x148>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a14      	ldr	r2, [pc, #80]	; (8008e3c <HAL_TIM_IC_Start_IT+0x18c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d004      	beq.n	8008df8 <HAL_TIM_IC_Start_IT+0x148>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a13      	ldr	r2, [pc, #76]	; (8008e40 <HAL_TIM_IC_Start_IT+0x190>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d111      	bne.n	8008e1c <HAL_TIM_IC_Start_IT+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 0307 	and.w	r3, r3, #7
 8008e02:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b06      	cmp	r3, #6
 8008e08:	d010      	beq.n	8008e2c <HAL_TIM_IC_Start_IT+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0201 	orr.w	r2, r2, #1
 8008e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e1a:	e007      	b.n	8008e2c <HAL_TIM_IC_Start_IT+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0201 	orr.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40000400 	.word	0x40000400
 8008e3c:	40000800 	.word	0x40000800
 8008e40:	40010800 	.word	0x40010800

08008e44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e08f      	b.n	8008f78 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d106      	bne.n	8008e72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7f9 ff9b 	bl	8002da8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e88:	f023 0307 	bic.w	r3, r3, #7
 8008e8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4619      	mov	r1, r3
 8008e98:	4610      	mov	r0, r2
 8008e9a:	f000 fb71 	bl	8009580 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ee4:	f023 030c 	bic.w	r3, r3, #12
 8008ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	021b      	lsls	r3, r3, #8
 8008f00:	4313      	orrs	r3, r2
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	011a      	lsls	r2, r3, #4
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	031b      	lsls	r3, r3, #12
 8008f14:	4313      	orrs	r3, r2
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008f2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	4313      	orrs	r3, r2
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d122      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d11b      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0202 	mvn.w	r2, #2
 8008fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fa fb70 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 8008fc8:	e005      	b.n	8008fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fabd 	bl	800954a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fac3 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d122      	bne.n	8009030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d11b      	bne.n	8009030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0204 	mvn.w	r2, #4
 8009000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fa fb46 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa93 	bl	800954a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fa99 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0308 	and.w	r3, r3, #8
 800903a:	2b08      	cmp	r3, #8
 800903c:	d122      	bne.n	8009084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0308 	and.w	r3, r3, #8
 8009048:	2b08      	cmp	r3, #8
 800904a:	d11b      	bne.n	8009084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0208 	mvn.w	r2, #8
 8009054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2204      	movs	r2, #4
 800905a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7fa fb1c 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 8009070:	e005      	b.n	800907e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fa69 	bl	800954a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa6f 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0310 	and.w	r3, r3, #16
 800908e:	2b10      	cmp	r3, #16
 8009090:	d122      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0310 	and.w	r3, r3, #16
 800909c:	2b10      	cmp	r3, #16
 800909e:	d11b      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0210 	mvn.w	r2, #16
 80090a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2208      	movs	r2, #8
 80090ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fa faf2 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 80090c4:	e005      	b.n	80090d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa3f 	bl	800954a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa45 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d10e      	bne.n	8009104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d107      	bne.n	8009104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f06f 0201 	mvn.w	r2, #1
 80090fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fa faa8 	bl	8003654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910e:	2b40      	cmp	r3, #64	; 0x40
 8009110:	d10e      	bne.n	8009130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b40      	cmp	r3, #64	; 0x40
 800911e:	d107      	bne.n	8009130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa1f 	bl	800956e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800914a:	2b01      	cmp	r3, #1
 800914c:	d101      	bne.n	8009152 <HAL_TIM_IC_ConfigChannel+0x1a>
 800914e:	2302      	movs	r3, #2
 8009150:	e082      	b.n	8009258 <HAL_TIM_IC_ConfigChannel+0x120>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11b      	bne.n	8009198 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6819      	ldr	r1, [r3, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f000 fb6c 	bl	800984c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	699a      	ldr	r2, [r3, #24]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 020c 	bic.w	r2, r2, #12
 8009182:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6999      	ldr	r1, [r3, #24]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	619a      	str	r2, [r3, #24]
 8009196:	e05a      	b.n	800924e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b04      	cmp	r3, #4
 800919c:	d11c      	bne.n	80091d8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6819      	ldr	r1, [r3, #0]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f000 fbdb 	bl	8009968 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	699a      	ldr	r2, [r3, #24]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80091c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6999      	ldr	r1, [r3, #24]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	021a      	lsls	r2, r3, #8
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	619a      	str	r2, [r3, #24]
 80091d6:	e03a      	b.n	800924e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d11b      	bne.n	8009216 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6819      	ldr	r1, [r3, #0]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f000 fc26 	bl	8009a3e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 020c 	bic.w	r2, r2, #12
 8009200:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69d9      	ldr	r1, [r3, #28]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	61da      	str	r2, [r3, #28]
 8009214:	e01b      	b.n	800924e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6819      	ldr	r1, [r3, #0]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f000 fc45 	bl	8009ab4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69da      	ldr	r2, [r3, #28]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009238:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69d9      	ldr	r1, [r3, #28]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	021a      	lsls	r2, r3, #8
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009272:	2b01      	cmp	r3, #1
 8009274:	d101      	bne.n	800927a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009276:	2302      	movs	r3, #2
 8009278:	e0ac      	b.n	80093d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b0c      	cmp	r3, #12
 8009286:	f200 809f 	bhi.w	80093c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800928a:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800928c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009290:	080092c5 	.word	0x080092c5
 8009294:	080093c9 	.word	0x080093c9
 8009298:	080093c9 	.word	0x080093c9
 800929c:	080093c9 	.word	0x080093c9
 80092a0:	08009305 	.word	0x08009305
 80092a4:	080093c9 	.word	0x080093c9
 80092a8:	080093c9 	.word	0x080093c9
 80092ac:	080093c9 	.word	0x080093c9
 80092b0:	08009347 	.word	0x08009347
 80092b4:	080093c9 	.word	0x080093c9
 80092b8:	080093c9 	.word	0x080093c9
 80092bc:	080093c9 	.word	0x080093c9
 80092c0:	08009387 	.word	0x08009387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f9c8 	bl	8009660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 0208 	orr.w	r2, r2, #8
 80092de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699a      	ldr	r2, [r3, #24]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0204 	bic.w	r2, r2, #4
 80092ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6999      	ldr	r1, [r3, #24]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	619a      	str	r2, [r3, #24]
      break;
 8009302:	e062      	b.n	80093ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f9e4 	bl	80096d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699a      	ldr	r2, [r3, #24]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800931e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800932e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6999      	ldr	r1, [r3, #24]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	021a      	lsls	r2, r3, #8
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	619a      	str	r2, [r3, #24]
      break;
 8009344:	e041      	b.n	80093ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fa01 	bl	8009754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0208 	orr.w	r2, r2, #8
 8009360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0204 	bic.w	r2, r2, #4
 8009370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69d9      	ldr	r1, [r3, #28]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	430a      	orrs	r2, r1
 8009382:	61da      	str	r2, [r3, #28]
      break;
 8009384:	e021      	b.n	80093ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fa1e 	bl	80097ce <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69da      	ldr	r2, [r3, #28]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	69da      	ldr	r2, [r3, #28]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69d9      	ldr	r1, [r3, #28]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	021a      	lsls	r2, r3, #8
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	61da      	str	r2, [r3, #28]
      break;
 80093c6:	e000      	b.n	80093ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80093c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_TIM_ConfigClockSource+0x18>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e0a6      	b.n	8009542 <HAL_TIM_ConfigClockSource+0x166>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009412:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800941a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d067      	beq.n	80094fc <HAL_TIM_ConfigClockSource+0x120>
 800942c:	2b40      	cmp	r3, #64	; 0x40
 800942e:	d80b      	bhi.n	8009448 <HAL_TIM_ConfigClockSource+0x6c>
 8009430:	2b10      	cmp	r3, #16
 8009432:	d073      	beq.n	800951c <HAL_TIM_ConfigClockSource+0x140>
 8009434:	2b10      	cmp	r3, #16
 8009436:	d802      	bhi.n	800943e <HAL_TIM_ConfigClockSource+0x62>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d06f      	beq.n	800951c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800943c:	e078      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800943e:	2b20      	cmp	r3, #32
 8009440:	d06c      	beq.n	800951c <HAL_TIM_ConfigClockSource+0x140>
 8009442:	2b30      	cmp	r3, #48	; 0x30
 8009444:	d06a      	beq.n	800951c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009446:	e073      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009448:	2b70      	cmp	r3, #112	; 0x70
 800944a:	d00d      	beq.n	8009468 <HAL_TIM_ConfigClockSource+0x8c>
 800944c:	2b70      	cmp	r3, #112	; 0x70
 800944e:	d804      	bhi.n	800945a <HAL_TIM_ConfigClockSource+0x7e>
 8009450:	2b50      	cmp	r3, #80	; 0x50
 8009452:	d033      	beq.n	80094bc <HAL_TIM_ConfigClockSource+0xe0>
 8009454:	2b60      	cmp	r3, #96	; 0x60
 8009456:	d041      	beq.n	80094dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009458:	e06a      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800945a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945e:	d066      	beq.n	800952e <HAL_TIM_ConfigClockSource+0x152>
 8009460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009464:	d017      	beq.n	8009496 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009466:	e063      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	6899      	ldr	r1, [r3, #8]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f000 fb72 	bl	8009b60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800948a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	609a      	str	r2, [r3, #8]
      break;
 8009494:	e04c      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6899      	ldr	r1, [r3, #8]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f000 fb5b 	bl	8009b60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094b8:	609a      	str	r2, [r3, #8]
      break;
 80094ba:	e039      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	6859      	ldr	r1, [r3, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	461a      	mov	r2, r3
 80094ca:	f000 fa1f 	bl	800990c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2150      	movs	r1, #80	; 0x50
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fb29 	bl	8009b2c <TIM_ITRx_SetConfig>
      break;
 80094da:	e029      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	6859      	ldr	r1, [r3, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	461a      	mov	r2, r3
 80094ea:	f000 fa79 	bl	80099e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2160      	movs	r1, #96	; 0x60
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fb19 	bl	8009b2c <TIM_ITRx_SetConfig>
      break;
 80094fa:	e019      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	6859      	ldr	r1, [r3, #4]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	461a      	mov	r2, r3
 800950a:	f000 f9ff 	bl	800990c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2140      	movs	r1, #64	; 0x40
 8009514:	4618      	mov	r0, r3
 8009516:	f000 fb09 	bl	8009b2c <TIM_ITRx_SetConfig>
      break;
 800951a:	e009      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f000 fb00 	bl	8009b2c <TIM_ITRx_SetConfig>
        break;
 800952c:	e000      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800952e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009552:	bf00      	nop
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr

0800955c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr

0800956e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009596:	d00f      	beq.n	80095b8 <TIM_Base_SetConfig+0x38>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a2b      	ldr	r2, [pc, #172]	; (8009648 <TIM_Base_SetConfig+0xc8>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00b      	beq.n	80095b8 <TIM_Base_SetConfig+0x38>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a2a      	ldr	r2, [pc, #168]	; (800964c <TIM_Base_SetConfig+0xcc>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d007      	beq.n	80095b8 <TIM_Base_SetConfig+0x38>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a29      	ldr	r2, [pc, #164]	; (8009650 <TIM_Base_SetConfig+0xd0>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_Base_SetConfig+0x38>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a28      	ldr	r2, [pc, #160]	; (8009654 <TIM_Base_SetConfig+0xd4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d108      	bne.n	80095ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d0:	d017      	beq.n	8009602 <TIM_Base_SetConfig+0x82>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1c      	ldr	r2, [pc, #112]	; (8009648 <TIM_Base_SetConfig+0xc8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d013      	beq.n	8009602 <TIM_Base_SetConfig+0x82>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a1b      	ldr	r2, [pc, #108]	; (800964c <TIM_Base_SetConfig+0xcc>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d00f      	beq.n	8009602 <TIM_Base_SetConfig+0x82>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a1a      	ldr	r2, [pc, #104]	; (8009650 <TIM_Base_SetConfig+0xd0>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00b      	beq.n	8009602 <TIM_Base_SetConfig+0x82>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a19      	ldr	r2, [pc, #100]	; (8009654 <TIM_Base_SetConfig+0xd4>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d007      	beq.n	8009602 <TIM_Base_SetConfig+0x82>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a18      	ldr	r2, [pc, #96]	; (8009658 <TIM_Base_SetConfig+0xd8>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d003      	beq.n	8009602 <TIM_Base_SetConfig+0x82>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a17      	ldr	r2, [pc, #92]	; (800965c <TIM_Base_SetConfig+0xdc>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d108      	bne.n	8009614 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	615a      	str	r2, [r3, #20]
}
 800963e:	bf00      	nop
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr
 8009648:	40000400 	.word	0x40000400
 800964c:	40000800 	.word	0x40000800
 8009650:	40000c00 	.word	0x40000c00
 8009654:	40010800 	.word	0x40010800
 8009658:	40010c00 	.word	0x40010c00
 800965c:	40011000 	.word	0x40011000

08009660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f023 0201 	bic.w	r2, r3, #1
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	4313      	orrs	r3, r2
 80096a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f023 0302 	bic.w	r3, r3, #2
 80096a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	621a      	str	r2, [r3, #32]
}
 80096ce:	bf00      	nop
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f023 0210 	bic.w	r2, r3, #16
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800970e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f023 0320 	bic.w	r3, r3, #32
 8009722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	011b      	lsls	r3, r3, #4
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	4313      	orrs	r3, r2
 800972e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	621a      	str	r2, [r3, #32]
}
 800974a:	bf00      	nop
 800974c:	371c      	adds	r7, #28
 800974e:	46bd      	mov	sp, r7
 8009750:	bc80      	pop	{r7}
 8009752:	4770      	bx	lr

08009754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0303 	bic.w	r3, r3, #3
 800978a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800979c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	621a      	str	r2, [r3, #32]
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bc80      	pop	{r7}
 80097cc:	4770      	bx	lr

080097ce <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b087      	sub	sp, #28
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009804:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	021b      	lsls	r3, r3, #8
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	031b      	lsls	r3, r3, #12
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	4313      	orrs	r3, r2
 8009824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	685a      	ldr	r2, [r3, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	621a      	str	r2, [r3, #32]
}
 8009840:	bf00      	nop
 8009842:	371c      	adds	r7, #28
 8009844:	46bd      	mov	sp, r7
 8009846:	bc80      	pop	{r7}
 8009848:	4770      	bx	lr
	...

0800984c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f023 0201 	bic.w	r2, r3, #1
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009878:	d00f      	beq.n	800989a <TIM_TI1_SetConfig+0x4e>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <TIM_TI1_SetConfig+0xb0>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00b      	beq.n	800989a <TIM_TI1_SetConfig+0x4e>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4a1e      	ldr	r2, [pc, #120]	; (8009900 <TIM_TI1_SetConfig+0xb4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d007      	beq.n	800989a <TIM_TI1_SetConfig+0x4e>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	4a1d      	ldr	r2, [pc, #116]	; (8009904 <TIM_TI1_SetConfig+0xb8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d003      	beq.n	800989a <TIM_TI1_SetConfig+0x4e>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4a1c      	ldr	r2, [pc, #112]	; (8009908 <TIM_TI1_SetConfig+0xbc>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d101      	bne.n	800989e <TIM_TI1_SetConfig+0x52>
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <TIM_TI1_SetConfig+0x54>
 800989e:	2300      	movs	r3, #0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	e003      	b.n	80098be <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f043 0301 	orr.w	r3, r3, #1
 80098bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	011b      	lsls	r3, r3, #4
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f023 030a 	bic.w	r3, r3, #10
 80098d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f003 030a 	and.w	r3, r3, #10
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	621a      	str	r2, [r3, #32]
}
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr
 80098fc:	40000400 	.word	0x40000400
 8009900:	40000800 	.word	0x40000800
 8009904:	40000c00 	.word	0x40000c00
 8009908:	40010800 	.word	0x40010800

0800990c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0201 	bic.w	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f023 030a 	bic.w	r3, r3, #10
 8009948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	621a      	str	r2, [r3, #32]
}
 800995e:	bf00      	nop
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr

08009968 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f023 0210 	bic.w	r2, r3, #16
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	031b      	lsls	r3, r3, #12
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	621a      	str	r2, [r3, #32]
}
 80099d6:	bf00      	nop
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bc80      	pop	{r7}
 80099de:	4770      	bx	lr

080099e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	f023 0210 	bic.w	r2, r3, #16
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	031b      	lsls	r3, r3, #12
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	011b      	lsls	r3, r3, #4
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	621a      	str	r2, [r3, #32]
}
 8009a34:	bf00      	nop
 8009a36:	371c      	adds	r7, #28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bc80      	pop	{r7}
 8009a3c:	4770      	bx	lr

08009a3e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b087      	sub	sp, #28
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f023 0303 	bic.w	r3, r3, #3
 8009a6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	011b      	lsls	r3, r3, #4
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	621a      	str	r2, [r3, #32]
}
 8009aaa:	bf00      	nop
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bc80      	pop	{r7}
 8009ab2:	4770      	bx	lr

08009ab4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009af2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	031b      	lsls	r3, r3, #12
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	031b      	lsls	r3, r3, #12
 8009b0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	621a      	str	r2, [r3, #32]
}
 8009b22:	bf00      	nop
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr

08009b2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	f043 0307 	orr.w	r3, r3, #7
 8009b4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	609a      	str	r2, [r3, #8]
}
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bc80      	pop	{r7}
 8009b5e:	4770      	bx	lr

08009b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	021a      	lsls	r2, r3, #8
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	609a      	str	r2, [r3, #8]
}
 8009b94:	bf00      	nop
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr

08009b9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b087      	sub	sp, #28
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f003 031f 	and.w	r3, r3, #31
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a1a      	ldr	r2, [r3, #32]
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	43db      	mvns	r3, r3
 8009bc0:	401a      	ands	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a1a      	ldr	r2, [r3, #32]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	f003 031f 	and.w	r3, r3, #31
 8009bd0:	6879      	ldr	r1, [r7, #4]
 8009bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	621a      	str	r2, [r3, #32]
}
 8009bdc:	bf00      	nop
 8009bde:	371c      	adds	r7, #28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bc80      	pop	{r7}
 8009be4:	4770      	bx	lr
	...

08009be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e046      	b.n	8009c8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c42:	d00e      	beq.n	8009c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a13      	ldr	r2, [pc, #76]	; (8009c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d009      	beq.n	8009c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a12      	ldr	r2, [pc, #72]	; (8009c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d004      	beq.n	8009c62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a10      	ldr	r2, [pc, #64]	; (8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d10c      	bne.n	8009c7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bc80      	pop	{r7}
 8009c96:	4770      	bx	lr
 8009c98:	40000400 	.word	0x40000400
 8009c9c:	40000800 	.word	0x40000800
 8009ca0:	40010800 	.word	0x40010800

08009ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e03f      	b.n	8009d36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d106      	bne.n	8009cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7f9 fa92 	bl	80031f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2224      	movs	r2, #36	; 0x24
 8009cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fb45 	bl	800a378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691a      	ldr	r2, [r3, #16]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	695a      	ldr	r2, [r3, #20]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b088      	sub	sp, #32
 8009d42:	af02      	add	r7, sp, #8
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	603b      	str	r3, [r7, #0]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	f040 8083 	bne.w	8009e66 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <HAL_UART_Transmit+0x2e>
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e07b      	b.n	8009e68 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <HAL_UART_Transmit+0x40>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e074      	b.n	8009e68 <HAL_UART_Transmit+0x12a>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2221      	movs	r2, #33	; 0x21
 8009d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009d94:	f7fa fd90 	bl	80048b8 <HAL_GetTick>
 8009d98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	88fa      	ldrh	r2, [r7, #6]
 8009d9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	88fa      	ldrh	r2, [r7, #6]
 8009da4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009dae:	e042      	b.n	8009e36 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc6:	d122      	bne.n	8009e0e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2180      	movs	r1, #128	; 0x80
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 f967 	bl	800a0a6 <UART_WaitOnFlagUntilTimeout>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e042      	b.n	8009e68 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009df4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	3302      	adds	r3, #2
 8009e02:	60bb      	str	r3, [r7, #8]
 8009e04:	e017      	b.n	8009e36 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	60bb      	str	r3, [r7, #8]
 8009e0c:	e013      	b.n	8009e36 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2200      	movs	r2, #0
 8009e16:	2180      	movs	r1, #128	; 0x80
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f944 	bl	800a0a6 <UART_WaitOnFlagUntilTimeout>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e01f      	b.n	8009e68 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	60ba      	str	r2, [r7, #8]
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1b7      	bne.n	8009db0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2200      	movs	r2, #0
 8009e48:	2140      	movs	r1, #64	; 0x40
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 f92b 	bl	800a0a6 <UART_WaitOnFlagUntilTimeout>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e006      	b.n	8009e68 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	e000      	b.n	8009e68 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009e66:	2302      	movs	r3, #2
  }
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b088      	sub	sp, #32
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	f003 030f 	and.w	r3, r3, #15
 8009e9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10d      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x52>
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f9db 	bl	800a276 <UART_Receive_IT>
      return;
 8009ec0:	e0d1      	b.n	800a066 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 80b0 	beq.w	800a02a <HAL_UART_IRQHandler+0x1ba>
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <HAL_UART_IRQHandler+0x70>
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 80a5 	beq.w	800a02a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <HAL_UART_IRQHandler+0x90>
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d005      	beq.n	8009f00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef8:	f043 0201 	orr.w	r2, r3, #1
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	f003 0304 	and.w	r3, r3, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <HAL_UART_IRQHandler+0xb0>
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d005      	beq.n	8009f20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f18:	f043 0202 	orr.w	r2, r3, #2
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <HAL_UART_IRQHandler+0xd0>
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d005      	beq.n	8009f40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f38:	f043 0204 	orr.w	r2, r3, #4
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00f      	beq.n	8009f6a <HAL_UART_IRQHandler+0xfa>
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d104      	bne.n	8009f5e <HAL_UART_IRQHandler+0xee>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f62:	f043 0208 	orr.w	r2, r3, #8
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d078      	beq.n	800a064 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d007      	beq.n	8009f8c <HAL_UART_IRQHandler+0x11c>
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	f003 0320 	and.w	r3, r3, #32
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f975 	bl	800a276 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f96:	2b40      	cmp	r3, #64	; 0x40
 8009f98:	bf0c      	ite	eq
 8009f9a:	2301      	moveq	r3, #1
 8009f9c:	2300      	movne	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa6:	f003 0308 	and.w	r3, r3, #8
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <HAL_UART_IRQHandler+0x144>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d031      	beq.n	800a018 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f8c0 	bl	800a13a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc4:	2b40      	cmp	r3, #64	; 0x40
 8009fc6:	d123      	bne.n	800a010 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695a      	ldr	r2, [r3, #20]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fd6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d013      	beq.n	800a008 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe4:	4a21      	ldr	r2, [pc, #132]	; (800a06c <HAL_UART_IRQHandler+0x1fc>)
 8009fe6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fb fc55 	bl	800589c <HAL_DMA_Abort_IT>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d016      	beq.n	800a026 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a002:	4610      	mov	r0, r2
 800a004:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a006:	e00e      	b.n	800a026 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f843 	bl	800a094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a00e:	e00a      	b.n	800a026 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f83f 	bl	800a094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a016:	e006      	b.n	800a026 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f83b 	bl	800a094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a024:	e01e      	b.n	800a064 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a026:	bf00      	nop
    return;
 800a028:	e01c      	b.n	800a064 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a030:	2b00      	cmp	r3, #0
 800a032:	d008      	beq.n	800a046 <HAL_UART_IRQHandler+0x1d6>
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f8ac 	bl	800a19c <UART_Transmit_IT>
    return;
 800a044:	e00f      	b.n	800a066 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <HAL_UART_IRQHandler+0x1f6>
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f8f3 	bl	800a246 <UART_EndTransmit_IT>
    return;
 800a060:	bf00      	nop
 800a062:	e000      	b.n	800a066 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a064:	bf00      	nop
  }
}
 800a066:	3720      	adds	r7, #32
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	0800a175 	.word	0x0800a175

0800a070 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr

0800a082 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr

0800a094 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr

0800a0a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	603b      	str	r3, [r7, #0]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b6:	e02c      	b.n	800a112 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0be:	d028      	beq.n	800a112 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0c6:	f7fa fbf7 	bl	80048b8 <HAL_GetTick>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d21d      	bcs.n	800a112 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695a      	ldr	r2, [r3, #20]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0201 	bic.w	r2, r2, #1
 800a0f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2220      	movs	r2, #32
 800a102:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e00f      	b.n	800a132 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	4013      	ands	r3, r2
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	429a      	cmp	r2, r3
 800a120:	bf0c      	ite	eq
 800a122:	2301      	moveq	r3, #1
 800a124:	2300      	movne	r3, #0
 800a126:	b2db      	uxtb	r3, r3
 800a128:	461a      	mov	r2, r3
 800a12a:	79fb      	ldrb	r3, [r7, #7]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d0c3      	beq.n	800a0b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a150:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	695a      	ldr	r2, [r3, #20]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 0201 	bic.w	r2, r2, #1
 800a160:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2220      	movs	r2, #32
 800a166:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr

0800a174 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f7ff ff80 	bl	800a094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	2b21      	cmp	r3, #33	; 0x21
 800a1ae:	d144      	bne.n	800a23a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b8:	d11a      	bne.n	800a1f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d105      	bne.n	800a1e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	1c9a      	adds	r2, r3, #2
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	621a      	str	r2, [r3, #32]
 800a1e2:	e00e      	b.n	800a202 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	621a      	str	r2, [r3, #32]
 800a1ee:	e008      	b.n	800a202 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	1c59      	adds	r1, r3, #1
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	6211      	str	r1, [r2, #32]
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a206:	b29b      	uxth	r3, r3
 800a208:	3b01      	subs	r3, #1
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	4619      	mov	r1, r3
 800a210:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10f      	bne.n	800a236 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a224:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68da      	ldr	r2, [r3, #12]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a234:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	e000      	b.n	800a23c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a23a:	2302      	movs	r3, #2
  }
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr

0800a246 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b082      	sub	sp, #8
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a25c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff ff02 	bl	800a070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b22      	cmp	r3, #34	; 0x22
 800a288:	d171      	bne.n	800a36e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a292:	d123      	bne.n	800a2dc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a298:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10e      	bne.n	800a2c0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b8:	1c9a      	adds	r2, r3, #2
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	629a      	str	r2, [r3, #40]	; 0x28
 800a2be:	e029      	b.n	800a314 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	629a      	str	r2, [r3, #40]	; 0x28
 800a2da:	e01b      	b.n	800a314 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10a      	bne.n	800a2fa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6858      	ldr	r0, [r3, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	1c59      	adds	r1, r3, #1
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6291      	str	r1, [r2, #40]	; 0x28
 800a2f4:	b2c2      	uxtb	r2, r0
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	e00c      	b.n	800a314 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	b2da      	uxtb	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	1c58      	adds	r0, r3, #1
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	6288      	str	r0, [r1, #40]	; 0x28
 800a30c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a310:	b2d2      	uxtb	r2, r2
 800a312:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a318:	b29b      	uxth	r3, r3
 800a31a:	3b01      	subs	r3, #1
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	4619      	mov	r1, r3
 800a322:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a324:	2b00      	cmp	r3, #0
 800a326:	d120      	bne.n	800a36a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0220 	bic.w	r2, r2, #32
 800a336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68da      	ldr	r2, [r3, #12]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	695a      	ldr	r2, [r3, #20]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 0201 	bic.w	r2, r2, #1
 800a356:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff fe8e 	bl	800a082 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	e002      	b.n	800a370 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e000      	b.n	800a370 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a36e:	2302      	movs	r3, #2
  }
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a3b8:	f023 030c 	bic.w	r3, r3, #12
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	430b      	orrs	r3, r1
 800a3c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699a      	ldr	r2, [r3, #24]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a55      	ldr	r2, [pc, #340]	; (800a538 <UART_SetConfig+0x1c0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d103      	bne.n	800a3ee <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a3e6:	f7fd fee9 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	e002      	b.n	800a3f4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a3ee:	f7fd fed1 	bl	8008194 <HAL_RCC_GetPCLK1Freq>
 800a3f2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3fc:	d14c      	bne.n	800a498 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009a      	lsls	r2, r3, #2
 800a408:	441a      	add	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	fbb2 f3f3 	udiv	r3, r2, r3
 800a414:	4a49      	ldr	r2, [pc, #292]	; (800a53c <UART_SetConfig+0x1c4>)
 800a416:	fba2 2303 	umull	r2, r3, r2, r3
 800a41a:	095b      	lsrs	r3, r3, #5
 800a41c:	0119      	lsls	r1, r3, #4
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	009a      	lsls	r2, r3, #2
 800a428:	441a      	add	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	fbb2 f2f3 	udiv	r2, r2, r3
 800a434:	4b41      	ldr	r3, [pc, #260]	; (800a53c <UART_SetConfig+0x1c4>)
 800a436:	fba3 0302 	umull	r0, r3, r3, r2
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	2064      	movs	r0, #100	; 0x64
 800a43e:	fb00 f303 	mul.w	r3, r0, r3
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	3332      	adds	r3, #50	; 0x32
 800a448:	4a3c      	ldr	r2, [pc, #240]	; (800a53c <UART_SetConfig+0x1c4>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	095b      	lsrs	r3, r3, #5
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a456:	4419      	add	r1, r3
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	009a      	lsls	r2, r3, #2
 800a462:	441a      	add	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a46e:	4b33      	ldr	r3, [pc, #204]	; (800a53c <UART_SetConfig+0x1c4>)
 800a470:	fba3 0302 	umull	r0, r3, r3, r2
 800a474:	095b      	lsrs	r3, r3, #5
 800a476:	2064      	movs	r0, #100	; 0x64
 800a478:	fb00 f303 	mul.w	r3, r0, r3
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	3332      	adds	r3, #50	; 0x32
 800a482:	4a2e      	ldr	r2, [pc, #184]	; (800a53c <UART_SetConfig+0x1c4>)
 800a484:	fba2 2303 	umull	r2, r3, r2, r3
 800a488:	095b      	lsrs	r3, r3, #5
 800a48a:	f003 0207 	and.w	r2, r3, #7
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	440a      	add	r2, r1
 800a494:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a496:	e04a      	b.n	800a52e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	009a      	lsls	r2, r3, #2
 800a4a2:	441a      	add	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ae:	4a23      	ldr	r2, [pc, #140]	; (800a53c <UART_SetConfig+0x1c4>)
 800a4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b4:	095b      	lsrs	r3, r3, #5
 800a4b6:	0119      	lsls	r1, r3, #4
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009a      	lsls	r2, r3, #2
 800a4c2:	441a      	add	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4ce:	4b1b      	ldr	r3, [pc, #108]	; (800a53c <UART_SetConfig+0x1c4>)
 800a4d0:	fba3 0302 	umull	r0, r3, r3, r2
 800a4d4:	095b      	lsrs	r3, r3, #5
 800a4d6:	2064      	movs	r0, #100	; 0x64
 800a4d8:	fb00 f303 	mul.w	r3, r0, r3
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	3332      	adds	r3, #50	; 0x32
 800a4e2:	4a16      	ldr	r2, [pc, #88]	; (800a53c <UART_SetConfig+0x1c4>)
 800a4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e8:	095b      	lsrs	r3, r3, #5
 800a4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4ee:	4419      	add	r1, r3
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	009a      	lsls	r2, r3, #2
 800a4fa:	441a      	add	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	fbb2 f2f3 	udiv	r2, r2, r3
 800a506:	4b0d      	ldr	r3, [pc, #52]	; (800a53c <UART_SetConfig+0x1c4>)
 800a508:	fba3 0302 	umull	r0, r3, r3, r2
 800a50c:	095b      	lsrs	r3, r3, #5
 800a50e:	2064      	movs	r0, #100	; 0x64
 800a510:	fb00 f303 	mul.w	r3, r0, r3
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	3332      	adds	r3, #50	; 0x32
 800a51a:	4a08      	ldr	r2, [pc, #32]	; (800a53c <UART_SetConfig+0x1c4>)
 800a51c:	fba2 2303 	umull	r2, r3, r2, r3
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	f003 020f 	and.w	r2, r3, #15
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	440a      	add	r2, r1
 800a52c:	609a      	str	r2, [r3, #8]
}
 800a52e:	bf00      	nop
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	40013800 	.word	0x40013800
 800a53c:	51eb851f 	.word	0x51eb851f

0800a540 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a550:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a554:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	b29a      	uxth	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	bc80      	pop	{r7}
 800a56a:	4770      	bx	lr

0800a56c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a574:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a578:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a580:	b29a      	uxth	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	b29b      	uxth	r3, r3
 800a586:	43db      	mvns	r3, r3
 800a588:	b29b      	uxth	r3, r3
 800a58a:	4013      	ands	r3, r2
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr

0800a5a0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	f107 0014 	add.w	r0, r7, #20
 800a5ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bc80      	pop	{r7}
 800a5dc:	b004      	add	sp, #16
 800a5de:	4770      	bx	lr

0800a5e0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b09b      	sub	sp, #108	; 0x6c
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a606:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	78db      	ldrb	r3, [r3, #3]
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d81f      	bhi.n	800a652 <USB_ActivateEndpoint+0x72>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <USB_ActivateEndpoint+0x38>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a629 	.word	0x0800a629
 800a61c:	0800a645 	.word	0x0800a645
 800a620:	0800a65b 	.word	0x0800a65b
 800a624:	0800a637 	.word	0x0800a637
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a628:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a62c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a630:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a634:	e012      	b.n	800a65c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a636:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a63a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a63e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a642:	e00b      	b.n	800a65c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a644:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a64c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a650:	e004      	b.n	800a65c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a658:	e000      	b.n	800a65c <USB_ActivateEndpoint+0x7c>
      break;
 800a65a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	441a      	add	r2, r3
 800a666:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a66a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a66e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a694:	b29a      	uxth	r2, r3
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	4313      	orrs	r3, r2
 800a69e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	441a      	add	r2, r3
 800a6ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a6b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	7b1b      	ldrb	r3, [r3, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f040 8149 	bne.w	800a960 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	785b      	ldrb	r3, [r3, #1]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8084 	beq.w	800a7e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	011a      	lsls	r2, r3, #4
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6fa:	613b      	str	r3, [r7, #16]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	88db      	ldrh	r3, [r3, #6]
 800a700:	085b      	lsrs	r3, r3, #1
 800a702:	b29b      	uxth	r3, r3
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	b29a      	uxth	r2, r3
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	81fb      	strh	r3, [r7, #14]
 800a71a:	89fb      	ldrh	r3, [r7, #14]
 800a71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d01b      	beq.n	800a75c <USB_ActivateEndpoint+0x17c>
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	881b      	ldrh	r3, [r3, #0]
 800a730:	b29b      	uxth	r3, r3
 800a732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73a:	81bb      	strh	r3, [r7, #12]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	441a      	add	r2, r3
 800a746:	89bb      	ldrh	r3, [r7, #12]
 800a748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a74c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a758:	b29b      	uxth	r3, r3
 800a75a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	78db      	ldrb	r3, [r3, #3]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d020      	beq.n	800a7a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	b29b      	uxth	r3, r3
 800a772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a77a:	813b      	strh	r3, [r7, #8]
 800a77c:	893b      	ldrh	r3, [r7, #8]
 800a77e:	f083 0320 	eor.w	r3, r3, #32
 800a782:	813b      	strh	r3, [r7, #8]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	441a      	add	r2, r3
 800a78e:	893b      	ldrh	r3, [r7, #8]
 800a790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	8013      	strh	r3, [r2, #0]
 800a7a4:	e27f      	b.n	800aca6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7bc:	817b      	strh	r3, [r7, #10]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	441a      	add	r2, r3
 800a7c8:	897b      	ldrh	r3, [r7, #10]
 800a7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	8013      	strh	r3, [r2, #0]
 800a7de:	e262      	b.n	800aca6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f0:	4413      	add	r3, r2
 800a7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	011a      	lsls	r2, r3, #4
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	88db      	ldrh	r3, [r3, #6]
 800a808:	085b      	lsrs	r3, r3, #1
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	b29a      	uxth	r2, r3
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a81e:	b29b      	uxth	r3, r3
 800a820:	461a      	mov	r2, r3
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	4413      	add	r3, r2
 800a826:	627b      	str	r3, [r7, #36]	; 0x24
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	011a      	lsls	r2, r3, #4
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	4413      	add	r3, r2
 800a832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a836:	623b      	str	r3, [r7, #32]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d112      	bne.n	800a866 <USB_ActivateEndpoint+0x286>
 800a840:	6a3b      	ldr	r3, [r7, #32]
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	b29b      	uxth	r3, r3
 800a846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a85a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a85e:	b29a      	uxth	r2, r3
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	801a      	strh	r2, [r3, #0]
 800a864:	e02f      	b.n	800a8c6 <USB_ActivateEndpoint+0x2e6>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b3e      	cmp	r3, #62	; 0x3e
 800a86c:	d813      	bhi.n	800a896 <USB_ActivateEndpoint+0x2b6>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	085b      	lsrs	r3, r3, #1
 800a874:	663b      	str	r3, [r7, #96]	; 0x60
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d002      	beq.n	800a888 <USB_ActivateEndpoint+0x2a8>
 800a882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a884:	3301      	adds	r3, #1
 800a886:	663b      	str	r3, [r7, #96]	; 0x60
 800a888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	029b      	lsls	r3, r3, #10
 800a88e:	b29a      	uxth	r2, r3
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	801a      	strh	r2, [r3, #0]
 800a894:	e017      	b.n	800a8c6 <USB_ActivateEndpoint+0x2e6>
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	095b      	lsrs	r3, r3, #5
 800a89c:	663b      	str	r3, [r7, #96]	; 0x60
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	f003 031f 	and.w	r3, r3, #31
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <USB_ActivateEndpoint+0x2d0>
 800a8aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	663b      	str	r3, [r7, #96]	; 0x60
 800a8b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	029b      	lsls	r3, r3, #10
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	83fb      	strh	r3, [r7, #30]
 800a8d4:	8bfb      	ldrh	r3, [r7, #30]
 800a8d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d01b      	beq.n	800a916 <USB_ActivateEndpoint+0x336>
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f4:	83bb      	strh	r3, [r7, #28]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	441a      	add	r2, r3
 800a900:	8bbb      	ldrh	r3, [r7, #28]
 800a902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a90a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a90e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a912:	b29b      	uxth	r3, r3
 800a914:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	b29b      	uxth	r3, r3
 800a924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a92c:	837b      	strh	r3, [r7, #26]
 800a92e:	8b7b      	ldrh	r3, [r7, #26]
 800a930:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a934:	837b      	strh	r3, [r7, #26]
 800a936:	8b7b      	ldrh	r3, [r7, #26]
 800a938:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a93c:	837b      	strh	r3, [r7, #26]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	441a      	add	r2, r3
 800a948:	8b7b      	ldrh	r3, [r7, #26]
 800a94a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a94e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	8013      	strh	r3, [r2, #0]
 800a95e:	e1a2      	b.n	800aca6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a976:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	441a      	add	r2, r3
 800a984:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a98c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a990:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a998:	b29b      	uxth	r3, r3
 800a99a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9ac:	4413      	add	r3, r2
 800a9ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	011a      	lsls	r2, r3, #4
 800a9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9be:	657b      	str	r3, [r7, #84]	; 0x54
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	891b      	ldrh	r3, [r3, #8]
 800a9c4:	085b      	lsrs	r3, r3, #1
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ce:	801a      	strh	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	653b      	str	r3, [r7, #80]	; 0x50
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	461a      	mov	r2, r3
 800a9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e0:	4413      	add	r3, r2
 800a9e2:	653b      	str	r3, [r7, #80]	; 0x50
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	011a      	lsls	r2, r3, #4
 800a9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a9f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	895b      	ldrh	r3, [r3, #10]
 800a9f8:	085b      	lsrs	r3, r3, #1
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa02:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	785b      	ldrb	r3, [r3, #1]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f040 8091 	bne.w	800ab30 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800aa1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d01b      	beq.n	800aa5e <USB_ActivateEndpoint+0x47e>
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	441a      	add	r2, r3
 800aa48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d01b      	beq.n	800aaae <USB_ActivateEndpoint+0x4ce>
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	441a      	add	r2, r3
 800aa98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac4:	86bb      	strh	r3, [r7, #52]	; 0x34
 800aac6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aac8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aacc:	86bb      	strh	r3, [r7, #52]	; 0x34
 800aace:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aad0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aad4:	86bb      	strh	r3, [r7, #52]	; 0x34
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	441a      	add	r2, r3
 800aae0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab0c:	867b      	strh	r3, [r7, #50]	; 0x32
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	441a      	add	r2, r3
 800ab18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	8013      	strh	r3, [r2, #0]
 800ab2e:	e0ba      	b.n	800aca6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ab40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01d      	beq.n	800ab88 <USB_ActivateEndpoint+0x5a8>
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	441a      	add	r2, r3
 800ab70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ab74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ab98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01d      	beq.n	800abe0 <USB_ActivateEndpoint+0x600>
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	441a      	add	r2, r3
 800abc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800abcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800abdc:	b29b      	uxth	r3, r3
 800abde:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	78db      	ldrb	r3, [r3, #3]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d024      	beq.n	800ac32 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ac02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac06:	f083 0320 	eor.w	r3, r3, #32
 800ac0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	441a      	add	r2, r3
 800ac18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ac1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	8013      	strh	r3, [r2, #0]
 800ac30:	e01d      	b.n	800ac6e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	441a      	add	r2, r3
 800ac56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	441a      	add	r2, r3
 800ac90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ac92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800aca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800acaa:	4618      	mov	r0, r3
 800acac:	376c      	adds	r7, #108	; 0x6c
 800acae:	46bd      	mov	sp, r7
 800acb0:	bc80      	pop	{r7}
 800acb2:	4770      	bx	lr

0800acb4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b08d      	sub	sp, #52	; 0x34
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	7b1b      	ldrb	r3, [r3, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f040 808e 	bne.w	800ade4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	785b      	ldrb	r3, [r3, #1]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d044      	beq.n	800ad5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	81bb      	strh	r3, [r7, #12]
 800acde:	89bb      	ldrh	r3, [r7, #12]
 800ace0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01b      	beq.n	800ad20 <USB_DeactivateEndpoint+0x6c>
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acfe:	817b      	strh	r3, [r7, #10]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	441a      	add	r2, r3
 800ad0a:	897b      	ldrh	r3, [r7, #10]
 800ad0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad36:	813b      	strh	r3, [r7, #8]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	441a      	add	r2, r3
 800ad42:	893b      	ldrh	r3, [r7, #8]
 800ad44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	8013      	strh	r3, [r2, #0]
 800ad58:	e192      	b.n	800b080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	827b      	strh	r3, [r7, #18]
 800ad68:	8a7b      	ldrh	r3, [r7, #18]
 800ad6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d01b      	beq.n	800adaa <USB_DeactivateEndpoint+0xf6>
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad88:	823b      	strh	r3, [r7, #16]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	441a      	add	r2, r3
 800ad94:	8a3b      	ldrh	r3, [r7, #16]
 800ad96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ada2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adc0:	81fb      	strh	r3, [r7, #14]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	441a      	add	r2, r3
 800adcc:	89fb      	ldrh	r3, [r7, #14]
 800adce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800add2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800add6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adde:	b29b      	uxth	r3, r3
 800ade0:	8013      	strh	r3, [r2, #0]
 800ade2:	e14d      	b.n	800b080 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	785b      	ldrb	r3, [r3, #1]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f040 80a5 	bne.w	800af38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	843b      	strh	r3, [r7, #32]
 800adfc:	8c3b      	ldrh	r3, [r7, #32]
 800adfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01b      	beq.n	800ae3e <USB_DeactivateEndpoint+0x18a>
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae1c:	83fb      	strh	r3, [r7, #30]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	441a      	add	r2, r3
 800ae28:	8bfb      	ldrh	r3, [r7, #30]
 800ae2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	83bb      	strh	r3, [r7, #28]
 800ae4c:	8bbb      	ldrh	r3, [r7, #28]
 800ae4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d01b      	beq.n	800ae8e <USB_DeactivateEndpoint+0x1da>
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae6c:	837b      	strh	r3, [r7, #26]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	441a      	add	r2, r3
 800ae78:	8b7b      	ldrh	r3, [r7, #26]
 800ae7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aea4:	833b      	strh	r3, [r7, #24]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	441a      	add	r2, r3
 800aeb0:	8b3b      	ldrh	r3, [r7, #24]
 800aeb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aedc:	82fb      	strh	r3, [r7, #22]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	441a      	add	r2, r3
 800aee8:	8afb      	ldrh	r3, [r7, #22]
 800aeea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af14:	82bb      	strh	r3, [r7, #20]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	441a      	add	r2, r3
 800af20:	8abb      	ldrh	r3, [r7, #20]
 800af22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af32:	b29b      	uxth	r3, r3
 800af34:	8013      	strh	r3, [r2, #0]
 800af36:	e0a3      	b.n	800b080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01b      	beq.n	800af88 <USB_DeactivateEndpoint+0x2d4>
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	441a      	add	r2, r3
 800af72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af84:	b29b      	uxth	r3, r3
 800af86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	857b      	strh	r3, [r7, #42]	; 0x2a
 800af96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d01b      	beq.n	800afd8 <USB_DeactivateEndpoint+0x324>
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	b29b      	uxth	r3, r3
 800afae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb6:	853b      	strh	r3, [r7, #40]	; 0x28
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	441a      	add	r2, r3
 800afc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	881b      	ldrh	r3, [r3, #0]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afee:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	441a      	add	r2, r3
 800affa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800affc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b026:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	441a      	add	r2, r3
 800b032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b03c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b044:	b29b      	uxth	r3, r3
 800b046:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	b29b      	uxth	r3, r3
 800b056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	441a      	add	r2, r3
 800b06a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b06c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3734      	adds	r7, #52	; 0x34
 800b086:	46bd      	mov	sp, r7
 800b088:	bc80      	pop	{r7}
 800b08a:	4770      	bx	lr

0800b08c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b0c4      	sub	sp, #272	; 0x110
 800b090:	af00      	add	r7, sp, #0
 800b092:	1d3b      	adds	r3, r7, #4
 800b094:	6018      	str	r0, [r3, #0]
 800b096:	463b      	mov	r3, r7
 800b098:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b09a:	463b      	mov	r3, r7
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	785b      	ldrb	r3, [r3, #1]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	f040 8566 	bne.w	800bb72 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699a      	ldr	r2, [r3, #24]
 800b0ac:	463b      	mov	r3, r7
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d905      	bls.n	800b0c2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b0c0:	e004      	b.n	800b0cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800b0c2:	463b      	mov	r3, r7
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b0cc:	463b      	mov	r3, r7
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	7b1b      	ldrb	r3, [r3, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d12c      	bne.n	800b130 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b0d6:	463b      	mov	r3, r7
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6959      	ldr	r1, [r3, #20]
 800b0dc:	463b      	mov	r3, r7
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	88da      	ldrh	r2, [r3, #6]
 800b0e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	1d38      	adds	r0, r7, #4
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	f001 fa31 	bl	800c552 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b0f0:	1d3b      	adds	r3, r7, #4
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	617b      	str	r3, [r7, #20]
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	461a      	mov	r2, r3
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	4413      	add	r3, r2
 800b106:	617b      	str	r3, [r7, #20]
 800b108:	463b      	mov	r3, r7
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	011a      	lsls	r2, r3, #4
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	4413      	add	r3, r2
 800b114:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800b118:	f107 0310 	add.w	r3, r7, #16
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b122:	b29a      	uxth	r2, r3
 800b124:	f107 0310 	add.w	r3, r7, #16
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	801a      	strh	r2, [r3, #0]
 800b12c:	f000 bcec 	b.w	800bb08 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b130:	463b      	mov	r3, r7
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	78db      	ldrb	r3, [r3, #3]
 800b136:	2b02      	cmp	r3, #2
 800b138:	f040 8356 	bne.w	800b7e8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b13c:	463b      	mov	r3, r7
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6a1a      	ldr	r2, [r3, #32]
 800b142:	463b      	mov	r3, r7
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	429a      	cmp	r2, r3
 800b14a:	f240 82fa 	bls.w	800b742 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b14e:	1d3b      	adds	r3, r7, #4
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	463b      	mov	r3, r7
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	b29b      	uxth	r3, r3
 800b160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b168:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800b16c:	1d3b      	adds	r3, r7, #4
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	463b      	mov	r3, r7
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	441a      	add	r2, r3
 800b17a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b17e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b186:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18e:	b29b      	uxth	r3, r3
 800b190:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800b192:	463b      	mov	r3, r7
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b19c:	463b      	mov	r3, r7
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6a1a      	ldr	r2, [r3, #32]
 800b1a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1a6:	1ad2      	subs	r2, r2, r3
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1ae:	1d3b      	adds	r3, r7, #4
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	463b      	mov	r3, r7
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 815e 	beq.w	800b486 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b1ca:	1d3b      	adds	r3, r7, #4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d164      	bne.n	800b2a4 <USB_EPStartXfer+0x218>
 800b1da:	1d3b      	adds	r3, r7, #4
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1e0:	1d3b      	adds	r3, r7, #4
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	4413      	add	r3, r2
 800b1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	011a      	lsls	r2, r3, #4
 800b1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b202:	62bb      	str	r3, [r7, #40]	; 0x28
 800b204:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d112      	bne.n	800b232 <USB_EPStartXfer+0x1a6>
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	881b      	ldrh	r3, [r3, #0]
 800b210:	b29b      	uxth	r3, r3
 800b212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b216:	b29a      	uxth	r2, r3
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	801a      	strh	r2, [r3, #0]
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	b29b      	uxth	r3, r3
 800b222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	801a      	strh	r2, [r3, #0]
 800b230:	e054      	b.n	800b2dc <USB_EPStartXfer+0x250>
 800b232:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b236:	2b3e      	cmp	r3, #62	; 0x3e
 800b238:	d817      	bhi.n	800b26a <USB_EPStartXfer+0x1de>
 800b23a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b23e:	085b      	lsrs	r3, r3, #1
 800b240:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b244:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b248:	f003 0301 	and.w	r3, r3, #1
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d004      	beq.n	800b25a <USB_EPStartXfer+0x1ce>
 800b250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b254:	3301      	adds	r3, #1
 800b256:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25e:	b29b      	uxth	r3, r3
 800b260:	029b      	lsls	r3, r3, #10
 800b262:	b29a      	uxth	r2, r3
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	801a      	strh	r2, [r3, #0]
 800b268:	e038      	b.n	800b2dc <USB_EPStartXfer+0x250>
 800b26a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b26e:	095b      	lsrs	r3, r3, #5
 800b270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b274:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b278:	f003 031f 	and.w	r3, r3, #31
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d104      	bne.n	800b28a <USB_EPStartXfer+0x1fe>
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b284:	3b01      	subs	r3, #1
 800b286:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28e:	b29b      	uxth	r3, r3
 800b290:	029b      	lsls	r3, r3, #10
 800b292:	b29b      	uxth	r3, r3
 800b294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	801a      	strh	r2, [r3, #0]
 800b2a2:	e01b      	b.n	800b2dc <USB_EPStartXfer+0x250>
 800b2a4:	463b      	mov	r3, r7
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d116      	bne.n	800b2dc <USB_EPStartXfer+0x250>
 800b2ae:	1d3b      	adds	r3, r7, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	4413      	add	r3, r2
 800b2be:	637b      	str	r3, [r7, #52]	; 0x34
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	011a      	lsls	r2, r3, #4
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b2d0:	633b      	str	r3, [r7, #48]	; 0x30
 800b2d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b2dc:	463b      	mov	r3, r7
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	895b      	ldrh	r3, [r3, #10]
 800b2e2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2e6:	463b      	mov	r3, r7
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6959      	ldr	r1, [r3, #20]
 800b2ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b2f6:	1d38      	adds	r0, r7, #4
 800b2f8:	6800      	ldr	r0, [r0, #0]
 800b2fa:	f001 f92a 	bl	800c552 <USB_WritePMA>
            ep->xfer_buff += len;
 800b2fe:	463b      	mov	r3, r7
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	695a      	ldr	r2, [r3, #20]
 800b304:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b308:	441a      	add	r2, r3
 800b30a:	463b      	mov	r3, r7
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b310:	463b      	mov	r3, r7
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6a1a      	ldr	r2, [r3, #32]
 800b316:	463b      	mov	r3, r7
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d90e      	bls.n	800b33e <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800b320:	463b      	mov	r3, r7
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800b32a:	463b      	mov	r3, r7
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6a1a      	ldr	r2, [r3, #32]
 800b330:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b334:	1ad2      	subs	r2, r2, r3
 800b336:	463b      	mov	r3, r7
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	621a      	str	r2, [r3, #32]
 800b33c:	e008      	b.n	800b350 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b33e:	463b      	mov	r3, r7
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	6a1b      	ldr	r3, [r3, #32]
 800b344:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800b348:	463b      	mov	r3, r7
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2200      	movs	r2, #0
 800b34e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b350:	463b      	mov	r3, r7
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	785b      	ldrb	r3, [r3, #1]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d164      	bne.n	800b424 <USB_EPStartXfer+0x398>
 800b35a:	1d3b      	adds	r3, r7, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	1d3b      	adds	r3, r7, #4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b368:	b29b      	uxth	r3, r3
 800b36a:	461a      	mov	r2, r3
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4413      	add	r3, r2
 800b370:	61fb      	str	r3, [r7, #28]
 800b372:	463b      	mov	r3, r7
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	011a      	lsls	r2, r3, #4
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	4413      	add	r3, r2
 800b37e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b382:	61bb      	str	r3, [r7, #24]
 800b384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d112      	bne.n	800b3b2 <USB_EPStartXfer+0x326>
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	b29b      	uxth	r3, r3
 800b392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b396:	b29a      	uxth	r2, r3
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	801a      	strh	r2, [r3, #0]
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	801a      	strh	r2, [r3, #0]
 800b3b0:	e057      	b.n	800b462 <USB_EPStartXfer+0x3d6>
 800b3b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3b6:	2b3e      	cmp	r3, #62	; 0x3e
 800b3b8:	d817      	bhi.n	800b3ea <USB_EPStartXfer+0x35e>
 800b3ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3be:	085b      	lsrs	r3, r3, #1
 800b3c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <USB_EPStartXfer+0x34e>
 800b3d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	029b      	lsls	r3, r3, #10
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	801a      	strh	r2, [r3, #0]
 800b3e8:	e03b      	b.n	800b462 <USB_EPStartXfer+0x3d6>
 800b3ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3ee:	095b      	lsrs	r3, r3, #5
 800b3f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3f8:	f003 031f 	and.w	r3, r3, #31
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d104      	bne.n	800b40a <USB_EPStartXfer+0x37e>
 800b400:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b404:	3b01      	subs	r3, #1
 800b406:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b40a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b40e:	b29b      	uxth	r3, r3
 800b410:	029b      	lsls	r3, r3, #10
 800b412:	b29b      	uxth	r3, r3
 800b414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	801a      	strh	r2, [r3, #0]
 800b422:	e01e      	b.n	800b462 <USB_EPStartXfer+0x3d6>
 800b424:	463b      	mov	r3, r7
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	785b      	ldrb	r3, [r3, #1]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d119      	bne.n	800b462 <USB_EPStartXfer+0x3d6>
 800b42e:	1d3b      	adds	r3, r7, #4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
 800b434:	1d3b      	adds	r3, r7, #4
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	461a      	mov	r2, r3
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	4413      	add	r3, r2
 800b444:	627b      	str	r3, [r7, #36]	; 0x24
 800b446:	463b      	mov	r3, r7
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	011a      	lsls	r2, r3, #4
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	4413      	add	r3, r2
 800b452:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b456:	623b      	str	r3, [r7, #32]
 800b458:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b462:	463b      	mov	r3, r7
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	891b      	ldrh	r3, [r3, #8]
 800b468:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b46c:	463b      	mov	r3, r7
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6959      	ldr	r1, [r3, #20]
 800b472:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b476:	b29b      	uxth	r3, r3
 800b478:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b47c:	1d38      	adds	r0, r7, #4
 800b47e:	6800      	ldr	r0, [r0, #0]
 800b480:	f001 f867 	bl	800c552 <USB_WritePMA>
 800b484:	e340      	b.n	800bb08 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b486:	463b      	mov	r3, r7
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	785b      	ldrb	r3, [r3, #1]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d164      	bne.n	800b55a <USB_EPStartXfer+0x4ce>
 800b490:	1d3b      	adds	r3, r7, #4
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b496:	1d3b      	adds	r3, r7, #4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4a4:	4413      	add	r3, r2
 800b4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4a8:	463b      	mov	r3, r7
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	011a      	lsls	r2, r3, #4
 800b4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d112      	bne.n	800b4e8 <USB_EPStartXfer+0x45c>
 800b4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4d0:	801a      	strh	r2, [r3, #0]
 800b4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e4:	801a      	strh	r2, [r3, #0]
 800b4e6:	e057      	b.n	800b598 <USB_EPStartXfer+0x50c>
 800b4e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b4ec:	2b3e      	cmp	r3, #62	; 0x3e
 800b4ee:	d817      	bhi.n	800b520 <USB_EPStartXfer+0x494>
 800b4f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b4f4:	085b      	lsrs	r3, r3, #1
 800b4f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b4fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b4fe:	f003 0301 	and.w	r3, r3, #1
 800b502:	2b00      	cmp	r3, #0
 800b504:	d004      	beq.n	800b510 <USB_EPStartXfer+0x484>
 800b506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b50a:	3301      	adds	r3, #1
 800b50c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b514:	b29b      	uxth	r3, r3
 800b516:	029b      	lsls	r3, r3, #10
 800b518:	b29a      	uxth	r2, r3
 800b51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b51c:	801a      	strh	r2, [r3, #0]
 800b51e:	e03b      	b.n	800b598 <USB_EPStartXfer+0x50c>
 800b520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b524:	095b      	lsrs	r3, r3, #5
 800b526:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b52a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b52e:	f003 031f 	and.w	r3, r3, #31
 800b532:	2b00      	cmp	r3, #0
 800b534:	d104      	bne.n	800b540 <USB_EPStartXfer+0x4b4>
 800b536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b53a:	3b01      	subs	r3, #1
 800b53c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b544:	b29b      	uxth	r3, r3
 800b546:	029b      	lsls	r3, r3, #10
 800b548:	b29b      	uxth	r3, r3
 800b54a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b54e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b552:	b29a      	uxth	r2, r3
 800b554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b556:	801a      	strh	r2, [r3, #0]
 800b558:	e01e      	b.n	800b598 <USB_EPStartXfer+0x50c>
 800b55a:	463b      	mov	r3, r7
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	785b      	ldrb	r3, [r3, #1]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d119      	bne.n	800b598 <USB_EPStartXfer+0x50c>
 800b564:	1d3b      	adds	r3, r7, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	657b      	str	r3, [r7, #84]	; 0x54
 800b56a:	1d3b      	adds	r3, r7, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b572:	b29b      	uxth	r3, r3
 800b574:	461a      	mov	r2, r3
 800b576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b578:	4413      	add	r3, r2
 800b57a:	657b      	str	r3, [r7, #84]	; 0x54
 800b57c:	463b      	mov	r3, r7
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	011a      	lsls	r2, r3, #4
 800b584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b586:	4413      	add	r3, r2
 800b588:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b58c:	653b      	str	r3, [r7, #80]	; 0x50
 800b58e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b592:	b29a      	uxth	r2, r3
 800b594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b596:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b598:	463b      	mov	r3, r7
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	891b      	ldrh	r3, [r3, #8]
 800b59e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	6959      	ldr	r1, [r3, #20]
 800b5a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b5b2:	1d38      	adds	r0, r7, #4
 800b5b4:	6800      	ldr	r0, [r0, #0]
 800b5b6:	f000 ffcc 	bl	800c552 <USB_WritePMA>
            ep->xfer_buff += len;
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	695a      	ldr	r2, [r3, #20]
 800b5c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5c4:	441a      	add	r2, r3
 800b5c6:	463b      	mov	r3, r7
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b5cc:	463b      	mov	r3, r7
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6a1a      	ldr	r2, [r3, #32]
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d90e      	bls.n	800b5fa <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800b5dc:	463b      	mov	r3, r7
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800b5e6:	463b      	mov	r3, r7
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	6a1a      	ldr	r2, [r3, #32]
 800b5ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5f0:	1ad2      	subs	r2, r2, r3
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	621a      	str	r2, [r3, #32]
 800b5f8:	e008      	b.n	800b60c <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800b604:	463b      	mov	r3, r7
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2200      	movs	r2, #0
 800b60a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b60c:	1d3b      	adds	r3, r7, #4
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	647b      	str	r3, [r7, #68]	; 0x44
 800b612:	463b      	mov	r3, r7
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	785b      	ldrb	r3, [r3, #1]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d164      	bne.n	800b6e6 <USB_EPStartXfer+0x65a>
 800b61c:	1d3b      	adds	r3, r7, #4
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b622:	1d3b      	adds	r3, r7, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	461a      	mov	r2, r3
 800b62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b630:	4413      	add	r3, r2
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b634:	463b      	mov	r3, r7
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	011a      	lsls	r2, r3, #4
 800b63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63e:	4413      	add	r3, r2
 800b640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b644:	63bb      	str	r3, [r7, #56]	; 0x38
 800b646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d112      	bne.n	800b674 <USB_EPStartXfer+0x5e8>
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	881b      	ldrh	r3, [r3, #0]
 800b652:	b29b      	uxth	r3, r3
 800b654:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b658:	b29a      	uxth	r2, r3
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	801a      	strh	r2, [r3, #0]
 800b65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	b29b      	uxth	r3, r3
 800b664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	801a      	strh	r2, [r3, #0]
 800b672:	e054      	b.n	800b71e <USB_EPStartXfer+0x692>
 800b674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b678:	2b3e      	cmp	r3, #62	; 0x3e
 800b67a:	d817      	bhi.n	800b6ac <USB_EPStartXfer+0x620>
 800b67c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <USB_EPStartXfer+0x610>
 800b692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b696:	3301      	adds	r3, #1
 800b698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b69c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	029b      	lsls	r3, r3, #10
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	801a      	strh	r2, [r3, #0]
 800b6aa:	e038      	b.n	800b71e <USB_EPStartXfer+0x692>
 800b6ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6b0:	095b      	lsrs	r3, r3, #5
 800b6b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6ba:	f003 031f 	and.w	r3, r3, #31
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d104      	bne.n	800b6cc <USB_EPStartXfer+0x640>
 800b6c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	029b      	lsls	r3, r3, #10
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e2:	801a      	strh	r2, [r3, #0]
 800b6e4:	e01b      	b.n	800b71e <USB_EPStartXfer+0x692>
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	785b      	ldrb	r3, [r3, #1]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d116      	bne.n	800b71e <USB_EPStartXfer+0x692>
 800b6f0:	1d3b      	adds	r3, r7, #4
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fe:	4413      	add	r3, r2
 800b700:	647b      	str	r3, [r7, #68]	; 0x44
 800b702:	463b      	mov	r3, r7
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	011a      	lsls	r2, r3, #4
 800b70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b70c:	4413      	add	r3, r2
 800b70e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b712:	643b      	str	r3, [r7, #64]	; 0x40
 800b714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b718:	b29a      	uxth	r2, r3
 800b71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b71e:	463b      	mov	r3, r7
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	895b      	ldrh	r3, [r3, #10]
 800b724:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b728:	463b      	mov	r3, r7
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6959      	ldr	r1, [r3, #20]
 800b72e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b732:	b29b      	uxth	r3, r3
 800b734:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b738:	1d38      	adds	r0, r7, #4
 800b73a:	6800      	ldr	r0, [r0, #0]
 800b73c:	f000 ff09 	bl	800c552 <USB_WritePMA>
 800b740:	e1e2      	b.n	800bb08 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800b742:	463b      	mov	r3, r7
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800b74c:	1d3b      	adds	r3, r7, #4
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	463b      	mov	r3, r7
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b766:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b76a:	1d3b      	adds	r3, r7, #4
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	463b      	mov	r3, r7
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	441a      	add	r2, r3
 800b778:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b77c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b790:	1d3b      	adds	r3, r7, #4
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	663b      	str	r3, [r7, #96]	; 0x60
 800b796:	1d3b      	adds	r3, r7, #4
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7a4:	4413      	add	r3, r2
 800b7a6:	663b      	str	r3, [r7, #96]	; 0x60
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	011a      	lsls	r2, r3, #4
 800b7b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b7b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b7c4:	463b      	mov	r3, r7
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	891b      	ldrh	r3, [r3, #8]
 800b7ca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6959      	ldr	r1, [r3, #20]
 800b7d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b7de:	1d38      	adds	r0, r7, #4
 800b7e0:	6800      	ldr	r0, [r0, #0]
 800b7e2:	f000 feb6 	bl	800c552 <USB_WritePMA>
 800b7e6:	e18f      	b.n	800bb08 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b7e8:	1d3b      	adds	r3, r7, #4
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	463b      	mov	r3, r7
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4413      	add	r3, r2
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f000 808f 	beq.w	800b922 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b804:	1d3b      	adds	r3, r7, #4
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	67bb      	str	r3, [r7, #120]	; 0x78
 800b80a:	463b      	mov	r3, r7
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	785b      	ldrb	r3, [r3, #1]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d164      	bne.n	800b8de <USB_EPStartXfer+0x852>
 800b814:	1d3b      	adds	r3, r7, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	673b      	str	r3, [r7, #112]	; 0x70
 800b81a:	1d3b      	adds	r3, r7, #4
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b822:	b29b      	uxth	r3, r3
 800b824:	461a      	mov	r2, r3
 800b826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b828:	4413      	add	r3, r2
 800b82a:	673b      	str	r3, [r7, #112]	; 0x70
 800b82c:	463b      	mov	r3, r7
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	011a      	lsls	r2, r3, #4
 800b834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b836:	4413      	add	r3, r2
 800b838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b83c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b83e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b842:	2b00      	cmp	r3, #0
 800b844:	d112      	bne.n	800b86c <USB_EPStartXfer+0x7e0>
 800b846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b850:	b29a      	uxth	r2, r3
 800b852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b854:	801a      	strh	r2, [r3, #0]
 800b856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b864:	b29a      	uxth	r2, r3
 800b866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b868:	801a      	strh	r2, [r3, #0]
 800b86a:	e054      	b.n	800b916 <USB_EPStartXfer+0x88a>
 800b86c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b870:	2b3e      	cmp	r3, #62	; 0x3e
 800b872:	d817      	bhi.n	800b8a4 <USB_EPStartXfer+0x818>
 800b874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b878:	085b      	lsrs	r3, r3, #1
 800b87a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b87e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d004      	beq.n	800b894 <USB_EPStartXfer+0x808>
 800b88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b88e:	3301      	adds	r3, #1
 800b890:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b898:	b29b      	uxth	r3, r3
 800b89a:	029b      	lsls	r3, r3, #10
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a0:	801a      	strh	r2, [r3, #0]
 800b8a2:	e038      	b.n	800b916 <USB_EPStartXfer+0x88a>
 800b8a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8a8:	095b      	lsrs	r3, r3, #5
 800b8aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8b2:	f003 031f 	and.w	r3, r3, #31
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d104      	bne.n	800b8c4 <USB_EPStartXfer+0x838>
 800b8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	029b      	lsls	r3, r3, #10
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8da:	801a      	strh	r2, [r3, #0]
 800b8dc:	e01b      	b.n	800b916 <USB_EPStartXfer+0x88a>
 800b8de:	463b      	mov	r3, r7
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	785b      	ldrb	r3, [r3, #1]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d116      	bne.n	800b916 <USB_EPStartXfer+0x88a>
 800b8e8:	1d3b      	adds	r3, r7, #4
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8f6:	4413      	add	r3, r2
 800b8f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8fa:	463b      	mov	r3, r7
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	011a      	lsls	r2, r3, #4
 800b902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b904:	4413      	add	r3, r2
 800b906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b90a:	677b      	str	r3, [r7, #116]	; 0x74
 800b90c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b910:	b29a      	uxth	r2, r3
 800b912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b914:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b916:	463b      	mov	r3, r7
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	895b      	ldrh	r3, [r3, #10]
 800b91c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800b920:	e097      	b.n	800ba52 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b922:	463b      	mov	r3, r7
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	785b      	ldrb	r3, [r3, #1]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d168      	bne.n	800b9fe <USB_EPStartXfer+0x972>
 800b92c:	1d3b      	adds	r3, r7, #4
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b934:	1d3b      	adds	r3, r7, #4
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b944:	4413      	add	r3, r2
 800b946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b94a:	463b      	mov	r3, r7
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	011a      	lsls	r2, r3, #4
 800b952:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b956:	4413      	add	r3, r2
 800b958:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b95c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b95e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b962:	2b00      	cmp	r3, #0
 800b964:	d112      	bne.n	800b98c <USB_EPStartXfer+0x900>
 800b966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b970:	b29a      	uxth	r2, r3
 800b972:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b974:	801a      	strh	r2, [r3, #0]
 800b976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b984:	b29a      	uxth	r2, r3
 800b986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b988:	801a      	strh	r2, [r3, #0]
 800b98a:	e05d      	b.n	800ba48 <USB_EPStartXfer+0x9bc>
 800b98c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b990:	2b3e      	cmp	r3, #62	; 0x3e
 800b992:	d817      	bhi.n	800b9c4 <USB_EPStartXfer+0x938>
 800b994:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b998:	085b      	lsrs	r3, r3, #1
 800b99a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b99e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d004      	beq.n	800b9b4 <USB_EPStartXfer+0x928>
 800b9aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b9b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	029b      	lsls	r3, r3, #10
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9c0:	801a      	strh	r2, [r3, #0]
 800b9c2:	e041      	b.n	800ba48 <USB_EPStartXfer+0x9bc>
 800b9c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9c8:	095b      	lsrs	r3, r3, #5
 800b9ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b9ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9d2:	f003 031f 	and.w	r3, r3, #31
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d104      	bne.n	800b9e4 <USB_EPStartXfer+0x958>
 800b9da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b9e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	029b      	lsls	r3, r3, #10
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9fa:	801a      	strh	r2, [r3, #0]
 800b9fc:	e024      	b.n	800ba48 <USB_EPStartXfer+0x9bc>
 800b9fe:	463b      	mov	r3, r7
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	785b      	ldrb	r3, [r3, #1]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d11f      	bne.n	800ba48 <USB_EPStartXfer+0x9bc>
 800ba08:	1d3b      	adds	r3, r7, #4
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba10:	1d3b      	adds	r3, r7, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba20:	4413      	add	r3, r2
 800ba22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba26:	463b      	mov	r3, r7
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	011a      	lsls	r2, r3, #4
 800ba2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba32:	4413      	add	r3, r2
 800ba34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba48:	463b      	mov	r3, r7
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	891b      	ldrh	r3, [r3, #8]
 800ba4e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba52:	463b      	mov	r3, r7
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6959      	ldr	r1, [r3, #20]
 800ba58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800ba62:	1d38      	adds	r0, r7, #4
 800ba64:	6800      	ldr	r0, [r0, #0]
 800ba66:	f000 fd74 	bl	800c552 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800ba6a:	463b      	mov	r3, r7
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	785b      	ldrb	r3, [r3, #1]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d122      	bne.n	800baba <USB_EPStartXfer+0xa2e>
 800ba74:	1d3b      	adds	r3, r7, #4
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	463b      	mov	r3, r7
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	881b      	ldrh	r3, [r3, #0]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba8e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800ba92:	1d3b      	adds	r3, r7, #4
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	463b      	mov	r3, r7
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	441a      	add	r2, r3
 800baa0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800baa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	8013      	strh	r3, [r2, #0]
 800bab8:	e026      	b.n	800bb08 <USB_EPStartXfer+0xa7c>
 800baba:	463b      	mov	r3, r7
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	785b      	ldrb	r3, [r3, #1]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d121      	bne.n	800bb08 <USB_EPStartXfer+0xa7c>
 800bac4:	1d3b      	adds	r3, r7, #4
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	463b      	mov	r3, r7
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bade:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800bae2:	1d3b      	adds	r3, r7, #4
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	463b      	mov	r3, r7
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	441a      	add	r2, r3
 800baf0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800baf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bafc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bb08:	1d3b      	adds	r3, r7, #4
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	f107 020e 	add.w	r2, r7, #14
 800bb1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb26:	8013      	strh	r3, [r2, #0]
 800bb28:	f107 030e 	add.w	r3, r7, #14
 800bb2c:	f107 020e 	add.w	r2, r7, #14
 800bb30:	8812      	ldrh	r2, [r2, #0]
 800bb32:	f082 0210 	eor.w	r2, r2, #16
 800bb36:	801a      	strh	r2, [r3, #0]
 800bb38:	f107 030e 	add.w	r3, r7, #14
 800bb3c:	f107 020e 	add.w	r2, r7, #14
 800bb40:	8812      	ldrh	r2, [r2, #0]
 800bb42:	f082 0220 	eor.w	r2, r2, #32
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	1d3b      	adds	r3, r7, #4
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	441a      	add	r2, r3
 800bb56:	f107 030e 	add.w	r3, r7, #14
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	8013      	strh	r3, [r2, #0]
 800bb70:	e3b5      	b.n	800c2de <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bb72:	463b      	mov	r3, r7
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	7b1b      	ldrb	r3, [r3, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f040 8090 	bne.w	800bc9e <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800bb7e:	463b      	mov	r3, r7
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	699a      	ldr	r2, [r3, #24]
 800bb84:	463b      	mov	r3, r7
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d90e      	bls.n	800bbac <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800bb8e:	463b      	mov	r3, r7
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800bb98:	463b      	mov	r3, r7
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	699a      	ldr	r2, [r3, #24]
 800bb9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bba2:	1ad2      	subs	r2, r2, r3
 800bba4:	463b      	mov	r3, r7
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	619a      	str	r2, [r3, #24]
 800bbaa:	e008      	b.n	800bbbe <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800bbac:	463b      	mov	r3, r7
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800bbb6:	463b      	mov	r3, r7
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bbbe:	1d3b      	adds	r3, r7, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbc6:	1d3b      	adds	r3, r7, #4
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbdc:	463b      	mov	r3, r7
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	011a      	lsls	r2, r3, #4
 800bbe4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbe8:	4413      	add	r3, r2
 800bbea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bbf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d116      	bne.n	800bc28 <USB_EPStartXfer+0xb9c>
 800bbfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc0c:	801a      	strh	r2, [r3, #0]
 800bc0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc24:	801a      	strh	r2, [r3, #0]
 800bc26:	e32c      	b.n	800c282 <USB_EPStartXfer+0x11f6>
 800bc28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc2c:	2b3e      	cmp	r3, #62	; 0x3e
 800bc2e:	d818      	bhi.n	800bc62 <USB_EPStartXfer+0xbd6>
 800bc30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d004      	beq.n	800bc50 <USB_EPStartXfer+0xbc4>
 800bc46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	029b      	lsls	r3, r3, #10
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc5e:	801a      	strh	r2, [r3, #0]
 800bc60:	e30f      	b.n	800c282 <USB_EPStartXfer+0x11f6>
 800bc62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc66:	095b      	lsrs	r3, r3, #5
 800bc68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc70:	f003 031f 	and.w	r3, r3, #31
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d104      	bne.n	800bc82 <USB_EPStartXfer+0xbf6>
 800bc78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	029b      	lsls	r3, r3, #10
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc9a:	801a      	strh	r2, [r3, #0]
 800bc9c:	e2f1      	b.n	800c282 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800bc9e:	463b      	mov	r3, r7
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	78db      	ldrb	r3, [r3, #3]
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	f040 818f 	bne.w	800bfc8 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bcaa:	463b      	mov	r3, r7
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	785b      	ldrb	r3, [r3, #1]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d175      	bne.n	800bda0 <USB_EPStartXfer+0xd14>
 800bcb4:	1d3b      	adds	r3, r7, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcbc:	1d3b      	adds	r3, r7, #4
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bccc:	4413      	add	r3, r2
 800bcce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	011a      	lsls	r2, r3, #4
 800bcda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bcde:	4413      	add	r3, r2
 800bce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bce8:	463b      	mov	r3, r7
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d116      	bne.n	800bd20 <USB_EPStartXfer+0xc94>
 800bcf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd04:	801a      	strh	r2, [r3, #0]
 800bd06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd1c:	801a      	strh	r2, [r3, #0]
 800bd1e:	e065      	b.n	800bdec <USB_EPStartXfer+0xd60>
 800bd20:	463b      	mov	r3, r7
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	2b3e      	cmp	r3, #62	; 0x3e
 800bd28:	d81a      	bhi.n	800bd60 <USB_EPStartXfer+0xcd4>
 800bd2a:	463b      	mov	r3, r7
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	085b      	lsrs	r3, r3, #1
 800bd32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd36:	463b      	mov	r3, r7
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <USB_EPStartXfer+0xcc2>
 800bd44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd48:	3301      	adds	r3, #1
 800bd4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	029b      	lsls	r3, r3, #10
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd5c:	801a      	strh	r2, [r3, #0]
 800bd5e:	e045      	b.n	800bdec <USB_EPStartXfer+0xd60>
 800bd60:	463b      	mov	r3, r7
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	095b      	lsrs	r3, r3, #5
 800bd68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd6c:	463b      	mov	r3, r7
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	f003 031f 	and.w	r3, r3, #31
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d104      	bne.n	800bd84 <USB_EPStartXfer+0xcf8>
 800bd7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	029b      	lsls	r3, r3, #10
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd9c:	801a      	strh	r2, [r3, #0]
 800bd9e:	e025      	b.n	800bdec <USB_EPStartXfer+0xd60>
 800bda0:	463b      	mov	r3, r7
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d120      	bne.n	800bdec <USB_EPStartXfer+0xd60>
 800bdaa:	1d3b      	adds	r3, r7, #4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdb2:	1d3b      	adds	r3, r7, #4
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdc8:	463b      	mov	r3, r7
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	011a      	lsls	r2, r3, #4
 800bdd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bdda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdde:	463b      	mov	r3, r7
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bdea:	801a      	strh	r2, [r3, #0]
 800bdec:	1d3b      	adds	r3, r7, #4
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bdf4:	463b      	mov	r3, r7
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	785b      	ldrb	r3, [r3, #1]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d175      	bne.n	800beea <USB_EPStartXfer+0xe5e>
 800bdfe:	1d3b      	adds	r3, r7, #4
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be06:	1d3b      	adds	r3, r7, #4
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be0e:	b29b      	uxth	r3, r3
 800be10:	461a      	mov	r2, r3
 800be12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be16:	4413      	add	r3, r2
 800be18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be1c:	463b      	mov	r3, r7
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	011a      	lsls	r2, r3, #4
 800be24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be28:	4413      	add	r3, r2
 800be2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be32:	463b      	mov	r3, r7
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d116      	bne.n	800be6a <USB_EPStartXfer+0xdde>
 800be3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	b29b      	uxth	r3, r3
 800be44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be48:	b29a      	uxth	r2, r3
 800be4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be4e:	801a      	strh	r2, [r3, #0]
 800be50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	b29b      	uxth	r3, r3
 800be58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be60:	b29a      	uxth	r2, r3
 800be62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be66:	801a      	strh	r2, [r3, #0]
 800be68:	e061      	b.n	800bf2e <USB_EPStartXfer+0xea2>
 800be6a:	463b      	mov	r3, r7
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	2b3e      	cmp	r3, #62	; 0x3e
 800be72:	d81a      	bhi.n	800beaa <USB_EPStartXfer+0xe1e>
 800be74:	463b      	mov	r3, r7
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	085b      	lsrs	r3, r3, #1
 800be7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be80:	463b      	mov	r3, r7
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d004      	beq.n	800be98 <USB_EPStartXfer+0xe0c>
 800be8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be92:	3301      	adds	r3, #1
 800be94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	029b      	lsls	r3, r3, #10
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bea6:	801a      	strh	r2, [r3, #0]
 800bea8:	e041      	b.n	800bf2e <USB_EPStartXfer+0xea2>
 800beaa:	463b      	mov	r3, r7
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	095b      	lsrs	r3, r3, #5
 800beb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800beb6:	463b      	mov	r3, r7
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	f003 031f 	and.w	r3, r3, #31
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d104      	bne.n	800bece <USB_EPStartXfer+0xe42>
 800bec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec8:	3b01      	subs	r3, #1
 800beca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	029b      	lsls	r3, r3, #10
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bedc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bee6:	801a      	strh	r2, [r3, #0]
 800bee8:	e021      	b.n	800bf2e <USB_EPStartXfer+0xea2>
 800beea:	463b      	mov	r3, r7
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	785b      	ldrb	r3, [r3, #1]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d11c      	bne.n	800bf2e <USB_EPStartXfer+0xea2>
 800bef4:	1d3b      	adds	r3, r7, #4
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800befc:	b29b      	uxth	r3, r3
 800befe:	461a      	mov	r2, r3
 800bf00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf04:	4413      	add	r3, r2
 800bf06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	011a      	lsls	r2, r3, #4
 800bf12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf16:	4413      	add	r3, r2
 800bf18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bf1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bf20:	463b      	mov	r3, r7
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bf2c:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800bf2e:	463b      	mov	r3, r7
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 81a4 	beq.w	800c282 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bf3a:	1d3b      	adds	r3, r7, #4
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	463b      	mov	r3, r7
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bf4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bf52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <USB_EPStartXfer+0xeda>
 800bf5a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bf5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10d      	bne.n	800bf82 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bf66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bf6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 8187 	bne.w	800c282 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bf74:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f040 8180 	bne.w	800c282 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bf82:	1d3b      	adds	r3, r7, #4
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	463b      	mov	r3, r7
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf9c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800bfa0:	1d3b      	adds	r3, r7, #4
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	463b      	mov	r3, r7
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	441a      	add	r2, r3
 800bfae:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800bfb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	8013      	strh	r3, [r2, #0]
 800bfc6:	e15c      	b.n	800c282 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bfc8:	463b      	mov	r3, r7
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	78db      	ldrb	r3, [r3, #3]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	f040 8155 	bne.w	800c27e <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800bfd4:	463b      	mov	r3, r7
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699a      	ldr	r2, [r3, #24]
 800bfda:	463b      	mov	r3, r7
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d90e      	bls.n	800c002 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800bfe4:	463b      	mov	r3, r7
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800bfee:	463b      	mov	r3, r7
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	699a      	ldr	r2, [r3, #24]
 800bff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bff8:	1ad2      	subs	r2, r2, r3
 800bffa:	463b      	mov	r3, r7
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	619a      	str	r2, [r3, #24]
 800c000:	e008      	b.n	800c014 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800c002:	463b      	mov	r3, r7
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800c00c:	463b      	mov	r3, r7
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2200      	movs	r2, #0
 800c012:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c014:	463b      	mov	r3, r7
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	785b      	ldrb	r3, [r3, #1]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d16f      	bne.n	800c0fe <USB_EPStartXfer+0x1072>
 800c01e:	1d3b      	adds	r3, r7, #4
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c026:	1d3b      	adds	r3, r7, #4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c02e:	b29b      	uxth	r3, r3
 800c030:	461a      	mov	r2, r3
 800c032:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c036:	4413      	add	r3, r2
 800c038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c03c:	463b      	mov	r3, r7
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	011a      	lsls	r2, r3, #4
 800c044:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c048:	4413      	add	r3, r2
 800c04a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c04e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c052:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c056:	2b00      	cmp	r3, #0
 800c058:	d116      	bne.n	800c088 <USB_EPStartXfer+0xffc>
 800c05a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c066:	b29a      	uxth	r2, r3
 800c068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c06c:	801a      	strh	r2, [r3, #0]
 800c06e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c07a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07e:	b29a      	uxth	r2, r3
 800c080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c084:	801a      	strh	r2, [r3, #0]
 800c086:	e05f      	b.n	800c148 <USB_EPStartXfer+0x10bc>
 800c088:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c08c:	2b3e      	cmp	r3, #62	; 0x3e
 800c08e:	d818      	bhi.n	800c0c2 <USB_EPStartXfer+0x1036>
 800c090:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c094:	085b      	lsrs	r3, r3, #1
 800c096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c09a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <USB_EPStartXfer+0x1024>
 800c0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	029b      	lsls	r3, r3, #10
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0be:	801a      	strh	r2, [r3, #0]
 800c0c0:	e042      	b.n	800c148 <USB_EPStartXfer+0x10bc>
 800c0c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c0c6:	095b      	lsrs	r3, r3, #5
 800c0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c0d0:	f003 031f 	and.w	r3, r3, #31
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d104      	bne.n	800c0e2 <USB_EPStartXfer+0x1056>
 800c0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	029b      	lsls	r3, r3, #10
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0fa:	801a      	strh	r2, [r3, #0]
 800c0fc:	e024      	b.n	800c148 <USB_EPStartXfer+0x10bc>
 800c0fe:	463b      	mov	r3, r7
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	785b      	ldrb	r3, [r3, #1]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d11f      	bne.n	800c148 <USB_EPStartXfer+0x10bc>
 800c108:	1d3b      	adds	r3, r7, #4
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c110:	1d3b      	adds	r3, r7, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c118:	b29b      	uxth	r3, r3
 800c11a:	461a      	mov	r2, r3
 800c11c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c120:	4413      	add	r3, r2
 800c122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c126:	463b      	mov	r3, r7
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	011a      	lsls	r2, r3, #4
 800c12e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c132:	4413      	add	r3, r2
 800c134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c13c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c140:	b29a      	uxth	r2, r3
 800c142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c146:	801a      	strh	r2, [r3, #0]
 800c148:	1d3b      	adds	r3, r7, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c150:	463b      	mov	r3, r7
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d16f      	bne.n	800c23a <USB_EPStartXfer+0x11ae>
 800c15a:	1d3b      	adds	r3, r7, #4
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c162:	1d3b      	adds	r3, r7, #4
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	461a      	mov	r2, r3
 800c16e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c172:	4413      	add	r3, r2
 800c174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c178:	463b      	mov	r3, r7
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	011a      	lsls	r2, r3, #4
 800c180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c184:	4413      	add	r3, r2
 800c186:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c18a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c18e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c192:	2b00      	cmp	r3, #0
 800c194:	d116      	bne.n	800c1c4 <USB_EPStartXfer+0x1138>
 800c196:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c1a8:	801a      	strh	r2, [r3, #0]
 800c1aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c1c0:	801a      	strh	r2, [r3, #0]
 800c1c2:	e05e      	b.n	800c282 <USB_EPStartXfer+0x11f6>
 800c1c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c1c8:	2b3e      	cmp	r3, #62	; 0x3e
 800c1ca:	d818      	bhi.n	800c1fe <USB_EPStartXfer+0x1172>
 800c1cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c1d0:	085b      	lsrs	r3, r3, #1
 800c1d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d004      	beq.n	800c1ec <USB_EPStartXfer+0x1160>
 800c1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	029b      	lsls	r3, r3, #10
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c1fa:	801a      	strh	r2, [r3, #0]
 800c1fc:	e041      	b.n	800c282 <USB_EPStartXfer+0x11f6>
 800c1fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c202:	095b      	lsrs	r3, r3, #5
 800c204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c208:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c20c:	f003 031f 	and.w	r3, r3, #31
 800c210:	2b00      	cmp	r3, #0
 800c212:	d104      	bne.n	800c21e <USB_EPStartXfer+0x1192>
 800c214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c218:	3b01      	subs	r3, #1
 800c21a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c21e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c222:	b29b      	uxth	r3, r3
 800c224:	029b      	lsls	r3, r3, #10
 800c226:	b29b      	uxth	r3, r3
 800c228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c22c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c230:	b29a      	uxth	r2, r3
 800c232:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c236:	801a      	strh	r2, [r3, #0]
 800c238:	e023      	b.n	800c282 <USB_EPStartXfer+0x11f6>
 800c23a:	463b      	mov	r3, r7
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	785b      	ldrb	r3, [r3, #1]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d11e      	bne.n	800c282 <USB_EPStartXfer+0x11f6>
 800c244:	1d3b      	adds	r3, r7, #4
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	461a      	mov	r2, r3
 800c250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c254:	4413      	add	r3, r2
 800c256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c25a:	463b      	mov	r3, r7
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	011a      	lsls	r2, r3, #4
 800c262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c266:	4413      	add	r3, r2
 800c268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c26c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c270:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c274:	b29a      	uxth	r2, r3
 800c276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c27a:	801a      	strh	r2, [r3, #0]
 800c27c:	e001      	b.n	800c282 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	e02e      	b.n	800c2e0 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c282:	1d3b      	adds	r3, r7, #4
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	463b      	mov	r3, r7
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	b29b      	uxth	r3, r3
 800c294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c29c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c2a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c2a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c2a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c2ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c2b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c2b4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c2b8:	1d3b      	adds	r3, r7, #4
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	463b      	mov	r3, r7
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	441a      	add	r2, r3
 800c2c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	785b      	ldrb	r3, [r3, #1]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d020      	beq.n	800c33e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c30e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c312:	81bb      	strh	r3, [r7, #12]
 800c314:	89bb      	ldrh	r3, [r7, #12]
 800c316:	f083 0310 	eor.w	r3, r3, #16
 800c31a:	81bb      	strh	r3, [r7, #12]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	441a      	add	r2, r3
 800c326:	89bb      	ldrh	r3, [r7, #12]
 800c328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c338:	b29b      	uxth	r3, r3
 800c33a:	8013      	strh	r3, [r2, #0]
 800c33c:	e01f      	b.n	800c37e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c354:	81fb      	strh	r3, [r7, #14]
 800c356:	89fb      	ldrh	r3, [r7, #14]
 800c358:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c35c:	81fb      	strh	r3, [r7, #14]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	441a      	add	r2, r3
 800c368:	89fb      	ldrh	r3, [r7, #14]
 800c36a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c36e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	bc80      	pop	{r7}
 800c388:	4770      	bx	lr

0800c38a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b087      	sub	sp, #28
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	7b1b      	ldrb	r3, [r3, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f040 809d 	bne.w	800c4d8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	785b      	ldrb	r3, [r3, #1]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d04c      	beq.n	800c440 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	4413      	add	r3, r2
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	823b      	strh	r3, [r7, #16]
 800c3b4:	8a3b      	ldrh	r3, [r7, #16]
 800c3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d01b      	beq.n	800c3f6 <USB_EPClearStall+0x6c>
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3d4:	81fb      	strh	r3, [r7, #14]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	441a      	add	r2, r3
 800c3e0:	89fb      	ldrh	r3, [r7, #14]
 800c3e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	78db      	ldrb	r3, [r3, #3]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d06c      	beq.n	800c4d8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c414:	81bb      	strh	r3, [r7, #12]
 800c416:	89bb      	ldrh	r3, [r7, #12]
 800c418:	f083 0320 	eor.w	r3, r3, #32
 800c41c:	81bb      	strh	r3, [r7, #12]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	441a      	add	r2, r3
 800c428:	89bb      	ldrh	r3, [r7, #12]
 800c42a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c42e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	8013      	strh	r3, [r2, #0]
 800c43e:	e04b      	b.n	800c4d8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	82fb      	strh	r3, [r7, #22]
 800c44e:	8afb      	ldrh	r3, [r7, #22]
 800c450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d01b      	beq.n	800c490 <USB_EPClearStall+0x106>
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	881b      	ldrh	r3, [r3, #0]
 800c464:	b29b      	uxth	r3, r3
 800c466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c46e:	82bb      	strh	r3, [r7, #20]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	441a      	add	r2, r3
 800c47a:	8abb      	ldrh	r3, [r7, #20]
 800c47c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4a6:	827b      	strh	r3, [r7, #18]
 800c4a8:	8a7b      	ldrh	r3, [r7, #18]
 800c4aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c4ae:	827b      	strh	r3, [r7, #18]
 800c4b0:	8a7b      	ldrh	r3, [r7, #18]
 800c4b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c4b6:	827b      	strh	r3, [r7, #18]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	441a      	add	r2, r3
 800c4c2:	8a7b      	ldrh	r3, [r7, #18]
 800c4c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	371c      	adds	r7, #28
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bc80      	pop	{r7}
 800c4e2:	4770      	bx	lr

0800c4e4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d103      	bne.n	800c4fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2280      	movs	r2, #128	; 0x80
 800c4fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	bc80      	pop	{r7}
 800c508:	4770      	bx	lr

0800c50a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	bc80      	pop	{r7}
 800c51c:	4770      	bx	lr

0800c51e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c51e:	b480      	push	{r7}
 800c520:	b085      	sub	sp, #20
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c530:	68fb      	ldr	r3, [r7, #12]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3714      	adds	r7, #20
 800c536:	46bd      	mov	sp, r7
 800c538:	bc80      	pop	{r7}
 800c53a:	4770      	bx	lr

0800c53c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bc80      	pop	{r7}
 800c550:	4770      	bx	lr

0800c552 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c552:	b480      	push	{r7}
 800c554:	b08d      	sub	sp, #52	; 0x34
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	4611      	mov	r1, r2
 800c55e:	461a      	mov	r2, r3
 800c560:	460b      	mov	r3, r1
 800c562:	80fb      	strh	r3, [r7, #6]
 800c564:	4613      	mov	r3, r2
 800c566:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c568:	88bb      	ldrh	r3, [r7, #4]
 800c56a:	3301      	adds	r3, #1
 800c56c:	085b      	lsrs	r3, r3, #1
 800c56e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	005a      	lsls	r2, r3, #1
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	4413      	add	r3, r2
 800c580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c584:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c58a:	e01e      	b.n	800c5ca <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	3301      	adds	r3, #1
 800c596:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	021b      	lsls	r3, r3, #8
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	3302      	adds	r3, #2
 800c5b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	3302      	adds	r3, #2
 800c5bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1dd      	bne.n	800c58c <USB_WritePMA+0x3a>
  }
}
 800c5d0:	bf00      	nop
 800c5d2:	3734      	adds	r7, #52	; 0x34
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bc80      	pop	{r7}
 800c5d8:	4770      	bx	lr

0800c5da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b08b      	sub	sp, #44	; 0x2c
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	60f8      	str	r0, [r7, #12]
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	80fb      	strh	r3, [r7, #6]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c5f0:	88bb      	ldrh	r3, [r7, #4]
 800c5f2:	085b      	lsrs	r3, r3, #1
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c600:	88fb      	ldrh	r3, [r7, #6]
 800c602:	005a      	lsls	r2, r3, #1
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c60c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	627b      	str	r3, [r7, #36]	; 0x24
 800c612:	e01b      	b.n	800c64c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	3302      	adds	r3, #2
 800c620:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	b2da      	uxtb	r2, r3
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	3301      	adds	r3, #1
 800c62e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	0a1b      	lsrs	r3, r3, #8
 800c634:	b2da      	uxtb	r2, r3
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	3301      	adds	r3, #1
 800c63e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c640:	6a3b      	ldr	r3, [r7, #32]
 800c642:	3302      	adds	r3, #2
 800c644:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c648:	3b01      	subs	r3, #1
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1e0      	bne.n	800c614 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c652:	88bb      	ldrh	r3, [r7, #4]
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	b29b      	uxth	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d007      	beq.n	800c66e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	b29b      	uxth	r3, r3
 800c664:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	701a      	strb	r2, [r3, #0]
  }
}
 800c66e:	bf00      	nop
 800c670:	372c      	adds	r7, #44	; 0x2c
 800c672:	46bd      	mov	sp, r7
 800c674:	bc80      	pop	{r7}
 800c676:	4770      	bx	lr

0800c678 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c67c:	4904      	ldr	r1, [pc, #16]	; (800c690 <MX_FATFS_Init+0x18>)
 800c67e:	4805      	ldr	r0, [pc, #20]	; (800c694 <MX_FATFS_Init+0x1c>)
 800c680:	f002 faca 	bl	800ec18 <FATFS_LinkDriver>
 800c684:	4603      	mov	r3, r0
 800c686:	461a      	mov	r2, r3
 800c688:	4b03      	ldr	r3, [pc, #12]	; (800c698 <MX_FATFS_Init+0x20>)
 800c68a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c68c:	bf00      	nop
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	20004000 	.word	0x20004000
 800c694:	20000014 	.word	0x20000014
 800c698:	20004004 	.word	0x20004004

0800c69c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c6a6:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <USER_initialize+0x20>)
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c6ac:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <USER_initialize+0x20>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bc80      	pop	{r7}
 800c6ba:	4770      	bx	lr
 800c6bc:	20000010 	.word	0x20000010

0800c6c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c6ca:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <USER_status+0x20>)
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c6d0:	4b03      	ldr	r3, [pc, #12]	; (800c6e0 <USER_status+0x20>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bc80      	pop	{r7}
 800c6de:	4770      	bx	lr
 800c6e0:	20000010 	.word	0x20000010

0800c6e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c6f4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bc80      	pop	{r7}
 800c6fe:	4770      	bx	lr

0800c700 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	60b9      	str	r1, [r7, #8]
 800c708:	607a      	str	r2, [r7, #4]
 800c70a:	603b      	str	r3, [r7, #0]
 800c70c:	4603      	mov	r3, r0
 800c70e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c710:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	bc80      	pop	{r7}
 800c71a:	4770      	bx	lr

0800c71c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	603a      	str	r2, [r7, #0]
 800c726:	71fb      	strb	r3, [r7, #7]
 800c728:	460b      	mov	r3, r1
 800c72a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	73fb      	strb	r3, [r7, #15]
    return res;
 800c730:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	bc80      	pop	{r7}
 800c73a:	4770      	bx	lr

0800c73c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	460b      	mov	r3, r1
 800c746:	70fb      	strb	r3, [r7, #3]
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7c1b      	ldrb	r3, [r3, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d115      	bne.n	800c77c <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800c750:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c754:	2202      	movs	r2, #2
 800c756:	2101      	movs	r1, #1
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f005 fb9a 	bl	8011e92 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800c766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c76a:	2202      	movs	r2, #2
 800c76c:	2181      	movs	r1, #129	; 0x81
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f005 fb8f 	bl	8011e92 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	62da      	str	r2, [r3, #44]	; 0x2c
 800c77a:	e012      	b.n	800c7a2 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800c77c:	2340      	movs	r3, #64	; 0x40
 800c77e:	2202      	movs	r2, #2
 800c780:	2101      	movs	r1, #1
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f005 fb85 	bl	8011e92 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800c790:	2340      	movs	r3, #64	; 0x40
 800c792:	2202      	movs	r2, #2
 800c794:	2181      	movs	r1, #129	; 0x81
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f005 fb7b 	bl	8011e92 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800c7a2:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800c7a6:	f005 fcbb 	bl	8012120 <USBD_static_malloc>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 800c7bc:	2302      	movs	r3, #2
 800c7be:	e003      	b.n	800c7c8 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f9d9 	bl	800cb78 <MSC_BOT_Init>

  return USBD_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800c7dc:	2101      	movs	r1, #1
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f005 fb7d 	bl	8011ede <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800c7ec:	2181      	movs	r1, #129	; 0x81
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f005 fb75 	bl	8011ede <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fa06 	bl	800cc0c <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c806:	2b00      	cmp	r3, #0
 800c808:	d009      	beq.n	800c81e <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c810:	4618      	mov	r0, r3
 800c812:	f005 fc91 	bl	8012138 <USBD_static_free>
    pdev->pClassData  = NULL;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c838:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800c83e:	2300      	movs	r3, #0
 800c840:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d04d      	beq.n	800c8ea <USBD_MSC_Setup+0xc2>
 800c84e:	2b20      	cmp	r3, #32
 800c850:	f040 8113 	bne.w	800ca7a <USBD_MSC_Setup+0x252>
  {

    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	785b      	ldrb	r3, [r3, #1]
 800c858:	2bfe      	cmp	r3, #254	; 0xfe
 800c85a:	d002      	beq.n	800c862 <USBD_MSC_Setup+0x3a>
 800c85c:	2bff      	cmp	r3, #255	; 0xff
 800c85e:	d024      	beq.n	800c8aa <USBD_MSC_Setup+0x82>
 800c860:	e03b      	b.n	800c8da <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	885b      	ldrh	r3, [r3, #2]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d118      	bne.n	800c89c <USBD_MSC_Setup+0x74>
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	88db      	ldrh	r3, [r3, #6]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d114      	bne.n	800c89c <USBD_MSC_Setup+0x74>
         ((req->bmRequest & 0x80U) == 0x80U))
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 1U) &&
 800c878:	2b00      	cmp	r3, #0
 800c87a:	da0f      	bge.n	800c89c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	4798      	blx	r3
 800c886:	4603      	mov	r3, r0
 800c888:	461a      	mov	r2, r3
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	601a      	str	r2, [r3, #0]
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	2201      	movs	r2, #1
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f002 f90f 	bl	800eab8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c89a:	e025      	b.n	800c8e8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f002 f8a0 	bl	800e9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	75fb      	strb	r3, [r7, #23]
      break;
 800c8a8:	e01e      	b.n	800c8e8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10c      	bne.n	800c8cc <USBD_MSC_Setup+0xa4>
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	88db      	ldrh	r3, [r3, #6]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d108      	bne.n	800c8cc <USBD_MSC_Setup+0xa4>
         ((req->bmRequest & 0x80U) != 0x80U))
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	b25b      	sxtb	r3, r3
      if((req->wValue  == 0U) && (req->wLength == 0U) &&
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	db03      	blt.n	800c8cc <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f987 	bl	800cbd8 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev , req);
        ret = USBD_FAIL;
      }
      break;
 800c8ca:	e00d      	b.n	800c8e8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev , req);
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f002 f888 	bl	800e9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c8d8:	e006      	b.n	800c8e8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev , req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f002 f881 	bl	800e9e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	75fb      	strb	r3, [r7, #23]
      break;
 800c8e6:	bf00      	nop
    }
    break;
 800c8e8:	e0ce      	b.n	800ca88 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	785b      	ldrb	r3, [r3, #1]
 800c8ee:	2b0b      	cmp	r3, #11
 800c8f0:	f200 80bb 	bhi.w	800ca6a <USBD_MSC_Setup+0x242>
 800c8f4:	a201      	add	r2, pc, #4	; (adr r2, 800c8fc <USBD_MSC_Setup+0xd4>)
 800c8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fa:	bf00      	nop
 800c8fc:	0800c92d 	.word	0x0800c92d
 800c900:	0800c9a3 	.word	0x0800c9a3
 800c904:	0800ca6b 	.word	0x0800ca6b
 800c908:	0800ca6b 	.word	0x0800ca6b
 800c90c:	0800ca6b 	.word	0x0800ca6b
 800c910:	0800ca6b 	.word	0x0800ca6b
 800c914:	0800ca6b 	.word	0x0800ca6b
 800c918:	0800ca6b 	.word	0x0800ca6b
 800c91c:	0800ca6b 	.word	0x0800ca6b
 800c920:	0800ca6b 	.word	0x0800ca6b
 800c924:	0800c955 	.word	0x0800c955
 800c928:	0800c97d 	.word	0x0800c97d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c932:	2b03      	cmp	r3, #3
 800c934:	d107      	bne.n	800c946 <USBD_MSC_Setup+0x11e>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c936:	f107 030e 	add.w	r3, r7, #14
 800c93a:	2202      	movs	r2, #2
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f002 f8ba 	bl	800eab8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c944:	e098      	b.n	800ca78 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f002 f84b 	bl	800e9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 800c94e:	2302      	movs	r3, #2
 800c950:	75fb      	strb	r3, [r7, #23]
      break;
 800c952:	e091      	b.n	800ca78 <USBD_MSC_Setup+0x250>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d107      	bne.n	800c96e <USBD_MSC_Setup+0x146>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	3304      	adds	r3, #4
 800c962:	2201      	movs	r2, #1
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f002 f8a6 	bl	800eab8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c96c:	e084      	b.n	800ca78 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f002 f837 	bl	800e9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 800c976:	2302      	movs	r3, #2
 800c978:	75fb      	strb	r3, [r7, #23]
      break;
 800c97a:	e07d      	b.n	800ca78 <USBD_MSC_Setup+0x250>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c982:	2b03      	cmp	r3, #3
 800c984:	d106      	bne.n	800c994 <USBD_MSC_Setup+0x16c>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	885b      	ldrh	r3, [r3, #2]
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c992:	e071      	b.n	800ca78 <USBD_MSC_Setup+0x250>
        USBD_CtlError (pdev, req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f002 f824 	bl	800e9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 800c99c:	2302      	movs	r3, #2
 800c99e:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a0:	e06a      	b.n	800ca78 <USBD_MSC_Setup+0x250>

    case USB_REQ_CLEAR_FEATURE:

      /* Flush the FIFO and Clear the stall status */
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	889b      	ldrh	r3, [r3, #4]
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f005 fab6 	bl	8011f1c <USBD_LL_FlushEP>

      /* Reactivate the EP */
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	889b      	ldrh	r3, [r3, #4]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f005 fa90 	bl	8011ede <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	889b      	ldrh	r3, [r3, #4]
 800c9c2:	b25b      	sxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	da23      	bge.n	800ca10 <USBD_MSC_Setup+0x1e8>
      {
        pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	889b      	ldrh	r3, [r3, #4]
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	f003 020f 	and.w	r2, r3, #15
 800c9d2:	6879      	ldr	r1, [r7, #4]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	440b      	add	r3, r1
 800c9de:	3318      	adds	r3, #24
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	7c1b      	ldrb	r3, [r3, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d107      	bne.n	800c9fc <USBD_MSC_Setup+0x1d4>
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800c9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	2181      	movs	r1, #129	; 0x81
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f005 fa4c 	bl	8011e92 <USBD_LL_OpenEP>
 800c9fa:	e005      	b.n	800ca08 <USBD_MSC_Setup+0x1e0>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP IN */
          USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800c9fc:	2340      	movs	r3, #64	; 0x40
 800c9fe:	2202      	movs	r2, #2
 800ca00:	2181      	movs	r1, #129	; 0x81
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f005 fa45 	bl	8011e92 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca0e:	e024      	b.n	800ca5a <USBD_MSC_Setup+0x232>
      }
      else
      {
        pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	889b      	ldrh	r3, [r3, #4]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	f003 020f 	and.w	r2, r3, #15
 800ca1a:	6879      	ldr	r1, [r7, #4]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4413      	add	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	440b      	add	r3, r1
 800ca26:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
        if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7c1b      	ldrb	r3, [r3, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d107      	bne.n	800ca46 <USBD_MSC_Setup+0x21e>
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800ca36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f005 fa27 	bl	8011e92 <USBD_LL_OpenEP>
 800ca44:	e005      	b.n	800ca52 <USBD_MSC_Setup+0x22a>
                         MSC_MAX_HS_PACKET);
        }
        else
        {
          /* Open EP OUT */
          USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800ca46:	2340      	movs	r3, #64	; 0x40
 800ca48:	2202      	movs	r2, #2
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f005 fa20 	bl	8011e92 <USBD_LL_OpenEP>
                         MSC_MAX_FS_PACKET);
        }
        pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
      }

      /* Handle BOT error */
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	889b      	ldrh	r3, [r3, #4]
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	4619      	mov	r1, r3
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fa50 	bl	800cf08 <MSC_BOT_CplClrFeature>
      break;
 800ca68:	e006      	b.n	800ca78 <USBD_MSC_Setup+0x250>

    default:
      USBD_CtlError (pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 ffb9 	bl	800e9e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800ca72:	2302      	movs	r3, #2
 800ca74:	75fb      	strb	r3, [r7, #23]
      break;
 800ca76:	bf00      	nop
    }
    break;
 800ca78:	e006      	b.n	800ca88 <USBD_MSC_Setup+0x260>

  default:
    USBD_CtlError (pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f001 ffb1 	bl	800e9e4 <USBD_CtlError>
    ret = USBD_FAIL;
 800ca82:	2302      	movs	r3, #2
 800ca84:	75fb      	strb	r3, [r7, #23]
    break;
 800ca86:	bf00      	nop
  }

  return ret;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop

0800ca94 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800caa0:	78fb      	ldrb	r3, [r7, #3]
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f8c1 	bl	800cc2c <MSC_BOT_DataIn>
  return USBD_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev,
                               uint8_t epnum)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f8e2 	bl	800cc8e <MSC_BOT_DataOut>
  return USBD_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2220      	movs	r2, #32
 800cae0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800cae2:	4b03      	ldr	r3, [pc, #12]	; (800caf0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	bc80      	pop	{r7}
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	20000060 	.word	0x20000060

0800caf4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2220      	movs	r2, #32
 800cb00:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800cb02:	4b03      	ldr	r3, [pc, #12]	; (800cb10 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bc80      	pop	{r7}
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	20000080 	.word	0x20000080

0800cb14 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2220      	movs	r2, #32
 800cb20:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800cb22:	4b03      	ldr	r3, [pc, #12]	; (800cb30 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bc80      	pop	{r7}
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	200000a0 	.word	0x200000a0

0800cb34 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	220a      	movs	r2, #10
 800cb40:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800cb42:	4b03      	ldr	r3, [pc, #12]	; (800cb50 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bc80      	pop	{r7}
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	200000c0 	.word	0x200000c0

0800cb54 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev,
                                    USBD_StorageTypeDef *fops)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	683a      	ldr	r2, [r7, #0]
 800cb68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bc80      	pop	{r7}
 800cb76:	4770      	bx	lr

0800cb78 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb86:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2000      	movs	r0, #0
 800cbae:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f005 f9b2 	bl	8011f1c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800cbb8:	2181      	movs	r1, #129	; 0x81
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f005 f9ae 	bl	8011f1c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800cbc6:	231f      	movs	r3, #31
 800cbc8:	2101      	movs	r1, #1
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f005 fa71 	bl	80120b2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800cbd0:	bf00      	nop
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cbe6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2200      	movs	r2, #0
 800cbec:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800cbfa:	231f      	movs	r3, #31
 800cbfc:	2101      	movs	r1, #1
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f005 fa57 	bl	80120b2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800cc04:	bf00      	nop
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc1a:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	721a      	strb	r2, [r3, #8]
}
 800cc22:	bf00      	nop
 800cc24:	3714      	adds	r7, #20
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bc80      	pop	{r7}
 800cc2a:	4770      	bx	lr

0800cc2c <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc3e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	7a1b      	ldrb	r3, [r3, #8]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d004      	beq.n	800cc52 <MSC_BOT_DataIn+0x26>
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	db19      	blt.n	800cc80 <MSC_BOT_DataIn+0x54>
 800cc4c:	2b04      	cmp	r3, #4
 800cc4e:	dc17      	bgt.n	800cc80 <MSC_BOT_DataIn+0x54>
 800cc50:	e011      	b.n	800cc76 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800cc5e:	461a      	mov	r2, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f979 	bl	800cf58 <SCSI_ProcessCmd>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	da0b      	bge.n	800cc84 <MSC_BOT_DataIn+0x58>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800cc6c:	2101      	movs	r1, #1
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f8f0 	bl	800ce54 <MSC_BOT_SendCSW>
    }
    break;
 800cc74:	e006      	b.n	800cc84 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800cc76:	2100      	movs	r1, #0
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f8eb 	bl	800ce54 <MSC_BOT_SendCSW>

    break;
 800cc7e:	e002      	b.n	800cc86 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800cc80:	bf00      	nop
 800cc82:	e000      	b.n	800cc86 <MSC_BOT_DataIn+0x5a>
    break;
 800cc84:	bf00      	nop
  }
}
 800cc86:	bf00      	nop
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev,
                      uint8_t epnum)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b084      	sub	sp, #16
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	460b      	mov	r3, r1
 800cc98:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cca0:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	7a1b      	ldrb	r3, [r3, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <MSC_BOT_DataOut+0x22>
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d004      	beq.n	800ccb8 <MSC_BOT_DataOut+0x2a>
    }

    break;

  default:
    break;
 800ccae:	e015      	b.n	800ccdc <MSC_BOT_DataOut+0x4e>
    MSC_BOT_CBW_Decode(pdev);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 f817 	bl	800cce4 <MSC_BOT_CBW_Decode>
    break;
 800ccb6:	e011      	b.n	800ccdc <MSC_BOT_DataOut+0x4e>
    if(SCSI_ProcessCmd(pdev,
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f946 	bl	800cf58 <SCSI_ProcessCmd>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	da03      	bge.n	800ccda <MSC_BOT_DataOut+0x4c>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f8bd 	bl	800ce54 <MSC_BOT_SendCSW>
    break;
 800ccda:	bf00      	nop
  }
}
 800ccdc:	bf00      	nop
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccf2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f005 f9f2 	bl	80120f8 <USBD_LL_GetRxDataSize>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b1f      	cmp	r3, #31
 800cd18:	d114      	bne.n	800cd44 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800cd20:	4a32      	ldr	r2, [pc, #200]	; (800cdec <MSC_BOT_CBW_Decode+0x108>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d10e      	bne.n	800cd44 <MSC_BOT_CBW_Decode+0x60>
        (hmsc->cbw.bLUN > 1U) ||
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d809      	bhi.n	800cd44 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
        (hmsc->cbw.bLUN > 1U) ||
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d004      	beq.n	800cd44 <MSC_BOT_CBW_Decode+0x60>
          (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800cd40:	2b10      	cmp	r3, #16
 800cd42:	d90e      	bls.n	800cd62 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800cd4a:	2320      	movs	r3, #32
 800cd4c:	2205      	movs	r2, #5
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fc48 	bl	800d5e4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2202      	movs	r2, #2
 800cd58:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f8a6 	bl	800ceac <MSC_BOT_Abort>
 800cd60:	e041      	b.n	800cde6 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if(SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800cd6e:	461a      	mov	r2, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f8f1 	bl	800cf58 <SCSI_ProcessCmd>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	da0c      	bge.n	800cd96 <MSC_BOT_CBW_Decode+0xb2>
    {
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	7a1b      	ldrb	r3, [r3, #8]
 800cd80:	2b05      	cmp	r3, #5
 800cd82:	d104      	bne.n	800cd8e <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800cd84:	2101      	movs	r1, #1
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f864 	bl	800ce54 <MSC_BOT_SendCSW>
 800cd8c:	e02b      	b.n	800cde6 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f88c 	bl	800ceac <MSC_BOT_Abort>
 800cd94:	e027      	b.n	800cde6 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	7a1b      	ldrb	r3, [r3, #8]
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d022      	beq.n	800cde4 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d01e      	beq.n	800cde4 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d01a      	beq.n	800cde4 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	895b      	ldrh	r3, [r3, #10]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d009      	beq.n	800cdca <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f103 010c 	add.w	r1, r3, #12
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	895b      	ldrh	r3, [r3, #10]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f814 	bl	800cdf0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800cdc8:	e00d      	b.n	800cde6 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	895b      	ldrh	r3, [r3, #10]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d104      	bne.n	800cddc <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f83d 	bl	800ce54 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800cdda:	e004      	b.n	800cde6 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f865 	bl	800ceac <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800cde2:	e000      	b.n	800cde6 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800cde4:	bf00      	nop
    }
  }
}
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	43425355 	.word	0x43425355

0800cdf0 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t* pbuf,
                              uint16_t len)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce04:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ce0c:	88fb      	ldrh	r3, [r7, #6]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d204      	bcs.n	800ce1c <MSC_BOT_SendData+0x2c>
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	e000      	b.n	800ce1e <MSC_BOT_SendData+0x2e>
 800ce1c:	88fb      	ldrh	r3, [r7, #6]
 800ce1e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ce26:	88fb      	ldrh	r3, [r7, #6]
 800ce28:	1ad2      	subs	r2, r2, r3
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2204      	movs	r2, #4
 800ce3c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800ce3e:	8a7b      	ldrh	r3, [r7, #18]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	2181      	movs	r1, #129	; 0x81
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f005 f911 	bl	801206c <USBD_LL_Transmit>
}
 800ce4a:	bf00      	nop
 800ce4c:	3718      	adds	r7, #24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce66:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4a0f      	ldr	r2, [pc, #60]	; (800cea8 <MSC_BOT_SendCSW+0x54>)
 800ce6c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	78fa      	ldrb	r2, [r7, #3]
 800ce74:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800ce84:	230d      	movs	r3, #13
 800ce86:	2181      	movs	r1, #129	; 0x81
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f005 f8ef 	bl	801206c <USBD_LL_Transmit>
                    USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800ce94:	231f      	movs	r3, #31
 800ce96:	2101      	movs	r1, #1
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f005 f90a 	bl	80120b2 <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);
}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	53425355 	.word	0x53425355

0800ceac <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ceba:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10c      	bne.n	800cee0 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d007      	beq.n	800cee0 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d103      	bne.n	800cee0 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800ced8:	2101      	movs	r1, #1
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f005 f83d 	bl	8011f5a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800cee0:	2181      	movs	r1, #129	; 0x81
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f005 f839 	bl	8011f5a <USBD_LL_StallEP>

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	7a5b      	ldrb	r3, [r3, #9]
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d107      	bne.n	800cf00 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800cef6:	231f      	movs	r3, #31
 800cef8:	2101      	movs	r1, #1
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f005 f8d9 	bl	80120b2 <USBD_LL_PrepareReceive>
                            USBD_BOT_CBW_LENGTH);
  }
}
 800cf00:	bf00      	nop
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf1a:	60fb      	str	r3, [r7, #12]

  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)/* Bad CBW Signature */
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	7a5b      	ldrb	r3, [r3, #9]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d107      	bne.n	800cf34 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800cf24:	2181      	movs	r1, #129	; 0x81
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f005 f817 	bl	8011f5a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	725a      	strb	r2, [r3, #9]
 800cf32:	e00d      	b.n	800cf50 <MSC_BOT_CplClrFeature+0x48>
  }
  else if(((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800cf34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	da08      	bge.n	800cf4e <MSC_BOT_CplClrFeature+0x46>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	7a5b      	ldrb	r3, [r3, #9]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d004      	beq.n	800cf4e <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800cf44:	2101      	movs	r1, #1
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff ff84 	bl	800ce54 <MSC_BOT_SendCSW>
 800cf4c:	e000      	b.n	800cf50 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800cf4e:	bf00      	nop
  }
}
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	460b      	mov	r3, r1
 800cf62:	607a      	str	r2, [r7, #4]
 800cf64:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2b5a      	cmp	r3, #90	; 0x5a
 800cf6c:	f200 810e 	bhi.w	800d18c <SCSI_ProcessCmd+0x234>
 800cf70:	a201      	add	r2, pc, #4	; (adr r2, 800cf78 <SCSI_ProcessCmd+0x20>)
 800cf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf76:	bf00      	nop
 800cf78:	0800d0e5 	.word	0x0800d0e5
 800cf7c:	0800d18d 	.word	0x0800d18d
 800cf80:	0800d18d 	.word	0x0800d18d
 800cf84:	0800d0f3 	.word	0x0800d0f3
 800cf88:	0800d18d 	.word	0x0800d18d
 800cf8c:	0800d18d 	.word	0x0800d18d
 800cf90:	0800d18d 	.word	0x0800d18d
 800cf94:	0800d18d 	.word	0x0800d18d
 800cf98:	0800d18d 	.word	0x0800d18d
 800cf9c:	0800d18d 	.word	0x0800d18d
 800cfa0:	0800d18d 	.word	0x0800d18d
 800cfa4:	0800d18d 	.word	0x0800d18d
 800cfa8:	0800d18d 	.word	0x0800d18d
 800cfac:	0800d18d 	.word	0x0800d18d
 800cfb0:	0800d18d 	.word	0x0800d18d
 800cfb4:	0800d18d 	.word	0x0800d18d
 800cfb8:	0800d18d 	.word	0x0800d18d
 800cfbc:	0800d18d 	.word	0x0800d18d
 800cfc0:	0800d101 	.word	0x0800d101
 800cfc4:	0800d18d 	.word	0x0800d18d
 800cfc8:	0800d18d 	.word	0x0800d18d
 800cfcc:	0800d18d 	.word	0x0800d18d
 800cfd0:	0800d18d 	.word	0x0800d18d
 800cfd4:	0800d18d 	.word	0x0800d18d
 800cfd8:	0800d18d 	.word	0x0800d18d
 800cfdc:	0800d18d 	.word	0x0800d18d
 800cfe0:	0800d12b 	.word	0x0800d12b
 800cfe4:	0800d10f 	.word	0x0800d10f
 800cfe8:	0800d18d 	.word	0x0800d18d
 800cfec:	0800d18d 	.word	0x0800d18d
 800cff0:	0800d11d 	.word	0x0800d11d
 800cff4:	0800d18d 	.word	0x0800d18d
 800cff8:	0800d18d 	.word	0x0800d18d
 800cffc:	0800d18d 	.word	0x0800d18d
 800d000:	0800d18d 	.word	0x0800d18d
 800d004:	0800d147 	.word	0x0800d147
 800d008:	0800d18d 	.word	0x0800d18d
 800d00c:	0800d155 	.word	0x0800d155
 800d010:	0800d18d 	.word	0x0800d18d
 800d014:	0800d18d 	.word	0x0800d18d
 800d018:	0800d163 	.word	0x0800d163
 800d01c:	0800d18d 	.word	0x0800d18d
 800d020:	0800d171 	.word	0x0800d171
 800d024:	0800d18d 	.word	0x0800d18d
 800d028:	0800d18d 	.word	0x0800d18d
 800d02c:	0800d18d 	.word	0x0800d18d
 800d030:	0800d18d 	.word	0x0800d18d
 800d034:	0800d17f 	.word	0x0800d17f
 800d038:	0800d18d 	.word	0x0800d18d
 800d03c:	0800d18d 	.word	0x0800d18d
 800d040:	0800d18d 	.word	0x0800d18d
 800d044:	0800d18d 	.word	0x0800d18d
 800d048:	0800d18d 	.word	0x0800d18d
 800d04c:	0800d18d 	.word	0x0800d18d
 800d050:	0800d18d 	.word	0x0800d18d
 800d054:	0800d18d 	.word	0x0800d18d
 800d058:	0800d18d 	.word	0x0800d18d
 800d05c:	0800d18d 	.word	0x0800d18d
 800d060:	0800d18d 	.word	0x0800d18d
 800d064:	0800d18d 	.word	0x0800d18d
 800d068:	0800d18d 	.word	0x0800d18d
 800d06c:	0800d18d 	.word	0x0800d18d
 800d070:	0800d18d 	.word	0x0800d18d
 800d074:	0800d18d 	.word	0x0800d18d
 800d078:	0800d18d 	.word	0x0800d18d
 800d07c:	0800d18d 	.word	0x0800d18d
 800d080:	0800d18d 	.word	0x0800d18d
 800d084:	0800d18d 	.word	0x0800d18d
 800d088:	0800d18d 	.word	0x0800d18d
 800d08c:	0800d18d 	.word	0x0800d18d
 800d090:	0800d18d 	.word	0x0800d18d
 800d094:	0800d18d 	.word	0x0800d18d
 800d098:	0800d18d 	.word	0x0800d18d
 800d09c:	0800d18d 	.word	0x0800d18d
 800d0a0:	0800d18d 	.word	0x0800d18d
 800d0a4:	0800d18d 	.word	0x0800d18d
 800d0a8:	0800d18d 	.word	0x0800d18d
 800d0ac:	0800d18d 	.word	0x0800d18d
 800d0b0:	0800d18d 	.word	0x0800d18d
 800d0b4:	0800d18d 	.word	0x0800d18d
 800d0b8:	0800d18d 	.word	0x0800d18d
 800d0bc:	0800d18d 	.word	0x0800d18d
 800d0c0:	0800d18d 	.word	0x0800d18d
 800d0c4:	0800d18d 	.word	0x0800d18d
 800d0c8:	0800d18d 	.word	0x0800d18d
 800d0cc:	0800d18d 	.word	0x0800d18d
 800d0d0:	0800d18d 	.word	0x0800d18d
 800d0d4:	0800d18d 	.word	0x0800d18d
 800d0d8:	0800d18d 	.word	0x0800d18d
 800d0dc:	0800d18d 	.word	0x0800d18d
 800d0e0:	0800d139 	.word	0x0800d139
  {
  case SCSI_TEST_UNIT_READY:
    SCSI_TestUnitReady(pdev, lun, cmd);
 800d0e4:	7afb      	ldrb	r3, [r7, #11]
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f000 f85c 	bl	800d1a8 <SCSI_TestUnitReady>
    break;
 800d0f0:	e055      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_REQUEST_SENSE:
    SCSI_RequestSense (pdev, lun, cmd);
 800d0f2:	7afb      	ldrb	r3, [r7, #11]
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f000 fa09 	bl	800d510 <SCSI_RequestSense>
    break;
 800d0fe:	e04e      	b.n	800d19e <SCSI_ProcessCmd+0x246>
  case SCSI_INQUIRY:
    SCSI_Inquiry(pdev, lun, cmd);
 800d100:	7afb      	ldrb	r3, [r7, #11]
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	4619      	mov	r1, r3
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 f888 	bl	800d21c <SCSI_Inquiry>
    break;
 800d10c:	e047      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_START_STOP_UNIT:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800d10e:	7afb      	ldrb	r3, [r7, #11]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	4619      	mov	r1, r3
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 fa9e 	bl	800d656 <SCSI_StartStopUnit>
    break;
 800d11a:	e040      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    SCSI_StartStopUnit(pdev, lun, cmd);
 800d11c:	7afb      	ldrb	r3, [r7, #11]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	4619      	mov	r1, r3
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f000 fa97 	bl	800d656 <SCSI_StartStopUnit>
    break;
 800d128:	e039      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE6:
    SCSI_ModeSense6 (pdev, lun, cmd);
 800d12a:	7afb      	ldrb	r3, [r7, #11]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	4619      	mov	r1, r3
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f000 f99d 	bl	800d470 <SCSI_ModeSense6>
    break;
 800d136:	e032      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_MODE_SENSE10:
    SCSI_ModeSense10 (pdev, lun, cmd);
 800d138:	7afb      	ldrb	r3, [r7, #11]
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	4619      	mov	r1, r3
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f000 f9be 	bl	800d4c0 <SCSI_ModeSense10>
    break;
 800d144:	e02b      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_READ_FORMAT_CAPACITIES:
    SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d146:	7afb      	ldrb	r3, [r7, #11]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	4619      	mov	r1, r3
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 f92a 	bl	800d3a6 <SCSI_ReadFormatCapacity>
    break;
 800d152:	e024      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_READ_CAPACITY10:
    SCSI_ReadCapacity10(pdev, lun, cmd);
 800d154:	7afb      	ldrb	r3, [r7, #11]
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	4619      	mov	r1, r3
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f000 f8bc 	bl	800d2d8 <SCSI_ReadCapacity10>
    break;
 800d160:	e01d      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_READ10:
    SCSI_Read10(pdev, lun, cmd);
 800d162:	7afb      	ldrb	r3, [r7, #11]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	4619      	mov	r1, r3
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f000 fa88 	bl	800d67e <SCSI_Read10>
    break;
 800d16e:	e016      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_WRITE10:
    SCSI_Write10(pdev, lun, cmd);
 800d170:	7afb      	ldrb	r3, [r7, #11]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	4619      	mov	r1, r3
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f000 fb0d 	bl	800d796 <SCSI_Write10>
    break;
 800d17c:	e00f      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  case SCSI_VERIFY10:
    SCSI_Verify10(pdev, lun, cmd);
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	4619      	mov	r1, r3
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 fbb6 	bl	800d8f6 <SCSI_Verify10>
    break;
 800d18a:	e008      	b.n	800d19e <SCSI_ProcessCmd+0x246>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d18c:	7af9      	ldrb	r1, [r7, #11]
 800d18e:	2320      	movs	r3, #32
 800d190:	2205      	movs	r2, #5
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 fa26 	bl	800d5e4 <SCSI_SenseCode>
    return -1;
 800d198:	f04f 33ff 	mov.w	r3, #4294967295
 800d19c:	e000      	b.n	800d1a0 <SCSI_ProcessCmd+0x248>
  }
  return 0;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d1bc:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00a      	beq.n	800d1de <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d1ce:	2320      	movs	r3, #32
 800d1d0:	2205      	movs	r2, #5
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f000 fa06 	bl	800d5e4 <SCSI_SenseCode>

    return -1;
 800d1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1dc:	e019      	b.n	800d212 <SCSI_TestUnitReady+0x6a>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	7afa      	ldrb	r2, [r7, #11]
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	4798      	blx	r3
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00b      	beq.n	800d20a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d1f2:	7af9      	ldrb	r1, [r7, #11]
 800d1f4:	233a      	movs	r3, #58	; 0x3a
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f000 f9f3 	bl	800d5e4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2205      	movs	r2, #5
 800d202:	721a      	strb	r2, [r3, #8]

    return -1;
 800d204:	f04f 33ff 	mov.w	r3, #4294967295
 800d208:	e003      	b.n	800d212 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2200      	movs	r2, #0
 800d20e:	815a      	strh	r2, [r3, #10]

  return 0;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
	...

0800d21c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b089      	sub	sp, #36	; 0x24
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	460b      	mov	r3, r1
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d230:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3301      	adds	r3, #1
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d014      	beq.n	800d26a <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800d240:	2307      	movs	r3, #7
 800d242:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	8bfa      	ldrh	r2, [r7, #30]
 800d248:	815a      	strh	r2, [r3, #10]

    while (len)
 800d24a:	e00a      	b.n	800d262 <SCSI_Inquiry+0x46>
    {
      len--;
 800d24c:	8bfb      	ldrh	r3, [r7, #30]
 800d24e:	3b01      	subs	r3, #1
 800d250:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800d252:	8bfa      	ldrh	r2, [r7, #30]
 800d254:	8bfb      	ldrh	r3, [r7, #30]
 800d256:	491f      	ldr	r1, [pc, #124]	; (800d2d4 <SCSI_Inquiry+0xb8>)
 800d258:	5c89      	ldrb	r1, [r1, r2]
 800d25a:	69ba      	ldr	r2, [r7, #24]
 800d25c:	4413      	add	r3, r2
 800d25e:	460a      	mov	r2, r1
 800d260:	731a      	strb	r2, [r3, #12]
    while (len)
 800d262:	8bfb      	ldrh	r3, [r7, #30]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1f1      	bne.n	800d24c <SCSI_Inquiry+0x30>
 800d268:	e02e      	b.n	800d2c8 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d270:	69d9      	ldr	r1, [r3, #28]
 800d272:	7afa      	ldrb	r2, [r7, #11]
 800d274:	4613      	mov	r3, r2
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	3304      	adds	r3, #4
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	b29b      	uxth	r3, r3
 800d288:	3305      	adds	r3, #5
 800d28a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	3304      	adds	r3, #4
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	b29b      	uxth	r3, r3
 800d294:	8bfa      	ldrh	r2, [r7, #30]
 800d296:	429a      	cmp	r2, r3
 800d298:	d303      	bcc.n	800d2a2 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	3304      	adds	r3, #4
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	8bfa      	ldrh	r2, [r7, #30]
 800d2a6:	815a      	strh	r2, [r3, #10]

    while (len)
 800d2a8:	e00b      	b.n	800d2c2 <SCSI_Inquiry+0xa6>
    {
      len--;
 800d2aa:	8bfb      	ldrh	r3, [r7, #30]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800d2b0:	8bfb      	ldrh	r3, [r7, #30]
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	441a      	add	r2, r3
 800d2b6:	8bfb      	ldrh	r3, [r7, #30]
 800d2b8:	7811      	ldrb	r1, [r2, #0]
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	4413      	add	r3, r2
 800d2be:	460a      	mov	r2, r1
 800d2c0:	731a      	strb	r2, [r3, #12]
    while (len)
 800d2c2:	8bfb      	ldrh	r3, [r7, #30]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1f0      	bne.n	800d2aa <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3724      	adds	r7, #36	; 0x24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bc80      	pop	{r7}
 800d2d2:	4770      	bx	lr
 800d2d4:	0801a488 	.word	0x0801a488

0800d2d8 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	607a      	str	r2, [r7, #4]
 800d2e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d2ec:	617b      	str	r3, [r7, #20]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	697a      	ldr	r2, [r7, #20]
 800d2f8:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800d302:	7af8      	ldrb	r0, [r7, #11]
 800d304:	4798      	blx	r3
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d008      	beq.n	800d31e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d30c:	7af9      	ldrb	r1, [r7, #11]
 800d30e:	233a      	movs	r3, #58	; 0x3a
 800d310:	2202      	movs	r2, #2
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f000 f966 	bl	800d5e4 <SCSI_SenseCode>
    return -1;
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	e03f      	b.n	800d39e <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800d324:	3b01      	subs	r3, #1
 800d326:	0e1b      	lsrs	r3, r3, #24
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800d334:	3b01      	subs	r3, #1
 800d336:	0c1b      	lsrs	r3, r3, #16
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800d344:	3b01      	subs	r3, #1
 800d346:	0a1b      	lsrs	r3, r3, #8
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800d354:	b2db      	uxtb	r3, r3
 800d356:	3b01      	subs	r3, #1
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800d364:	161b      	asrs	r3, r3, #24
 800d366:	b2da      	uxtb	r2, r3
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800d372:	141b      	asrs	r3, r3, #16
 800d374:	b2da      	uxtb	r2, r3
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800d380:	0a1b      	lsrs	r3, r3, #8
 800d382:	b29b      	uxth	r3, r3
 800d384:	b2da      	uxtb	r2, r3
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800d390:	b2da      	uxtb	r2, r3
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2208      	movs	r2, #8
 800d39a:	815a      	strh	r2, [r3, #10]
    return 0;
 800d39c:	2300      	movs	r3, #0
  }
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3718      	adds	r7, #24
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b088      	sub	sp, #32
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	60f8      	str	r0, [r7, #12]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	607a      	str	r2, [r7, #4]
 800d3b2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3ba:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for(i = 0U; i < 12U ; i++)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	83fb      	strh	r3, [r7, #30]
 800d3c0:	e007      	b.n	800d3d2 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800d3c2:	8bfb      	ldrh	r3, [r7, #30]
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	731a      	strb	r2, [r3, #12]
  for(i = 0U; i < 12U ; i++)
 800d3cc:	8bfb      	ldrh	r3, [r7, #30]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	83fb      	strh	r3, [r7, #30]
 800d3d2:	8bfb      	ldrh	r3, [r7, #30]
 800d3d4:	2b0b      	cmp	r3, #11
 800d3d6:	d9f4      	bls.n	800d3c2 <SCSI_ReadFormatCapacity+0x1c>
  }

  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	f107 0216 	add.w	r2, r7, #22
 800d3e4:	f107 0110 	add.w	r1, r7, #16
 800d3e8:	7af8      	ldrb	r0, [r7, #11]
 800d3ea:	4798      	blx	r3
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d008      	beq.n	800d404 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d3f2:	7af9      	ldrb	r1, [r7, #11]
 800d3f4:	233a      	movs	r3, #58	; 0x3a
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f000 f8f3 	bl	800d5e4 <SCSI_SenseCode>
    return -1;
 800d3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d402:	e030      	b.n	800d466 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	2208      	movs	r2, #8
 800d408:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	0e1b      	lsrs	r3, r3, #24
 800d410:	b2da      	uxtb	r2, r3
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	3b01      	subs	r3, #1
 800d41a:	0c1b      	lsrs	r3, r3, #16
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	3b01      	subs	r3, #1
 800d426:	0a1b      	lsrs	r3, r3, #8
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	3b01      	subs	r3, #1
 800d434:	b2da      	uxtb	r2, r3
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	2202      	movs	r2, #2
 800d43e:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800d440:	8afb      	ldrh	r3, [r7, #22]
 800d442:	141b      	asrs	r3, r3, #16
 800d444:	b2da      	uxtb	r2, r3
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800d44a:	8afb      	ldrh	r3, [r7, #22]
 800d44c:	0a1b      	lsrs	r3, r3, #8
 800d44e:	b29b      	uxth	r3, r3
 800d450:	b2da      	uxtb	r2, r3
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800d456:	8afb      	ldrh	r3, [r7, #22]
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	220c      	movs	r2, #12
 800d462:	815a      	strh	r2, [r3, #10]
    return 0;
 800d464:	2300      	movs	r3, #0
  }
}
 800d466:	4618      	mov	r0, r3
 800d468:	3720      	adds	r7, #32
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
	...

0800d470 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	460b      	mov	r3, r1
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d484:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800d486:	2308      	movs	r3, #8
 800d488:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	8afa      	ldrh	r2, [r7, #22]
 800d48e:	815a      	strh	r2, [r3, #10]

  while (len)
 800d490:	e00a      	b.n	800d4a8 <SCSI_ModeSense6+0x38>
  {
    len--;
 800d492:	8afb      	ldrh	r3, [r7, #22]
 800d494:	3b01      	subs	r3, #1
 800d496:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800d498:	8afa      	ldrh	r2, [r7, #22]
 800d49a:	8afb      	ldrh	r3, [r7, #22]
 800d49c:	4907      	ldr	r1, [pc, #28]	; (800d4bc <SCSI_ModeSense6+0x4c>)
 800d49e:	5c89      	ldrb	r1, [r1, r2]
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	4413      	add	r3, r2
 800d4a4:	460a      	mov	r2, r1
 800d4a6:	731a      	strb	r2, [r3, #12]
  while (len)
 800d4a8:	8afb      	ldrh	r3, [r7, #22]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1f1      	bne.n	800d492 <SCSI_ModeSense6+0x22>
  }
  return 0;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	371c      	adds	r7, #28
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bc80      	pop	{r7}
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	0801a490 	.word	0x0801a490

0800d4c0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800d4ce:	2308      	movs	r3, #8
 800d4d0:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4d8:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	8afa      	ldrh	r2, [r7, #22]
 800d4de:	815a      	strh	r2, [r3, #10]

  while (len)
 800d4e0:	e00a      	b.n	800d4f8 <SCSI_ModeSense10+0x38>
  {
    len--;
 800d4e2:	8afb      	ldrh	r3, [r7, #22]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800d4e8:	8afa      	ldrh	r2, [r7, #22]
 800d4ea:	8afb      	ldrh	r3, [r7, #22]
 800d4ec:	4907      	ldr	r1, [pc, #28]	; (800d50c <SCSI_ModeSense10+0x4c>)
 800d4ee:	5c89      	ldrb	r1, [r1, r2]
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	460a      	mov	r2, r1
 800d4f6:	731a      	strb	r2, [r3, #12]
  while (len)
 800d4f8:	8afb      	ldrh	r3, [r7, #22]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1f1      	bne.n	800d4e2 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	bc80      	pop	{r7}
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	0801a498 	.word	0x0801a498

0800d510 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d510:	b480      	push	{r7}
 800d512:	b087      	sub	sp, #28
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	460b      	mov	r3, r1
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d524:	613b      	str	r3, [r7, #16]

  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800d526:	2300      	movs	r3, #0
 800d528:	75fb      	strb	r3, [r7, #23]
 800d52a:	e007      	b.n	800d53c <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	4413      	add	r3, r2
 800d532:	2200      	movs	r2, #0
 800d534:	731a      	strb	r2, [r3, #12]
  for(i = 0U ;i < REQUEST_SENSE_DATA_LEN; i++)
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	3301      	adds	r3, #1
 800d53a:	75fb      	strb	r3, [r7, #23]
 800d53c:	7dfb      	ldrb	r3, [r7, #23]
 800d53e:	2b11      	cmp	r3, #17
 800d540:	d9f4      	bls.n	800d52c <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0]	= 0x70U;
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	2270      	movs	r2, #112	; 0x70
 800d546:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6U;
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	220c      	movs	r2, #12
 800d54c:	74da      	strb	r2, [r3, #19]

  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d02e      	beq.n	800d5bc <SCSI_RequestSense+0xac>

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800d564:	693a      	ldr	r2, [r7, #16]
 800d566:	3347      	adds	r3, #71	; 0x47
 800d568:	00db      	lsls	r3, r3, #3
 800d56a:	4413      	add	r3, r2
 800d56c:	791a      	ldrb	r2, [r3, #4]
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	3347      	adds	r3, #71	; 0x47
 800d57c:	00db      	lsls	r3, r3, #3
 800d57e:	4413      	add	r3, r2
 800d580:	7a5a      	ldrb	r2, [r3, #9]
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	3347      	adds	r3, #71	; 0x47
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	4413      	add	r3, r2
 800d594:	7a1a      	ldrb	r2, [r3, #8]
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800d5b0:	2b04      	cmp	r3, #4
 800d5b2:	d103      	bne.n	800d5bc <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	2212      	movs	r2, #18
 800d5c0:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b12      	cmp	r3, #18
 800d5ca:	d805      	bhi.n	800d5d8 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	3304      	adds	r3, #4
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	371c      	adds	r7, #28
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bc80      	pop	{r7}
 800d5e2:	4770      	bx	lr

0800d5e4 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	70fb      	strb	r3, [r7, #3]
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	70bb      	strb	r3, [r7, #2]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d604:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	3347      	adds	r3, #71	; 0x47
 800d610:	00db      	lsls	r3, r3, #3
 800d612:	4413      	add	r3, r2
 800d614:	78ba      	ldrb	r2, [r7, #2]
 800d616:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	3347      	adds	r3, #71	; 0x47
 800d622:	00db      	lsls	r3, r3, #3
 800d624:	4413      	add	r3, r2
 800d626:	2200      	movs	r2, #0
 800d628:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800d630:	3301      	adds	r3, #1
 800d632:	b2da      	uxtb	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800d640:	2b04      	cmp	r3, #4
 800d642:	d103      	bne.n	800d64c <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800d64c:	bf00      	nop
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	bc80      	pop	{r7}
 800d654:	4770      	bx	lr

0800d656 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800d656:	b480      	push	{r7}
 800d658:	b087      	sub	sp, #28
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	60f8      	str	r0, [r7, #12]
 800d65e:	460b      	mov	r3, r1
 800d660:	607a      	str	r2, [r7, #4]
 800d662:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d66a:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	2200      	movs	r2, #0
 800d670:	815a      	strh	r2, [r3, #10]
  return 0;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	371c      	adds	r7, #28
 800d678:	46bd      	mov	sp, r7
 800d67a:	bc80      	pop	{r7}
 800d67c:	4770      	bx	lr

0800d67e <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b086      	sub	sp, #24
 800d682:	af00      	add	r7, sp, #0
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	460b      	mov	r3, r1
 800d688:	607a      	str	r2, [r7, #4]
 800d68a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d692:	617b      	str	r3, [r7, #20]

  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	7a1b      	ldrb	r3, [r3, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d16e      	bne.n	800d77a <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800d6a2:	b25b      	sxtb	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	db0a      	blt.n	800d6be <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d6ae:	2320      	movs	r3, #32
 800d6b0:	2205      	movs	r2, #5
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f7ff ff96 	bl	800d5e4 <SCSI_SenseCode>
      return -1;
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6bc:	e067      	b.n	800d78e <SCSI_Read10+0x110>
    }

    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	7afa      	ldrb	r2, [r7, #11]
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d008      	beq.n	800d6e4 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d6d2:	7af9      	ldrb	r1, [r7, #11]
 800d6d4:	233a      	movs	r3, #58	; 0x3a
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f7ff ff83 	bl	800d5e4 <SCSI_SenseCode>
      return -1;
 800d6de:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e2:	e054      	b.n	800d78e <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3302      	adds	r3, #2
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	3303      	adds	r3, #3
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d6f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800d6fe:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	3205      	adds	r2, #5
 800d704:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800d706:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len =  ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3307      	adds	r3, #7
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	021b      	lsls	r3, r3, #8
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	3208      	adds	r2, #8
 800d71a:	7812      	ldrb	r2, [r2, #0]
 800d71c:	431a      	orrs	r2, r3
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d730:	7af9      	ldrb	r1, [r7, #11]
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f000 f912 	bl	800d95c <SCSI_CheckAddressRange>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	da02      	bge.n	800d744 <SCSI_Read10+0xc6>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800d73e:	f04f 33ff 	mov.w	r3, #4294967295
 800d742:	e024      	b.n	800d78e <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	2202      	movs	r2, #2
 800d748:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d756:	6979      	ldr	r1, [r7, #20]
 800d758:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800d75c:	fb01 f303 	mul.w	r3, r1, r3
 800d760:	429a      	cmp	r2, r3
 800d762:	d00a      	beq.n	800d77a <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d76a:	2320      	movs	r3, #32
 800d76c:	2205      	movs	r2, #5
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f7ff ff38 	bl	800d5e4 <SCSI_SenseCode>
      return -1;
 800d774:	f04f 33ff 	mov.w	r3, #4294967295
 800d778:	e009      	b.n	800d78e <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d780:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800d782:	7afb      	ldrb	r3, [r7, #11]
 800d784:	4619      	mov	r1, r3
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f90a 	bl	800d9a0 <SCSI_ProcessRead>
 800d78c:	4603      	mov	r3, r0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b086      	sub	sp, #24
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	60f8      	str	r0, [r7, #12]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	607a      	str	r2, [r7, #4]
 800d7a2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d7aa:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	7a1b      	ldrb	r3, [r3, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f040 8096 	bne.w	800d8e2 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800d7bc:	b25b      	sxtb	r3, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	da0a      	bge.n	800d7d8 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d7c8:	2320      	movs	r3, #32
 800d7ca:	2205      	movs	r2, #5
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f7ff ff09 	bl	800d5e4 <SCSI_SenseCode>
      return -1;
 800d7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d6:	e08a      	b.n	800d8ee <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	7afa      	ldrb	r2, [r7, #11]
 800d7e2:	4610      	mov	r0, r2
 800d7e4:	4798      	blx	r3
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d008      	beq.n	800d7fe <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d7ec:	7af9      	ldrb	r1, [r7, #11]
 800d7ee:	233a      	movs	r3, #58	; 0x3a
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f7ff fef6 	bl	800d5e4 <SCSI_SenseCode>
      return -1;
 800d7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7fc:	e077      	b.n	800d8ee <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	7afa      	ldrb	r2, [r7, #11]
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d008      	beq.n	800d824 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800d812:	7af9      	ldrb	r1, [r7, #11]
 800d814:	2327      	movs	r3, #39	; 0x27
 800d816:	2202      	movs	r2, #2
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f7ff fee3 	bl	800d5e4 <SCSI_SenseCode>
      return -1;
 800d81e:	f04f 33ff 	mov.w	r3, #4294967295
 800d822:	e064      	b.n	800d8ee <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	3302      	adds	r3, #2
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3303      	adds	r3, #3
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d834:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	3304      	adds	r3, #4
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800d83e:	4313      	orrs	r3, r2
                           (uint32_t)params[5];
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	3205      	adds	r2, #5
 800d844:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800d846:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	3307      	adds	r3, #7
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	021b      	lsls	r3, r3, #8
                          (uint32_t)params[8];
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	3208      	adds	r2, #8
 800d85a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800d85c:	431a      	orrs	r2, r3
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d870:	7af9      	ldrb	r1, [r7, #11]
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f000 f872 	bl	800d95c <SCSI_CheckAddressRange>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	da02      	bge.n	800d884 <SCSI_Write10+0xee>
                              hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800d87e:	f04f 33ff 	mov.w	r3, #4294967295
 800d882:	e034      	b.n	800d8ee <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800d890:	fb02 f303 	mul.w	r3, r2, r3
 800d894:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d00a      	beq.n	800d8b8 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d8a8:	2320      	movs	r3, #32
 800d8aa:	2205      	movs	r2, #5
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f7ff fe99 	bl	800d5e4 <SCSI_SenseCode>
      return -1;
 800d8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b6:	e01a      	b.n	800d8ee <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8be:	bf28      	it	cs
 800d8c0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d8c4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	f103 020c 	add.w	r2, r3, #12
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	2101      	movs	r1, #1
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f004 fbea 	bl	80120b2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e005      	b.n	800d8ee <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800d8e2:	7afb      	ldrb	r3, [r7, #11]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f000 f8ce 	bl	800da88 <SCSI_ProcessWrite>
 800d8ec:	4603      	mov	r3, r0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b086      	sub	sp, #24
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	460b      	mov	r3, r1
 800d900:	607a      	str	r2, [r7, #4]
 800d902:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d90a:	617b      	str	r3, [r7, #20]

  if ((params[1]& 0x02U) == 0x02U)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3301      	adds	r3, #1
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	f003 0302 	and.w	r3, r3, #2
 800d916:	2b00      	cmp	r3, #0
 800d918:	d008      	beq.n	800d92c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800d91a:	7af9      	ldrb	r1, [r7, #11]
 800d91c:	2324      	movs	r3, #36	; 0x24
 800d91e:	2205      	movs	r2, #5
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f7ff fe5f 	bl	800d5e4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800d926:	f04f 33ff 	mov.w	r3, #4294967295
 800d92a:	e013      	b.n	800d954 <SCSI_Verify10+0x5e>
  }

  if(SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d938:	7af9      	ldrb	r1, [r7, #11]
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f000 f80e 	bl	800d95c <SCSI_CheckAddressRange>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	da02      	bge.n	800d94c <SCSI_Verify10+0x56>
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800d946:	f04f 33ff 	mov.w	r3, #4294967295
 800d94a:	e003      	b.n	800d954 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2200      	movs	r2, #0
 800d950:	815a      	strh	r2, [r3, #10]
  return 0;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3718      	adds	r7, #24
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef *pdev, uint8_t lun,
                                      uint32_t blk_offset, uint32_t blk_nbr)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	607a      	str	r2, [r7, #4]
 800d966:	603b      	str	r3, [r7, #0]
 800d968:	460b      	mov	r3, r1
 800d96a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d972:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	441a      	add	r2, r3
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800d980:	429a      	cmp	r2, r3
 800d982:	d908      	bls.n	800d996 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800d984:	7af9      	ldrb	r1, [r7, #11]
 800d986:	2321      	movs	r3, #33	; 0x21
 800d988:	2205      	movs	r2, #5
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f7ff fe2a 	bl	800d5e4 <SCSI_SenseCode>
    return -1;
 800d990:	f04f 33ff 	mov.w	r3, #4294967295
 800d994:	e000      	b.n	800d998 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800d9a0:	b590      	push	{r4, r7, lr}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d9b2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800d9c0:	fb02 f303 	mul.w	r3, r2, r3
 800d9c4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9cc:	bf28      	it	cs
 800d9ce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800d9d2:	60bb      	str	r3, [r7, #8]

  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d9da:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data,
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f103 010c 	add.w	r1, r3, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                              hmsc->scsi_blk_addr,
                              (len / hmsc->scsi_blk_size)) < 0)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	78f8      	ldrb	r0, [r7, #3]
 800d9fa:	47a0      	blx	r4
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	da08      	bge.n	800da14 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800da02:	78f9      	ldrb	r1, [r7, #3]
 800da04:	2311      	movs	r3, #17
 800da06:	2204      	movs	r2, #4
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff fdeb 	bl	800d5e4 <SCSI_SenseCode>
    return -1;
 800da0e:	f04f 33ff 	mov.w	r3, #4294967295
 800da12:	e035      	b.n	800da80 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f103 020c 	add.w	r2, r3, #12
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	2181      	movs	r1, #129	; 0x81
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f004 fb23 	bl	801206c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800da32:	4619      	mov	r1, r3
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	fbb3 f3f1 	udiv	r3, r3, r1
 800da3a:	441a      	add	r2, r3
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800da4e:	4619      	mov	r1, r3
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	fbb3 f3f1 	udiv	r3, r3, r1
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	1ad2      	subs	r2, r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2203      	movs	r2, #3
 800da7c:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	bd90      	pop	{r4, r7, pc}

0800da88 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800da9a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800daa8:	fb02 f303 	mul.w	r3, r2, r3
 800daac:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dab4:	bf28      	it	cs
 800dab6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800daba:	60bb      	str	r3, [r7, #8]

  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dac2:	695c      	ldr	r4, [r3, #20]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f103 010c 	add.w	r1, r3, #12
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                             hmsc->scsi_blk_addr,
                             (len / hmsc->scsi_blk_size)) < 0)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800dad6:	4618      	mov	r0, r3
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800dade:	b29b      	uxth	r3, r3
 800dae0:	78f8      	ldrb	r0, [r7, #3]
 800dae2:	47a0      	blx	r4
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	da08      	bge.n	800dafc <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800daea:	78f9      	ldrb	r1, [r7, #3]
 800daec:	2303      	movs	r3, #3
 800daee:	2204      	movs	r2, #4
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff fd77 	bl	800d5e4 <SCSI_SenseCode>

    return -1;
 800daf6:	f04f 33ff 	mov.w	r3, #4294967295
 800dafa:	e045      	b.n	800db88 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800db08:	4619      	mov	r1, r3
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800db10:	441a      	add	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800db24:	4619      	mov	r1, r3
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	fbb3 f3f1 	udiv	r3, r3, r1
 800db2c:	1ad2      	subs	r2, r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	1ad2      	subs	r2, r2, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d104      	bne.n	800db58 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800db4e:	2100      	movs	r1, #0
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff f97f 	bl	800ce54 <MSC_BOT_SendCSW>
 800db56:	e016      	b.n	800db86 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800db64:	fb02 f303 	mul.w	r3, r2, r3
 800db68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db6c:	bf28      	it	cs
 800db6e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800db72:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f103 020c 	add.w	r2, r3, #12
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	2101      	movs	r1, #1
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f004 fa96 	bl	80120b2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd90      	pop	{r4, r7, pc}

0800db90 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	4613      	mov	r3, r2
 800db9c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dba4:	2302      	movs	r3, #2
 800dba6:	e01a      	b.n	800dbde <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d003      	beq.n	800dbc8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	79fa      	ldrb	r2, [r7, #7]
 800dbd4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f004 f8f0 	bl	8011dbc <USBD_LL_Init>

  return USBD_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d006      	beq.n	800dc08 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	683a      	ldr	r2, [r7, #0]
 800dbfe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73fb      	strb	r3, [r7, #15]
 800dc06:	e001      	b.n	800dc0c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800dc08:	2302      	movs	r3, #2
 800dc0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bc80      	pop	{r7}
 800dc16:	4770      	bx	lr

0800dc18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f004 f91b 	bl	8011e5c <USBD_LL_Start>

  return USBD_OK;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	370c      	adds	r7, #12
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bc80      	pop	{r7}
 800dc42:	4770      	bx	lr

0800dc44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800dc50:	2302      	movs	r3, #2
 800dc52:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00c      	beq.n	800dc78 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	78fa      	ldrb	r2, [r7, #3]
 800dc68:	4611      	mov	r1, r2
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	4798      	blx	r3
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d101      	bne.n	800dc78 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	78fa      	ldrb	r2, [r7, #3]
 800dc98:	4611      	mov	r1, r2
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	4798      	blx	r3
  return USBD_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fe56 	bl	800e96c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800dcce:	461a      	mov	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800dcdc:	f003 031f 	and.w	r3, r3, #31
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d00c      	beq.n	800dcfe <USBD_LL_SetupStage+0x56>
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d302      	bcc.n	800dcee <USBD_LL_SetupStage+0x46>
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d010      	beq.n	800dd0e <USBD_LL_SetupStage+0x66>
 800dcec:	e017      	b.n	800dd1e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f9c6 	bl	800e088 <USBD_StdDevReq>
    break;
 800dcfc:	e01a      	b.n	800dd34 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dd04:	4619      	mov	r1, r3
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fa28 	bl	800e15c <USBD_StdItfReq>
    break;
 800dd0c:	e012      	b.n	800dd34 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dd14:	4619      	mov	r1, r3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fa66 	bl	800e1e8 <USBD_StdEPReq>
    break;
 800dd1c:	e00a      	b.n	800dd34 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800dd24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f004 f914 	bl	8011f5a <USBD_LL_StallEP>
    break;
 800dd32:	bf00      	nop
  }

  return USBD_OK;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b086      	sub	sp, #24
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	60f8      	str	r0, [r7, #12]
 800dd46:	460b      	mov	r3, r1
 800dd48:	607a      	str	r2, [r7, #4]
 800dd4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800dd4c:	7afb      	ldrb	r3, [r7, #11]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d14b      	bne.n	800ddea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dd58:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800dd60:	2b03      	cmp	r3, #3
 800dd62:	d134      	bne.n	800ddce <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	68da      	ldr	r2, [r3, #12]
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d919      	bls.n	800dda4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	68da      	ldr	r2, [r3, #12]
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	1ad2      	subs	r2, r2, r3
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	68da      	ldr	r2, [r3, #12]
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d203      	bcs.n	800dd92 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	e002      	b.n	800dd98 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	461a      	mov	r2, r3
 800dd9a:	6879      	ldr	r1, [r7, #4]
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f000 feb9 	bl	800eb14 <USBD_CtlContinueRx>
 800dda2:	e038      	b.n	800de16 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ddaa:	691b      	ldr	r3, [r3, #16]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00a      	beq.n	800ddc6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d105      	bne.n	800ddc6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f000 feb6 	bl	800eb38 <USBD_CtlSendStatus>
 800ddcc:	e023      	b.n	800de16 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ddd4:	2b05      	cmp	r3, #5
 800ddd6:	d11e      	bne.n	800de16 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800dde0:	2100      	movs	r1, #0
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f004 f8b9 	bl	8011f5a <USBD_LL_StallEP>
 800dde8:	e015      	b.n	800de16 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d00d      	beq.n	800de12 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800ddfc:	2b03      	cmp	r3, #3
 800ddfe:	d108      	bne.n	800de12 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	7afa      	ldrb	r2, [r7, #11]
 800de0a:	4611      	mov	r1, r2
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	4798      	blx	r3
 800de10:	e001      	b.n	800de16 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800de12:	2302      	movs	r3, #2
 800de14:	e000      	b.n	800de18 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	460b      	mov	r3, r1
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800de2e:	7afb      	ldrb	r3, [r7, #11]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d17f      	bne.n	800df34 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	3314      	adds	r3, #20
 800de38:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800de40:	2b02      	cmp	r3, #2
 800de42:	d15c      	bne.n	800defe <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	68da      	ldr	r2, [r3, #12]
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d915      	bls.n	800de7c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	1ad2      	subs	r2, r2, r3
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	b29b      	uxth	r3, r3
 800de64:	461a      	mov	r2, r3
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f000 fe41 	bl	800eaf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800de6e:	2300      	movs	r3, #0
 800de70:	2200      	movs	r2, #0
 800de72:	2100      	movs	r1, #0
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f004 f91c 	bl	80120b2 <USBD_LL_PrepareReceive>
 800de7a:	e04e      	b.n	800df1a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	697a      	ldr	r2, [r7, #20]
 800de82:	6912      	ldr	r2, [r2, #16]
 800de84:	fbb3 f1f2 	udiv	r1, r3, r2
 800de88:	fb02 f201 	mul.w	r2, r2, r1
 800de8c:	1a9b      	subs	r3, r3, r2
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d11c      	bne.n	800decc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	689a      	ldr	r2, [r3, #8]
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d316      	bcc.n	800decc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	689a      	ldr	r2, [r3, #8]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d20f      	bcs.n	800decc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800deac:	2200      	movs	r2, #0
 800deae:	2100      	movs	r1, #0
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fe1d 	bl	800eaf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800debe:	2300      	movs	r3, #0
 800dec0:	2200      	movs	r2, #0
 800dec2:	2100      	movs	r1, #0
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f004 f8f4 	bl	80120b2 <USBD_LL_PrepareReceive>
 800deca:	e026      	b.n	800df1a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00a      	beq.n	800deee <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800dede:	2b03      	cmp	r3, #3
 800dee0:	d105      	bne.n	800deee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800deee:	2180      	movs	r1, #128	; 0x80
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f004 f832 	bl	8011f5a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800def6:	68f8      	ldr	r0, [r7, #12]
 800def8:	f000 fe31 	bl	800eb5e <USBD_CtlReceiveStatus>
 800defc:	e00d      	b.n	800df1a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800df04:	2b04      	cmp	r3, #4
 800df06:	d004      	beq.n	800df12 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d103      	bne.n	800df1a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800df12:	2180      	movs	r1, #128	; 0x80
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f004 f820 	bl	8011f5a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800df20:	2b01      	cmp	r3, #1
 800df22:	d11d      	bne.n	800df60 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7ff fe83 	bl	800dc30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800df32:	e015      	b.n	800df60 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800df3a:	695b      	ldr	r3, [r3, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00d      	beq.n	800df5c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800df46:	2b03      	cmp	r3, #3
 800df48:	d108      	bne.n	800df5c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800df50:	695b      	ldr	r3, [r3, #20]
 800df52:	7afa      	ldrb	r2, [r7, #11]
 800df54:	4611      	mov	r1, r2
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	4798      	blx	r3
 800df5a:	e001      	b.n	800df60 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800df5c:	2302      	movs	r3, #2
 800df5e:	e000      	b.n	800df62 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b082      	sub	sp, #8
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df72:	2340      	movs	r3, #64	; 0x40
 800df74:	2200      	movs	r2, #0
 800df76:	2100      	movs	r1, #0
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f003 ff8a 	bl	8011e92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2240      	movs	r2, #64	; 0x40
 800df8a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df8e:	2340      	movs	r3, #64	; 0x40
 800df90:	2200      	movs	r2, #0
 800df92:	2180      	movs	r1, #128	; 0x80
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f003 ff7c 	bl	8011e92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2201      	movs	r2, #1
 800df9e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2240      	movs	r2, #64	; 0x40
 800dfa4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d009      	beq.n	800dfe2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6852      	ldr	r2, [r2, #4]
 800dfda:	b2d2      	uxtb	r2, r2
 800dfdc:	4611      	mov	r1, r2
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	4798      	blx	r3
  }

  return USBD_OK;
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	460b      	mov	r3, r1
 800dff6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	78fa      	ldrb	r2, [r7, #3]
 800dffc:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	bc80      	pop	{r7}
 800e008:	4770      	bx	lr

0800e00a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800e00a:	b480      	push	{r7}
 800e00c:	b083      	sub	sp, #12
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2204      	movs	r2, #4
 800e022:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bc80      	pop	{r7}
 800e030:	4770      	bx	lr

0800e032 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800e032:	b480      	push	{r7}
 800e034:	b083      	sub	sp, #12
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bc80      	pop	{r7}
 800e050:	4770      	bx	lr

0800e052 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b082      	sub	sp, #8
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e060:	2b03      	cmp	r3, #3
 800e062:	d10b      	bne.n	800e07c <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e06a:	69db      	ldr	r3, [r3, #28]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d005      	beq.n	800e07c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e076:	69db      	ldr	r3, [r3, #28]
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
	...

0800e088 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e092:	2300      	movs	r3, #0
 800e094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e09e:	2b20      	cmp	r3, #32
 800e0a0:	d004      	beq.n	800e0ac <USBD_StdDevReq+0x24>
 800e0a2:	2b40      	cmp	r3, #64	; 0x40
 800e0a4:	d002      	beq.n	800e0ac <USBD_StdDevReq+0x24>
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d008      	beq.n	800e0bc <USBD_StdDevReq+0x34>
 800e0aa:	e04c      	b.n	800e146 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	4798      	blx	r3
    break;
 800e0ba:	e049      	b.n	800e150 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	785b      	ldrb	r3, [r3, #1]
 800e0c0:	2b09      	cmp	r3, #9
 800e0c2:	d83a      	bhi.n	800e13a <USBD_StdDevReq+0xb2>
 800e0c4:	a201      	add	r2, pc, #4	; (adr r2, 800e0cc <USBD_StdDevReq+0x44>)
 800e0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ca:	bf00      	nop
 800e0cc:	0800e11d 	.word	0x0800e11d
 800e0d0:	0800e131 	.word	0x0800e131
 800e0d4:	0800e13b 	.word	0x0800e13b
 800e0d8:	0800e127 	.word	0x0800e127
 800e0dc:	0800e13b 	.word	0x0800e13b
 800e0e0:	0800e0ff 	.word	0x0800e0ff
 800e0e4:	0800e0f5 	.word	0x0800e0f5
 800e0e8:	0800e13b 	.word	0x0800e13b
 800e0ec:	0800e113 	.word	0x0800e113
 800e0f0:	0800e109 	.word	0x0800e109
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f9d2 	bl	800e4a0 <USBD_GetDescriptor>
      break;
 800e0fc:	e022      	b.n	800e144 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800e0fe:	6839      	ldr	r1, [r7, #0]
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 fac7 	bl	800e694 <USBD_SetAddress>
      break;
 800e106:	e01d      	b.n	800e144 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fb04 	bl	800e718 <USBD_SetConfig>
      break;
 800e110:	e018      	b.n	800e144 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fb8d 	bl	800e834 <USBD_GetConfig>
      break;
 800e11a:	e013      	b.n	800e144 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800e11c:	6839      	ldr	r1, [r7, #0]
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 fbbc 	bl	800e89c <USBD_GetStatus>
      break;
 800e124:	e00e      	b.n	800e144 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fbea 	bl	800e902 <USBD_SetFeature>
      break;
 800e12e:	e009      	b.n	800e144 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fbf9 	bl	800e92a <USBD_ClrFeature>
      break;
 800e138:	e004      	b.n	800e144 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fc51 	bl	800e9e4 <USBD_CtlError>
      break;
 800e142:	bf00      	nop
    }
    break;
 800e144:	e004      	b.n	800e150 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 fc4b 	bl	800e9e4 <USBD_CtlError>
    break;
 800e14e:	bf00      	nop
  }

  return ret;
 800e150:	7bfb      	ldrb	r3, [r7, #15]
}
 800e152:	4618      	mov	r0, r3
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop

0800e15c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e172:	2b20      	cmp	r3, #32
 800e174:	d003      	beq.n	800e17e <USBD_StdItfReq+0x22>
 800e176:	2b40      	cmp	r3, #64	; 0x40
 800e178:	d001      	beq.n	800e17e <USBD_StdItfReq+0x22>
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d12a      	bne.n	800e1d4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e184:	3b01      	subs	r3, #1
 800e186:	2b02      	cmp	r3, #2
 800e188:	d81d      	bhi.n	800e1c6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	889b      	ldrh	r3, [r3, #4]
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b01      	cmp	r3, #1
 800e192:	d813      	bhi.n	800e1bc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	4798      	blx	r3
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	88db      	ldrh	r3, [r3, #6]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d110      	bne.n	800e1d0 <USBD_StdItfReq+0x74>
 800e1ae:	7bfb      	ldrb	r3, [r7, #15]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10d      	bne.n	800e1d0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fcbf 	bl	800eb38 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e1ba:	e009      	b.n	800e1d0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 fc10 	bl	800e9e4 <USBD_CtlError>
      break;
 800e1c4:	e004      	b.n	800e1d0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fc0b 	bl	800e9e4 <USBD_CtlError>
      break;
 800e1ce:	e000      	b.n	800e1d2 <USBD_StdItfReq+0x76>
      break;
 800e1d0:	bf00      	nop
    }
    break;
 800e1d2:	e004      	b.n	800e1de <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fc04 	bl	800e9e4 <USBD_CtlError>
    break;
 800e1dc:	bf00      	nop
  }

  return USBD_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	889b      	ldrh	r3, [r3, #4]
 800e1fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e204:	2b20      	cmp	r3, #32
 800e206:	d004      	beq.n	800e212 <USBD_StdEPReq+0x2a>
 800e208:	2b40      	cmp	r3, #64	; 0x40
 800e20a:	d002      	beq.n	800e212 <USBD_StdEPReq+0x2a>
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d008      	beq.n	800e222 <USBD_StdEPReq+0x3a>
 800e210:	e13b      	b.n	800e48a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	6839      	ldr	r1, [r7, #0]
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	4798      	blx	r3
    break;
 800e220:	e138      	b.n	800e494 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e22a:	2b20      	cmp	r3, #32
 800e22c:	d10a      	bne.n	800e244 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	4798      	blx	r3
 800e23c:	4603      	mov	r3, r0
 800e23e:	73fb      	strb	r3, [r7, #15]

      return ret;
 800e240:	7bfb      	ldrb	r3, [r7, #15]
 800e242:	e128      	b.n	800e496 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	785b      	ldrb	r3, [r3, #1]
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d03e      	beq.n	800e2ca <USBD_StdEPReq+0xe2>
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d002      	beq.n	800e256 <USBD_StdEPReq+0x6e>
 800e250:	2b00      	cmp	r3, #0
 800e252:	d070      	beq.n	800e336 <USBD_StdEPReq+0x14e>
 800e254:	e113      	b.n	800e47e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d002      	beq.n	800e266 <USBD_StdEPReq+0x7e>
 800e260:	2b03      	cmp	r3, #3
 800e262:	d015      	beq.n	800e290 <USBD_StdEPReq+0xa8>
 800e264:	e02b      	b.n	800e2be <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e266:	7bbb      	ldrb	r3, [r7, #14]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00c      	beq.n	800e286 <USBD_StdEPReq+0x9e>
 800e26c:	7bbb      	ldrb	r3, [r7, #14]
 800e26e:	2b80      	cmp	r3, #128	; 0x80
 800e270:	d009      	beq.n	800e286 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800e272:	7bbb      	ldrb	r3, [r7, #14]
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f003 fe6f 	bl	8011f5a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800e27c:	2180      	movs	r1, #128	; 0x80
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f003 fe6b 	bl	8011f5a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e284:	e020      	b.n	800e2c8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fbab 	bl	800e9e4 <USBD_CtlError>
        break;
 800e28e:	e01b      	b.n	800e2c8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	885b      	ldrh	r3, [r3, #2]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10e      	bne.n	800e2b6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e298:	7bbb      	ldrb	r3, [r7, #14]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00b      	beq.n	800e2b6 <USBD_StdEPReq+0xce>
 800e29e:	7bbb      	ldrb	r3, [r7, #14]
 800e2a0:	2b80      	cmp	r3, #128	; 0x80
 800e2a2:	d008      	beq.n	800e2b6 <USBD_StdEPReq+0xce>
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	88db      	ldrh	r3, [r3, #6]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d104      	bne.n	800e2b6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800e2ac:	7bbb      	ldrb	r3, [r7, #14]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f003 fe52 	bl	8011f5a <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 fc3e 	bl	800eb38 <USBD_CtlSendStatus>

        break;
 800e2bc:	e004      	b.n	800e2c8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800e2be:	6839      	ldr	r1, [r7, #0]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f000 fb8f 	bl	800e9e4 <USBD_CtlError>
        break;
 800e2c6:	bf00      	nop
      }
      break;
 800e2c8:	e0de      	b.n	800e488 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d002      	beq.n	800e2da <USBD_StdEPReq+0xf2>
 800e2d4:	2b03      	cmp	r3, #3
 800e2d6:	d015      	beq.n	800e304 <USBD_StdEPReq+0x11c>
 800e2d8:	e026      	b.n	800e328 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2da:	7bbb      	ldrb	r3, [r7, #14]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00c      	beq.n	800e2fa <USBD_StdEPReq+0x112>
 800e2e0:	7bbb      	ldrb	r3, [r7, #14]
 800e2e2:	2b80      	cmp	r3, #128	; 0x80
 800e2e4:	d009      	beq.n	800e2fa <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f003 fe35 	bl	8011f5a <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800e2f0:	2180      	movs	r1, #128	; 0x80
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f003 fe31 	bl	8011f5a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e2f8:	e01c      	b.n	800e334 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 fb71 	bl	800e9e4 <USBD_CtlError>
        break;
 800e302:	e017      	b.n	800e334 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	885b      	ldrh	r3, [r3, #2]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d112      	bne.n	800e332 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e30c:	7bbb      	ldrb	r3, [r7, #14]
 800e30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e312:	2b00      	cmp	r3, #0
 800e314:	d004      	beq.n	800e320 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f003 fe3c 	bl	8011f98 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 fc09 	bl	800eb38 <USBD_CtlSendStatus>
        }
        break;
 800e326:	e004      	b.n	800e332 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800e328:	6839      	ldr	r1, [r7, #0]
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 fb5a 	bl	800e9e4 <USBD_CtlError>
        break;
 800e330:	e000      	b.n	800e334 <USBD_StdEPReq+0x14c>
        break;
 800e332:	bf00      	nop
      }
      break;
 800e334:	e0a8      	b.n	800e488 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e33c:	2b02      	cmp	r3, #2
 800e33e:	d002      	beq.n	800e346 <USBD_StdEPReq+0x15e>
 800e340:	2b03      	cmp	r3, #3
 800e342:	d031      	beq.n	800e3a8 <USBD_StdEPReq+0x1c0>
 800e344:	e095      	b.n	800e472 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e346:	7bbb      	ldrb	r3, [r7, #14]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <USBD_StdEPReq+0x174>
 800e34c:	7bbb      	ldrb	r3, [r7, #14]
 800e34e:	2b80      	cmp	r3, #128	; 0x80
 800e350:	d004      	beq.n	800e35c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fb45 	bl	800e9e4 <USBD_CtlError>
          break;
 800e35a:	e08f      	b.n	800e47c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e360:	2b00      	cmp	r3, #0
 800e362:	da0b      	bge.n	800e37c <USBD_StdEPReq+0x194>
 800e364:	7bbb      	ldrb	r3, [r7, #14]
 800e366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e36a:	4613      	mov	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	3310      	adds	r3, #16
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	4413      	add	r3, r2
 800e378:	3304      	adds	r3, #4
 800e37a:	e00a      	b.n	800e392 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800e37c:	7bbb      	ldrb	r3, [r7, #14]
 800e37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e382:	4613      	mov	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	4413      	add	r3, r2
 800e392:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	2202      	movs	r2, #2
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 fb89 	bl	800eab8 <USBD_CtlSendData>
          break;
 800e3a6:	e069      	b.n	800e47c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800e3a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	da11      	bge.n	800e3d4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
 800e3b2:	f003 020f 	and.w	r2, r3, #15
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4413      	add	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	440b      	add	r3, r1
 800e3c2:	3318      	adds	r3, #24
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d117      	bne.n	800e3fa <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fb09 	bl	800e9e4 <USBD_CtlError>
            break;
 800e3d2:	e053      	b.n	800e47c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e3d4:	7bbb      	ldrb	r3, [r7, #14]
 800e3d6:	f003 020f 	and.w	r2, r3, #15
 800e3da:	6879      	ldr	r1, [r7, #4]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	440b      	add	r3, r1
 800e3e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d104      	bne.n	800e3fa <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 faf6 	bl	800e9e4 <USBD_CtlError>
            break;
 800e3f8:	e040      	b.n	800e47c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e3fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	da0b      	bge.n	800e41a <USBD_StdEPReq+0x232>
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e408:	4613      	mov	r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4413      	add	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	3310      	adds	r3, #16
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	4413      	add	r3, r2
 800e416:	3304      	adds	r3, #4
 800e418:	e00a      	b.n	800e430 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800e41a:	7bbb      	ldrb	r3, [r7, #14]
 800e41c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e420:	4613      	mov	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	4413      	add	r3, r2
 800e430:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e432:	7bbb      	ldrb	r3, [r7, #14]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <USBD_StdEPReq+0x256>
 800e438:	7bbb      	ldrb	r3, [r7, #14]
 800e43a:	2b80      	cmp	r3, #128	; 0x80
 800e43c:	d103      	bne.n	800e446 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2200      	movs	r2, #0
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	e00e      	b.n	800e464 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f003 fdc3 	bl	8011fd6 <USBD_LL_IsStallEP>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	2201      	movs	r2, #1
 800e45a:	601a      	str	r2, [r3, #0]
 800e45c:	e002      	b.n	800e464 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	2200      	movs	r2, #0
 800e462:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	2202      	movs	r2, #2
 800e468:	4619      	mov	r1, r3
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fb24 	bl	800eab8 <USBD_CtlSendData>
          break;
 800e470:	e004      	b.n	800e47c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 fab5 	bl	800e9e4 <USBD_CtlError>
        break;
 800e47a:	bf00      	nop
      }
      break;
 800e47c:	e004      	b.n	800e488 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 faaf 	bl	800e9e4 <USBD_CtlError>
      break;
 800e486:	bf00      	nop
    }
    break;
 800e488:	e004      	b.n	800e494 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 faa9 	bl	800e9e4 <USBD_CtlError>
    break;
 800e492:	bf00      	nop
  }

  return ret;
 800e494:	7bfb      	ldrb	r3, [r7, #15]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	885b      	ldrh	r3, [r3, #2]
 800e4ae:	0a1b      	lsrs	r3, r3, #8
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	2b06      	cmp	r3, #6
 800e4b6:	f200 80c9 	bhi.w	800e64c <USBD_GetDescriptor+0x1ac>
 800e4ba:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <USBD_GetDescriptor+0x20>)
 800e4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c0:	0800e4dd 	.word	0x0800e4dd
 800e4c4:	0800e4f5 	.word	0x0800e4f5
 800e4c8:	0800e535 	.word	0x0800e535
 800e4cc:	0800e64d 	.word	0x0800e64d
 800e4d0:	0800e64d 	.word	0x0800e64d
 800e4d4:	0800e5f9 	.word	0x0800e5f9
 800e4d8:	0800e61f 	.word	0x0800e61f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	7c12      	ldrb	r2, [r2, #16]
 800e4e8:	f107 010a 	add.w	r1, r7, #10
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	4798      	blx	r3
 800e4f0:	60f8      	str	r0, [r7, #12]
    break;
 800e4f2:	e0b0      	b.n	800e656 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	7c1b      	ldrb	r3, [r3, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10d      	bne.n	800e518 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e504:	f107 020a 	add.w	r2, r7, #10
 800e508:	4610      	mov	r0, r2
 800e50a:	4798      	blx	r3
 800e50c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3301      	adds	r3, #1
 800e512:	2202      	movs	r2, #2
 800e514:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e516:	e09e      	b.n	800e656 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	f107 020a 	add.w	r2, r7, #10
 800e524:	4610      	mov	r0, r2
 800e526:	4798      	blx	r3
 800e528:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	3301      	adds	r3, #1
 800e52e:	2202      	movs	r2, #2
 800e530:	701a      	strb	r2, [r3, #0]
    break;
 800e532:	e090      	b.n	800e656 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	885b      	ldrh	r3, [r3, #2]
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	2b05      	cmp	r3, #5
 800e53c:	d856      	bhi.n	800e5ec <USBD_GetDescriptor+0x14c>
 800e53e:	a201      	add	r2, pc, #4	; (adr r2, 800e544 <USBD_GetDescriptor+0xa4>)
 800e540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e544:	0800e55d 	.word	0x0800e55d
 800e548:	0800e575 	.word	0x0800e575
 800e54c:	0800e58d 	.word	0x0800e58d
 800e550:	0800e5a5 	.word	0x0800e5a5
 800e554:	0800e5bd 	.word	0x0800e5bd
 800e558:	0800e5d5 	.word	0x0800e5d5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	7c12      	ldrb	r2, [r2, #16]
 800e568:	f107 010a 	add.w	r1, r7, #10
 800e56c:	4610      	mov	r0, r2
 800e56e:	4798      	blx	r3
 800e570:	60f8      	str	r0, [r7, #12]
      break;
 800e572:	e040      	b.n	800e5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	7c12      	ldrb	r2, [r2, #16]
 800e580:	f107 010a 	add.w	r1, r7, #10
 800e584:	4610      	mov	r0, r2
 800e586:	4798      	blx	r3
 800e588:	60f8      	str	r0, [r7, #12]
      break;
 800e58a:	e034      	b.n	800e5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	7c12      	ldrb	r2, [r2, #16]
 800e598:	f107 010a 	add.w	r1, r7, #10
 800e59c:	4610      	mov	r0, r2
 800e59e:	4798      	blx	r3
 800e5a0:	60f8      	str	r0, [r7, #12]
      break;
 800e5a2:	e028      	b.n	800e5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e5aa:	691b      	ldr	r3, [r3, #16]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	7c12      	ldrb	r2, [r2, #16]
 800e5b0:	f107 010a 	add.w	r1, r7, #10
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	4798      	blx	r3
 800e5b8:	60f8      	str	r0, [r7, #12]
      break;
 800e5ba:	e01c      	b.n	800e5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e5c2:	695b      	ldr	r3, [r3, #20]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	7c12      	ldrb	r2, [r2, #16]
 800e5c8:	f107 010a 	add.w	r1, r7, #10
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	4798      	blx	r3
 800e5d0:	60f8      	str	r0, [r7, #12]
      break;
 800e5d2:	e010      	b.n	800e5f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e5da:	699b      	ldr	r3, [r3, #24]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	7c12      	ldrb	r2, [r2, #16]
 800e5e0:	f107 010a 	add.w	r1, r7, #10
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	4798      	blx	r3
 800e5e8:	60f8      	str	r0, [r7, #12]
      break;
 800e5ea:	e004      	b.n	800e5f6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f9f8 	bl	800e9e4 <USBD_CtlError>
      return;
 800e5f4:	e04b      	b.n	800e68e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800e5f6:	e02e      	b.n	800e656 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	7c1b      	ldrb	r3, [r3, #16]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d109      	bne.n	800e614 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e608:	f107 020a 	add.w	r2, r7, #10
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	60f8      	str	r0, [r7, #12]
      break;
 800e612:	e020      	b.n	800e656 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e614:	6839      	ldr	r1, [r7, #0]
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 f9e4 	bl	800e9e4 <USBD_CtlError>
      return;
 800e61c:	e037      	b.n	800e68e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	7c1b      	ldrb	r3, [r3, #16]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10d      	bne.n	800e642 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e62e:	f107 020a 	add.w	r2, r7, #10
 800e632:	4610      	mov	r0, r2
 800e634:	4798      	blx	r3
 800e636:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3301      	adds	r3, #1
 800e63c:	2207      	movs	r2, #7
 800e63e:	701a      	strb	r2, [r3, #0]
      break;
 800e640:	e009      	b.n	800e656 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f9cd 	bl	800e9e4 <USBD_CtlError>
      return;
 800e64a:	e020      	b.n	800e68e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800e64c:	6839      	ldr	r1, [r7, #0]
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 f9c8 	bl	800e9e4 <USBD_CtlError>
    return;
 800e654:	e01b      	b.n	800e68e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800e656:	897b      	ldrh	r3, [r7, #10]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d011      	beq.n	800e680 <USBD_GetDescriptor+0x1e0>
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	88db      	ldrh	r3, [r3, #6]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00d      	beq.n	800e680 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	88da      	ldrh	r2, [r3, #6]
 800e668:	897b      	ldrh	r3, [r7, #10]
 800e66a:	4293      	cmp	r3, r2
 800e66c:	bf28      	it	cs
 800e66e:	4613      	movcs	r3, r2
 800e670:	b29b      	uxth	r3, r3
 800e672:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800e674:	897b      	ldrh	r3, [r7, #10]
 800e676:	461a      	mov	r2, r3
 800e678:	68f9      	ldr	r1, [r7, #12]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 fa1c 	bl	800eab8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	88db      	ldrh	r3, [r3, #6]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d102      	bne.n	800e68e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 fa55 	bl	800eb38 <USBD_CtlSendStatus>
  }
}
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	889b      	ldrh	r3, [r3, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d130      	bne.n	800e708 <USBD_SetAddress+0x74>
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	88db      	ldrh	r3, [r3, #6]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d12c      	bne.n	800e708 <USBD_SetAddress+0x74>
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	885b      	ldrh	r3, [r3, #2]
 800e6b2:	2b7f      	cmp	r3, #127	; 0x7f
 800e6b4:	d828      	bhi.n	800e708 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	885b      	ldrh	r3, [r3, #2]
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	d104      	bne.n	800e6d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800e6cc:	6839      	ldr	r1, [r7, #0]
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f988 	bl	800e9e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6d4:	e01c      	b.n	800e710 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	7bfa      	ldrb	r2, [r7, #15]
 800e6da:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f003 fca3 	bl	801202e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fa25 	bl	800eb38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d004      	beq.n	800e6fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6fc:	e008      	b.n	800e710 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e706:	e003      	b.n	800e710 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f96a 	bl	800e9e4 <USBD_CtlError>
  }
}
 800e710:	bf00      	nop
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	885b      	ldrh	r3, [r3, #2]
 800e726:	b2da      	uxtb	r2, r3
 800e728:	4b41      	ldr	r3, [pc, #260]	; (800e830 <USBD_SetConfig+0x118>)
 800e72a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e72c:	4b40      	ldr	r3, [pc, #256]	; (800e830 <USBD_SetConfig+0x118>)
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d904      	bls.n	800e73e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e734:	6839      	ldr	r1, [r7, #0]
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 f954 	bl	800e9e4 <USBD_CtlError>
 800e73c:	e075      	b.n	800e82a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e744:	2b02      	cmp	r3, #2
 800e746:	d002      	beq.n	800e74e <USBD_SetConfig+0x36>
 800e748:	2b03      	cmp	r3, #3
 800e74a:	d023      	beq.n	800e794 <USBD_SetConfig+0x7c>
 800e74c:	e062      	b.n	800e814 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800e74e:	4b38      	ldr	r3, [pc, #224]	; (800e830 <USBD_SetConfig+0x118>)
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d01a      	beq.n	800e78c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800e756:	4b36      	ldr	r3, [pc, #216]	; (800e830 <USBD_SetConfig+0x118>)
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2203      	movs	r2, #3
 800e764:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e768:	4b31      	ldr	r3, [pc, #196]	; (800e830 <USBD_SetConfig+0x118>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	4619      	mov	r1, r3
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f7ff fa68 	bl	800dc44 <USBD_SetClassConfig>
 800e774:	4603      	mov	r3, r0
 800e776:	2b02      	cmp	r3, #2
 800e778:	d104      	bne.n	800e784 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f931 	bl	800e9e4 <USBD_CtlError>
          return;
 800e782:	e052      	b.n	800e82a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 f9d7 	bl	800eb38 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e78a:	e04e      	b.n	800e82a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f9d3 	bl	800eb38 <USBD_CtlSendStatus>
      break;
 800e792:	e04a      	b.n	800e82a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e794:	4b26      	ldr	r3, [pc, #152]	; (800e830 <USBD_SetConfig+0x118>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d112      	bne.n	800e7c2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2202      	movs	r2, #2
 800e7a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800e7a4:	4b22      	ldr	r3, [pc, #136]	; (800e830 <USBD_SetConfig+0x118>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800e7ae:	4b20      	ldr	r3, [pc, #128]	; (800e830 <USBD_SetConfig+0x118>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7ff fa64 	bl	800dc82 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 f9bc 	bl	800eb38 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e7c0:	e033      	b.n	800e82a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e7c2:	4b1b      	ldr	r3, [pc, #108]	; (800e830 <USBD_SetConfig+0x118>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d01d      	beq.n	800e80c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7ff fa52 	bl	800dc82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e7de:	4b14      	ldr	r3, [pc, #80]	; (800e830 <USBD_SetConfig+0x118>)
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e7e8:	4b11      	ldr	r3, [pc, #68]	; (800e830 <USBD_SetConfig+0x118>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7ff fa28 	bl	800dc44 <USBD_SetClassConfig>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d104      	bne.n	800e804 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 f8f1 	bl	800e9e4 <USBD_CtlError>
          return;
 800e802:	e012      	b.n	800e82a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f997 	bl	800eb38 <USBD_CtlSendStatus>
      break;
 800e80a:	e00e      	b.n	800e82a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f993 	bl	800eb38 <USBD_CtlSendStatus>
      break;
 800e812:	e00a      	b.n	800e82a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 f8e4 	bl	800e9e4 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e81c:	4b04      	ldr	r3, [pc, #16]	; (800e830 <USBD_SetConfig+0x118>)
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	4619      	mov	r1, r3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7ff fa2d 	bl	800dc82 <USBD_ClrClassConfig>
      break;
 800e828:	bf00      	nop
    }
  }
}
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	20000332 	.word	0x20000332

0800e834 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	88db      	ldrh	r3, [r3, #6]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d004      	beq.n	800e850 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e846:	6839      	ldr	r1, [r7, #0]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f8cb 	bl	800e9e4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e84e:	e021      	b.n	800e894 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e856:	2b01      	cmp	r3, #1
 800e858:	db17      	blt.n	800e88a <USBD_GetConfig+0x56>
 800e85a:	2b02      	cmp	r3, #2
 800e85c:	dd02      	ble.n	800e864 <USBD_GetConfig+0x30>
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d00b      	beq.n	800e87a <USBD_GetConfig+0x46>
 800e862:	e012      	b.n	800e88a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3308      	adds	r3, #8
 800e86e:	2201      	movs	r2, #1
 800e870:	4619      	mov	r1, r3
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f920 	bl	800eab8 <USBD_CtlSendData>
      break;
 800e878:	e00c      	b.n	800e894 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	3304      	adds	r3, #4
 800e87e:	2201      	movs	r2, #1
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f918 	bl	800eab8 <USBD_CtlSendData>
      break;
 800e888:	e004      	b.n	800e894 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800e88a:	6839      	ldr	r1, [r7, #0]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 f8a9 	bl	800e9e4 <USBD_CtlError>
      break;
 800e892:	bf00      	nop
}
 800e894:	bf00      	nop
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d81e      	bhi.n	800e8f0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	88db      	ldrh	r3, [r3, #6]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d004      	beq.n	800e8c4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f891 	bl	800e9e4 <USBD_CtlError>
      break;
 800e8c2:	e01a      	b.n	800e8fa <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d005      	beq.n	800e8e0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	f043 0202 	orr.w	r2, r3, #2
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	330c      	adds	r3, #12
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f8e5 	bl	800eab8 <USBD_CtlSendData>
    break;
 800e8ee:	e004      	b.n	800e8fa <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f876 	bl	800e9e4 <USBD_CtlError>
    break;
 800e8f8:	bf00      	nop
  }
}
 800e8fa:	bf00      	nop
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b082      	sub	sp, #8
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	885b      	ldrh	r3, [r3, #2]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d106      	bne.n	800e922 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f90b 	bl	800eb38 <USBD_CtlSendStatus>
  }

}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b082      	sub	sp, #8
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e93a:	3b01      	subs	r3, #1
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d80b      	bhi.n	800e958 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	885b      	ldrh	r3, [r3, #2]
 800e944:	2b01      	cmp	r3, #1
 800e946:	d10c      	bne.n	800e962 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 f8f1 	bl	800eb38 <USBD_CtlSendStatus>
    }
    break;
 800e956:	e004      	b.n	800e962 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e958:	6839      	ldr	r1, [r7, #0]
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 f842 	bl	800e9e4 <USBD_CtlError>
    break;
 800e960:	e000      	b.n	800e964 <USBD_ClrFeature+0x3a>
    break;
 800e962:	bf00      	nop
  }
}
 800e964:	bf00      	nop
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	781a      	ldrb	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	785a      	ldrb	r2, [r3, #1]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	3302      	adds	r3, #2
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	3303      	adds	r3, #3
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	b29b      	uxth	r3, r3
 800e996:	021b      	lsls	r3, r3, #8
 800e998:	b29b      	uxth	r3, r3
 800e99a:	4413      	add	r3, r2
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	3304      	adds	r3, #4
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	3305      	adds	r3, #5
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	021b      	lsls	r3, r3, #8
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	4413      	add	r3, r2
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	3306      	adds	r3, #6
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	3307      	adds	r3, #7
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	021b      	lsls	r3, r3, #8
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	4413      	add	r3, r2
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	80da      	strh	r2, [r3, #6]

}
 800e9da:	bf00      	nop
 800e9dc:	370c      	adds	r7, #12
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bc80      	pop	{r7}
 800e9e2:	4770      	bx	lr

0800e9e4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e9ee:	2180      	movs	r1, #128	; 0x80
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f003 fab2 	bl	8011f5a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f003 faae 	bl	8011f5a <USBD_LL_StallEP>
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b086      	sub	sp, #24
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	60f8      	str	r0, [r7, #12]
 800ea0e:	60b9      	str	r1, [r7, #8]
 800ea10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea12:	2300      	movs	r3, #0
 800ea14:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d032      	beq.n	800ea82 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f000 f834 	bl	800ea8a <USBD_GetLen>
 800ea22:	4603      	mov	r3, r0
 800ea24:	3301      	adds	r3, #1
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	75fa      	strb	r2, [r7, #23]
 800ea36:	461a      	mov	r2, r3
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	7812      	ldrb	r2, [r2, #0]
 800ea40:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ea42:	7dfb      	ldrb	r3, [r7, #23]
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	75fa      	strb	r2, [r7, #23]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	2203      	movs	r2, #3
 800ea50:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ea52:	e012      	b.n	800ea7a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	1c5a      	adds	r2, r3, #1
 800ea58:	60fa      	str	r2, [r7, #12]
 800ea5a:	7dfa      	ldrb	r2, [r7, #23]
 800ea5c:	1c51      	adds	r1, r2, #1
 800ea5e:	75f9      	strb	r1, [r7, #23]
 800ea60:	4611      	mov	r1, r2
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	440a      	add	r2, r1
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
 800ea6c:	1c5a      	adds	r2, r3, #1
 800ea6e:	75fa      	strb	r2, [r7, #23]
 800ea70:	461a      	mov	r2, r3
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	4413      	add	r3, r2
 800ea76:	2200      	movs	r2, #0
 800ea78:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1e8      	bne.n	800ea54 <USBD_GetString+0x4e>
    }
  }
}
 800ea82:	bf00      	nop
 800ea84:	3718      	adds	r7, #24
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b085      	sub	sp, #20
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800ea96:	e005      	b.n	800eaa4 <USBD_GetLen+0x1a>
    {
        len++;
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1f5      	bne.n	800ea98 <USBD_GetLen+0xe>
    }

    return len;
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3714      	adds	r7, #20
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bc80      	pop	{r7}
 800eab6:	4770      	bx	lr

0800eab8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	4613      	mov	r3, r2
 800eac4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2202      	movs	r2, #2
 800eaca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800eace:	88fa      	ldrh	r2, [r7, #6]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ead4:	88fa      	ldrh	r2, [r7, #6]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800eada:	88fb      	ldrh	r3, [r7, #6]
 800eadc:	68ba      	ldr	r2, [r7, #8]
 800eade:	2100      	movs	r1, #0
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f003 fac3 	bl	801206c <USBD_LL_Transmit>

  return USBD_OK;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	4613      	mov	r3, r2
 800eafc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800eafe:	88fb      	ldrh	r3, [r7, #6]
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	2100      	movs	r1, #0
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f003 fab1 	bl	801206c <USBD_LL_Transmit>

  return USBD_OK;
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	4613      	mov	r3, r2
 800eb20:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb22:	88fb      	ldrh	r3, [r7, #6]
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	2100      	movs	r1, #0
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f003 fac2 	bl	80120b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2204      	movs	r2, #4
 800eb44:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb48:	2300      	movs	r3, #0
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f003 fa8c 	bl	801206c <USBD_LL_Transmit>

  return USBD_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3708      	adds	r7, #8
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b082      	sub	sp, #8
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2205      	movs	r2, #5
 800eb6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800eb6e:	2300      	movs	r3, #0
 800eb70:	2200      	movs	r2, #0
 800eb72:	2100      	movs	r1, #0
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f003 fa9c 	bl	80120b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3708      	adds	r7, #8
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b087      	sub	sp, #28
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eb92:	2301      	movs	r3, #1
 800eb94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb9a:	4b1e      	ldr	r3, [pc, #120]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800eb9c:	7a5b      	ldrb	r3, [r3, #9]
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d131      	bne.n	800ec08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eba4:	4b1b      	ldr	r3, [pc, #108]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800eba6:	7a5b      	ldrb	r3, [r3, #9]
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	461a      	mov	r2, r3
 800ebac:	4b19      	ldr	r3, [pc, #100]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800ebae:	2100      	movs	r1, #0
 800ebb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ebb2:	4b18      	ldr	r3, [pc, #96]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800ebb4:	7a5b      	ldrb	r3, [r3, #9]
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	4a16      	ldr	r2, [pc, #88]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ebc2:	4b14      	ldr	r3, [pc, #80]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800ebc4:	7a5b      	ldrb	r3, [r3, #9]
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	461a      	mov	r2, r3
 800ebca:	4b12      	ldr	r3, [pc, #72]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800ebcc:	4413      	add	r3, r2
 800ebce:	79fa      	ldrb	r2, [r7, #7]
 800ebd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ebd2:	4b10      	ldr	r3, [pc, #64]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800ebd4:	7a5b      	ldrb	r3, [r3, #9]
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	1c5a      	adds	r2, r3, #1
 800ebda:	b2d1      	uxtb	r1, r2
 800ebdc:	4a0d      	ldr	r2, [pc, #52]	; (800ec14 <FATFS_LinkDriverEx+0x90>)
 800ebde:	7251      	strb	r1, [r2, #9]
 800ebe0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ebe2:	7dbb      	ldrb	r3, [r7, #22]
 800ebe4:	3330      	adds	r3, #48	; 0x30
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	223a      	movs	r2, #58	; 0x3a
 800ebf2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	3302      	adds	r3, #2
 800ebf8:	222f      	movs	r2, #47	; 0x2f
 800ebfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	3303      	adds	r3, #3
 800ec00:	2200      	movs	r2, #0
 800ec02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bc80      	pop	{r7}
 800ec12:	4770      	bx	lr
 800ec14:	20000334 	.word	0x20000334

0800ec18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ec22:	2200      	movs	r2, #0
 800ec24:	6839      	ldr	r1, [r7, #0]
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7ff ffac 	bl	800eb84 <FATFS_LinkDriverEx>
 800ec2c:	4603      	mov	r3, r0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec3e:	f3ef 8305 	mrs	r3, IPSR
 800ec42:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10f      	bne.n	800ec6a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ec4e:	607b      	str	r3, [r7, #4]
  return(result);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d109      	bne.n	800ec6a <osKernelInitialize+0x32>
 800ec56:	4b10      	ldr	r3, [pc, #64]	; (800ec98 <osKernelInitialize+0x60>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	d109      	bne.n	800ec72 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec5e:	f3ef 8311 	mrs	r3, BASEPRI
 800ec62:	603b      	str	r3, [r7, #0]
  return(result);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ec6a:	f06f 0305 	mvn.w	r3, #5
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	e00c      	b.n	800ec8c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ec72:	4b09      	ldr	r3, [pc, #36]	; (800ec98 <osKernelInitialize+0x60>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d105      	bne.n	800ec86 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800ec7a:	4b07      	ldr	r3, [pc, #28]	; (800ec98 <osKernelInitialize+0x60>)
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e002      	b.n	800ec8c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ec86:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3714      	adds	r7, #20
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bc80      	pop	{r7}
 800ec96:	4770      	bx	lr
 800ec98:	20000340 	.word	0x20000340

0800ec9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eca2:	f3ef 8305 	mrs	r3, IPSR
 800eca6:	60bb      	str	r3, [r7, #8]
  return(result);
 800eca8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10f      	bne.n	800ecce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecae:	f3ef 8310 	mrs	r3, PRIMASK
 800ecb2:	607b      	str	r3, [r7, #4]
  return(result);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d109      	bne.n	800ecce <osKernelStart+0x32>
 800ecba:	4b11      	ldr	r3, [pc, #68]	; (800ed00 <osKernelStart+0x64>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	d109      	bne.n	800ecd6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecc2:	f3ef 8311 	mrs	r3, BASEPRI
 800ecc6:	603b      	str	r3, [r7, #0]
  return(result);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ecce:	f06f 0305 	mvn.w	r3, #5
 800ecd2:	60fb      	str	r3, [r7, #12]
 800ecd4:	e00e      	b.n	800ecf4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800ecd6:	4b0a      	ldr	r3, [pc, #40]	; (800ed00 <osKernelStart+0x64>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d107      	bne.n	800ecee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800ecde:	4b08      	ldr	r3, [pc, #32]	; (800ed00 <osKernelStart+0x64>)
 800ece0:	2202      	movs	r2, #2
 800ece2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800ece4:	f001 fa14 	bl	8010110 <vTaskStartScheduler>
      stat = osOK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	60fb      	str	r3, [r7, #12]
 800ecec:	e002      	b.n	800ecf4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800ecee:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	20000340 	.word	0x20000340

0800ed04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b092      	sub	sp, #72	; 0x48
 800ed08:	af04      	add	r7, sp, #16
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ed10:	2300      	movs	r3, #0
 800ed12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed14:	f3ef 8305 	mrs	r3, IPSR
 800ed18:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f040 8094 	bne.w	800ee4a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed22:	f3ef 8310 	mrs	r3, PRIMASK
 800ed26:	623b      	str	r3, [r7, #32]
  return(result);
 800ed28:	6a3b      	ldr	r3, [r7, #32]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f040 808d 	bne.w	800ee4a <osThreadNew+0x146>
 800ed30:	4b48      	ldr	r3, [pc, #288]	; (800ee54 <osThreadNew+0x150>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d106      	bne.n	800ed46 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed38:	f3ef 8311 	mrs	r3, BASEPRI
 800ed3c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f040 8082 	bne.w	800ee4a <osThreadNew+0x146>
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d07e      	beq.n	800ee4a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800ed4c:	2380      	movs	r3, #128	; 0x80
 800ed4e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800ed50:	2318      	movs	r3, #24
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800ed54:	2300      	movs	r3, #0
 800ed56:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800ed58:	f107 031b 	add.w	r3, r7, #27
 800ed5c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800ed5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed62:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d045      	beq.n	800edf6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <osThreadNew+0x74>
        name = attr->name;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d008      	beq.n	800ed9e <osThreadNew+0x9a>
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	2b38      	cmp	r3, #56	; 0x38
 800ed90:	d805      	bhi.n	800ed9e <osThreadNew+0x9a>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <osThreadNew+0x9e>
        return (NULL);
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e054      	b.n	800ee4c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	695b      	ldr	r3, [r3, #20]
 800edae:	089b      	lsrs	r3, r3, #2
 800edb0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00e      	beq.n	800edd8 <osThreadNew+0xd4>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	2b63      	cmp	r3, #99	; 0x63
 800edc0:	d90a      	bls.n	800edd8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d006      	beq.n	800edd8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <osThreadNew+0xd4>
        mem = 1;
 800edd2:	2301      	movs	r3, #1
 800edd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800edd6:	e010      	b.n	800edfa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10c      	bne.n	800edfa <osThreadNew+0xf6>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d108      	bne.n	800edfa <osThreadNew+0xf6>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d104      	bne.n	800edfa <osThreadNew+0xf6>
          mem = 0;
 800edf0:	2300      	movs	r3, #0
 800edf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800edf4:	e001      	b.n	800edfa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d110      	bne.n	800ee22 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ee08:	9202      	str	r2, [sp, #8]
 800ee0a:	9301      	str	r3, [sp, #4]
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f000 ffac 	bl	800fd74 <xTaskCreateStatic>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	617b      	str	r3, [r7, #20]
 800ee20:	e013      	b.n	800ee4a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d110      	bne.n	800ee4a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	f107 0314 	add.w	r3, r7, #20
 800ee30:	9301      	str	r3, [sp, #4]
 800ee32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f000 fff3 	bl	800fe26 <xTaskCreate>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d001      	beq.n	800ee4a <osThreadNew+0x146>
          hTask = NULL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ee4a:	697b      	ldr	r3, [r7, #20]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3738      	adds	r7, #56	; 0x38
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20000340 	.word	0x20000340

0800ee58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee60:	f3ef 8305 	mrs	r3, IPSR
 800ee64:	613b      	str	r3, [r7, #16]
  return(result);
 800ee66:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d10f      	bne.n	800ee8c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ee70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d109      	bne.n	800ee8c <osDelay+0x34>
 800ee78:	4b0d      	ldr	r3, [pc, #52]	; (800eeb0 <osDelay+0x58>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d109      	bne.n	800ee94 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee80:	f3ef 8311 	mrs	r3, BASEPRI
 800ee84:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d003      	beq.n	800ee94 <osDelay+0x3c>
    stat = osErrorISR;
 800ee8c:	f06f 0305 	mvn.w	r3, #5
 800ee90:	617b      	str	r3, [r7, #20]
 800ee92:	e007      	b.n	800eea4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ee94:	2300      	movs	r3, #0
 800ee96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d002      	beq.n	800eea4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f001 f902 	bl	80100a8 <vTaskDelay>
    }
  }

  return (stat);
 800eea4:	697b      	ldr	r3, [r7, #20]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20000340 	.word	0x20000340

0800eeb4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08a      	sub	sp, #40	; 0x28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800eebc:	2300      	movs	r3, #0
 800eebe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eec0:	f3ef 8305 	mrs	r3, IPSR
 800eec4:	613b      	str	r3, [r7, #16]
  return(result);
 800eec6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f040 8085 	bne.w	800efd8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eece:	f3ef 8310 	mrs	r3, PRIMASK
 800eed2:	60fb      	str	r3, [r7, #12]
  return(result);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d17e      	bne.n	800efd8 <osMutexNew+0x124>
 800eeda:	4b42      	ldr	r3, [pc, #264]	; (800efe4 <osMutexNew+0x130>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d105      	bne.n	800eeee <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eee2:	f3ef 8311 	mrs	r3, BASEPRI
 800eee6:	60bb      	str	r3, [r7, #8]
  return(result);
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d174      	bne.n	800efd8 <osMutexNew+0x124>
    if (attr != NULL) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d003      	beq.n	800eefc <osMutexNew+0x48>
      type = attr->attr_bits;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	623b      	str	r3, [r7, #32]
 800eefa:	e001      	b.n	800ef00 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800eefc:	2300      	movs	r3, #0
 800eefe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ef00:	6a3b      	ldr	r3, [r7, #32]
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d002      	beq.n	800ef10 <osMutexNew+0x5c>
      rmtx = 1U;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	61fb      	str	r3, [r7, #28]
 800ef0e:	e001      	b.n	800ef14 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ef10:	2300      	movs	r3, #0
 800ef12:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	f003 0308 	and.w	r3, r3, #8
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d15c      	bne.n	800efd8 <osMutexNew+0x124>
      mem = -1;
 800ef1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef22:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d015      	beq.n	800ef56 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d006      	beq.n	800ef40 <osMutexNew+0x8c>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	2b4f      	cmp	r3, #79	; 0x4f
 800ef38:	d902      	bls.n	800ef40 <osMutexNew+0x8c>
          mem = 1;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	61bb      	str	r3, [r7, #24]
 800ef3e:	e00c      	b.n	800ef5a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d108      	bne.n	800ef5a <osMutexNew+0xa6>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d104      	bne.n	800ef5a <osMutexNew+0xa6>
            mem = 0;
 800ef50:	2300      	movs	r3, #0
 800ef52:	61bb      	str	r3, [r7, #24]
 800ef54:	e001      	b.n	800ef5a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ef56:	2300      	movs	r3, #0
 800ef58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d112      	bne.n	800ef86 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d007      	beq.n	800ef76 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	2004      	movs	r0, #4
 800ef6e:	f000 fb0f 	bl	800f590 <xQueueCreateMutexStatic>
 800ef72:	6278      	str	r0, [r7, #36]	; 0x24
 800ef74:	e016      	b.n	800efa4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	f000 fb07 	bl	800f590 <xQueueCreateMutexStatic>
 800ef82:	6278      	str	r0, [r7, #36]	; 0x24
 800ef84:	e00e      	b.n	800efa4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10b      	bne.n	800efa4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d004      	beq.n	800ef9c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ef92:	2004      	movs	r0, #4
 800ef94:	f000 fae4 	bl	800f560 <xQueueCreateMutex>
 800ef98:	6278      	str	r0, [r7, #36]	; 0x24
 800ef9a:	e003      	b.n	800efa4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ef9c:	2001      	movs	r0, #1
 800ef9e:	f000 fadf 	bl	800f560 <xQueueCreateMutex>
 800efa2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d00c      	beq.n	800efc4 <osMutexNew+0x110>
        if (attr != NULL) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d003      	beq.n	800efb8 <osMutexNew+0x104>
          name = attr->name;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	617b      	str	r3, [r7, #20]
 800efb6:	e001      	b.n	800efbc <osMutexNew+0x108>
        } else {
          name = NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800efbc:	6979      	ldr	r1, [r7, #20]
 800efbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efc0:	f000 fe7c 	bl	800fcbc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d006      	beq.n	800efd8 <osMutexNew+0x124>
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d003      	beq.n	800efd8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	f043 0301 	orr.w	r3, r3, #1
 800efd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800efd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3728      	adds	r7, #40	; 0x28
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20000340 	.word	0x20000340

0800efe8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800efe8:	b580      	push	{r7, lr}
 800efea:	b08c      	sub	sp, #48	; 0x30
 800efec:	af02      	add	r7, sp, #8
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800eff4:	2300      	movs	r3, #0
 800eff6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eff8:	f3ef 8305 	mrs	r3, IPSR
 800effc:	61bb      	str	r3, [r7, #24]
  return(result);
 800effe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f000:	2b00      	cmp	r3, #0
 800f002:	d170      	bne.n	800f0e6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f004:	f3ef 8310 	mrs	r3, PRIMASK
 800f008:	617b      	str	r3, [r7, #20]
  return(result);
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d16a      	bne.n	800f0e6 <osMessageQueueNew+0xfe>
 800f010:	4b37      	ldr	r3, [pc, #220]	; (800f0f0 <osMessageQueueNew+0x108>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b02      	cmp	r3, #2
 800f016:	d105      	bne.n	800f024 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f018:	f3ef 8311 	mrs	r3, BASEPRI
 800f01c:	613b      	str	r3, [r7, #16]
  return(result);
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d160      	bne.n	800f0e6 <osMessageQueueNew+0xfe>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d05d      	beq.n	800f0e6 <osMessageQueueNew+0xfe>
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d05a      	beq.n	800f0e6 <osMessageQueueNew+0xfe>
    mem = -1;
 800f030:	f04f 33ff 	mov.w	r3, #4294967295
 800f034:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d029      	beq.n	800f090 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d012      	beq.n	800f06a <osMessageQueueNew+0x82>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	2b4f      	cmp	r3, #79	; 0x4f
 800f04a:	d90e      	bls.n	800f06a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f050:	2b00      	cmp	r3, #0
 800f052:	d00a      	beq.n	800f06a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	695a      	ldr	r2, [r3, #20]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	fb01 f303 	mul.w	r3, r1, r3
 800f060:	429a      	cmp	r2, r3
 800f062:	d302      	bcc.n	800f06a <osMessageQueueNew+0x82>
        mem = 1;
 800f064:	2301      	movs	r3, #1
 800f066:	623b      	str	r3, [r7, #32]
 800f068:	e014      	b.n	800f094 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d110      	bne.n	800f094 <osMessageQueueNew+0xac>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d10c      	bne.n	800f094 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d108      	bne.n	800f094 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d104      	bne.n	800f094 <osMessageQueueNew+0xac>
          mem = 0;
 800f08a:	2300      	movs	r3, #0
 800f08c:	623b      	str	r3, [r7, #32]
 800f08e:	e001      	b.n	800f094 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f090:	2300      	movs	r3, #0
 800f092:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f094:	6a3b      	ldr	r3, [r7, #32]
 800f096:	2b01      	cmp	r3, #1
 800f098:	d10c      	bne.n	800f0b4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	691a      	ldr	r2, [r3, #16]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6899      	ldr	r1, [r3, #8]
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	68b9      	ldr	r1, [r7, #8]
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f000 f96c 	bl	800f388 <xQueueGenericCreateStatic>
 800f0b0:	6278      	str	r0, [r7, #36]	; 0x24
 800f0b2:	e008      	b.n	800f0c6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f0b4:	6a3b      	ldr	r3, [r7, #32]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d105      	bne.n	800f0c6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	68b9      	ldr	r1, [r7, #8]
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f000 f9d4 	bl	800f46c <xQueueGenericCreate>
 800f0c4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00c      	beq.n	800f0e6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <osMessageQueueNew+0xf2>
        name = attr->name;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	61fb      	str	r3, [r7, #28]
 800f0d8:	e001      	b.n	800f0de <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f0de:	69f9      	ldr	r1, [r7, #28]
 800f0e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0e2:	f000 fdeb 	bl	800fcbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3728      	adds	r7, #40	; 0x28
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	20000340 	.word	0x20000340

0800f0f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	4a06      	ldr	r2, [pc, #24]	; (800f11c <vApplicationGetIdleTaskMemory+0x28>)
 800f104:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	4a05      	ldr	r2, [pc, #20]	; (800f120 <vApplicationGetIdleTaskMemory+0x2c>)
 800f10a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2280      	movs	r2, #128	; 0x80
 800f110:	601a      	str	r2, [r3, #0]
}
 800f112:	bf00      	nop
 800f114:	3714      	adds	r7, #20
 800f116:	46bd      	mov	sp, r7
 800f118:	bc80      	pop	{r7}
 800f11a:	4770      	bx	lr
 800f11c:	20000344 	.word	0x20000344
 800f120:	200003a8 	.word	0x200003a8

0800f124 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	4a07      	ldr	r2, [pc, #28]	; (800f150 <vApplicationGetTimerTaskMemory+0x2c>)
 800f134:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	4a06      	ldr	r2, [pc, #24]	; (800f154 <vApplicationGetTimerTaskMemory+0x30>)
 800f13a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f142:	601a      	str	r2, [r3, #0]
}
 800f144:	bf00      	nop
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	bc80      	pop	{r7}
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	200005a8 	.word	0x200005a8
 800f154:	2000060c 	.word	0x2000060c

0800f158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f103 0208 	add.w	r2, r3, #8
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f04f 32ff 	mov.w	r2, #4294967295
 800f170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f103 0208 	add.w	r2, r3, #8
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f103 0208 	add.w	r2, r3, #8
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	bc80      	pop	{r7}
 800f194:	4770      	bx	lr

0800f196 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f196:	b480      	push	{r7}
 800f198:	b083      	sub	sp, #12
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bc80      	pop	{r7}
 800f1ac:	4770      	bx	lr

0800f1ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1ae:	b480      	push	{r7}
 800f1b0:	b085      	sub	sp, #20
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
 800f1b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	689a      	ldr	r2, [r3, #8]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	1c5a      	adds	r2, r3, #1
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	601a      	str	r2, [r3, #0]
}
 800f1ea:	bf00      	nop
 800f1ec:	3714      	adds	r7, #20
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bc80      	pop	{r7}
 800f1f2:	4770      	bx	lr

0800f1f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f20a:	d103      	bne.n	800f214 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	e00c      	b.n	800f22e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	3308      	adds	r3, #8
 800f218:	60fb      	str	r3, [r7, #12]
 800f21a:	e002      	b.n	800f222 <vListInsert+0x2e>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	60fb      	str	r3, [r7, #12]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d2f6      	bcs.n	800f21c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	683a      	ldr	r2, [r7, #0]
 800f23c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	683a      	ldr	r2, [r7, #0]
 800f248:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	1c5a      	adds	r2, r3, #1
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	601a      	str	r2, [r3, #0]
}
 800f25a:	bf00      	nop
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	bc80      	pop	{r7}
 800f262:	4770      	bx	lr

0800f264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f264:	b480      	push	{r7}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	691b      	ldr	r3, [r3, #16]
 800f270:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	687a      	ldr	r2, [r7, #4]
 800f278:	6892      	ldr	r2, [r2, #8]
 800f27a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	6852      	ldr	r2, [r2, #4]
 800f284:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d103      	bne.n	800f298 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	689a      	ldr	r2, [r3, #8]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	1e5a      	subs	r2, r3, #1
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3714      	adds	r7, #20
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bc80      	pop	{r7}
 800f2b4:	4770      	bx	lr
	...

0800f2b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d109      	bne.n	800f2e0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d0:	f383 8811 	msr	BASEPRI, r3
 800f2d4:	f3bf 8f6f 	isb	sy
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	60bb      	str	r3, [r7, #8]
 800f2de:	e7fe      	b.n	800f2de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f2e0:	f002 f842 	bl	8011368 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ec:	68f9      	ldr	r1, [r7, #12]
 800f2ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f2f0:	fb01 f303 	mul.w	r3, r1, r3
 800f2f4:	441a      	add	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f310:	3b01      	subs	r3, #1
 800f312:	68f9      	ldr	r1, [r7, #12]
 800f314:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f316:	fb01 f303 	mul.w	r3, r1, r3
 800f31a:	441a      	add	r2, r3
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	22ff      	movs	r2, #255	; 0xff
 800f324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	22ff      	movs	r2, #255	; 0xff
 800f32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d114      	bne.n	800f360 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	691b      	ldr	r3, [r3, #16]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d01a      	beq.n	800f374 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	3310      	adds	r3, #16
 800f342:	4618      	mov	r0, r3
 800f344:	f001 f986 	bl	8010654 <xTaskRemoveFromEventList>
 800f348:	4603      	mov	r3, r0
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d012      	beq.n	800f374 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f34e:	4b0d      	ldr	r3, [pc, #52]	; (800f384 <xQueueGenericReset+0xcc>)
 800f350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	f3bf 8f4f 	dsb	sy
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	e009      	b.n	800f374 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	3310      	adds	r3, #16
 800f364:	4618      	mov	r0, r3
 800f366:	f7ff fef7 	bl	800f158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	3324      	adds	r3, #36	; 0x24
 800f36e:	4618      	mov	r0, r3
 800f370:	f7ff fef2 	bl	800f158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f374:	f002 f826 	bl	80113c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f378:	2301      	movs	r3, #1
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	e000ed04 	.word	0xe000ed04

0800f388 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b08e      	sub	sp, #56	; 0x38
 800f38c:	af02      	add	r7, sp, #8
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d109      	bne.n	800f3b0 <xQueueGenericCreateStatic+0x28>
 800f39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a0:	f383 8811 	msr	BASEPRI, r3
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	f3bf 8f4f 	dsb	sy
 800f3ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3ae:	e7fe      	b.n	800f3ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d109      	bne.n	800f3ca <xQueueGenericCreateStatic+0x42>
 800f3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ba:	f383 8811 	msr	BASEPRI, r3
 800f3be:	f3bf 8f6f 	isb	sy
 800f3c2:	f3bf 8f4f 	dsb	sy
 800f3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3c8:	e7fe      	b.n	800f3c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d002      	beq.n	800f3d6 <xQueueGenericCreateStatic+0x4e>
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d001      	beq.n	800f3da <xQueueGenericCreateStatic+0x52>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e000      	b.n	800f3dc <xQueueGenericCreateStatic+0x54>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d109      	bne.n	800f3f4 <xQueueGenericCreateStatic+0x6c>
 800f3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	623b      	str	r3, [r7, #32]
 800f3f2:	e7fe      	b.n	800f3f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <xQueueGenericCreateStatic+0x78>
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d101      	bne.n	800f404 <xQueueGenericCreateStatic+0x7c>
 800f400:	2301      	movs	r3, #1
 800f402:	e000      	b.n	800f406 <xQueueGenericCreateStatic+0x7e>
 800f404:	2300      	movs	r3, #0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d109      	bne.n	800f41e <xQueueGenericCreateStatic+0x96>
 800f40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	61fb      	str	r3, [r7, #28]
 800f41c:	e7fe      	b.n	800f41c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f41e:	2350      	movs	r3, #80	; 0x50
 800f420:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2b50      	cmp	r3, #80	; 0x50
 800f426:	d009      	beq.n	800f43c <xQueueGenericCreateStatic+0xb4>
 800f428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42c:	f383 8811 	msr	BASEPRI, r3
 800f430:	f3bf 8f6f 	isb	sy
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	61bb      	str	r3, [r7, #24]
 800f43a:	e7fe      	b.n	800f43a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	2b00      	cmp	r3, #0
 800f444:	d00d      	beq.n	800f462 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f44e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	4613      	mov	r3, r2
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	68b9      	ldr	r1, [r7, #8]
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f000 f842 	bl	800f4e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f464:	4618      	mov	r0, r3
 800f466:	3730      	adds	r7, #48	; 0x30
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b08a      	sub	sp, #40	; 0x28
 800f470:	af02      	add	r7, sp, #8
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	4613      	mov	r3, r2
 800f478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d109      	bne.n	800f494 <xQueueGenericCreate+0x28>
 800f480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	613b      	str	r3, [r7, #16]
 800f492:	e7fe      	b.n	800f492 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d102      	bne.n	800f4a0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	61fb      	str	r3, [r7, #28]
 800f49e:	e004      	b.n	800f4aa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	fb02 f303 	mul.w	r3, r2, r3
 800f4a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	3350      	adds	r3, #80	; 0x50
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f002 f850 	bl	8011554 <pvPortMalloc>
 800f4b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00f      	beq.n	800f4dc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	3350      	adds	r3, #80	; 0x50
 800f4c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4ca:	79fa      	ldrb	r2, [r7, #7]
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	9300      	str	r3, [sp, #0]
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	697a      	ldr	r2, [r7, #20]
 800f4d4:	68b9      	ldr	r1, [r7, #8]
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f000 f805 	bl	800f4e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f4dc:	69bb      	ldr	r3, [r7, #24]
	}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3720      	adds	r7, #32
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b084      	sub	sp, #16
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	60f8      	str	r0, [r7, #12]
 800f4ee:	60b9      	str	r1, [r7, #8]
 800f4f0:	607a      	str	r2, [r7, #4]
 800f4f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d103      	bne.n	800f502 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	69ba      	ldr	r2, [r7, #24]
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	e002      	b.n	800f508 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	68ba      	ldr	r2, [r7, #8]
 800f512:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f514:	2101      	movs	r1, #1
 800f516:	69b8      	ldr	r0, [r7, #24]
 800f518:	f7ff fece 	bl	800f2b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	78fa      	ldrb	r2, [r7, #3]
 800f520:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f524:	bf00      	nop
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00e      	beq.n	800f558 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2200      	movs	r2, #0
 800f544:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2200      	movs	r2, #0
 800f54a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f54c:	2300      	movs	r3, #0
 800f54e:	2200      	movs	r2, #0
 800f550:	2100      	movs	r1, #0
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 f838 	bl	800f5c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f558:	bf00      	nop
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af00      	add	r7, sp, #0
 800f566:	4603      	mov	r3, r0
 800f568:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f56a:	2301      	movs	r3, #1
 800f56c:	617b      	str	r3, [r7, #20]
 800f56e:	2300      	movs	r3, #0
 800f570:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f572:	79fb      	ldrb	r3, [r7, #7]
 800f574:	461a      	mov	r2, r3
 800f576:	6939      	ldr	r1, [r7, #16]
 800f578:	6978      	ldr	r0, [r7, #20]
 800f57a:	f7ff ff77 	bl	800f46c <xQueueGenericCreate>
 800f57e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7ff ffd3 	bl	800f52c <prvInitialiseMutex>

		return pxNewQueue;
 800f586:	68fb      	ldr	r3, [r7, #12]
	}
 800f588:	4618      	mov	r0, r3
 800f58a:	3718      	adds	r7, #24
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f590:	b580      	push	{r7, lr}
 800f592:	b088      	sub	sp, #32
 800f594:	af02      	add	r7, sp, #8
 800f596:	4603      	mov	r3, r0
 800f598:	6039      	str	r1, [r7, #0]
 800f59a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f59c:	2301      	movs	r3, #1
 800f59e:	617b      	str	r3, [r7, #20]
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f5a4:	79fb      	ldrb	r3, [r7, #7]
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	6939      	ldr	r1, [r7, #16]
 800f5ae:	6978      	ldr	r0, [r7, #20]
 800f5b0:	f7ff feea 	bl	800f388 <xQueueGenericCreateStatic>
 800f5b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f7ff ffb8 	bl	800f52c <prvInitialiseMutex>

		return pxNewQueue;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
	}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
	...

0800f5c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b08e      	sub	sp, #56	; 0x38
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d109      	bne.n	800f5f8 <xQueueGenericSend+0x30>
 800f5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e8:	f383 8811 	msr	BASEPRI, r3
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5f6:	e7fe      	b.n	800f5f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d103      	bne.n	800f606 <xQueueGenericSend+0x3e>
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <xQueueGenericSend+0x42>
 800f606:	2301      	movs	r3, #1
 800f608:	e000      	b.n	800f60c <xQueueGenericSend+0x44>
 800f60a:	2300      	movs	r3, #0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d109      	bne.n	800f624 <xQueueGenericSend+0x5c>
 800f610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	627b      	str	r3, [r7, #36]	; 0x24
 800f622:	e7fe      	b.n	800f622 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d103      	bne.n	800f632 <xQueueGenericSend+0x6a>
 800f62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d101      	bne.n	800f636 <xQueueGenericSend+0x6e>
 800f632:	2301      	movs	r3, #1
 800f634:	e000      	b.n	800f638 <xQueueGenericSend+0x70>
 800f636:	2300      	movs	r3, #0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d109      	bne.n	800f650 <xQueueGenericSend+0x88>
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	623b      	str	r3, [r7, #32]
 800f64e:	e7fe      	b.n	800f64e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f650:	f001 f9ba 	bl	80109c8 <xTaskGetSchedulerState>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	d102      	bne.n	800f660 <xQueueGenericSend+0x98>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d101      	bne.n	800f664 <xQueueGenericSend+0x9c>
 800f660:	2301      	movs	r3, #1
 800f662:	e000      	b.n	800f666 <xQueueGenericSend+0x9e>
 800f664:	2300      	movs	r3, #0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d109      	bne.n	800f67e <xQueueGenericSend+0xb6>
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	61fb      	str	r3, [r7, #28]
 800f67c:	e7fe      	b.n	800f67c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f67e:	f001 fe73 	bl	8011368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d302      	bcc.n	800f694 <xQueueGenericSend+0xcc>
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	2b02      	cmp	r3, #2
 800f692:	d129      	bne.n	800f6e8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	68b9      	ldr	r1, [r7, #8]
 800f698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f69a:	f000 f9ff 	bl	800fa9c <prvCopyDataToQueue>
 800f69e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d010      	beq.n	800f6ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	3324      	adds	r3, #36	; 0x24
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f000 ffd1 	bl	8010654 <xTaskRemoveFromEventList>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d013      	beq.n	800f6e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f6b8:	4b3f      	ldr	r3, [pc, #252]	; (800f7b8 <xQueueGenericSend+0x1f0>)
 800f6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6be:	601a      	str	r2, [r3, #0]
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	e00a      	b.n	800f6e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d007      	beq.n	800f6e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f6d0:	4b39      	ldr	r3, [pc, #228]	; (800f7b8 <xQueueGenericSend+0x1f0>)
 800f6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f6e0:	f001 fe70 	bl	80113c4 <vPortExitCritical>
				return pdPASS;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e063      	b.n	800f7b0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d103      	bne.n	800f6f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f6ee:	f001 fe69 	bl	80113c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e05c      	b.n	800f7b0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d106      	bne.n	800f70a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f6fc:	f107 0314 	add.w	r3, r7, #20
 800f700:	4618      	mov	r0, r3
 800f702:	f001 f809 	bl	8010718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f706:	2301      	movs	r3, #1
 800f708:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f70a:	f001 fe5b 	bl	80113c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f70e:	f000 fd65 	bl	80101dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f712:	f001 fe29 	bl	8011368 <vPortEnterCritical>
 800f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f71c:	b25b      	sxtb	r3, r3
 800f71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f722:	d103      	bne.n	800f72c <xQueueGenericSend+0x164>
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	2200      	movs	r2, #0
 800f728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f732:	b25b      	sxtb	r3, r3
 800f734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f738:	d103      	bne.n	800f742 <xQueueGenericSend+0x17a>
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f742:	f001 fe3f 	bl	80113c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f746:	1d3a      	adds	r2, r7, #4
 800f748:	f107 0314 	add.w	r3, r7, #20
 800f74c:	4611      	mov	r1, r2
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 fff8 	bl	8010744 <xTaskCheckForTimeOut>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d124      	bne.n	800f7a4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f75a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f75c:	f000 fa96 	bl	800fc8c <prvIsQueueFull>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d018      	beq.n	800f798 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	3310      	adds	r3, #16
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	4611      	mov	r1, r2
 800f76e:	4618      	mov	r0, r3
 800f770:	f000 ff22 	bl	80105b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f776:	f000 fa21 	bl	800fbbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f77a:	f000 fd3d 	bl	80101f8 <xTaskResumeAll>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	f47f af7c 	bne.w	800f67e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f786:	4b0c      	ldr	r3, [pc, #48]	; (800f7b8 <xQueueGenericSend+0x1f0>)
 800f788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	e772      	b.n	800f67e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f79a:	f000 fa0f 	bl	800fbbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f79e:	f000 fd2b 	bl	80101f8 <xTaskResumeAll>
 800f7a2:	e76c      	b.n	800f67e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7a6:	f000 fa09 	bl	800fbbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7aa:	f000 fd25 	bl	80101f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f7ae:	2300      	movs	r3, #0
		}
	}
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3738      	adds	r7, #56	; 0x38
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	e000ed04 	.word	0xe000ed04

0800f7bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b08e      	sub	sp, #56	; 0x38
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	607a      	str	r2, [r7, #4]
 800f7c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d109      	bne.n	800f7e8 <xQueueGenericSendFromISR+0x2c>
 800f7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	627b      	str	r3, [r7, #36]	; 0x24
 800f7e6:	e7fe      	b.n	800f7e6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d103      	bne.n	800f7f6 <xQueueGenericSendFromISR+0x3a>
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <xQueueGenericSendFromISR+0x3e>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e000      	b.n	800f7fc <xQueueGenericSendFromISR+0x40>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d109      	bne.n	800f814 <xQueueGenericSendFromISR+0x58>
 800f800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f804:	f383 8811 	msr	BASEPRI, r3
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	f3bf 8f4f 	dsb	sy
 800f810:	623b      	str	r3, [r7, #32]
 800f812:	e7fe      	b.n	800f812 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2b02      	cmp	r3, #2
 800f818:	d103      	bne.n	800f822 <xQueueGenericSendFromISR+0x66>
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d101      	bne.n	800f826 <xQueueGenericSendFromISR+0x6a>
 800f822:	2301      	movs	r3, #1
 800f824:	e000      	b.n	800f828 <xQueueGenericSendFromISR+0x6c>
 800f826:	2300      	movs	r3, #0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d109      	bne.n	800f840 <xQueueGenericSendFromISR+0x84>
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	61fb      	str	r3, [r7, #28]
 800f83e:	e7fe      	b.n	800f83e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f840:	f001 fe4c 	bl	80114dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f844:	f3ef 8211 	mrs	r2, BASEPRI
 800f848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	61ba      	str	r2, [r7, #24]
 800f85a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f85c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f85e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f868:	429a      	cmp	r2, r3
 800f86a:	d302      	bcc.n	800f872 <xQueueGenericSendFromISR+0xb6>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d12c      	bne.n	800f8cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f87c:	683a      	ldr	r2, [r7, #0]
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f882:	f000 f90b 	bl	800fa9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f886:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88e:	d112      	bne.n	800f8b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f894:	2b00      	cmp	r3, #0
 800f896:	d016      	beq.n	800f8c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89a:	3324      	adds	r3, #36	; 0x24
 800f89c:	4618      	mov	r0, r3
 800f89e:	f000 fed9 	bl	8010654 <xTaskRemoveFromEventList>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d00e      	beq.n	800f8c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00b      	beq.n	800f8c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	601a      	str	r2, [r3, #0]
 800f8b4:	e007      	b.n	800f8c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f8b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	b25a      	sxtb	r2, r3
 800f8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f8ca:	e001      	b.n	800f8d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3738      	adds	r7, #56	; 0x38
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b08c      	sub	sp, #48	; 0x30
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d109      	bne.n	800f912 <xQueueReceive+0x2e>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	623b      	str	r3, [r7, #32]
 800f910:	e7fe      	b.n	800f910 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d103      	bne.n	800f920 <xQueueReceive+0x3c>
 800f918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d101      	bne.n	800f924 <xQueueReceive+0x40>
 800f920:	2301      	movs	r3, #1
 800f922:	e000      	b.n	800f926 <xQueueReceive+0x42>
 800f924:	2300      	movs	r3, #0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d109      	bne.n	800f93e <xQueueReceive+0x5a>
 800f92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92e:	f383 8811 	msr	BASEPRI, r3
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	f3bf 8f4f 	dsb	sy
 800f93a:	61fb      	str	r3, [r7, #28]
 800f93c:	e7fe      	b.n	800f93c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f93e:	f001 f843 	bl	80109c8 <xTaskGetSchedulerState>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d102      	bne.n	800f94e <xQueueReceive+0x6a>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <xQueueReceive+0x6e>
 800f94e:	2301      	movs	r3, #1
 800f950:	e000      	b.n	800f954 <xQueueReceive+0x70>
 800f952:	2300      	movs	r3, #0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d109      	bne.n	800f96c <xQueueReceive+0x88>
 800f958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95c:	f383 8811 	msr	BASEPRI, r3
 800f960:	f3bf 8f6f 	isb	sy
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	61bb      	str	r3, [r7, #24]
 800f96a:	e7fe      	b.n	800f96a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f96c:	f001 fcfc 	bl	8011368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f974:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d01f      	beq.n	800f9bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f97c:	68b9      	ldr	r1, [r7, #8]
 800f97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f980:	f000 f8f6 	bl	800fb70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	1e5a      	subs	r2, r3, #1
 800f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98e:	691b      	ldr	r3, [r3, #16]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00f      	beq.n	800f9b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f996:	3310      	adds	r3, #16
 800f998:	4618      	mov	r0, r3
 800f99a:	f000 fe5b 	bl	8010654 <xTaskRemoveFromEventList>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d007      	beq.n	800f9b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f9a4:	4b3c      	ldr	r3, [pc, #240]	; (800fa98 <xQueueReceive+0x1b4>)
 800f9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9aa:	601a      	str	r2, [r3, #0]
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f9b4:	f001 fd06 	bl	80113c4 <vPortExitCritical>
				return pdPASS;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e069      	b.n	800fa90 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d103      	bne.n	800f9ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f9c2:	f001 fcff 	bl	80113c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	e062      	b.n	800fa90 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d106      	bne.n	800f9de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9d0:	f107 0310 	add.w	r3, r7, #16
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f000 fe9f 	bl	8010718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9da:	2301      	movs	r3, #1
 800f9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9de:	f001 fcf1 	bl	80113c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9e2:	f000 fbfb 	bl	80101dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9e6:	f001 fcbf 	bl	8011368 <vPortEnterCritical>
 800f9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9f0:	b25b      	sxtb	r3, r3
 800f9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f6:	d103      	bne.n	800fa00 <xQueueReceive+0x11c>
 800f9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa06:	b25b      	sxtb	r3, r3
 800fa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0c:	d103      	bne.n	800fa16 <xQueueReceive+0x132>
 800fa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa10:	2200      	movs	r2, #0
 800fa12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa16:	f001 fcd5 	bl	80113c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa1a:	1d3a      	adds	r2, r7, #4
 800fa1c:	f107 0310 	add.w	r3, r7, #16
 800fa20:	4611      	mov	r1, r2
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 fe8e 	bl	8010744 <xTaskCheckForTimeOut>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d123      	bne.n	800fa76 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa30:	f000 f916 	bl	800fc60 <prvIsQueueEmpty>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d017      	beq.n	800fa6a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	3324      	adds	r3, #36	; 0x24
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	4611      	mov	r1, r2
 800fa42:	4618      	mov	r0, r3
 800fa44:	f000 fdb8 	bl	80105b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa4a:	f000 f8b7 	bl	800fbbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa4e:	f000 fbd3 	bl	80101f8 <xTaskResumeAll>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d189      	bne.n	800f96c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800fa58:	4b0f      	ldr	r3, [pc, #60]	; (800fa98 <xQueueReceive+0x1b4>)
 800fa5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	f3bf 8f4f 	dsb	sy
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	e780      	b.n	800f96c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa6c:	f000 f8a6 	bl	800fbbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa70:	f000 fbc2 	bl	80101f8 <xTaskResumeAll>
 800fa74:	e77a      	b.n	800f96c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa78:	f000 f8a0 	bl	800fbbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa7c:	f000 fbbc 	bl	80101f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa82:	f000 f8ed 	bl	800fc60 <prvIsQueueEmpty>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f43f af6f 	beq.w	800f96c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3730      	adds	r7, #48	; 0x30
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	e000ed04 	.word	0xe000ed04

0800fa9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b086      	sub	sp, #24
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800faa8:	2300      	movs	r3, #0
 800faaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10d      	bne.n	800fad6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d14d      	bne.n	800fb5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f000 ff9c 	bl	8010a04 <xTaskPriorityDisinherit>
 800facc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2200      	movs	r2, #0
 800fad2:	605a      	str	r2, [r3, #4]
 800fad4:	e043      	b.n	800fb5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d119      	bne.n	800fb10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6898      	ldr	r0, [r3, #8]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae4:	461a      	mov	r2, r3
 800fae6:	68b9      	ldr	r1, [r7, #8]
 800fae8:	f002 fb80 	bl	80121ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	689a      	ldr	r2, [r3, #8]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faf4:	441a      	add	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	689a      	ldr	r2, [r3, #8]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d32b      	bcc.n	800fb5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	609a      	str	r2, [r3, #8]
 800fb0e:	e026      	b.n	800fb5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	68d8      	ldr	r0, [r3, #12]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb18:	461a      	mov	r2, r3
 800fb1a:	68b9      	ldr	r1, [r7, #8]
 800fb1c:	f002 fb66 	bl	80121ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	68da      	ldr	r2, [r3, #12]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb28:	425b      	negs	r3, r3
 800fb2a:	441a      	add	r2, r3
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	68da      	ldr	r2, [r3, #12]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d207      	bcs.n	800fb4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb44:	425b      	negs	r3, r3
 800fb46:	441a      	add	r2, r3
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	d105      	bne.n	800fb5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	1c5a      	adds	r2, r3, #1
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fb66:	697b      	ldr	r3, [r7, #20]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3718      	adds	r7, #24
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d018      	beq.n	800fbb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68da      	ldr	r2, [r3, #12]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb8a:	441a      	add	r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	68da      	ldr	r2, [r3, #12]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d303      	bcc.n	800fba4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	68d9      	ldr	r1, [r3, #12]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbac:	461a      	mov	r2, r3
 800fbae:	6838      	ldr	r0, [r7, #0]
 800fbb0:	f002 fb1c 	bl	80121ec <memcpy>
	}
}
 800fbb4:	bf00      	nop
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fbc4:	f001 fbd0 	bl	8011368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbd0:	e011      	b.n	800fbf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d012      	beq.n	800fc00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	3324      	adds	r3, #36	; 0x24
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 fd38 	bl	8010654 <xTaskRemoveFromEventList>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d001      	beq.n	800fbee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fbea:	f000 fe0b 	bl	8010804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fbee:	7bfb      	ldrb	r3, [r7, #15]
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	dce9      	bgt.n	800fbd2 <prvUnlockQueue+0x16>
 800fbfe:	e000      	b.n	800fc02 <prvUnlockQueue+0x46>
					break;
 800fc00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	22ff      	movs	r2, #255	; 0xff
 800fc06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fc0a:	f001 fbdb 	bl	80113c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fc0e:	f001 fbab 	bl	8011368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc1a:	e011      	b.n	800fc40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d012      	beq.n	800fc4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	3310      	adds	r3, #16
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f000 fd13 	bl	8010654 <xTaskRemoveFromEventList>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fc34:	f000 fde6 	bl	8010804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fc38:	7bbb      	ldrb	r3, [r7, #14]
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	dce9      	bgt.n	800fc1c <prvUnlockQueue+0x60>
 800fc48:	e000      	b.n	800fc4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fc4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	22ff      	movs	r2, #255	; 0xff
 800fc50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fc54:	f001 fbb6 	bl	80113c4 <vPortExitCritical>
}
 800fc58:	bf00      	nop
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc68:	f001 fb7e 	bl	8011368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d102      	bne.n	800fc7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fc74:	2301      	movs	r3, #1
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	e001      	b.n	800fc7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc7e:	f001 fba1 	bl	80113c4 <vPortExitCritical>

	return xReturn;
 800fc82:	68fb      	ldr	r3, [r7, #12]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc94:	f001 fb68 	bl	8011368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d102      	bne.n	800fcaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fca4:	2301      	movs	r3, #1
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	e001      	b.n	800fcae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fcae:	f001 fb89 	bl	80113c4 <vPortExitCritical>

	return xReturn;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	60fb      	str	r3, [r7, #12]
 800fcca:	e014      	b.n	800fcf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fccc:	4a0e      	ldr	r2, [pc, #56]	; (800fd08 <vQueueAddToRegistry+0x4c>)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d10b      	bne.n	800fcf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fcd8:	490b      	ldr	r1, [pc, #44]	; (800fd08 <vQueueAddToRegistry+0x4c>)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	683a      	ldr	r2, [r7, #0]
 800fcde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fce2:	4a09      	ldr	r2, [pc, #36]	; (800fd08 <vQueueAddToRegistry+0x4c>)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	4413      	add	r3, r2
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fcee:	e005      	b.n	800fcfc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	60fb      	str	r3, [r7, #12]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2b07      	cmp	r3, #7
 800fcfa:	d9e7      	bls.n	800fccc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fcfc:	bf00      	nop
 800fcfe:	3714      	adds	r7, #20
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bc80      	pop	{r7}
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	2000446c 	.word	0x2000446c

0800fd0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	60b9      	str	r1, [r7, #8]
 800fd16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fd1c:	f001 fb24 	bl	8011368 <vPortEnterCritical>
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd26:	b25b      	sxtb	r3, r3
 800fd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2c:	d103      	bne.n	800fd36 <vQueueWaitForMessageRestricted+0x2a>
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	2200      	movs	r2, #0
 800fd32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd3c:	b25b      	sxtb	r3, r3
 800fd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd42:	d103      	bne.n	800fd4c <vQueueWaitForMessageRestricted+0x40>
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	2200      	movs	r2, #0
 800fd48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd4c:	f001 fb3a 	bl	80113c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d106      	bne.n	800fd66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	3324      	adds	r3, #36	; 0x24
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	68b9      	ldr	r1, [r7, #8]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 fc4d 	bl	8010600 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fd66:	6978      	ldr	r0, [r7, #20]
 800fd68:	f7ff ff28 	bl	800fbbc <prvUnlockQueue>
	}
 800fd6c:	bf00      	nop
 800fd6e:	3718      	adds	r7, #24
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b08e      	sub	sp, #56	; 0x38
 800fd78:	af04      	add	r7, sp, #16
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <xTaskCreateStatic+0x28>
 800fd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	623b      	str	r3, [r7, #32]
 800fd9a:	e7fe      	b.n	800fd9a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d109      	bne.n	800fdb6 <xTaskCreateStatic+0x42>
 800fda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	61fb      	str	r3, [r7, #28]
 800fdb4:	e7fe      	b.n	800fdb4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fdb6:	2364      	movs	r3, #100	; 0x64
 800fdb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	2b64      	cmp	r3, #100	; 0x64
 800fdbe:	d009      	beq.n	800fdd4 <xTaskCreateStatic+0x60>
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	61bb      	str	r3, [r7, #24]
 800fdd2:	e7fe      	b.n	800fdd2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d01e      	beq.n	800fe18 <xTaskCreateStatic+0xa4>
 800fdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d01b      	beq.n	800fe18 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fde8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdec:	2202      	movs	r2, #2
 800fdee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	9303      	str	r3, [sp, #12]
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	f107 0314 	add.w	r3, r7, #20
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	68b9      	ldr	r1, [r7, #8]
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f000 f850 	bl	800feb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe12:	f000 f8d9 	bl	800ffc8 <prvAddNewTaskToReadyList>
 800fe16:	e001      	b.n	800fe1c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fe1c:	697b      	ldr	r3, [r7, #20]
	}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3728      	adds	r7, #40	; 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b08c      	sub	sp, #48	; 0x30
 800fe2a:	af04      	add	r7, sp, #16
 800fe2c:	60f8      	str	r0, [r7, #12]
 800fe2e:	60b9      	str	r1, [r7, #8]
 800fe30:	603b      	str	r3, [r7, #0]
 800fe32:	4613      	mov	r3, r2
 800fe34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe36:	88fb      	ldrh	r3, [r7, #6]
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f001 fb8a 	bl	8011554 <pvPortMalloc>
 800fe40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00e      	beq.n	800fe66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800fe48:	2064      	movs	r0, #100	; 0x64
 800fe4a:	f001 fb83 	bl	8011554 <pvPortMalloc>
 800fe4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d003      	beq.n	800fe5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	631a      	str	r2, [r3, #48]	; 0x30
 800fe5c:	e005      	b.n	800fe6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fe5e:	6978      	ldr	r0, [r7, #20]
 800fe60:	f001 fc3a 	bl	80116d8 <vPortFree>
 800fe64:	e001      	b.n	800fe6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fe66:	2300      	movs	r3, #0
 800fe68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d017      	beq.n	800fea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fe78:	88fa      	ldrh	r2, [r7, #6]
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9303      	str	r3, [sp, #12]
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	9302      	str	r3, [sp, #8]
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	9301      	str	r3, [sp, #4]
 800fe86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe88:	9300      	str	r3, [sp, #0]
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	68b9      	ldr	r1, [r7, #8]
 800fe8e:	68f8      	ldr	r0, [r7, #12]
 800fe90:	f000 f80e 	bl	800feb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe94:	69f8      	ldr	r0, [r7, #28]
 800fe96:	f000 f897 	bl	800ffc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	61bb      	str	r3, [r7, #24]
 800fe9e:	e002      	b.n	800fea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fea0:	f04f 33ff 	mov.w	r3, #4294967295
 800fea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fea6:	69bb      	ldr	r3, [r7, #24]
	}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3720      	adds	r7, #32
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	607a      	str	r2, [r7, #4]
 800febc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800febe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	461a      	mov	r2, r3
 800fec8:	21a5      	movs	r1, #165	; 0xa5
 800feca:	f002 f99a 	bl	8012202 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800fece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fed8:	3b01      	subs	r3, #1
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	f023 0307 	bic.w	r3, r3, #7
 800fee6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	f003 0307 	and.w	r3, r3, #7
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d009      	beq.n	800ff06 <prvInitialiseNewTask+0x56>
 800fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	617b      	str	r3, [r7, #20]
 800ff04:	e7fe      	b.n	800ff04 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	69ba      	ldr	r2, [r7, #24]
 800ff0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	61fb      	str	r3, [r7, #28]
 800ff10:	e012      	b.n	800ff38 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	4413      	add	r3, r2
 800ff18:	7819      	ldrb	r1, [r3, #0]
 800ff1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	4413      	add	r3, r2
 800ff20:	3334      	adds	r3, #52	; 0x34
 800ff22:	460a      	mov	r2, r1
 800ff24:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ff26:	68ba      	ldr	r2, [r7, #8]
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d006      	beq.n	800ff40 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	3301      	adds	r3, #1
 800ff36:	61fb      	str	r3, [r7, #28]
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	2b0f      	cmp	r3, #15
 800ff3c:	d9e9      	bls.n	800ff12 <prvInitialiseNewTask+0x62>
 800ff3e:	e000      	b.n	800ff42 <prvInitialiseNewTask+0x92>
		{
			break;
 800ff40:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ff4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4c:	2b37      	cmp	r3, #55	; 0x37
 800ff4e:	d901      	bls.n	800ff54 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ff50:	2337      	movs	r3, #55	; 0x37
 800ff52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ff54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff5e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800ff60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff62:	2200      	movs	r2, #0
 800ff64:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	3304      	adds	r3, #4
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff f913 	bl	800f196 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ff70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff72:	3318      	adds	r3, #24
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7ff f90e 	bl	800f196 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ff8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	2200      	movs	r2, #0
 800ff94:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ff96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff98:	2200      	movs	r2, #0
 800ff9a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ffa4:	683a      	ldr	r2, [r7, #0]
 800ffa6:	68f9      	ldr	r1, [r7, #12]
 800ffa8:	69b8      	ldr	r0, [r7, #24]
 800ffaa:	f001 f8f5 	bl	8011198 <pxPortInitialiseStack>
 800ffae:	4602      	mov	r2, r0
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ffb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d002      	beq.n	800ffc0 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ffba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffc0:	bf00      	nop
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ffd0:	f001 f9ca 	bl	8011368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ffd4:	4b2d      	ldr	r3, [pc, #180]	; (801008c <prvAddNewTaskToReadyList+0xc4>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	3301      	adds	r3, #1
 800ffda:	4a2c      	ldr	r2, [pc, #176]	; (801008c <prvAddNewTaskToReadyList+0xc4>)
 800ffdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ffde:	4b2c      	ldr	r3, [pc, #176]	; (8010090 <prvAddNewTaskToReadyList+0xc8>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d109      	bne.n	800fffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ffe6:	4a2a      	ldr	r2, [pc, #168]	; (8010090 <prvAddNewTaskToReadyList+0xc8>)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ffec:	4b27      	ldr	r3, [pc, #156]	; (801008c <prvAddNewTaskToReadyList+0xc4>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d110      	bne.n	8010016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fff4:	f000 fc2a 	bl	801084c <prvInitialiseTaskLists>
 800fff8:	e00d      	b.n	8010016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fffa:	4b26      	ldr	r3, [pc, #152]	; (8010094 <prvAddNewTaskToReadyList+0xcc>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d109      	bne.n	8010016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010002:	4b23      	ldr	r3, [pc, #140]	; (8010090 <prvAddNewTaskToReadyList+0xc8>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000c:	429a      	cmp	r2, r3
 801000e:	d802      	bhi.n	8010016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010010:	4a1f      	ldr	r2, [pc, #124]	; (8010090 <prvAddNewTaskToReadyList+0xc8>)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010016:	4b20      	ldr	r3, [pc, #128]	; (8010098 <prvAddNewTaskToReadyList+0xd0>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3301      	adds	r3, #1
 801001c:	4a1e      	ldr	r2, [pc, #120]	; (8010098 <prvAddNewTaskToReadyList+0xd0>)
 801001e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010020:	4b1d      	ldr	r3, [pc, #116]	; (8010098 <prvAddNewTaskToReadyList+0xd0>)
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002c:	4b1b      	ldr	r3, [pc, #108]	; (801009c <prvAddNewTaskToReadyList+0xd4>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	429a      	cmp	r2, r3
 8010032:	d903      	bls.n	801003c <prvAddNewTaskToReadyList+0x74>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010038:	4a18      	ldr	r2, [pc, #96]	; (801009c <prvAddNewTaskToReadyList+0xd4>)
 801003a:	6013      	str	r3, [r2, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010040:	4613      	mov	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4a15      	ldr	r2, [pc, #84]	; (80100a0 <prvAddNewTaskToReadyList+0xd8>)
 801004a:	441a      	add	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	3304      	adds	r3, #4
 8010050:	4619      	mov	r1, r3
 8010052:	4610      	mov	r0, r2
 8010054:	f7ff f8ab 	bl	800f1ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010058:	f001 f9b4 	bl	80113c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801005c:	4b0d      	ldr	r3, [pc, #52]	; (8010094 <prvAddNewTaskToReadyList+0xcc>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d00e      	beq.n	8010082 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010064:	4b0a      	ldr	r3, [pc, #40]	; (8010090 <prvAddNewTaskToReadyList+0xc8>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801006e:	429a      	cmp	r2, r3
 8010070:	d207      	bcs.n	8010082 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010072:	4b0c      	ldr	r3, [pc, #48]	; (80100a4 <prvAddNewTaskToReadyList+0xdc>)
 8010074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010078:	601a      	str	r2, [r3, #0]
 801007a:	f3bf 8f4f 	dsb	sy
 801007e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010082:	bf00      	nop
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	20000ee0 	.word	0x20000ee0
 8010090:	20000a0c 	.word	0x20000a0c
 8010094:	20000eec 	.word	0x20000eec
 8010098:	20000efc 	.word	0x20000efc
 801009c:	20000ee8 	.word	0x20000ee8
 80100a0:	20000a10 	.word	0x20000a10
 80100a4:	e000ed04 	.word	0xe000ed04

080100a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80100b0:	2300      	movs	r3, #0
 80100b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d016      	beq.n	80100e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80100ba:	4b13      	ldr	r3, [pc, #76]	; (8010108 <vTaskDelay+0x60>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d009      	beq.n	80100d6 <vTaskDelay+0x2e>
 80100c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	60bb      	str	r3, [r7, #8]
 80100d4:	e7fe      	b.n	80100d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80100d6:	f000 f881 	bl	80101dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80100da:	2100      	movs	r1, #0
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 fcfd 	bl	8010adc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80100e2:	f000 f889 	bl	80101f8 <xTaskResumeAll>
 80100e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d107      	bne.n	80100fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80100ee:	4b07      	ldr	r3, [pc, #28]	; (801010c <vTaskDelay+0x64>)
 80100f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	f3bf 8f4f 	dsb	sy
 80100fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100fe:	bf00      	nop
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	20000f08 	.word	0x20000f08
 801010c:	e000ed04 	.word	0xe000ed04

08010110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b08a      	sub	sp, #40	; 0x28
 8010114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010116:	2300      	movs	r3, #0
 8010118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801011a:	2300      	movs	r3, #0
 801011c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801011e:	463a      	mov	r2, r7
 8010120:	1d39      	adds	r1, r7, #4
 8010122:	f107 0308 	add.w	r3, r7, #8
 8010126:	4618      	mov	r0, r3
 8010128:	f7fe ffe4 	bl	800f0f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801012c:	6839      	ldr	r1, [r7, #0]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	68ba      	ldr	r2, [r7, #8]
 8010132:	9202      	str	r2, [sp, #8]
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	2300      	movs	r3, #0
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	2300      	movs	r3, #0
 801013c:	460a      	mov	r2, r1
 801013e:	4921      	ldr	r1, [pc, #132]	; (80101c4 <vTaskStartScheduler+0xb4>)
 8010140:	4821      	ldr	r0, [pc, #132]	; (80101c8 <vTaskStartScheduler+0xb8>)
 8010142:	f7ff fe17 	bl	800fd74 <xTaskCreateStatic>
 8010146:	4602      	mov	r2, r0
 8010148:	4b20      	ldr	r3, [pc, #128]	; (80101cc <vTaskStartScheduler+0xbc>)
 801014a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801014c:	4b1f      	ldr	r3, [pc, #124]	; (80101cc <vTaskStartScheduler+0xbc>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010154:	2301      	movs	r3, #1
 8010156:	617b      	str	r3, [r7, #20]
 8010158:	e001      	b.n	801015e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801015a:	2300      	movs	r3, #0
 801015c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d102      	bne.n	801016a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010164:	f000 fd0e 	bl	8010b84 <xTimerCreateTimerTask>
 8010168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d117      	bne.n	80101a0 <vTaskStartScheduler+0x90>
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010182:	4b13      	ldr	r3, [pc, #76]	; (80101d0 <vTaskStartScheduler+0xc0>)
 8010184:	f04f 32ff 	mov.w	r2, #4294967295
 8010188:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801018a:	4b12      	ldr	r3, [pc, #72]	; (80101d4 <vTaskStartScheduler+0xc4>)
 801018c:	2201      	movs	r2, #1
 801018e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010190:	4b11      	ldr	r3, [pc, #68]	; (80101d8 <vTaskStartScheduler+0xc8>)
 8010192:	2200      	movs	r2, #0
 8010194:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010196:	f7f1 ff81 	bl	800209c <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801019a:	f001 f875 	bl	8011288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801019e:	e00d      	b.n	80101bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a6:	d109      	bne.n	80101bc <vTaskStartScheduler+0xac>
 80101a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ac:	f383 8811 	msr	BASEPRI, r3
 80101b0:	f3bf 8f6f 	isb	sy
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	60fb      	str	r3, [r7, #12]
 80101ba:	e7fe      	b.n	80101ba <vTaskStartScheduler+0xaa>
}
 80101bc:	bf00      	nop
 80101be:	3718      	adds	r7, #24
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	08016844 	.word	0x08016844
 80101c8:	0801081d 	.word	0x0801081d
 80101cc:	20000f04 	.word	0x20000f04
 80101d0:	20000f00 	.word	0x20000f00
 80101d4:	20000eec 	.word	0x20000eec
 80101d8:	20000ee4 	.word	0x20000ee4

080101dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80101dc:	b480      	push	{r7}
 80101de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80101e0:	4b04      	ldr	r3, [pc, #16]	; (80101f4 <vTaskSuspendAll+0x18>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	3301      	adds	r3, #1
 80101e6:	4a03      	ldr	r2, [pc, #12]	; (80101f4 <vTaskSuspendAll+0x18>)
 80101e8:	6013      	str	r3, [r2, #0]
}
 80101ea:	bf00      	nop
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bc80      	pop	{r7}
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop
 80101f4:	20000f08 	.word	0x20000f08

080101f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80101fe:	2300      	movs	r3, #0
 8010200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010202:	2300      	movs	r3, #0
 8010204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010206:	4b41      	ldr	r3, [pc, #260]	; (801030c <xTaskResumeAll+0x114>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d109      	bne.n	8010222 <xTaskResumeAll+0x2a>
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	603b      	str	r3, [r7, #0]
 8010220:	e7fe      	b.n	8010220 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010222:	f001 f8a1 	bl	8011368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010226:	4b39      	ldr	r3, [pc, #228]	; (801030c <xTaskResumeAll+0x114>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	3b01      	subs	r3, #1
 801022c:	4a37      	ldr	r2, [pc, #220]	; (801030c <xTaskResumeAll+0x114>)
 801022e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010230:	4b36      	ldr	r3, [pc, #216]	; (801030c <xTaskResumeAll+0x114>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d162      	bne.n	80102fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010238:	4b35      	ldr	r3, [pc, #212]	; (8010310 <xTaskResumeAll+0x118>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d05e      	beq.n	80102fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010240:	e02f      	b.n	80102a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010242:	4b34      	ldr	r3, [pc, #208]	; (8010314 <xTaskResumeAll+0x11c>)
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	3318      	adds	r3, #24
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff f808 	bl	800f264 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	3304      	adds	r3, #4
 8010258:	4618      	mov	r0, r3
 801025a:	f7ff f803 	bl	800f264 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010262:	4b2d      	ldr	r3, [pc, #180]	; (8010318 <xTaskResumeAll+0x120>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	d903      	bls.n	8010272 <xTaskResumeAll+0x7a>
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026e:	4a2a      	ldr	r2, [pc, #168]	; (8010318 <xTaskResumeAll+0x120>)
 8010270:	6013      	str	r3, [r2, #0]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010276:	4613      	mov	r3, r2
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	4413      	add	r3, r2
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	4a27      	ldr	r2, [pc, #156]	; (801031c <xTaskResumeAll+0x124>)
 8010280:	441a      	add	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	3304      	adds	r3, #4
 8010286:	4619      	mov	r1, r3
 8010288:	4610      	mov	r0, r2
 801028a:	f7fe ff90 	bl	800f1ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010292:	4b23      	ldr	r3, [pc, #140]	; (8010320 <xTaskResumeAll+0x128>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010298:	429a      	cmp	r2, r3
 801029a:	d302      	bcc.n	80102a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801029c:	4b21      	ldr	r3, [pc, #132]	; (8010324 <xTaskResumeAll+0x12c>)
 801029e:	2201      	movs	r2, #1
 80102a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80102a2:	4b1c      	ldr	r3, [pc, #112]	; (8010314 <xTaskResumeAll+0x11c>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1cb      	bne.n	8010242 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d001      	beq.n	80102b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80102b0:	f000 fb66 	bl	8010980 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80102b4:	4b1c      	ldr	r3, [pc, #112]	; (8010328 <xTaskResumeAll+0x130>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d010      	beq.n	80102e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80102c0:	f000 f844 	bl	801034c <xTaskIncrementTick>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d002      	beq.n	80102d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80102ca:	4b16      	ldr	r3, [pc, #88]	; (8010324 <xTaskResumeAll+0x12c>)
 80102cc:	2201      	movs	r2, #1
 80102ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	3b01      	subs	r3, #1
 80102d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1f1      	bne.n	80102c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80102dc:	4b12      	ldr	r3, [pc, #72]	; (8010328 <xTaskResumeAll+0x130>)
 80102de:	2200      	movs	r2, #0
 80102e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80102e2:	4b10      	ldr	r3, [pc, #64]	; (8010324 <xTaskResumeAll+0x12c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d009      	beq.n	80102fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80102ea:	2301      	movs	r3, #1
 80102ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80102ee:	4b0f      	ldr	r3, [pc, #60]	; (801032c <xTaskResumeAll+0x134>)
 80102f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	f3bf 8f4f 	dsb	sy
 80102fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80102fe:	f001 f861 	bl	80113c4 <vPortExitCritical>

	return xAlreadyYielded;
 8010302:	68bb      	ldr	r3, [r7, #8]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	20000f08 	.word	0x20000f08
 8010310:	20000ee0 	.word	0x20000ee0
 8010314:	20000ea0 	.word	0x20000ea0
 8010318:	20000ee8 	.word	0x20000ee8
 801031c:	20000a10 	.word	0x20000a10
 8010320:	20000a0c 	.word	0x20000a0c
 8010324:	20000ef4 	.word	0x20000ef4
 8010328:	20000ef0 	.word	0x20000ef0
 801032c:	e000ed04 	.word	0xe000ed04

08010330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010336:	4b04      	ldr	r3, [pc, #16]	; (8010348 <xTaskGetTickCount+0x18>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801033c:	687b      	ldr	r3, [r7, #4]
}
 801033e:	4618      	mov	r0, r3
 8010340:	370c      	adds	r7, #12
 8010342:	46bd      	mov	sp, r7
 8010344:	bc80      	pop	{r7}
 8010346:	4770      	bx	lr
 8010348:	20000ee4 	.word	0x20000ee4

0801034c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b086      	sub	sp, #24
 8010350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010352:	2300      	movs	r3, #0
 8010354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010356:	4b51      	ldr	r3, [pc, #324]	; (801049c <xTaskIncrementTick+0x150>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	f040 808d 	bne.w	801047a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010360:	4b4f      	ldr	r3, [pc, #316]	; (80104a0 <xTaskIncrementTick+0x154>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3301      	adds	r3, #1
 8010366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010368:	4a4d      	ldr	r2, [pc, #308]	; (80104a0 <xTaskIncrementTick+0x154>)
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d11f      	bne.n	80103b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010374:	4b4b      	ldr	r3, [pc, #300]	; (80104a4 <xTaskIncrementTick+0x158>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d009      	beq.n	8010392 <xTaskIncrementTick+0x46>
 801037e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010382:	f383 8811 	msr	BASEPRI, r3
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	603b      	str	r3, [r7, #0]
 8010390:	e7fe      	b.n	8010390 <xTaskIncrementTick+0x44>
 8010392:	4b44      	ldr	r3, [pc, #272]	; (80104a4 <xTaskIncrementTick+0x158>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	60fb      	str	r3, [r7, #12]
 8010398:	4b43      	ldr	r3, [pc, #268]	; (80104a8 <xTaskIncrementTick+0x15c>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4a41      	ldr	r2, [pc, #260]	; (80104a4 <xTaskIncrementTick+0x158>)
 801039e:	6013      	str	r3, [r2, #0]
 80103a0:	4a41      	ldr	r2, [pc, #260]	; (80104a8 <xTaskIncrementTick+0x15c>)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6013      	str	r3, [r2, #0]
 80103a6:	4b41      	ldr	r3, [pc, #260]	; (80104ac <xTaskIncrementTick+0x160>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3301      	adds	r3, #1
 80103ac:	4a3f      	ldr	r2, [pc, #252]	; (80104ac <xTaskIncrementTick+0x160>)
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	f000 fae6 	bl	8010980 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80103b4:	4b3e      	ldr	r3, [pc, #248]	; (80104b0 <xTaskIncrementTick+0x164>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	693a      	ldr	r2, [r7, #16]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d34e      	bcc.n	801045c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103be:	4b39      	ldr	r3, [pc, #228]	; (80104a4 <xTaskIncrementTick+0x158>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d101      	bne.n	80103cc <xTaskIncrementTick+0x80>
 80103c8:	2301      	movs	r3, #1
 80103ca:	e000      	b.n	80103ce <xTaskIncrementTick+0x82>
 80103cc:	2300      	movs	r3, #0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d004      	beq.n	80103dc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103d2:	4b37      	ldr	r3, [pc, #220]	; (80104b0 <xTaskIncrementTick+0x164>)
 80103d4:	f04f 32ff 	mov.w	r2, #4294967295
 80103d8:	601a      	str	r2, [r3, #0]
					break;
 80103da:	e03f      	b.n	801045c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80103dc:	4b31      	ldr	r3, [pc, #196]	; (80104a4 <xTaskIncrementTick+0x158>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d203      	bcs.n	80103fc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80103f4:	4a2e      	ldr	r2, [pc, #184]	; (80104b0 <xTaskIncrementTick+0x164>)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6013      	str	r3, [r2, #0]
						break;
 80103fa:	e02f      	b.n	801045c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	3304      	adds	r3, #4
 8010400:	4618      	mov	r0, r3
 8010402:	f7fe ff2f 	bl	800f264 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801040a:	2b00      	cmp	r3, #0
 801040c:	d004      	beq.n	8010418 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	3318      	adds	r3, #24
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe ff26 	bl	800f264 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801041c:	4b25      	ldr	r3, [pc, #148]	; (80104b4 <xTaskIncrementTick+0x168>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	429a      	cmp	r2, r3
 8010422:	d903      	bls.n	801042c <xTaskIncrementTick+0xe0>
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010428:	4a22      	ldr	r2, [pc, #136]	; (80104b4 <xTaskIncrementTick+0x168>)
 801042a:	6013      	str	r3, [r2, #0]
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010430:	4613      	mov	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4413      	add	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4a1f      	ldr	r2, [pc, #124]	; (80104b8 <xTaskIncrementTick+0x16c>)
 801043a:	441a      	add	r2, r3
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	3304      	adds	r3, #4
 8010440:	4619      	mov	r1, r3
 8010442:	4610      	mov	r0, r2
 8010444:	f7fe feb3 	bl	800f1ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044c:	4b1b      	ldr	r3, [pc, #108]	; (80104bc <xTaskIncrementTick+0x170>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010452:	429a      	cmp	r2, r3
 8010454:	d3b3      	bcc.n	80103be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010456:	2301      	movs	r3, #1
 8010458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801045a:	e7b0      	b.n	80103be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801045c:	4b17      	ldr	r3, [pc, #92]	; (80104bc <xTaskIncrementTick+0x170>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010462:	4915      	ldr	r1, [pc, #84]	; (80104b8 <xTaskIncrementTick+0x16c>)
 8010464:	4613      	mov	r3, r2
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	4413      	add	r3, r2
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	440b      	add	r3, r1
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d907      	bls.n	8010484 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8010474:	2301      	movs	r3, #1
 8010476:	617b      	str	r3, [r7, #20]
 8010478:	e004      	b.n	8010484 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801047a:	4b11      	ldr	r3, [pc, #68]	; (80104c0 <xTaskIncrementTick+0x174>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3301      	adds	r3, #1
 8010480:	4a0f      	ldr	r2, [pc, #60]	; (80104c0 <xTaskIncrementTick+0x174>)
 8010482:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010484:	4b0f      	ldr	r3, [pc, #60]	; (80104c4 <xTaskIncrementTick+0x178>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d001      	beq.n	8010490 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 801048c:	2301      	movs	r3, #1
 801048e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010490:	697b      	ldr	r3, [r7, #20]
}
 8010492:	4618      	mov	r0, r3
 8010494:	3718      	adds	r7, #24
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	20000f08 	.word	0x20000f08
 80104a0:	20000ee4 	.word	0x20000ee4
 80104a4:	20000e98 	.word	0x20000e98
 80104a8:	20000e9c 	.word	0x20000e9c
 80104ac:	20000ef8 	.word	0x20000ef8
 80104b0:	20000f00 	.word	0x20000f00
 80104b4:	20000ee8 	.word	0x20000ee8
 80104b8:	20000a10 	.word	0x20000a10
 80104bc:	20000a0c 	.word	0x20000a0c
 80104c0:	20000ef0 	.word	0x20000ef0
 80104c4:	20000ef4 	.word	0x20000ef4

080104c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80104ce:	4b33      	ldr	r3, [pc, #204]	; (801059c <vTaskSwitchContext+0xd4>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d003      	beq.n	80104de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80104d6:	4b32      	ldr	r3, [pc, #200]	; (80105a0 <vTaskSwitchContext+0xd8>)
 80104d8:	2201      	movs	r2, #1
 80104da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80104dc:	e059      	b.n	8010592 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80104de:	4b30      	ldr	r3, [pc, #192]	; (80105a0 <vTaskSwitchContext+0xd8>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80104e4:	f7f1 fde4 	bl	80020b0 <getRunTimeCounterValue>
 80104e8:	4602      	mov	r2, r0
 80104ea:	4b2e      	ldr	r3, [pc, #184]	; (80105a4 <vTaskSwitchContext+0xdc>)
 80104ec:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80104ee:	4b2d      	ldr	r3, [pc, #180]	; (80105a4 <vTaskSwitchContext+0xdc>)
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	4b2d      	ldr	r3, [pc, #180]	; (80105a8 <vTaskSwitchContext+0xe0>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d909      	bls.n	801050e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80104fa:	4b2c      	ldr	r3, [pc, #176]	; (80105ac <vTaskSwitchContext+0xe4>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010500:	4a28      	ldr	r2, [pc, #160]	; (80105a4 <vTaskSwitchContext+0xdc>)
 8010502:	6810      	ldr	r0, [r2, #0]
 8010504:	4a28      	ldr	r2, [pc, #160]	; (80105a8 <vTaskSwitchContext+0xe0>)
 8010506:	6812      	ldr	r2, [r2, #0]
 8010508:	1a82      	subs	r2, r0, r2
 801050a:	440a      	add	r2, r1
 801050c:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 801050e:	4b25      	ldr	r3, [pc, #148]	; (80105a4 <vTaskSwitchContext+0xdc>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4a25      	ldr	r2, [pc, #148]	; (80105a8 <vTaskSwitchContext+0xe0>)
 8010514:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010516:	4b26      	ldr	r3, [pc, #152]	; (80105b0 <vTaskSwitchContext+0xe8>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	60fb      	str	r3, [r7, #12]
 801051c:	e00f      	b.n	801053e <vTaskSwitchContext+0x76>
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d109      	bne.n	8010538 <vTaskSwitchContext+0x70>
 8010524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	607b      	str	r3, [r7, #4]
 8010536:	e7fe      	b.n	8010536 <vTaskSwitchContext+0x6e>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	3b01      	subs	r3, #1
 801053c:	60fb      	str	r3, [r7, #12]
 801053e:	491d      	ldr	r1, [pc, #116]	; (80105b4 <vTaskSwitchContext+0xec>)
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	4613      	mov	r3, r2
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	4413      	add	r3, r2
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	440b      	add	r3, r1
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d0e5      	beq.n	801051e <vTaskSwitchContext+0x56>
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	4613      	mov	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	4a15      	ldr	r2, [pc, #84]	; (80105b4 <vTaskSwitchContext+0xec>)
 801055e:	4413      	add	r3, r2
 8010560:	60bb      	str	r3, [r7, #8]
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	685a      	ldr	r2, [r3, #4]
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	605a      	str	r2, [r3, #4]
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	685a      	ldr	r2, [r3, #4]
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	3308      	adds	r3, #8
 8010574:	429a      	cmp	r2, r3
 8010576:	d104      	bne.n	8010582 <vTaskSwitchContext+0xba>
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	685a      	ldr	r2, [r3, #4]
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	605a      	str	r2, [r3, #4]
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	4a08      	ldr	r2, [pc, #32]	; (80105ac <vTaskSwitchContext+0xe4>)
 801058a:	6013      	str	r3, [r2, #0]
 801058c:	4a08      	ldr	r2, [pc, #32]	; (80105b0 <vTaskSwitchContext+0xe8>)
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	6013      	str	r3, [r2, #0]
}
 8010592:	bf00      	nop
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	20000f08 	.word	0x20000f08
 80105a0:	20000ef4 	.word	0x20000ef4
 80105a4:	20000f10 	.word	0x20000f10
 80105a8:	20000f0c 	.word	0x20000f0c
 80105ac:	20000a0c 	.word	0x20000a0c
 80105b0:	20000ee8 	.word	0x20000ee8
 80105b4:	20000a10 	.word	0x20000a10

080105b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d109      	bne.n	80105dc <vTaskPlaceOnEventList+0x24>
 80105c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	60fb      	str	r3, [r7, #12]
 80105da:	e7fe      	b.n	80105da <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105dc:	4b07      	ldr	r3, [pc, #28]	; (80105fc <vTaskPlaceOnEventList+0x44>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	3318      	adds	r3, #24
 80105e2:	4619      	mov	r1, r3
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7fe fe05 	bl	800f1f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105ea:	2101      	movs	r1, #1
 80105ec:	6838      	ldr	r0, [r7, #0]
 80105ee:	f000 fa75 	bl	8010adc <prvAddCurrentTaskToDelayedList>
}
 80105f2:	bf00      	nop
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	20000a0c 	.word	0x20000a0c

08010600 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d109      	bne.n	8010626 <vTaskPlaceOnEventListRestricted+0x26>
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	617b      	str	r3, [r7, #20]
 8010624:	e7fe      	b.n	8010624 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010626:	4b0a      	ldr	r3, [pc, #40]	; (8010650 <vTaskPlaceOnEventListRestricted+0x50>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3318      	adds	r3, #24
 801062c:	4619      	mov	r1, r3
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	f7fe fdbd 	bl	800f1ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d002      	beq.n	8010640 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801063a:	f04f 33ff 	mov.w	r3, #4294967295
 801063e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010640:	6879      	ldr	r1, [r7, #4]
 8010642:	68b8      	ldr	r0, [r7, #8]
 8010644:	f000 fa4a 	bl	8010adc <prvAddCurrentTaskToDelayedList>
	}
 8010648:	bf00      	nop
 801064a:	3718      	adds	r7, #24
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	20000a0c 	.word	0x20000a0c

08010654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b086      	sub	sp, #24
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d109      	bne.n	801067e <xTaskRemoveFromEventList+0x2a>
 801066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066e:	f383 8811 	msr	BASEPRI, r3
 8010672:	f3bf 8f6f 	isb	sy
 8010676:	f3bf 8f4f 	dsb	sy
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	e7fe      	b.n	801067c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	3318      	adds	r3, #24
 8010682:	4618      	mov	r0, r3
 8010684:	f7fe fdee 	bl	800f264 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010688:	4b1d      	ldr	r3, [pc, #116]	; (8010700 <xTaskRemoveFromEventList+0xac>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d11d      	bne.n	80106cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	3304      	adds	r3, #4
 8010694:	4618      	mov	r0, r3
 8010696:	f7fe fde5 	bl	800f264 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801069e:	4b19      	ldr	r3, [pc, #100]	; (8010704 <xTaskRemoveFromEventList+0xb0>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d903      	bls.n	80106ae <xTaskRemoveFromEventList+0x5a>
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106aa:	4a16      	ldr	r2, [pc, #88]	; (8010704 <xTaskRemoveFromEventList+0xb0>)
 80106ac:	6013      	str	r3, [r2, #0]
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b2:	4613      	mov	r3, r2
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	4413      	add	r3, r2
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	4a13      	ldr	r2, [pc, #76]	; (8010708 <xTaskRemoveFromEventList+0xb4>)
 80106bc:	441a      	add	r2, r3
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	3304      	adds	r3, #4
 80106c2:	4619      	mov	r1, r3
 80106c4:	4610      	mov	r0, r2
 80106c6:	f7fe fd72 	bl	800f1ae <vListInsertEnd>
 80106ca:	e005      	b.n	80106d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	3318      	adds	r3, #24
 80106d0:	4619      	mov	r1, r3
 80106d2:	480e      	ldr	r0, [pc, #56]	; (801070c <xTaskRemoveFromEventList+0xb8>)
 80106d4:	f7fe fd6b 	bl	800f1ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106dc:	4b0c      	ldr	r3, [pc, #48]	; (8010710 <xTaskRemoveFromEventList+0xbc>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d905      	bls.n	80106f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80106e6:	2301      	movs	r3, #1
 80106e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80106ea:	4b0a      	ldr	r3, [pc, #40]	; (8010714 <xTaskRemoveFromEventList+0xc0>)
 80106ec:	2201      	movs	r2, #1
 80106ee:	601a      	str	r2, [r3, #0]
 80106f0:	e001      	b.n	80106f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80106f2:	2300      	movs	r3, #0
 80106f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80106f6:	697b      	ldr	r3, [r7, #20]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3718      	adds	r7, #24
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	20000f08 	.word	0x20000f08
 8010704:	20000ee8 	.word	0x20000ee8
 8010708:	20000a10 	.word	0x20000a10
 801070c:	20000ea0 	.word	0x20000ea0
 8010710:	20000a0c 	.word	0x20000a0c
 8010714:	20000ef4 	.word	0x20000ef4

08010718 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010720:	4b06      	ldr	r3, [pc, #24]	; (801073c <vTaskInternalSetTimeOutState+0x24>)
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010728:	4b05      	ldr	r3, [pc, #20]	; (8010740 <vTaskInternalSetTimeOutState+0x28>)
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	605a      	str	r2, [r3, #4]
}
 8010730:	bf00      	nop
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	bc80      	pop	{r7}
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop
 801073c:	20000ef8 	.word	0x20000ef8
 8010740:	20000ee4 	.word	0x20000ee4

08010744 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b088      	sub	sp, #32
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d109      	bne.n	8010768 <xTaskCheckForTimeOut+0x24>
 8010754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010758:	f383 8811 	msr	BASEPRI, r3
 801075c:	f3bf 8f6f 	isb	sy
 8010760:	f3bf 8f4f 	dsb	sy
 8010764:	613b      	str	r3, [r7, #16]
 8010766:	e7fe      	b.n	8010766 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d109      	bne.n	8010782 <xTaskCheckForTimeOut+0x3e>
 801076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	60fb      	str	r3, [r7, #12]
 8010780:	e7fe      	b.n	8010780 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010782:	f000 fdf1 	bl	8011368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010786:	4b1d      	ldr	r3, [pc, #116]	; (80107fc <xTaskCheckForTimeOut+0xb8>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	69ba      	ldr	r2, [r7, #24]
 8010792:	1ad3      	subs	r3, r2, r3
 8010794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079e:	d102      	bne.n	80107a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80107a0:	2300      	movs	r3, #0
 80107a2:	61fb      	str	r3, [r7, #28]
 80107a4:	e023      	b.n	80107ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	4b15      	ldr	r3, [pc, #84]	; (8010800 <xTaskCheckForTimeOut+0xbc>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d007      	beq.n	80107c2 <xTaskCheckForTimeOut+0x7e>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	69ba      	ldr	r2, [r7, #24]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d302      	bcc.n	80107c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80107bc:	2301      	movs	r3, #1
 80107be:	61fb      	str	r3, [r7, #28]
 80107c0:	e015      	b.n	80107ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d20b      	bcs.n	80107e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	681a      	ldr	r2, [r3, #0]
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	1ad2      	subs	r2, r2, r3
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7ff ff9d 	bl	8010718 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80107de:	2300      	movs	r3, #0
 80107e0:	61fb      	str	r3, [r7, #28]
 80107e2:	e004      	b.n	80107ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80107ea:	2301      	movs	r3, #1
 80107ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80107ee:	f000 fde9 	bl	80113c4 <vPortExitCritical>

	return xReturn;
 80107f2:	69fb      	ldr	r3, [r7, #28]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3720      	adds	r7, #32
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	20000ee4 	.word	0x20000ee4
 8010800:	20000ef8 	.word	0x20000ef8

08010804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010804:	b480      	push	{r7}
 8010806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010808:	4b03      	ldr	r3, [pc, #12]	; (8010818 <vTaskMissedYield+0x14>)
 801080a:	2201      	movs	r2, #1
 801080c:	601a      	str	r2, [r3, #0]
}
 801080e:	bf00      	nop
 8010810:	46bd      	mov	sp, r7
 8010812:	bc80      	pop	{r7}
 8010814:	4770      	bx	lr
 8010816:	bf00      	nop
 8010818:	20000ef4 	.word	0x20000ef4

0801081c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010824:	f000 f852 	bl	80108cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010828:	4b06      	ldr	r3, [pc, #24]	; (8010844 <prvIdleTask+0x28>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d9f9      	bls.n	8010824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010830:	4b05      	ldr	r3, [pc, #20]	; (8010848 <prvIdleTask+0x2c>)
 8010832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010836:	601a      	str	r2, [r3, #0]
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010840:	e7f0      	b.n	8010824 <prvIdleTask+0x8>
 8010842:	bf00      	nop
 8010844:	20000a10 	.word	0x20000a10
 8010848:	e000ed04 	.word	0xe000ed04

0801084c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010852:	2300      	movs	r3, #0
 8010854:	607b      	str	r3, [r7, #4]
 8010856:	e00c      	b.n	8010872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	4613      	mov	r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	4413      	add	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4a12      	ldr	r2, [pc, #72]	; (80108ac <prvInitialiseTaskLists+0x60>)
 8010864:	4413      	add	r3, r2
 8010866:	4618      	mov	r0, r3
 8010868:	f7fe fc76 	bl	800f158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	3301      	adds	r3, #1
 8010870:	607b      	str	r3, [r7, #4]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b37      	cmp	r3, #55	; 0x37
 8010876:	d9ef      	bls.n	8010858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010878:	480d      	ldr	r0, [pc, #52]	; (80108b0 <prvInitialiseTaskLists+0x64>)
 801087a:	f7fe fc6d 	bl	800f158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801087e:	480d      	ldr	r0, [pc, #52]	; (80108b4 <prvInitialiseTaskLists+0x68>)
 8010880:	f7fe fc6a 	bl	800f158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010884:	480c      	ldr	r0, [pc, #48]	; (80108b8 <prvInitialiseTaskLists+0x6c>)
 8010886:	f7fe fc67 	bl	800f158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801088a:	480c      	ldr	r0, [pc, #48]	; (80108bc <prvInitialiseTaskLists+0x70>)
 801088c:	f7fe fc64 	bl	800f158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010890:	480b      	ldr	r0, [pc, #44]	; (80108c0 <prvInitialiseTaskLists+0x74>)
 8010892:	f7fe fc61 	bl	800f158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010896:	4b0b      	ldr	r3, [pc, #44]	; (80108c4 <prvInitialiseTaskLists+0x78>)
 8010898:	4a05      	ldr	r2, [pc, #20]	; (80108b0 <prvInitialiseTaskLists+0x64>)
 801089a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801089c:	4b0a      	ldr	r3, [pc, #40]	; (80108c8 <prvInitialiseTaskLists+0x7c>)
 801089e:	4a05      	ldr	r2, [pc, #20]	; (80108b4 <prvInitialiseTaskLists+0x68>)
 80108a0:	601a      	str	r2, [r3, #0]
}
 80108a2:	bf00      	nop
 80108a4:	3708      	adds	r7, #8
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	20000a10 	.word	0x20000a10
 80108b0:	20000e70 	.word	0x20000e70
 80108b4:	20000e84 	.word	0x20000e84
 80108b8:	20000ea0 	.word	0x20000ea0
 80108bc:	20000eb4 	.word	0x20000eb4
 80108c0:	20000ecc 	.word	0x20000ecc
 80108c4:	20000e98 	.word	0x20000e98
 80108c8:	20000e9c 	.word	0x20000e9c

080108cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80108d2:	e019      	b.n	8010908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80108d4:	f000 fd48 	bl	8011368 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80108d8:	4b0f      	ldr	r3, [pc, #60]	; (8010918 <prvCheckTasksWaitingTermination+0x4c>)
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	68db      	ldr	r3, [r3, #12]
 80108de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	3304      	adds	r3, #4
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7fe fcbd 	bl	800f264 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80108ea:	4b0c      	ldr	r3, [pc, #48]	; (801091c <prvCheckTasksWaitingTermination+0x50>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	3b01      	subs	r3, #1
 80108f0:	4a0a      	ldr	r2, [pc, #40]	; (801091c <prvCheckTasksWaitingTermination+0x50>)
 80108f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80108f4:	4b0a      	ldr	r3, [pc, #40]	; (8010920 <prvCheckTasksWaitingTermination+0x54>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	3b01      	subs	r3, #1
 80108fa:	4a09      	ldr	r2, [pc, #36]	; (8010920 <prvCheckTasksWaitingTermination+0x54>)
 80108fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80108fe:	f000 fd61 	bl	80113c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 f80e 	bl	8010924 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010908:	4b05      	ldr	r3, [pc, #20]	; (8010920 <prvCheckTasksWaitingTermination+0x54>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d1e1      	bne.n	80108d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	20000eb4 	.word	0x20000eb4
 801091c:	20000ee0 	.word	0x20000ee0
 8010920:	20000ec8 	.word	0x20000ec8

08010924 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010932:	2b00      	cmp	r3, #0
 8010934:	d108      	bne.n	8010948 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801093a:	4618      	mov	r0, r3
 801093c:	f000 fecc 	bl	80116d8 <vPortFree>
				vPortFree( pxTCB );
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 fec9 	bl	80116d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010946:	e017      	b.n	8010978 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 801094e:	2b01      	cmp	r3, #1
 8010950:	d103      	bne.n	801095a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 fec0 	bl	80116d8 <vPortFree>
	}
 8010958:	e00e      	b.n	8010978 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010960:	2b02      	cmp	r3, #2
 8010962:	d009      	beq.n	8010978 <prvDeleteTCB+0x54>
 8010964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010968:	f383 8811 	msr	BASEPRI, r3
 801096c:	f3bf 8f6f 	isb	sy
 8010970:	f3bf 8f4f 	dsb	sy
 8010974:	60fb      	str	r3, [r7, #12]
 8010976:	e7fe      	b.n	8010976 <prvDeleteTCB+0x52>
	}
 8010978:	bf00      	nop
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010986:	4b0e      	ldr	r3, [pc, #56]	; (80109c0 <prvResetNextTaskUnblockTime+0x40>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d101      	bne.n	8010994 <prvResetNextTaskUnblockTime+0x14>
 8010990:	2301      	movs	r3, #1
 8010992:	e000      	b.n	8010996 <prvResetNextTaskUnblockTime+0x16>
 8010994:	2300      	movs	r3, #0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d004      	beq.n	80109a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801099a:	4b0a      	ldr	r3, [pc, #40]	; (80109c4 <prvResetNextTaskUnblockTime+0x44>)
 801099c:	f04f 32ff 	mov.w	r2, #4294967295
 80109a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80109a2:	e008      	b.n	80109b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80109a4:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <prvResetNextTaskUnblockTime+0x40>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	68db      	ldr	r3, [r3, #12]
 80109ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	4a04      	ldr	r2, [pc, #16]	; (80109c4 <prvResetNextTaskUnblockTime+0x44>)
 80109b4:	6013      	str	r3, [r2, #0]
}
 80109b6:	bf00      	nop
 80109b8:	370c      	adds	r7, #12
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bc80      	pop	{r7}
 80109be:	4770      	bx	lr
 80109c0:	20000e98 	.word	0x20000e98
 80109c4:	20000f00 	.word	0x20000f00

080109c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80109ce:	4b0b      	ldr	r3, [pc, #44]	; (80109fc <xTaskGetSchedulerState+0x34>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d102      	bne.n	80109dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80109d6:	2301      	movs	r3, #1
 80109d8:	607b      	str	r3, [r7, #4]
 80109da:	e008      	b.n	80109ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109dc:	4b08      	ldr	r3, [pc, #32]	; (8010a00 <xTaskGetSchedulerState+0x38>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d102      	bne.n	80109ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80109e4:	2302      	movs	r3, #2
 80109e6:	607b      	str	r3, [r7, #4]
 80109e8:	e001      	b.n	80109ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80109ea:	2300      	movs	r3, #0
 80109ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80109ee:	687b      	ldr	r3, [r7, #4]
	}
 80109f0:	4618      	mov	r0, r3
 80109f2:	370c      	adds	r7, #12
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bc80      	pop	{r7}
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop
 80109fc:	20000eec 	.word	0x20000eec
 8010a00:	20000f08 	.word	0x20000f08

08010a04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b086      	sub	sp, #24
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010a10:	2300      	movs	r3, #0
 8010a12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d054      	beq.n	8010ac4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010a1a:	4b2d      	ldr	r3, [pc, #180]	; (8010ad0 <xTaskPriorityDisinherit+0xcc>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	693a      	ldr	r2, [r7, #16]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d009      	beq.n	8010a38 <xTaskPriorityDisinherit+0x34>
 8010a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a28:	f383 8811 	msr	BASEPRI, r3
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	60fb      	str	r3, [r7, #12]
 8010a36:	e7fe      	b.n	8010a36 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d109      	bne.n	8010a54 <xTaskPriorityDisinherit+0x50>
 8010a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a44:	f383 8811 	msr	BASEPRI, r3
 8010a48:	f3bf 8f6f 	isb	sy
 8010a4c:	f3bf 8f4f 	dsb	sy
 8010a50:	60bb      	str	r3, [r7, #8]
 8010a52:	e7fe      	b.n	8010a52 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a58:	1e5a      	subs	r2, r3, #1
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d02c      	beq.n	8010ac4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d128      	bne.n	8010ac4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	3304      	adds	r3, #4
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fe fbf4 	bl	800f264 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a94:	4b0f      	ldr	r3, [pc, #60]	; (8010ad4 <xTaskPriorityDisinherit+0xd0>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d903      	bls.n	8010aa4 <xTaskPriorityDisinherit+0xa0>
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa0:	4a0c      	ldr	r2, [pc, #48]	; (8010ad4 <xTaskPriorityDisinherit+0xd0>)
 8010aa2:	6013      	str	r3, [r2, #0]
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	009b      	lsls	r3, r3, #2
 8010ab0:	4a09      	ldr	r2, [pc, #36]	; (8010ad8 <xTaskPriorityDisinherit+0xd4>)
 8010ab2:	441a      	add	r2, r3
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	3304      	adds	r3, #4
 8010ab8:	4619      	mov	r1, r3
 8010aba:	4610      	mov	r0, r2
 8010abc:	f7fe fb77 	bl	800f1ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ac4:	697b      	ldr	r3, [r7, #20]
	}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3718      	adds	r7, #24
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	20000a0c 	.word	0x20000a0c
 8010ad4:	20000ee8 	.word	0x20000ee8
 8010ad8:	20000a10 	.word	0x20000a10

08010adc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010ae6:	4b21      	ldr	r3, [pc, #132]	; (8010b6c <prvAddCurrentTaskToDelayedList+0x90>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010aec:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	3304      	adds	r3, #4
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fe fbb6 	bl	800f264 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010afe:	d10a      	bne.n	8010b16 <prvAddCurrentTaskToDelayedList+0x3a>
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d007      	beq.n	8010b16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b06:	4b1a      	ldr	r3, [pc, #104]	; (8010b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	4819      	ldr	r0, [pc, #100]	; (8010b74 <prvAddCurrentTaskToDelayedList+0x98>)
 8010b10:	f7fe fb4d 	bl	800f1ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b14:	e026      	b.n	8010b64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b1e:	4b14      	ldr	r3, [pc, #80]	; (8010b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	68ba      	ldr	r2, [r7, #8]
 8010b24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d209      	bcs.n	8010b42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b2e:	4b12      	ldr	r3, [pc, #72]	; (8010b78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	4b0f      	ldr	r3, [pc, #60]	; (8010b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	3304      	adds	r3, #4
 8010b38:	4619      	mov	r1, r3
 8010b3a:	4610      	mov	r0, r2
 8010b3c:	f7fe fb5a 	bl	800f1f4 <vListInsert>
}
 8010b40:	e010      	b.n	8010b64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b42:	4b0e      	ldr	r3, [pc, #56]	; (8010b7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	4b0a      	ldr	r3, [pc, #40]	; (8010b70 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	3304      	adds	r3, #4
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	4610      	mov	r0, r2
 8010b50:	f7fe fb50 	bl	800f1f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b54:	4b0a      	ldr	r3, [pc, #40]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68ba      	ldr	r2, [r7, #8]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d202      	bcs.n	8010b64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010b5e:	4a08      	ldr	r2, [pc, #32]	; (8010b80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	6013      	str	r3, [r2, #0]
}
 8010b64:	bf00      	nop
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	20000ee4 	.word	0x20000ee4
 8010b70:	20000a0c 	.word	0x20000a0c
 8010b74:	20000ecc 	.word	0x20000ecc
 8010b78:	20000e9c 	.word	0x20000e9c
 8010b7c:	20000e98 	.word	0x20000e98
 8010b80:	20000f00 	.word	0x20000f00

08010b84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b08a      	sub	sp, #40	; 0x28
 8010b88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010b8e:	f000 fac3 	bl	8011118 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b92:	4b1c      	ldr	r3, [pc, #112]	; (8010c04 <xTimerCreateTimerTask+0x80>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d021      	beq.n	8010bde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010ba2:	1d3a      	adds	r2, r7, #4
 8010ba4:	f107 0108 	add.w	r1, r7, #8
 8010ba8:	f107 030c 	add.w	r3, r7, #12
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fe fab9 	bl	800f124 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010bb2:	6879      	ldr	r1, [r7, #4]
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	68fa      	ldr	r2, [r7, #12]
 8010bb8:	9202      	str	r2, [sp, #8]
 8010bba:	9301      	str	r3, [sp, #4]
 8010bbc:	2302      	movs	r3, #2
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	460a      	mov	r2, r1
 8010bc4:	4910      	ldr	r1, [pc, #64]	; (8010c08 <xTimerCreateTimerTask+0x84>)
 8010bc6:	4811      	ldr	r0, [pc, #68]	; (8010c0c <xTimerCreateTimerTask+0x88>)
 8010bc8:	f7ff f8d4 	bl	800fd74 <xTaskCreateStatic>
 8010bcc:	4602      	mov	r2, r0
 8010bce:	4b10      	ldr	r3, [pc, #64]	; (8010c10 <xTimerCreateTimerTask+0x8c>)
 8010bd0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010bd2:	4b0f      	ldr	r3, [pc, #60]	; (8010c10 <xTimerCreateTimerTask+0x8c>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d001      	beq.n	8010bde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d109      	bne.n	8010bf8 <xTimerCreateTimerTask+0x74>
 8010be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be8:	f383 8811 	msr	BASEPRI, r3
 8010bec:	f3bf 8f6f 	isb	sy
 8010bf0:	f3bf 8f4f 	dsb	sy
 8010bf4:	613b      	str	r3, [r7, #16]
 8010bf6:	e7fe      	b.n	8010bf6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010bf8:	697b      	ldr	r3, [r7, #20]
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3718      	adds	r7, #24
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	20000f44 	.word	0x20000f44
 8010c08:	0801684c 	.word	0x0801684c
 8010c0c:	08010d2d 	.word	0x08010d2d
 8010c10:	20000f48 	.word	0x20000f48

08010c14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08a      	sub	sp, #40	; 0x28
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
 8010c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d109      	bne.n	8010c40 <xTimerGenericCommand+0x2c>
 8010c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c30:	f383 8811 	msr	BASEPRI, r3
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	f3bf 8f4f 	dsb	sy
 8010c3c:	623b      	str	r3, [r7, #32]
 8010c3e:	e7fe      	b.n	8010c3e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010c40:	4b19      	ldr	r3, [pc, #100]	; (8010ca8 <xTimerGenericCommand+0x94>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d02a      	beq.n	8010c9e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	2b05      	cmp	r3, #5
 8010c58:	dc18      	bgt.n	8010c8c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c5a:	f7ff feb5 	bl	80109c8 <xTaskGetSchedulerState>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	d109      	bne.n	8010c78 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c64:	4b10      	ldr	r3, [pc, #64]	; (8010ca8 <xTimerGenericCommand+0x94>)
 8010c66:	6818      	ldr	r0, [r3, #0]
 8010c68:	f107 0110 	add.w	r1, r7, #16
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c70:	f7fe fcaa 	bl	800f5c8 <xQueueGenericSend>
 8010c74:	6278      	str	r0, [r7, #36]	; 0x24
 8010c76:	e012      	b.n	8010c9e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c78:	4b0b      	ldr	r3, [pc, #44]	; (8010ca8 <xTimerGenericCommand+0x94>)
 8010c7a:	6818      	ldr	r0, [r3, #0]
 8010c7c:	f107 0110 	add.w	r1, r7, #16
 8010c80:	2300      	movs	r3, #0
 8010c82:	2200      	movs	r2, #0
 8010c84:	f7fe fca0 	bl	800f5c8 <xQueueGenericSend>
 8010c88:	6278      	str	r0, [r7, #36]	; 0x24
 8010c8a:	e008      	b.n	8010c9e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c8c:	4b06      	ldr	r3, [pc, #24]	; (8010ca8 <xTimerGenericCommand+0x94>)
 8010c8e:	6818      	ldr	r0, [r3, #0]
 8010c90:	f107 0110 	add.w	r1, r7, #16
 8010c94:	2300      	movs	r3, #0
 8010c96:	683a      	ldr	r2, [r7, #0]
 8010c98:	f7fe fd90 	bl	800f7bc <xQueueGenericSendFromISR>
 8010c9c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3728      	adds	r7, #40	; 0x28
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	20000f44 	.word	0x20000f44

08010cac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b088      	sub	sp, #32
 8010cb0:	af02      	add	r7, sp, #8
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010cb6:	4b1c      	ldr	r3, [pc, #112]	; (8010d28 <prvProcessExpiredTimer+0x7c>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	68db      	ldr	r3, [r3, #12]
 8010cbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	3304      	adds	r3, #4
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fe facd 	bl	800f264 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d121      	bne.n	8010d16 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	699a      	ldr	r2, [r3, #24]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	18d1      	adds	r1, r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	683a      	ldr	r2, [r7, #0]
 8010cde:	6978      	ldr	r0, [r7, #20]
 8010ce0:	f000 f8c8 	bl	8010e74 <prvInsertTimerInActiveList>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d015      	beq.n	8010d16 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010cea:	2300      	movs	r3, #0
 8010cec:	9300      	str	r3, [sp, #0]
 8010cee:	2300      	movs	r3, #0
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	2100      	movs	r1, #0
 8010cf4:	6978      	ldr	r0, [r7, #20]
 8010cf6:	f7ff ff8d 	bl	8010c14 <xTimerGenericCommand>
 8010cfa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d109      	bne.n	8010d16 <prvProcessExpiredTimer+0x6a>
 8010d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d06:	f383 8811 	msr	BASEPRI, r3
 8010d0a:	f3bf 8f6f 	isb	sy
 8010d0e:	f3bf 8f4f 	dsb	sy
 8010d12:	60fb      	str	r3, [r7, #12]
 8010d14:	e7fe      	b.n	8010d14 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d1a:	6978      	ldr	r0, [r7, #20]
 8010d1c:	4798      	blx	r3
}
 8010d1e:	bf00      	nop
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	20000f3c 	.word	0x20000f3c

08010d2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d34:	f107 0308 	add.w	r3, r7, #8
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f000 f857 	bl	8010dec <prvGetNextExpireTime>
 8010d3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	4619      	mov	r1, r3
 8010d44:	68f8      	ldr	r0, [r7, #12]
 8010d46:	f000 f803 	bl	8010d50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010d4a:	f000 f8d5 	bl	8010ef8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d4e:	e7f1      	b.n	8010d34 <prvTimerTask+0x8>

08010d50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d5a:	f7ff fa3f 	bl	80101dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d5e:	f107 0308 	add.w	r3, r7, #8
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 f866 	bl	8010e34 <prvSampleTimeNow>
 8010d68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d130      	bne.n	8010dd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d10a      	bne.n	8010d8c <prvProcessTimerOrBlockTask+0x3c>
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d806      	bhi.n	8010d8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010d7e:	f7ff fa3b 	bl	80101f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d82:	68f9      	ldr	r1, [r7, #12]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7ff ff91 	bl	8010cac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d8a:	e024      	b.n	8010dd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d008      	beq.n	8010da4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d92:	4b13      	ldr	r3, [pc, #76]	; (8010de0 <prvProcessTimerOrBlockTask+0x90>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	bf0c      	ite	eq
 8010d9c:	2301      	moveq	r3, #1
 8010d9e:	2300      	movne	r3, #0
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010da4:	4b0f      	ldr	r3, [pc, #60]	; (8010de4 <prvProcessTimerOrBlockTask+0x94>)
 8010da6:	6818      	ldr	r0, [r3, #0]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	683a      	ldr	r2, [r7, #0]
 8010db0:	4619      	mov	r1, r3
 8010db2:	f7fe ffab 	bl	800fd0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010db6:	f7ff fa1f 	bl	80101f8 <xTaskResumeAll>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10a      	bne.n	8010dd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010dc0:	4b09      	ldr	r3, [pc, #36]	; (8010de8 <prvProcessTimerOrBlockTask+0x98>)
 8010dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dc6:	601a      	str	r2, [r3, #0]
 8010dc8:	f3bf 8f4f 	dsb	sy
 8010dcc:	f3bf 8f6f 	isb	sy
}
 8010dd0:	e001      	b.n	8010dd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010dd2:	f7ff fa11 	bl	80101f8 <xTaskResumeAll>
}
 8010dd6:	bf00      	nop
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	20000f40 	.word	0x20000f40
 8010de4:	20000f44 	.word	0x20000f44
 8010de8:	e000ed04 	.word	0xe000ed04

08010dec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010dec:	b480      	push	{r7}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010df4:	4b0e      	ldr	r3, [pc, #56]	; (8010e30 <prvGetNextExpireTime+0x44>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	bf0c      	ite	eq
 8010dfe:	2301      	moveq	r3, #1
 8010e00:	2300      	movne	r3, #0
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	461a      	mov	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d105      	bne.n	8010e1e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e12:	4b07      	ldr	r3, [pc, #28]	; (8010e30 <prvGetNextExpireTime+0x44>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	60fb      	str	r3, [r7, #12]
 8010e1c:	e001      	b.n	8010e22 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010e22:	68fb      	ldr	r3, [r7, #12]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3714      	adds	r7, #20
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bc80      	pop	{r7}
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	20000f3c 	.word	0x20000f3c

08010e34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010e3c:	f7ff fa78 	bl	8010330 <xTaskGetTickCount>
 8010e40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010e42:	4b0b      	ldr	r3, [pc, #44]	; (8010e70 <prvSampleTimeNow+0x3c>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d205      	bcs.n	8010e58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010e4c:	f000 f904 	bl	8011058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2201      	movs	r2, #1
 8010e54:	601a      	str	r2, [r3, #0]
 8010e56:	e002      	b.n	8010e5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e5e:	4a04      	ldr	r2, [pc, #16]	; (8010e70 <prvSampleTimeNow+0x3c>)
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010e64:	68fb      	ldr	r3, [r7, #12]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	20000f4c 	.word	0x20000f4c

08010e74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
 8010e80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e82:	2300      	movs	r3, #0
 8010e84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	68fa      	ldr	r2, [r7, #12]
 8010e90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d812      	bhi.n	8010ec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	1ad2      	subs	r2, r2, r3
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d302      	bcc.n	8010eae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	617b      	str	r3, [r7, #20]
 8010eac:	e01b      	b.n	8010ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010eae:	4b10      	ldr	r3, [pc, #64]	; (8010ef0 <prvInsertTimerInActiveList+0x7c>)
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	3304      	adds	r3, #4
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	4610      	mov	r0, r2
 8010eba:	f7fe f99b 	bl	800f1f4 <vListInsert>
 8010ebe:	e012      	b.n	8010ee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d206      	bcs.n	8010ed6 <prvInsertTimerInActiveList+0x62>
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d302      	bcc.n	8010ed6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	617b      	str	r3, [r7, #20]
 8010ed4:	e007      	b.n	8010ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ed6:	4b07      	ldr	r3, [pc, #28]	; (8010ef4 <prvInsertTimerInActiveList+0x80>)
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	3304      	adds	r3, #4
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f7fe f987 	bl	800f1f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010ee6:	697b      	ldr	r3, [r7, #20]
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3718      	adds	r7, #24
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20000f40 	.word	0x20000f40
 8010ef4:	20000f3c 	.word	0x20000f3c

08010ef8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b08e      	sub	sp, #56	; 0x38
 8010efc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010efe:	e099      	b.n	8011034 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	da17      	bge.n	8010f36 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010f06:	1d3b      	adds	r3, r7, #4
 8010f08:	3304      	adds	r3, #4
 8010f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d109      	bne.n	8010f26 <prvProcessReceivedCommands+0x2e>
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	61fb      	str	r3, [r7, #28]
 8010f24:	e7fe      	b.n	8010f24 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f2c:	6850      	ldr	r0, [r2, #4]
 8010f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f30:	6892      	ldr	r2, [r2, #8]
 8010f32:	4611      	mov	r1, r2
 8010f34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	db7a      	blt.n	8011032 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f42:	695b      	ldr	r3, [r3, #20]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d004      	beq.n	8010f52 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4a:	3304      	adds	r3, #4
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fe f989 	bl	800f264 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f52:	463b      	mov	r3, r7
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff ff6d 	bl	8010e34 <prvSampleTimeNow>
 8010f5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b09      	cmp	r3, #9
 8010f60:	d868      	bhi.n	8011034 <prvProcessReceivedCommands+0x13c>
 8010f62:	a201      	add	r2, pc, #4	; (adr r2, 8010f68 <prvProcessReceivedCommands+0x70>)
 8010f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f68:	08010f91 	.word	0x08010f91
 8010f6c:	08010f91 	.word	0x08010f91
 8010f70:	08010f91 	.word	0x08010f91
 8010f74:	08011035 	.word	0x08011035
 8010f78:	08010feb 	.word	0x08010feb
 8010f7c:	08011021 	.word	0x08011021
 8010f80:	08010f91 	.word	0x08010f91
 8010f84:	08010f91 	.word	0x08010f91
 8010f88:	08011035 	.word	0x08011035
 8010f8c:	08010feb 	.word	0x08010feb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f94:	699b      	ldr	r3, [r3, #24]
 8010f96:	18d1      	adds	r1, r2, r3
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f9e:	f7ff ff69 	bl	8010e74 <prvInsertTimerInActiveList>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d045      	beq.n	8011034 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb2:	69db      	ldr	r3, [r3, #28]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d13d      	bne.n	8011034 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbc:	699b      	ldr	r3, [r3, #24]
 8010fbe:	441a      	add	r2, r3
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fca:	f7ff fe23 	bl	8010c14 <xTimerGenericCommand>
 8010fce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010fd0:	6a3b      	ldr	r3, [r7, #32]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d12e      	bne.n	8011034 <prvProcessReceivedCommands+0x13c>
 8010fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fda:	f383 8811 	msr	BASEPRI, r3
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	f3bf 8f4f 	dsb	sy
 8010fe6:	61bb      	str	r3, [r7, #24]
 8010fe8:	e7fe      	b.n	8010fe8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff2:	699b      	ldr	r3, [r3, #24]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d109      	bne.n	801100c <prvProcessReceivedCommands+0x114>
 8010ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffc:	f383 8811 	msr	BASEPRI, r3
 8011000:	f3bf 8f6f 	isb	sy
 8011004:	f3bf 8f4f 	dsb	sy
 8011008:	617b      	str	r3, [r7, #20]
 801100a:	e7fe      	b.n	801100a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100e:	699a      	ldr	r2, [r3, #24]
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	18d1      	adds	r1, r2, r3
 8011014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801101a:	f7ff ff2b 	bl	8010e74 <prvInsertTimerInActiveList>
					break;
 801101e:	e009      	b.n	8011034 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011022:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011026:	2b00      	cmp	r3, #0
 8011028:	d104      	bne.n	8011034 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 801102a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801102c:	f000 fb54 	bl	80116d8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011030:	e000      	b.n	8011034 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011032:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011034:	4b07      	ldr	r3, [pc, #28]	; (8011054 <prvProcessReceivedCommands+0x15c>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	1d39      	adds	r1, r7, #4
 801103a:	2200      	movs	r2, #0
 801103c:	4618      	mov	r0, r3
 801103e:	f7fe fc51 	bl	800f8e4 <xQueueReceive>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	f47f af5b 	bne.w	8010f00 <prvProcessReceivedCommands+0x8>
	}
}
 801104a:	bf00      	nop
 801104c:	3730      	adds	r7, #48	; 0x30
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	20000f44 	.word	0x20000f44

08011058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b088      	sub	sp, #32
 801105c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801105e:	e044      	b.n	80110ea <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011060:	4b2b      	ldr	r3, [pc, #172]	; (8011110 <prvSwitchTimerLists+0xb8>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801106a:	4b29      	ldr	r3, [pc, #164]	; (8011110 <prvSwitchTimerLists+0xb8>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	68db      	ldr	r3, [r3, #12]
 8011072:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	3304      	adds	r3, #4
 8011078:	4618      	mov	r0, r3
 801107a:	f7fe f8f3 	bl	800f264 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	69db      	ldr	r3, [r3, #28]
 801108a:	2b01      	cmp	r3, #1
 801108c:	d12d      	bne.n	80110ea <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	699b      	ldr	r3, [r3, #24]
 8011092:	693a      	ldr	r2, [r7, #16]
 8011094:	4413      	add	r3, r2
 8011096:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011098:	68ba      	ldr	r2, [r7, #8]
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	429a      	cmp	r2, r3
 801109e:	d90e      	bls.n	80110be <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	68ba      	ldr	r2, [r7, #8]
 80110a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110ac:	4b18      	ldr	r3, [pc, #96]	; (8011110 <prvSwitchTimerLists+0xb8>)
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	3304      	adds	r3, #4
 80110b4:	4619      	mov	r1, r3
 80110b6:	4610      	mov	r0, r2
 80110b8:	f7fe f89c 	bl	800f1f4 <vListInsert>
 80110bc:	e015      	b.n	80110ea <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110be:	2300      	movs	r3, #0
 80110c0:	9300      	str	r3, [sp, #0]
 80110c2:	2300      	movs	r3, #0
 80110c4:	693a      	ldr	r2, [r7, #16]
 80110c6:	2100      	movs	r1, #0
 80110c8:	68f8      	ldr	r0, [r7, #12]
 80110ca:	f7ff fda3 	bl	8010c14 <xTimerGenericCommand>
 80110ce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d109      	bne.n	80110ea <prvSwitchTimerLists+0x92>
 80110d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110da:	f383 8811 	msr	BASEPRI, r3
 80110de:	f3bf 8f6f 	isb	sy
 80110e2:	f3bf 8f4f 	dsb	sy
 80110e6:	603b      	str	r3, [r7, #0]
 80110e8:	e7fe      	b.n	80110e8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110ea:	4b09      	ldr	r3, [pc, #36]	; (8011110 <prvSwitchTimerLists+0xb8>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1b5      	bne.n	8011060 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80110f4:	4b06      	ldr	r3, [pc, #24]	; (8011110 <prvSwitchTimerLists+0xb8>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80110fa:	4b06      	ldr	r3, [pc, #24]	; (8011114 <prvSwitchTimerLists+0xbc>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4a04      	ldr	r2, [pc, #16]	; (8011110 <prvSwitchTimerLists+0xb8>)
 8011100:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011102:	4a04      	ldr	r2, [pc, #16]	; (8011114 <prvSwitchTimerLists+0xbc>)
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	6013      	str	r3, [r2, #0]
}
 8011108:	bf00      	nop
 801110a:	3718      	adds	r7, #24
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	20000f3c 	.word	0x20000f3c
 8011114:	20000f40 	.word	0x20000f40

08011118 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801111e:	f000 f923 	bl	8011368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011122:	4b15      	ldr	r3, [pc, #84]	; (8011178 <prvCheckForValidListAndQueue+0x60>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d120      	bne.n	801116c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801112a:	4814      	ldr	r0, [pc, #80]	; (801117c <prvCheckForValidListAndQueue+0x64>)
 801112c:	f7fe f814 	bl	800f158 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011130:	4813      	ldr	r0, [pc, #76]	; (8011180 <prvCheckForValidListAndQueue+0x68>)
 8011132:	f7fe f811 	bl	800f158 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011136:	4b13      	ldr	r3, [pc, #76]	; (8011184 <prvCheckForValidListAndQueue+0x6c>)
 8011138:	4a10      	ldr	r2, [pc, #64]	; (801117c <prvCheckForValidListAndQueue+0x64>)
 801113a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801113c:	4b12      	ldr	r3, [pc, #72]	; (8011188 <prvCheckForValidListAndQueue+0x70>)
 801113e:	4a10      	ldr	r2, [pc, #64]	; (8011180 <prvCheckForValidListAndQueue+0x68>)
 8011140:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011142:	2300      	movs	r3, #0
 8011144:	9300      	str	r3, [sp, #0]
 8011146:	4b11      	ldr	r3, [pc, #68]	; (801118c <prvCheckForValidListAndQueue+0x74>)
 8011148:	4a11      	ldr	r2, [pc, #68]	; (8011190 <prvCheckForValidListAndQueue+0x78>)
 801114a:	2110      	movs	r1, #16
 801114c:	200a      	movs	r0, #10
 801114e:	f7fe f91b 	bl	800f388 <xQueueGenericCreateStatic>
 8011152:	4602      	mov	r2, r0
 8011154:	4b08      	ldr	r3, [pc, #32]	; (8011178 <prvCheckForValidListAndQueue+0x60>)
 8011156:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011158:	4b07      	ldr	r3, [pc, #28]	; (8011178 <prvCheckForValidListAndQueue+0x60>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d005      	beq.n	801116c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011160:	4b05      	ldr	r3, [pc, #20]	; (8011178 <prvCheckForValidListAndQueue+0x60>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	490b      	ldr	r1, [pc, #44]	; (8011194 <prvCheckForValidListAndQueue+0x7c>)
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe fda8 	bl	800fcbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801116c:	f000 f92a 	bl	80113c4 <vPortExitCritical>
}
 8011170:	bf00      	nop
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	20000f44 	.word	0x20000f44
 801117c:	20000f14 	.word	0x20000f14
 8011180:	20000f28 	.word	0x20000f28
 8011184:	20000f3c 	.word	0x20000f3c
 8011188:	20000f40 	.word	0x20000f40
 801118c:	20000ff0 	.word	0x20000ff0
 8011190:	20000f50 	.word	0x20000f50
 8011194:	08016854 	.word	0x08016854

08011198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011198:	b480      	push	{r7}
 801119a:	b085      	sub	sp, #20
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	3b04      	subs	r3, #4
 80111a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80111b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	3b04      	subs	r3, #4
 80111b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	f023 0201 	bic.w	r2, r3, #1
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	3b04      	subs	r3, #4
 80111c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80111c8:	4a08      	ldr	r2, [pc, #32]	; (80111ec <pxPortInitialiseStack+0x54>)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	3b14      	subs	r3, #20
 80111d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80111d4:	687a      	ldr	r2, [r7, #4]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3b20      	subs	r3, #32
 80111de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80111e0:	68fb      	ldr	r3, [r7, #12]
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3714      	adds	r7, #20
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bc80      	pop	{r7}
 80111ea:	4770      	bx	lr
 80111ec:	080111f1 	.word	0x080111f1

080111f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80111f0:	b480      	push	{r7}
 80111f2:	b085      	sub	sp, #20
 80111f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80111f6:	2300      	movs	r3, #0
 80111f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80111fa:	4b10      	ldr	r3, [pc, #64]	; (801123c <prvTaskExitError+0x4c>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011202:	d009      	beq.n	8011218 <prvTaskExitError+0x28>
 8011204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	60fb      	str	r3, [r7, #12]
 8011216:	e7fe      	b.n	8011216 <prvTaskExitError+0x26>
 8011218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121c:	f383 8811 	msr	BASEPRI, r3
 8011220:	f3bf 8f6f 	isb	sy
 8011224:	f3bf 8f4f 	dsb	sy
 8011228:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801122a:	bf00      	nop
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d0fc      	beq.n	801122c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011232:	bf00      	nop
 8011234:	3714      	adds	r7, #20
 8011236:	46bd      	mov	sp, r7
 8011238:	bc80      	pop	{r7}
 801123a:	4770      	bx	lr
 801123c:	200000cc 	.word	0x200000cc

08011240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011240:	4b07      	ldr	r3, [pc, #28]	; (8011260 <pxCurrentTCBConst2>)
 8011242:	6819      	ldr	r1, [r3, #0]
 8011244:	6808      	ldr	r0, [r1, #0]
 8011246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801124a:	f380 8809 	msr	PSP, r0
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f04f 0000 	mov.w	r0, #0
 8011256:	f380 8811 	msr	BASEPRI, r0
 801125a:	f04e 0e0d 	orr.w	lr, lr, #13
 801125e:	4770      	bx	lr

08011260 <pxCurrentTCBConst2>:
 8011260:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011264:	bf00      	nop
 8011266:	bf00      	nop

08011268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8011268:	4806      	ldr	r0, [pc, #24]	; (8011284 <prvPortStartFirstTask+0x1c>)
 801126a:	6800      	ldr	r0, [r0, #0]
 801126c:	6800      	ldr	r0, [r0, #0]
 801126e:	f380 8808 	msr	MSP, r0
 8011272:	b662      	cpsie	i
 8011274:	b661      	cpsie	f
 8011276:	f3bf 8f4f 	dsb	sy
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	df00      	svc	0
 8011280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011282:	bf00      	nop
 8011284:	e000ed08 	.word	0xe000ed08

08011288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801128e:	4b31      	ldr	r3, [pc, #196]	; (8011354 <xPortStartScheduler+0xcc>)
 8011290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	b2db      	uxtb	r3, r3
 8011298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	22ff      	movs	r2, #255	; 0xff
 801129e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80112a8:	78fb      	ldrb	r3, [r7, #3]
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	4b29      	ldr	r3, [pc, #164]	; (8011358 <xPortStartScheduler+0xd0>)
 80112b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80112b6:	4b29      	ldr	r3, [pc, #164]	; (801135c <xPortStartScheduler+0xd4>)
 80112b8:	2207      	movs	r2, #7
 80112ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112bc:	e009      	b.n	80112d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80112be:	4b27      	ldr	r3, [pc, #156]	; (801135c <xPortStartScheduler+0xd4>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	3b01      	subs	r3, #1
 80112c4:	4a25      	ldr	r2, [pc, #148]	; (801135c <xPortStartScheduler+0xd4>)
 80112c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80112c8:	78fb      	ldrb	r3, [r7, #3]
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112d2:	78fb      	ldrb	r3, [r7, #3]
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112da:	2b80      	cmp	r3, #128	; 0x80
 80112dc:	d0ef      	beq.n	80112be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80112de:	4b1f      	ldr	r3, [pc, #124]	; (801135c <xPortStartScheduler+0xd4>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f1c3 0307 	rsb	r3, r3, #7
 80112e6:	2b04      	cmp	r3, #4
 80112e8:	d009      	beq.n	80112fe <xPortStartScheduler+0x76>
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	60bb      	str	r3, [r7, #8]
 80112fc:	e7fe      	b.n	80112fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80112fe:	4b17      	ldr	r3, [pc, #92]	; (801135c <xPortStartScheduler+0xd4>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	021b      	lsls	r3, r3, #8
 8011304:	4a15      	ldr	r2, [pc, #84]	; (801135c <xPortStartScheduler+0xd4>)
 8011306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011308:	4b14      	ldr	r3, [pc, #80]	; (801135c <xPortStartScheduler+0xd4>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011310:	4a12      	ldr	r2, [pc, #72]	; (801135c <xPortStartScheduler+0xd4>)
 8011312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	b2da      	uxtb	r2, r3
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801131c:	4b10      	ldr	r3, [pc, #64]	; (8011360 <xPortStartScheduler+0xd8>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a0f      	ldr	r2, [pc, #60]	; (8011360 <xPortStartScheduler+0xd8>)
 8011322:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011328:	4b0d      	ldr	r3, [pc, #52]	; (8011360 <xPortStartScheduler+0xd8>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a0c      	ldr	r2, [pc, #48]	; (8011360 <xPortStartScheduler+0xd8>)
 801132e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011334:	f000 f8b0 	bl	8011498 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011338:	4b0a      	ldr	r3, [pc, #40]	; (8011364 <xPortStartScheduler+0xdc>)
 801133a:	2200      	movs	r2, #0
 801133c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801133e:	f7ff ff93 	bl	8011268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011342:	f7ff f8c1 	bl	80104c8 <vTaskSwitchContext>
	prvTaskExitError();
 8011346:	f7ff ff53 	bl	80111f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	e000e400 	.word	0xe000e400
 8011358:	20001040 	.word	0x20001040
 801135c:	20001044 	.word	0x20001044
 8011360:	e000ed20 	.word	0xe000ed20
 8011364:	200000cc 	.word	0x200000cc

08011368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011372:	f383 8811 	msr	BASEPRI, r3
 8011376:	f3bf 8f6f 	isb	sy
 801137a:	f3bf 8f4f 	dsb	sy
 801137e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011380:	4b0e      	ldr	r3, [pc, #56]	; (80113bc <vPortEnterCritical+0x54>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	3301      	adds	r3, #1
 8011386:	4a0d      	ldr	r2, [pc, #52]	; (80113bc <vPortEnterCritical+0x54>)
 8011388:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801138a:	4b0c      	ldr	r3, [pc, #48]	; (80113bc <vPortEnterCritical+0x54>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b01      	cmp	r3, #1
 8011390:	d10e      	bne.n	80113b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011392:	4b0b      	ldr	r3, [pc, #44]	; (80113c0 <vPortEnterCritical+0x58>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	b2db      	uxtb	r3, r3
 8011398:	2b00      	cmp	r3, #0
 801139a:	d009      	beq.n	80113b0 <vPortEnterCritical+0x48>
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	f383 8811 	msr	BASEPRI, r3
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	603b      	str	r3, [r7, #0]
 80113ae:	e7fe      	b.n	80113ae <vPortEnterCritical+0x46>
	}
}
 80113b0:	bf00      	nop
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bc80      	pop	{r7}
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	200000cc 	.word	0x200000cc
 80113c0:	e000ed04 	.word	0xe000ed04

080113c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113ca:	4b10      	ldr	r3, [pc, #64]	; (801140c <vPortExitCritical+0x48>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d109      	bne.n	80113e6 <vPortExitCritical+0x22>
 80113d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d6:	f383 8811 	msr	BASEPRI, r3
 80113da:	f3bf 8f6f 	isb	sy
 80113de:	f3bf 8f4f 	dsb	sy
 80113e2:	607b      	str	r3, [r7, #4]
 80113e4:	e7fe      	b.n	80113e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80113e6:	4b09      	ldr	r3, [pc, #36]	; (801140c <vPortExitCritical+0x48>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	3b01      	subs	r3, #1
 80113ec:	4a07      	ldr	r2, [pc, #28]	; (801140c <vPortExitCritical+0x48>)
 80113ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80113f0:	4b06      	ldr	r3, [pc, #24]	; (801140c <vPortExitCritical+0x48>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d104      	bne.n	8011402 <vPortExitCritical+0x3e>
 80113f8:	2300      	movs	r3, #0
 80113fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011402:	bf00      	nop
 8011404:	370c      	adds	r7, #12
 8011406:	46bd      	mov	sp, r7
 8011408:	bc80      	pop	{r7}
 801140a:	4770      	bx	lr
 801140c:	200000cc 	.word	0x200000cc

08011410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011410:	f3ef 8009 	mrs	r0, PSP
 8011414:	f3bf 8f6f 	isb	sy
 8011418:	4b0d      	ldr	r3, [pc, #52]	; (8011450 <pxCurrentTCBConst>)
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011420:	6010      	str	r0, [r2, #0]
 8011422:	e92d 4008 	stmdb	sp!, {r3, lr}
 8011426:	f04f 0050 	mov.w	r0, #80	; 0x50
 801142a:	f380 8811 	msr	BASEPRI, r0
 801142e:	f7ff f84b 	bl	80104c8 <vTaskSwitchContext>
 8011432:	f04f 0000 	mov.w	r0, #0
 8011436:	f380 8811 	msr	BASEPRI, r0
 801143a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801143e:	6819      	ldr	r1, [r3, #0]
 8011440:	6808      	ldr	r0, [r1, #0]
 8011442:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011446:	f380 8809 	msr	PSP, r0
 801144a:	f3bf 8f6f 	isb	sy
 801144e:	4770      	bx	lr

08011450 <pxCurrentTCBConst>:
 8011450:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011454:	bf00      	nop
 8011456:	bf00      	nop

08011458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
	__asm volatile
 801145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011462:	f383 8811 	msr	BASEPRI, r3
 8011466:	f3bf 8f6f 	isb	sy
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011470:	f7fe ff6c 	bl	801034c <xTaskIncrementTick>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d003      	beq.n	8011482 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801147a:	4b06      	ldr	r3, [pc, #24]	; (8011494 <SysTick_Handler+0x3c>)
 801147c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	2300      	movs	r3, #0
 8011484:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801148c:	bf00      	nop
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	e000ed04 	.word	0xe000ed04

08011498 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011498:	b480      	push	{r7}
 801149a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801149c:	4b0a      	ldr	r3, [pc, #40]	; (80114c8 <vPortSetupTimerInterrupt+0x30>)
 801149e:	2200      	movs	r2, #0
 80114a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114a2:	4b0a      	ldr	r3, [pc, #40]	; (80114cc <vPortSetupTimerInterrupt+0x34>)
 80114a4:	2200      	movs	r2, #0
 80114a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80114a8:	4b09      	ldr	r3, [pc, #36]	; (80114d0 <vPortSetupTimerInterrupt+0x38>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a09      	ldr	r2, [pc, #36]	; (80114d4 <vPortSetupTimerInterrupt+0x3c>)
 80114ae:	fba2 2303 	umull	r2, r3, r2, r3
 80114b2:	099b      	lsrs	r3, r3, #6
 80114b4:	4a08      	ldr	r2, [pc, #32]	; (80114d8 <vPortSetupTimerInterrupt+0x40>)
 80114b6:	3b01      	subs	r3, #1
 80114b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80114ba:	4b03      	ldr	r3, [pc, #12]	; (80114c8 <vPortSetupTimerInterrupt+0x30>)
 80114bc:	2207      	movs	r2, #7
 80114be:	601a      	str	r2, [r3, #0]
}
 80114c0:	bf00      	nop
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bc80      	pop	{r7}
 80114c6:	4770      	bx	lr
 80114c8:	e000e010 	.word	0xe000e010
 80114cc:	e000e018 	.word	0xe000e018
 80114d0:	20000000 	.word	0x20000000
 80114d4:	10624dd3 	.word	0x10624dd3
 80114d8:	e000e014 	.word	0xe000e014

080114dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80114e2:	f3ef 8305 	mrs	r3, IPSR
 80114e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2b0f      	cmp	r3, #15
 80114ec:	d913      	bls.n	8011516 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80114ee:	4a15      	ldr	r2, [pc, #84]	; (8011544 <vPortValidateInterruptPriority+0x68>)
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4413      	add	r3, r2
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80114f8:	4b13      	ldr	r3, [pc, #76]	; (8011548 <vPortValidateInterruptPriority+0x6c>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	7afa      	ldrb	r2, [r7, #11]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d209      	bcs.n	8011516 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	607b      	str	r3, [r7, #4]
 8011514:	e7fe      	b.n	8011514 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011516:	4b0d      	ldr	r3, [pc, #52]	; (801154c <vPortValidateInterruptPriority+0x70>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801151e:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <vPortValidateInterruptPriority+0x74>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	429a      	cmp	r2, r3
 8011524:	d909      	bls.n	801153a <vPortValidateInterruptPriority+0x5e>
 8011526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152a:	f383 8811 	msr	BASEPRI, r3
 801152e:	f3bf 8f6f 	isb	sy
 8011532:	f3bf 8f4f 	dsb	sy
 8011536:	603b      	str	r3, [r7, #0]
 8011538:	e7fe      	b.n	8011538 <vPortValidateInterruptPriority+0x5c>
	}
 801153a:	bf00      	nop
 801153c:	3714      	adds	r7, #20
 801153e:	46bd      	mov	sp, r7
 8011540:	bc80      	pop	{r7}
 8011542:	4770      	bx	lr
 8011544:	e000e3f0 	.word	0xe000e3f0
 8011548:	20001040 	.word	0x20001040
 801154c:	e000ed0c 	.word	0xe000ed0c
 8011550:	20001044 	.word	0x20001044

08011554 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b08a      	sub	sp, #40	; 0x28
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801155c:	2300      	movs	r3, #0
 801155e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011560:	f7fe fe3c 	bl	80101dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011564:	4b57      	ldr	r3, [pc, #348]	; (80116c4 <pvPortMalloc+0x170>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d101      	bne.n	8011570 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801156c:	f000 f90c 	bl	8011788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011570:	4b55      	ldr	r3, [pc, #340]	; (80116c8 <pvPortMalloc+0x174>)
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4013      	ands	r3, r2
 8011578:	2b00      	cmp	r3, #0
 801157a:	f040 808c 	bne.w	8011696 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d01c      	beq.n	80115be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011584:	2208      	movs	r2, #8
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4413      	add	r3, r2
 801158a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f003 0307 	and.w	r3, r3, #7
 8011592:	2b00      	cmp	r3, #0
 8011594:	d013      	beq.n	80115be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f023 0307 	bic.w	r3, r3, #7
 801159c:	3308      	adds	r3, #8
 801159e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f003 0307 	and.w	r3, r3, #7
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d009      	beq.n	80115be <pvPortMalloc+0x6a>
 80115aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ae:	f383 8811 	msr	BASEPRI, r3
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	f3bf 8f4f 	dsb	sy
 80115ba:	617b      	str	r3, [r7, #20]
 80115bc:	e7fe      	b.n	80115bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d068      	beq.n	8011696 <pvPortMalloc+0x142>
 80115c4:	4b41      	ldr	r3, [pc, #260]	; (80116cc <pvPortMalloc+0x178>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d863      	bhi.n	8011696 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80115ce:	4b40      	ldr	r3, [pc, #256]	; (80116d0 <pvPortMalloc+0x17c>)
 80115d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80115d2:	4b3f      	ldr	r3, [pc, #252]	; (80116d0 <pvPortMalloc+0x17c>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115d8:	e004      	b.n	80115e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d903      	bls.n	80115f6 <pvPortMalloc+0xa2>
 80115ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1f1      	bne.n	80115da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80115f6:	4b33      	ldr	r3, [pc, #204]	; (80116c4 <pvPortMalloc+0x170>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d04a      	beq.n	8011696 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011600:	6a3b      	ldr	r3, [r7, #32]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2208      	movs	r2, #8
 8011606:	4413      	add	r3, r2
 8011608:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	6a3b      	ldr	r3, [r7, #32]
 8011610:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011614:	685a      	ldr	r2, [r3, #4]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	1ad2      	subs	r2, r2, r3
 801161a:	2308      	movs	r3, #8
 801161c:	005b      	lsls	r3, r3, #1
 801161e:	429a      	cmp	r2, r3
 8011620:	d91e      	bls.n	8011660 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4413      	add	r3, r2
 8011628:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	f003 0307 	and.w	r3, r3, #7
 8011630:	2b00      	cmp	r3, #0
 8011632:	d009      	beq.n	8011648 <pvPortMalloc+0xf4>
 8011634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011638:	f383 8811 	msr	BASEPRI, r3
 801163c:	f3bf 8f6f 	isb	sy
 8011640:	f3bf 8f4f 	dsb	sy
 8011644:	613b      	str	r3, [r7, #16]
 8011646:	e7fe      	b.n	8011646 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164a:	685a      	ldr	r2, [r3, #4]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	1ad2      	subs	r2, r2, r3
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801165a:	69b8      	ldr	r0, [r7, #24]
 801165c:	f000 f8f6 	bl	801184c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011660:	4b1a      	ldr	r3, [pc, #104]	; (80116cc <pvPortMalloc+0x178>)
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	1ad3      	subs	r3, r2, r3
 801166a:	4a18      	ldr	r2, [pc, #96]	; (80116cc <pvPortMalloc+0x178>)
 801166c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801166e:	4b17      	ldr	r3, [pc, #92]	; (80116cc <pvPortMalloc+0x178>)
 8011670:	681a      	ldr	r2, [r3, #0]
 8011672:	4b18      	ldr	r3, [pc, #96]	; (80116d4 <pvPortMalloc+0x180>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	429a      	cmp	r2, r3
 8011678:	d203      	bcs.n	8011682 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801167a:	4b14      	ldr	r3, [pc, #80]	; (80116cc <pvPortMalloc+0x178>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	4a15      	ldr	r2, [pc, #84]	; (80116d4 <pvPortMalloc+0x180>)
 8011680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	4b10      	ldr	r3, [pc, #64]	; (80116c8 <pvPortMalloc+0x174>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	431a      	orrs	r2, r3
 801168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011692:	2200      	movs	r2, #0
 8011694:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011696:	f7fe fdaf 	bl	80101f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	f003 0307 	and.w	r3, r3, #7
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d009      	beq.n	80116b8 <pvPortMalloc+0x164>
 80116a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a8:	f383 8811 	msr	BASEPRI, r3
 80116ac:	f3bf 8f6f 	isb	sy
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	60fb      	str	r3, [r7, #12]
 80116b6:	e7fe      	b.n	80116b6 <pvPortMalloc+0x162>
	return pvReturn;
 80116b8:	69fb      	ldr	r3, [r7, #28]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3728      	adds	r7, #40	; 0x28
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	20003760 	.word	0x20003760
 80116c8:	2000376c 	.word	0x2000376c
 80116cc:	20003764 	.word	0x20003764
 80116d0:	20003758 	.word	0x20003758
 80116d4:	20003768 	.word	0x20003768

080116d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d046      	beq.n	8011778 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80116ea:	2308      	movs	r3, #8
 80116ec:	425b      	negs	r3, r3
 80116ee:	697a      	ldr	r2, [r7, #20]
 80116f0:	4413      	add	r3, r2
 80116f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	685a      	ldr	r2, [r3, #4]
 80116fc:	4b20      	ldr	r3, [pc, #128]	; (8011780 <vPortFree+0xa8>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4013      	ands	r3, r2
 8011702:	2b00      	cmp	r3, #0
 8011704:	d109      	bne.n	801171a <vPortFree+0x42>
 8011706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170a:	f383 8811 	msr	BASEPRI, r3
 801170e:	f3bf 8f6f 	isb	sy
 8011712:	f3bf 8f4f 	dsb	sy
 8011716:	60fb      	str	r3, [r7, #12]
 8011718:	e7fe      	b.n	8011718 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d009      	beq.n	8011736 <vPortFree+0x5e>
 8011722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011726:	f383 8811 	msr	BASEPRI, r3
 801172a:	f3bf 8f6f 	isb	sy
 801172e:	f3bf 8f4f 	dsb	sy
 8011732:	60bb      	str	r3, [r7, #8]
 8011734:	e7fe      	b.n	8011734 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	685a      	ldr	r2, [r3, #4]
 801173a:	4b11      	ldr	r3, [pc, #68]	; (8011780 <vPortFree+0xa8>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	4013      	ands	r3, r2
 8011740:	2b00      	cmp	r3, #0
 8011742:	d019      	beq.n	8011778 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d115      	bne.n	8011778 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	685a      	ldr	r2, [r3, #4]
 8011750:	4b0b      	ldr	r3, [pc, #44]	; (8011780 <vPortFree+0xa8>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	43db      	mvns	r3, r3
 8011756:	401a      	ands	r2, r3
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801175c:	f7fe fd3e 	bl	80101dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	4b07      	ldr	r3, [pc, #28]	; (8011784 <vPortFree+0xac>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4413      	add	r3, r2
 801176a:	4a06      	ldr	r2, [pc, #24]	; (8011784 <vPortFree+0xac>)
 801176c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801176e:	6938      	ldr	r0, [r7, #16]
 8011770:	f000 f86c 	bl	801184c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011774:	f7fe fd40 	bl	80101f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011778:	bf00      	nop
 801177a:	3718      	adds	r7, #24
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	2000376c 	.word	0x2000376c
 8011784:	20003764 	.word	0x20003764

08011788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801178e:	f242 7310 	movw	r3, #10000	; 0x2710
 8011792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011794:	4b27      	ldr	r3, [pc, #156]	; (8011834 <prvHeapInit+0xac>)
 8011796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f003 0307 	and.w	r3, r3, #7
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d00c      	beq.n	80117bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	3307      	adds	r3, #7
 80117a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f023 0307 	bic.w	r3, r3, #7
 80117ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	1ad3      	subs	r3, r2, r3
 80117b6:	4a1f      	ldr	r2, [pc, #124]	; (8011834 <prvHeapInit+0xac>)
 80117b8:	4413      	add	r3, r2
 80117ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117c0:	4a1d      	ldr	r2, [pc, #116]	; (8011838 <prvHeapInit+0xb0>)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80117c6:	4b1c      	ldr	r3, [pc, #112]	; (8011838 <prvHeapInit+0xb0>)
 80117c8:	2200      	movs	r2, #0
 80117ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	68ba      	ldr	r2, [r7, #8]
 80117d0:	4413      	add	r3, r2
 80117d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80117d4:	2208      	movs	r2, #8
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	1a9b      	subs	r3, r3, r2
 80117da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f023 0307 	bic.w	r3, r3, #7
 80117e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	4a15      	ldr	r2, [pc, #84]	; (801183c <prvHeapInit+0xb4>)
 80117e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80117ea:	4b14      	ldr	r3, [pc, #80]	; (801183c <prvHeapInit+0xb4>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2200      	movs	r2, #0
 80117f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80117f2:	4b12      	ldr	r3, [pc, #72]	; (801183c <prvHeapInit+0xb4>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2200      	movs	r2, #0
 80117f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	68fa      	ldr	r2, [r7, #12]
 8011802:	1ad2      	subs	r2, r2, r3
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011808:	4b0c      	ldr	r3, [pc, #48]	; (801183c <prvHeapInit+0xb4>)
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	4a0a      	ldr	r2, [pc, #40]	; (8011840 <prvHeapInit+0xb8>)
 8011816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	4a09      	ldr	r2, [pc, #36]	; (8011844 <prvHeapInit+0xbc>)
 801181e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011820:	4b09      	ldr	r3, [pc, #36]	; (8011848 <prvHeapInit+0xc0>)
 8011822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011826:	601a      	str	r2, [r3, #0]
}
 8011828:	bf00      	nop
 801182a:	3714      	adds	r7, #20
 801182c:	46bd      	mov	sp, r7
 801182e:	bc80      	pop	{r7}
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	20001048 	.word	0x20001048
 8011838:	20003758 	.word	0x20003758
 801183c:	20003760 	.word	0x20003760
 8011840:	20003768 	.word	0x20003768
 8011844:	20003764 	.word	0x20003764
 8011848:	2000376c 	.word	0x2000376c

0801184c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011854:	4b27      	ldr	r3, [pc, #156]	; (80118f4 <prvInsertBlockIntoFreeList+0xa8>)
 8011856:	60fb      	str	r3, [r7, #12]
 8011858:	e002      	b.n	8011860 <prvInsertBlockIntoFreeList+0x14>
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	60fb      	str	r3, [r7, #12]
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	687a      	ldr	r2, [r7, #4]
 8011866:	429a      	cmp	r2, r3
 8011868:	d8f7      	bhi.n	801185a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	68ba      	ldr	r2, [r7, #8]
 8011874:	4413      	add	r3, r2
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	429a      	cmp	r2, r3
 801187a:	d108      	bne.n	801188e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	685a      	ldr	r2, [r3, #4]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	441a      	add	r2, r3
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	441a      	add	r2, r3
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d118      	bne.n	80118d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	4b14      	ldr	r3, [pc, #80]	; (80118f8 <prvInsertBlockIntoFreeList+0xac>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d00d      	beq.n	80118ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	685a      	ldr	r2, [r3, #4]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	441a      	add	r2, r3
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	601a      	str	r2, [r3, #0]
 80118c8:	e008      	b.n	80118dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80118ca:	4b0b      	ldr	r3, [pc, #44]	; (80118f8 <prvInsertBlockIntoFreeList+0xac>)
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	601a      	str	r2, [r3, #0]
 80118d2:	e003      	b.n	80118dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d002      	beq.n	80118ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118ea:	bf00      	nop
 80118ec:	3714      	adds	r7, #20
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bc80      	pop	{r7}
 80118f2:	4770      	bx	lr
 80118f4:	20003758 	.word	0x20003758
 80118f8:	20003760 	.word	0x20003760

080118fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011900:	2200      	movs	r2, #0
 8011902:	4914      	ldr	r1, [pc, #80]	; (8011954 <MX_USB_DEVICE_Init+0x58>)
 8011904:	4814      	ldr	r0, [pc, #80]	; (8011958 <MX_USB_DEVICE_Init+0x5c>)
 8011906:	f7fc f943 	bl	800db90 <USBD_Init>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d002      	beq.n	8011916 <MX_USB_DEVICE_Init+0x1a>
  {
    Error_Handler(1);
 8011910:	2001      	movs	r0, #1
 8011912:	f7f1 ff05 	bl	8003720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8011916:	4911      	ldr	r1, [pc, #68]	; (801195c <MX_USB_DEVICE_Init+0x60>)
 8011918:	480f      	ldr	r0, [pc, #60]	; (8011958 <MX_USB_DEVICE_Init+0x5c>)
 801191a:	f7fc f964 	bl	800dbe6 <USBD_RegisterClass>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d002      	beq.n	801192a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler(1);
 8011924:	2001      	movs	r0, #1
 8011926:	f7f1 fefb 	bl	8003720 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801192a:	490d      	ldr	r1, [pc, #52]	; (8011960 <MX_USB_DEVICE_Init+0x64>)
 801192c:	480a      	ldr	r0, [pc, #40]	; (8011958 <MX_USB_DEVICE_Init+0x5c>)
 801192e:	f7fb f911 	bl	800cb54 <USBD_MSC_RegisterStorage>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d002      	beq.n	801193e <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler(1);
 8011938:	2001      	movs	r0, #1
 801193a:	f7f1 fef1 	bl	8003720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801193e:	4806      	ldr	r0, [pc, #24]	; (8011958 <MX_USB_DEVICE_Init+0x5c>)
 8011940:	f7fc f96a 	bl	800dc18 <USBD_Start>
 8011944:	4603      	mov	r3, r0
 8011946:	2b00      	cmp	r3, #0
 8011948:	d002      	beq.n	8011950 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler(1);
 801194a:	2001      	movs	r0, #1
 801194c:	f7f1 fee8 	bl	8003720 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011950:	bf00      	nop
 8011952:	bd80      	pop	{r7, pc}
 8011954:	200000d0 	.word	0x200000d0
 8011958:	200044ac 	.word	0x200044ac
 801195c:	20000028 	.word	0x20000028
 8011960:	20000120 	.word	0x20000120

08011964 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	4603      	mov	r3, r0
 801196c:	6039      	str	r1, [r7, #0]
 801196e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	2212      	movs	r2, #18
 8011974:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011976:	4b03      	ldr	r3, [pc, #12]	; (8011984 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011978:	4618      	mov	r0, r3
 801197a:	370c      	adds	r7, #12
 801197c:	46bd      	mov	sp, r7
 801197e:	bc80      	pop	{r7}
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	200000ec 	.word	0x200000ec

08011988 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	4603      	mov	r3, r0
 8011990:	6039      	str	r1, [r7, #0]
 8011992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	2204      	movs	r2, #4
 8011998:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801199a:	4b03      	ldr	r3, [pc, #12]	; (80119a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801199c:	4618      	mov	r0, r3
 801199e:	370c      	adds	r7, #12
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bc80      	pop	{r7}
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	20000100 	.word	0x20000100

080119ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b082      	sub	sp, #8
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	4603      	mov	r3, r0
 80119b4:	6039      	str	r1, [r7, #0]
 80119b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80119b8:	79fb      	ldrb	r3, [r7, #7]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d105      	bne.n	80119ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80119be:	683a      	ldr	r2, [r7, #0]
 80119c0:	4907      	ldr	r1, [pc, #28]	; (80119e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80119c2:	4808      	ldr	r0, [pc, #32]	; (80119e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80119c4:	f7fd f81f 	bl	800ea06 <USBD_GetString>
 80119c8:	e004      	b.n	80119d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	4904      	ldr	r1, [pc, #16]	; (80119e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80119ce:	4805      	ldr	r0, [pc, #20]	; (80119e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80119d0:	f7fd f819 	bl	800ea06 <USBD_GetString>
  }
  return USBD_StrDesc;
 80119d4:	4b02      	ldr	r3, [pc, #8]	; (80119e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3708      	adds	r7, #8
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	20004748 	.word	0x20004748
 80119e4:	0801685c 	.word	0x0801685c

080119e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	4603      	mov	r3, r0
 80119f0:	6039      	str	r1, [r7, #0]
 80119f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	4904      	ldr	r1, [pc, #16]	; (8011a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80119f8:	4804      	ldr	r0, [pc, #16]	; (8011a0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80119fa:	f7fd f804 	bl	800ea06 <USBD_GetString>
  return USBD_StrDesc;
 80119fe:	4b02      	ldr	r3, [pc, #8]	; (8011a08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	20004748 	.word	0x20004748
 8011a0c:	08016870 	.word	0x08016870

08011a10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	4603      	mov	r3, r0
 8011a18:	6039      	str	r1, [r7, #0]
 8011a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	221a      	movs	r2, #26
 8011a20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011a22:	f000 f843 	bl	8011aac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011a26:	4b02      	ldr	r3, [pc, #8]	; (8011a30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	20000104 	.word	0x20000104

08011a34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	6039      	str	r1, [r7, #0]
 8011a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011a40:	79fb      	ldrb	r3, [r7, #7]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d105      	bne.n	8011a52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	4907      	ldr	r1, [pc, #28]	; (8011a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011a4a:	4808      	ldr	r0, [pc, #32]	; (8011a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011a4c:	f7fc ffdb 	bl	800ea06 <USBD_GetString>
 8011a50:	e004      	b.n	8011a5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011a52:	683a      	ldr	r2, [r7, #0]
 8011a54:	4904      	ldr	r1, [pc, #16]	; (8011a68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011a56:	4805      	ldr	r0, [pc, #20]	; (8011a6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011a58:	f7fc ffd5 	bl	800ea06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a5c:	4b02      	ldr	r3, [pc, #8]	; (8011a68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	20004748 	.word	0x20004748
 8011a6c:	08016884 	.word	0x08016884

08011a70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	4603      	mov	r3, r0
 8011a78:	6039      	str	r1, [r7, #0]
 8011a7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a7c:	79fb      	ldrb	r3, [r7, #7]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d105      	bne.n	8011a8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a82:	683a      	ldr	r2, [r7, #0]
 8011a84:	4907      	ldr	r1, [pc, #28]	; (8011aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a86:	4808      	ldr	r0, [pc, #32]	; (8011aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a88:	f7fc ffbd 	bl	800ea06 <USBD_GetString>
 8011a8c:	e004      	b.n	8011a98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	4904      	ldr	r1, [pc, #16]	; (8011aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a92:	4805      	ldr	r0, [pc, #20]	; (8011aa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a94:	f7fc ffb7 	bl	800ea06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a98:	4b02      	ldr	r3, [pc, #8]	; (8011aa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3708      	adds	r7, #8
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	20004748 	.word	0x20004748
 8011aa8:	08016890 	.word	0x08016890

08011aac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b084      	sub	sp, #16
 8011ab0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011ab2:	4b0f      	ldr	r3, [pc, #60]	; (8011af0 <Get_SerialNum+0x44>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011ab8:	4b0e      	ldr	r3, [pc, #56]	; (8011af4 <Get_SerialNum+0x48>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011abe:	4b0e      	ldr	r3, [pc, #56]	; (8011af8 <Get_SerialNum+0x4c>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011ac4:	68fa      	ldr	r2, [r7, #12]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	4413      	add	r3, r2
 8011aca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d009      	beq.n	8011ae6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011ad2:	2208      	movs	r2, #8
 8011ad4:	4909      	ldr	r1, [pc, #36]	; (8011afc <Get_SerialNum+0x50>)
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	f000 f814 	bl	8011b04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011adc:	2204      	movs	r2, #4
 8011ade:	4908      	ldr	r1, [pc, #32]	; (8011b00 <Get_SerialNum+0x54>)
 8011ae0:	68b8      	ldr	r0, [r7, #8]
 8011ae2:	f000 f80f 	bl	8011b04 <IntToUnicode>
  }
}
 8011ae6:	bf00      	nop
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	1ff800d0 	.word	0x1ff800d0
 8011af4:	1ff800d4 	.word	0x1ff800d4
 8011af8:	1ff800d8 	.word	0x1ff800d8
 8011afc:	20000106 	.word	0x20000106
 8011b00:	20000116 	.word	0x20000116

08011b04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b087      	sub	sp, #28
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	60f8      	str	r0, [r7, #12]
 8011b0c:	60b9      	str	r1, [r7, #8]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011b12:	2300      	movs	r3, #0
 8011b14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011b16:	2300      	movs	r3, #0
 8011b18:	75fb      	strb	r3, [r7, #23]
 8011b1a:	e027      	b.n	8011b6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	0f1b      	lsrs	r3, r3, #28
 8011b20:	2b09      	cmp	r3, #9
 8011b22:	d80b      	bhi.n	8011b3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	0f1b      	lsrs	r3, r3, #28
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	7dfb      	ldrb	r3, [r7, #23]
 8011b2c:	005b      	lsls	r3, r3, #1
 8011b2e:	4619      	mov	r1, r3
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	440b      	add	r3, r1
 8011b34:	3230      	adds	r2, #48	; 0x30
 8011b36:	b2d2      	uxtb	r2, r2
 8011b38:	701a      	strb	r2, [r3, #0]
 8011b3a:	e00a      	b.n	8011b52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	0f1b      	lsrs	r3, r3, #28
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	7dfb      	ldrb	r3, [r7, #23]
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	4619      	mov	r1, r3
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	440b      	add	r3, r1
 8011b4c:	3237      	adds	r2, #55	; 0x37
 8011b4e:	b2d2      	uxtb	r2, r2
 8011b50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	011b      	lsls	r3, r3, #4
 8011b56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011b58:	7dfb      	ldrb	r3, [r7, #23]
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	68ba      	ldr	r2, [r7, #8]
 8011b60:	4413      	add	r3, r2
 8011b62:	2200      	movs	r2, #0
 8011b64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011b66:	7dfb      	ldrb	r3, [r7, #23]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	75fb      	strb	r3, [r7, #23]
 8011b6c:	7dfa      	ldrb	r2, [r7, #23]
 8011b6e:	79fb      	ldrb	r3, [r7, #7]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d3d3      	bcc.n	8011b1c <IntToUnicode+0x18>
  }
}
 8011b74:	bf00      	nop
 8011b76:	371c      	adds	r7, #28
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bc80      	pop	{r7}
 8011b7c:	4770      	bx	lr

08011b7e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8011b7e:	b480      	push	{r7}
 8011b80:	b083      	sub	sp, #12
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	4603      	mov	r3, r0
 8011b86:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8011b88:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	370c      	adds	r7, #12
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bc80      	pop	{r7}
 8011b92:	4770      	bx	lr

08011b94 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	60b9      	str	r1, [r7, #8]
 8011b9e:	607a      	str	r2, [r7, #4]
 8011ba0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011ba8:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bb0:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8011bb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3714      	adds	r7, #20
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bc80      	pop	{r7}
 8011bbc:	4770      	bx	lr

08011bbe <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8011bbe:	b480      	push	{r7}
 8011bc0:	b083      	sub	sp, #12
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011bc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	370c      	adds	r7, #12
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bc80      	pop	{r7}
 8011bd2:	4770      	bx	lr

08011bd4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	4603      	mov	r3, r0
 8011bdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8011bde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	370c      	adds	r7, #12
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bc80      	pop	{r7}
 8011be8:	4770      	bx	lr

08011bea <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8011bea:	b480      	push	{r7}
 8011bec:	b085      	sub	sp, #20
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	607a      	str	r2, [r7, #4]
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	73fb      	strb	r3, [r7, #15]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8011bfe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3714      	adds	r7, #20
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bc80      	pop	{r7}
 8011c08:	4770      	bx	lr

08011c0a <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8011c0a:	b480      	push	{r7}
 8011c0c:	b085      	sub	sp, #20
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	60b9      	str	r1, [r7, #8]
 8011c12:	607a      	str	r2, [r7, #4]
 8011c14:	461a      	mov	r2, r3
 8011c16:	4603      	mov	r3, r0
 8011c18:	73fb      	strb	r3, [r7, #15]
 8011c1a:	4613      	mov	r3, r2
 8011c1c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8011c1e:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bc80      	pop	{r7}
 8011c28:	4770      	bx	lr

08011c2a <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8011c2a:	b480      	push	{r7}
 8011c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8011c2e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bc80      	pop	{r7}
 8011c36:	4770      	bx	lr

08011c38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4a0d      	ldr	r2, [pc, #52]	; (8011c7c <HAL_PCD_MspInit+0x44>)
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d113      	bne.n	8011c72 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011c4a:	4b0d      	ldr	r3, [pc, #52]	; (8011c80 <HAL_PCD_MspInit+0x48>)
 8011c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c4e:	4a0c      	ldr	r2, [pc, #48]	; (8011c80 <HAL_PCD_MspInit+0x48>)
 8011c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011c54:	6253      	str	r3, [r2, #36]	; 0x24
 8011c56:	4b0a      	ldr	r3, [pc, #40]	; (8011c80 <HAL_PCD_MspInit+0x48>)
 8011c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c5e:	60fb      	str	r3, [r7, #12]
 8011c60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011c62:	2200      	movs	r2, #0
 8011c64:	2100      	movs	r1, #0
 8011c66:	2014      	movs	r0, #20
 8011c68:	f7f3 fc8f 	bl	800558a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011c6c:	2014      	movs	r0, #20
 8011c6e:	f7f3 fca8 	bl	80055c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011c72:	bf00      	nop
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	40005c00 	.word	0x40005c00
 8011c80:	40023800 	.word	0x40023800

08011c84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011c98:	4619      	mov	r1, r3
 8011c9a:	4610      	mov	r0, r2
 8011c9c:	f7fc f804 	bl	800dca8 <USBD_LL_SetupStage>
}
 8011ca0:	bf00      	nop
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8011cba:	78fa      	ldrb	r2, [r7, #3]
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	440b      	add	r3, r1
 8011cc8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	78fb      	ldrb	r3, [r7, #3]
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	f7fc f834 	bl	800dd3e <USBD_LL_DataOutStage>
}
 8011cd6:	bf00      	nop
 8011cd8:	3708      	adds	r7, #8
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b082      	sub	sp, #8
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8011cf0:	78fa      	ldrb	r2, [r7, #3]
 8011cf2:	6879      	ldr	r1, [r7, #4]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	4413      	add	r3, r2
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	440b      	add	r3, r1
 8011cfe:	333c      	adds	r3, #60	; 0x3c
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	78fb      	ldrb	r3, [r7, #3]
 8011d04:	4619      	mov	r1, r3
 8011d06:	f7fc f88b 	bl	800de20 <USBD_LL_DataInStage>
}
 8011d0a:	bf00      	nop
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}

08011d12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d12:	b580      	push	{r7, lr}
 8011d14:	b082      	sub	sp, #8
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7fc f996 	bl	800e052 <USBD_LL_SOF>
}
 8011d26:	bf00      	nop
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b084      	sub	sp, #16
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011d36:	2301      	movs	r3, #1
 8011d38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	689b      	ldr	r3, [r3, #8]
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	d002      	beq.n	8011d48 <HAL_PCD_ResetCallback+0x1a>
  {
    Error_Handler(1);
 8011d42:	2001      	movs	r0, #1
 8011d44:	f7f1 fcec 	bl	8003720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011d4e:	7bfa      	ldrb	r2, [r7, #15]
 8011d50:	4611      	mov	r1, r2
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fc f94a 	bl	800dfec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fc f903 	bl	800df6a <USBD_LL_Reset>
}
 8011d64:	bf00      	nop
 8011d66:	3710      	adds	r7, #16
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fc f945 	bl	800e00a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d005      	beq.n	8011d94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d88:	4b04      	ldr	r3, [pc, #16]	; (8011d9c <HAL_PCD_SuspendCallback+0x30>)
 8011d8a:	691b      	ldr	r3, [r3, #16]
 8011d8c:	4a03      	ldr	r2, [pc, #12]	; (8011d9c <HAL_PCD_SuspendCallback+0x30>)
 8011d8e:	f043 0306 	orr.w	r3, r3, #6
 8011d92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011d94:	bf00      	nop
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	e000ed00 	.word	0xe000ed00

08011da0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7fc f93f 	bl	800e032 <USBD_LL_Resume>
}
 8011db4:	bf00      	nop
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8011dc4:	4a23      	ldr	r2, [pc, #140]	; (8011e54 <USBD_LL_Init+0x98>)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	4a21      	ldr	r2, [pc, #132]	; (8011e54 <USBD_LL_Init+0x98>)
 8011dd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8011dd4:	4b1f      	ldr	r3, [pc, #124]	; (8011e54 <USBD_LL_Init+0x98>)
 8011dd6:	4a20      	ldr	r2, [pc, #128]	; (8011e58 <USBD_LL_Init+0x9c>)
 8011dd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011dda:	4b1e      	ldr	r3, [pc, #120]	; (8011e54 <USBD_LL_Init+0x98>)
 8011ddc:	2208      	movs	r2, #8
 8011dde:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011de0:	4b1c      	ldr	r3, [pc, #112]	; (8011e54 <USBD_LL_Init+0x98>)
 8011de2:	2202      	movs	r2, #2
 8011de4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011de6:	4b1b      	ldr	r3, [pc, #108]	; (8011e54 <USBD_LL_Init+0x98>)
 8011de8:	2202      	movs	r2, #2
 8011dea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011dec:	4b19      	ldr	r3, [pc, #100]	; (8011e54 <USBD_LL_Init+0x98>)
 8011dee:	2200      	movs	r2, #0
 8011df0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011df2:	4b18      	ldr	r3, [pc, #96]	; (8011e54 <USBD_LL_Init+0x98>)
 8011df4:	2200      	movs	r2, #0
 8011df6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011df8:	4816      	ldr	r0, [pc, #88]	; (8011e54 <USBD_LL_Init+0x98>)
 8011dfa:	f7f4 f94d 	bl	8006098 <HAL_PCD_Init>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <USBD_LL_Init+0x4e>
  {
    Error_Handler(1);
 8011e04:	2001      	movs	r0, #1
 8011e06:	f7f1 fc8b 	bl	8003720 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011e10:	2318      	movs	r3, #24
 8011e12:	2200      	movs	r2, #0
 8011e14:	2100      	movs	r1, #0
 8011e16:	f7f5 fc01 	bl	800761c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011e20:	2358      	movs	r3, #88	; 0x58
 8011e22:	2200      	movs	r2, #0
 8011e24:	2180      	movs	r1, #128	; 0x80
 8011e26:	f7f5 fbf9 	bl	800761c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011e30:	2398      	movs	r3, #152	; 0x98
 8011e32:	2200      	movs	r2, #0
 8011e34:	2181      	movs	r1, #129	; 0x81
 8011e36:	f7f5 fbf1 	bl	800761c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011e40:	23d8      	movs	r3, #216	; 0xd8
 8011e42:	2200      	movs	r2, #0
 8011e44:	2101      	movs	r1, #1
 8011e46:	f7f5 fbe9 	bl	800761c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8011e4a:	2300      	movs	r3, #0
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3708      	adds	r7, #8
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	20004948 	.word	0x20004948
 8011e58:	40005c00 	.word	0x40005c00

08011e5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e64:	2300      	movs	r3, #0
 8011e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7f4 f9ee 	bl	8006254 <HAL_PCD_Start>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 f964 	bl	801214c <USBD_Get_USB_Status>
 8011e84:	4603      	mov	r3, r0
 8011e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3710      	adds	r7, #16
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011e92:	b580      	push	{r7, lr}
 8011e94:	b084      	sub	sp, #16
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	4608      	mov	r0, r1
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	70fb      	strb	r3, [r7, #3]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	70bb      	strb	r3, [r7, #2]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eac:	2300      	movs	r3, #0
 8011eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011eba:	78bb      	ldrb	r3, [r7, #2]
 8011ebc:	883a      	ldrh	r2, [r7, #0]
 8011ebe:	78f9      	ldrb	r1, [r7, #3]
 8011ec0:	f7f4 fb0a 	bl	80064d8 <HAL_PCD_EP_Open>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ec8:	7bfb      	ldrb	r3, [r7, #15]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f000 f93e 	bl	801214c <USBD_Get_USB_Status>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b084      	sub	sp, #16
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011ef8:	78fa      	ldrb	r2, [r7, #3]
 8011efa:	4611      	mov	r1, r2
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7f4 fb51 	bl	80065a4 <HAL_PCD_EP_Close>
 8011f02:	4603      	mov	r3, r0
 8011f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f06:	7bfb      	ldrb	r3, [r7, #15]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f000 f91f 	bl	801214c <USBD_Get_USB_Status>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3710      	adds	r7, #16
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	460b      	mov	r3, r1
 8011f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011f36:	78fa      	ldrb	r2, [r7, #3]
 8011f38:	4611      	mov	r1, r2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7f4 fcc5 	bl	80068ca <HAL_PCD_EP_Flush>
 8011f40:	4603      	mov	r3, r0
 8011f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 f900 	bl	801214c <USBD_Get_USB_Status>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f5a:	b580      	push	{r7, lr}
 8011f5c:	b084      	sub	sp, #16
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
 8011f62:	460b      	mov	r3, r1
 8011f64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011f74:	78fa      	ldrb	r2, [r7, #3]
 8011f76:	4611      	mov	r1, r2
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7f4 fbf2 	bl	8006762 <HAL_PCD_EP_SetStall>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f000 f8e1 	bl	801214c <USBD_Get_USB_Status>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011fb2:	78fa      	ldrb	r2, [r7, #3]
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7f4 fc33 	bl	8006822 <HAL_PCD_EP_ClrStall>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fc0:	7bfb      	ldrb	r3, [r7, #15]
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f000 f8c2 	bl	801214c <USBD_Get_USB_Status>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3710      	adds	r7, #16
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}

08011fd6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b085      	sub	sp, #20
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	460b      	mov	r3, r1
 8011fe0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011fe8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	da0c      	bge.n	801200c <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011ff2:	78fb      	ldrb	r3, [r7, #3]
 8011ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ff8:	68f9      	ldr	r1, [r7, #12]
 8011ffa:	1c5a      	adds	r2, r3, #1
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	4413      	add	r3, r2
 8012002:	00db      	lsls	r3, r3, #3
 8012004:	440b      	add	r3, r1
 8012006:	3302      	adds	r3, #2
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	e00b      	b.n	8012024 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801200c:	78fb      	ldrb	r3, [r7, #3]
 801200e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012012:	68f9      	ldr	r1, [r7, #12]
 8012014:	4613      	mov	r3, r2
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	4413      	add	r3, r2
 801201a:	00db      	lsls	r3, r3, #3
 801201c:	440b      	add	r3, r1
 801201e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8012022:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012024:	4618      	mov	r0, r3
 8012026:	3714      	adds	r7, #20
 8012028:	46bd      	mov	sp, r7
 801202a:	bc80      	pop	{r7}
 801202c:	4770      	bx	lr

0801202e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b084      	sub	sp, #16
 8012032:	af00      	add	r7, sp, #0
 8012034:	6078      	str	r0, [r7, #4]
 8012036:	460b      	mov	r3, r1
 8012038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801203a:	2300      	movs	r3, #0
 801203c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801203e:	2300      	movs	r3, #0
 8012040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012048:	78fa      	ldrb	r2, [r7, #3]
 801204a:	4611      	mov	r1, r2
 801204c:	4618      	mov	r0, r3
 801204e:	f7f4 fa1e 	bl	800648e <HAL_PCD_SetAddress>
 8012052:	4603      	mov	r3, r0
 8012054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012056:	7bfb      	ldrb	r3, [r7, #15]
 8012058:	4618      	mov	r0, r3
 801205a:	f000 f877 	bl	801214c <USBD_Get_USB_Status>
 801205e:	4603      	mov	r3, r0
 8012060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012062:	7bbb      	ldrb	r3, [r7, #14]
}
 8012064:	4618      	mov	r0, r3
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b086      	sub	sp, #24
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	607a      	str	r2, [r7, #4]
 8012076:	461a      	mov	r2, r3
 8012078:	460b      	mov	r3, r1
 801207a:	72fb      	strb	r3, [r7, #11]
 801207c:	4613      	mov	r3, r2
 801207e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012084:	2300      	movs	r3, #0
 8012086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801208e:	893b      	ldrh	r3, [r7, #8]
 8012090:	7af9      	ldrb	r1, [r7, #11]
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	f7f4 fb22 	bl	80066dc <HAL_PCD_EP_Transmit>
 8012098:	4603      	mov	r3, r0
 801209a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801209c:	7dfb      	ldrb	r3, [r7, #23]
 801209e:	4618      	mov	r0, r3
 80120a0:	f000 f854 	bl	801214c <USBD_Get_USB_Status>
 80120a4:	4603      	mov	r3, r0
 80120a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80120a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3718      	adds	r7, #24
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b086      	sub	sp, #24
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	60f8      	str	r0, [r7, #12]
 80120ba:	607a      	str	r2, [r7, #4]
 80120bc:	461a      	mov	r2, r3
 80120be:	460b      	mov	r3, r1
 80120c0:	72fb      	strb	r3, [r7, #11]
 80120c2:	4613      	mov	r3, r2
 80120c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120c6:	2300      	movs	r3, #0
 80120c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ca:	2300      	movs	r3, #0
 80120cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80120d4:	893b      	ldrh	r3, [r7, #8]
 80120d6:	7af9      	ldrb	r1, [r7, #11]
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	f7f4 faab 	bl	8006634 <HAL_PCD_EP_Receive>
 80120de:	4603      	mov	r3, r0
 80120e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120e2:	7dfb      	ldrb	r3, [r7, #23]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f000 f831 	bl	801214c <USBD_Get_USB_Status>
 80120ea:	4603      	mov	r3, r0
 80120ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80120ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	460b      	mov	r3, r1
 8012102:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801210a:	78fa      	ldrb	r2, [r7, #3]
 801210c:	4611      	mov	r1, r2
 801210e:	4618      	mov	r0, r3
 8012110:	f7f4 facd 	bl	80066ae <HAL_PCD_EP_GetRxCount>
 8012114:	4603      	mov	r3, r0
}
 8012116:	4618      	mov	r0, r3
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012128:	4b02      	ldr	r3, [pc, #8]	; (8012134 <USBD_static_malloc+0x14>)
}
 801212a:	4618      	mov	r0, r3
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	bc80      	pop	{r7}
 8012132:	4770      	bx	lr
 8012134:	20003770 	.word	0x20003770

08012138 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]

}
 8012140:	bf00      	nop
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	bc80      	pop	{r7}
 8012148:	4770      	bx	lr
	...

0801214c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	4603      	mov	r3, r0
 8012154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012156:	2300      	movs	r3, #0
 8012158:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801215a:	79fb      	ldrb	r3, [r7, #7]
 801215c:	2b03      	cmp	r3, #3
 801215e:	d817      	bhi.n	8012190 <USBD_Get_USB_Status+0x44>
 8012160:	a201      	add	r2, pc, #4	; (adr r2, 8012168 <USBD_Get_USB_Status+0x1c>)
 8012162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012166:	bf00      	nop
 8012168:	08012179 	.word	0x08012179
 801216c:	0801217f 	.word	0x0801217f
 8012170:	08012185 	.word	0x08012185
 8012174:	0801218b 	.word	0x0801218b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012178:	2300      	movs	r3, #0
 801217a:	73fb      	strb	r3, [r7, #15]
    break;
 801217c:	e00b      	b.n	8012196 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801217e:	2302      	movs	r3, #2
 8012180:	73fb      	strb	r3, [r7, #15]
    break;
 8012182:	e008      	b.n	8012196 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012184:	2301      	movs	r3, #1
 8012186:	73fb      	strb	r3, [r7, #15]
    break;
 8012188:	e005      	b.n	8012196 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801218a:	2302      	movs	r3, #2
 801218c:	73fb      	strb	r3, [r7, #15]
    break;
 801218e:	e002      	b.n	8012196 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012190:	2302      	movs	r3, #2
 8012192:	73fb      	strb	r3, [r7, #15]
    break;
 8012194:	bf00      	nop
  }
  return usb_status;
 8012196:	7bfb      	ldrb	r3, [r7, #15]
}
 8012198:	4618      	mov	r0, r3
 801219a:	3714      	adds	r7, #20
 801219c:	46bd      	mov	sp, r7
 801219e:	bc80      	pop	{r7}
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop

080121a4 <__libc_init_array>:
 80121a4:	b570      	push	{r4, r5, r6, lr}
 80121a6:	2500      	movs	r5, #0
 80121a8:	4e0c      	ldr	r6, [pc, #48]	; (80121dc <__libc_init_array+0x38>)
 80121aa:	4c0d      	ldr	r4, [pc, #52]	; (80121e0 <__libc_init_array+0x3c>)
 80121ac:	1ba4      	subs	r4, r4, r6
 80121ae:	10a4      	asrs	r4, r4, #2
 80121b0:	42a5      	cmp	r5, r4
 80121b2:	d109      	bne.n	80121c8 <__libc_init_array+0x24>
 80121b4:	f004 fa70 	bl	8016698 <_init>
 80121b8:	2500      	movs	r5, #0
 80121ba:	4e0a      	ldr	r6, [pc, #40]	; (80121e4 <__libc_init_array+0x40>)
 80121bc:	4c0a      	ldr	r4, [pc, #40]	; (80121e8 <__libc_init_array+0x44>)
 80121be:	1ba4      	subs	r4, r4, r6
 80121c0:	10a4      	asrs	r4, r4, #2
 80121c2:	42a5      	cmp	r5, r4
 80121c4:	d105      	bne.n	80121d2 <__libc_init_array+0x2e>
 80121c6:	bd70      	pop	{r4, r5, r6, pc}
 80121c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80121cc:	4798      	blx	r3
 80121ce:	3501      	adds	r5, #1
 80121d0:	e7ee      	b.n	80121b0 <__libc_init_array+0xc>
 80121d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80121d6:	4798      	blx	r3
 80121d8:	3501      	adds	r5, #1
 80121da:	e7f2      	b.n	80121c2 <__libc_init_array+0x1e>
 80121dc:	0801a7f0 	.word	0x0801a7f0
 80121e0:	0801a7f0 	.word	0x0801a7f0
 80121e4:	0801a7f0 	.word	0x0801a7f0
 80121e8:	0801a7f4 	.word	0x0801a7f4

080121ec <memcpy>:
 80121ec:	b510      	push	{r4, lr}
 80121ee:	1e43      	subs	r3, r0, #1
 80121f0:	440a      	add	r2, r1
 80121f2:	4291      	cmp	r1, r2
 80121f4:	d100      	bne.n	80121f8 <memcpy+0xc>
 80121f6:	bd10      	pop	{r4, pc}
 80121f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012200:	e7f7      	b.n	80121f2 <memcpy+0x6>

08012202 <memset>:
 8012202:	4603      	mov	r3, r0
 8012204:	4402      	add	r2, r0
 8012206:	4293      	cmp	r3, r2
 8012208:	d100      	bne.n	801220c <memset+0xa>
 801220a:	4770      	bx	lr
 801220c:	f803 1b01 	strb.w	r1, [r3], #1
 8012210:	e7f9      	b.n	8012206 <memset+0x4>

08012212 <__cvt>:
 8012212:	2b00      	cmp	r3, #0
 8012214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012218:	461e      	mov	r6, r3
 801221a:	bfbb      	ittet	lt
 801221c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8012220:	461e      	movlt	r6, r3
 8012222:	2300      	movge	r3, #0
 8012224:	232d      	movlt	r3, #45	; 0x2d
 8012226:	b088      	sub	sp, #32
 8012228:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801222a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 801222e:	f027 0720 	bic.w	r7, r7, #32
 8012232:	2f46      	cmp	r7, #70	; 0x46
 8012234:	4614      	mov	r4, r2
 8012236:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012238:	700b      	strb	r3, [r1, #0]
 801223a:	d004      	beq.n	8012246 <__cvt+0x34>
 801223c:	2f45      	cmp	r7, #69	; 0x45
 801223e:	d100      	bne.n	8012242 <__cvt+0x30>
 8012240:	3501      	adds	r5, #1
 8012242:	2302      	movs	r3, #2
 8012244:	e000      	b.n	8012248 <__cvt+0x36>
 8012246:	2303      	movs	r3, #3
 8012248:	aa07      	add	r2, sp, #28
 801224a:	9204      	str	r2, [sp, #16]
 801224c:	aa06      	add	r2, sp, #24
 801224e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8012252:	e9cd 3500 	strd	r3, r5, [sp]
 8012256:	4622      	mov	r2, r4
 8012258:	4633      	mov	r3, r6
 801225a:	f001 feb9 	bl	8013fd0 <_dtoa_r>
 801225e:	2f47      	cmp	r7, #71	; 0x47
 8012260:	4680      	mov	r8, r0
 8012262:	d102      	bne.n	801226a <__cvt+0x58>
 8012264:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012266:	07db      	lsls	r3, r3, #31
 8012268:	d526      	bpl.n	80122b8 <__cvt+0xa6>
 801226a:	2f46      	cmp	r7, #70	; 0x46
 801226c:	eb08 0905 	add.w	r9, r8, r5
 8012270:	d111      	bne.n	8012296 <__cvt+0x84>
 8012272:	f898 3000 	ldrb.w	r3, [r8]
 8012276:	2b30      	cmp	r3, #48	; 0x30
 8012278:	d10a      	bne.n	8012290 <__cvt+0x7e>
 801227a:	2200      	movs	r2, #0
 801227c:	2300      	movs	r3, #0
 801227e:	4620      	mov	r0, r4
 8012280:	4631      	mov	r1, r6
 8012282:	f7ee fba9 	bl	80009d8 <__aeabi_dcmpeq>
 8012286:	b918      	cbnz	r0, 8012290 <__cvt+0x7e>
 8012288:	f1c5 0501 	rsb	r5, r5, #1
 801228c:	f8ca 5000 	str.w	r5, [sl]
 8012290:	f8da 3000 	ldr.w	r3, [sl]
 8012294:	4499      	add	r9, r3
 8012296:	2200      	movs	r2, #0
 8012298:	2300      	movs	r3, #0
 801229a:	4620      	mov	r0, r4
 801229c:	4631      	mov	r1, r6
 801229e:	f7ee fb9b 	bl	80009d8 <__aeabi_dcmpeq>
 80122a2:	b938      	cbnz	r0, 80122b4 <__cvt+0xa2>
 80122a4:	2230      	movs	r2, #48	; 0x30
 80122a6:	9b07      	ldr	r3, [sp, #28]
 80122a8:	454b      	cmp	r3, r9
 80122aa:	d205      	bcs.n	80122b8 <__cvt+0xa6>
 80122ac:	1c59      	adds	r1, r3, #1
 80122ae:	9107      	str	r1, [sp, #28]
 80122b0:	701a      	strb	r2, [r3, #0]
 80122b2:	e7f8      	b.n	80122a6 <__cvt+0x94>
 80122b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80122b8:	4640      	mov	r0, r8
 80122ba:	9b07      	ldr	r3, [sp, #28]
 80122bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80122be:	eba3 0308 	sub.w	r3, r3, r8
 80122c2:	6013      	str	r3, [r2, #0]
 80122c4:	b008      	add	sp, #32
 80122c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080122ca <__exponent>:
 80122ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122cc:	2900      	cmp	r1, #0
 80122ce:	bfb4      	ite	lt
 80122d0:	232d      	movlt	r3, #45	; 0x2d
 80122d2:	232b      	movge	r3, #43	; 0x2b
 80122d4:	4604      	mov	r4, r0
 80122d6:	bfb8      	it	lt
 80122d8:	4249      	neglt	r1, r1
 80122da:	2909      	cmp	r1, #9
 80122dc:	f804 2b02 	strb.w	r2, [r4], #2
 80122e0:	7043      	strb	r3, [r0, #1]
 80122e2:	dd21      	ble.n	8012328 <__exponent+0x5e>
 80122e4:	f10d 0307 	add.w	r3, sp, #7
 80122e8:	461f      	mov	r7, r3
 80122ea:	260a      	movs	r6, #10
 80122ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80122f0:	fb06 1115 	mls	r1, r6, r5, r1
 80122f4:	2d09      	cmp	r5, #9
 80122f6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80122fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80122fe:	f103 32ff 	add.w	r2, r3, #4294967295
 8012302:	4629      	mov	r1, r5
 8012304:	dc09      	bgt.n	801231a <__exponent+0x50>
 8012306:	3130      	adds	r1, #48	; 0x30
 8012308:	3b02      	subs	r3, #2
 801230a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801230e:	42bb      	cmp	r3, r7
 8012310:	4622      	mov	r2, r4
 8012312:	d304      	bcc.n	801231e <__exponent+0x54>
 8012314:	1a10      	subs	r0, r2, r0
 8012316:	b003      	add	sp, #12
 8012318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801231a:	4613      	mov	r3, r2
 801231c:	e7e6      	b.n	80122ec <__exponent+0x22>
 801231e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012322:	f804 2b01 	strb.w	r2, [r4], #1
 8012326:	e7f2      	b.n	801230e <__exponent+0x44>
 8012328:	2330      	movs	r3, #48	; 0x30
 801232a:	4419      	add	r1, r3
 801232c:	7083      	strb	r3, [r0, #2]
 801232e:	1d02      	adds	r2, r0, #4
 8012330:	70c1      	strb	r1, [r0, #3]
 8012332:	e7ef      	b.n	8012314 <__exponent+0x4a>

08012334 <_printf_float>:
 8012334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012338:	b091      	sub	sp, #68	; 0x44
 801233a:	460c      	mov	r4, r1
 801233c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801233e:	4693      	mov	fp, r2
 8012340:	461e      	mov	r6, r3
 8012342:	4605      	mov	r5, r0
 8012344:	f003 f8a0 	bl	8015488 <_localeconv_r>
 8012348:	6803      	ldr	r3, [r0, #0]
 801234a:	4618      	mov	r0, r3
 801234c:	9309      	str	r3, [sp, #36]	; 0x24
 801234e:	f7ed ff17 	bl	8000180 <strlen>
 8012352:	2300      	movs	r3, #0
 8012354:	930e      	str	r3, [sp, #56]	; 0x38
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	900a      	str	r0, [sp, #40]	; 0x28
 801235a:	3307      	adds	r3, #7
 801235c:	f023 0307 	bic.w	r3, r3, #7
 8012360:	f103 0208 	add.w	r2, r3, #8
 8012364:	f894 8018 	ldrb.w	r8, [r4, #24]
 8012368:	f8d4 a000 	ldr.w	sl, [r4]
 801236c:	603a      	str	r2, [r7, #0]
 801236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012376:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 801237a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801237e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012380:	f04f 32ff 	mov.w	r2, #4294967295
 8012384:	4ba6      	ldr	r3, [pc, #664]	; (8012620 <_printf_float+0x2ec>)
 8012386:	4638      	mov	r0, r7
 8012388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801238a:	f7ee fb57 	bl	8000a3c <__aeabi_dcmpun>
 801238e:	bb68      	cbnz	r0, 80123ec <_printf_float+0xb8>
 8012390:	f04f 32ff 	mov.w	r2, #4294967295
 8012394:	4ba2      	ldr	r3, [pc, #648]	; (8012620 <_printf_float+0x2ec>)
 8012396:	4638      	mov	r0, r7
 8012398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801239a:	f7ee fb31 	bl	8000a00 <__aeabi_dcmple>
 801239e:	bb28      	cbnz	r0, 80123ec <_printf_float+0xb8>
 80123a0:	2200      	movs	r2, #0
 80123a2:	2300      	movs	r3, #0
 80123a4:	4638      	mov	r0, r7
 80123a6:	4649      	mov	r1, r9
 80123a8:	f7ee fb20 	bl	80009ec <__aeabi_dcmplt>
 80123ac:	b110      	cbz	r0, 80123b4 <_printf_float+0x80>
 80123ae:	232d      	movs	r3, #45	; 0x2d
 80123b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123b4:	4f9b      	ldr	r7, [pc, #620]	; (8012624 <_printf_float+0x2f0>)
 80123b6:	4b9c      	ldr	r3, [pc, #624]	; (8012628 <_printf_float+0x2f4>)
 80123b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80123bc:	bf98      	it	ls
 80123be:	461f      	movls	r7, r3
 80123c0:	2303      	movs	r3, #3
 80123c2:	f04f 0900 	mov.w	r9, #0
 80123c6:	6123      	str	r3, [r4, #16]
 80123c8:	f02a 0304 	bic.w	r3, sl, #4
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	9600      	str	r6, [sp, #0]
 80123d0:	465b      	mov	r3, fp
 80123d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80123d4:	4621      	mov	r1, r4
 80123d6:	4628      	mov	r0, r5
 80123d8:	f000 f9e2 	bl	80127a0 <_printf_common>
 80123dc:	3001      	adds	r0, #1
 80123de:	f040 8090 	bne.w	8012502 <_printf_float+0x1ce>
 80123e2:	f04f 30ff 	mov.w	r0, #4294967295
 80123e6:	b011      	add	sp, #68	; 0x44
 80123e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ec:	463a      	mov	r2, r7
 80123ee:	464b      	mov	r3, r9
 80123f0:	4638      	mov	r0, r7
 80123f2:	4649      	mov	r1, r9
 80123f4:	f7ee fb22 	bl	8000a3c <__aeabi_dcmpun>
 80123f8:	b110      	cbz	r0, 8012400 <_printf_float+0xcc>
 80123fa:	4f8c      	ldr	r7, [pc, #560]	; (801262c <_printf_float+0x2f8>)
 80123fc:	4b8c      	ldr	r3, [pc, #560]	; (8012630 <_printf_float+0x2fc>)
 80123fe:	e7db      	b.n	80123b8 <_printf_float+0x84>
 8012400:	6863      	ldr	r3, [r4, #4]
 8012402:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8012406:	1c59      	adds	r1, r3, #1
 8012408:	a80d      	add	r0, sp, #52	; 0x34
 801240a:	a90e      	add	r1, sp, #56	; 0x38
 801240c:	d140      	bne.n	8012490 <_printf_float+0x15c>
 801240e:	2306      	movs	r3, #6
 8012410:	6063      	str	r3, [r4, #4]
 8012412:	f04f 0c00 	mov.w	ip, #0
 8012416:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 801241a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801241e:	6863      	ldr	r3, [r4, #4]
 8012420:	6022      	str	r2, [r4, #0]
 8012422:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8012426:	9300      	str	r3, [sp, #0]
 8012428:	463a      	mov	r2, r7
 801242a:	464b      	mov	r3, r9
 801242c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8012430:	4628      	mov	r0, r5
 8012432:	f7ff feee 	bl	8012212 <__cvt>
 8012436:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 801243a:	2b47      	cmp	r3, #71	; 0x47
 801243c:	4607      	mov	r7, r0
 801243e:	d109      	bne.n	8012454 <_printf_float+0x120>
 8012440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012442:	1cd8      	adds	r0, r3, #3
 8012444:	db02      	blt.n	801244c <_printf_float+0x118>
 8012446:	6862      	ldr	r2, [r4, #4]
 8012448:	4293      	cmp	r3, r2
 801244a:	dd47      	ble.n	80124dc <_printf_float+0x1a8>
 801244c:	f1a8 0802 	sub.w	r8, r8, #2
 8012450:	fa5f f888 	uxtb.w	r8, r8
 8012454:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8012458:	990d      	ldr	r1, [sp, #52]	; 0x34
 801245a:	d824      	bhi.n	80124a6 <_printf_float+0x172>
 801245c:	3901      	subs	r1, #1
 801245e:	4642      	mov	r2, r8
 8012460:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012464:	910d      	str	r1, [sp, #52]	; 0x34
 8012466:	f7ff ff30 	bl	80122ca <__exponent>
 801246a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801246c:	4681      	mov	r9, r0
 801246e:	1813      	adds	r3, r2, r0
 8012470:	2a01      	cmp	r2, #1
 8012472:	6123      	str	r3, [r4, #16]
 8012474:	dc02      	bgt.n	801247c <_printf_float+0x148>
 8012476:	6822      	ldr	r2, [r4, #0]
 8012478:	07d1      	lsls	r1, r2, #31
 801247a:	d501      	bpl.n	8012480 <_printf_float+0x14c>
 801247c:	3301      	adds	r3, #1
 801247e:	6123      	str	r3, [r4, #16]
 8012480:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012484:	2b00      	cmp	r3, #0
 8012486:	d0a2      	beq.n	80123ce <_printf_float+0x9a>
 8012488:	232d      	movs	r3, #45	; 0x2d
 801248a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801248e:	e79e      	b.n	80123ce <_printf_float+0x9a>
 8012490:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8012494:	f000 816e 	beq.w	8012774 <_printf_float+0x440>
 8012498:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801249c:	d1b9      	bne.n	8012412 <_printf_float+0xde>
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1b7      	bne.n	8012412 <_printf_float+0xde>
 80124a2:	2301      	movs	r3, #1
 80124a4:	e7b4      	b.n	8012410 <_printf_float+0xdc>
 80124a6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80124aa:	d119      	bne.n	80124e0 <_printf_float+0x1ac>
 80124ac:	2900      	cmp	r1, #0
 80124ae:	6863      	ldr	r3, [r4, #4]
 80124b0:	dd0c      	ble.n	80124cc <_printf_float+0x198>
 80124b2:	6121      	str	r1, [r4, #16]
 80124b4:	b913      	cbnz	r3, 80124bc <_printf_float+0x188>
 80124b6:	6822      	ldr	r2, [r4, #0]
 80124b8:	07d2      	lsls	r2, r2, #31
 80124ba:	d502      	bpl.n	80124c2 <_printf_float+0x18e>
 80124bc:	3301      	adds	r3, #1
 80124be:	440b      	add	r3, r1
 80124c0:	6123      	str	r3, [r4, #16]
 80124c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124c4:	f04f 0900 	mov.w	r9, #0
 80124c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80124ca:	e7d9      	b.n	8012480 <_printf_float+0x14c>
 80124cc:	b913      	cbnz	r3, 80124d4 <_printf_float+0x1a0>
 80124ce:	6822      	ldr	r2, [r4, #0]
 80124d0:	07d0      	lsls	r0, r2, #31
 80124d2:	d501      	bpl.n	80124d8 <_printf_float+0x1a4>
 80124d4:	3302      	adds	r3, #2
 80124d6:	e7f3      	b.n	80124c0 <_printf_float+0x18c>
 80124d8:	2301      	movs	r3, #1
 80124da:	e7f1      	b.n	80124c0 <_printf_float+0x18c>
 80124dc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80124e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80124e4:	4293      	cmp	r3, r2
 80124e6:	db05      	blt.n	80124f4 <_printf_float+0x1c0>
 80124e8:	6822      	ldr	r2, [r4, #0]
 80124ea:	6123      	str	r3, [r4, #16]
 80124ec:	07d1      	lsls	r1, r2, #31
 80124ee:	d5e8      	bpl.n	80124c2 <_printf_float+0x18e>
 80124f0:	3301      	adds	r3, #1
 80124f2:	e7e5      	b.n	80124c0 <_printf_float+0x18c>
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	bfcc      	ite	gt
 80124f8:	2301      	movgt	r3, #1
 80124fa:	f1c3 0302 	rsble	r3, r3, #2
 80124fe:	4413      	add	r3, r2
 8012500:	e7de      	b.n	80124c0 <_printf_float+0x18c>
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	055a      	lsls	r2, r3, #21
 8012506:	d407      	bmi.n	8012518 <_printf_float+0x1e4>
 8012508:	6923      	ldr	r3, [r4, #16]
 801250a:	463a      	mov	r2, r7
 801250c:	4659      	mov	r1, fp
 801250e:	4628      	mov	r0, r5
 8012510:	47b0      	blx	r6
 8012512:	3001      	adds	r0, #1
 8012514:	d129      	bne.n	801256a <_printf_float+0x236>
 8012516:	e764      	b.n	80123e2 <_printf_float+0xae>
 8012518:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801251c:	f240 80d7 	bls.w	80126ce <_printf_float+0x39a>
 8012520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012524:	2200      	movs	r2, #0
 8012526:	2300      	movs	r3, #0
 8012528:	f7ee fa56 	bl	80009d8 <__aeabi_dcmpeq>
 801252c:	b388      	cbz	r0, 8012592 <_printf_float+0x25e>
 801252e:	2301      	movs	r3, #1
 8012530:	4a40      	ldr	r2, [pc, #256]	; (8012634 <_printf_float+0x300>)
 8012532:	4659      	mov	r1, fp
 8012534:	4628      	mov	r0, r5
 8012536:	47b0      	blx	r6
 8012538:	3001      	adds	r0, #1
 801253a:	f43f af52 	beq.w	80123e2 <_printf_float+0xae>
 801253e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012542:	429a      	cmp	r2, r3
 8012544:	db02      	blt.n	801254c <_printf_float+0x218>
 8012546:	6823      	ldr	r3, [r4, #0]
 8012548:	07d8      	lsls	r0, r3, #31
 801254a:	d50e      	bpl.n	801256a <_printf_float+0x236>
 801254c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012550:	4659      	mov	r1, fp
 8012552:	4628      	mov	r0, r5
 8012554:	47b0      	blx	r6
 8012556:	3001      	adds	r0, #1
 8012558:	f43f af43 	beq.w	80123e2 <_printf_float+0xae>
 801255c:	2700      	movs	r7, #0
 801255e:	f104 081a 	add.w	r8, r4, #26
 8012562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012564:	3b01      	subs	r3, #1
 8012566:	42bb      	cmp	r3, r7
 8012568:	dc09      	bgt.n	801257e <_printf_float+0x24a>
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	079f      	lsls	r7, r3, #30
 801256e:	f100 80fd 	bmi.w	801276c <_printf_float+0x438>
 8012572:	68e0      	ldr	r0, [r4, #12]
 8012574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012576:	4298      	cmp	r0, r3
 8012578:	bfb8      	it	lt
 801257a:	4618      	movlt	r0, r3
 801257c:	e733      	b.n	80123e6 <_printf_float+0xb2>
 801257e:	2301      	movs	r3, #1
 8012580:	4642      	mov	r2, r8
 8012582:	4659      	mov	r1, fp
 8012584:	4628      	mov	r0, r5
 8012586:	47b0      	blx	r6
 8012588:	3001      	adds	r0, #1
 801258a:	f43f af2a 	beq.w	80123e2 <_printf_float+0xae>
 801258e:	3701      	adds	r7, #1
 8012590:	e7e7      	b.n	8012562 <_printf_float+0x22e>
 8012592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012594:	2b00      	cmp	r3, #0
 8012596:	dc2b      	bgt.n	80125f0 <_printf_float+0x2bc>
 8012598:	2301      	movs	r3, #1
 801259a:	4a26      	ldr	r2, [pc, #152]	; (8012634 <_printf_float+0x300>)
 801259c:	4659      	mov	r1, fp
 801259e:	4628      	mov	r0, r5
 80125a0:	47b0      	blx	r6
 80125a2:	3001      	adds	r0, #1
 80125a4:	f43f af1d 	beq.w	80123e2 <_printf_float+0xae>
 80125a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125aa:	b923      	cbnz	r3, 80125b6 <_printf_float+0x282>
 80125ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125ae:	b913      	cbnz	r3, 80125b6 <_printf_float+0x282>
 80125b0:	6823      	ldr	r3, [r4, #0]
 80125b2:	07d9      	lsls	r1, r3, #31
 80125b4:	d5d9      	bpl.n	801256a <_printf_float+0x236>
 80125b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125ba:	4659      	mov	r1, fp
 80125bc:	4628      	mov	r0, r5
 80125be:	47b0      	blx	r6
 80125c0:	3001      	adds	r0, #1
 80125c2:	f43f af0e 	beq.w	80123e2 <_printf_float+0xae>
 80125c6:	f04f 0800 	mov.w	r8, #0
 80125ca:	f104 091a 	add.w	r9, r4, #26
 80125ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125d0:	425b      	negs	r3, r3
 80125d2:	4543      	cmp	r3, r8
 80125d4:	dc01      	bgt.n	80125da <_printf_float+0x2a6>
 80125d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125d8:	e797      	b.n	801250a <_printf_float+0x1d6>
 80125da:	2301      	movs	r3, #1
 80125dc:	464a      	mov	r2, r9
 80125de:	4659      	mov	r1, fp
 80125e0:	4628      	mov	r0, r5
 80125e2:	47b0      	blx	r6
 80125e4:	3001      	adds	r0, #1
 80125e6:	f43f aefc 	beq.w	80123e2 <_printf_float+0xae>
 80125ea:	f108 0801 	add.w	r8, r8, #1
 80125ee:	e7ee      	b.n	80125ce <_printf_float+0x29a>
 80125f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80125f4:	429a      	cmp	r2, r3
 80125f6:	bfa8      	it	ge
 80125f8:	461a      	movge	r2, r3
 80125fa:	2a00      	cmp	r2, #0
 80125fc:	4690      	mov	r8, r2
 80125fe:	dd07      	ble.n	8012610 <_printf_float+0x2dc>
 8012600:	4613      	mov	r3, r2
 8012602:	4659      	mov	r1, fp
 8012604:	463a      	mov	r2, r7
 8012606:	4628      	mov	r0, r5
 8012608:	47b0      	blx	r6
 801260a:	3001      	adds	r0, #1
 801260c:	f43f aee9 	beq.w	80123e2 <_printf_float+0xae>
 8012610:	f104 031a 	add.w	r3, r4, #26
 8012614:	f04f 0a00 	mov.w	sl, #0
 8012618:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801261c:	930b      	str	r3, [sp, #44]	; 0x2c
 801261e:	e015      	b.n	801264c <_printf_float+0x318>
 8012620:	7fefffff 	.word	0x7fefffff
 8012624:	0801a4cc 	.word	0x0801a4cc
 8012628:	0801a4c8 	.word	0x0801a4c8
 801262c:	0801a4d4 	.word	0x0801a4d4
 8012630:	0801a4d0 	.word	0x0801a4d0
 8012634:	0801a4d8 	.word	0x0801a4d8
 8012638:	2301      	movs	r3, #1
 801263a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801263c:	4659      	mov	r1, fp
 801263e:	4628      	mov	r0, r5
 8012640:	47b0      	blx	r6
 8012642:	3001      	adds	r0, #1
 8012644:	f43f aecd 	beq.w	80123e2 <_printf_float+0xae>
 8012648:	f10a 0a01 	add.w	sl, sl, #1
 801264c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012650:	eba9 0308 	sub.w	r3, r9, r8
 8012654:	4553      	cmp	r3, sl
 8012656:	dcef      	bgt.n	8012638 <_printf_float+0x304>
 8012658:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801265c:	429a      	cmp	r2, r3
 801265e:	444f      	add	r7, r9
 8012660:	db14      	blt.n	801268c <_printf_float+0x358>
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	07da      	lsls	r2, r3, #31
 8012666:	d411      	bmi.n	801268c <_printf_float+0x358>
 8012668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801266a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801266c:	eba3 0209 	sub.w	r2, r3, r9
 8012670:	eba3 0901 	sub.w	r9, r3, r1
 8012674:	4591      	cmp	r9, r2
 8012676:	bfa8      	it	ge
 8012678:	4691      	movge	r9, r2
 801267a:	f1b9 0f00 	cmp.w	r9, #0
 801267e:	dc0d      	bgt.n	801269c <_printf_float+0x368>
 8012680:	2700      	movs	r7, #0
 8012682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012686:	f104 081a 	add.w	r8, r4, #26
 801268a:	e018      	b.n	80126be <_printf_float+0x38a>
 801268c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012690:	4659      	mov	r1, fp
 8012692:	4628      	mov	r0, r5
 8012694:	47b0      	blx	r6
 8012696:	3001      	adds	r0, #1
 8012698:	d1e6      	bne.n	8012668 <_printf_float+0x334>
 801269a:	e6a2      	b.n	80123e2 <_printf_float+0xae>
 801269c:	464b      	mov	r3, r9
 801269e:	463a      	mov	r2, r7
 80126a0:	4659      	mov	r1, fp
 80126a2:	4628      	mov	r0, r5
 80126a4:	47b0      	blx	r6
 80126a6:	3001      	adds	r0, #1
 80126a8:	d1ea      	bne.n	8012680 <_printf_float+0x34c>
 80126aa:	e69a      	b.n	80123e2 <_printf_float+0xae>
 80126ac:	2301      	movs	r3, #1
 80126ae:	4642      	mov	r2, r8
 80126b0:	4659      	mov	r1, fp
 80126b2:	4628      	mov	r0, r5
 80126b4:	47b0      	blx	r6
 80126b6:	3001      	adds	r0, #1
 80126b8:	f43f ae93 	beq.w	80123e2 <_printf_float+0xae>
 80126bc:	3701      	adds	r7, #1
 80126be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80126c2:	1a9b      	subs	r3, r3, r2
 80126c4:	eba3 0309 	sub.w	r3, r3, r9
 80126c8:	42bb      	cmp	r3, r7
 80126ca:	dcef      	bgt.n	80126ac <_printf_float+0x378>
 80126cc:	e74d      	b.n	801256a <_printf_float+0x236>
 80126ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80126d0:	2a01      	cmp	r2, #1
 80126d2:	dc01      	bgt.n	80126d8 <_printf_float+0x3a4>
 80126d4:	07db      	lsls	r3, r3, #31
 80126d6:	d538      	bpl.n	801274a <_printf_float+0x416>
 80126d8:	2301      	movs	r3, #1
 80126da:	463a      	mov	r2, r7
 80126dc:	4659      	mov	r1, fp
 80126de:	4628      	mov	r0, r5
 80126e0:	47b0      	blx	r6
 80126e2:	3001      	adds	r0, #1
 80126e4:	f43f ae7d 	beq.w	80123e2 <_printf_float+0xae>
 80126e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126ec:	4659      	mov	r1, fp
 80126ee:	4628      	mov	r0, r5
 80126f0:	47b0      	blx	r6
 80126f2:	3001      	adds	r0, #1
 80126f4:	f107 0701 	add.w	r7, r7, #1
 80126f8:	f43f ae73 	beq.w	80123e2 <_printf_float+0xae>
 80126fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012702:	2200      	movs	r2, #0
 8012704:	f103 38ff 	add.w	r8, r3, #4294967295
 8012708:	2300      	movs	r3, #0
 801270a:	f7ee f965 	bl	80009d8 <__aeabi_dcmpeq>
 801270e:	b9c0      	cbnz	r0, 8012742 <_printf_float+0x40e>
 8012710:	4643      	mov	r3, r8
 8012712:	463a      	mov	r2, r7
 8012714:	4659      	mov	r1, fp
 8012716:	4628      	mov	r0, r5
 8012718:	47b0      	blx	r6
 801271a:	3001      	adds	r0, #1
 801271c:	d10d      	bne.n	801273a <_printf_float+0x406>
 801271e:	e660      	b.n	80123e2 <_printf_float+0xae>
 8012720:	2301      	movs	r3, #1
 8012722:	4642      	mov	r2, r8
 8012724:	4659      	mov	r1, fp
 8012726:	4628      	mov	r0, r5
 8012728:	47b0      	blx	r6
 801272a:	3001      	adds	r0, #1
 801272c:	f43f ae59 	beq.w	80123e2 <_printf_float+0xae>
 8012730:	3701      	adds	r7, #1
 8012732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012734:	3b01      	subs	r3, #1
 8012736:	42bb      	cmp	r3, r7
 8012738:	dcf2      	bgt.n	8012720 <_printf_float+0x3ec>
 801273a:	464b      	mov	r3, r9
 801273c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012740:	e6e4      	b.n	801250c <_printf_float+0x1d8>
 8012742:	2700      	movs	r7, #0
 8012744:	f104 081a 	add.w	r8, r4, #26
 8012748:	e7f3      	b.n	8012732 <_printf_float+0x3fe>
 801274a:	2301      	movs	r3, #1
 801274c:	e7e1      	b.n	8012712 <_printf_float+0x3de>
 801274e:	2301      	movs	r3, #1
 8012750:	4642      	mov	r2, r8
 8012752:	4659      	mov	r1, fp
 8012754:	4628      	mov	r0, r5
 8012756:	47b0      	blx	r6
 8012758:	3001      	adds	r0, #1
 801275a:	f43f ae42 	beq.w	80123e2 <_printf_float+0xae>
 801275e:	3701      	adds	r7, #1
 8012760:	68e3      	ldr	r3, [r4, #12]
 8012762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012764:	1a9b      	subs	r3, r3, r2
 8012766:	42bb      	cmp	r3, r7
 8012768:	dcf1      	bgt.n	801274e <_printf_float+0x41a>
 801276a:	e702      	b.n	8012572 <_printf_float+0x23e>
 801276c:	2700      	movs	r7, #0
 801276e:	f104 0819 	add.w	r8, r4, #25
 8012772:	e7f5      	b.n	8012760 <_printf_float+0x42c>
 8012774:	2b00      	cmp	r3, #0
 8012776:	f43f ae94 	beq.w	80124a2 <_printf_float+0x16e>
 801277a:	f04f 0c00 	mov.w	ip, #0
 801277e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8012782:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8012786:	6022      	str	r2, [r4, #0]
 8012788:	e9cd 0803 	strd	r0, r8, [sp, #12]
 801278c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012790:	9300      	str	r3, [sp, #0]
 8012792:	463a      	mov	r2, r7
 8012794:	464b      	mov	r3, r9
 8012796:	4628      	mov	r0, r5
 8012798:	f7ff fd3b 	bl	8012212 <__cvt>
 801279c:	4607      	mov	r7, r0
 801279e:	e64f      	b.n	8012440 <_printf_float+0x10c>

080127a0 <_printf_common>:
 80127a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127a4:	4691      	mov	r9, r2
 80127a6:	461f      	mov	r7, r3
 80127a8:	688a      	ldr	r2, [r1, #8]
 80127aa:	690b      	ldr	r3, [r1, #16]
 80127ac:	4606      	mov	r6, r0
 80127ae:	4293      	cmp	r3, r2
 80127b0:	bfb8      	it	lt
 80127b2:	4613      	movlt	r3, r2
 80127b4:	f8c9 3000 	str.w	r3, [r9]
 80127b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127bc:	460c      	mov	r4, r1
 80127be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127c2:	b112      	cbz	r2, 80127ca <_printf_common+0x2a>
 80127c4:	3301      	adds	r3, #1
 80127c6:	f8c9 3000 	str.w	r3, [r9]
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	0699      	lsls	r1, r3, #26
 80127ce:	bf42      	ittt	mi
 80127d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80127d4:	3302      	addmi	r3, #2
 80127d6:	f8c9 3000 	strmi.w	r3, [r9]
 80127da:	6825      	ldr	r5, [r4, #0]
 80127dc:	f015 0506 	ands.w	r5, r5, #6
 80127e0:	d107      	bne.n	80127f2 <_printf_common+0x52>
 80127e2:	f104 0a19 	add.w	sl, r4, #25
 80127e6:	68e3      	ldr	r3, [r4, #12]
 80127e8:	f8d9 2000 	ldr.w	r2, [r9]
 80127ec:	1a9b      	subs	r3, r3, r2
 80127ee:	42ab      	cmp	r3, r5
 80127f0:	dc29      	bgt.n	8012846 <_printf_common+0xa6>
 80127f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80127f6:	6822      	ldr	r2, [r4, #0]
 80127f8:	3300      	adds	r3, #0
 80127fa:	bf18      	it	ne
 80127fc:	2301      	movne	r3, #1
 80127fe:	0692      	lsls	r2, r2, #26
 8012800:	d42e      	bmi.n	8012860 <_printf_common+0xc0>
 8012802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012806:	4639      	mov	r1, r7
 8012808:	4630      	mov	r0, r6
 801280a:	47c0      	blx	r8
 801280c:	3001      	adds	r0, #1
 801280e:	d021      	beq.n	8012854 <_printf_common+0xb4>
 8012810:	6823      	ldr	r3, [r4, #0]
 8012812:	68e5      	ldr	r5, [r4, #12]
 8012814:	f003 0306 	and.w	r3, r3, #6
 8012818:	2b04      	cmp	r3, #4
 801281a:	bf18      	it	ne
 801281c:	2500      	movne	r5, #0
 801281e:	f8d9 2000 	ldr.w	r2, [r9]
 8012822:	f04f 0900 	mov.w	r9, #0
 8012826:	bf08      	it	eq
 8012828:	1aad      	subeq	r5, r5, r2
 801282a:	68a3      	ldr	r3, [r4, #8]
 801282c:	6922      	ldr	r2, [r4, #16]
 801282e:	bf08      	it	eq
 8012830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012834:	4293      	cmp	r3, r2
 8012836:	bfc4      	itt	gt
 8012838:	1a9b      	subgt	r3, r3, r2
 801283a:	18ed      	addgt	r5, r5, r3
 801283c:	341a      	adds	r4, #26
 801283e:	454d      	cmp	r5, r9
 8012840:	d11a      	bne.n	8012878 <_printf_common+0xd8>
 8012842:	2000      	movs	r0, #0
 8012844:	e008      	b.n	8012858 <_printf_common+0xb8>
 8012846:	2301      	movs	r3, #1
 8012848:	4652      	mov	r2, sl
 801284a:	4639      	mov	r1, r7
 801284c:	4630      	mov	r0, r6
 801284e:	47c0      	blx	r8
 8012850:	3001      	adds	r0, #1
 8012852:	d103      	bne.n	801285c <_printf_common+0xbc>
 8012854:	f04f 30ff 	mov.w	r0, #4294967295
 8012858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801285c:	3501      	adds	r5, #1
 801285e:	e7c2      	b.n	80127e6 <_printf_common+0x46>
 8012860:	2030      	movs	r0, #48	; 0x30
 8012862:	18e1      	adds	r1, r4, r3
 8012864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012868:	1c5a      	adds	r2, r3, #1
 801286a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801286e:	4422      	add	r2, r4
 8012870:	3302      	adds	r3, #2
 8012872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012876:	e7c4      	b.n	8012802 <_printf_common+0x62>
 8012878:	2301      	movs	r3, #1
 801287a:	4622      	mov	r2, r4
 801287c:	4639      	mov	r1, r7
 801287e:	4630      	mov	r0, r6
 8012880:	47c0      	blx	r8
 8012882:	3001      	adds	r0, #1
 8012884:	d0e6      	beq.n	8012854 <_printf_common+0xb4>
 8012886:	f109 0901 	add.w	r9, r9, #1
 801288a:	e7d8      	b.n	801283e <_printf_common+0x9e>

0801288c <_printf_i>:
 801288c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012890:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012894:	460c      	mov	r4, r1
 8012896:	7e09      	ldrb	r1, [r1, #24]
 8012898:	b085      	sub	sp, #20
 801289a:	296e      	cmp	r1, #110	; 0x6e
 801289c:	4617      	mov	r7, r2
 801289e:	4606      	mov	r6, r0
 80128a0:	4698      	mov	r8, r3
 80128a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128a4:	f000 80b3 	beq.w	8012a0e <_printf_i+0x182>
 80128a8:	d822      	bhi.n	80128f0 <_printf_i+0x64>
 80128aa:	2963      	cmp	r1, #99	; 0x63
 80128ac:	d036      	beq.n	801291c <_printf_i+0x90>
 80128ae:	d80a      	bhi.n	80128c6 <_printf_i+0x3a>
 80128b0:	2900      	cmp	r1, #0
 80128b2:	f000 80b9 	beq.w	8012a28 <_printf_i+0x19c>
 80128b6:	2958      	cmp	r1, #88	; 0x58
 80128b8:	f000 8083 	beq.w	80129c2 <_printf_i+0x136>
 80128bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80128c4:	e032      	b.n	801292c <_printf_i+0xa0>
 80128c6:	2964      	cmp	r1, #100	; 0x64
 80128c8:	d001      	beq.n	80128ce <_printf_i+0x42>
 80128ca:	2969      	cmp	r1, #105	; 0x69
 80128cc:	d1f6      	bne.n	80128bc <_printf_i+0x30>
 80128ce:	6820      	ldr	r0, [r4, #0]
 80128d0:	6813      	ldr	r3, [r2, #0]
 80128d2:	0605      	lsls	r5, r0, #24
 80128d4:	f103 0104 	add.w	r1, r3, #4
 80128d8:	d52a      	bpl.n	8012930 <_printf_i+0xa4>
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	6011      	str	r1, [r2, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	da03      	bge.n	80128ea <_printf_i+0x5e>
 80128e2:	222d      	movs	r2, #45	; 0x2d
 80128e4:	425b      	negs	r3, r3
 80128e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80128ea:	486f      	ldr	r0, [pc, #444]	; (8012aa8 <_printf_i+0x21c>)
 80128ec:	220a      	movs	r2, #10
 80128ee:	e039      	b.n	8012964 <_printf_i+0xd8>
 80128f0:	2973      	cmp	r1, #115	; 0x73
 80128f2:	f000 809d 	beq.w	8012a30 <_printf_i+0x1a4>
 80128f6:	d808      	bhi.n	801290a <_printf_i+0x7e>
 80128f8:	296f      	cmp	r1, #111	; 0x6f
 80128fa:	d020      	beq.n	801293e <_printf_i+0xb2>
 80128fc:	2970      	cmp	r1, #112	; 0x70
 80128fe:	d1dd      	bne.n	80128bc <_printf_i+0x30>
 8012900:	6823      	ldr	r3, [r4, #0]
 8012902:	f043 0320 	orr.w	r3, r3, #32
 8012906:	6023      	str	r3, [r4, #0]
 8012908:	e003      	b.n	8012912 <_printf_i+0x86>
 801290a:	2975      	cmp	r1, #117	; 0x75
 801290c:	d017      	beq.n	801293e <_printf_i+0xb2>
 801290e:	2978      	cmp	r1, #120	; 0x78
 8012910:	d1d4      	bne.n	80128bc <_printf_i+0x30>
 8012912:	2378      	movs	r3, #120	; 0x78
 8012914:	4865      	ldr	r0, [pc, #404]	; (8012aac <_printf_i+0x220>)
 8012916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801291a:	e055      	b.n	80129c8 <_printf_i+0x13c>
 801291c:	6813      	ldr	r3, [r2, #0]
 801291e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012922:	1d19      	adds	r1, r3, #4
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	6011      	str	r1, [r2, #0]
 8012928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801292c:	2301      	movs	r3, #1
 801292e:	e08c      	b.n	8012a4a <_printf_i+0x1be>
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012936:	6011      	str	r1, [r2, #0]
 8012938:	bf18      	it	ne
 801293a:	b21b      	sxthne	r3, r3
 801293c:	e7cf      	b.n	80128de <_printf_i+0x52>
 801293e:	6813      	ldr	r3, [r2, #0]
 8012940:	6825      	ldr	r5, [r4, #0]
 8012942:	1d18      	adds	r0, r3, #4
 8012944:	6010      	str	r0, [r2, #0]
 8012946:	0628      	lsls	r0, r5, #24
 8012948:	d501      	bpl.n	801294e <_printf_i+0xc2>
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	e002      	b.n	8012954 <_printf_i+0xc8>
 801294e:	0668      	lsls	r0, r5, #25
 8012950:	d5fb      	bpl.n	801294a <_printf_i+0xbe>
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	296f      	cmp	r1, #111	; 0x6f
 8012956:	bf14      	ite	ne
 8012958:	220a      	movne	r2, #10
 801295a:	2208      	moveq	r2, #8
 801295c:	4852      	ldr	r0, [pc, #328]	; (8012aa8 <_printf_i+0x21c>)
 801295e:	2100      	movs	r1, #0
 8012960:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012964:	6865      	ldr	r5, [r4, #4]
 8012966:	2d00      	cmp	r5, #0
 8012968:	60a5      	str	r5, [r4, #8]
 801296a:	f2c0 8095 	blt.w	8012a98 <_printf_i+0x20c>
 801296e:	6821      	ldr	r1, [r4, #0]
 8012970:	f021 0104 	bic.w	r1, r1, #4
 8012974:	6021      	str	r1, [r4, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d13d      	bne.n	80129f6 <_printf_i+0x16a>
 801297a:	2d00      	cmp	r5, #0
 801297c:	f040 808e 	bne.w	8012a9c <_printf_i+0x210>
 8012980:	4665      	mov	r5, ip
 8012982:	2a08      	cmp	r2, #8
 8012984:	d10b      	bne.n	801299e <_printf_i+0x112>
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	07db      	lsls	r3, r3, #31
 801298a:	d508      	bpl.n	801299e <_printf_i+0x112>
 801298c:	6923      	ldr	r3, [r4, #16]
 801298e:	6862      	ldr	r2, [r4, #4]
 8012990:	429a      	cmp	r2, r3
 8012992:	bfde      	ittt	le
 8012994:	2330      	movle	r3, #48	; 0x30
 8012996:	f805 3c01 	strble.w	r3, [r5, #-1]
 801299a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801299e:	ebac 0305 	sub.w	r3, ip, r5
 80129a2:	6123      	str	r3, [r4, #16]
 80129a4:	f8cd 8000 	str.w	r8, [sp]
 80129a8:	463b      	mov	r3, r7
 80129aa:	aa03      	add	r2, sp, #12
 80129ac:	4621      	mov	r1, r4
 80129ae:	4630      	mov	r0, r6
 80129b0:	f7ff fef6 	bl	80127a0 <_printf_common>
 80129b4:	3001      	adds	r0, #1
 80129b6:	d14d      	bne.n	8012a54 <_printf_i+0x1c8>
 80129b8:	f04f 30ff 	mov.w	r0, #4294967295
 80129bc:	b005      	add	sp, #20
 80129be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129c2:	4839      	ldr	r0, [pc, #228]	; (8012aa8 <_printf_i+0x21c>)
 80129c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80129c8:	6813      	ldr	r3, [r2, #0]
 80129ca:	6821      	ldr	r1, [r4, #0]
 80129cc:	1d1d      	adds	r5, r3, #4
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	6015      	str	r5, [r2, #0]
 80129d2:	060a      	lsls	r2, r1, #24
 80129d4:	d50b      	bpl.n	80129ee <_printf_i+0x162>
 80129d6:	07ca      	lsls	r2, r1, #31
 80129d8:	bf44      	itt	mi
 80129da:	f041 0120 	orrmi.w	r1, r1, #32
 80129de:	6021      	strmi	r1, [r4, #0]
 80129e0:	b91b      	cbnz	r3, 80129ea <_printf_i+0x15e>
 80129e2:	6822      	ldr	r2, [r4, #0]
 80129e4:	f022 0220 	bic.w	r2, r2, #32
 80129e8:	6022      	str	r2, [r4, #0]
 80129ea:	2210      	movs	r2, #16
 80129ec:	e7b7      	b.n	801295e <_printf_i+0xd2>
 80129ee:	064d      	lsls	r5, r1, #25
 80129f0:	bf48      	it	mi
 80129f2:	b29b      	uxthmi	r3, r3
 80129f4:	e7ef      	b.n	80129d6 <_printf_i+0x14a>
 80129f6:	4665      	mov	r5, ip
 80129f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80129fc:	fb02 3311 	mls	r3, r2, r1, r3
 8012a00:	5cc3      	ldrb	r3, [r0, r3]
 8012a02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a06:	460b      	mov	r3, r1
 8012a08:	2900      	cmp	r1, #0
 8012a0a:	d1f5      	bne.n	80129f8 <_printf_i+0x16c>
 8012a0c:	e7b9      	b.n	8012982 <_printf_i+0xf6>
 8012a0e:	6813      	ldr	r3, [r2, #0]
 8012a10:	6825      	ldr	r5, [r4, #0]
 8012a12:	1d18      	adds	r0, r3, #4
 8012a14:	6961      	ldr	r1, [r4, #20]
 8012a16:	6010      	str	r0, [r2, #0]
 8012a18:	0628      	lsls	r0, r5, #24
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	d501      	bpl.n	8012a22 <_printf_i+0x196>
 8012a1e:	6019      	str	r1, [r3, #0]
 8012a20:	e002      	b.n	8012a28 <_printf_i+0x19c>
 8012a22:	066a      	lsls	r2, r5, #25
 8012a24:	d5fb      	bpl.n	8012a1e <_printf_i+0x192>
 8012a26:	8019      	strh	r1, [r3, #0]
 8012a28:	2300      	movs	r3, #0
 8012a2a:	4665      	mov	r5, ip
 8012a2c:	6123      	str	r3, [r4, #16]
 8012a2e:	e7b9      	b.n	80129a4 <_printf_i+0x118>
 8012a30:	6813      	ldr	r3, [r2, #0]
 8012a32:	1d19      	adds	r1, r3, #4
 8012a34:	6011      	str	r1, [r2, #0]
 8012a36:	681d      	ldr	r5, [r3, #0]
 8012a38:	6862      	ldr	r2, [r4, #4]
 8012a3a:	2100      	movs	r1, #0
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	f002 fdaf 	bl	80155a0 <memchr>
 8012a42:	b108      	cbz	r0, 8012a48 <_printf_i+0x1bc>
 8012a44:	1b40      	subs	r0, r0, r5
 8012a46:	6060      	str	r0, [r4, #4]
 8012a48:	6863      	ldr	r3, [r4, #4]
 8012a4a:	6123      	str	r3, [r4, #16]
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a52:	e7a7      	b.n	80129a4 <_printf_i+0x118>
 8012a54:	6923      	ldr	r3, [r4, #16]
 8012a56:	462a      	mov	r2, r5
 8012a58:	4639      	mov	r1, r7
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	47c0      	blx	r8
 8012a5e:	3001      	adds	r0, #1
 8012a60:	d0aa      	beq.n	80129b8 <_printf_i+0x12c>
 8012a62:	6823      	ldr	r3, [r4, #0]
 8012a64:	079b      	lsls	r3, r3, #30
 8012a66:	d413      	bmi.n	8012a90 <_printf_i+0x204>
 8012a68:	68e0      	ldr	r0, [r4, #12]
 8012a6a:	9b03      	ldr	r3, [sp, #12]
 8012a6c:	4298      	cmp	r0, r3
 8012a6e:	bfb8      	it	lt
 8012a70:	4618      	movlt	r0, r3
 8012a72:	e7a3      	b.n	80129bc <_printf_i+0x130>
 8012a74:	2301      	movs	r3, #1
 8012a76:	464a      	mov	r2, r9
 8012a78:	4639      	mov	r1, r7
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	47c0      	blx	r8
 8012a7e:	3001      	adds	r0, #1
 8012a80:	d09a      	beq.n	80129b8 <_printf_i+0x12c>
 8012a82:	3501      	adds	r5, #1
 8012a84:	68e3      	ldr	r3, [r4, #12]
 8012a86:	9a03      	ldr	r2, [sp, #12]
 8012a88:	1a9b      	subs	r3, r3, r2
 8012a8a:	42ab      	cmp	r3, r5
 8012a8c:	dcf2      	bgt.n	8012a74 <_printf_i+0x1e8>
 8012a8e:	e7eb      	b.n	8012a68 <_printf_i+0x1dc>
 8012a90:	2500      	movs	r5, #0
 8012a92:	f104 0919 	add.w	r9, r4, #25
 8012a96:	e7f5      	b.n	8012a84 <_printf_i+0x1f8>
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1ac      	bne.n	80129f6 <_printf_i+0x16a>
 8012a9c:	7803      	ldrb	r3, [r0, #0]
 8012a9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012aa6:	e76c      	b.n	8012982 <_printf_i+0xf6>
 8012aa8:	0801a4da 	.word	0x0801a4da
 8012aac:	0801a4eb 	.word	0x0801a4eb

08012ab0 <_scanf_float>:
 8012ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab4:	469a      	mov	sl, r3
 8012ab6:	688b      	ldr	r3, [r1, #8]
 8012ab8:	4616      	mov	r6, r2
 8012aba:	1e5a      	subs	r2, r3, #1
 8012abc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012ac0:	bf88      	it	hi
 8012ac2:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012ac6:	b087      	sub	sp, #28
 8012ac8:	bf85      	ittet	hi
 8012aca:	189b      	addhi	r3, r3, r2
 8012acc:	9301      	strhi	r3, [sp, #4]
 8012ace:	2300      	movls	r3, #0
 8012ad0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012ad4:	4688      	mov	r8, r1
 8012ad6:	f04f 0b00 	mov.w	fp, #0
 8012ada:	bf8c      	ite	hi
 8012adc:	608b      	strhi	r3, [r1, #8]
 8012ade:	9301      	strls	r3, [sp, #4]
 8012ae0:	680b      	ldr	r3, [r1, #0]
 8012ae2:	4607      	mov	r7, r0
 8012ae4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012ae8:	f848 3b1c 	str.w	r3, [r8], #28
 8012aec:	460c      	mov	r4, r1
 8012aee:	4645      	mov	r5, r8
 8012af0:	465a      	mov	r2, fp
 8012af2:	46d9      	mov	r9, fp
 8012af4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012af8:	f8cd b008 	str.w	fp, [sp, #8]
 8012afc:	68a1      	ldr	r1, [r4, #8]
 8012afe:	b181      	cbz	r1, 8012b22 <_scanf_float+0x72>
 8012b00:	6833      	ldr	r3, [r6, #0]
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	2b49      	cmp	r3, #73	; 0x49
 8012b06:	d071      	beq.n	8012bec <_scanf_float+0x13c>
 8012b08:	d84d      	bhi.n	8012ba6 <_scanf_float+0xf6>
 8012b0a:	2b39      	cmp	r3, #57	; 0x39
 8012b0c:	d840      	bhi.n	8012b90 <_scanf_float+0xe0>
 8012b0e:	2b31      	cmp	r3, #49	; 0x31
 8012b10:	f080 8088 	bcs.w	8012c24 <_scanf_float+0x174>
 8012b14:	2b2d      	cmp	r3, #45	; 0x2d
 8012b16:	f000 8090 	beq.w	8012c3a <_scanf_float+0x18a>
 8012b1a:	d815      	bhi.n	8012b48 <_scanf_float+0x98>
 8012b1c:	2b2b      	cmp	r3, #43	; 0x2b
 8012b1e:	f000 808c 	beq.w	8012c3a <_scanf_float+0x18a>
 8012b22:	f1b9 0f00 	cmp.w	r9, #0
 8012b26:	d003      	beq.n	8012b30 <_scanf_float+0x80>
 8012b28:	6823      	ldr	r3, [r4, #0]
 8012b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b2e:	6023      	str	r3, [r4, #0]
 8012b30:	3a01      	subs	r2, #1
 8012b32:	2a01      	cmp	r2, #1
 8012b34:	f200 80ea 	bhi.w	8012d0c <_scanf_float+0x25c>
 8012b38:	4545      	cmp	r5, r8
 8012b3a:	f200 80dc 	bhi.w	8012cf6 <_scanf_float+0x246>
 8012b3e:	2601      	movs	r6, #1
 8012b40:	4630      	mov	r0, r6
 8012b42:	b007      	add	sp, #28
 8012b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b48:	2b2e      	cmp	r3, #46	; 0x2e
 8012b4a:	f000 809f 	beq.w	8012c8c <_scanf_float+0x1dc>
 8012b4e:	2b30      	cmp	r3, #48	; 0x30
 8012b50:	d1e7      	bne.n	8012b22 <_scanf_float+0x72>
 8012b52:	6820      	ldr	r0, [r4, #0]
 8012b54:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012b58:	d064      	beq.n	8012c24 <_scanf_float+0x174>
 8012b5a:	9b01      	ldr	r3, [sp, #4]
 8012b5c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012b60:	6020      	str	r0, [r4, #0]
 8012b62:	f109 0901 	add.w	r9, r9, #1
 8012b66:	b11b      	cbz	r3, 8012b70 <_scanf_float+0xc0>
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	3101      	adds	r1, #1
 8012b6c:	9301      	str	r3, [sp, #4]
 8012b6e:	60a1      	str	r1, [r4, #8]
 8012b70:	68a3      	ldr	r3, [r4, #8]
 8012b72:	3b01      	subs	r3, #1
 8012b74:	60a3      	str	r3, [r4, #8]
 8012b76:	6923      	ldr	r3, [r4, #16]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	6123      	str	r3, [r4, #16]
 8012b7c:	6873      	ldr	r3, [r6, #4]
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	6073      	str	r3, [r6, #4]
 8012b84:	f340 80ac 	ble.w	8012ce0 <_scanf_float+0x230>
 8012b88:	6833      	ldr	r3, [r6, #0]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	6033      	str	r3, [r6, #0]
 8012b8e:	e7b5      	b.n	8012afc <_scanf_float+0x4c>
 8012b90:	2b45      	cmp	r3, #69	; 0x45
 8012b92:	f000 8085 	beq.w	8012ca0 <_scanf_float+0x1f0>
 8012b96:	2b46      	cmp	r3, #70	; 0x46
 8012b98:	d06a      	beq.n	8012c70 <_scanf_float+0x1c0>
 8012b9a:	2b41      	cmp	r3, #65	; 0x41
 8012b9c:	d1c1      	bne.n	8012b22 <_scanf_float+0x72>
 8012b9e:	2a01      	cmp	r2, #1
 8012ba0:	d1bf      	bne.n	8012b22 <_scanf_float+0x72>
 8012ba2:	2202      	movs	r2, #2
 8012ba4:	e046      	b.n	8012c34 <_scanf_float+0x184>
 8012ba6:	2b65      	cmp	r3, #101	; 0x65
 8012ba8:	d07a      	beq.n	8012ca0 <_scanf_float+0x1f0>
 8012baa:	d818      	bhi.n	8012bde <_scanf_float+0x12e>
 8012bac:	2b54      	cmp	r3, #84	; 0x54
 8012bae:	d066      	beq.n	8012c7e <_scanf_float+0x1ce>
 8012bb0:	d811      	bhi.n	8012bd6 <_scanf_float+0x126>
 8012bb2:	2b4e      	cmp	r3, #78	; 0x4e
 8012bb4:	d1b5      	bne.n	8012b22 <_scanf_float+0x72>
 8012bb6:	2a00      	cmp	r2, #0
 8012bb8:	d146      	bne.n	8012c48 <_scanf_float+0x198>
 8012bba:	f1b9 0f00 	cmp.w	r9, #0
 8012bbe:	d145      	bne.n	8012c4c <_scanf_float+0x19c>
 8012bc0:	6821      	ldr	r1, [r4, #0]
 8012bc2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012bc6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012bca:	d13f      	bne.n	8012c4c <_scanf_float+0x19c>
 8012bcc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012bd0:	6021      	str	r1, [r4, #0]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	e02e      	b.n	8012c34 <_scanf_float+0x184>
 8012bd6:	2b59      	cmp	r3, #89	; 0x59
 8012bd8:	d01e      	beq.n	8012c18 <_scanf_float+0x168>
 8012bda:	2b61      	cmp	r3, #97	; 0x61
 8012bdc:	e7de      	b.n	8012b9c <_scanf_float+0xec>
 8012bde:	2b6e      	cmp	r3, #110	; 0x6e
 8012be0:	d0e9      	beq.n	8012bb6 <_scanf_float+0x106>
 8012be2:	d815      	bhi.n	8012c10 <_scanf_float+0x160>
 8012be4:	2b66      	cmp	r3, #102	; 0x66
 8012be6:	d043      	beq.n	8012c70 <_scanf_float+0x1c0>
 8012be8:	2b69      	cmp	r3, #105	; 0x69
 8012bea:	d19a      	bne.n	8012b22 <_scanf_float+0x72>
 8012bec:	f1bb 0f00 	cmp.w	fp, #0
 8012bf0:	d138      	bne.n	8012c64 <_scanf_float+0x1b4>
 8012bf2:	f1b9 0f00 	cmp.w	r9, #0
 8012bf6:	d197      	bne.n	8012b28 <_scanf_float+0x78>
 8012bf8:	6821      	ldr	r1, [r4, #0]
 8012bfa:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012bfe:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c02:	d195      	bne.n	8012b30 <_scanf_float+0x80>
 8012c04:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c08:	6021      	str	r1, [r4, #0]
 8012c0a:	f04f 0b01 	mov.w	fp, #1
 8012c0e:	e011      	b.n	8012c34 <_scanf_float+0x184>
 8012c10:	2b74      	cmp	r3, #116	; 0x74
 8012c12:	d034      	beq.n	8012c7e <_scanf_float+0x1ce>
 8012c14:	2b79      	cmp	r3, #121	; 0x79
 8012c16:	d184      	bne.n	8012b22 <_scanf_float+0x72>
 8012c18:	f1bb 0f07 	cmp.w	fp, #7
 8012c1c:	d181      	bne.n	8012b22 <_scanf_float+0x72>
 8012c1e:	f04f 0b08 	mov.w	fp, #8
 8012c22:	e007      	b.n	8012c34 <_scanf_float+0x184>
 8012c24:	eb12 0f0b 	cmn.w	r2, fp
 8012c28:	f47f af7b 	bne.w	8012b22 <_scanf_float+0x72>
 8012c2c:	6821      	ldr	r1, [r4, #0]
 8012c2e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012c32:	6021      	str	r1, [r4, #0]
 8012c34:	702b      	strb	r3, [r5, #0]
 8012c36:	3501      	adds	r5, #1
 8012c38:	e79a      	b.n	8012b70 <_scanf_float+0xc0>
 8012c3a:	6821      	ldr	r1, [r4, #0]
 8012c3c:	0608      	lsls	r0, r1, #24
 8012c3e:	f57f af70 	bpl.w	8012b22 <_scanf_float+0x72>
 8012c42:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012c46:	e7f4      	b.n	8012c32 <_scanf_float+0x182>
 8012c48:	2a02      	cmp	r2, #2
 8012c4a:	d047      	beq.n	8012cdc <_scanf_float+0x22c>
 8012c4c:	f1bb 0f01 	cmp.w	fp, #1
 8012c50:	d003      	beq.n	8012c5a <_scanf_float+0x1aa>
 8012c52:	f1bb 0f04 	cmp.w	fp, #4
 8012c56:	f47f af64 	bne.w	8012b22 <_scanf_float+0x72>
 8012c5a:	f10b 0b01 	add.w	fp, fp, #1
 8012c5e:	fa5f fb8b 	uxtb.w	fp, fp
 8012c62:	e7e7      	b.n	8012c34 <_scanf_float+0x184>
 8012c64:	f1bb 0f03 	cmp.w	fp, #3
 8012c68:	d0f7      	beq.n	8012c5a <_scanf_float+0x1aa>
 8012c6a:	f1bb 0f05 	cmp.w	fp, #5
 8012c6e:	e7f2      	b.n	8012c56 <_scanf_float+0x1a6>
 8012c70:	f1bb 0f02 	cmp.w	fp, #2
 8012c74:	f47f af55 	bne.w	8012b22 <_scanf_float+0x72>
 8012c78:	f04f 0b03 	mov.w	fp, #3
 8012c7c:	e7da      	b.n	8012c34 <_scanf_float+0x184>
 8012c7e:	f1bb 0f06 	cmp.w	fp, #6
 8012c82:	f47f af4e 	bne.w	8012b22 <_scanf_float+0x72>
 8012c86:	f04f 0b07 	mov.w	fp, #7
 8012c8a:	e7d3      	b.n	8012c34 <_scanf_float+0x184>
 8012c8c:	6821      	ldr	r1, [r4, #0]
 8012c8e:	0588      	lsls	r0, r1, #22
 8012c90:	f57f af47 	bpl.w	8012b22 <_scanf_float+0x72>
 8012c94:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012c98:	6021      	str	r1, [r4, #0]
 8012c9a:	f8cd 9008 	str.w	r9, [sp, #8]
 8012c9e:	e7c9      	b.n	8012c34 <_scanf_float+0x184>
 8012ca0:	6821      	ldr	r1, [r4, #0]
 8012ca2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012ca6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012caa:	d006      	beq.n	8012cba <_scanf_float+0x20a>
 8012cac:	0548      	lsls	r0, r1, #21
 8012cae:	f57f af38 	bpl.w	8012b22 <_scanf_float+0x72>
 8012cb2:	f1b9 0f00 	cmp.w	r9, #0
 8012cb6:	f43f af3b 	beq.w	8012b30 <_scanf_float+0x80>
 8012cba:	0588      	lsls	r0, r1, #22
 8012cbc:	bf58      	it	pl
 8012cbe:	9802      	ldrpl	r0, [sp, #8]
 8012cc0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012cc4:	bf58      	it	pl
 8012cc6:	eba9 0000 	subpl.w	r0, r9, r0
 8012cca:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012cce:	bf58      	it	pl
 8012cd0:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012cd4:	6021      	str	r1, [r4, #0]
 8012cd6:	f04f 0900 	mov.w	r9, #0
 8012cda:	e7ab      	b.n	8012c34 <_scanf_float+0x184>
 8012cdc:	2203      	movs	r2, #3
 8012cde:	e7a9      	b.n	8012c34 <_scanf_float+0x184>
 8012ce0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012ce4:	4631      	mov	r1, r6
 8012ce6:	4638      	mov	r0, r7
 8012ce8:	9205      	str	r2, [sp, #20]
 8012cea:	4798      	blx	r3
 8012cec:	9a05      	ldr	r2, [sp, #20]
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	f43f af04 	beq.w	8012afc <_scanf_float+0x4c>
 8012cf4:	e715      	b.n	8012b22 <_scanf_float+0x72>
 8012cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012cfa:	4632      	mov	r2, r6
 8012cfc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012d00:	4638      	mov	r0, r7
 8012d02:	4798      	blx	r3
 8012d04:	6923      	ldr	r3, [r4, #16]
 8012d06:	3b01      	subs	r3, #1
 8012d08:	6123      	str	r3, [r4, #16]
 8012d0a:	e715      	b.n	8012b38 <_scanf_float+0x88>
 8012d0c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012d10:	2b06      	cmp	r3, #6
 8012d12:	d80a      	bhi.n	8012d2a <_scanf_float+0x27a>
 8012d14:	f1bb 0f02 	cmp.w	fp, #2
 8012d18:	d967      	bls.n	8012dea <_scanf_float+0x33a>
 8012d1a:	f1ab 0b03 	sub.w	fp, fp, #3
 8012d1e:	fa5f fb8b 	uxtb.w	fp, fp
 8012d22:	eba5 0b0b 	sub.w	fp, r5, fp
 8012d26:	455d      	cmp	r5, fp
 8012d28:	d14a      	bne.n	8012dc0 <_scanf_float+0x310>
 8012d2a:	6823      	ldr	r3, [r4, #0]
 8012d2c:	05da      	lsls	r2, r3, #23
 8012d2e:	d51f      	bpl.n	8012d70 <_scanf_float+0x2c0>
 8012d30:	055b      	lsls	r3, r3, #21
 8012d32:	d467      	bmi.n	8012e04 <_scanf_float+0x354>
 8012d34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012d38:	6923      	ldr	r3, [r4, #16]
 8012d3a:	2965      	cmp	r1, #101	; 0x65
 8012d3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8012d40:	f105 3bff 	add.w	fp, r5, #4294967295
 8012d44:	6123      	str	r3, [r4, #16]
 8012d46:	d00d      	beq.n	8012d64 <_scanf_float+0x2b4>
 8012d48:	2945      	cmp	r1, #69	; 0x45
 8012d4a:	d00b      	beq.n	8012d64 <_scanf_float+0x2b4>
 8012d4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d50:	4632      	mov	r2, r6
 8012d52:	4638      	mov	r0, r7
 8012d54:	4798      	blx	r3
 8012d56:	6923      	ldr	r3, [r4, #16]
 8012d58:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012d5c:	3b01      	subs	r3, #1
 8012d5e:	f1a5 0b02 	sub.w	fp, r5, #2
 8012d62:	6123      	str	r3, [r4, #16]
 8012d64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d68:	4632      	mov	r2, r6
 8012d6a:	4638      	mov	r0, r7
 8012d6c:	4798      	blx	r3
 8012d6e:	465d      	mov	r5, fp
 8012d70:	6826      	ldr	r6, [r4, #0]
 8012d72:	f016 0610 	ands.w	r6, r6, #16
 8012d76:	d176      	bne.n	8012e66 <_scanf_float+0x3b6>
 8012d78:	702e      	strb	r6, [r5, #0]
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d84:	d141      	bne.n	8012e0a <_scanf_float+0x35a>
 8012d86:	9b02      	ldr	r3, [sp, #8]
 8012d88:	eba9 0303 	sub.w	r3, r9, r3
 8012d8c:	425a      	negs	r2, r3
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d148      	bne.n	8012e24 <_scanf_float+0x374>
 8012d92:	4641      	mov	r1, r8
 8012d94:	2200      	movs	r2, #0
 8012d96:	4638      	mov	r0, r7
 8012d98:	f000 ff2e 	bl	8013bf8 <_strtod_r>
 8012d9c:	6825      	ldr	r5, [r4, #0]
 8012d9e:	4680      	mov	r8, r0
 8012da0:	f015 0f02 	tst.w	r5, #2
 8012da4:	4689      	mov	r9, r1
 8012da6:	f8da 3000 	ldr.w	r3, [sl]
 8012daa:	d046      	beq.n	8012e3a <_scanf_float+0x38a>
 8012dac:	1d1a      	adds	r2, r3, #4
 8012dae:	f8ca 2000 	str.w	r2, [sl]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	e9c3 8900 	strd	r8, r9, [r3]
 8012db8:	68e3      	ldr	r3, [r4, #12]
 8012dba:	3301      	adds	r3, #1
 8012dbc:	60e3      	str	r3, [r4, #12]
 8012dbe:	e6bf      	b.n	8012b40 <_scanf_float+0x90>
 8012dc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dc4:	4632      	mov	r2, r6
 8012dc6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012dca:	4638      	mov	r0, r7
 8012dcc:	4798      	blx	r3
 8012dce:	6923      	ldr	r3, [r4, #16]
 8012dd0:	3b01      	subs	r3, #1
 8012dd2:	6123      	str	r3, [r4, #16]
 8012dd4:	e7a7      	b.n	8012d26 <_scanf_float+0x276>
 8012dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dda:	4632      	mov	r2, r6
 8012ddc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012de0:	4638      	mov	r0, r7
 8012de2:	4798      	blx	r3
 8012de4:	6923      	ldr	r3, [r4, #16]
 8012de6:	3b01      	subs	r3, #1
 8012de8:	6123      	str	r3, [r4, #16]
 8012dea:	4545      	cmp	r5, r8
 8012dec:	d8f3      	bhi.n	8012dd6 <_scanf_float+0x326>
 8012dee:	e6a6      	b.n	8012b3e <_scanf_float+0x8e>
 8012df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012df4:	4632      	mov	r2, r6
 8012df6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012dfa:	4638      	mov	r0, r7
 8012dfc:	4798      	blx	r3
 8012dfe:	6923      	ldr	r3, [r4, #16]
 8012e00:	3b01      	subs	r3, #1
 8012e02:	6123      	str	r3, [r4, #16]
 8012e04:	4545      	cmp	r5, r8
 8012e06:	d8f3      	bhi.n	8012df0 <_scanf_float+0x340>
 8012e08:	e699      	b.n	8012b3e <_scanf_float+0x8e>
 8012e0a:	9b03      	ldr	r3, [sp, #12]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d0c0      	beq.n	8012d92 <_scanf_float+0x2e2>
 8012e10:	9904      	ldr	r1, [sp, #16]
 8012e12:	230a      	movs	r3, #10
 8012e14:	4632      	mov	r2, r6
 8012e16:	3101      	adds	r1, #1
 8012e18:	4638      	mov	r0, r7
 8012e1a:	f000 ff79 	bl	8013d10 <_strtol_r>
 8012e1e:	9b03      	ldr	r3, [sp, #12]
 8012e20:	9d04      	ldr	r5, [sp, #16]
 8012e22:	1ac2      	subs	r2, r0, r3
 8012e24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012e28:	429d      	cmp	r5, r3
 8012e2a:	bf28      	it	cs
 8012e2c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012e30:	490e      	ldr	r1, [pc, #56]	; (8012e6c <_scanf_float+0x3bc>)
 8012e32:	4628      	mov	r0, r5
 8012e34:	f000 f89c 	bl	8012f70 <siprintf>
 8012e38:	e7ab      	b.n	8012d92 <_scanf_float+0x2e2>
 8012e3a:	1d1f      	adds	r7, r3, #4
 8012e3c:	f015 0504 	ands.w	r5, r5, #4
 8012e40:	f8ca 7000 	str.w	r7, [sl]
 8012e44:	d1b5      	bne.n	8012db2 <_scanf_float+0x302>
 8012e46:	681f      	ldr	r7, [r3, #0]
 8012e48:	4602      	mov	r2, r0
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	f7ed fdf6 	bl	8000a3c <__aeabi_dcmpun>
 8012e50:	b120      	cbz	r0, 8012e5c <_scanf_float+0x3ac>
 8012e52:	4628      	mov	r0, r5
 8012e54:	f000 f888 	bl	8012f68 <nanf>
 8012e58:	6038      	str	r0, [r7, #0]
 8012e5a:	e7ad      	b.n	8012db8 <_scanf_float+0x308>
 8012e5c:	4640      	mov	r0, r8
 8012e5e:	4649      	mov	r1, r9
 8012e60:	f7ed fe4a 	bl	8000af8 <__aeabi_d2f>
 8012e64:	e7f8      	b.n	8012e58 <_scanf_float+0x3a8>
 8012e66:	2600      	movs	r6, #0
 8012e68:	e66a      	b.n	8012b40 <_scanf_float+0x90>
 8012e6a:	bf00      	nop
 8012e6c:	0801a4fc 	.word	0x0801a4fc

08012e70 <iprintf>:
 8012e70:	b40f      	push	{r0, r1, r2, r3}
 8012e72:	4b0a      	ldr	r3, [pc, #40]	; (8012e9c <iprintf+0x2c>)
 8012e74:	b513      	push	{r0, r1, r4, lr}
 8012e76:	681c      	ldr	r4, [r3, #0]
 8012e78:	b124      	cbz	r4, 8012e84 <iprintf+0x14>
 8012e7a:	69a3      	ldr	r3, [r4, #24]
 8012e7c:	b913      	cbnz	r3, 8012e84 <iprintf+0x14>
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f001 ff4a 	bl	8014d18 <__sinit>
 8012e84:	ab05      	add	r3, sp, #20
 8012e86:	9a04      	ldr	r2, [sp, #16]
 8012e88:	68a1      	ldr	r1, [r4, #8]
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	9301      	str	r3, [sp, #4]
 8012e8e:	f003 f9bb 	bl	8016208 <_vfiprintf_r>
 8012e92:	b002      	add	sp, #8
 8012e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e98:	b004      	add	sp, #16
 8012e9a:	4770      	bx	lr
 8012e9c:	20000140 	.word	0x20000140

08012ea0 <_puts_r>:
 8012ea0:	b570      	push	{r4, r5, r6, lr}
 8012ea2:	460e      	mov	r6, r1
 8012ea4:	4605      	mov	r5, r0
 8012ea6:	b118      	cbz	r0, 8012eb0 <_puts_r+0x10>
 8012ea8:	6983      	ldr	r3, [r0, #24]
 8012eaa:	b90b      	cbnz	r3, 8012eb0 <_puts_r+0x10>
 8012eac:	f001 ff34 	bl	8014d18 <__sinit>
 8012eb0:	69ab      	ldr	r3, [r5, #24]
 8012eb2:	68ac      	ldr	r4, [r5, #8]
 8012eb4:	b913      	cbnz	r3, 8012ebc <_puts_r+0x1c>
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	f001 ff2e 	bl	8014d18 <__sinit>
 8012ebc:	4b23      	ldr	r3, [pc, #140]	; (8012f4c <_puts_r+0xac>)
 8012ebe:	429c      	cmp	r4, r3
 8012ec0:	d117      	bne.n	8012ef2 <_puts_r+0x52>
 8012ec2:	686c      	ldr	r4, [r5, #4]
 8012ec4:	89a3      	ldrh	r3, [r4, #12]
 8012ec6:	071b      	lsls	r3, r3, #28
 8012ec8:	d51d      	bpl.n	8012f06 <_puts_r+0x66>
 8012eca:	6923      	ldr	r3, [r4, #16]
 8012ecc:	b1db      	cbz	r3, 8012f06 <_puts_r+0x66>
 8012ece:	3e01      	subs	r6, #1
 8012ed0:	68a3      	ldr	r3, [r4, #8]
 8012ed2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	60a3      	str	r3, [r4, #8]
 8012eda:	b9e9      	cbnz	r1, 8012f18 <_puts_r+0x78>
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	da2e      	bge.n	8012f3e <_puts_r+0x9e>
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	210a      	movs	r1, #10
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f000 ff25 	bl	8013d34 <__swbuf_r>
 8012eea:	3001      	adds	r0, #1
 8012eec:	d011      	beq.n	8012f12 <_puts_r+0x72>
 8012eee:	200a      	movs	r0, #10
 8012ef0:	e011      	b.n	8012f16 <_puts_r+0x76>
 8012ef2:	4b17      	ldr	r3, [pc, #92]	; (8012f50 <_puts_r+0xb0>)
 8012ef4:	429c      	cmp	r4, r3
 8012ef6:	d101      	bne.n	8012efc <_puts_r+0x5c>
 8012ef8:	68ac      	ldr	r4, [r5, #8]
 8012efa:	e7e3      	b.n	8012ec4 <_puts_r+0x24>
 8012efc:	4b15      	ldr	r3, [pc, #84]	; (8012f54 <_puts_r+0xb4>)
 8012efe:	429c      	cmp	r4, r3
 8012f00:	bf08      	it	eq
 8012f02:	68ec      	ldreq	r4, [r5, #12]
 8012f04:	e7de      	b.n	8012ec4 <_puts_r+0x24>
 8012f06:	4621      	mov	r1, r4
 8012f08:	4628      	mov	r0, r5
 8012f0a:	f000 ff65 	bl	8013dd8 <__swsetup_r>
 8012f0e:	2800      	cmp	r0, #0
 8012f10:	d0dd      	beq.n	8012ece <_puts_r+0x2e>
 8012f12:	f04f 30ff 	mov.w	r0, #4294967295
 8012f16:	bd70      	pop	{r4, r5, r6, pc}
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	da04      	bge.n	8012f26 <_puts_r+0x86>
 8012f1c:	69a2      	ldr	r2, [r4, #24]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	dc06      	bgt.n	8012f30 <_puts_r+0x90>
 8012f22:	290a      	cmp	r1, #10
 8012f24:	d004      	beq.n	8012f30 <_puts_r+0x90>
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	1c5a      	adds	r2, r3, #1
 8012f2a:	6022      	str	r2, [r4, #0]
 8012f2c:	7019      	strb	r1, [r3, #0]
 8012f2e:	e7cf      	b.n	8012ed0 <_puts_r+0x30>
 8012f30:	4622      	mov	r2, r4
 8012f32:	4628      	mov	r0, r5
 8012f34:	f000 fefe 	bl	8013d34 <__swbuf_r>
 8012f38:	3001      	adds	r0, #1
 8012f3a:	d1c9      	bne.n	8012ed0 <_puts_r+0x30>
 8012f3c:	e7e9      	b.n	8012f12 <_puts_r+0x72>
 8012f3e:	200a      	movs	r0, #10
 8012f40:	6823      	ldr	r3, [r4, #0]
 8012f42:	1c5a      	adds	r2, r3, #1
 8012f44:	6022      	str	r2, [r4, #0]
 8012f46:	7018      	strb	r0, [r3, #0]
 8012f48:	e7e5      	b.n	8012f16 <_puts_r+0x76>
 8012f4a:	bf00      	nop
 8012f4c:	0801a588 	.word	0x0801a588
 8012f50:	0801a5a8 	.word	0x0801a5a8
 8012f54:	0801a568 	.word	0x0801a568

08012f58 <puts>:
 8012f58:	4b02      	ldr	r3, [pc, #8]	; (8012f64 <puts+0xc>)
 8012f5a:	4601      	mov	r1, r0
 8012f5c:	6818      	ldr	r0, [r3, #0]
 8012f5e:	f7ff bf9f 	b.w	8012ea0 <_puts_r>
 8012f62:	bf00      	nop
 8012f64:	20000140 	.word	0x20000140

08012f68 <nanf>:
 8012f68:	4800      	ldr	r0, [pc, #0]	; (8012f6c <nanf+0x4>)
 8012f6a:	4770      	bx	lr
 8012f6c:	7fc00000 	.word	0x7fc00000

08012f70 <siprintf>:
 8012f70:	b40e      	push	{r1, r2, r3}
 8012f72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f76:	b500      	push	{lr}
 8012f78:	b09c      	sub	sp, #112	; 0x70
 8012f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8012f7c:	9002      	str	r0, [sp, #8]
 8012f7e:	9006      	str	r0, [sp, #24]
 8012f80:	9107      	str	r1, [sp, #28]
 8012f82:	9104      	str	r1, [sp, #16]
 8012f84:	4808      	ldr	r0, [pc, #32]	; (8012fa8 <siprintf+0x38>)
 8012f86:	4909      	ldr	r1, [pc, #36]	; (8012fac <siprintf+0x3c>)
 8012f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f8c:	9105      	str	r1, [sp, #20]
 8012f8e:	6800      	ldr	r0, [r0, #0]
 8012f90:	a902      	add	r1, sp, #8
 8012f92:	9301      	str	r3, [sp, #4]
 8012f94:	f003 f818 	bl	8015fc8 <_svfiprintf_r>
 8012f98:	2200      	movs	r2, #0
 8012f9a:	9b02      	ldr	r3, [sp, #8]
 8012f9c:	701a      	strb	r2, [r3, #0]
 8012f9e:	b01c      	add	sp, #112	; 0x70
 8012fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fa4:	b003      	add	sp, #12
 8012fa6:	4770      	bx	lr
 8012fa8:	20000140 	.word	0x20000140
 8012fac:	ffff0208 	.word	0xffff0208

08012fb0 <sulp>:
 8012fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb4:	460f      	mov	r7, r1
 8012fb6:	4690      	mov	r8, r2
 8012fb8:	f002 fdca 	bl	8015b50 <__ulp>
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	460d      	mov	r5, r1
 8012fc0:	f1b8 0f00 	cmp.w	r8, #0
 8012fc4:	d011      	beq.n	8012fea <sulp+0x3a>
 8012fc6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8012fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	dd0b      	ble.n	8012fea <sulp+0x3a>
 8012fd2:	2400      	movs	r4, #0
 8012fd4:	051b      	lsls	r3, r3, #20
 8012fd6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012fda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012fde:	4622      	mov	r2, r4
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	f7ed fa91 	bl	8000508 <__aeabi_dmul>
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	460d      	mov	r5, r1
 8012fea:	4620      	mov	r0, r4
 8012fec:	4629      	mov	r1, r5
 8012fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ff2:	0000      	movs	r0, r0
 8012ff4:	0000      	movs	r0, r0
	...

08012ff8 <_strtod_l>:
 8012ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ffc:	461f      	mov	r7, r3
 8012ffe:	2300      	movs	r3, #0
 8013000:	b0a1      	sub	sp, #132	; 0x84
 8013002:	4683      	mov	fp, r0
 8013004:	4638      	mov	r0, r7
 8013006:	460e      	mov	r6, r1
 8013008:	9217      	str	r2, [sp, #92]	; 0x5c
 801300a:	931c      	str	r3, [sp, #112]	; 0x70
 801300c:	f002 fa39 	bl	8015482 <__localeconv_l>
 8013010:	4680      	mov	r8, r0
 8013012:	6800      	ldr	r0, [r0, #0]
 8013014:	f7ed f8b4 	bl	8000180 <strlen>
 8013018:	f04f 0900 	mov.w	r9, #0
 801301c:	4604      	mov	r4, r0
 801301e:	f04f 0a00 	mov.w	sl, #0
 8013022:	961b      	str	r6, [sp, #108]	; 0x6c
 8013024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013026:	781a      	ldrb	r2, [r3, #0]
 8013028:	2a0d      	cmp	r2, #13
 801302a:	d832      	bhi.n	8013092 <_strtod_l+0x9a>
 801302c:	2a09      	cmp	r2, #9
 801302e:	d236      	bcs.n	801309e <_strtod_l+0xa6>
 8013030:	2a00      	cmp	r2, #0
 8013032:	d03e      	beq.n	80130b2 <_strtod_l+0xba>
 8013034:	2300      	movs	r3, #0
 8013036:	930d      	str	r3, [sp, #52]	; 0x34
 8013038:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801303a:	782b      	ldrb	r3, [r5, #0]
 801303c:	2b30      	cmp	r3, #48	; 0x30
 801303e:	f040 80ac 	bne.w	801319a <_strtod_l+0x1a2>
 8013042:	786b      	ldrb	r3, [r5, #1]
 8013044:	2b58      	cmp	r3, #88	; 0x58
 8013046:	d001      	beq.n	801304c <_strtod_l+0x54>
 8013048:	2b78      	cmp	r3, #120	; 0x78
 801304a:	d167      	bne.n	801311c <_strtod_l+0x124>
 801304c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801304e:	9702      	str	r7, [sp, #8]
 8013050:	9301      	str	r3, [sp, #4]
 8013052:	ab1c      	add	r3, sp, #112	; 0x70
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	4a89      	ldr	r2, [pc, #548]	; (801327c <_strtod_l+0x284>)
 8013058:	ab1d      	add	r3, sp, #116	; 0x74
 801305a:	a91b      	add	r1, sp, #108	; 0x6c
 801305c:	4658      	mov	r0, fp
 801305e:	f001 ff35 	bl	8014ecc <__gethex>
 8013062:	f010 0407 	ands.w	r4, r0, #7
 8013066:	4606      	mov	r6, r0
 8013068:	d005      	beq.n	8013076 <_strtod_l+0x7e>
 801306a:	2c06      	cmp	r4, #6
 801306c:	d12b      	bne.n	80130c6 <_strtod_l+0xce>
 801306e:	2300      	movs	r3, #0
 8013070:	3501      	adds	r5, #1
 8013072:	951b      	str	r5, [sp, #108]	; 0x6c
 8013074:	930d      	str	r3, [sp, #52]	; 0x34
 8013076:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013078:	2b00      	cmp	r3, #0
 801307a:	f040 85a6 	bne.w	8013bca <_strtod_l+0xbd2>
 801307e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013080:	b1e3      	cbz	r3, 80130bc <_strtod_l+0xc4>
 8013082:	464a      	mov	r2, r9
 8013084:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8013088:	4610      	mov	r0, r2
 801308a:	4619      	mov	r1, r3
 801308c:	b021      	add	sp, #132	; 0x84
 801308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013092:	2a2b      	cmp	r2, #43	; 0x2b
 8013094:	d015      	beq.n	80130c2 <_strtod_l+0xca>
 8013096:	2a2d      	cmp	r2, #45	; 0x2d
 8013098:	d004      	beq.n	80130a4 <_strtod_l+0xac>
 801309a:	2a20      	cmp	r2, #32
 801309c:	d1ca      	bne.n	8013034 <_strtod_l+0x3c>
 801309e:	3301      	adds	r3, #1
 80130a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80130a2:	e7bf      	b.n	8013024 <_strtod_l+0x2c>
 80130a4:	2201      	movs	r2, #1
 80130a6:	920d      	str	r2, [sp, #52]	; 0x34
 80130a8:	1c5a      	adds	r2, r3, #1
 80130aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80130ac:	785b      	ldrb	r3, [r3, #1]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d1c2      	bne.n	8013038 <_strtod_l+0x40>
 80130b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f040 8585 	bne.w	8013bc6 <_strtod_l+0xbce>
 80130bc:	464a      	mov	r2, r9
 80130be:	4653      	mov	r3, sl
 80130c0:	e7e2      	b.n	8013088 <_strtod_l+0x90>
 80130c2:	2200      	movs	r2, #0
 80130c4:	e7ef      	b.n	80130a6 <_strtod_l+0xae>
 80130c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80130c8:	b13a      	cbz	r2, 80130da <_strtod_l+0xe2>
 80130ca:	2135      	movs	r1, #53	; 0x35
 80130cc:	a81e      	add	r0, sp, #120	; 0x78
 80130ce:	f002 fe32 	bl	8015d36 <__copybits>
 80130d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80130d4:	4658      	mov	r0, fp
 80130d6:	f002 faa5 	bl	8015624 <_Bfree>
 80130da:	3c01      	subs	r4, #1
 80130dc:	2c04      	cmp	r4, #4
 80130de:	d806      	bhi.n	80130ee <_strtod_l+0xf6>
 80130e0:	e8df f004 	tbb	[pc, r4]
 80130e4:	1714030a 	.word	0x1714030a
 80130e8:	0a          	.byte	0x0a
 80130e9:	00          	.byte	0x00
 80130ea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80130ee:	0731      	lsls	r1, r6, #28
 80130f0:	d5c1      	bpl.n	8013076 <_strtod_l+0x7e>
 80130f2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80130f6:	e7be      	b.n	8013076 <_strtod_l+0x7e>
 80130f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80130fa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80130fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013102:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013106:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 801310a:	e7f0      	b.n	80130ee <_strtod_l+0xf6>
 801310c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8013280 <_strtod_l+0x288>
 8013110:	e7ed      	b.n	80130ee <_strtod_l+0xf6>
 8013112:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013116:	f04f 39ff 	mov.w	r9, #4294967295
 801311a:	e7e8      	b.n	80130ee <_strtod_l+0xf6>
 801311c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801311e:	1c5a      	adds	r2, r3, #1
 8013120:	921b      	str	r2, [sp, #108]	; 0x6c
 8013122:	785b      	ldrb	r3, [r3, #1]
 8013124:	2b30      	cmp	r3, #48	; 0x30
 8013126:	d0f9      	beq.n	801311c <_strtod_l+0x124>
 8013128:	2b00      	cmp	r3, #0
 801312a:	d0a4      	beq.n	8013076 <_strtod_l+0x7e>
 801312c:	2301      	movs	r3, #1
 801312e:	2500      	movs	r5, #0
 8013130:	220a      	movs	r2, #10
 8013132:	9307      	str	r3, [sp, #28]
 8013134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013136:	9506      	str	r5, [sp, #24]
 8013138:	9308      	str	r3, [sp, #32]
 801313a:	9504      	str	r5, [sp, #16]
 801313c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801313e:	7807      	ldrb	r7, [r0, #0]
 8013140:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013144:	b2d9      	uxtb	r1, r3
 8013146:	2909      	cmp	r1, #9
 8013148:	d929      	bls.n	801319e <_strtod_l+0x1a6>
 801314a:	4622      	mov	r2, r4
 801314c:	f8d8 1000 	ldr.w	r1, [r8]
 8013150:	f003 f9c3 	bl	80164da <strncmp>
 8013154:	2800      	cmp	r0, #0
 8013156:	d031      	beq.n	80131bc <_strtod_l+0x1c4>
 8013158:	2000      	movs	r0, #0
 801315a:	463b      	mov	r3, r7
 801315c:	4602      	mov	r2, r0
 801315e:	9c04      	ldr	r4, [sp, #16]
 8013160:	9005      	str	r0, [sp, #20]
 8013162:	2b65      	cmp	r3, #101	; 0x65
 8013164:	d001      	beq.n	801316a <_strtod_l+0x172>
 8013166:	2b45      	cmp	r3, #69	; 0x45
 8013168:	d114      	bne.n	8013194 <_strtod_l+0x19c>
 801316a:	b924      	cbnz	r4, 8013176 <_strtod_l+0x17e>
 801316c:	b910      	cbnz	r0, 8013174 <_strtod_l+0x17c>
 801316e:	9b07      	ldr	r3, [sp, #28]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d09e      	beq.n	80130b2 <_strtod_l+0xba>
 8013174:	2400      	movs	r4, #0
 8013176:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013178:	1c73      	adds	r3, r6, #1
 801317a:	931b      	str	r3, [sp, #108]	; 0x6c
 801317c:	7873      	ldrb	r3, [r6, #1]
 801317e:	2b2b      	cmp	r3, #43	; 0x2b
 8013180:	d078      	beq.n	8013274 <_strtod_l+0x27c>
 8013182:	2b2d      	cmp	r3, #45	; 0x2d
 8013184:	d070      	beq.n	8013268 <_strtod_l+0x270>
 8013186:	f04f 0c00 	mov.w	ip, #0
 801318a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801318e:	2f09      	cmp	r7, #9
 8013190:	d97c      	bls.n	801328c <_strtod_l+0x294>
 8013192:	961b      	str	r6, [sp, #108]	; 0x6c
 8013194:	f04f 0e00 	mov.w	lr, #0
 8013198:	e09a      	b.n	80132d0 <_strtod_l+0x2d8>
 801319a:	2300      	movs	r3, #0
 801319c:	e7c7      	b.n	801312e <_strtod_l+0x136>
 801319e:	9904      	ldr	r1, [sp, #16]
 80131a0:	3001      	adds	r0, #1
 80131a2:	2908      	cmp	r1, #8
 80131a4:	bfd7      	itett	le
 80131a6:	9906      	ldrle	r1, [sp, #24]
 80131a8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80131ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80131b0:	9306      	strle	r3, [sp, #24]
 80131b2:	9b04      	ldr	r3, [sp, #16]
 80131b4:	901b      	str	r0, [sp, #108]	; 0x6c
 80131b6:	3301      	adds	r3, #1
 80131b8:	9304      	str	r3, [sp, #16]
 80131ba:	e7bf      	b.n	801313c <_strtod_l+0x144>
 80131bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131be:	191a      	adds	r2, r3, r4
 80131c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80131c2:	9a04      	ldr	r2, [sp, #16]
 80131c4:	5d1b      	ldrb	r3, [r3, r4]
 80131c6:	2a00      	cmp	r2, #0
 80131c8:	d037      	beq.n	801323a <_strtod_l+0x242>
 80131ca:	4602      	mov	r2, r0
 80131cc:	9c04      	ldr	r4, [sp, #16]
 80131ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80131d2:	2909      	cmp	r1, #9
 80131d4:	d913      	bls.n	80131fe <_strtod_l+0x206>
 80131d6:	2101      	movs	r1, #1
 80131d8:	9105      	str	r1, [sp, #20]
 80131da:	e7c2      	b.n	8013162 <_strtod_l+0x16a>
 80131dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80131de:	3001      	adds	r0, #1
 80131e0:	1c5a      	adds	r2, r3, #1
 80131e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80131e4:	785b      	ldrb	r3, [r3, #1]
 80131e6:	2b30      	cmp	r3, #48	; 0x30
 80131e8:	d0f8      	beq.n	80131dc <_strtod_l+0x1e4>
 80131ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80131ee:	2a08      	cmp	r2, #8
 80131f0:	f200 84f0 	bhi.w	8013bd4 <_strtod_l+0xbdc>
 80131f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80131f6:	9208      	str	r2, [sp, #32]
 80131f8:	4602      	mov	r2, r0
 80131fa:	2000      	movs	r0, #0
 80131fc:	4604      	mov	r4, r0
 80131fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013202:	f100 0101 	add.w	r1, r0, #1
 8013206:	d012      	beq.n	801322e <_strtod_l+0x236>
 8013208:	440a      	add	r2, r1
 801320a:	270a      	movs	r7, #10
 801320c:	4621      	mov	r1, r4
 801320e:	eb00 0c04 	add.w	ip, r0, r4
 8013212:	458c      	cmp	ip, r1
 8013214:	d113      	bne.n	801323e <_strtod_l+0x246>
 8013216:	1821      	adds	r1, r4, r0
 8013218:	2908      	cmp	r1, #8
 801321a:	f104 0401 	add.w	r4, r4, #1
 801321e:	4404      	add	r4, r0
 8013220:	dc19      	bgt.n	8013256 <_strtod_l+0x25e>
 8013222:	210a      	movs	r1, #10
 8013224:	9b06      	ldr	r3, [sp, #24]
 8013226:	fb01 e303 	mla	r3, r1, r3, lr
 801322a:	9306      	str	r3, [sp, #24]
 801322c:	2100      	movs	r1, #0
 801322e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013230:	1c58      	adds	r0, r3, #1
 8013232:	901b      	str	r0, [sp, #108]	; 0x6c
 8013234:	785b      	ldrb	r3, [r3, #1]
 8013236:	4608      	mov	r0, r1
 8013238:	e7c9      	b.n	80131ce <_strtod_l+0x1d6>
 801323a:	9804      	ldr	r0, [sp, #16]
 801323c:	e7d3      	b.n	80131e6 <_strtod_l+0x1ee>
 801323e:	2908      	cmp	r1, #8
 8013240:	f101 0101 	add.w	r1, r1, #1
 8013244:	dc03      	bgt.n	801324e <_strtod_l+0x256>
 8013246:	9b06      	ldr	r3, [sp, #24]
 8013248:	437b      	muls	r3, r7
 801324a:	9306      	str	r3, [sp, #24]
 801324c:	e7e1      	b.n	8013212 <_strtod_l+0x21a>
 801324e:	2910      	cmp	r1, #16
 8013250:	bfd8      	it	le
 8013252:	437d      	mulle	r5, r7
 8013254:	e7dd      	b.n	8013212 <_strtod_l+0x21a>
 8013256:	2c10      	cmp	r4, #16
 8013258:	bfdc      	itt	le
 801325a:	210a      	movle	r1, #10
 801325c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013260:	e7e4      	b.n	801322c <_strtod_l+0x234>
 8013262:	2301      	movs	r3, #1
 8013264:	9305      	str	r3, [sp, #20]
 8013266:	e781      	b.n	801316c <_strtod_l+0x174>
 8013268:	f04f 0c01 	mov.w	ip, #1
 801326c:	1cb3      	adds	r3, r6, #2
 801326e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013270:	78b3      	ldrb	r3, [r6, #2]
 8013272:	e78a      	b.n	801318a <_strtod_l+0x192>
 8013274:	f04f 0c00 	mov.w	ip, #0
 8013278:	e7f8      	b.n	801326c <_strtod_l+0x274>
 801327a:	bf00      	nop
 801327c:	0801a504 	.word	0x0801a504
 8013280:	7ff00000 	.word	0x7ff00000
 8013284:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013286:	1c5f      	adds	r7, r3, #1
 8013288:	971b      	str	r7, [sp, #108]	; 0x6c
 801328a:	785b      	ldrb	r3, [r3, #1]
 801328c:	2b30      	cmp	r3, #48	; 0x30
 801328e:	d0f9      	beq.n	8013284 <_strtod_l+0x28c>
 8013290:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013294:	2f08      	cmp	r7, #8
 8013296:	f63f af7d 	bhi.w	8013194 <_strtod_l+0x19c>
 801329a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801329e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132a0:	9309      	str	r3, [sp, #36]	; 0x24
 80132a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132a4:	1c5f      	adds	r7, r3, #1
 80132a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80132a8:	785b      	ldrb	r3, [r3, #1]
 80132aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80132ae:	f1b8 0f09 	cmp.w	r8, #9
 80132b2:	d937      	bls.n	8013324 <_strtod_l+0x32c>
 80132b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132b6:	1a7f      	subs	r7, r7, r1
 80132b8:	2f08      	cmp	r7, #8
 80132ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80132be:	dc37      	bgt.n	8013330 <_strtod_l+0x338>
 80132c0:	45be      	cmp	lr, r7
 80132c2:	bfa8      	it	ge
 80132c4:	46be      	movge	lr, r7
 80132c6:	f1bc 0f00 	cmp.w	ip, #0
 80132ca:	d001      	beq.n	80132d0 <_strtod_l+0x2d8>
 80132cc:	f1ce 0e00 	rsb	lr, lr, #0
 80132d0:	2c00      	cmp	r4, #0
 80132d2:	d151      	bne.n	8013378 <_strtod_l+0x380>
 80132d4:	2800      	cmp	r0, #0
 80132d6:	f47f aece 	bne.w	8013076 <_strtod_l+0x7e>
 80132da:	9a07      	ldr	r2, [sp, #28]
 80132dc:	2a00      	cmp	r2, #0
 80132de:	f47f aeca 	bne.w	8013076 <_strtod_l+0x7e>
 80132e2:	9a05      	ldr	r2, [sp, #20]
 80132e4:	2a00      	cmp	r2, #0
 80132e6:	f47f aee4 	bne.w	80130b2 <_strtod_l+0xba>
 80132ea:	2b4e      	cmp	r3, #78	; 0x4e
 80132ec:	d027      	beq.n	801333e <_strtod_l+0x346>
 80132ee:	dc21      	bgt.n	8013334 <_strtod_l+0x33c>
 80132f0:	2b49      	cmp	r3, #73	; 0x49
 80132f2:	f47f aede 	bne.w	80130b2 <_strtod_l+0xba>
 80132f6:	49a4      	ldr	r1, [pc, #656]	; (8013588 <_strtod_l+0x590>)
 80132f8:	a81b      	add	r0, sp, #108	; 0x6c
 80132fa:	f002 f81b 	bl	8015334 <__match>
 80132fe:	2800      	cmp	r0, #0
 8013300:	f43f aed7 	beq.w	80130b2 <_strtod_l+0xba>
 8013304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013306:	49a1      	ldr	r1, [pc, #644]	; (801358c <_strtod_l+0x594>)
 8013308:	3b01      	subs	r3, #1
 801330a:	a81b      	add	r0, sp, #108	; 0x6c
 801330c:	931b      	str	r3, [sp, #108]	; 0x6c
 801330e:	f002 f811 	bl	8015334 <__match>
 8013312:	b910      	cbnz	r0, 801331a <_strtod_l+0x322>
 8013314:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013316:	3301      	adds	r3, #1
 8013318:	931b      	str	r3, [sp, #108]	; 0x6c
 801331a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80135a0 <_strtod_l+0x5a8>
 801331e:	f04f 0900 	mov.w	r9, #0
 8013322:	e6a8      	b.n	8013076 <_strtod_l+0x7e>
 8013324:	210a      	movs	r1, #10
 8013326:	fb01 3e0e 	mla	lr, r1, lr, r3
 801332a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801332e:	e7b8      	b.n	80132a2 <_strtod_l+0x2aa>
 8013330:	46be      	mov	lr, r7
 8013332:	e7c8      	b.n	80132c6 <_strtod_l+0x2ce>
 8013334:	2b69      	cmp	r3, #105	; 0x69
 8013336:	d0de      	beq.n	80132f6 <_strtod_l+0x2fe>
 8013338:	2b6e      	cmp	r3, #110	; 0x6e
 801333a:	f47f aeba 	bne.w	80130b2 <_strtod_l+0xba>
 801333e:	4994      	ldr	r1, [pc, #592]	; (8013590 <_strtod_l+0x598>)
 8013340:	a81b      	add	r0, sp, #108	; 0x6c
 8013342:	f001 fff7 	bl	8015334 <__match>
 8013346:	2800      	cmp	r0, #0
 8013348:	f43f aeb3 	beq.w	80130b2 <_strtod_l+0xba>
 801334c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	2b28      	cmp	r3, #40	; 0x28
 8013352:	d10e      	bne.n	8013372 <_strtod_l+0x37a>
 8013354:	aa1e      	add	r2, sp, #120	; 0x78
 8013356:	498f      	ldr	r1, [pc, #572]	; (8013594 <_strtod_l+0x59c>)
 8013358:	a81b      	add	r0, sp, #108	; 0x6c
 801335a:	f001 ffff 	bl	801535c <__hexnan>
 801335e:	2805      	cmp	r0, #5
 8013360:	d107      	bne.n	8013372 <_strtod_l+0x37a>
 8013362:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013364:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8013368:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 801336c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8013370:	e681      	b.n	8013076 <_strtod_l+0x7e>
 8013372:	f8df a234 	ldr.w	sl, [pc, #564]	; 80135a8 <_strtod_l+0x5b0>
 8013376:	e7d2      	b.n	801331e <_strtod_l+0x326>
 8013378:	ebae 0302 	sub.w	r3, lr, r2
 801337c:	9307      	str	r3, [sp, #28]
 801337e:	9b04      	ldr	r3, [sp, #16]
 8013380:	9806      	ldr	r0, [sp, #24]
 8013382:	2b00      	cmp	r3, #0
 8013384:	bf08      	it	eq
 8013386:	4623      	moveq	r3, r4
 8013388:	2c10      	cmp	r4, #16
 801338a:	9304      	str	r3, [sp, #16]
 801338c:	46a0      	mov	r8, r4
 801338e:	bfa8      	it	ge
 8013390:	f04f 0810 	movge.w	r8, #16
 8013394:	f7ed f83e 	bl	8000414 <__aeabi_ui2d>
 8013398:	2c09      	cmp	r4, #9
 801339a:	4681      	mov	r9, r0
 801339c:	468a      	mov	sl, r1
 801339e:	dc13      	bgt.n	80133c8 <_strtod_l+0x3d0>
 80133a0:	9b07      	ldr	r3, [sp, #28]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	f43f ae67 	beq.w	8013076 <_strtod_l+0x7e>
 80133a8:	9b07      	ldr	r3, [sp, #28]
 80133aa:	dd7e      	ble.n	80134aa <_strtod_l+0x4b2>
 80133ac:	2b16      	cmp	r3, #22
 80133ae:	dc65      	bgt.n	801347c <_strtod_l+0x484>
 80133b0:	4a79      	ldr	r2, [pc, #484]	; (8013598 <_strtod_l+0x5a0>)
 80133b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80133b6:	464a      	mov	r2, r9
 80133b8:	e9de 0100 	ldrd	r0, r1, [lr]
 80133bc:	4653      	mov	r3, sl
 80133be:	f7ed f8a3 	bl	8000508 <__aeabi_dmul>
 80133c2:	4681      	mov	r9, r0
 80133c4:	468a      	mov	sl, r1
 80133c6:	e656      	b.n	8013076 <_strtod_l+0x7e>
 80133c8:	4b73      	ldr	r3, [pc, #460]	; (8013598 <_strtod_l+0x5a0>)
 80133ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80133ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80133d2:	f7ed f899 	bl	8000508 <__aeabi_dmul>
 80133d6:	4606      	mov	r6, r0
 80133d8:	4628      	mov	r0, r5
 80133da:	460f      	mov	r7, r1
 80133dc:	f7ed f81a 	bl	8000414 <__aeabi_ui2d>
 80133e0:	4602      	mov	r2, r0
 80133e2:	460b      	mov	r3, r1
 80133e4:	4630      	mov	r0, r6
 80133e6:	4639      	mov	r1, r7
 80133e8:	f7ec fed8 	bl	800019c <__adddf3>
 80133ec:	2c0f      	cmp	r4, #15
 80133ee:	4681      	mov	r9, r0
 80133f0:	468a      	mov	sl, r1
 80133f2:	ddd5      	ble.n	80133a0 <_strtod_l+0x3a8>
 80133f4:	9b07      	ldr	r3, [sp, #28]
 80133f6:	eba4 0808 	sub.w	r8, r4, r8
 80133fa:	4498      	add	r8, r3
 80133fc:	f1b8 0f00 	cmp.w	r8, #0
 8013400:	f340 809a 	ble.w	8013538 <_strtod_l+0x540>
 8013404:	f018 030f 	ands.w	r3, r8, #15
 8013408:	d00a      	beq.n	8013420 <_strtod_l+0x428>
 801340a:	4963      	ldr	r1, [pc, #396]	; (8013598 <_strtod_l+0x5a0>)
 801340c:	464a      	mov	r2, r9
 801340e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013416:	4653      	mov	r3, sl
 8013418:	f7ed f876 	bl	8000508 <__aeabi_dmul>
 801341c:	4681      	mov	r9, r0
 801341e:	468a      	mov	sl, r1
 8013420:	f038 080f 	bics.w	r8, r8, #15
 8013424:	d077      	beq.n	8013516 <_strtod_l+0x51e>
 8013426:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801342a:	dd4b      	ble.n	80134c4 <_strtod_l+0x4cc>
 801342c:	f04f 0800 	mov.w	r8, #0
 8013430:	f8cd 8010 	str.w	r8, [sp, #16]
 8013434:	f8cd 8020 	str.w	r8, [sp, #32]
 8013438:	f8cd 8018 	str.w	r8, [sp, #24]
 801343c:	2322      	movs	r3, #34	; 0x22
 801343e:	f04f 0900 	mov.w	r9, #0
 8013442:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80135a0 <_strtod_l+0x5a8>
 8013446:	f8cb 3000 	str.w	r3, [fp]
 801344a:	9b08      	ldr	r3, [sp, #32]
 801344c:	2b00      	cmp	r3, #0
 801344e:	f43f ae12 	beq.w	8013076 <_strtod_l+0x7e>
 8013452:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013454:	4658      	mov	r0, fp
 8013456:	f002 f8e5 	bl	8015624 <_Bfree>
 801345a:	9906      	ldr	r1, [sp, #24]
 801345c:	4658      	mov	r0, fp
 801345e:	f002 f8e1 	bl	8015624 <_Bfree>
 8013462:	9904      	ldr	r1, [sp, #16]
 8013464:	4658      	mov	r0, fp
 8013466:	f002 f8dd 	bl	8015624 <_Bfree>
 801346a:	9908      	ldr	r1, [sp, #32]
 801346c:	4658      	mov	r0, fp
 801346e:	f002 f8d9 	bl	8015624 <_Bfree>
 8013472:	4641      	mov	r1, r8
 8013474:	4658      	mov	r0, fp
 8013476:	f002 f8d5 	bl	8015624 <_Bfree>
 801347a:	e5fc      	b.n	8013076 <_strtod_l+0x7e>
 801347c:	9a07      	ldr	r2, [sp, #28]
 801347e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013482:	4293      	cmp	r3, r2
 8013484:	dbb6      	blt.n	80133f4 <_strtod_l+0x3fc>
 8013486:	4d44      	ldr	r5, [pc, #272]	; (8013598 <_strtod_l+0x5a0>)
 8013488:	f1c4 040f 	rsb	r4, r4, #15
 801348c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013490:	464a      	mov	r2, r9
 8013492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013496:	4653      	mov	r3, sl
 8013498:	f7ed f836 	bl	8000508 <__aeabi_dmul>
 801349c:	9b07      	ldr	r3, [sp, #28]
 801349e:	1b1c      	subs	r4, r3, r4
 80134a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80134a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80134a8:	e789      	b.n	80133be <_strtod_l+0x3c6>
 80134aa:	f113 0f16 	cmn.w	r3, #22
 80134ae:	dba1      	blt.n	80133f4 <_strtod_l+0x3fc>
 80134b0:	4a39      	ldr	r2, [pc, #228]	; (8013598 <_strtod_l+0x5a0>)
 80134b2:	4648      	mov	r0, r9
 80134b4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80134b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80134bc:	4651      	mov	r1, sl
 80134be:	f7ed f94d 	bl	800075c <__aeabi_ddiv>
 80134c2:	e77e      	b.n	80133c2 <_strtod_l+0x3ca>
 80134c4:	2300      	movs	r3, #0
 80134c6:	4648      	mov	r0, r9
 80134c8:	4651      	mov	r1, sl
 80134ca:	461d      	mov	r5, r3
 80134cc:	4e33      	ldr	r6, [pc, #204]	; (801359c <_strtod_l+0x5a4>)
 80134ce:	ea4f 1828 	mov.w	r8, r8, asr #4
 80134d2:	f1b8 0f01 	cmp.w	r8, #1
 80134d6:	dc21      	bgt.n	801351c <_strtod_l+0x524>
 80134d8:	b10b      	cbz	r3, 80134de <_strtod_l+0x4e6>
 80134da:	4681      	mov	r9, r0
 80134dc:	468a      	mov	sl, r1
 80134de:	4b2f      	ldr	r3, [pc, #188]	; (801359c <_strtod_l+0x5a4>)
 80134e0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80134e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80134e8:	464a      	mov	r2, r9
 80134ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80134ee:	4653      	mov	r3, sl
 80134f0:	f7ed f80a 	bl	8000508 <__aeabi_dmul>
 80134f4:	4b2a      	ldr	r3, [pc, #168]	; (80135a0 <_strtod_l+0x5a8>)
 80134f6:	460a      	mov	r2, r1
 80134f8:	400b      	ands	r3, r1
 80134fa:	492a      	ldr	r1, [pc, #168]	; (80135a4 <_strtod_l+0x5ac>)
 80134fc:	4681      	mov	r9, r0
 80134fe:	428b      	cmp	r3, r1
 8013500:	d894      	bhi.n	801342c <_strtod_l+0x434>
 8013502:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013506:	428b      	cmp	r3, r1
 8013508:	bf86      	itte	hi
 801350a:	f04f 39ff 	movhi.w	r9, #4294967295
 801350e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80135ac <_strtod_l+0x5b4>
 8013512:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8013516:	2300      	movs	r3, #0
 8013518:	9305      	str	r3, [sp, #20]
 801351a:	e07b      	b.n	8013614 <_strtod_l+0x61c>
 801351c:	f018 0f01 	tst.w	r8, #1
 8013520:	d006      	beq.n	8013530 <_strtod_l+0x538>
 8013522:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352a:	f7ec ffed 	bl	8000508 <__aeabi_dmul>
 801352e:	2301      	movs	r3, #1
 8013530:	3501      	adds	r5, #1
 8013532:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013536:	e7cc      	b.n	80134d2 <_strtod_l+0x4da>
 8013538:	d0ed      	beq.n	8013516 <_strtod_l+0x51e>
 801353a:	f1c8 0800 	rsb	r8, r8, #0
 801353e:	f018 020f 	ands.w	r2, r8, #15
 8013542:	d00a      	beq.n	801355a <_strtod_l+0x562>
 8013544:	4b14      	ldr	r3, [pc, #80]	; (8013598 <_strtod_l+0x5a0>)
 8013546:	4648      	mov	r0, r9
 8013548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801354c:	4651      	mov	r1, sl
 801354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013552:	f7ed f903 	bl	800075c <__aeabi_ddiv>
 8013556:	4681      	mov	r9, r0
 8013558:	468a      	mov	sl, r1
 801355a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801355e:	d0da      	beq.n	8013516 <_strtod_l+0x51e>
 8013560:	f1b8 0f1f 	cmp.w	r8, #31
 8013564:	dd24      	ble.n	80135b0 <_strtod_l+0x5b8>
 8013566:	f04f 0800 	mov.w	r8, #0
 801356a:	f8cd 8010 	str.w	r8, [sp, #16]
 801356e:	f8cd 8020 	str.w	r8, [sp, #32]
 8013572:	f8cd 8018 	str.w	r8, [sp, #24]
 8013576:	2322      	movs	r3, #34	; 0x22
 8013578:	f04f 0900 	mov.w	r9, #0
 801357c:	f04f 0a00 	mov.w	sl, #0
 8013580:	f8cb 3000 	str.w	r3, [fp]
 8013584:	e761      	b.n	801344a <_strtod_l+0x452>
 8013586:	bf00      	nop
 8013588:	0801a4cd 	.word	0x0801a4cd
 801358c:	0801a55b 	.word	0x0801a55b
 8013590:	0801a4d5 	.word	0x0801a4d5
 8013594:	0801a518 	.word	0x0801a518
 8013598:	0801a600 	.word	0x0801a600
 801359c:	0801a5d8 	.word	0x0801a5d8
 80135a0:	7ff00000 	.word	0x7ff00000
 80135a4:	7ca00000 	.word	0x7ca00000
 80135a8:	fff80000 	.word	0xfff80000
 80135ac:	7fefffff 	.word	0x7fefffff
 80135b0:	f018 0310 	ands.w	r3, r8, #16
 80135b4:	bf18      	it	ne
 80135b6:	236a      	movne	r3, #106	; 0x6a
 80135b8:	4648      	mov	r0, r9
 80135ba:	9305      	str	r3, [sp, #20]
 80135bc:	4651      	mov	r1, sl
 80135be:	2300      	movs	r3, #0
 80135c0:	4da1      	ldr	r5, [pc, #644]	; (8013848 <_strtod_l+0x850>)
 80135c2:	f1b8 0f00 	cmp.w	r8, #0
 80135c6:	f300 8113 	bgt.w	80137f0 <_strtod_l+0x7f8>
 80135ca:	b10b      	cbz	r3, 80135d0 <_strtod_l+0x5d8>
 80135cc:	4681      	mov	r9, r0
 80135ce:	468a      	mov	sl, r1
 80135d0:	9b05      	ldr	r3, [sp, #20]
 80135d2:	b1bb      	cbz	r3, 8013604 <_strtod_l+0x60c>
 80135d4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80135d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80135dc:	2b00      	cmp	r3, #0
 80135de:	4651      	mov	r1, sl
 80135e0:	dd10      	ble.n	8013604 <_strtod_l+0x60c>
 80135e2:	2b1f      	cmp	r3, #31
 80135e4:	f340 8110 	ble.w	8013808 <_strtod_l+0x810>
 80135e8:	2b34      	cmp	r3, #52	; 0x34
 80135ea:	bfd8      	it	le
 80135ec:	f04f 32ff 	movle.w	r2, #4294967295
 80135f0:	f04f 0900 	mov.w	r9, #0
 80135f4:	bfcf      	iteee	gt
 80135f6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80135fa:	3b20      	suble	r3, #32
 80135fc:	fa02 f303 	lslle.w	r3, r2, r3
 8013600:	ea03 0a01 	andle.w	sl, r3, r1
 8013604:	2200      	movs	r2, #0
 8013606:	2300      	movs	r3, #0
 8013608:	4648      	mov	r0, r9
 801360a:	4651      	mov	r1, sl
 801360c:	f7ed f9e4 	bl	80009d8 <__aeabi_dcmpeq>
 8013610:	2800      	cmp	r0, #0
 8013612:	d1a8      	bne.n	8013566 <_strtod_l+0x56e>
 8013614:	9b06      	ldr	r3, [sp, #24]
 8013616:	9a04      	ldr	r2, [sp, #16]
 8013618:	9300      	str	r3, [sp, #0]
 801361a:	9908      	ldr	r1, [sp, #32]
 801361c:	4623      	mov	r3, r4
 801361e:	4658      	mov	r0, fp
 8013620:	f002 f852 	bl	80156c8 <__s2b>
 8013624:	9008      	str	r0, [sp, #32]
 8013626:	2800      	cmp	r0, #0
 8013628:	f43f af00 	beq.w	801342c <_strtod_l+0x434>
 801362c:	9a07      	ldr	r2, [sp, #28]
 801362e:	9b07      	ldr	r3, [sp, #28]
 8013630:	2a00      	cmp	r2, #0
 8013632:	f1c3 0300 	rsb	r3, r3, #0
 8013636:	bfa8      	it	ge
 8013638:	2300      	movge	r3, #0
 801363a:	f04f 0800 	mov.w	r8, #0
 801363e:	930e      	str	r3, [sp, #56]	; 0x38
 8013640:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013644:	9316      	str	r3, [sp, #88]	; 0x58
 8013646:	f8cd 8010 	str.w	r8, [sp, #16]
 801364a:	9b08      	ldr	r3, [sp, #32]
 801364c:	4658      	mov	r0, fp
 801364e:	6859      	ldr	r1, [r3, #4]
 8013650:	f001 ffb4 	bl	80155bc <_Balloc>
 8013654:	9006      	str	r0, [sp, #24]
 8013656:	2800      	cmp	r0, #0
 8013658:	f43f aef0 	beq.w	801343c <_strtod_l+0x444>
 801365c:	9b08      	ldr	r3, [sp, #32]
 801365e:	300c      	adds	r0, #12
 8013660:	691a      	ldr	r2, [r3, #16]
 8013662:	f103 010c 	add.w	r1, r3, #12
 8013666:	3202      	adds	r2, #2
 8013668:	0092      	lsls	r2, r2, #2
 801366a:	f7fe fdbf 	bl	80121ec <memcpy>
 801366e:	ab1e      	add	r3, sp, #120	; 0x78
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	ab1d      	add	r3, sp, #116	; 0x74
 8013674:	9300      	str	r3, [sp, #0]
 8013676:	464a      	mov	r2, r9
 8013678:	4653      	mov	r3, sl
 801367a:	4658      	mov	r0, fp
 801367c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8013680:	f002 fadc 	bl	8015c3c <__d2b>
 8013684:	901c      	str	r0, [sp, #112]	; 0x70
 8013686:	2800      	cmp	r0, #0
 8013688:	f43f aed8 	beq.w	801343c <_strtod_l+0x444>
 801368c:	2101      	movs	r1, #1
 801368e:	4658      	mov	r0, fp
 8013690:	f002 f8a6 	bl	80157e0 <__i2b>
 8013694:	9004      	str	r0, [sp, #16]
 8013696:	4603      	mov	r3, r0
 8013698:	2800      	cmp	r0, #0
 801369a:	f43f aecf 	beq.w	801343c <_strtod_l+0x444>
 801369e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80136a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80136a2:	2d00      	cmp	r5, #0
 80136a4:	bfab      	itete	ge
 80136a6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80136a8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80136aa:	18ee      	addge	r6, r5, r3
 80136ac:	1b5c      	sublt	r4, r3, r5
 80136ae:	9b05      	ldr	r3, [sp, #20]
 80136b0:	bfa8      	it	ge
 80136b2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80136b4:	eba5 0503 	sub.w	r5, r5, r3
 80136b8:	4415      	add	r5, r2
 80136ba:	4b64      	ldr	r3, [pc, #400]	; (801384c <_strtod_l+0x854>)
 80136bc:	f105 35ff 	add.w	r5, r5, #4294967295
 80136c0:	bfb8      	it	lt
 80136c2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80136c4:	429d      	cmp	r5, r3
 80136c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80136ca:	f280 80af 	bge.w	801382c <_strtod_l+0x834>
 80136ce:	1b5b      	subs	r3, r3, r5
 80136d0:	2b1f      	cmp	r3, #31
 80136d2:	eba2 0203 	sub.w	r2, r2, r3
 80136d6:	f04f 0701 	mov.w	r7, #1
 80136da:	f300 809c 	bgt.w	8013816 <_strtod_l+0x81e>
 80136de:	2500      	movs	r5, #0
 80136e0:	fa07 f303 	lsl.w	r3, r7, r3
 80136e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80136e6:	18b7      	adds	r7, r6, r2
 80136e8:	9b05      	ldr	r3, [sp, #20]
 80136ea:	42be      	cmp	r6, r7
 80136ec:	4414      	add	r4, r2
 80136ee:	441c      	add	r4, r3
 80136f0:	4633      	mov	r3, r6
 80136f2:	bfa8      	it	ge
 80136f4:	463b      	movge	r3, r7
 80136f6:	42a3      	cmp	r3, r4
 80136f8:	bfa8      	it	ge
 80136fa:	4623      	movge	r3, r4
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	bfc2      	ittt	gt
 8013700:	1aff      	subgt	r7, r7, r3
 8013702:	1ae4      	subgt	r4, r4, r3
 8013704:	1af6      	subgt	r6, r6, r3
 8013706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013708:	b1bb      	cbz	r3, 801373a <_strtod_l+0x742>
 801370a:	461a      	mov	r2, r3
 801370c:	9904      	ldr	r1, [sp, #16]
 801370e:	4658      	mov	r0, fp
 8013710:	f002 f904 	bl	801591c <__pow5mult>
 8013714:	9004      	str	r0, [sp, #16]
 8013716:	2800      	cmp	r0, #0
 8013718:	f43f ae90 	beq.w	801343c <_strtod_l+0x444>
 801371c:	4601      	mov	r1, r0
 801371e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013720:	4658      	mov	r0, fp
 8013722:	f002 f866 	bl	80157f2 <__multiply>
 8013726:	9009      	str	r0, [sp, #36]	; 0x24
 8013728:	2800      	cmp	r0, #0
 801372a:	f43f ae87 	beq.w	801343c <_strtod_l+0x444>
 801372e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013730:	4658      	mov	r0, fp
 8013732:	f001 ff77 	bl	8015624 <_Bfree>
 8013736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013738:	931c      	str	r3, [sp, #112]	; 0x70
 801373a:	2f00      	cmp	r7, #0
 801373c:	dc7a      	bgt.n	8013834 <_strtod_l+0x83c>
 801373e:	9b07      	ldr	r3, [sp, #28]
 8013740:	2b00      	cmp	r3, #0
 8013742:	dd08      	ble.n	8013756 <_strtod_l+0x75e>
 8013744:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013746:	9906      	ldr	r1, [sp, #24]
 8013748:	4658      	mov	r0, fp
 801374a:	f002 f8e7 	bl	801591c <__pow5mult>
 801374e:	9006      	str	r0, [sp, #24]
 8013750:	2800      	cmp	r0, #0
 8013752:	f43f ae73 	beq.w	801343c <_strtod_l+0x444>
 8013756:	2c00      	cmp	r4, #0
 8013758:	dd08      	ble.n	801376c <_strtod_l+0x774>
 801375a:	4622      	mov	r2, r4
 801375c:	9906      	ldr	r1, [sp, #24]
 801375e:	4658      	mov	r0, fp
 8013760:	f002 f92a 	bl	80159b8 <__lshift>
 8013764:	9006      	str	r0, [sp, #24]
 8013766:	2800      	cmp	r0, #0
 8013768:	f43f ae68 	beq.w	801343c <_strtod_l+0x444>
 801376c:	2e00      	cmp	r6, #0
 801376e:	dd08      	ble.n	8013782 <_strtod_l+0x78a>
 8013770:	4632      	mov	r2, r6
 8013772:	9904      	ldr	r1, [sp, #16]
 8013774:	4658      	mov	r0, fp
 8013776:	f002 f91f 	bl	80159b8 <__lshift>
 801377a:	9004      	str	r0, [sp, #16]
 801377c:	2800      	cmp	r0, #0
 801377e:	f43f ae5d 	beq.w	801343c <_strtod_l+0x444>
 8013782:	9a06      	ldr	r2, [sp, #24]
 8013784:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013786:	4658      	mov	r0, fp
 8013788:	f002 f984 	bl	8015a94 <__mdiff>
 801378c:	4680      	mov	r8, r0
 801378e:	2800      	cmp	r0, #0
 8013790:	f43f ae54 	beq.w	801343c <_strtod_l+0x444>
 8013794:	2400      	movs	r4, #0
 8013796:	68c3      	ldr	r3, [r0, #12]
 8013798:	9904      	ldr	r1, [sp, #16]
 801379a:	60c4      	str	r4, [r0, #12]
 801379c:	930c      	str	r3, [sp, #48]	; 0x30
 801379e:	f002 f95f 	bl	8015a60 <__mcmp>
 80137a2:	42a0      	cmp	r0, r4
 80137a4:	da54      	bge.n	8013850 <_strtod_l+0x858>
 80137a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137a8:	b9f3      	cbnz	r3, 80137e8 <_strtod_l+0x7f0>
 80137aa:	f1b9 0f00 	cmp.w	r9, #0
 80137ae:	d11b      	bne.n	80137e8 <_strtod_l+0x7f0>
 80137b0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80137b4:	b9c3      	cbnz	r3, 80137e8 <_strtod_l+0x7f0>
 80137b6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80137ba:	0d1b      	lsrs	r3, r3, #20
 80137bc:	051b      	lsls	r3, r3, #20
 80137be:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80137c2:	d911      	bls.n	80137e8 <_strtod_l+0x7f0>
 80137c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80137c8:	b91b      	cbnz	r3, 80137d2 <_strtod_l+0x7da>
 80137ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80137ce:	2b01      	cmp	r3, #1
 80137d0:	dd0a      	ble.n	80137e8 <_strtod_l+0x7f0>
 80137d2:	4641      	mov	r1, r8
 80137d4:	2201      	movs	r2, #1
 80137d6:	4658      	mov	r0, fp
 80137d8:	f002 f8ee 	bl	80159b8 <__lshift>
 80137dc:	9904      	ldr	r1, [sp, #16]
 80137de:	4680      	mov	r8, r0
 80137e0:	f002 f93e 	bl	8015a60 <__mcmp>
 80137e4:	2800      	cmp	r0, #0
 80137e6:	dc68      	bgt.n	80138ba <_strtod_l+0x8c2>
 80137e8:	9b05      	ldr	r3, [sp, #20]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d172      	bne.n	80138d4 <_strtod_l+0x8dc>
 80137ee:	e630      	b.n	8013452 <_strtod_l+0x45a>
 80137f0:	f018 0f01 	tst.w	r8, #1
 80137f4:	d004      	beq.n	8013800 <_strtod_l+0x808>
 80137f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80137fa:	f7ec fe85 	bl	8000508 <__aeabi_dmul>
 80137fe:	2301      	movs	r3, #1
 8013800:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013804:	3508      	adds	r5, #8
 8013806:	e6dc      	b.n	80135c2 <_strtod_l+0x5ca>
 8013808:	f04f 32ff 	mov.w	r2, #4294967295
 801380c:	fa02 f303 	lsl.w	r3, r2, r3
 8013810:	ea03 0909 	and.w	r9, r3, r9
 8013814:	e6f6      	b.n	8013604 <_strtod_l+0x60c>
 8013816:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801381a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801381e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8013822:	35e2      	adds	r5, #226	; 0xe2
 8013824:	fa07 f505 	lsl.w	r5, r7, r5
 8013828:	970f      	str	r7, [sp, #60]	; 0x3c
 801382a:	e75c      	b.n	80136e6 <_strtod_l+0x6ee>
 801382c:	2301      	movs	r3, #1
 801382e:	2500      	movs	r5, #0
 8013830:	930f      	str	r3, [sp, #60]	; 0x3c
 8013832:	e758      	b.n	80136e6 <_strtod_l+0x6ee>
 8013834:	463a      	mov	r2, r7
 8013836:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013838:	4658      	mov	r0, fp
 801383a:	f002 f8bd 	bl	80159b8 <__lshift>
 801383e:	901c      	str	r0, [sp, #112]	; 0x70
 8013840:	2800      	cmp	r0, #0
 8013842:	f47f af7c 	bne.w	801373e <_strtod_l+0x746>
 8013846:	e5f9      	b.n	801343c <_strtod_l+0x444>
 8013848:	0801a530 	.word	0x0801a530
 801384c:	fffffc02 	.word	0xfffffc02
 8013850:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013854:	f040 8089 	bne.w	801396a <_strtod_l+0x972>
 8013858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801385a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801385e:	b342      	cbz	r2, 80138b2 <_strtod_l+0x8ba>
 8013860:	4aaf      	ldr	r2, [pc, #700]	; (8013b20 <_strtod_l+0xb28>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d156      	bne.n	8013914 <_strtod_l+0x91c>
 8013866:	9b05      	ldr	r3, [sp, #20]
 8013868:	4648      	mov	r0, r9
 801386a:	b1eb      	cbz	r3, 80138a8 <_strtod_l+0x8b0>
 801386c:	4653      	mov	r3, sl
 801386e:	4aad      	ldr	r2, [pc, #692]	; (8013b24 <_strtod_l+0xb2c>)
 8013870:	f04f 31ff 	mov.w	r1, #4294967295
 8013874:	401a      	ands	r2, r3
 8013876:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801387a:	d818      	bhi.n	80138ae <_strtod_l+0x8b6>
 801387c:	0d12      	lsrs	r2, r2, #20
 801387e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013882:	fa01 f303 	lsl.w	r3, r1, r3
 8013886:	4298      	cmp	r0, r3
 8013888:	d144      	bne.n	8013914 <_strtod_l+0x91c>
 801388a:	4ba7      	ldr	r3, [pc, #668]	; (8013b28 <_strtod_l+0xb30>)
 801388c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801388e:	429a      	cmp	r2, r3
 8013890:	d102      	bne.n	8013898 <_strtod_l+0x8a0>
 8013892:	3001      	adds	r0, #1
 8013894:	f43f add2 	beq.w	801343c <_strtod_l+0x444>
 8013898:	4ba2      	ldr	r3, [pc, #648]	; (8013b24 <_strtod_l+0xb2c>)
 801389a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801389c:	f04f 0900 	mov.w	r9, #0
 80138a0:	401a      	ands	r2, r3
 80138a2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80138a6:	e79f      	b.n	80137e8 <_strtod_l+0x7f0>
 80138a8:	f04f 33ff 	mov.w	r3, #4294967295
 80138ac:	e7eb      	b.n	8013886 <_strtod_l+0x88e>
 80138ae:	460b      	mov	r3, r1
 80138b0:	e7e9      	b.n	8013886 <_strtod_l+0x88e>
 80138b2:	bb7b      	cbnz	r3, 8013914 <_strtod_l+0x91c>
 80138b4:	f1b9 0f00 	cmp.w	r9, #0
 80138b8:	d12c      	bne.n	8013914 <_strtod_l+0x91c>
 80138ba:	9905      	ldr	r1, [sp, #20]
 80138bc:	4653      	mov	r3, sl
 80138be:	4a99      	ldr	r2, [pc, #612]	; (8013b24 <_strtod_l+0xb2c>)
 80138c0:	b1f1      	cbz	r1, 8013900 <_strtod_l+0x908>
 80138c2:	ea02 010a 	and.w	r1, r2, sl
 80138c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80138ca:	dc19      	bgt.n	8013900 <_strtod_l+0x908>
 80138cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80138d0:	f77f ae51 	ble.w	8013576 <_strtod_l+0x57e>
 80138d4:	2300      	movs	r3, #0
 80138d6:	4a95      	ldr	r2, [pc, #596]	; (8013b2c <_strtod_l+0xb34>)
 80138d8:	4648      	mov	r0, r9
 80138da:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80138de:	4651      	mov	r1, sl
 80138e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80138e4:	f7ec fe10 	bl	8000508 <__aeabi_dmul>
 80138e8:	4681      	mov	r9, r0
 80138ea:	468a      	mov	sl, r1
 80138ec:	2900      	cmp	r1, #0
 80138ee:	f47f adb0 	bne.w	8013452 <_strtod_l+0x45a>
 80138f2:	2800      	cmp	r0, #0
 80138f4:	f47f adad 	bne.w	8013452 <_strtod_l+0x45a>
 80138f8:	2322      	movs	r3, #34	; 0x22
 80138fa:	f8cb 3000 	str.w	r3, [fp]
 80138fe:	e5a8      	b.n	8013452 <_strtod_l+0x45a>
 8013900:	4013      	ands	r3, r2
 8013902:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013906:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 801390a:	f04f 39ff 	mov.w	r9, #4294967295
 801390e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8013912:	e769      	b.n	80137e8 <_strtod_l+0x7f0>
 8013914:	b19d      	cbz	r5, 801393e <_strtod_l+0x946>
 8013916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013918:	421d      	tst	r5, r3
 801391a:	f43f af65 	beq.w	80137e8 <_strtod_l+0x7f0>
 801391e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013920:	9a05      	ldr	r2, [sp, #20]
 8013922:	4648      	mov	r0, r9
 8013924:	4651      	mov	r1, sl
 8013926:	b173      	cbz	r3, 8013946 <_strtod_l+0x94e>
 8013928:	f7ff fb42 	bl	8012fb0 <sulp>
 801392c:	4602      	mov	r2, r0
 801392e:	460b      	mov	r3, r1
 8013930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013934:	f7ec fc32 	bl	800019c <__adddf3>
 8013938:	4681      	mov	r9, r0
 801393a:	468a      	mov	sl, r1
 801393c:	e754      	b.n	80137e8 <_strtod_l+0x7f0>
 801393e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013940:	ea13 0f09 	tst.w	r3, r9
 8013944:	e7e9      	b.n	801391a <_strtod_l+0x922>
 8013946:	f7ff fb33 	bl	8012fb0 <sulp>
 801394a:	4602      	mov	r2, r0
 801394c:	460b      	mov	r3, r1
 801394e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013952:	f7ec fc21 	bl	8000198 <__aeabi_dsub>
 8013956:	2200      	movs	r2, #0
 8013958:	2300      	movs	r3, #0
 801395a:	4681      	mov	r9, r0
 801395c:	468a      	mov	sl, r1
 801395e:	f7ed f83b 	bl	80009d8 <__aeabi_dcmpeq>
 8013962:	2800      	cmp	r0, #0
 8013964:	f47f ae07 	bne.w	8013576 <_strtod_l+0x57e>
 8013968:	e73e      	b.n	80137e8 <_strtod_l+0x7f0>
 801396a:	9904      	ldr	r1, [sp, #16]
 801396c:	4640      	mov	r0, r8
 801396e:	f002 f9b4 	bl	8015cda <__ratio>
 8013972:	2200      	movs	r2, #0
 8013974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013978:	4606      	mov	r6, r0
 801397a:	460f      	mov	r7, r1
 801397c:	f7ed f840 	bl	8000a00 <__aeabi_dcmple>
 8013980:	2800      	cmp	r0, #0
 8013982:	d075      	beq.n	8013a70 <_strtod_l+0xa78>
 8013984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013986:	2b00      	cmp	r3, #0
 8013988:	d047      	beq.n	8013a1a <_strtod_l+0xa22>
 801398a:	2600      	movs	r6, #0
 801398c:	4f68      	ldr	r7, [pc, #416]	; (8013b30 <_strtod_l+0xb38>)
 801398e:	4d68      	ldr	r5, [pc, #416]	; (8013b30 <_strtod_l+0xb38>)
 8013990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013996:	0d1b      	lsrs	r3, r3, #20
 8013998:	051b      	lsls	r3, r3, #20
 801399a:	930f      	str	r3, [sp, #60]	; 0x3c
 801399c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801399e:	4b65      	ldr	r3, [pc, #404]	; (8013b34 <_strtod_l+0xb3c>)
 80139a0:	429a      	cmp	r2, r3
 80139a2:	f040 80cf 	bne.w	8013b44 <_strtod_l+0xb4c>
 80139a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80139aa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80139ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139b0:	4648      	mov	r0, r9
 80139b2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80139b6:	4651      	mov	r1, sl
 80139b8:	f002 f8ca 	bl	8015b50 <__ulp>
 80139bc:	4602      	mov	r2, r0
 80139be:	460b      	mov	r3, r1
 80139c0:	4630      	mov	r0, r6
 80139c2:	4639      	mov	r1, r7
 80139c4:	f7ec fda0 	bl	8000508 <__aeabi_dmul>
 80139c8:	464a      	mov	r2, r9
 80139ca:	4653      	mov	r3, sl
 80139cc:	f7ec fbe6 	bl	800019c <__adddf3>
 80139d0:	460b      	mov	r3, r1
 80139d2:	4954      	ldr	r1, [pc, #336]	; (8013b24 <_strtod_l+0xb2c>)
 80139d4:	4a58      	ldr	r2, [pc, #352]	; (8013b38 <_strtod_l+0xb40>)
 80139d6:	4019      	ands	r1, r3
 80139d8:	4291      	cmp	r1, r2
 80139da:	4681      	mov	r9, r0
 80139dc:	d95e      	bls.n	8013a9c <_strtod_l+0xaa4>
 80139de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d103      	bne.n	80139f0 <_strtod_l+0x9f8>
 80139e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ea:	3301      	adds	r3, #1
 80139ec:	f43f ad26 	beq.w	801343c <_strtod_l+0x444>
 80139f0:	f04f 39ff 	mov.w	r9, #4294967295
 80139f4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8013b28 <_strtod_l+0xb30>
 80139f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80139fa:	4658      	mov	r0, fp
 80139fc:	f001 fe12 	bl	8015624 <_Bfree>
 8013a00:	9906      	ldr	r1, [sp, #24]
 8013a02:	4658      	mov	r0, fp
 8013a04:	f001 fe0e 	bl	8015624 <_Bfree>
 8013a08:	9904      	ldr	r1, [sp, #16]
 8013a0a:	4658      	mov	r0, fp
 8013a0c:	f001 fe0a 	bl	8015624 <_Bfree>
 8013a10:	4641      	mov	r1, r8
 8013a12:	4658      	mov	r0, fp
 8013a14:	f001 fe06 	bl	8015624 <_Bfree>
 8013a18:	e617      	b.n	801364a <_strtod_l+0x652>
 8013a1a:	f1b9 0f00 	cmp.w	r9, #0
 8013a1e:	d119      	bne.n	8013a54 <_strtod_l+0xa5c>
 8013a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a26:	b9e3      	cbnz	r3, 8013a62 <_strtod_l+0xa6a>
 8013a28:	2200      	movs	r2, #0
 8013a2a:	4b41      	ldr	r3, [pc, #260]	; (8013b30 <_strtod_l+0xb38>)
 8013a2c:	4630      	mov	r0, r6
 8013a2e:	4639      	mov	r1, r7
 8013a30:	f7ec ffdc 	bl	80009ec <__aeabi_dcmplt>
 8013a34:	b9c8      	cbnz	r0, 8013a6a <_strtod_l+0xa72>
 8013a36:	2200      	movs	r2, #0
 8013a38:	4b40      	ldr	r3, [pc, #256]	; (8013b3c <_strtod_l+0xb44>)
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	4639      	mov	r1, r7
 8013a3e:	f7ec fd63 	bl	8000508 <__aeabi_dmul>
 8013a42:	4604      	mov	r4, r0
 8013a44:	460d      	mov	r5, r1
 8013a46:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013a4a:	9418      	str	r4, [sp, #96]	; 0x60
 8013a4c:	9319      	str	r3, [sp, #100]	; 0x64
 8013a4e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8013a52:	e79d      	b.n	8013990 <_strtod_l+0x998>
 8013a54:	f1b9 0f01 	cmp.w	r9, #1
 8013a58:	d103      	bne.n	8013a62 <_strtod_l+0xa6a>
 8013a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	f43f ad8a 	beq.w	8013576 <_strtod_l+0x57e>
 8013a62:	2600      	movs	r6, #0
 8013a64:	4f36      	ldr	r7, [pc, #216]	; (8013b40 <_strtod_l+0xb48>)
 8013a66:	2400      	movs	r4, #0
 8013a68:	e791      	b.n	801398e <_strtod_l+0x996>
 8013a6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013a6c:	4d33      	ldr	r5, [pc, #204]	; (8013b3c <_strtod_l+0xb44>)
 8013a6e:	e7ea      	b.n	8013a46 <_strtod_l+0xa4e>
 8013a70:	4b32      	ldr	r3, [pc, #200]	; (8013b3c <_strtod_l+0xb44>)
 8013a72:	2200      	movs	r2, #0
 8013a74:	4630      	mov	r0, r6
 8013a76:	4639      	mov	r1, r7
 8013a78:	f7ec fd46 	bl	8000508 <__aeabi_dmul>
 8013a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a7e:	4604      	mov	r4, r0
 8013a80:	460d      	mov	r5, r1
 8013a82:	b933      	cbnz	r3, 8013a92 <_strtod_l+0xa9a>
 8013a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a88:	9010      	str	r0, [sp, #64]	; 0x40
 8013a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8013a8c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013a90:	e77e      	b.n	8013990 <_strtod_l+0x998>
 8013a92:	4602      	mov	r2, r0
 8013a94:	460b      	mov	r3, r1
 8013a96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8013a9a:	e7f7      	b.n	8013a8c <_strtod_l+0xa94>
 8013a9c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8013aa0:	9b05      	ldr	r3, [sp, #20]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1a8      	bne.n	80139f8 <_strtod_l+0xa00>
 8013aa6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8013aaa:	0d1b      	lsrs	r3, r3, #20
 8013aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013aae:	051b      	lsls	r3, r3, #20
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	4656      	mov	r6, sl
 8013ab4:	d1a0      	bne.n	80139f8 <_strtod_l+0xa00>
 8013ab6:	4629      	mov	r1, r5
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f7ec ffd5 	bl	8000a68 <__aeabi_d2iz>
 8013abe:	f7ec fcb9 	bl	8000434 <__aeabi_i2d>
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	4629      	mov	r1, r5
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f7ec fb65 	bl	8000198 <__aeabi_dsub>
 8013ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ad0:	4604      	mov	r4, r0
 8013ad2:	460d      	mov	r5, r1
 8013ad4:	b933      	cbnz	r3, 8013ae4 <_strtod_l+0xaec>
 8013ad6:	f1b9 0f00 	cmp.w	r9, #0
 8013ada:	d103      	bne.n	8013ae4 <_strtod_l+0xaec>
 8013adc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8013ae0:	2e00      	cmp	r6, #0
 8013ae2:	d06a      	beq.n	8013bba <_strtod_l+0xbc2>
 8013ae4:	a30a      	add	r3, pc, #40	; (adr r3, 8013b10 <_strtod_l+0xb18>)
 8013ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aea:	4620      	mov	r0, r4
 8013aec:	4629      	mov	r1, r5
 8013aee:	f7ec ff7d 	bl	80009ec <__aeabi_dcmplt>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	f47f acad 	bne.w	8013452 <_strtod_l+0x45a>
 8013af8:	a307      	add	r3, pc, #28	; (adr r3, 8013b18 <_strtod_l+0xb20>)
 8013afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afe:	4620      	mov	r0, r4
 8013b00:	4629      	mov	r1, r5
 8013b02:	f7ec ff91 	bl	8000a28 <__aeabi_dcmpgt>
 8013b06:	2800      	cmp	r0, #0
 8013b08:	f43f af76 	beq.w	80139f8 <_strtod_l+0xa00>
 8013b0c:	e4a1      	b.n	8013452 <_strtod_l+0x45a>
 8013b0e:	bf00      	nop
 8013b10:	94a03595 	.word	0x94a03595
 8013b14:	3fdfffff 	.word	0x3fdfffff
 8013b18:	35afe535 	.word	0x35afe535
 8013b1c:	3fe00000 	.word	0x3fe00000
 8013b20:	000fffff 	.word	0x000fffff
 8013b24:	7ff00000 	.word	0x7ff00000
 8013b28:	7fefffff 	.word	0x7fefffff
 8013b2c:	39500000 	.word	0x39500000
 8013b30:	3ff00000 	.word	0x3ff00000
 8013b34:	7fe00000 	.word	0x7fe00000
 8013b38:	7c9fffff 	.word	0x7c9fffff
 8013b3c:	3fe00000 	.word	0x3fe00000
 8013b40:	bff00000 	.word	0xbff00000
 8013b44:	9b05      	ldr	r3, [sp, #20]
 8013b46:	b313      	cbz	r3, 8013b8e <_strtod_l+0xb96>
 8013b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013b4e:	d81e      	bhi.n	8013b8e <_strtod_l+0xb96>
 8013b50:	a325      	add	r3, pc, #148	; (adr r3, 8013be8 <_strtod_l+0xbf0>)
 8013b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b56:	4620      	mov	r0, r4
 8013b58:	4629      	mov	r1, r5
 8013b5a:	f7ec ff51 	bl	8000a00 <__aeabi_dcmple>
 8013b5e:	b190      	cbz	r0, 8013b86 <_strtod_l+0xb8e>
 8013b60:	4629      	mov	r1, r5
 8013b62:	4620      	mov	r0, r4
 8013b64:	f7ec ffa8 	bl	8000ab8 <__aeabi_d2uiz>
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	bf08      	it	eq
 8013b6c:	2001      	moveq	r0, #1
 8013b6e:	f7ec fc51 	bl	8000414 <__aeabi_ui2d>
 8013b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b74:	4604      	mov	r4, r0
 8013b76:	460d      	mov	r5, r1
 8013b78:	b9d3      	cbnz	r3, 8013bb0 <_strtod_l+0xbb8>
 8013b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b7e:	9012      	str	r0, [sp, #72]	; 0x48
 8013b80:	9313      	str	r3, [sp, #76]	; 0x4c
 8013b82:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8013b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b88:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8013b8c:	1a9f      	subs	r7, r3, r2
 8013b8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b92:	f001 ffdd 	bl	8015b50 <__ulp>
 8013b96:	4602      	mov	r2, r0
 8013b98:	460b      	mov	r3, r1
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	4639      	mov	r1, r7
 8013b9e:	f7ec fcb3 	bl	8000508 <__aeabi_dmul>
 8013ba2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ba6:	f7ec faf9 	bl	800019c <__adddf3>
 8013baa:	4681      	mov	r9, r0
 8013bac:	468a      	mov	sl, r1
 8013bae:	e777      	b.n	8013aa0 <_strtod_l+0xaa8>
 8013bb0:	4602      	mov	r2, r0
 8013bb2:	460b      	mov	r3, r1
 8013bb4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8013bb8:	e7e3      	b.n	8013b82 <_strtod_l+0xb8a>
 8013bba:	a30d      	add	r3, pc, #52	; (adr r3, 8013bf0 <_strtod_l+0xbf8>)
 8013bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc0:	f7ec ff14 	bl	80009ec <__aeabi_dcmplt>
 8013bc4:	e79f      	b.n	8013b06 <_strtod_l+0xb0e>
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8013bca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013bce:	6013      	str	r3, [r2, #0]
 8013bd0:	f7ff ba55 	b.w	801307e <_strtod_l+0x86>
 8013bd4:	2b65      	cmp	r3, #101	; 0x65
 8013bd6:	f04f 0200 	mov.w	r2, #0
 8013bda:	f43f ab42 	beq.w	8013262 <_strtod_l+0x26a>
 8013bde:	2101      	movs	r1, #1
 8013be0:	4614      	mov	r4, r2
 8013be2:	9105      	str	r1, [sp, #20]
 8013be4:	f7ff babf 	b.w	8013166 <_strtod_l+0x16e>
 8013be8:	ffc00000 	.word	0xffc00000
 8013bec:	41dfffff 	.word	0x41dfffff
 8013bf0:	94a03595 	.word	0x94a03595
 8013bf4:	3fcfffff 	.word	0x3fcfffff

08013bf8 <_strtod_r>:
 8013bf8:	4b05      	ldr	r3, [pc, #20]	; (8013c10 <_strtod_r+0x18>)
 8013bfa:	b410      	push	{r4}
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	4c05      	ldr	r4, [pc, #20]	; (8013c14 <_strtod_r+0x1c>)
 8013c00:	6a1b      	ldr	r3, [r3, #32]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	bf08      	it	eq
 8013c06:	4623      	moveq	r3, r4
 8013c08:	bc10      	pop	{r4}
 8013c0a:	f7ff b9f5 	b.w	8012ff8 <_strtod_l>
 8013c0e:	bf00      	nop
 8013c10:	20000140 	.word	0x20000140
 8013c14:	200001a4 	.word	0x200001a4

08013c18 <_strtol_l.isra.0>:
 8013c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c1c:	4680      	mov	r8, r0
 8013c1e:	4689      	mov	r9, r1
 8013c20:	4692      	mov	sl, r2
 8013c22:	461e      	mov	r6, r3
 8013c24:	460f      	mov	r7, r1
 8013c26:	463d      	mov	r5, r7
 8013c28:	9808      	ldr	r0, [sp, #32]
 8013c2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c2e:	f001 fc25 	bl	801547c <__locale_ctype_ptr_l>
 8013c32:	4420      	add	r0, r4
 8013c34:	7843      	ldrb	r3, [r0, #1]
 8013c36:	f013 0308 	ands.w	r3, r3, #8
 8013c3a:	d132      	bne.n	8013ca2 <_strtol_l.isra.0+0x8a>
 8013c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8013c3e:	d132      	bne.n	8013ca6 <_strtol_l.isra.0+0x8e>
 8013c40:	2201      	movs	r2, #1
 8013c42:	787c      	ldrb	r4, [r7, #1]
 8013c44:	1cbd      	adds	r5, r7, #2
 8013c46:	2e00      	cmp	r6, #0
 8013c48:	d05d      	beq.n	8013d06 <_strtol_l.isra.0+0xee>
 8013c4a:	2e10      	cmp	r6, #16
 8013c4c:	d109      	bne.n	8013c62 <_strtol_l.isra.0+0x4a>
 8013c4e:	2c30      	cmp	r4, #48	; 0x30
 8013c50:	d107      	bne.n	8013c62 <_strtol_l.isra.0+0x4a>
 8013c52:	782b      	ldrb	r3, [r5, #0]
 8013c54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c58:	2b58      	cmp	r3, #88	; 0x58
 8013c5a:	d14f      	bne.n	8013cfc <_strtol_l.isra.0+0xe4>
 8013c5c:	2610      	movs	r6, #16
 8013c5e:	786c      	ldrb	r4, [r5, #1]
 8013c60:	3502      	adds	r5, #2
 8013c62:	2a00      	cmp	r2, #0
 8013c64:	bf14      	ite	ne
 8013c66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013c6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013c6e:	2700      	movs	r7, #0
 8013c70:	fbb1 fcf6 	udiv	ip, r1, r6
 8013c74:	4638      	mov	r0, r7
 8013c76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013c7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013c7e:	2b09      	cmp	r3, #9
 8013c80:	d817      	bhi.n	8013cb2 <_strtol_l.isra.0+0x9a>
 8013c82:	461c      	mov	r4, r3
 8013c84:	42a6      	cmp	r6, r4
 8013c86:	dd23      	ble.n	8013cd0 <_strtol_l.isra.0+0xb8>
 8013c88:	1c7b      	adds	r3, r7, #1
 8013c8a:	d007      	beq.n	8013c9c <_strtol_l.isra.0+0x84>
 8013c8c:	4584      	cmp	ip, r0
 8013c8e:	d31c      	bcc.n	8013cca <_strtol_l.isra.0+0xb2>
 8013c90:	d101      	bne.n	8013c96 <_strtol_l.isra.0+0x7e>
 8013c92:	45a6      	cmp	lr, r4
 8013c94:	db19      	blt.n	8013cca <_strtol_l.isra.0+0xb2>
 8013c96:	2701      	movs	r7, #1
 8013c98:	fb00 4006 	mla	r0, r0, r6, r4
 8013c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ca0:	e7eb      	b.n	8013c7a <_strtol_l.isra.0+0x62>
 8013ca2:	462f      	mov	r7, r5
 8013ca4:	e7bf      	b.n	8013c26 <_strtol_l.isra.0+0xe>
 8013ca6:	2c2b      	cmp	r4, #43	; 0x2b
 8013ca8:	bf04      	itt	eq
 8013caa:	1cbd      	addeq	r5, r7, #2
 8013cac:	787c      	ldrbeq	r4, [r7, #1]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	e7c9      	b.n	8013c46 <_strtol_l.isra.0+0x2e>
 8013cb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013cb6:	2b19      	cmp	r3, #25
 8013cb8:	d801      	bhi.n	8013cbe <_strtol_l.isra.0+0xa6>
 8013cba:	3c37      	subs	r4, #55	; 0x37
 8013cbc:	e7e2      	b.n	8013c84 <_strtol_l.isra.0+0x6c>
 8013cbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013cc2:	2b19      	cmp	r3, #25
 8013cc4:	d804      	bhi.n	8013cd0 <_strtol_l.isra.0+0xb8>
 8013cc6:	3c57      	subs	r4, #87	; 0x57
 8013cc8:	e7dc      	b.n	8013c84 <_strtol_l.isra.0+0x6c>
 8013cca:	f04f 37ff 	mov.w	r7, #4294967295
 8013cce:	e7e5      	b.n	8013c9c <_strtol_l.isra.0+0x84>
 8013cd0:	1c7b      	adds	r3, r7, #1
 8013cd2:	d108      	bne.n	8013ce6 <_strtol_l.isra.0+0xce>
 8013cd4:	2322      	movs	r3, #34	; 0x22
 8013cd6:	4608      	mov	r0, r1
 8013cd8:	f8c8 3000 	str.w	r3, [r8]
 8013cdc:	f1ba 0f00 	cmp.w	sl, #0
 8013ce0:	d107      	bne.n	8013cf2 <_strtol_l.isra.0+0xda>
 8013ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ce6:	b102      	cbz	r2, 8013cea <_strtol_l.isra.0+0xd2>
 8013ce8:	4240      	negs	r0, r0
 8013cea:	f1ba 0f00 	cmp.w	sl, #0
 8013cee:	d0f8      	beq.n	8013ce2 <_strtol_l.isra.0+0xca>
 8013cf0:	b10f      	cbz	r7, 8013cf6 <_strtol_l.isra.0+0xde>
 8013cf2:	f105 39ff 	add.w	r9, r5, #4294967295
 8013cf6:	f8ca 9000 	str.w	r9, [sl]
 8013cfa:	e7f2      	b.n	8013ce2 <_strtol_l.isra.0+0xca>
 8013cfc:	2430      	movs	r4, #48	; 0x30
 8013cfe:	2e00      	cmp	r6, #0
 8013d00:	d1af      	bne.n	8013c62 <_strtol_l.isra.0+0x4a>
 8013d02:	2608      	movs	r6, #8
 8013d04:	e7ad      	b.n	8013c62 <_strtol_l.isra.0+0x4a>
 8013d06:	2c30      	cmp	r4, #48	; 0x30
 8013d08:	d0a3      	beq.n	8013c52 <_strtol_l.isra.0+0x3a>
 8013d0a:	260a      	movs	r6, #10
 8013d0c:	e7a9      	b.n	8013c62 <_strtol_l.isra.0+0x4a>
	...

08013d10 <_strtol_r>:
 8013d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d12:	4c06      	ldr	r4, [pc, #24]	; (8013d2c <_strtol_r+0x1c>)
 8013d14:	4d06      	ldr	r5, [pc, #24]	; (8013d30 <_strtol_r+0x20>)
 8013d16:	6824      	ldr	r4, [r4, #0]
 8013d18:	6a24      	ldr	r4, [r4, #32]
 8013d1a:	2c00      	cmp	r4, #0
 8013d1c:	bf08      	it	eq
 8013d1e:	462c      	moveq	r4, r5
 8013d20:	9400      	str	r4, [sp, #0]
 8013d22:	f7ff ff79 	bl	8013c18 <_strtol_l.isra.0>
 8013d26:	b003      	add	sp, #12
 8013d28:	bd30      	pop	{r4, r5, pc}
 8013d2a:	bf00      	nop
 8013d2c:	20000140 	.word	0x20000140
 8013d30:	200001a4 	.word	0x200001a4

08013d34 <__swbuf_r>:
 8013d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d36:	460e      	mov	r6, r1
 8013d38:	4614      	mov	r4, r2
 8013d3a:	4605      	mov	r5, r0
 8013d3c:	b118      	cbz	r0, 8013d46 <__swbuf_r+0x12>
 8013d3e:	6983      	ldr	r3, [r0, #24]
 8013d40:	b90b      	cbnz	r3, 8013d46 <__swbuf_r+0x12>
 8013d42:	f000 ffe9 	bl	8014d18 <__sinit>
 8013d46:	4b21      	ldr	r3, [pc, #132]	; (8013dcc <__swbuf_r+0x98>)
 8013d48:	429c      	cmp	r4, r3
 8013d4a:	d12a      	bne.n	8013da2 <__swbuf_r+0x6e>
 8013d4c:	686c      	ldr	r4, [r5, #4]
 8013d4e:	69a3      	ldr	r3, [r4, #24]
 8013d50:	60a3      	str	r3, [r4, #8]
 8013d52:	89a3      	ldrh	r3, [r4, #12]
 8013d54:	071a      	lsls	r2, r3, #28
 8013d56:	d52e      	bpl.n	8013db6 <__swbuf_r+0x82>
 8013d58:	6923      	ldr	r3, [r4, #16]
 8013d5a:	b363      	cbz	r3, 8013db6 <__swbuf_r+0x82>
 8013d5c:	6923      	ldr	r3, [r4, #16]
 8013d5e:	6820      	ldr	r0, [r4, #0]
 8013d60:	b2f6      	uxtb	r6, r6
 8013d62:	1ac0      	subs	r0, r0, r3
 8013d64:	6963      	ldr	r3, [r4, #20]
 8013d66:	4637      	mov	r7, r6
 8013d68:	4283      	cmp	r3, r0
 8013d6a:	dc04      	bgt.n	8013d76 <__swbuf_r+0x42>
 8013d6c:	4621      	mov	r1, r4
 8013d6e:	4628      	mov	r0, r5
 8013d70:	f000 ff68 	bl	8014c44 <_fflush_r>
 8013d74:	bb28      	cbnz	r0, 8013dc2 <__swbuf_r+0x8e>
 8013d76:	68a3      	ldr	r3, [r4, #8]
 8013d78:	3001      	adds	r0, #1
 8013d7a:	3b01      	subs	r3, #1
 8013d7c:	60a3      	str	r3, [r4, #8]
 8013d7e:	6823      	ldr	r3, [r4, #0]
 8013d80:	1c5a      	adds	r2, r3, #1
 8013d82:	6022      	str	r2, [r4, #0]
 8013d84:	701e      	strb	r6, [r3, #0]
 8013d86:	6963      	ldr	r3, [r4, #20]
 8013d88:	4283      	cmp	r3, r0
 8013d8a:	d004      	beq.n	8013d96 <__swbuf_r+0x62>
 8013d8c:	89a3      	ldrh	r3, [r4, #12]
 8013d8e:	07db      	lsls	r3, r3, #31
 8013d90:	d519      	bpl.n	8013dc6 <__swbuf_r+0x92>
 8013d92:	2e0a      	cmp	r6, #10
 8013d94:	d117      	bne.n	8013dc6 <__swbuf_r+0x92>
 8013d96:	4621      	mov	r1, r4
 8013d98:	4628      	mov	r0, r5
 8013d9a:	f000 ff53 	bl	8014c44 <_fflush_r>
 8013d9e:	b190      	cbz	r0, 8013dc6 <__swbuf_r+0x92>
 8013da0:	e00f      	b.n	8013dc2 <__swbuf_r+0x8e>
 8013da2:	4b0b      	ldr	r3, [pc, #44]	; (8013dd0 <__swbuf_r+0x9c>)
 8013da4:	429c      	cmp	r4, r3
 8013da6:	d101      	bne.n	8013dac <__swbuf_r+0x78>
 8013da8:	68ac      	ldr	r4, [r5, #8]
 8013daa:	e7d0      	b.n	8013d4e <__swbuf_r+0x1a>
 8013dac:	4b09      	ldr	r3, [pc, #36]	; (8013dd4 <__swbuf_r+0xa0>)
 8013dae:	429c      	cmp	r4, r3
 8013db0:	bf08      	it	eq
 8013db2:	68ec      	ldreq	r4, [r5, #12]
 8013db4:	e7cb      	b.n	8013d4e <__swbuf_r+0x1a>
 8013db6:	4621      	mov	r1, r4
 8013db8:	4628      	mov	r0, r5
 8013dba:	f000 f80d 	bl	8013dd8 <__swsetup_r>
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d0cc      	beq.n	8013d5c <__swbuf_r+0x28>
 8013dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	0801a588 	.word	0x0801a588
 8013dd0:	0801a5a8 	.word	0x0801a5a8
 8013dd4:	0801a568 	.word	0x0801a568

08013dd8 <__swsetup_r>:
 8013dd8:	4b32      	ldr	r3, [pc, #200]	; (8013ea4 <__swsetup_r+0xcc>)
 8013dda:	b570      	push	{r4, r5, r6, lr}
 8013ddc:	681d      	ldr	r5, [r3, #0]
 8013dde:	4606      	mov	r6, r0
 8013de0:	460c      	mov	r4, r1
 8013de2:	b125      	cbz	r5, 8013dee <__swsetup_r+0x16>
 8013de4:	69ab      	ldr	r3, [r5, #24]
 8013de6:	b913      	cbnz	r3, 8013dee <__swsetup_r+0x16>
 8013de8:	4628      	mov	r0, r5
 8013dea:	f000 ff95 	bl	8014d18 <__sinit>
 8013dee:	4b2e      	ldr	r3, [pc, #184]	; (8013ea8 <__swsetup_r+0xd0>)
 8013df0:	429c      	cmp	r4, r3
 8013df2:	d10f      	bne.n	8013e14 <__swsetup_r+0x3c>
 8013df4:	686c      	ldr	r4, [r5, #4]
 8013df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	0715      	lsls	r5, r2, #28
 8013dfe:	d42c      	bmi.n	8013e5a <__swsetup_r+0x82>
 8013e00:	06d0      	lsls	r0, r2, #27
 8013e02:	d411      	bmi.n	8013e28 <__swsetup_r+0x50>
 8013e04:	2209      	movs	r2, #9
 8013e06:	6032      	str	r2, [r6, #0]
 8013e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e0c:	81a3      	strh	r3, [r4, #12]
 8013e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e12:	e03e      	b.n	8013e92 <__swsetup_r+0xba>
 8013e14:	4b25      	ldr	r3, [pc, #148]	; (8013eac <__swsetup_r+0xd4>)
 8013e16:	429c      	cmp	r4, r3
 8013e18:	d101      	bne.n	8013e1e <__swsetup_r+0x46>
 8013e1a:	68ac      	ldr	r4, [r5, #8]
 8013e1c:	e7eb      	b.n	8013df6 <__swsetup_r+0x1e>
 8013e1e:	4b24      	ldr	r3, [pc, #144]	; (8013eb0 <__swsetup_r+0xd8>)
 8013e20:	429c      	cmp	r4, r3
 8013e22:	bf08      	it	eq
 8013e24:	68ec      	ldreq	r4, [r5, #12]
 8013e26:	e7e6      	b.n	8013df6 <__swsetup_r+0x1e>
 8013e28:	0751      	lsls	r1, r2, #29
 8013e2a:	d512      	bpl.n	8013e52 <__swsetup_r+0x7a>
 8013e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e2e:	b141      	cbz	r1, 8013e42 <__swsetup_r+0x6a>
 8013e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e34:	4299      	cmp	r1, r3
 8013e36:	d002      	beq.n	8013e3e <__swsetup_r+0x66>
 8013e38:	4630      	mov	r0, r6
 8013e3a:	f001 ffc5 	bl	8015dc8 <_free_r>
 8013e3e:	2300      	movs	r3, #0
 8013e40:	6363      	str	r3, [r4, #52]	; 0x34
 8013e42:	89a3      	ldrh	r3, [r4, #12]
 8013e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e48:	81a3      	strh	r3, [r4, #12]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	6063      	str	r3, [r4, #4]
 8013e4e:	6923      	ldr	r3, [r4, #16]
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	89a3      	ldrh	r3, [r4, #12]
 8013e54:	f043 0308 	orr.w	r3, r3, #8
 8013e58:	81a3      	strh	r3, [r4, #12]
 8013e5a:	6923      	ldr	r3, [r4, #16]
 8013e5c:	b94b      	cbnz	r3, 8013e72 <__swsetup_r+0x9a>
 8013e5e:	89a3      	ldrh	r3, [r4, #12]
 8013e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e68:	d003      	beq.n	8013e72 <__swsetup_r+0x9a>
 8013e6a:	4621      	mov	r1, r4
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f001 fb3d 	bl	80154ec <__smakebuf_r>
 8013e72:	89a2      	ldrh	r2, [r4, #12]
 8013e74:	f012 0301 	ands.w	r3, r2, #1
 8013e78:	d00c      	beq.n	8013e94 <__swsetup_r+0xbc>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	60a3      	str	r3, [r4, #8]
 8013e7e:	6963      	ldr	r3, [r4, #20]
 8013e80:	425b      	negs	r3, r3
 8013e82:	61a3      	str	r3, [r4, #24]
 8013e84:	6923      	ldr	r3, [r4, #16]
 8013e86:	b953      	cbnz	r3, 8013e9e <__swsetup_r+0xc6>
 8013e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013e90:	d1ba      	bne.n	8013e08 <__swsetup_r+0x30>
 8013e92:	bd70      	pop	{r4, r5, r6, pc}
 8013e94:	0792      	lsls	r2, r2, #30
 8013e96:	bf58      	it	pl
 8013e98:	6963      	ldrpl	r3, [r4, #20]
 8013e9a:	60a3      	str	r3, [r4, #8]
 8013e9c:	e7f2      	b.n	8013e84 <__swsetup_r+0xac>
 8013e9e:	2000      	movs	r0, #0
 8013ea0:	e7f7      	b.n	8013e92 <__swsetup_r+0xba>
 8013ea2:	bf00      	nop
 8013ea4:	20000140 	.word	0x20000140
 8013ea8:	0801a588 	.word	0x0801a588
 8013eac:	0801a5a8 	.word	0x0801a5a8
 8013eb0:	0801a568 	.word	0x0801a568

08013eb4 <quorem>:
 8013eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb8:	6903      	ldr	r3, [r0, #16]
 8013eba:	690c      	ldr	r4, [r1, #16]
 8013ebc:	4680      	mov	r8, r0
 8013ebe:	42a3      	cmp	r3, r4
 8013ec0:	f2c0 8084 	blt.w	8013fcc <quorem+0x118>
 8013ec4:	3c01      	subs	r4, #1
 8013ec6:	f101 0714 	add.w	r7, r1, #20
 8013eca:	f100 0614 	add.w	r6, r0, #20
 8013ece:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013ed2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013ed6:	3501      	adds	r5, #1
 8013ed8:	fbb0 f5f5 	udiv	r5, r0, r5
 8013edc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013ee0:	eb06 030c 	add.w	r3, r6, ip
 8013ee4:	eb07 090c 	add.w	r9, r7, ip
 8013ee8:	9301      	str	r3, [sp, #4]
 8013eea:	b39d      	cbz	r5, 8013f54 <quorem+0xa0>
 8013eec:	f04f 0a00 	mov.w	sl, #0
 8013ef0:	4638      	mov	r0, r7
 8013ef2:	46b6      	mov	lr, r6
 8013ef4:	46d3      	mov	fp, sl
 8013ef6:	f850 2b04 	ldr.w	r2, [r0], #4
 8013efa:	b293      	uxth	r3, r2
 8013efc:	fb05 a303 	mla	r3, r5, r3, sl
 8013f00:	0c12      	lsrs	r2, r2, #16
 8013f02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013f06:	fb05 a202 	mla	r2, r5, r2, sl
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	ebab 0303 	sub.w	r3, fp, r3
 8013f10:	f8de b000 	ldr.w	fp, [lr]
 8013f14:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013f18:	fa1f fb8b 	uxth.w	fp, fp
 8013f1c:	445b      	add	r3, fp
 8013f1e:	fa1f fb82 	uxth.w	fp, r2
 8013f22:	f8de 2000 	ldr.w	r2, [lr]
 8013f26:	4581      	cmp	r9, r0
 8013f28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f36:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013f3a:	f84e 3b04 	str.w	r3, [lr], #4
 8013f3e:	d2da      	bcs.n	8013ef6 <quorem+0x42>
 8013f40:	f856 300c 	ldr.w	r3, [r6, ip]
 8013f44:	b933      	cbnz	r3, 8013f54 <quorem+0xa0>
 8013f46:	9b01      	ldr	r3, [sp, #4]
 8013f48:	3b04      	subs	r3, #4
 8013f4a:	429e      	cmp	r6, r3
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	d331      	bcc.n	8013fb4 <quorem+0x100>
 8013f50:	f8c8 4010 	str.w	r4, [r8, #16]
 8013f54:	4640      	mov	r0, r8
 8013f56:	f001 fd83 	bl	8015a60 <__mcmp>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	db26      	blt.n	8013fac <quorem+0xf8>
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f04f 0c00 	mov.w	ip, #0
 8013f64:	3501      	adds	r5, #1
 8013f66:	f857 1b04 	ldr.w	r1, [r7], #4
 8013f6a:	f8d0 e000 	ldr.w	lr, [r0]
 8013f6e:	b28b      	uxth	r3, r1
 8013f70:	ebac 0303 	sub.w	r3, ip, r3
 8013f74:	fa1f f28e 	uxth.w	r2, lr
 8013f78:	4413      	add	r3, r2
 8013f7a:	0c0a      	lsrs	r2, r1, #16
 8013f7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f8a:	45b9      	cmp	r9, r7
 8013f8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013f90:	f840 3b04 	str.w	r3, [r0], #4
 8013f94:	d2e7      	bcs.n	8013f66 <quorem+0xb2>
 8013f96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013f9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013f9e:	b92a      	cbnz	r2, 8013fac <quorem+0xf8>
 8013fa0:	3b04      	subs	r3, #4
 8013fa2:	429e      	cmp	r6, r3
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	d30b      	bcc.n	8013fc0 <quorem+0x10c>
 8013fa8:	f8c8 4010 	str.w	r4, [r8, #16]
 8013fac:	4628      	mov	r0, r5
 8013fae:	b003      	add	sp, #12
 8013fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb4:	6812      	ldr	r2, [r2, #0]
 8013fb6:	3b04      	subs	r3, #4
 8013fb8:	2a00      	cmp	r2, #0
 8013fba:	d1c9      	bne.n	8013f50 <quorem+0x9c>
 8013fbc:	3c01      	subs	r4, #1
 8013fbe:	e7c4      	b.n	8013f4a <quorem+0x96>
 8013fc0:	6812      	ldr	r2, [r2, #0]
 8013fc2:	3b04      	subs	r3, #4
 8013fc4:	2a00      	cmp	r2, #0
 8013fc6:	d1ef      	bne.n	8013fa8 <quorem+0xf4>
 8013fc8:	3c01      	subs	r4, #1
 8013fca:	e7ea      	b.n	8013fa2 <quorem+0xee>
 8013fcc:	2000      	movs	r0, #0
 8013fce:	e7ee      	b.n	8013fae <quorem+0xfa>

08013fd0 <_dtoa_r>:
 8013fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd4:	4616      	mov	r6, r2
 8013fd6:	461f      	mov	r7, r3
 8013fd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013fda:	b095      	sub	sp, #84	; 0x54
 8013fdc:	4604      	mov	r4, r0
 8013fde:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8013fe2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013fe6:	b93d      	cbnz	r5, 8013ff8 <_dtoa_r+0x28>
 8013fe8:	2010      	movs	r0, #16
 8013fea:	f001 fabf 	bl	801556c <malloc>
 8013fee:	6260      	str	r0, [r4, #36]	; 0x24
 8013ff0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013ff4:	6005      	str	r5, [r0, #0]
 8013ff6:	60c5      	str	r5, [r0, #12]
 8013ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ffa:	6819      	ldr	r1, [r3, #0]
 8013ffc:	b151      	cbz	r1, 8014014 <_dtoa_r+0x44>
 8013ffe:	685a      	ldr	r2, [r3, #4]
 8014000:	2301      	movs	r3, #1
 8014002:	4093      	lsls	r3, r2
 8014004:	604a      	str	r2, [r1, #4]
 8014006:	608b      	str	r3, [r1, #8]
 8014008:	4620      	mov	r0, r4
 801400a:	f001 fb0b 	bl	8015624 <_Bfree>
 801400e:	2200      	movs	r2, #0
 8014010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014012:	601a      	str	r2, [r3, #0]
 8014014:	1e3b      	subs	r3, r7, #0
 8014016:	bfaf      	iteee	ge
 8014018:	2300      	movge	r3, #0
 801401a:	2201      	movlt	r2, #1
 801401c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014020:	9303      	strlt	r3, [sp, #12]
 8014022:	bfac      	ite	ge
 8014024:	f8c8 3000 	strge.w	r3, [r8]
 8014028:	f8c8 2000 	strlt.w	r2, [r8]
 801402c:	4bae      	ldr	r3, [pc, #696]	; (80142e8 <_dtoa_r+0x318>)
 801402e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014032:	ea33 0308 	bics.w	r3, r3, r8
 8014036:	d11b      	bne.n	8014070 <_dtoa_r+0xa0>
 8014038:	f242 730f 	movw	r3, #9999	; 0x270f
 801403c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801403e:	6013      	str	r3, [r2, #0]
 8014040:	9b02      	ldr	r3, [sp, #8]
 8014042:	b923      	cbnz	r3, 801404e <_dtoa_r+0x7e>
 8014044:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014048:	2800      	cmp	r0, #0
 801404a:	f000 8545 	beq.w	8014ad8 <_dtoa_r+0xb08>
 801404e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014050:	b953      	cbnz	r3, 8014068 <_dtoa_r+0x98>
 8014052:	4ba6      	ldr	r3, [pc, #664]	; (80142ec <_dtoa_r+0x31c>)
 8014054:	e021      	b.n	801409a <_dtoa_r+0xca>
 8014056:	4ba6      	ldr	r3, [pc, #664]	; (80142f0 <_dtoa_r+0x320>)
 8014058:	9306      	str	r3, [sp, #24]
 801405a:	3308      	adds	r3, #8
 801405c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801405e:	6013      	str	r3, [r2, #0]
 8014060:	9806      	ldr	r0, [sp, #24]
 8014062:	b015      	add	sp, #84	; 0x54
 8014064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014068:	4ba0      	ldr	r3, [pc, #640]	; (80142ec <_dtoa_r+0x31c>)
 801406a:	9306      	str	r3, [sp, #24]
 801406c:	3303      	adds	r3, #3
 801406e:	e7f5      	b.n	801405c <_dtoa_r+0x8c>
 8014070:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014074:	2200      	movs	r2, #0
 8014076:	2300      	movs	r3, #0
 8014078:	4630      	mov	r0, r6
 801407a:	4639      	mov	r1, r7
 801407c:	f7ec fcac 	bl	80009d8 <__aeabi_dcmpeq>
 8014080:	4682      	mov	sl, r0
 8014082:	b160      	cbz	r0, 801409e <_dtoa_r+0xce>
 8014084:	2301      	movs	r3, #1
 8014086:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014088:	6013      	str	r3, [r2, #0]
 801408a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801408c:	2b00      	cmp	r3, #0
 801408e:	f000 8520 	beq.w	8014ad2 <_dtoa_r+0xb02>
 8014092:	4b98      	ldr	r3, [pc, #608]	; (80142f4 <_dtoa_r+0x324>)
 8014094:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014096:	6013      	str	r3, [r2, #0]
 8014098:	3b01      	subs	r3, #1
 801409a:	9306      	str	r3, [sp, #24]
 801409c:	e7e0      	b.n	8014060 <_dtoa_r+0x90>
 801409e:	ab12      	add	r3, sp, #72	; 0x48
 80140a0:	9301      	str	r3, [sp, #4]
 80140a2:	ab13      	add	r3, sp, #76	; 0x4c
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	4632      	mov	r2, r6
 80140a8:	463b      	mov	r3, r7
 80140aa:	4620      	mov	r0, r4
 80140ac:	f001 fdc6 	bl	8015c3c <__d2b>
 80140b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80140b4:	4683      	mov	fp, r0
 80140b6:	2d00      	cmp	r5, #0
 80140b8:	d07d      	beq.n	80141b6 <_dtoa_r+0x1e6>
 80140ba:	46b0      	mov	r8, r6
 80140bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80140c0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80140c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80140c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80140cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80140d0:	2200      	movs	r2, #0
 80140d2:	4b89      	ldr	r3, [pc, #548]	; (80142f8 <_dtoa_r+0x328>)
 80140d4:	4640      	mov	r0, r8
 80140d6:	4649      	mov	r1, r9
 80140d8:	f7ec f85e 	bl	8000198 <__aeabi_dsub>
 80140dc:	a37c      	add	r3, pc, #496	; (adr r3, 80142d0 <_dtoa_r+0x300>)
 80140de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e2:	f7ec fa11 	bl	8000508 <__aeabi_dmul>
 80140e6:	a37c      	add	r3, pc, #496	; (adr r3, 80142d8 <_dtoa_r+0x308>)
 80140e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ec:	f7ec f856 	bl	800019c <__adddf3>
 80140f0:	4606      	mov	r6, r0
 80140f2:	4628      	mov	r0, r5
 80140f4:	460f      	mov	r7, r1
 80140f6:	f7ec f99d 	bl	8000434 <__aeabi_i2d>
 80140fa:	a379      	add	r3, pc, #484	; (adr r3, 80142e0 <_dtoa_r+0x310>)
 80140fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014100:	f7ec fa02 	bl	8000508 <__aeabi_dmul>
 8014104:	4602      	mov	r2, r0
 8014106:	460b      	mov	r3, r1
 8014108:	4630      	mov	r0, r6
 801410a:	4639      	mov	r1, r7
 801410c:	f7ec f846 	bl	800019c <__adddf3>
 8014110:	4606      	mov	r6, r0
 8014112:	460f      	mov	r7, r1
 8014114:	f7ec fca8 	bl	8000a68 <__aeabi_d2iz>
 8014118:	2200      	movs	r2, #0
 801411a:	4682      	mov	sl, r0
 801411c:	2300      	movs	r3, #0
 801411e:	4630      	mov	r0, r6
 8014120:	4639      	mov	r1, r7
 8014122:	f7ec fc63 	bl	80009ec <__aeabi_dcmplt>
 8014126:	b148      	cbz	r0, 801413c <_dtoa_r+0x16c>
 8014128:	4650      	mov	r0, sl
 801412a:	f7ec f983 	bl	8000434 <__aeabi_i2d>
 801412e:	4632      	mov	r2, r6
 8014130:	463b      	mov	r3, r7
 8014132:	f7ec fc51 	bl	80009d8 <__aeabi_dcmpeq>
 8014136:	b908      	cbnz	r0, 801413c <_dtoa_r+0x16c>
 8014138:	f10a 3aff 	add.w	sl, sl, #4294967295
 801413c:	f1ba 0f16 	cmp.w	sl, #22
 8014140:	d85a      	bhi.n	80141f8 <_dtoa_r+0x228>
 8014142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014146:	496d      	ldr	r1, [pc, #436]	; (80142fc <_dtoa_r+0x32c>)
 8014148:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801414c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014150:	f7ec fc6a 	bl	8000a28 <__aeabi_dcmpgt>
 8014154:	2800      	cmp	r0, #0
 8014156:	d051      	beq.n	80141fc <_dtoa_r+0x22c>
 8014158:	2300      	movs	r3, #0
 801415a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801415e:	930d      	str	r3, [sp, #52]	; 0x34
 8014160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014162:	1b5d      	subs	r5, r3, r5
 8014164:	1e6b      	subs	r3, r5, #1
 8014166:	9307      	str	r3, [sp, #28]
 8014168:	bf43      	ittte	mi
 801416a:	2300      	movmi	r3, #0
 801416c:	f1c5 0901 	rsbmi	r9, r5, #1
 8014170:	9307      	strmi	r3, [sp, #28]
 8014172:	f04f 0900 	movpl.w	r9, #0
 8014176:	f1ba 0f00 	cmp.w	sl, #0
 801417a:	db41      	blt.n	8014200 <_dtoa_r+0x230>
 801417c:	9b07      	ldr	r3, [sp, #28]
 801417e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8014182:	4453      	add	r3, sl
 8014184:	9307      	str	r3, [sp, #28]
 8014186:	2300      	movs	r3, #0
 8014188:	9308      	str	r3, [sp, #32]
 801418a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801418c:	2b09      	cmp	r3, #9
 801418e:	f200 808f 	bhi.w	80142b0 <_dtoa_r+0x2e0>
 8014192:	2b05      	cmp	r3, #5
 8014194:	bfc4      	itt	gt
 8014196:	3b04      	subgt	r3, #4
 8014198:	931e      	strgt	r3, [sp, #120]	; 0x78
 801419a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801419c:	bfc8      	it	gt
 801419e:	2500      	movgt	r5, #0
 80141a0:	f1a3 0302 	sub.w	r3, r3, #2
 80141a4:	bfd8      	it	le
 80141a6:	2501      	movle	r5, #1
 80141a8:	2b03      	cmp	r3, #3
 80141aa:	f200 808d 	bhi.w	80142c8 <_dtoa_r+0x2f8>
 80141ae:	e8df f003 	tbb	[pc, r3]
 80141b2:	7d7b      	.short	0x7d7b
 80141b4:	6f2f      	.short	0x6f2f
 80141b6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80141ba:	441d      	add	r5, r3
 80141bc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80141c0:	2820      	cmp	r0, #32
 80141c2:	dd13      	ble.n	80141ec <_dtoa_r+0x21c>
 80141c4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80141c8:	9b02      	ldr	r3, [sp, #8]
 80141ca:	fa08 f800 	lsl.w	r8, r8, r0
 80141ce:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80141d2:	fa23 f000 	lsr.w	r0, r3, r0
 80141d6:	ea48 0000 	orr.w	r0, r8, r0
 80141da:	f7ec f91b 	bl	8000414 <__aeabi_ui2d>
 80141de:	2301      	movs	r3, #1
 80141e0:	4680      	mov	r8, r0
 80141e2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80141e6:	3d01      	subs	r5, #1
 80141e8:	9310      	str	r3, [sp, #64]	; 0x40
 80141ea:	e771      	b.n	80140d0 <_dtoa_r+0x100>
 80141ec:	9b02      	ldr	r3, [sp, #8]
 80141ee:	f1c0 0020 	rsb	r0, r0, #32
 80141f2:	fa03 f000 	lsl.w	r0, r3, r0
 80141f6:	e7f0      	b.n	80141da <_dtoa_r+0x20a>
 80141f8:	2301      	movs	r3, #1
 80141fa:	e7b0      	b.n	801415e <_dtoa_r+0x18e>
 80141fc:	900d      	str	r0, [sp, #52]	; 0x34
 80141fe:	e7af      	b.n	8014160 <_dtoa_r+0x190>
 8014200:	f1ca 0300 	rsb	r3, sl, #0
 8014204:	9308      	str	r3, [sp, #32]
 8014206:	2300      	movs	r3, #0
 8014208:	eba9 090a 	sub.w	r9, r9, sl
 801420c:	930c      	str	r3, [sp, #48]	; 0x30
 801420e:	e7bc      	b.n	801418a <_dtoa_r+0x1ba>
 8014210:	2301      	movs	r3, #1
 8014212:	9309      	str	r3, [sp, #36]	; 0x24
 8014214:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014216:	2b00      	cmp	r3, #0
 8014218:	dd74      	ble.n	8014304 <_dtoa_r+0x334>
 801421a:	4698      	mov	r8, r3
 801421c:	9304      	str	r3, [sp, #16]
 801421e:	2200      	movs	r2, #0
 8014220:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014222:	6072      	str	r2, [r6, #4]
 8014224:	2204      	movs	r2, #4
 8014226:	f102 0014 	add.w	r0, r2, #20
 801422a:	4298      	cmp	r0, r3
 801422c:	6871      	ldr	r1, [r6, #4]
 801422e:	d96e      	bls.n	801430e <_dtoa_r+0x33e>
 8014230:	4620      	mov	r0, r4
 8014232:	f001 f9c3 	bl	80155bc <_Balloc>
 8014236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014238:	6030      	str	r0, [r6, #0]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	f1b8 0f0e 	cmp.w	r8, #14
 8014240:	9306      	str	r3, [sp, #24]
 8014242:	f200 80ed 	bhi.w	8014420 <_dtoa_r+0x450>
 8014246:	2d00      	cmp	r5, #0
 8014248:	f000 80ea 	beq.w	8014420 <_dtoa_r+0x450>
 801424c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014250:	f1ba 0f00 	cmp.w	sl, #0
 8014254:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014258:	dd77      	ble.n	801434a <_dtoa_r+0x37a>
 801425a:	4a28      	ldr	r2, [pc, #160]	; (80142fc <_dtoa_r+0x32c>)
 801425c:	f00a 030f 	and.w	r3, sl, #15
 8014260:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014268:	06f0      	lsls	r0, r6, #27
 801426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014272:	d568      	bpl.n	8014346 <_dtoa_r+0x376>
 8014274:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014278:	4b21      	ldr	r3, [pc, #132]	; (8014300 <_dtoa_r+0x330>)
 801427a:	2503      	movs	r5, #3
 801427c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014280:	f7ec fa6c 	bl	800075c <__aeabi_ddiv>
 8014284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014288:	f006 060f 	and.w	r6, r6, #15
 801428c:	4f1c      	ldr	r7, [pc, #112]	; (8014300 <_dtoa_r+0x330>)
 801428e:	e04f      	b.n	8014330 <_dtoa_r+0x360>
 8014290:	2301      	movs	r3, #1
 8014292:	9309      	str	r3, [sp, #36]	; 0x24
 8014294:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014296:	4453      	add	r3, sl
 8014298:	f103 0801 	add.w	r8, r3, #1
 801429c:	9304      	str	r3, [sp, #16]
 801429e:	4643      	mov	r3, r8
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	bfb8      	it	lt
 80142a4:	2301      	movlt	r3, #1
 80142a6:	e7ba      	b.n	801421e <_dtoa_r+0x24e>
 80142a8:	2300      	movs	r3, #0
 80142aa:	e7b2      	b.n	8014212 <_dtoa_r+0x242>
 80142ac:	2300      	movs	r3, #0
 80142ae:	e7f0      	b.n	8014292 <_dtoa_r+0x2c2>
 80142b0:	2501      	movs	r5, #1
 80142b2:	2300      	movs	r3, #0
 80142b4:	9509      	str	r5, [sp, #36]	; 0x24
 80142b6:	931e      	str	r3, [sp, #120]	; 0x78
 80142b8:	f04f 33ff 	mov.w	r3, #4294967295
 80142bc:	2200      	movs	r2, #0
 80142be:	9304      	str	r3, [sp, #16]
 80142c0:	4698      	mov	r8, r3
 80142c2:	2312      	movs	r3, #18
 80142c4:	921f      	str	r2, [sp, #124]	; 0x7c
 80142c6:	e7aa      	b.n	801421e <_dtoa_r+0x24e>
 80142c8:	2301      	movs	r3, #1
 80142ca:	9309      	str	r3, [sp, #36]	; 0x24
 80142cc:	e7f4      	b.n	80142b8 <_dtoa_r+0x2e8>
 80142ce:	bf00      	nop
 80142d0:	636f4361 	.word	0x636f4361
 80142d4:	3fd287a7 	.word	0x3fd287a7
 80142d8:	8b60c8b3 	.word	0x8b60c8b3
 80142dc:	3fc68a28 	.word	0x3fc68a28
 80142e0:	509f79fb 	.word	0x509f79fb
 80142e4:	3fd34413 	.word	0x3fd34413
 80142e8:	7ff00000 	.word	0x7ff00000
 80142ec:	0801a561 	.word	0x0801a561
 80142f0:	0801a558 	.word	0x0801a558
 80142f4:	0801a4d9 	.word	0x0801a4d9
 80142f8:	3ff80000 	.word	0x3ff80000
 80142fc:	0801a600 	.word	0x0801a600
 8014300:	0801a5d8 	.word	0x0801a5d8
 8014304:	2301      	movs	r3, #1
 8014306:	9304      	str	r3, [sp, #16]
 8014308:	4698      	mov	r8, r3
 801430a:	461a      	mov	r2, r3
 801430c:	e7da      	b.n	80142c4 <_dtoa_r+0x2f4>
 801430e:	3101      	adds	r1, #1
 8014310:	6071      	str	r1, [r6, #4]
 8014312:	0052      	lsls	r2, r2, #1
 8014314:	e787      	b.n	8014226 <_dtoa_r+0x256>
 8014316:	07f1      	lsls	r1, r6, #31
 8014318:	d508      	bpl.n	801432c <_dtoa_r+0x35c>
 801431a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801431e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014322:	f7ec f8f1 	bl	8000508 <__aeabi_dmul>
 8014326:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801432a:	3501      	adds	r5, #1
 801432c:	1076      	asrs	r6, r6, #1
 801432e:	3708      	adds	r7, #8
 8014330:	2e00      	cmp	r6, #0
 8014332:	d1f0      	bne.n	8014316 <_dtoa_r+0x346>
 8014334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801433c:	f7ec fa0e 	bl	800075c <__aeabi_ddiv>
 8014340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014344:	e01b      	b.n	801437e <_dtoa_r+0x3ae>
 8014346:	2502      	movs	r5, #2
 8014348:	e7a0      	b.n	801428c <_dtoa_r+0x2bc>
 801434a:	f000 80a4 	beq.w	8014496 <_dtoa_r+0x4c6>
 801434e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014352:	f1ca 0600 	rsb	r6, sl, #0
 8014356:	4ba0      	ldr	r3, [pc, #640]	; (80145d8 <_dtoa_r+0x608>)
 8014358:	f006 020f 	and.w	r2, r6, #15
 801435c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014364:	f7ec f8d0 	bl	8000508 <__aeabi_dmul>
 8014368:	2502      	movs	r5, #2
 801436a:	2300      	movs	r3, #0
 801436c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014370:	4f9a      	ldr	r7, [pc, #616]	; (80145dc <_dtoa_r+0x60c>)
 8014372:	1136      	asrs	r6, r6, #4
 8014374:	2e00      	cmp	r6, #0
 8014376:	f040 8083 	bne.w	8014480 <_dtoa_r+0x4b0>
 801437a:	2b00      	cmp	r3, #0
 801437c:	d1e0      	bne.n	8014340 <_dtoa_r+0x370>
 801437e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014380:	2b00      	cmp	r3, #0
 8014382:	f000 808a 	beq.w	801449a <_dtoa_r+0x4ca>
 8014386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801438a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801438e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014392:	2200      	movs	r2, #0
 8014394:	4b92      	ldr	r3, [pc, #584]	; (80145e0 <_dtoa_r+0x610>)
 8014396:	f7ec fb29 	bl	80009ec <__aeabi_dcmplt>
 801439a:	2800      	cmp	r0, #0
 801439c:	d07d      	beq.n	801449a <_dtoa_r+0x4ca>
 801439e:	f1b8 0f00 	cmp.w	r8, #0
 80143a2:	d07a      	beq.n	801449a <_dtoa_r+0x4ca>
 80143a4:	9b04      	ldr	r3, [sp, #16]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	dd36      	ble.n	8014418 <_dtoa_r+0x448>
 80143aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80143ae:	2200      	movs	r2, #0
 80143b0:	4b8c      	ldr	r3, [pc, #560]	; (80145e4 <_dtoa_r+0x614>)
 80143b2:	f7ec f8a9 	bl	8000508 <__aeabi_dmul>
 80143b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143ba:	9e04      	ldr	r6, [sp, #16]
 80143bc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80143c0:	3501      	adds	r5, #1
 80143c2:	4628      	mov	r0, r5
 80143c4:	f7ec f836 	bl	8000434 <__aeabi_i2d>
 80143c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80143cc:	f7ec f89c 	bl	8000508 <__aeabi_dmul>
 80143d0:	2200      	movs	r2, #0
 80143d2:	4b85      	ldr	r3, [pc, #532]	; (80145e8 <_dtoa_r+0x618>)
 80143d4:	f7eb fee2 	bl	800019c <__adddf3>
 80143d8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80143dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80143e0:	950b      	str	r5, [sp, #44]	; 0x2c
 80143e2:	2e00      	cmp	r6, #0
 80143e4:	d15c      	bne.n	80144a0 <_dtoa_r+0x4d0>
 80143e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143ea:	2200      	movs	r2, #0
 80143ec:	4b7f      	ldr	r3, [pc, #508]	; (80145ec <_dtoa_r+0x61c>)
 80143ee:	f7eb fed3 	bl	8000198 <__aeabi_dsub>
 80143f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143f4:	462b      	mov	r3, r5
 80143f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143fa:	f7ec fb15 	bl	8000a28 <__aeabi_dcmpgt>
 80143fe:	2800      	cmp	r0, #0
 8014400:	f040 8281 	bne.w	8014906 <_dtoa_r+0x936>
 8014404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801440a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801440e:	f7ec faed 	bl	80009ec <__aeabi_dcmplt>
 8014412:	2800      	cmp	r0, #0
 8014414:	f040 8275 	bne.w	8014902 <_dtoa_r+0x932>
 8014418:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801441c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014422:	2b00      	cmp	r3, #0
 8014424:	f2c0 814b 	blt.w	80146be <_dtoa_r+0x6ee>
 8014428:	f1ba 0f0e 	cmp.w	sl, #14
 801442c:	f300 8147 	bgt.w	80146be <_dtoa_r+0x6ee>
 8014430:	4b69      	ldr	r3, [pc, #420]	; (80145d8 <_dtoa_r+0x608>)
 8014432:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801443e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014440:	2b00      	cmp	r3, #0
 8014442:	f280 80d7 	bge.w	80145f4 <_dtoa_r+0x624>
 8014446:	f1b8 0f00 	cmp.w	r8, #0
 801444a:	f300 80d3 	bgt.w	80145f4 <_dtoa_r+0x624>
 801444e:	f040 8257 	bne.w	8014900 <_dtoa_r+0x930>
 8014452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014456:	2200      	movs	r2, #0
 8014458:	4b64      	ldr	r3, [pc, #400]	; (80145ec <_dtoa_r+0x61c>)
 801445a:	f7ec f855 	bl	8000508 <__aeabi_dmul>
 801445e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014462:	f7ec fad7 	bl	8000a14 <__aeabi_dcmpge>
 8014466:	4646      	mov	r6, r8
 8014468:	4647      	mov	r7, r8
 801446a:	2800      	cmp	r0, #0
 801446c:	f040 822d 	bne.w	80148ca <_dtoa_r+0x8fa>
 8014470:	9b06      	ldr	r3, [sp, #24]
 8014472:	9a06      	ldr	r2, [sp, #24]
 8014474:	1c5d      	adds	r5, r3, #1
 8014476:	2331      	movs	r3, #49	; 0x31
 8014478:	f10a 0a01 	add.w	sl, sl, #1
 801447c:	7013      	strb	r3, [r2, #0]
 801447e:	e228      	b.n	80148d2 <_dtoa_r+0x902>
 8014480:	07f2      	lsls	r2, r6, #31
 8014482:	d505      	bpl.n	8014490 <_dtoa_r+0x4c0>
 8014484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014488:	f7ec f83e 	bl	8000508 <__aeabi_dmul>
 801448c:	2301      	movs	r3, #1
 801448e:	3501      	adds	r5, #1
 8014490:	1076      	asrs	r6, r6, #1
 8014492:	3708      	adds	r7, #8
 8014494:	e76e      	b.n	8014374 <_dtoa_r+0x3a4>
 8014496:	2502      	movs	r5, #2
 8014498:	e771      	b.n	801437e <_dtoa_r+0x3ae>
 801449a:	4657      	mov	r7, sl
 801449c:	4646      	mov	r6, r8
 801449e:	e790      	b.n	80143c2 <_dtoa_r+0x3f2>
 80144a0:	4b4d      	ldr	r3, [pc, #308]	; (80145d8 <_dtoa_r+0x608>)
 80144a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80144a6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80144aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d048      	beq.n	8014542 <_dtoa_r+0x572>
 80144b0:	4602      	mov	r2, r0
 80144b2:	460b      	mov	r3, r1
 80144b4:	2000      	movs	r0, #0
 80144b6:	494e      	ldr	r1, [pc, #312]	; (80145f0 <_dtoa_r+0x620>)
 80144b8:	f7ec f950 	bl	800075c <__aeabi_ddiv>
 80144bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80144c0:	f7eb fe6a 	bl	8000198 <__aeabi_dsub>
 80144c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80144c8:	9d06      	ldr	r5, [sp, #24]
 80144ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144ce:	f7ec facb 	bl	8000a68 <__aeabi_d2iz>
 80144d2:	9011      	str	r0, [sp, #68]	; 0x44
 80144d4:	f7eb ffae 	bl	8000434 <__aeabi_i2d>
 80144d8:	4602      	mov	r2, r0
 80144da:	460b      	mov	r3, r1
 80144dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144e0:	f7eb fe5a 	bl	8000198 <__aeabi_dsub>
 80144e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80144e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144ea:	3330      	adds	r3, #48	; 0x30
 80144ec:	f805 3b01 	strb.w	r3, [r5], #1
 80144f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80144f4:	f7ec fa7a 	bl	80009ec <__aeabi_dcmplt>
 80144f8:	2800      	cmp	r0, #0
 80144fa:	d163      	bne.n	80145c4 <_dtoa_r+0x5f4>
 80144fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014500:	2000      	movs	r0, #0
 8014502:	4937      	ldr	r1, [pc, #220]	; (80145e0 <_dtoa_r+0x610>)
 8014504:	f7eb fe48 	bl	8000198 <__aeabi_dsub>
 8014508:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801450c:	f7ec fa6e 	bl	80009ec <__aeabi_dcmplt>
 8014510:	2800      	cmp	r0, #0
 8014512:	f040 80b5 	bne.w	8014680 <_dtoa_r+0x6b0>
 8014516:	9b06      	ldr	r3, [sp, #24]
 8014518:	1aeb      	subs	r3, r5, r3
 801451a:	429e      	cmp	r6, r3
 801451c:	f77f af7c 	ble.w	8014418 <_dtoa_r+0x448>
 8014520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014524:	2200      	movs	r2, #0
 8014526:	4b2f      	ldr	r3, [pc, #188]	; (80145e4 <_dtoa_r+0x614>)
 8014528:	f7eb ffee 	bl	8000508 <__aeabi_dmul>
 801452c:	2200      	movs	r2, #0
 801452e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014536:	4b2b      	ldr	r3, [pc, #172]	; (80145e4 <_dtoa_r+0x614>)
 8014538:	f7eb ffe6 	bl	8000508 <__aeabi_dmul>
 801453c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014540:	e7c3      	b.n	80144ca <_dtoa_r+0x4fa>
 8014542:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014546:	f7eb ffdf 	bl	8000508 <__aeabi_dmul>
 801454a:	9b06      	ldr	r3, [sp, #24]
 801454c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014550:	199d      	adds	r5, r3, r6
 8014552:	461e      	mov	r6, r3
 8014554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014558:	f7ec fa86 	bl	8000a68 <__aeabi_d2iz>
 801455c:	9011      	str	r0, [sp, #68]	; 0x44
 801455e:	f7eb ff69 	bl	8000434 <__aeabi_i2d>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801456a:	f7eb fe15 	bl	8000198 <__aeabi_dsub>
 801456e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014574:	3330      	adds	r3, #48	; 0x30
 8014576:	f806 3b01 	strb.w	r3, [r6], #1
 801457a:	42ae      	cmp	r6, r5
 801457c:	f04f 0200 	mov.w	r2, #0
 8014580:	d124      	bne.n	80145cc <_dtoa_r+0x5fc>
 8014582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014586:	4b1a      	ldr	r3, [pc, #104]	; (80145f0 <_dtoa_r+0x620>)
 8014588:	f7eb fe08 	bl	800019c <__adddf3>
 801458c:	4602      	mov	r2, r0
 801458e:	460b      	mov	r3, r1
 8014590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014594:	f7ec fa48 	bl	8000a28 <__aeabi_dcmpgt>
 8014598:	2800      	cmp	r0, #0
 801459a:	d171      	bne.n	8014680 <_dtoa_r+0x6b0>
 801459c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80145a0:	2000      	movs	r0, #0
 80145a2:	4913      	ldr	r1, [pc, #76]	; (80145f0 <_dtoa_r+0x620>)
 80145a4:	f7eb fdf8 	bl	8000198 <__aeabi_dsub>
 80145a8:	4602      	mov	r2, r0
 80145aa:	460b      	mov	r3, r1
 80145ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145b0:	f7ec fa1c 	bl	80009ec <__aeabi_dcmplt>
 80145b4:	2800      	cmp	r0, #0
 80145b6:	f43f af2f 	beq.w	8014418 <_dtoa_r+0x448>
 80145ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80145be:	1e6a      	subs	r2, r5, #1
 80145c0:	2b30      	cmp	r3, #48	; 0x30
 80145c2:	d001      	beq.n	80145c8 <_dtoa_r+0x5f8>
 80145c4:	46ba      	mov	sl, r7
 80145c6:	e04a      	b.n	801465e <_dtoa_r+0x68e>
 80145c8:	4615      	mov	r5, r2
 80145ca:	e7f6      	b.n	80145ba <_dtoa_r+0x5ea>
 80145cc:	4b05      	ldr	r3, [pc, #20]	; (80145e4 <_dtoa_r+0x614>)
 80145ce:	f7eb ff9b 	bl	8000508 <__aeabi_dmul>
 80145d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145d6:	e7bd      	b.n	8014554 <_dtoa_r+0x584>
 80145d8:	0801a600 	.word	0x0801a600
 80145dc:	0801a5d8 	.word	0x0801a5d8
 80145e0:	3ff00000 	.word	0x3ff00000
 80145e4:	40240000 	.word	0x40240000
 80145e8:	401c0000 	.word	0x401c0000
 80145ec:	40140000 	.word	0x40140000
 80145f0:	3fe00000 	.word	0x3fe00000
 80145f4:	9d06      	ldr	r5, [sp, #24]
 80145f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80145fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145fe:	4630      	mov	r0, r6
 8014600:	4639      	mov	r1, r7
 8014602:	f7ec f8ab 	bl	800075c <__aeabi_ddiv>
 8014606:	f7ec fa2f 	bl	8000a68 <__aeabi_d2iz>
 801460a:	4681      	mov	r9, r0
 801460c:	f7eb ff12 	bl	8000434 <__aeabi_i2d>
 8014610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014614:	f7eb ff78 	bl	8000508 <__aeabi_dmul>
 8014618:	4602      	mov	r2, r0
 801461a:	460b      	mov	r3, r1
 801461c:	4630      	mov	r0, r6
 801461e:	4639      	mov	r1, r7
 8014620:	f7eb fdba 	bl	8000198 <__aeabi_dsub>
 8014624:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8014628:	f805 6b01 	strb.w	r6, [r5], #1
 801462c:	9e06      	ldr	r6, [sp, #24]
 801462e:	4602      	mov	r2, r0
 8014630:	1bae      	subs	r6, r5, r6
 8014632:	45b0      	cmp	r8, r6
 8014634:	460b      	mov	r3, r1
 8014636:	d135      	bne.n	80146a4 <_dtoa_r+0x6d4>
 8014638:	f7eb fdb0 	bl	800019c <__adddf3>
 801463c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014640:	4606      	mov	r6, r0
 8014642:	460f      	mov	r7, r1
 8014644:	f7ec f9f0 	bl	8000a28 <__aeabi_dcmpgt>
 8014648:	b9c8      	cbnz	r0, 801467e <_dtoa_r+0x6ae>
 801464a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801464e:	4630      	mov	r0, r6
 8014650:	4639      	mov	r1, r7
 8014652:	f7ec f9c1 	bl	80009d8 <__aeabi_dcmpeq>
 8014656:	b110      	cbz	r0, 801465e <_dtoa_r+0x68e>
 8014658:	f019 0f01 	tst.w	r9, #1
 801465c:	d10f      	bne.n	801467e <_dtoa_r+0x6ae>
 801465e:	4659      	mov	r1, fp
 8014660:	4620      	mov	r0, r4
 8014662:	f000 ffdf 	bl	8015624 <_Bfree>
 8014666:	2300      	movs	r3, #0
 8014668:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801466a:	702b      	strb	r3, [r5, #0]
 801466c:	f10a 0301 	add.w	r3, sl, #1
 8014670:	6013      	str	r3, [r2, #0]
 8014672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014674:	2b00      	cmp	r3, #0
 8014676:	f43f acf3 	beq.w	8014060 <_dtoa_r+0x90>
 801467a:	601d      	str	r5, [r3, #0]
 801467c:	e4f0      	b.n	8014060 <_dtoa_r+0x90>
 801467e:	4657      	mov	r7, sl
 8014680:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014684:	1e6b      	subs	r3, r5, #1
 8014686:	2a39      	cmp	r2, #57	; 0x39
 8014688:	d106      	bne.n	8014698 <_dtoa_r+0x6c8>
 801468a:	9a06      	ldr	r2, [sp, #24]
 801468c:	429a      	cmp	r2, r3
 801468e:	d107      	bne.n	80146a0 <_dtoa_r+0x6d0>
 8014690:	2330      	movs	r3, #48	; 0x30
 8014692:	7013      	strb	r3, [r2, #0]
 8014694:	4613      	mov	r3, r2
 8014696:	3701      	adds	r7, #1
 8014698:	781a      	ldrb	r2, [r3, #0]
 801469a:	3201      	adds	r2, #1
 801469c:	701a      	strb	r2, [r3, #0]
 801469e:	e791      	b.n	80145c4 <_dtoa_r+0x5f4>
 80146a0:	461d      	mov	r5, r3
 80146a2:	e7ed      	b.n	8014680 <_dtoa_r+0x6b0>
 80146a4:	2200      	movs	r2, #0
 80146a6:	4b99      	ldr	r3, [pc, #612]	; (801490c <_dtoa_r+0x93c>)
 80146a8:	f7eb ff2e 	bl	8000508 <__aeabi_dmul>
 80146ac:	2200      	movs	r2, #0
 80146ae:	2300      	movs	r3, #0
 80146b0:	4606      	mov	r6, r0
 80146b2:	460f      	mov	r7, r1
 80146b4:	f7ec f990 	bl	80009d8 <__aeabi_dcmpeq>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	d09e      	beq.n	80145fa <_dtoa_r+0x62a>
 80146bc:	e7cf      	b.n	801465e <_dtoa_r+0x68e>
 80146be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146c0:	2a00      	cmp	r2, #0
 80146c2:	f000 8088 	beq.w	80147d6 <_dtoa_r+0x806>
 80146c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80146c8:	2a01      	cmp	r2, #1
 80146ca:	dc6d      	bgt.n	80147a8 <_dtoa_r+0x7d8>
 80146cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146ce:	2a00      	cmp	r2, #0
 80146d0:	d066      	beq.n	80147a0 <_dtoa_r+0x7d0>
 80146d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80146d6:	464d      	mov	r5, r9
 80146d8:	9e08      	ldr	r6, [sp, #32]
 80146da:	9a07      	ldr	r2, [sp, #28]
 80146dc:	2101      	movs	r1, #1
 80146de:	441a      	add	r2, r3
 80146e0:	4620      	mov	r0, r4
 80146e2:	4499      	add	r9, r3
 80146e4:	9207      	str	r2, [sp, #28]
 80146e6:	f001 f87b 	bl	80157e0 <__i2b>
 80146ea:	4607      	mov	r7, r0
 80146ec:	2d00      	cmp	r5, #0
 80146ee:	dd0b      	ble.n	8014708 <_dtoa_r+0x738>
 80146f0:	9b07      	ldr	r3, [sp, #28]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	dd08      	ble.n	8014708 <_dtoa_r+0x738>
 80146f6:	42ab      	cmp	r3, r5
 80146f8:	bfa8      	it	ge
 80146fa:	462b      	movge	r3, r5
 80146fc:	9a07      	ldr	r2, [sp, #28]
 80146fe:	eba9 0903 	sub.w	r9, r9, r3
 8014702:	1aed      	subs	r5, r5, r3
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	9307      	str	r3, [sp, #28]
 8014708:	9b08      	ldr	r3, [sp, #32]
 801470a:	b1eb      	cbz	r3, 8014748 <_dtoa_r+0x778>
 801470c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801470e:	2b00      	cmp	r3, #0
 8014710:	d065      	beq.n	80147de <_dtoa_r+0x80e>
 8014712:	b18e      	cbz	r6, 8014738 <_dtoa_r+0x768>
 8014714:	4639      	mov	r1, r7
 8014716:	4632      	mov	r2, r6
 8014718:	4620      	mov	r0, r4
 801471a:	f001 f8ff 	bl	801591c <__pow5mult>
 801471e:	465a      	mov	r2, fp
 8014720:	4601      	mov	r1, r0
 8014722:	4607      	mov	r7, r0
 8014724:	4620      	mov	r0, r4
 8014726:	f001 f864 	bl	80157f2 <__multiply>
 801472a:	4659      	mov	r1, fp
 801472c:	900a      	str	r0, [sp, #40]	; 0x28
 801472e:	4620      	mov	r0, r4
 8014730:	f000 ff78 	bl	8015624 <_Bfree>
 8014734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014736:	469b      	mov	fp, r3
 8014738:	9b08      	ldr	r3, [sp, #32]
 801473a:	1b9a      	subs	r2, r3, r6
 801473c:	d004      	beq.n	8014748 <_dtoa_r+0x778>
 801473e:	4659      	mov	r1, fp
 8014740:	4620      	mov	r0, r4
 8014742:	f001 f8eb 	bl	801591c <__pow5mult>
 8014746:	4683      	mov	fp, r0
 8014748:	2101      	movs	r1, #1
 801474a:	4620      	mov	r0, r4
 801474c:	f001 f848 	bl	80157e0 <__i2b>
 8014750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014752:	4606      	mov	r6, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	f000 81c6 	beq.w	8014ae6 <_dtoa_r+0xb16>
 801475a:	461a      	mov	r2, r3
 801475c:	4601      	mov	r1, r0
 801475e:	4620      	mov	r0, r4
 8014760:	f001 f8dc 	bl	801591c <__pow5mult>
 8014764:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014766:	4606      	mov	r6, r0
 8014768:	2b01      	cmp	r3, #1
 801476a:	dc3e      	bgt.n	80147ea <_dtoa_r+0x81a>
 801476c:	9b02      	ldr	r3, [sp, #8]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d137      	bne.n	80147e2 <_dtoa_r+0x812>
 8014772:	9b03      	ldr	r3, [sp, #12]
 8014774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014778:	2b00      	cmp	r3, #0
 801477a:	d134      	bne.n	80147e6 <_dtoa_r+0x816>
 801477c:	9b03      	ldr	r3, [sp, #12]
 801477e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014782:	0d1b      	lsrs	r3, r3, #20
 8014784:	051b      	lsls	r3, r3, #20
 8014786:	b12b      	cbz	r3, 8014794 <_dtoa_r+0x7c4>
 8014788:	9b07      	ldr	r3, [sp, #28]
 801478a:	f109 0901 	add.w	r9, r9, #1
 801478e:	3301      	adds	r3, #1
 8014790:	9307      	str	r3, [sp, #28]
 8014792:	2301      	movs	r3, #1
 8014794:	9308      	str	r3, [sp, #32]
 8014796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014798:	2b00      	cmp	r3, #0
 801479a:	d128      	bne.n	80147ee <_dtoa_r+0x81e>
 801479c:	2001      	movs	r0, #1
 801479e:	e02e      	b.n	80147fe <_dtoa_r+0x82e>
 80147a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80147a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80147a6:	e796      	b.n	80146d6 <_dtoa_r+0x706>
 80147a8:	9b08      	ldr	r3, [sp, #32]
 80147aa:	f108 36ff 	add.w	r6, r8, #4294967295
 80147ae:	42b3      	cmp	r3, r6
 80147b0:	bfb7      	itett	lt
 80147b2:	9b08      	ldrlt	r3, [sp, #32]
 80147b4:	1b9e      	subge	r6, r3, r6
 80147b6:	1af2      	sublt	r2, r6, r3
 80147b8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80147ba:	bfbf      	itttt	lt
 80147bc:	9608      	strlt	r6, [sp, #32]
 80147be:	189b      	addlt	r3, r3, r2
 80147c0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80147c2:	2600      	movlt	r6, #0
 80147c4:	f1b8 0f00 	cmp.w	r8, #0
 80147c8:	bfb9      	ittee	lt
 80147ca:	eba9 0508 	sublt.w	r5, r9, r8
 80147ce:	2300      	movlt	r3, #0
 80147d0:	464d      	movge	r5, r9
 80147d2:	4643      	movge	r3, r8
 80147d4:	e781      	b.n	80146da <_dtoa_r+0x70a>
 80147d6:	9e08      	ldr	r6, [sp, #32]
 80147d8:	464d      	mov	r5, r9
 80147da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80147dc:	e786      	b.n	80146ec <_dtoa_r+0x71c>
 80147de:	9a08      	ldr	r2, [sp, #32]
 80147e0:	e7ad      	b.n	801473e <_dtoa_r+0x76e>
 80147e2:	2300      	movs	r3, #0
 80147e4:	e7d6      	b.n	8014794 <_dtoa_r+0x7c4>
 80147e6:	9b02      	ldr	r3, [sp, #8]
 80147e8:	e7d4      	b.n	8014794 <_dtoa_r+0x7c4>
 80147ea:	2300      	movs	r3, #0
 80147ec:	9308      	str	r3, [sp, #32]
 80147ee:	6933      	ldr	r3, [r6, #16]
 80147f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80147f4:	6918      	ldr	r0, [r3, #16]
 80147f6:	f000 ffa5 	bl	8015744 <__hi0bits>
 80147fa:	f1c0 0020 	rsb	r0, r0, #32
 80147fe:	9b07      	ldr	r3, [sp, #28]
 8014800:	4418      	add	r0, r3
 8014802:	f010 001f 	ands.w	r0, r0, #31
 8014806:	d047      	beq.n	8014898 <_dtoa_r+0x8c8>
 8014808:	f1c0 0320 	rsb	r3, r0, #32
 801480c:	2b04      	cmp	r3, #4
 801480e:	dd3b      	ble.n	8014888 <_dtoa_r+0x8b8>
 8014810:	9b07      	ldr	r3, [sp, #28]
 8014812:	f1c0 001c 	rsb	r0, r0, #28
 8014816:	4481      	add	r9, r0
 8014818:	4405      	add	r5, r0
 801481a:	4403      	add	r3, r0
 801481c:	9307      	str	r3, [sp, #28]
 801481e:	f1b9 0f00 	cmp.w	r9, #0
 8014822:	dd05      	ble.n	8014830 <_dtoa_r+0x860>
 8014824:	4659      	mov	r1, fp
 8014826:	464a      	mov	r2, r9
 8014828:	4620      	mov	r0, r4
 801482a:	f001 f8c5 	bl	80159b8 <__lshift>
 801482e:	4683      	mov	fp, r0
 8014830:	9b07      	ldr	r3, [sp, #28]
 8014832:	2b00      	cmp	r3, #0
 8014834:	dd05      	ble.n	8014842 <_dtoa_r+0x872>
 8014836:	4631      	mov	r1, r6
 8014838:	461a      	mov	r2, r3
 801483a:	4620      	mov	r0, r4
 801483c:	f001 f8bc 	bl	80159b8 <__lshift>
 8014840:	4606      	mov	r6, r0
 8014842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014844:	b353      	cbz	r3, 801489c <_dtoa_r+0x8cc>
 8014846:	4631      	mov	r1, r6
 8014848:	4658      	mov	r0, fp
 801484a:	f001 f909 	bl	8015a60 <__mcmp>
 801484e:	2800      	cmp	r0, #0
 8014850:	da24      	bge.n	801489c <_dtoa_r+0x8cc>
 8014852:	2300      	movs	r3, #0
 8014854:	4659      	mov	r1, fp
 8014856:	220a      	movs	r2, #10
 8014858:	4620      	mov	r0, r4
 801485a:	f000 fefa 	bl	8015652 <__multadd>
 801485e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014860:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014864:	4683      	mov	fp, r0
 8014866:	2b00      	cmp	r3, #0
 8014868:	f000 8144 	beq.w	8014af4 <_dtoa_r+0xb24>
 801486c:	2300      	movs	r3, #0
 801486e:	4639      	mov	r1, r7
 8014870:	220a      	movs	r2, #10
 8014872:	4620      	mov	r0, r4
 8014874:	f000 feed 	bl	8015652 <__multadd>
 8014878:	9b04      	ldr	r3, [sp, #16]
 801487a:	4607      	mov	r7, r0
 801487c:	2b00      	cmp	r3, #0
 801487e:	dc4d      	bgt.n	801491c <_dtoa_r+0x94c>
 8014880:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014882:	2b02      	cmp	r3, #2
 8014884:	dd4a      	ble.n	801491c <_dtoa_r+0x94c>
 8014886:	e011      	b.n	80148ac <_dtoa_r+0x8dc>
 8014888:	d0c9      	beq.n	801481e <_dtoa_r+0x84e>
 801488a:	9a07      	ldr	r2, [sp, #28]
 801488c:	331c      	adds	r3, #28
 801488e:	441a      	add	r2, r3
 8014890:	4499      	add	r9, r3
 8014892:	441d      	add	r5, r3
 8014894:	4613      	mov	r3, r2
 8014896:	e7c1      	b.n	801481c <_dtoa_r+0x84c>
 8014898:	4603      	mov	r3, r0
 801489a:	e7f6      	b.n	801488a <_dtoa_r+0x8ba>
 801489c:	f1b8 0f00 	cmp.w	r8, #0
 80148a0:	dc36      	bgt.n	8014910 <_dtoa_r+0x940>
 80148a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80148a4:	2b02      	cmp	r3, #2
 80148a6:	dd33      	ble.n	8014910 <_dtoa_r+0x940>
 80148a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80148ac:	9b04      	ldr	r3, [sp, #16]
 80148ae:	b963      	cbnz	r3, 80148ca <_dtoa_r+0x8fa>
 80148b0:	4631      	mov	r1, r6
 80148b2:	2205      	movs	r2, #5
 80148b4:	4620      	mov	r0, r4
 80148b6:	f000 fecc 	bl	8015652 <__multadd>
 80148ba:	4601      	mov	r1, r0
 80148bc:	4606      	mov	r6, r0
 80148be:	4658      	mov	r0, fp
 80148c0:	f001 f8ce 	bl	8015a60 <__mcmp>
 80148c4:	2800      	cmp	r0, #0
 80148c6:	f73f add3 	bgt.w	8014470 <_dtoa_r+0x4a0>
 80148ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80148cc:	9d06      	ldr	r5, [sp, #24]
 80148ce:	ea6f 0a03 	mvn.w	sl, r3
 80148d2:	f04f 0900 	mov.w	r9, #0
 80148d6:	4631      	mov	r1, r6
 80148d8:	4620      	mov	r0, r4
 80148da:	f000 fea3 	bl	8015624 <_Bfree>
 80148de:	2f00      	cmp	r7, #0
 80148e0:	f43f aebd 	beq.w	801465e <_dtoa_r+0x68e>
 80148e4:	f1b9 0f00 	cmp.w	r9, #0
 80148e8:	d005      	beq.n	80148f6 <_dtoa_r+0x926>
 80148ea:	45b9      	cmp	r9, r7
 80148ec:	d003      	beq.n	80148f6 <_dtoa_r+0x926>
 80148ee:	4649      	mov	r1, r9
 80148f0:	4620      	mov	r0, r4
 80148f2:	f000 fe97 	bl	8015624 <_Bfree>
 80148f6:	4639      	mov	r1, r7
 80148f8:	4620      	mov	r0, r4
 80148fa:	f000 fe93 	bl	8015624 <_Bfree>
 80148fe:	e6ae      	b.n	801465e <_dtoa_r+0x68e>
 8014900:	2600      	movs	r6, #0
 8014902:	4637      	mov	r7, r6
 8014904:	e7e1      	b.n	80148ca <_dtoa_r+0x8fa>
 8014906:	46ba      	mov	sl, r7
 8014908:	4637      	mov	r7, r6
 801490a:	e5b1      	b.n	8014470 <_dtoa_r+0x4a0>
 801490c:	40240000 	.word	0x40240000
 8014910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014912:	f8cd 8010 	str.w	r8, [sp, #16]
 8014916:	2b00      	cmp	r3, #0
 8014918:	f000 80f3 	beq.w	8014b02 <_dtoa_r+0xb32>
 801491c:	2d00      	cmp	r5, #0
 801491e:	dd05      	ble.n	801492c <_dtoa_r+0x95c>
 8014920:	4639      	mov	r1, r7
 8014922:	462a      	mov	r2, r5
 8014924:	4620      	mov	r0, r4
 8014926:	f001 f847 	bl	80159b8 <__lshift>
 801492a:	4607      	mov	r7, r0
 801492c:	9b08      	ldr	r3, [sp, #32]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d04c      	beq.n	80149cc <_dtoa_r+0x9fc>
 8014932:	6879      	ldr	r1, [r7, #4]
 8014934:	4620      	mov	r0, r4
 8014936:	f000 fe41 	bl	80155bc <_Balloc>
 801493a:	4605      	mov	r5, r0
 801493c:	693a      	ldr	r2, [r7, #16]
 801493e:	f107 010c 	add.w	r1, r7, #12
 8014942:	3202      	adds	r2, #2
 8014944:	0092      	lsls	r2, r2, #2
 8014946:	300c      	adds	r0, #12
 8014948:	f7fd fc50 	bl	80121ec <memcpy>
 801494c:	2201      	movs	r2, #1
 801494e:	4629      	mov	r1, r5
 8014950:	4620      	mov	r0, r4
 8014952:	f001 f831 	bl	80159b8 <__lshift>
 8014956:	46b9      	mov	r9, r7
 8014958:	4607      	mov	r7, r0
 801495a:	9b06      	ldr	r3, [sp, #24]
 801495c:	9307      	str	r3, [sp, #28]
 801495e:	9b02      	ldr	r3, [sp, #8]
 8014960:	f003 0301 	and.w	r3, r3, #1
 8014964:	9308      	str	r3, [sp, #32]
 8014966:	4631      	mov	r1, r6
 8014968:	4658      	mov	r0, fp
 801496a:	f7ff faa3 	bl	8013eb4 <quorem>
 801496e:	4649      	mov	r1, r9
 8014970:	4605      	mov	r5, r0
 8014972:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014976:	4658      	mov	r0, fp
 8014978:	f001 f872 	bl	8015a60 <__mcmp>
 801497c:	463a      	mov	r2, r7
 801497e:	9002      	str	r0, [sp, #8]
 8014980:	4631      	mov	r1, r6
 8014982:	4620      	mov	r0, r4
 8014984:	f001 f886 	bl	8015a94 <__mdiff>
 8014988:	68c3      	ldr	r3, [r0, #12]
 801498a:	4602      	mov	r2, r0
 801498c:	bb03      	cbnz	r3, 80149d0 <_dtoa_r+0xa00>
 801498e:	4601      	mov	r1, r0
 8014990:	9009      	str	r0, [sp, #36]	; 0x24
 8014992:	4658      	mov	r0, fp
 8014994:	f001 f864 	bl	8015a60 <__mcmp>
 8014998:	4603      	mov	r3, r0
 801499a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801499c:	4611      	mov	r1, r2
 801499e:	4620      	mov	r0, r4
 80149a0:	9309      	str	r3, [sp, #36]	; 0x24
 80149a2:	f000 fe3f 	bl	8015624 <_Bfree>
 80149a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149a8:	b9a3      	cbnz	r3, 80149d4 <_dtoa_r+0xa04>
 80149aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80149ac:	b992      	cbnz	r2, 80149d4 <_dtoa_r+0xa04>
 80149ae:	9a08      	ldr	r2, [sp, #32]
 80149b0:	b982      	cbnz	r2, 80149d4 <_dtoa_r+0xa04>
 80149b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80149b6:	d029      	beq.n	8014a0c <_dtoa_r+0xa3c>
 80149b8:	9b02      	ldr	r3, [sp, #8]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	dd01      	ble.n	80149c2 <_dtoa_r+0x9f2>
 80149be:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80149c2:	9b07      	ldr	r3, [sp, #28]
 80149c4:	1c5d      	adds	r5, r3, #1
 80149c6:	f883 8000 	strb.w	r8, [r3]
 80149ca:	e784      	b.n	80148d6 <_dtoa_r+0x906>
 80149cc:	4638      	mov	r0, r7
 80149ce:	e7c2      	b.n	8014956 <_dtoa_r+0x986>
 80149d0:	2301      	movs	r3, #1
 80149d2:	e7e3      	b.n	801499c <_dtoa_r+0x9cc>
 80149d4:	9a02      	ldr	r2, [sp, #8]
 80149d6:	2a00      	cmp	r2, #0
 80149d8:	db04      	blt.n	80149e4 <_dtoa_r+0xa14>
 80149da:	d123      	bne.n	8014a24 <_dtoa_r+0xa54>
 80149dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80149de:	bb0a      	cbnz	r2, 8014a24 <_dtoa_r+0xa54>
 80149e0:	9a08      	ldr	r2, [sp, #32]
 80149e2:	b9fa      	cbnz	r2, 8014a24 <_dtoa_r+0xa54>
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	ddec      	ble.n	80149c2 <_dtoa_r+0x9f2>
 80149e8:	4659      	mov	r1, fp
 80149ea:	2201      	movs	r2, #1
 80149ec:	4620      	mov	r0, r4
 80149ee:	f000 ffe3 	bl	80159b8 <__lshift>
 80149f2:	4631      	mov	r1, r6
 80149f4:	4683      	mov	fp, r0
 80149f6:	f001 f833 	bl	8015a60 <__mcmp>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	dc03      	bgt.n	8014a06 <_dtoa_r+0xa36>
 80149fe:	d1e0      	bne.n	80149c2 <_dtoa_r+0x9f2>
 8014a00:	f018 0f01 	tst.w	r8, #1
 8014a04:	d0dd      	beq.n	80149c2 <_dtoa_r+0x9f2>
 8014a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014a0a:	d1d8      	bne.n	80149be <_dtoa_r+0x9ee>
 8014a0c:	9b07      	ldr	r3, [sp, #28]
 8014a0e:	9a07      	ldr	r2, [sp, #28]
 8014a10:	1c5d      	adds	r5, r3, #1
 8014a12:	2339      	movs	r3, #57	; 0x39
 8014a14:	7013      	strb	r3, [r2, #0]
 8014a16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014a1a:	1e6a      	subs	r2, r5, #1
 8014a1c:	2b39      	cmp	r3, #57	; 0x39
 8014a1e:	d04d      	beq.n	8014abc <_dtoa_r+0xaec>
 8014a20:	3301      	adds	r3, #1
 8014a22:	e052      	b.n	8014aca <_dtoa_r+0xafa>
 8014a24:	9a07      	ldr	r2, [sp, #28]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f102 0501 	add.w	r5, r2, #1
 8014a2c:	dd06      	ble.n	8014a3c <_dtoa_r+0xa6c>
 8014a2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014a32:	d0eb      	beq.n	8014a0c <_dtoa_r+0xa3c>
 8014a34:	f108 0801 	add.w	r8, r8, #1
 8014a38:	9b07      	ldr	r3, [sp, #28]
 8014a3a:	e7c4      	b.n	80149c6 <_dtoa_r+0x9f6>
 8014a3c:	9b06      	ldr	r3, [sp, #24]
 8014a3e:	9a04      	ldr	r2, [sp, #16]
 8014a40:	1aeb      	subs	r3, r5, r3
 8014a42:	4293      	cmp	r3, r2
 8014a44:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014a48:	d021      	beq.n	8014a8e <_dtoa_r+0xabe>
 8014a4a:	4659      	mov	r1, fp
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	220a      	movs	r2, #10
 8014a50:	4620      	mov	r0, r4
 8014a52:	f000 fdfe 	bl	8015652 <__multadd>
 8014a56:	45b9      	cmp	r9, r7
 8014a58:	4683      	mov	fp, r0
 8014a5a:	f04f 0300 	mov.w	r3, #0
 8014a5e:	f04f 020a 	mov.w	r2, #10
 8014a62:	4649      	mov	r1, r9
 8014a64:	4620      	mov	r0, r4
 8014a66:	d105      	bne.n	8014a74 <_dtoa_r+0xaa4>
 8014a68:	f000 fdf3 	bl	8015652 <__multadd>
 8014a6c:	4681      	mov	r9, r0
 8014a6e:	4607      	mov	r7, r0
 8014a70:	9507      	str	r5, [sp, #28]
 8014a72:	e778      	b.n	8014966 <_dtoa_r+0x996>
 8014a74:	f000 fded 	bl	8015652 <__multadd>
 8014a78:	4639      	mov	r1, r7
 8014a7a:	4681      	mov	r9, r0
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	220a      	movs	r2, #10
 8014a80:	4620      	mov	r0, r4
 8014a82:	f000 fde6 	bl	8015652 <__multadd>
 8014a86:	4607      	mov	r7, r0
 8014a88:	e7f2      	b.n	8014a70 <_dtoa_r+0xaa0>
 8014a8a:	f04f 0900 	mov.w	r9, #0
 8014a8e:	4659      	mov	r1, fp
 8014a90:	2201      	movs	r2, #1
 8014a92:	4620      	mov	r0, r4
 8014a94:	f000 ff90 	bl	80159b8 <__lshift>
 8014a98:	4631      	mov	r1, r6
 8014a9a:	4683      	mov	fp, r0
 8014a9c:	f000 ffe0 	bl	8015a60 <__mcmp>
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	dcb8      	bgt.n	8014a16 <_dtoa_r+0xa46>
 8014aa4:	d102      	bne.n	8014aac <_dtoa_r+0xadc>
 8014aa6:	f018 0f01 	tst.w	r8, #1
 8014aaa:	d1b4      	bne.n	8014a16 <_dtoa_r+0xa46>
 8014aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014ab0:	1e6a      	subs	r2, r5, #1
 8014ab2:	2b30      	cmp	r3, #48	; 0x30
 8014ab4:	f47f af0f 	bne.w	80148d6 <_dtoa_r+0x906>
 8014ab8:	4615      	mov	r5, r2
 8014aba:	e7f7      	b.n	8014aac <_dtoa_r+0xadc>
 8014abc:	9b06      	ldr	r3, [sp, #24]
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d105      	bne.n	8014ace <_dtoa_r+0xafe>
 8014ac2:	2331      	movs	r3, #49	; 0x31
 8014ac4:	9a06      	ldr	r2, [sp, #24]
 8014ac6:	f10a 0a01 	add.w	sl, sl, #1
 8014aca:	7013      	strb	r3, [r2, #0]
 8014acc:	e703      	b.n	80148d6 <_dtoa_r+0x906>
 8014ace:	4615      	mov	r5, r2
 8014ad0:	e7a1      	b.n	8014a16 <_dtoa_r+0xa46>
 8014ad2:	4b17      	ldr	r3, [pc, #92]	; (8014b30 <_dtoa_r+0xb60>)
 8014ad4:	f7ff bae1 	b.w	801409a <_dtoa_r+0xca>
 8014ad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	f47f aabb 	bne.w	8014056 <_dtoa_r+0x86>
 8014ae0:	4b14      	ldr	r3, [pc, #80]	; (8014b34 <_dtoa_r+0xb64>)
 8014ae2:	f7ff bada 	b.w	801409a <_dtoa_r+0xca>
 8014ae6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	f77f ae3f 	ble.w	801476c <_dtoa_r+0x79c>
 8014aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014af0:	9308      	str	r3, [sp, #32]
 8014af2:	e653      	b.n	801479c <_dtoa_r+0x7cc>
 8014af4:	9b04      	ldr	r3, [sp, #16]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	dc03      	bgt.n	8014b02 <_dtoa_r+0xb32>
 8014afa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	f73f aed5 	bgt.w	80148ac <_dtoa_r+0x8dc>
 8014b02:	9d06      	ldr	r5, [sp, #24]
 8014b04:	4631      	mov	r1, r6
 8014b06:	4658      	mov	r0, fp
 8014b08:	f7ff f9d4 	bl	8013eb4 <quorem>
 8014b0c:	9b06      	ldr	r3, [sp, #24]
 8014b0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014b12:	f805 8b01 	strb.w	r8, [r5], #1
 8014b16:	9a04      	ldr	r2, [sp, #16]
 8014b18:	1aeb      	subs	r3, r5, r3
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	ddb5      	ble.n	8014a8a <_dtoa_r+0xaba>
 8014b1e:	4659      	mov	r1, fp
 8014b20:	2300      	movs	r3, #0
 8014b22:	220a      	movs	r2, #10
 8014b24:	4620      	mov	r0, r4
 8014b26:	f000 fd94 	bl	8015652 <__multadd>
 8014b2a:	4683      	mov	fp, r0
 8014b2c:	e7ea      	b.n	8014b04 <_dtoa_r+0xb34>
 8014b2e:	bf00      	nop
 8014b30:	0801a4d8 	.word	0x0801a4d8
 8014b34:	0801a558 	.word	0x0801a558

08014b38 <__sflush_r>:
 8014b38:	898a      	ldrh	r2, [r1, #12]
 8014b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b3e:	4605      	mov	r5, r0
 8014b40:	0710      	lsls	r0, r2, #28
 8014b42:	460c      	mov	r4, r1
 8014b44:	d458      	bmi.n	8014bf8 <__sflush_r+0xc0>
 8014b46:	684b      	ldr	r3, [r1, #4]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	dc05      	bgt.n	8014b58 <__sflush_r+0x20>
 8014b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	dc02      	bgt.n	8014b58 <__sflush_r+0x20>
 8014b52:	2000      	movs	r0, #0
 8014b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b5a:	2e00      	cmp	r6, #0
 8014b5c:	d0f9      	beq.n	8014b52 <__sflush_r+0x1a>
 8014b5e:	2300      	movs	r3, #0
 8014b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014b64:	682f      	ldr	r7, [r5, #0]
 8014b66:	6a21      	ldr	r1, [r4, #32]
 8014b68:	602b      	str	r3, [r5, #0]
 8014b6a:	d032      	beq.n	8014bd2 <__sflush_r+0x9a>
 8014b6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014b6e:	89a3      	ldrh	r3, [r4, #12]
 8014b70:	075a      	lsls	r2, r3, #29
 8014b72:	d505      	bpl.n	8014b80 <__sflush_r+0x48>
 8014b74:	6863      	ldr	r3, [r4, #4]
 8014b76:	1ac0      	subs	r0, r0, r3
 8014b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b7a:	b10b      	cbz	r3, 8014b80 <__sflush_r+0x48>
 8014b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b7e:	1ac0      	subs	r0, r0, r3
 8014b80:	2300      	movs	r3, #0
 8014b82:	4602      	mov	r2, r0
 8014b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b86:	6a21      	ldr	r1, [r4, #32]
 8014b88:	4628      	mov	r0, r5
 8014b8a:	47b0      	blx	r6
 8014b8c:	1c43      	adds	r3, r0, #1
 8014b8e:	89a3      	ldrh	r3, [r4, #12]
 8014b90:	d106      	bne.n	8014ba0 <__sflush_r+0x68>
 8014b92:	6829      	ldr	r1, [r5, #0]
 8014b94:	291d      	cmp	r1, #29
 8014b96:	d848      	bhi.n	8014c2a <__sflush_r+0xf2>
 8014b98:	4a29      	ldr	r2, [pc, #164]	; (8014c40 <__sflush_r+0x108>)
 8014b9a:	40ca      	lsrs	r2, r1
 8014b9c:	07d6      	lsls	r6, r2, #31
 8014b9e:	d544      	bpl.n	8014c2a <__sflush_r+0xf2>
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	6062      	str	r2, [r4, #4]
 8014ba4:	6922      	ldr	r2, [r4, #16]
 8014ba6:	04d9      	lsls	r1, r3, #19
 8014ba8:	6022      	str	r2, [r4, #0]
 8014baa:	d504      	bpl.n	8014bb6 <__sflush_r+0x7e>
 8014bac:	1c42      	adds	r2, r0, #1
 8014bae:	d101      	bne.n	8014bb4 <__sflush_r+0x7c>
 8014bb0:	682b      	ldr	r3, [r5, #0]
 8014bb2:	b903      	cbnz	r3, 8014bb6 <__sflush_r+0x7e>
 8014bb4:	6560      	str	r0, [r4, #84]	; 0x54
 8014bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bb8:	602f      	str	r7, [r5, #0]
 8014bba:	2900      	cmp	r1, #0
 8014bbc:	d0c9      	beq.n	8014b52 <__sflush_r+0x1a>
 8014bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bc2:	4299      	cmp	r1, r3
 8014bc4:	d002      	beq.n	8014bcc <__sflush_r+0x94>
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	f001 f8fe 	bl	8015dc8 <_free_r>
 8014bcc:	2000      	movs	r0, #0
 8014bce:	6360      	str	r0, [r4, #52]	; 0x34
 8014bd0:	e7c0      	b.n	8014b54 <__sflush_r+0x1c>
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	47b0      	blx	r6
 8014bd8:	1c41      	adds	r1, r0, #1
 8014bda:	d1c8      	bne.n	8014b6e <__sflush_r+0x36>
 8014bdc:	682b      	ldr	r3, [r5, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d0c5      	beq.n	8014b6e <__sflush_r+0x36>
 8014be2:	2b1d      	cmp	r3, #29
 8014be4:	d001      	beq.n	8014bea <__sflush_r+0xb2>
 8014be6:	2b16      	cmp	r3, #22
 8014be8:	d101      	bne.n	8014bee <__sflush_r+0xb6>
 8014bea:	602f      	str	r7, [r5, #0]
 8014bec:	e7b1      	b.n	8014b52 <__sflush_r+0x1a>
 8014bee:	89a3      	ldrh	r3, [r4, #12]
 8014bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bf4:	81a3      	strh	r3, [r4, #12]
 8014bf6:	e7ad      	b.n	8014b54 <__sflush_r+0x1c>
 8014bf8:	690f      	ldr	r7, [r1, #16]
 8014bfa:	2f00      	cmp	r7, #0
 8014bfc:	d0a9      	beq.n	8014b52 <__sflush_r+0x1a>
 8014bfe:	0793      	lsls	r3, r2, #30
 8014c00:	bf18      	it	ne
 8014c02:	2300      	movne	r3, #0
 8014c04:	680e      	ldr	r6, [r1, #0]
 8014c06:	bf08      	it	eq
 8014c08:	694b      	ldreq	r3, [r1, #20]
 8014c0a:	eba6 0807 	sub.w	r8, r6, r7
 8014c0e:	600f      	str	r7, [r1, #0]
 8014c10:	608b      	str	r3, [r1, #8]
 8014c12:	f1b8 0f00 	cmp.w	r8, #0
 8014c16:	dd9c      	ble.n	8014b52 <__sflush_r+0x1a>
 8014c18:	4643      	mov	r3, r8
 8014c1a:	463a      	mov	r2, r7
 8014c1c:	6a21      	ldr	r1, [r4, #32]
 8014c1e:	4628      	mov	r0, r5
 8014c20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c22:	47b0      	blx	r6
 8014c24:	2800      	cmp	r0, #0
 8014c26:	dc06      	bgt.n	8014c36 <__sflush_r+0xfe>
 8014c28:	89a3      	ldrh	r3, [r4, #12]
 8014c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c2e:	81a3      	strh	r3, [r4, #12]
 8014c30:	f04f 30ff 	mov.w	r0, #4294967295
 8014c34:	e78e      	b.n	8014b54 <__sflush_r+0x1c>
 8014c36:	4407      	add	r7, r0
 8014c38:	eba8 0800 	sub.w	r8, r8, r0
 8014c3c:	e7e9      	b.n	8014c12 <__sflush_r+0xda>
 8014c3e:	bf00      	nop
 8014c40:	20400001 	.word	0x20400001

08014c44 <_fflush_r>:
 8014c44:	b538      	push	{r3, r4, r5, lr}
 8014c46:	690b      	ldr	r3, [r1, #16]
 8014c48:	4605      	mov	r5, r0
 8014c4a:	460c      	mov	r4, r1
 8014c4c:	b1db      	cbz	r3, 8014c86 <_fflush_r+0x42>
 8014c4e:	b118      	cbz	r0, 8014c58 <_fflush_r+0x14>
 8014c50:	6983      	ldr	r3, [r0, #24]
 8014c52:	b90b      	cbnz	r3, 8014c58 <_fflush_r+0x14>
 8014c54:	f000 f860 	bl	8014d18 <__sinit>
 8014c58:	4b0c      	ldr	r3, [pc, #48]	; (8014c8c <_fflush_r+0x48>)
 8014c5a:	429c      	cmp	r4, r3
 8014c5c:	d109      	bne.n	8014c72 <_fflush_r+0x2e>
 8014c5e:	686c      	ldr	r4, [r5, #4]
 8014c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c64:	b17b      	cbz	r3, 8014c86 <_fflush_r+0x42>
 8014c66:	4621      	mov	r1, r4
 8014c68:	4628      	mov	r0, r5
 8014c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c6e:	f7ff bf63 	b.w	8014b38 <__sflush_r>
 8014c72:	4b07      	ldr	r3, [pc, #28]	; (8014c90 <_fflush_r+0x4c>)
 8014c74:	429c      	cmp	r4, r3
 8014c76:	d101      	bne.n	8014c7c <_fflush_r+0x38>
 8014c78:	68ac      	ldr	r4, [r5, #8]
 8014c7a:	e7f1      	b.n	8014c60 <_fflush_r+0x1c>
 8014c7c:	4b05      	ldr	r3, [pc, #20]	; (8014c94 <_fflush_r+0x50>)
 8014c7e:	429c      	cmp	r4, r3
 8014c80:	bf08      	it	eq
 8014c82:	68ec      	ldreq	r4, [r5, #12]
 8014c84:	e7ec      	b.n	8014c60 <_fflush_r+0x1c>
 8014c86:	2000      	movs	r0, #0
 8014c88:	bd38      	pop	{r3, r4, r5, pc}
 8014c8a:	bf00      	nop
 8014c8c:	0801a588 	.word	0x0801a588
 8014c90:	0801a5a8 	.word	0x0801a5a8
 8014c94:	0801a568 	.word	0x0801a568

08014c98 <std>:
 8014c98:	2300      	movs	r3, #0
 8014c9a:	b510      	push	{r4, lr}
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8014ca2:	6083      	str	r3, [r0, #8]
 8014ca4:	8181      	strh	r1, [r0, #12]
 8014ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8014ca8:	81c2      	strh	r2, [r0, #14]
 8014caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014cae:	6183      	str	r3, [r0, #24]
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	2208      	movs	r2, #8
 8014cb4:	305c      	adds	r0, #92	; 0x5c
 8014cb6:	f7fd faa4 	bl	8012202 <memset>
 8014cba:	4b05      	ldr	r3, [pc, #20]	; (8014cd0 <std+0x38>)
 8014cbc:	6224      	str	r4, [r4, #32]
 8014cbe:	6263      	str	r3, [r4, #36]	; 0x24
 8014cc0:	4b04      	ldr	r3, [pc, #16]	; (8014cd4 <std+0x3c>)
 8014cc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8014cc4:	4b04      	ldr	r3, [pc, #16]	; (8014cd8 <std+0x40>)
 8014cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014cc8:	4b04      	ldr	r3, [pc, #16]	; (8014cdc <std+0x44>)
 8014cca:	6323      	str	r3, [r4, #48]	; 0x30
 8014ccc:	bd10      	pop	{r4, pc}
 8014cce:	bf00      	nop
 8014cd0:	08016455 	.word	0x08016455
 8014cd4:	08016477 	.word	0x08016477
 8014cd8:	080164af 	.word	0x080164af
 8014cdc:	080164d3 	.word	0x080164d3

08014ce0 <_cleanup_r>:
 8014ce0:	4901      	ldr	r1, [pc, #4]	; (8014ce8 <_cleanup_r+0x8>)
 8014ce2:	f000 b885 	b.w	8014df0 <_fwalk_reent>
 8014ce6:	bf00      	nop
 8014ce8:	08014c45 	.word	0x08014c45

08014cec <__sfmoreglue>:
 8014cec:	b570      	push	{r4, r5, r6, lr}
 8014cee:	2568      	movs	r5, #104	; 0x68
 8014cf0:	1e4a      	subs	r2, r1, #1
 8014cf2:	4355      	muls	r5, r2
 8014cf4:	460e      	mov	r6, r1
 8014cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014cfa:	f001 f8b1 	bl	8015e60 <_malloc_r>
 8014cfe:	4604      	mov	r4, r0
 8014d00:	b140      	cbz	r0, 8014d14 <__sfmoreglue+0x28>
 8014d02:	2100      	movs	r1, #0
 8014d04:	e9c0 1600 	strd	r1, r6, [r0]
 8014d08:	300c      	adds	r0, #12
 8014d0a:	60a0      	str	r0, [r4, #8]
 8014d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014d10:	f7fd fa77 	bl	8012202 <memset>
 8014d14:	4620      	mov	r0, r4
 8014d16:	bd70      	pop	{r4, r5, r6, pc}

08014d18 <__sinit>:
 8014d18:	6983      	ldr	r3, [r0, #24]
 8014d1a:	b510      	push	{r4, lr}
 8014d1c:	4604      	mov	r4, r0
 8014d1e:	bb33      	cbnz	r3, 8014d6e <__sinit+0x56>
 8014d20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014d24:	6503      	str	r3, [r0, #80]	; 0x50
 8014d26:	4b12      	ldr	r3, [pc, #72]	; (8014d70 <__sinit+0x58>)
 8014d28:	4a12      	ldr	r2, [pc, #72]	; (8014d74 <__sinit+0x5c>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	6282      	str	r2, [r0, #40]	; 0x28
 8014d2e:	4298      	cmp	r0, r3
 8014d30:	bf04      	itt	eq
 8014d32:	2301      	moveq	r3, #1
 8014d34:	6183      	streq	r3, [r0, #24]
 8014d36:	f000 f81f 	bl	8014d78 <__sfp>
 8014d3a:	6060      	str	r0, [r4, #4]
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	f000 f81b 	bl	8014d78 <__sfp>
 8014d42:	60a0      	str	r0, [r4, #8]
 8014d44:	4620      	mov	r0, r4
 8014d46:	f000 f817 	bl	8014d78 <__sfp>
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	60e0      	str	r0, [r4, #12]
 8014d4e:	2104      	movs	r1, #4
 8014d50:	6860      	ldr	r0, [r4, #4]
 8014d52:	f7ff ffa1 	bl	8014c98 <std>
 8014d56:	2201      	movs	r2, #1
 8014d58:	2109      	movs	r1, #9
 8014d5a:	68a0      	ldr	r0, [r4, #8]
 8014d5c:	f7ff ff9c 	bl	8014c98 <std>
 8014d60:	2202      	movs	r2, #2
 8014d62:	2112      	movs	r1, #18
 8014d64:	68e0      	ldr	r0, [r4, #12]
 8014d66:	f7ff ff97 	bl	8014c98 <std>
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	61a3      	str	r3, [r4, #24]
 8014d6e:	bd10      	pop	{r4, pc}
 8014d70:	0801a4c4 	.word	0x0801a4c4
 8014d74:	08014ce1 	.word	0x08014ce1

08014d78 <__sfp>:
 8014d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d7a:	4b1b      	ldr	r3, [pc, #108]	; (8014de8 <__sfp+0x70>)
 8014d7c:	4607      	mov	r7, r0
 8014d7e:	681e      	ldr	r6, [r3, #0]
 8014d80:	69b3      	ldr	r3, [r6, #24]
 8014d82:	b913      	cbnz	r3, 8014d8a <__sfp+0x12>
 8014d84:	4630      	mov	r0, r6
 8014d86:	f7ff ffc7 	bl	8014d18 <__sinit>
 8014d8a:	3648      	adds	r6, #72	; 0x48
 8014d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014d90:	3b01      	subs	r3, #1
 8014d92:	d503      	bpl.n	8014d9c <__sfp+0x24>
 8014d94:	6833      	ldr	r3, [r6, #0]
 8014d96:	b133      	cbz	r3, 8014da6 <__sfp+0x2e>
 8014d98:	6836      	ldr	r6, [r6, #0]
 8014d9a:	e7f7      	b.n	8014d8c <__sfp+0x14>
 8014d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014da0:	b16d      	cbz	r5, 8014dbe <__sfp+0x46>
 8014da2:	3468      	adds	r4, #104	; 0x68
 8014da4:	e7f4      	b.n	8014d90 <__sfp+0x18>
 8014da6:	2104      	movs	r1, #4
 8014da8:	4638      	mov	r0, r7
 8014daa:	f7ff ff9f 	bl	8014cec <__sfmoreglue>
 8014dae:	6030      	str	r0, [r6, #0]
 8014db0:	2800      	cmp	r0, #0
 8014db2:	d1f1      	bne.n	8014d98 <__sfp+0x20>
 8014db4:	230c      	movs	r3, #12
 8014db6:	4604      	mov	r4, r0
 8014db8:	603b      	str	r3, [r7, #0]
 8014dba:	4620      	mov	r0, r4
 8014dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dbe:	4b0b      	ldr	r3, [pc, #44]	; (8014dec <__sfp+0x74>)
 8014dc0:	6665      	str	r5, [r4, #100]	; 0x64
 8014dc2:	e9c4 5500 	strd	r5, r5, [r4]
 8014dc6:	60a5      	str	r5, [r4, #8]
 8014dc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014dcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014dd0:	2208      	movs	r2, #8
 8014dd2:	4629      	mov	r1, r5
 8014dd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014dd8:	f7fd fa13 	bl	8012202 <memset>
 8014ddc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014de0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014de4:	e7e9      	b.n	8014dba <__sfp+0x42>
 8014de6:	bf00      	nop
 8014de8:	0801a4c4 	.word	0x0801a4c4
 8014dec:	ffff0001 	.word	0xffff0001

08014df0 <_fwalk_reent>:
 8014df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014df4:	4680      	mov	r8, r0
 8014df6:	4689      	mov	r9, r1
 8014df8:	2600      	movs	r6, #0
 8014dfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014dfe:	b914      	cbnz	r4, 8014e06 <_fwalk_reent+0x16>
 8014e00:	4630      	mov	r0, r6
 8014e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014e0a:	3f01      	subs	r7, #1
 8014e0c:	d501      	bpl.n	8014e12 <_fwalk_reent+0x22>
 8014e0e:	6824      	ldr	r4, [r4, #0]
 8014e10:	e7f5      	b.n	8014dfe <_fwalk_reent+0xe>
 8014e12:	89ab      	ldrh	r3, [r5, #12]
 8014e14:	2b01      	cmp	r3, #1
 8014e16:	d907      	bls.n	8014e28 <_fwalk_reent+0x38>
 8014e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	d003      	beq.n	8014e28 <_fwalk_reent+0x38>
 8014e20:	4629      	mov	r1, r5
 8014e22:	4640      	mov	r0, r8
 8014e24:	47c8      	blx	r9
 8014e26:	4306      	orrs	r6, r0
 8014e28:	3568      	adds	r5, #104	; 0x68
 8014e2a:	e7ee      	b.n	8014e0a <_fwalk_reent+0x1a>

08014e2c <rshift>:
 8014e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e2e:	6906      	ldr	r6, [r0, #16]
 8014e30:	114b      	asrs	r3, r1, #5
 8014e32:	429e      	cmp	r6, r3
 8014e34:	f100 0414 	add.w	r4, r0, #20
 8014e38:	dd31      	ble.n	8014e9e <rshift+0x72>
 8014e3a:	f011 011f 	ands.w	r1, r1, #31
 8014e3e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014e42:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014e46:	d108      	bne.n	8014e5a <rshift+0x2e>
 8014e48:	4621      	mov	r1, r4
 8014e4a:	42b2      	cmp	r2, r6
 8014e4c:	460b      	mov	r3, r1
 8014e4e:	d211      	bcs.n	8014e74 <rshift+0x48>
 8014e50:	f852 3b04 	ldr.w	r3, [r2], #4
 8014e54:	f841 3b04 	str.w	r3, [r1], #4
 8014e58:	e7f7      	b.n	8014e4a <rshift+0x1e>
 8014e5a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014e5e:	4623      	mov	r3, r4
 8014e60:	f1c1 0c20 	rsb	ip, r1, #32
 8014e64:	40cd      	lsrs	r5, r1
 8014e66:	3204      	adds	r2, #4
 8014e68:	42b2      	cmp	r2, r6
 8014e6a:	4617      	mov	r7, r2
 8014e6c:	d30d      	bcc.n	8014e8a <rshift+0x5e>
 8014e6e:	601d      	str	r5, [r3, #0]
 8014e70:	b105      	cbz	r5, 8014e74 <rshift+0x48>
 8014e72:	3304      	adds	r3, #4
 8014e74:	42a3      	cmp	r3, r4
 8014e76:	eba3 0204 	sub.w	r2, r3, r4
 8014e7a:	bf08      	it	eq
 8014e7c:	2300      	moveq	r3, #0
 8014e7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014e82:	6102      	str	r2, [r0, #16]
 8014e84:	bf08      	it	eq
 8014e86:	6143      	streq	r3, [r0, #20]
 8014e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e8a:	683f      	ldr	r7, [r7, #0]
 8014e8c:	fa07 f70c 	lsl.w	r7, r7, ip
 8014e90:	433d      	orrs	r5, r7
 8014e92:	f843 5b04 	str.w	r5, [r3], #4
 8014e96:	f852 5b04 	ldr.w	r5, [r2], #4
 8014e9a:	40cd      	lsrs	r5, r1
 8014e9c:	e7e4      	b.n	8014e68 <rshift+0x3c>
 8014e9e:	4623      	mov	r3, r4
 8014ea0:	e7e8      	b.n	8014e74 <rshift+0x48>

08014ea2 <__hexdig_fun>:
 8014ea2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014ea6:	2b09      	cmp	r3, #9
 8014ea8:	d802      	bhi.n	8014eb0 <__hexdig_fun+0xe>
 8014eaa:	3820      	subs	r0, #32
 8014eac:	b2c0      	uxtb	r0, r0
 8014eae:	4770      	bx	lr
 8014eb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014eb4:	2b05      	cmp	r3, #5
 8014eb6:	d801      	bhi.n	8014ebc <__hexdig_fun+0x1a>
 8014eb8:	3847      	subs	r0, #71	; 0x47
 8014eba:	e7f7      	b.n	8014eac <__hexdig_fun+0xa>
 8014ebc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014ec0:	2b05      	cmp	r3, #5
 8014ec2:	d801      	bhi.n	8014ec8 <__hexdig_fun+0x26>
 8014ec4:	3827      	subs	r0, #39	; 0x27
 8014ec6:	e7f1      	b.n	8014eac <__hexdig_fun+0xa>
 8014ec8:	2000      	movs	r0, #0
 8014eca:	4770      	bx	lr

08014ecc <__gethex>:
 8014ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed0:	b08b      	sub	sp, #44	; 0x2c
 8014ed2:	9002      	str	r0, [sp, #8]
 8014ed4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014ed6:	468a      	mov	sl, r1
 8014ed8:	4690      	mov	r8, r2
 8014eda:	9306      	str	r3, [sp, #24]
 8014edc:	f000 fad1 	bl	8015482 <__localeconv_l>
 8014ee0:	6803      	ldr	r3, [r0, #0]
 8014ee2:	f04f 0b00 	mov.w	fp, #0
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	9303      	str	r3, [sp, #12]
 8014eea:	f7eb f949 	bl	8000180 <strlen>
 8014eee:	9b03      	ldr	r3, [sp, #12]
 8014ef0:	9001      	str	r0, [sp, #4]
 8014ef2:	4403      	add	r3, r0
 8014ef4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014ef8:	9307      	str	r3, [sp, #28]
 8014efa:	f8da 3000 	ldr.w	r3, [sl]
 8014efe:	3302      	adds	r3, #2
 8014f00:	461f      	mov	r7, r3
 8014f02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f06:	2830      	cmp	r0, #48	; 0x30
 8014f08:	d06c      	beq.n	8014fe4 <__gethex+0x118>
 8014f0a:	f7ff ffca 	bl	8014ea2 <__hexdig_fun>
 8014f0e:	4604      	mov	r4, r0
 8014f10:	2800      	cmp	r0, #0
 8014f12:	d16a      	bne.n	8014fea <__gethex+0x11e>
 8014f14:	9a01      	ldr	r2, [sp, #4]
 8014f16:	9903      	ldr	r1, [sp, #12]
 8014f18:	4638      	mov	r0, r7
 8014f1a:	f001 fade 	bl	80164da <strncmp>
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	d166      	bne.n	8014ff0 <__gethex+0x124>
 8014f22:	9b01      	ldr	r3, [sp, #4]
 8014f24:	5cf8      	ldrb	r0, [r7, r3]
 8014f26:	18fe      	adds	r6, r7, r3
 8014f28:	f7ff ffbb 	bl	8014ea2 <__hexdig_fun>
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	d062      	beq.n	8014ff6 <__gethex+0x12a>
 8014f30:	4633      	mov	r3, r6
 8014f32:	7818      	ldrb	r0, [r3, #0]
 8014f34:	461f      	mov	r7, r3
 8014f36:	2830      	cmp	r0, #48	; 0x30
 8014f38:	f103 0301 	add.w	r3, r3, #1
 8014f3c:	d0f9      	beq.n	8014f32 <__gethex+0x66>
 8014f3e:	f7ff ffb0 	bl	8014ea2 <__hexdig_fun>
 8014f42:	fab0 f580 	clz	r5, r0
 8014f46:	4634      	mov	r4, r6
 8014f48:	f04f 0b01 	mov.w	fp, #1
 8014f4c:	096d      	lsrs	r5, r5, #5
 8014f4e:	463a      	mov	r2, r7
 8014f50:	4616      	mov	r6, r2
 8014f52:	7830      	ldrb	r0, [r6, #0]
 8014f54:	3201      	adds	r2, #1
 8014f56:	f7ff ffa4 	bl	8014ea2 <__hexdig_fun>
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	d1f8      	bne.n	8014f50 <__gethex+0x84>
 8014f5e:	9a01      	ldr	r2, [sp, #4]
 8014f60:	9903      	ldr	r1, [sp, #12]
 8014f62:	4630      	mov	r0, r6
 8014f64:	f001 fab9 	bl	80164da <strncmp>
 8014f68:	b950      	cbnz	r0, 8014f80 <__gethex+0xb4>
 8014f6a:	b954      	cbnz	r4, 8014f82 <__gethex+0xb6>
 8014f6c:	9b01      	ldr	r3, [sp, #4]
 8014f6e:	18f4      	adds	r4, r6, r3
 8014f70:	4622      	mov	r2, r4
 8014f72:	4616      	mov	r6, r2
 8014f74:	7830      	ldrb	r0, [r6, #0]
 8014f76:	3201      	adds	r2, #1
 8014f78:	f7ff ff93 	bl	8014ea2 <__hexdig_fun>
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d1f8      	bne.n	8014f72 <__gethex+0xa6>
 8014f80:	b10c      	cbz	r4, 8014f86 <__gethex+0xba>
 8014f82:	1ba4      	subs	r4, r4, r6
 8014f84:	00a4      	lsls	r4, r4, #2
 8014f86:	7833      	ldrb	r3, [r6, #0]
 8014f88:	2b50      	cmp	r3, #80	; 0x50
 8014f8a:	d001      	beq.n	8014f90 <__gethex+0xc4>
 8014f8c:	2b70      	cmp	r3, #112	; 0x70
 8014f8e:	d140      	bne.n	8015012 <__gethex+0x146>
 8014f90:	7873      	ldrb	r3, [r6, #1]
 8014f92:	2b2b      	cmp	r3, #43	; 0x2b
 8014f94:	d031      	beq.n	8014ffa <__gethex+0x12e>
 8014f96:	2b2d      	cmp	r3, #45	; 0x2d
 8014f98:	d033      	beq.n	8015002 <__gethex+0x136>
 8014f9a:	f04f 0900 	mov.w	r9, #0
 8014f9e:	1c71      	adds	r1, r6, #1
 8014fa0:	7808      	ldrb	r0, [r1, #0]
 8014fa2:	f7ff ff7e 	bl	8014ea2 <__hexdig_fun>
 8014fa6:	1e43      	subs	r3, r0, #1
 8014fa8:	b2db      	uxtb	r3, r3
 8014faa:	2b18      	cmp	r3, #24
 8014fac:	d831      	bhi.n	8015012 <__gethex+0x146>
 8014fae:	f1a0 0210 	sub.w	r2, r0, #16
 8014fb2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014fb6:	f7ff ff74 	bl	8014ea2 <__hexdig_fun>
 8014fba:	1e43      	subs	r3, r0, #1
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	2b18      	cmp	r3, #24
 8014fc0:	d922      	bls.n	8015008 <__gethex+0x13c>
 8014fc2:	f1b9 0f00 	cmp.w	r9, #0
 8014fc6:	d000      	beq.n	8014fca <__gethex+0xfe>
 8014fc8:	4252      	negs	r2, r2
 8014fca:	4414      	add	r4, r2
 8014fcc:	f8ca 1000 	str.w	r1, [sl]
 8014fd0:	b30d      	cbz	r5, 8015016 <__gethex+0x14a>
 8014fd2:	f1bb 0f00 	cmp.w	fp, #0
 8014fd6:	bf0c      	ite	eq
 8014fd8:	2706      	moveq	r7, #6
 8014fda:	2700      	movne	r7, #0
 8014fdc:	4638      	mov	r0, r7
 8014fde:	b00b      	add	sp, #44	; 0x2c
 8014fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fe4:	f10b 0b01 	add.w	fp, fp, #1
 8014fe8:	e78a      	b.n	8014f00 <__gethex+0x34>
 8014fea:	2500      	movs	r5, #0
 8014fec:	462c      	mov	r4, r5
 8014fee:	e7ae      	b.n	8014f4e <__gethex+0x82>
 8014ff0:	463e      	mov	r6, r7
 8014ff2:	2501      	movs	r5, #1
 8014ff4:	e7c7      	b.n	8014f86 <__gethex+0xba>
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	e7fb      	b.n	8014ff2 <__gethex+0x126>
 8014ffa:	f04f 0900 	mov.w	r9, #0
 8014ffe:	1cb1      	adds	r1, r6, #2
 8015000:	e7ce      	b.n	8014fa0 <__gethex+0xd4>
 8015002:	f04f 0901 	mov.w	r9, #1
 8015006:	e7fa      	b.n	8014ffe <__gethex+0x132>
 8015008:	230a      	movs	r3, #10
 801500a:	fb03 0202 	mla	r2, r3, r2, r0
 801500e:	3a10      	subs	r2, #16
 8015010:	e7cf      	b.n	8014fb2 <__gethex+0xe6>
 8015012:	4631      	mov	r1, r6
 8015014:	e7da      	b.n	8014fcc <__gethex+0x100>
 8015016:	4629      	mov	r1, r5
 8015018:	1bf3      	subs	r3, r6, r7
 801501a:	3b01      	subs	r3, #1
 801501c:	2b07      	cmp	r3, #7
 801501e:	dc49      	bgt.n	80150b4 <__gethex+0x1e8>
 8015020:	9802      	ldr	r0, [sp, #8]
 8015022:	f000 facb 	bl	80155bc <_Balloc>
 8015026:	f04f 0b00 	mov.w	fp, #0
 801502a:	4605      	mov	r5, r0
 801502c:	46da      	mov	sl, fp
 801502e:	9b01      	ldr	r3, [sp, #4]
 8015030:	f100 0914 	add.w	r9, r0, #20
 8015034:	f1c3 0301 	rsb	r3, r3, #1
 8015038:	f8cd 9010 	str.w	r9, [sp, #16]
 801503c:	9308      	str	r3, [sp, #32]
 801503e:	42b7      	cmp	r7, r6
 8015040:	d33b      	bcc.n	80150ba <__gethex+0x1ee>
 8015042:	9804      	ldr	r0, [sp, #16]
 8015044:	f840 ab04 	str.w	sl, [r0], #4
 8015048:	eba0 0009 	sub.w	r0, r0, r9
 801504c:	1080      	asrs	r0, r0, #2
 801504e:	6128      	str	r0, [r5, #16]
 8015050:	0147      	lsls	r7, r0, #5
 8015052:	4650      	mov	r0, sl
 8015054:	f000 fb76 	bl	8015744 <__hi0bits>
 8015058:	f8d8 6000 	ldr.w	r6, [r8]
 801505c:	1a3f      	subs	r7, r7, r0
 801505e:	42b7      	cmp	r7, r6
 8015060:	dd64      	ble.n	801512c <__gethex+0x260>
 8015062:	1bbf      	subs	r7, r7, r6
 8015064:	4639      	mov	r1, r7
 8015066:	4628      	mov	r0, r5
 8015068:	f000 fe7f 	bl	8015d6a <__any_on>
 801506c:	4682      	mov	sl, r0
 801506e:	b178      	cbz	r0, 8015090 <__gethex+0x1c4>
 8015070:	f04f 0a01 	mov.w	sl, #1
 8015074:	1e7b      	subs	r3, r7, #1
 8015076:	1159      	asrs	r1, r3, #5
 8015078:	f003 021f 	and.w	r2, r3, #31
 801507c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015080:	fa0a f202 	lsl.w	r2, sl, r2
 8015084:	420a      	tst	r2, r1
 8015086:	d003      	beq.n	8015090 <__gethex+0x1c4>
 8015088:	4553      	cmp	r3, sl
 801508a:	dc46      	bgt.n	801511a <__gethex+0x24e>
 801508c:	f04f 0a02 	mov.w	sl, #2
 8015090:	4639      	mov	r1, r7
 8015092:	4628      	mov	r0, r5
 8015094:	f7ff feca 	bl	8014e2c <rshift>
 8015098:	443c      	add	r4, r7
 801509a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801509e:	42a3      	cmp	r3, r4
 80150a0:	da52      	bge.n	8015148 <__gethex+0x27c>
 80150a2:	4629      	mov	r1, r5
 80150a4:	9802      	ldr	r0, [sp, #8]
 80150a6:	f000 fabd 	bl	8015624 <_Bfree>
 80150aa:	2300      	movs	r3, #0
 80150ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150ae:	27a3      	movs	r7, #163	; 0xa3
 80150b0:	6013      	str	r3, [r2, #0]
 80150b2:	e793      	b.n	8014fdc <__gethex+0x110>
 80150b4:	3101      	adds	r1, #1
 80150b6:	105b      	asrs	r3, r3, #1
 80150b8:	e7b0      	b.n	801501c <__gethex+0x150>
 80150ba:	1e73      	subs	r3, r6, #1
 80150bc:	9305      	str	r3, [sp, #20]
 80150be:	9a07      	ldr	r2, [sp, #28]
 80150c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80150c4:	4293      	cmp	r3, r2
 80150c6:	d018      	beq.n	80150fa <__gethex+0x22e>
 80150c8:	f1bb 0f20 	cmp.w	fp, #32
 80150cc:	d107      	bne.n	80150de <__gethex+0x212>
 80150ce:	9b04      	ldr	r3, [sp, #16]
 80150d0:	f8c3 a000 	str.w	sl, [r3]
 80150d4:	f04f 0a00 	mov.w	sl, #0
 80150d8:	46d3      	mov	fp, sl
 80150da:	3304      	adds	r3, #4
 80150dc:	9304      	str	r3, [sp, #16]
 80150de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80150e2:	f7ff fede 	bl	8014ea2 <__hexdig_fun>
 80150e6:	f000 000f 	and.w	r0, r0, #15
 80150ea:	fa00 f00b 	lsl.w	r0, r0, fp
 80150ee:	ea4a 0a00 	orr.w	sl, sl, r0
 80150f2:	f10b 0b04 	add.w	fp, fp, #4
 80150f6:	9b05      	ldr	r3, [sp, #20]
 80150f8:	e00d      	b.n	8015116 <__gethex+0x24a>
 80150fa:	9b05      	ldr	r3, [sp, #20]
 80150fc:	9a08      	ldr	r2, [sp, #32]
 80150fe:	4413      	add	r3, r2
 8015100:	42bb      	cmp	r3, r7
 8015102:	d3e1      	bcc.n	80150c8 <__gethex+0x1fc>
 8015104:	4618      	mov	r0, r3
 8015106:	9a01      	ldr	r2, [sp, #4]
 8015108:	9903      	ldr	r1, [sp, #12]
 801510a:	9309      	str	r3, [sp, #36]	; 0x24
 801510c:	f001 f9e5 	bl	80164da <strncmp>
 8015110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015112:	2800      	cmp	r0, #0
 8015114:	d1d8      	bne.n	80150c8 <__gethex+0x1fc>
 8015116:	461e      	mov	r6, r3
 8015118:	e791      	b.n	801503e <__gethex+0x172>
 801511a:	1eb9      	subs	r1, r7, #2
 801511c:	4628      	mov	r0, r5
 801511e:	f000 fe24 	bl	8015d6a <__any_on>
 8015122:	2800      	cmp	r0, #0
 8015124:	d0b2      	beq.n	801508c <__gethex+0x1c0>
 8015126:	f04f 0a03 	mov.w	sl, #3
 801512a:	e7b1      	b.n	8015090 <__gethex+0x1c4>
 801512c:	da09      	bge.n	8015142 <__gethex+0x276>
 801512e:	1bf7      	subs	r7, r6, r7
 8015130:	4629      	mov	r1, r5
 8015132:	463a      	mov	r2, r7
 8015134:	9802      	ldr	r0, [sp, #8]
 8015136:	f000 fc3f 	bl	80159b8 <__lshift>
 801513a:	4605      	mov	r5, r0
 801513c:	1be4      	subs	r4, r4, r7
 801513e:	f100 0914 	add.w	r9, r0, #20
 8015142:	f04f 0a00 	mov.w	sl, #0
 8015146:	e7a8      	b.n	801509a <__gethex+0x1ce>
 8015148:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801514c:	42a0      	cmp	r0, r4
 801514e:	dd6b      	ble.n	8015228 <__gethex+0x35c>
 8015150:	1b04      	subs	r4, r0, r4
 8015152:	42a6      	cmp	r6, r4
 8015154:	dc2e      	bgt.n	80151b4 <__gethex+0x2e8>
 8015156:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801515a:	2b02      	cmp	r3, #2
 801515c:	d022      	beq.n	80151a4 <__gethex+0x2d8>
 801515e:	2b03      	cmp	r3, #3
 8015160:	d024      	beq.n	80151ac <__gethex+0x2e0>
 8015162:	2b01      	cmp	r3, #1
 8015164:	d115      	bne.n	8015192 <__gethex+0x2c6>
 8015166:	42a6      	cmp	r6, r4
 8015168:	d113      	bne.n	8015192 <__gethex+0x2c6>
 801516a:	2e01      	cmp	r6, #1
 801516c:	dc0b      	bgt.n	8015186 <__gethex+0x2ba>
 801516e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015172:	9a06      	ldr	r2, [sp, #24]
 8015174:	2762      	movs	r7, #98	; 0x62
 8015176:	6013      	str	r3, [r2, #0]
 8015178:	2301      	movs	r3, #1
 801517a:	612b      	str	r3, [r5, #16]
 801517c:	f8c9 3000 	str.w	r3, [r9]
 8015180:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015182:	601d      	str	r5, [r3, #0]
 8015184:	e72a      	b.n	8014fdc <__gethex+0x110>
 8015186:	1e71      	subs	r1, r6, #1
 8015188:	4628      	mov	r0, r5
 801518a:	f000 fdee 	bl	8015d6a <__any_on>
 801518e:	2800      	cmp	r0, #0
 8015190:	d1ed      	bne.n	801516e <__gethex+0x2a2>
 8015192:	4629      	mov	r1, r5
 8015194:	9802      	ldr	r0, [sp, #8]
 8015196:	f000 fa45 	bl	8015624 <_Bfree>
 801519a:	2300      	movs	r3, #0
 801519c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801519e:	2750      	movs	r7, #80	; 0x50
 80151a0:	6013      	str	r3, [r2, #0]
 80151a2:	e71b      	b.n	8014fdc <__gethex+0x110>
 80151a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d0e1      	beq.n	801516e <__gethex+0x2a2>
 80151aa:	e7f2      	b.n	8015192 <__gethex+0x2c6>
 80151ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1dd      	bne.n	801516e <__gethex+0x2a2>
 80151b2:	e7ee      	b.n	8015192 <__gethex+0x2c6>
 80151b4:	1e67      	subs	r7, r4, #1
 80151b6:	f1ba 0f00 	cmp.w	sl, #0
 80151ba:	d132      	bne.n	8015222 <__gethex+0x356>
 80151bc:	b127      	cbz	r7, 80151c8 <__gethex+0x2fc>
 80151be:	4639      	mov	r1, r7
 80151c0:	4628      	mov	r0, r5
 80151c2:	f000 fdd2 	bl	8015d6a <__any_on>
 80151c6:	4682      	mov	sl, r0
 80151c8:	2301      	movs	r3, #1
 80151ca:	117a      	asrs	r2, r7, #5
 80151cc:	f007 071f 	and.w	r7, r7, #31
 80151d0:	fa03 f707 	lsl.w	r7, r3, r7
 80151d4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80151d8:	4621      	mov	r1, r4
 80151da:	421f      	tst	r7, r3
 80151dc:	f04f 0702 	mov.w	r7, #2
 80151e0:	4628      	mov	r0, r5
 80151e2:	bf18      	it	ne
 80151e4:	f04a 0a02 	orrne.w	sl, sl, #2
 80151e8:	1b36      	subs	r6, r6, r4
 80151ea:	f7ff fe1f 	bl	8014e2c <rshift>
 80151ee:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80151f2:	f1ba 0f00 	cmp.w	sl, #0
 80151f6:	d048      	beq.n	801528a <__gethex+0x3be>
 80151f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80151fc:	2b02      	cmp	r3, #2
 80151fe:	d015      	beq.n	801522c <__gethex+0x360>
 8015200:	2b03      	cmp	r3, #3
 8015202:	d017      	beq.n	8015234 <__gethex+0x368>
 8015204:	2b01      	cmp	r3, #1
 8015206:	d109      	bne.n	801521c <__gethex+0x350>
 8015208:	f01a 0f02 	tst.w	sl, #2
 801520c:	d006      	beq.n	801521c <__gethex+0x350>
 801520e:	f8d9 3000 	ldr.w	r3, [r9]
 8015212:	ea4a 0a03 	orr.w	sl, sl, r3
 8015216:	f01a 0f01 	tst.w	sl, #1
 801521a:	d10e      	bne.n	801523a <__gethex+0x36e>
 801521c:	f047 0710 	orr.w	r7, r7, #16
 8015220:	e033      	b.n	801528a <__gethex+0x3be>
 8015222:	f04f 0a01 	mov.w	sl, #1
 8015226:	e7cf      	b.n	80151c8 <__gethex+0x2fc>
 8015228:	2701      	movs	r7, #1
 801522a:	e7e2      	b.n	80151f2 <__gethex+0x326>
 801522c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801522e:	f1c3 0301 	rsb	r3, r3, #1
 8015232:	9315      	str	r3, [sp, #84]	; 0x54
 8015234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015236:	2b00      	cmp	r3, #0
 8015238:	d0f0      	beq.n	801521c <__gethex+0x350>
 801523a:	f04f 0c00 	mov.w	ip, #0
 801523e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015242:	f105 0314 	add.w	r3, r5, #20
 8015246:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801524a:	eb03 010a 	add.w	r1, r3, sl
 801524e:	4618      	mov	r0, r3
 8015250:	f853 2b04 	ldr.w	r2, [r3], #4
 8015254:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015258:	d01c      	beq.n	8015294 <__gethex+0x3c8>
 801525a:	3201      	adds	r2, #1
 801525c:	6002      	str	r2, [r0, #0]
 801525e:	2f02      	cmp	r7, #2
 8015260:	f105 0314 	add.w	r3, r5, #20
 8015264:	d138      	bne.n	80152d8 <__gethex+0x40c>
 8015266:	f8d8 2000 	ldr.w	r2, [r8]
 801526a:	3a01      	subs	r2, #1
 801526c:	42b2      	cmp	r2, r6
 801526e:	d10a      	bne.n	8015286 <__gethex+0x3ba>
 8015270:	2201      	movs	r2, #1
 8015272:	1171      	asrs	r1, r6, #5
 8015274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015278:	f006 061f 	and.w	r6, r6, #31
 801527c:	fa02 f606 	lsl.w	r6, r2, r6
 8015280:	421e      	tst	r6, r3
 8015282:	bf18      	it	ne
 8015284:	4617      	movne	r7, r2
 8015286:	f047 0720 	orr.w	r7, r7, #32
 801528a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801528c:	601d      	str	r5, [r3, #0]
 801528e:	9b06      	ldr	r3, [sp, #24]
 8015290:	601c      	str	r4, [r3, #0]
 8015292:	e6a3      	b.n	8014fdc <__gethex+0x110>
 8015294:	4299      	cmp	r1, r3
 8015296:	f843 cc04 	str.w	ip, [r3, #-4]
 801529a:	d8d8      	bhi.n	801524e <__gethex+0x382>
 801529c:	68ab      	ldr	r3, [r5, #8]
 801529e:	4599      	cmp	r9, r3
 80152a0:	db12      	blt.n	80152c8 <__gethex+0x3fc>
 80152a2:	6869      	ldr	r1, [r5, #4]
 80152a4:	9802      	ldr	r0, [sp, #8]
 80152a6:	3101      	adds	r1, #1
 80152a8:	f000 f988 	bl	80155bc <_Balloc>
 80152ac:	4683      	mov	fp, r0
 80152ae:	692a      	ldr	r2, [r5, #16]
 80152b0:	f105 010c 	add.w	r1, r5, #12
 80152b4:	3202      	adds	r2, #2
 80152b6:	0092      	lsls	r2, r2, #2
 80152b8:	300c      	adds	r0, #12
 80152ba:	f7fc ff97 	bl	80121ec <memcpy>
 80152be:	4629      	mov	r1, r5
 80152c0:	9802      	ldr	r0, [sp, #8]
 80152c2:	f000 f9af 	bl	8015624 <_Bfree>
 80152c6:	465d      	mov	r5, fp
 80152c8:	692b      	ldr	r3, [r5, #16]
 80152ca:	1c5a      	adds	r2, r3, #1
 80152cc:	612a      	str	r2, [r5, #16]
 80152ce:	2201      	movs	r2, #1
 80152d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80152d4:	615a      	str	r2, [r3, #20]
 80152d6:	e7c2      	b.n	801525e <__gethex+0x392>
 80152d8:	692a      	ldr	r2, [r5, #16]
 80152da:	454a      	cmp	r2, r9
 80152dc:	dd0b      	ble.n	80152f6 <__gethex+0x42a>
 80152de:	2101      	movs	r1, #1
 80152e0:	4628      	mov	r0, r5
 80152e2:	f7ff fda3 	bl	8014e2c <rshift>
 80152e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80152ea:	3401      	adds	r4, #1
 80152ec:	42a3      	cmp	r3, r4
 80152ee:	f6ff aed8 	blt.w	80150a2 <__gethex+0x1d6>
 80152f2:	2701      	movs	r7, #1
 80152f4:	e7c7      	b.n	8015286 <__gethex+0x3ba>
 80152f6:	f016 061f 	ands.w	r6, r6, #31
 80152fa:	d0fa      	beq.n	80152f2 <__gethex+0x426>
 80152fc:	449a      	add	sl, r3
 80152fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015302:	f000 fa1f 	bl	8015744 <__hi0bits>
 8015306:	f1c6 0620 	rsb	r6, r6, #32
 801530a:	42b0      	cmp	r0, r6
 801530c:	dbe7      	blt.n	80152de <__gethex+0x412>
 801530e:	e7f0      	b.n	80152f2 <__gethex+0x426>

08015310 <L_shift>:
 8015310:	f1c2 0208 	rsb	r2, r2, #8
 8015314:	0092      	lsls	r2, r2, #2
 8015316:	b570      	push	{r4, r5, r6, lr}
 8015318:	f1c2 0620 	rsb	r6, r2, #32
 801531c:	6843      	ldr	r3, [r0, #4]
 801531e:	6804      	ldr	r4, [r0, #0]
 8015320:	fa03 f506 	lsl.w	r5, r3, r6
 8015324:	432c      	orrs	r4, r5
 8015326:	40d3      	lsrs	r3, r2
 8015328:	6004      	str	r4, [r0, #0]
 801532a:	f840 3f04 	str.w	r3, [r0, #4]!
 801532e:	4288      	cmp	r0, r1
 8015330:	d3f4      	bcc.n	801531c <L_shift+0xc>
 8015332:	bd70      	pop	{r4, r5, r6, pc}

08015334 <__match>:
 8015334:	b530      	push	{r4, r5, lr}
 8015336:	6803      	ldr	r3, [r0, #0]
 8015338:	3301      	adds	r3, #1
 801533a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801533e:	b914      	cbnz	r4, 8015346 <__match+0x12>
 8015340:	6003      	str	r3, [r0, #0]
 8015342:	2001      	movs	r0, #1
 8015344:	bd30      	pop	{r4, r5, pc}
 8015346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801534a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801534e:	2d19      	cmp	r5, #25
 8015350:	bf98      	it	ls
 8015352:	3220      	addls	r2, #32
 8015354:	42a2      	cmp	r2, r4
 8015356:	d0f0      	beq.n	801533a <__match+0x6>
 8015358:	2000      	movs	r0, #0
 801535a:	e7f3      	b.n	8015344 <__match+0x10>

0801535c <__hexnan>:
 801535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015360:	2500      	movs	r5, #0
 8015362:	680b      	ldr	r3, [r1, #0]
 8015364:	4682      	mov	sl, r0
 8015366:	115f      	asrs	r7, r3, #5
 8015368:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801536c:	f013 031f 	ands.w	r3, r3, #31
 8015370:	bf18      	it	ne
 8015372:	3704      	addne	r7, #4
 8015374:	1f3e      	subs	r6, r7, #4
 8015376:	4690      	mov	r8, r2
 8015378:	46b1      	mov	r9, r6
 801537a:	4634      	mov	r4, r6
 801537c:	46ab      	mov	fp, r5
 801537e:	b087      	sub	sp, #28
 8015380:	6801      	ldr	r1, [r0, #0]
 8015382:	9301      	str	r3, [sp, #4]
 8015384:	f847 5c04 	str.w	r5, [r7, #-4]
 8015388:	9502      	str	r5, [sp, #8]
 801538a:	784a      	ldrb	r2, [r1, #1]
 801538c:	1c4b      	adds	r3, r1, #1
 801538e:	9303      	str	r3, [sp, #12]
 8015390:	b342      	cbz	r2, 80153e4 <__hexnan+0x88>
 8015392:	4610      	mov	r0, r2
 8015394:	9105      	str	r1, [sp, #20]
 8015396:	9204      	str	r2, [sp, #16]
 8015398:	f7ff fd83 	bl	8014ea2 <__hexdig_fun>
 801539c:	2800      	cmp	r0, #0
 801539e:	d143      	bne.n	8015428 <__hexnan+0xcc>
 80153a0:	9a04      	ldr	r2, [sp, #16]
 80153a2:	9905      	ldr	r1, [sp, #20]
 80153a4:	2a20      	cmp	r2, #32
 80153a6:	d818      	bhi.n	80153da <__hexnan+0x7e>
 80153a8:	9b02      	ldr	r3, [sp, #8]
 80153aa:	459b      	cmp	fp, r3
 80153ac:	dd13      	ble.n	80153d6 <__hexnan+0x7a>
 80153ae:	454c      	cmp	r4, r9
 80153b0:	d206      	bcs.n	80153c0 <__hexnan+0x64>
 80153b2:	2d07      	cmp	r5, #7
 80153b4:	dc04      	bgt.n	80153c0 <__hexnan+0x64>
 80153b6:	462a      	mov	r2, r5
 80153b8:	4649      	mov	r1, r9
 80153ba:	4620      	mov	r0, r4
 80153bc:	f7ff ffa8 	bl	8015310 <L_shift>
 80153c0:	4544      	cmp	r4, r8
 80153c2:	d944      	bls.n	801544e <__hexnan+0xf2>
 80153c4:	2300      	movs	r3, #0
 80153c6:	f1a4 0904 	sub.w	r9, r4, #4
 80153ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80153ce:	461d      	mov	r5, r3
 80153d0:	464c      	mov	r4, r9
 80153d2:	f8cd b008 	str.w	fp, [sp, #8]
 80153d6:	9903      	ldr	r1, [sp, #12]
 80153d8:	e7d7      	b.n	801538a <__hexnan+0x2e>
 80153da:	2a29      	cmp	r2, #41	; 0x29
 80153dc:	d14a      	bne.n	8015474 <__hexnan+0x118>
 80153de:	3102      	adds	r1, #2
 80153e0:	f8ca 1000 	str.w	r1, [sl]
 80153e4:	f1bb 0f00 	cmp.w	fp, #0
 80153e8:	d044      	beq.n	8015474 <__hexnan+0x118>
 80153ea:	454c      	cmp	r4, r9
 80153ec:	d206      	bcs.n	80153fc <__hexnan+0xa0>
 80153ee:	2d07      	cmp	r5, #7
 80153f0:	dc04      	bgt.n	80153fc <__hexnan+0xa0>
 80153f2:	462a      	mov	r2, r5
 80153f4:	4649      	mov	r1, r9
 80153f6:	4620      	mov	r0, r4
 80153f8:	f7ff ff8a 	bl	8015310 <L_shift>
 80153fc:	4544      	cmp	r4, r8
 80153fe:	d928      	bls.n	8015452 <__hexnan+0xf6>
 8015400:	4643      	mov	r3, r8
 8015402:	f854 2b04 	ldr.w	r2, [r4], #4
 8015406:	42a6      	cmp	r6, r4
 8015408:	f843 2b04 	str.w	r2, [r3], #4
 801540c:	d2f9      	bcs.n	8015402 <__hexnan+0xa6>
 801540e:	2200      	movs	r2, #0
 8015410:	f843 2b04 	str.w	r2, [r3], #4
 8015414:	429e      	cmp	r6, r3
 8015416:	d2fb      	bcs.n	8015410 <__hexnan+0xb4>
 8015418:	6833      	ldr	r3, [r6, #0]
 801541a:	b91b      	cbnz	r3, 8015424 <__hexnan+0xc8>
 801541c:	4546      	cmp	r6, r8
 801541e:	d127      	bne.n	8015470 <__hexnan+0x114>
 8015420:	2301      	movs	r3, #1
 8015422:	6033      	str	r3, [r6, #0]
 8015424:	2005      	movs	r0, #5
 8015426:	e026      	b.n	8015476 <__hexnan+0x11a>
 8015428:	3501      	adds	r5, #1
 801542a:	2d08      	cmp	r5, #8
 801542c:	f10b 0b01 	add.w	fp, fp, #1
 8015430:	dd06      	ble.n	8015440 <__hexnan+0xe4>
 8015432:	4544      	cmp	r4, r8
 8015434:	d9cf      	bls.n	80153d6 <__hexnan+0x7a>
 8015436:	2300      	movs	r3, #0
 8015438:	2501      	movs	r5, #1
 801543a:	f844 3c04 	str.w	r3, [r4, #-4]
 801543e:	3c04      	subs	r4, #4
 8015440:	6822      	ldr	r2, [r4, #0]
 8015442:	f000 000f 	and.w	r0, r0, #15
 8015446:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801544a:	6020      	str	r0, [r4, #0]
 801544c:	e7c3      	b.n	80153d6 <__hexnan+0x7a>
 801544e:	2508      	movs	r5, #8
 8015450:	e7c1      	b.n	80153d6 <__hexnan+0x7a>
 8015452:	9b01      	ldr	r3, [sp, #4]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d0df      	beq.n	8015418 <__hexnan+0xbc>
 8015458:	f04f 32ff 	mov.w	r2, #4294967295
 801545c:	f1c3 0320 	rsb	r3, r3, #32
 8015460:	fa22 f303 	lsr.w	r3, r2, r3
 8015464:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015468:	401a      	ands	r2, r3
 801546a:	f847 2c04 	str.w	r2, [r7, #-4]
 801546e:	e7d3      	b.n	8015418 <__hexnan+0xbc>
 8015470:	3e04      	subs	r6, #4
 8015472:	e7d1      	b.n	8015418 <__hexnan+0xbc>
 8015474:	2004      	movs	r0, #4
 8015476:	b007      	add	sp, #28
 8015478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801547c <__locale_ctype_ptr_l>:
 801547c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015480:	4770      	bx	lr

08015482 <__localeconv_l>:
 8015482:	30f0      	adds	r0, #240	; 0xf0
 8015484:	4770      	bx	lr
	...

08015488 <_localeconv_r>:
 8015488:	4b04      	ldr	r3, [pc, #16]	; (801549c <_localeconv_r+0x14>)
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	6a18      	ldr	r0, [r3, #32]
 801548e:	4b04      	ldr	r3, [pc, #16]	; (80154a0 <_localeconv_r+0x18>)
 8015490:	2800      	cmp	r0, #0
 8015492:	bf08      	it	eq
 8015494:	4618      	moveq	r0, r3
 8015496:	30f0      	adds	r0, #240	; 0xf0
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop
 801549c:	20000140 	.word	0x20000140
 80154a0:	200001a4 	.word	0x200001a4

080154a4 <__swhatbuf_r>:
 80154a4:	b570      	push	{r4, r5, r6, lr}
 80154a6:	460e      	mov	r6, r1
 80154a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ac:	b096      	sub	sp, #88	; 0x58
 80154ae:	2900      	cmp	r1, #0
 80154b0:	4614      	mov	r4, r2
 80154b2:	461d      	mov	r5, r3
 80154b4:	da07      	bge.n	80154c6 <__swhatbuf_r+0x22>
 80154b6:	2300      	movs	r3, #0
 80154b8:	602b      	str	r3, [r5, #0]
 80154ba:	89b3      	ldrh	r3, [r6, #12]
 80154bc:	061a      	lsls	r2, r3, #24
 80154be:	d410      	bmi.n	80154e2 <__swhatbuf_r+0x3e>
 80154c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80154c4:	e00e      	b.n	80154e4 <__swhatbuf_r+0x40>
 80154c6:	466a      	mov	r2, sp
 80154c8:	f001 f848 	bl	801655c <_fstat_r>
 80154cc:	2800      	cmp	r0, #0
 80154ce:	dbf2      	blt.n	80154b6 <__swhatbuf_r+0x12>
 80154d0:	9a01      	ldr	r2, [sp, #4]
 80154d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80154d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80154da:	425a      	negs	r2, r3
 80154dc:	415a      	adcs	r2, r3
 80154de:	602a      	str	r2, [r5, #0]
 80154e0:	e7ee      	b.n	80154c0 <__swhatbuf_r+0x1c>
 80154e2:	2340      	movs	r3, #64	; 0x40
 80154e4:	2000      	movs	r0, #0
 80154e6:	6023      	str	r3, [r4, #0]
 80154e8:	b016      	add	sp, #88	; 0x58
 80154ea:	bd70      	pop	{r4, r5, r6, pc}

080154ec <__smakebuf_r>:
 80154ec:	898b      	ldrh	r3, [r1, #12]
 80154ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80154f0:	079d      	lsls	r5, r3, #30
 80154f2:	4606      	mov	r6, r0
 80154f4:	460c      	mov	r4, r1
 80154f6:	d507      	bpl.n	8015508 <__smakebuf_r+0x1c>
 80154f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80154fc:	6023      	str	r3, [r4, #0]
 80154fe:	6123      	str	r3, [r4, #16]
 8015500:	2301      	movs	r3, #1
 8015502:	6163      	str	r3, [r4, #20]
 8015504:	b002      	add	sp, #8
 8015506:	bd70      	pop	{r4, r5, r6, pc}
 8015508:	ab01      	add	r3, sp, #4
 801550a:	466a      	mov	r2, sp
 801550c:	f7ff ffca 	bl	80154a4 <__swhatbuf_r>
 8015510:	9900      	ldr	r1, [sp, #0]
 8015512:	4605      	mov	r5, r0
 8015514:	4630      	mov	r0, r6
 8015516:	f000 fca3 	bl	8015e60 <_malloc_r>
 801551a:	b948      	cbnz	r0, 8015530 <__smakebuf_r+0x44>
 801551c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015520:	059a      	lsls	r2, r3, #22
 8015522:	d4ef      	bmi.n	8015504 <__smakebuf_r+0x18>
 8015524:	f023 0303 	bic.w	r3, r3, #3
 8015528:	f043 0302 	orr.w	r3, r3, #2
 801552c:	81a3      	strh	r3, [r4, #12]
 801552e:	e7e3      	b.n	80154f8 <__smakebuf_r+0xc>
 8015530:	4b0d      	ldr	r3, [pc, #52]	; (8015568 <__smakebuf_r+0x7c>)
 8015532:	62b3      	str	r3, [r6, #40]	; 0x28
 8015534:	89a3      	ldrh	r3, [r4, #12]
 8015536:	6020      	str	r0, [r4, #0]
 8015538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801553c:	81a3      	strh	r3, [r4, #12]
 801553e:	9b00      	ldr	r3, [sp, #0]
 8015540:	6120      	str	r0, [r4, #16]
 8015542:	6163      	str	r3, [r4, #20]
 8015544:	9b01      	ldr	r3, [sp, #4]
 8015546:	b15b      	cbz	r3, 8015560 <__smakebuf_r+0x74>
 8015548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801554c:	4630      	mov	r0, r6
 801554e:	f001 f817 	bl	8016580 <_isatty_r>
 8015552:	b128      	cbz	r0, 8015560 <__smakebuf_r+0x74>
 8015554:	89a3      	ldrh	r3, [r4, #12]
 8015556:	f023 0303 	bic.w	r3, r3, #3
 801555a:	f043 0301 	orr.w	r3, r3, #1
 801555e:	81a3      	strh	r3, [r4, #12]
 8015560:	89a3      	ldrh	r3, [r4, #12]
 8015562:	431d      	orrs	r5, r3
 8015564:	81a5      	strh	r5, [r4, #12]
 8015566:	e7cd      	b.n	8015504 <__smakebuf_r+0x18>
 8015568:	08014ce1 	.word	0x08014ce1

0801556c <malloc>:
 801556c:	4b02      	ldr	r3, [pc, #8]	; (8015578 <malloc+0xc>)
 801556e:	4601      	mov	r1, r0
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	f000 bc75 	b.w	8015e60 <_malloc_r>
 8015576:	bf00      	nop
 8015578:	20000140 	.word	0x20000140

0801557c <__ascii_mbtowc>:
 801557c:	b082      	sub	sp, #8
 801557e:	b901      	cbnz	r1, 8015582 <__ascii_mbtowc+0x6>
 8015580:	a901      	add	r1, sp, #4
 8015582:	b142      	cbz	r2, 8015596 <__ascii_mbtowc+0x1a>
 8015584:	b14b      	cbz	r3, 801559a <__ascii_mbtowc+0x1e>
 8015586:	7813      	ldrb	r3, [r2, #0]
 8015588:	600b      	str	r3, [r1, #0]
 801558a:	7812      	ldrb	r2, [r2, #0]
 801558c:	1c10      	adds	r0, r2, #0
 801558e:	bf18      	it	ne
 8015590:	2001      	movne	r0, #1
 8015592:	b002      	add	sp, #8
 8015594:	4770      	bx	lr
 8015596:	4610      	mov	r0, r2
 8015598:	e7fb      	b.n	8015592 <__ascii_mbtowc+0x16>
 801559a:	f06f 0001 	mvn.w	r0, #1
 801559e:	e7f8      	b.n	8015592 <__ascii_mbtowc+0x16>

080155a0 <memchr>:
 80155a0:	b510      	push	{r4, lr}
 80155a2:	b2c9      	uxtb	r1, r1
 80155a4:	4402      	add	r2, r0
 80155a6:	4290      	cmp	r0, r2
 80155a8:	4603      	mov	r3, r0
 80155aa:	d101      	bne.n	80155b0 <memchr+0x10>
 80155ac:	2300      	movs	r3, #0
 80155ae:	e003      	b.n	80155b8 <memchr+0x18>
 80155b0:	781c      	ldrb	r4, [r3, #0]
 80155b2:	3001      	adds	r0, #1
 80155b4:	428c      	cmp	r4, r1
 80155b6:	d1f6      	bne.n	80155a6 <memchr+0x6>
 80155b8:	4618      	mov	r0, r3
 80155ba:	bd10      	pop	{r4, pc}

080155bc <_Balloc>:
 80155bc:	b570      	push	{r4, r5, r6, lr}
 80155be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80155c0:	4604      	mov	r4, r0
 80155c2:	460e      	mov	r6, r1
 80155c4:	b93d      	cbnz	r5, 80155d6 <_Balloc+0x1a>
 80155c6:	2010      	movs	r0, #16
 80155c8:	f7ff ffd0 	bl	801556c <malloc>
 80155cc:	6260      	str	r0, [r4, #36]	; 0x24
 80155ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80155d2:	6005      	str	r5, [r0, #0]
 80155d4:	60c5      	str	r5, [r0, #12]
 80155d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80155d8:	68eb      	ldr	r3, [r5, #12]
 80155da:	b183      	cbz	r3, 80155fe <_Balloc+0x42>
 80155dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80155e4:	b9b8      	cbnz	r0, 8015616 <_Balloc+0x5a>
 80155e6:	2101      	movs	r1, #1
 80155e8:	fa01 f506 	lsl.w	r5, r1, r6
 80155ec:	1d6a      	adds	r2, r5, #5
 80155ee:	0092      	lsls	r2, r2, #2
 80155f0:	4620      	mov	r0, r4
 80155f2:	f000 fbdb 	bl	8015dac <_calloc_r>
 80155f6:	b160      	cbz	r0, 8015612 <_Balloc+0x56>
 80155f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80155fc:	e00e      	b.n	801561c <_Balloc+0x60>
 80155fe:	2221      	movs	r2, #33	; 0x21
 8015600:	2104      	movs	r1, #4
 8015602:	4620      	mov	r0, r4
 8015604:	f000 fbd2 	bl	8015dac <_calloc_r>
 8015608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801560a:	60e8      	str	r0, [r5, #12]
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d1e4      	bne.n	80155dc <_Balloc+0x20>
 8015612:	2000      	movs	r0, #0
 8015614:	bd70      	pop	{r4, r5, r6, pc}
 8015616:	6802      	ldr	r2, [r0, #0]
 8015618:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801561c:	2300      	movs	r3, #0
 801561e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015622:	e7f7      	b.n	8015614 <_Balloc+0x58>

08015624 <_Bfree>:
 8015624:	b570      	push	{r4, r5, r6, lr}
 8015626:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015628:	4606      	mov	r6, r0
 801562a:	460d      	mov	r5, r1
 801562c:	b93c      	cbnz	r4, 801563e <_Bfree+0x1a>
 801562e:	2010      	movs	r0, #16
 8015630:	f7ff ff9c 	bl	801556c <malloc>
 8015634:	6270      	str	r0, [r6, #36]	; 0x24
 8015636:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801563a:	6004      	str	r4, [r0, #0]
 801563c:	60c4      	str	r4, [r0, #12]
 801563e:	b13d      	cbz	r5, 8015650 <_Bfree+0x2c>
 8015640:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015642:	686a      	ldr	r2, [r5, #4]
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801564a:	6029      	str	r1, [r5, #0]
 801564c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015650:	bd70      	pop	{r4, r5, r6, pc}

08015652 <__multadd>:
 8015652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015656:	461f      	mov	r7, r3
 8015658:	4606      	mov	r6, r0
 801565a:	460c      	mov	r4, r1
 801565c:	2300      	movs	r3, #0
 801565e:	690d      	ldr	r5, [r1, #16]
 8015660:	f101 0c14 	add.w	ip, r1, #20
 8015664:	f8dc 0000 	ldr.w	r0, [ip]
 8015668:	3301      	adds	r3, #1
 801566a:	b281      	uxth	r1, r0
 801566c:	fb02 7101 	mla	r1, r2, r1, r7
 8015670:	0c00      	lsrs	r0, r0, #16
 8015672:	0c0f      	lsrs	r7, r1, #16
 8015674:	fb02 7000 	mla	r0, r2, r0, r7
 8015678:	b289      	uxth	r1, r1
 801567a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801567e:	429d      	cmp	r5, r3
 8015680:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015684:	f84c 1b04 	str.w	r1, [ip], #4
 8015688:	dcec      	bgt.n	8015664 <__multadd+0x12>
 801568a:	b1d7      	cbz	r7, 80156c2 <__multadd+0x70>
 801568c:	68a3      	ldr	r3, [r4, #8]
 801568e:	42ab      	cmp	r3, r5
 8015690:	dc12      	bgt.n	80156b8 <__multadd+0x66>
 8015692:	6861      	ldr	r1, [r4, #4]
 8015694:	4630      	mov	r0, r6
 8015696:	3101      	adds	r1, #1
 8015698:	f7ff ff90 	bl	80155bc <_Balloc>
 801569c:	4680      	mov	r8, r0
 801569e:	6922      	ldr	r2, [r4, #16]
 80156a0:	f104 010c 	add.w	r1, r4, #12
 80156a4:	3202      	adds	r2, #2
 80156a6:	0092      	lsls	r2, r2, #2
 80156a8:	300c      	adds	r0, #12
 80156aa:	f7fc fd9f 	bl	80121ec <memcpy>
 80156ae:	4621      	mov	r1, r4
 80156b0:	4630      	mov	r0, r6
 80156b2:	f7ff ffb7 	bl	8015624 <_Bfree>
 80156b6:	4644      	mov	r4, r8
 80156b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80156bc:	3501      	adds	r5, #1
 80156be:	615f      	str	r7, [r3, #20]
 80156c0:	6125      	str	r5, [r4, #16]
 80156c2:	4620      	mov	r0, r4
 80156c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156c8 <__s2b>:
 80156c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156cc:	4615      	mov	r5, r2
 80156ce:	2209      	movs	r2, #9
 80156d0:	461f      	mov	r7, r3
 80156d2:	3308      	adds	r3, #8
 80156d4:	460c      	mov	r4, r1
 80156d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80156da:	4606      	mov	r6, r0
 80156dc:	2201      	movs	r2, #1
 80156de:	2100      	movs	r1, #0
 80156e0:	429a      	cmp	r2, r3
 80156e2:	db20      	blt.n	8015726 <__s2b+0x5e>
 80156e4:	4630      	mov	r0, r6
 80156e6:	f7ff ff69 	bl	80155bc <_Balloc>
 80156ea:	9b08      	ldr	r3, [sp, #32]
 80156ec:	2d09      	cmp	r5, #9
 80156ee:	6143      	str	r3, [r0, #20]
 80156f0:	f04f 0301 	mov.w	r3, #1
 80156f4:	6103      	str	r3, [r0, #16]
 80156f6:	dd19      	ble.n	801572c <__s2b+0x64>
 80156f8:	f104 0809 	add.w	r8, r4, #9
 80156fc:	46c1      	mov	r9, r8
 80156fe:	442c      	add	r4, r5
 8015700:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015704:	4601      	mov	r1, r0
 8015706:	3b30      	subs	r3, #48	; 0x30
 8015708:	220a      	movs	r2, #10
 801570a:	4630      	mov	r0, r6
 801570c:	f7ff ffa1 	bl	8015652 <__multadd>
 8015710:	45a1      	cmp	r9, r4
 8015712:	d1f5      	bne.n	8015700 <__s2b+0x38>
 8015714:	eb08 0405 	add.w	r4, r8, r5
 8015718:	3c08      	subs	r4, #8
 801571a:	1b2d      	subs	r5, r5, r4
 801571c:	1963      	adds	r3, r4, r5
 801571e:	42bb      	cmp	r3, r7
 8015720:	db07      	blt.n	8015732 <__s2b+0x6a>
 8015722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015726:	0052      	lsls	r2, r2, #1
 8015728:	3101      	adds	r1, #1
 801572a:	e7d9      	b.n	80156e0 <__s2b+0x18>
 801572c:	340a      	adds	r4, #10
 801572e:	2509      	movs	r5, #9
 8015730:	e7f3      	b.n	801571a <__s2b+0x52>
 8015732:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015736:	4601      	mov	r1, r0
 8015738:	3b30      	subs	r3, #48	; 0x30
 801573a:	220a      	movs	r2, #10
 801573c:	4630      	mov	r0, r6
 801573e:	f7ff ff88 	bl	8015652 <__multadd>
 8015742:	e7eb      	b.n	801571c <__s2b+0x54>

08015744 <__hi0bits>:
 8015744:	0c02      	lsrs	r2, r0, #16
 8015746:	0412      	lsls	r2, r2, #16
 8015748:	4603      	mov	r3, r0
 801574a:	b9b2      	cbnz	r2, 801577a <__hi0bits+0x36>
 801574c:	0403      	lsls	r3, r0, #16
 801574e:	2010      	movs	r0, #16
 8015750:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015754:	bf04      	itt	eq
 8015756:	021b      	lsleq	r3, r3, #8
 8015758:	3008      	addeq	r0, #8
 801575a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801575e:	bf04      	itt	eq
 8015760:	011b      	lsleq	r3, r3, #4
 8015762:	3004      	addeq	r0, #4
 8015764:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015768:	bf04      	itt	eq
 801576a:	009b      	lsleq	r3, r3, #2
 801576c:	3002      	addeq	r0, #2
 801576e:	2b00      	cmp	r3, #0
 8015770:	db06      	blt.n	8015780 <__hi0bits+0x3c>
 8015772:	005b      	lsls	r3, r3, #1
 8015774:	d503      	bpl.n	801577e <__hi0bits+0x3a>
 8015776:	3001      	adds	r0, #1
 8015778:	4770      	bx	lr
 801577a:	2000      	movs	r0, #0
 801577c:	e7e8      	b.n	8015750 <__hi0bits+0xc>
 801577e:	2020      	movs	r0, #32
 8015780:	4770      	bx	lr

08015782 <__lo0bits>:
 8015782:	6803      	ldr	r3, [r0, #0]
 8015784:	4601      	mov	r1, r0
 8015786:	f013 0207 	ands.w	r2, r3, #7
 801578a:	d00b      	beq.n	80157a4 <__lo0bits+0x22>
 801578c:	07da      	lsls	r2, r3, #31
 801578e:	d423      	bmi.n	80157d8 <__lo0bits+0x56>
 8015790:	0798      	lsls	r0, r3, #30
 8015792:	bf49      	itett	mi
 8015794:	085b      	lsrmi	r3, r3, #1
 8015796:	089b      	lsrpl	r3, r3, #2
 8015798:	2001      	movmi	r0, #1
 801579a:	600b      	strmi	r3, [r1, #0]
 801579c:	bf5c      	itt	pl
 801579e:	600b      	strpl	r3, [r1, #0]
 80157a0:	2002      	movpl	r0, #2
 80157a2:	4770      	bx	lr
 80157a4:	b298      	uxth	r0, r3
 80157a6:	b9a8      	cbnz	r0, 80157d4 <__lo0bits+0x52>
 80157a8:	2010      	movs	r0, #16
 80157aa:	0c1b      	lsrs	r3, r3, #16
 80157ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80157b0:	bf04      	itt	eq
 80157b2:	0a1b      	lsreq	r3, r3, #8
 80157b4:	3008      	addeq	r0, #8
 80157b6:	071a      	lsls	r2, r3, #28
 80157b8:	bf04      	itt	eq
 80157ba:	091b      	lsreq	r3, r3, #4
 80157bc:	3004      	addeq	r0, #4
 80157be:	079a      	lsls	r2, r3, #30
 80157c0:	bf04      	itt	eq
 80157c2:	089b      	lsreq	r3, r3, #2
 80157c4:	3002      	addeq	r0, #2
 80157c6:	07da      	lsls	r2, r3, #31
 80157c8:	d402      	bmi.n	80157d0 <__lo0bits+0x4e>
 80157ca:	085b      	lsrs	r3, r3, #1
 80157cc:	d006      	beq.n	80157dc <__lo0bits+0x5a>
 80157ce:	3001      	adds	r0, #1
 80157d0:	600b      	str	r3, [r1, #0]
 80157d2:	4770      	bx	lr
 80157d4:	4610      	mov	r0, r2
 80157d6:	e7e9      	b.n	80157ac <__lo0bits+0x2a>
 80157d8:	2000      	movs	r0, #0
 80157da:	4770      	bx	lr
 80157dc:	2020      	movs	r0, #32
 80157de:	4770      	bx	lr

080157e0 <__i2b>:
 80157e0:	b510      	push	{r4, lr}
 80157e2:	460c      	mov	r4, r1
 80157e4:	2101      	movs	r1, #1
 80157e6:	f7ff fee9 	bl	80155bc <_Balloc>
 80157ea:	2201      	movs	r2, #1
 80157ec:	6144      	str	r4, [r0, #20]
 80157ee:	6102      	str	r2, [r0, #16]
 80157f0:	bd10      	pop	{r4, pc}

080157f2 <__multiply>:
 80157f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f6:	4614      	mov	r4, r2
 80157f8:	690a      	ldr	r2, [r1, #16]
 80157fa:	6923      	ldr	r3, [r4, #16]
 80157fc:	4688      	mov	r8, r1
 80157fe:	429a      	cmp	r2, r3
 8015800:	bfbe      	ittt	lt
 8015802:	460b      	movlt	r3, r1
 8015804:	46a0      	movlt	r8, r4
 8015806:	461c      	movlt	r4, r3
 8015808:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801580c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015810:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015818:	eb07 0609 	add.w	r6, r7, r9
 801581c:	42b3      	cmp	r3, r6
 801581e:	bfb8      	it	lt
 8015820:	3101      	addlt	r1, #1
 8015822:	f7ff fecb 	bl	80155bc <_Balloc>
 8015826:	f100 0514 	add.w	r5, r0, #20
 801582a:	462b      	mov	r3, r5
 801582c:	2200      	movs	r2, #0
 801582e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015832:	4573      	cmp	r3, lr
 8015834:	d316      	bcc.n	8015864 <__multiply+0x72>
 8015836:	f104 0214 	add.w	r2, r4, #20
 801583a:	f108 0114 	add.w	r1, r8, #20
 801583e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015842:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	9b00      	ldr	r3, [sp, #0]
 801584a:	9201      	str	r2, [sp, #4]
 801584c:	4293      	cmp	r3, r2
 801584e:	d80c      	bhi.n	801586a <__multiply+0x78>
 8015850:	2e00      	cmp	r6, #0
 8015852:	dd03      	ble.n	801585c <__multiply+0x6a>
 8015854:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015858:	2b00      	cmp	r3, #0
 801585a:	d05d      	beq.n	8015918 <__multiply+0x126>
 801585c:	6106      	str	r6, [r0, #16]
 801585e:	b003      	add	sp, #12
 8015860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015864:	f843 2b04 	str.w	r2, [r3], #4
 8015868:	e7e3      	b.n	8015832 <__multiply+0x40>
 801586a:	f8b2 b000 	ldrh.w	fp, [r2]
 801586e:	f1bb 0f00 	cmp.w	fp, #0
 8015872:	d023      	beq.n	80158bc <__multiply+0xca>
 8015874:	4689      	mov	r9, r1
 8015876:	46ac      	mov	ip, r5
 8015878:	f04f 0800 	mov.w	r8, #0
 801587c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015880:	f8dc a000 	ldr.w	sl, [ip]
 8015884:	b2a3      	uxth	r3, r4
 8015886:	fa1f fa8a 	uxth.w	sl, sl
 801588a:	fb0b a303 	mla	r3, fp, r3, sl
 801588e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015892:	f8dc 4000 	ldr.w	r4, [ip]
 8015896:	4443      	add	r3, r8
 8015898:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801589c:	fb0b 840a 	mla	r4, fp, sl, r8
 80158a0:	46e2      	mov	sl, ip
 80158a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80158a6:	b29b      	uxth	r3, r3
 80158a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80158ac:	454f      	cmp	r7, r9
 80158ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80158b2:	f84a 3b04 	str.w	r3, [sl], #4
 80158b6:	d82b      	bhi.n	8015910 <__multiply+0x11e>
 80158b8:	f8cc 8004 	str.w	r8, [ip, #4]
 80158bc:	9b01      	ldr	r3, [sp, #4]
 80158be:	3204      	adds	r2, #4
 80158c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80158c4:	f1ba 0f00 	cmp.w	sl, #0
 80158c8:	d020      	beq.n	801590c <__multiply+0x11a>
 80158ca:	4689      	mov	r9, r1
 80158cc:	46a8      	mov	r8, r5
 80158ce:	f04f 0b00 	mov.w	fp, #0
 80158d2:	682b      	ldr	r3, [r5, #0]
 80158d4:	f8b9 c000 	ldrh.w	ip, [r9]
 80158d8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80158dc:	b29b      	uxth	r3, r3
 80158de:	fb0a 440c 	mla	r4, sl, ip, r4
 80158e2:	46c4      	mov	ip, r8
 80158e4:	445c      	add	r4, fp
 80158e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80158ea:	f84c 3b04 	str.w	r3, [ip], #4
 80158ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80158f2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80158f6:	0c1b      	lsrs	r3, r3, #16
 80158f8:	fb0a b303 	mla	r3, sl, r3, fp
 80158fc:	454f      	cmp	r7, r9
 80158fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015902:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015906:	d805      	bhi.n	8015914 <__multiply+0x122>
 8015908:	f8c8 3004 	str.w	r3, [r8, #4]
 801590c:	3504      	adds	r5, #4
 801590e:	e79b      	b.n	8015848 <__multiply+0x56>
 8015910:	46d4      	mov	ip, sl
 8015912:	e7b3      	b.n	801587c <__multiply+0x8a>
 8015914:	46e0      	mov	r8, ip
 8015916:	e7dd      	b.n	80158d4 <__multiply+0xe2>
 8015918:	3e01      	subs	r6, #1
 801591a:	e799      	b.n	8015850 <__multiply+0x5e>

0801591c <__pow5mult>:
 801591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015920:	4615      	mov	r5, r2
 8015922:	f012 0203 	ands.w	r2, r2, #3
 8015926:	4606      	mov	r6, r0
 8015928:	460f      	mov	r7, r1
 801592a:	d007      	beq.n	801593c <__pow5mult+0x20>
 801592c:	4c21      	ldr	r4, [pc, #132]	; (80159b4 <__pow5mult+0x98>)
 801592e:	3a01      	subs	r2, #1
 8015930:	2300      	movs	r3, #0
 8015932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015936:	f7ff fe8c 	bl	8015652 <__multadd>
 801593a:	4607      	mov	r7, r0
 801593c:	10ad      	asrs	r5, r5, #2
 801593e:	d035      	beq.n	80159ac <__pow5mult+0x90>
 8015940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015942:	b93c      	cbnz	r4, 8015954 <__pow5mult+0x38>
 8015944:	2010      	movs	r0, #16
 8015946:	f7ff fe11 	bl	801556c <malloc>
 801594a:	6270      	str	r0, [r6, #36]	; 0x24
 801594c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015950:	6004      	str	r4, [r0, #0]
 8015952:	60c4      	str	r4, [r0, #12]
 8015954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801595c:	b94c      	cbnz	r4, 8015972 <__pow5mult+0x56>
 801595e:	f240 2171 	movw	r1, #625	; 0x271
 8015962:	4630      	mov	r0, r6
 8015964:	f7ff ff3c 	bl	80157e0 <__i2b>
 8015968:	2300      	movs	r3, #0
 801596a:	4604      	mov	r4, r0
 801596c:	f8c8 0008 	str.w	r0, [r8, #8]
 8015970:	6003      	str	r3, [r0, #0]
 8015972:	f04f 0800 	mov.w	r8, #0
 8015976:	07eb      	lsls	r3, r5, #31
 8015978:	d50a      	bpl.n	8015990 <__pow5mult+0x74>
 801597a:	4639      	mov	r1, r7
 801597c:	4622      	mov	r2, r4
 801597e:	4630      	mov	r0, r6
 8015980:	f7ff ff37 	bl	80157f2 <__multiply>
 8015984:	4681      	mov	r9, r0
 8015986:	4639      	mov	r1, r7
 8015988:	4630      	mov	r0, r6
 801598a:	f7ff fe4b 	bl	8015624 <_Bfree>
 801598e:	464f      	mov	r7, r9
 8015990:	106d      	asrs	r5, r5, #1
 8015992:	d00b      	beq.n	80159ac <__pow5mult+0x90>
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	b938      	cbnz	r0, 80159a8 <__pow5mult+0x8c>
 8015998:	4622      	mov	r2, r4
 801599a:	4621      	mov	r1, r4
 801599c:	4630      	mov	r0, r6
 801599e:	f7ff ff28 	bl	80157f2 <__multiply>
 80159a2:	6020      	str	r0, [r4, #0]
 80159a4:	f8c0 8000 	str.w	r8, [r0]
 80159a8:	4604      	mov	r4, r0
 80159aa:	e7e4      	b.n	8015976 <__pow5mult+0x5a>
 80159ac:	4638      	mov	r0, r7
 80159ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159b2:	bf00      	nop
 80159b4:	0801a6c8 	.word	0x0801a6c8

080159b8 <__lshift>:
 80159b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159bc:	460c      	mov	r4, r1
 80159be:	4607      	mov	r7, r0
 80159c0:	4616      	mov	r6, r2
 80159c2:	6923      	ldr	r3, [r4, #16]
 80159c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80159c8:	eb0a 0903 	add.w	r9, sl, r3
 80159cc:	6849      	ldr	r1, [r1, #4]
 80159ce:	68a3      	ldr	r3, [r4, #8]
 80159d0:	f109 0501 	add.w	r5, r9, #1
 80159d4:	42ab      	cmp	r3, r5
 80159d6:	db32      	blt.n	8015a3e <__lshift+0x86>
 80159d8:	4638      	mov	r0, r7
 80159da:	f7ff fdef 	bl	80155bc <_Balloc>
 80159de:	2300      	movs	r3, #0
 80159e0:	4680      	mov	r8, r0
 80159e2:	461a      	mov	r2, r3
 80159e4:	f100 0114 	add.w	r1, r0, #20
 80159e8:	4553      	cmp	r3, sl
 80159ea:	db2b      	blt.n	8015a44 <__lshift+0x8c>
 80159ec:	6920      	ldr	r0, [r4, #16]
 80159ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159f2:	f104 0314 	add.w	r3, r4, #20
 80159f6:	f016 021f 	ands.w	r2, r6, #31
 80159fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80159fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015a02:	d025      	beq.n	8015a50 <__lshift+0x98>
 8015a04:	2000      	movs	r0, #0
 8015a06:	f1c2 0e20 	rsb	lr, r2, #32
 8015a0a:	468a      	mov	sl, r1
 8015a0c:	681e      	ldr	r6, [r3, #0]
 8015a0e:	4096      	lsls	r6, r2
 8015a10:	4330      	orrs	r0, r6
 8015a12:	f84a 0b04 	str.w	r0, [sl], #4
 8015a16:	f853 0b04 	ldr.w	r0, [r3], #4
 8015a1a:	459c      	cmp	ip, r3
 8015a1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015a20:	d814      	bhi.n	8015a4c <__lshift+0x94>
 8015a22:	6048      	str	r0, [r1, #4]
 8015a24:	b108      	cbz	r0, 8015a2a <__lshift+0x72>
 8015a26:	f109 0502 	add.w	r5, r9, #2
 8015a2a:	3d01      	subs	r5, #1
 8015a2c:	4638      	mov	r0, r7
 8015a2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8015a32:	4621      	mov	r1, r4
 8015a34:	f7ff fdf6 	bl	8015624 <_Bfree>
 8015a38:	4640      	mov	r0, r8
 8015a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a3e:	3101      	adds	r1, #1
 8015a40:	005b      	lsls	r3, r3, #1
 8015a42:	e7c7      	b.n	80159d4 <__lshift+0x1c>
 8015a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015a48:	3301      	adds	r3, #1
 8015a4a:	e7cd      	b.n	80159e8 <__lshift+0x30>
 8015a4c:	4651      	mov	r1, sl
 8015a4e:	e7dc      	b.n	8015a0a <__lshift+0x52>
 8015a50:	3904      	subs	r1, #4
 8015a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a56:	459c      	cmp	ip, r3
 8015a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a5c:	d8f9      	bhi.n	8015a52 <__lshift+0x9a>
 8015a5e:	e7e4      	b.n	8015a2a <__lshift+0x72>

08015a60 <__mcmp>:
 8015a60:	6903      	ldr	r3, [r0, #16]
 8015a62:	690a      	ldr	r2, [r1, #16]
 8015a64:	b530      	push	{r4, r5, lr}
 8015a66:	1a9b      	subs	r3, r3, r2
 8015a68:	d10c      	bne.n	8015a84 <__mcmp+0x24>
 8015a6a:	0092      	lsls	r2, r2, #2
 8015a6c:	3014      	adds	r0, #20
 8015a6e:	3114      	adds	r1, #20
 8015a70:	1884      	adds	r4, r0, r2
 8015a72:	4411      	add	r1, r2
 8015a74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015a78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015a7c:	4295      	cmp	r5, r2
 8015a7e:	d003      	beq.n	8015a88 <__mcmp+0x28>
 8015a80:	d305      	bcc.n	8015a8e <__mcmp+0x2e>
 8015a82:	2301      	movs	r3, #1
 8015a84:	4618      	mov	r0, r3
 8015a86:	bd30      	pop	{r4, r5, pc}
 8015a88:	42a0      	cmp	r0, r4
 8015a8a:	d3f3      	bcc.n	8015a74 <__mcmp+0x14>
 8015a8c:	e7fa      	b.n	8015a84 <__mcmp+0x24>
 8015a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a92:	e7f7      	b.n	8015a84 <__mcmp+0x24>

08015a94 <__mdiff>:
 8015a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a98:	460d      	mov	r5, r1
 8015a9a:	4607      	mov	r7, r0
 8015a9c:	4611      	mov	r1, r2
 8015a9e:	4628      	mov	r0, r5
 8015aa0:	4614      	mov	r4, r2
 8015aa2:	f7ff ffdd 	bl	8015a60 <__mcmp>
 8015aa6:	1e06      	subs	r6, r0, #0
 8015aa8:	d108      	bne.n	8015abc <__mdiff+0x28>
 8015aaa:	4631      	mov	r1, r6
 8015aac:	4638      	mov	r0, r7
 8015aae:	f7ff fd85 	bl	80155bc <_Balloc>
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015abc:	bfa4      	itt	ge
 8015abe:	4623      	movge	r3, r4
 8015ac0:	462c      	movge	r4, r5
 8015ac2:	4638      	mov	r0, r7
 8015ac4:	6861      	ldr	r1, [r4, #4]
 8015ac6:	bfa6      	itte	ge
 8015ac8:	461d      	movge	r5, r3
 8015aca:	2600      	movge	r6, #0
 8015acc:	2601      	movlt	r6, #1
 8015ace:	f7ff fd75 	bl	80155bc <_Balloc>
 8015ad2:	f04f 0e00 	mov.w	lr, #0
 8015ad6:	60c6      	str	r6, [r0, #12]
 8015ad8:	692b      	ldr	r3, [r5, #16]
 8015ada:	6926      	ldr	r6, [r4, #16]
 8015adc:	f104 0214 	add.w	r2, r4, #20
 8015ae0:	f105 0914 	add.w	r9, r5, #20
 8015ae4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015ae8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015aec:	f100 0114 	add.w	r1, r0, #20
 8015af0:	f852 ab04 	ldr.w	sl, [r2], #4
 8015af4:	f859 5b04 	ldr.w	r5, [r9], #4
 8015af8:	fa1f f38a 	uxth.w	r3, sl
 8015afc:	4473      	add	r3, lr
 8015afe:	b2ac      	uxth	r4, r5
 8015b00:	1b1b      	subs	r3, r3, r4
 8015b02:	0c2c      	lsrs	r4, r5, #16
 8015b04:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8015b08:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8015b12:	45c8      	cmp	r8, r9
 8015b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8015b18:	4694      	mov	ip, r2
 8015b1a:	f841 4b04 	str.w	r4, [r1], #4
 8015b1e:	d8e7      	bhi.n	8015af0 <__mdiff+0x5c>
 8015b20:	45bc      	cmp	ip, r7
 8015b22:	d304      	bcc.n	8015b2e <__mdiff+0x9a>
 8015b24:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015b28:	b183      	cbz	r3, 8015b4c <__mdiff+0xb8>
 8015b2a:	6106      	str	r6, [r0, #16]
 8015b2c:	e7c4      	b.n	8015ab8 <__mdiff+0x24>
 8015b2e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8015b32:	b2a2      	uxth	r2, r4
 8015b34:	4472      	add	r2, lr
 8015b36:	1413      	asrs	r3, r2, #16
 8015b38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015b3c:	b292      	uxth	r2, r2
 8015b3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015b42:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015b46:	f841 2b04 	str.w	r2, [r1], #4
 8015b4a:	e7e9      	b.n	8015b20 <__mdiff+0x8c>
 8015b4c:	3e01      	subs	r6, #1
 8015b4e:	e7e9      	b.n	8015b24 <__mdiff+0x90>

08015b50 <__ulp>:
 8015b50:	4b10      	ldr	r3, [pc, #64]	; (8015b94 <__ulp+0x44>)
 8015b52:	400b      	ands	r3, r1
 8015b54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	dd02      	ble.n	8015b62 <__ulp+0x12>
 8015b5c:	2000      	movs	r0, #0
 8015b5e:	4619      	mov	r1, r3
 8015b60:	4770      	bx	lr
 8015b62:	425b      	negs	r3, r3
 8015b64:	151b      	asrs	r3, r3, #20
 8015b66:	2b13      	cmp	r3, #19
 8015b68:	f04f 0000 	mov.w	r0, #0
 8015b6c:	f04f 0100 	mov.w	r1, #0
 8015b70:	dc04      	bgt.n	8015b7c <__ulp+0x2c>
 8015b72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015b76:	fa42 f103 	asr.w	r1, r2, r3
 8015b7a:	4770      	bx	lr
 8015b7c:	2201      	movs	r2, #1
 8015b7e:	3b14      	subs	r3, #20
 8015b80:	2b1e      	cmp	r3, #30
 8015b82:	bfce      	itee	gt
 8015b84:	4613      	movgt	r3, r2
 8015b86:	f1c3 031f 	rsble	r3, r3, #31
 8015b8a:	fa02 f303 	lslle.w	r3, r2, r3
 8015b8e:	4618      	mov	r0, r3
 8015b90:	4770      	bx	lr
 8015b92:	bf00      	nop
 8015b94:	7ff00000 	.word	0x7ff00000

08015b98 <__b2d>:
 8015b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b9c:	6907      	ldr	r7, [r0, #16]
 8015b9e:	f100 0914 	add.w	r9, r0, #20
 8015ba2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8015ba6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8015baa:	f1a7 0804 	sub.w	r8, r7, #4
 8015bae:	4630      	mov	r0, r6
 8015bb0:	f7ff fdc8 	bl	8015744 <__hi0bits>
 8015bb4:	f1c0 0320 	rsb	r3, r0, #32
 8015bb8:	280a      	cmp	r0, #10
 8015bba:	600b      	str	r3, [r1, #0]
 8015bbc:	491e      	ldr	r1, [pc, #120]	; (8015c38 <__b2d+0xa0>)
 8015bbe:	dc17      	bgt.n	8015bf0 <__b2d+0x58>
 8015bc0:	45c1      	cmp	r9, r8
 8015bc2:	bf28      	it	cs
 8015bc4:	2200      	movcs	r2, #0
 8015bc6:	f1c0 0c0b 	rsb	ip, r0, #11
 8015bca:	fa26 f30c 	lsr.w	r3, r6, ip
 8015bce:	bf38      	it	cc
 8015bd0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015bd4:	ea43 0501 	orr.w	r5, r3, r1
 8015bd8:	f100 0315 	add.w	r3, r0, #21
 8015bdc:	fa06 f303 	lsl.w	r3, r6, r3
 8015be0:	fa22 f20c 	lsr.w	r2, r2, ip
 8015be4:	ea43 0402 	orr.w	r4, r3, r2
 8015be8:	4620      	mov	r0, r4
 8015bea:	4629      	mov	r1, r5
 8015bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bf0:	45c1      	cmp	r9, r8
 8015bf2:	bf3a      	itte	cc
 8015bf4:	f1a7 0808 	subcc.w	r8, r7, #8
 8015bf8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8015bfc:	2200      	movcs	r2, #0
 8015bfe:	f1b0 030b 	subs.w	r3, r0, #11
 8015c02:	d015      	beq.n	8015c30 <__b2d+0x98>
 8015c04:	409e      	lsls	r6, r3
 8015c06:	f1c3 0720 	rsb	r7, r3, #32
 8015c0a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8015c0e:	fa22 f107 	lsr.w	r1, r2, r7
 8015c12:	45c8      	cmp	r8, r9
 8015c14:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8015c18:	ea46 0501 	orr.w	r5, r6, r1
 8015c1c:	bf94      	ite	ls
 8015c1e:	2100      	movls	r1, #0
 8015c20:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8015c24:	fa02 f003 	lsl.w	r0, r2, r3
 8015c28:	40f9      	lsrs	r1, r7
 8015c2a:	ea40 0401 	orr.w	r4, r0, r1
 8015c2e:	e7db      	b.n	8015be8 <__b2d+0x50>
 8015c30:	ea46 0501 	orr.w	r5, r6, r1
 8015c34:	4614      	mov	r4, r2
 8015c36:	e7d7      	b.n	8015be8 <__b2d+0x50>
 8015c38:	3ff00000 	.word	0x3ff00000

08015c3c <__d2b>:
 8015c3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015c40:	461c      	mov	r4, r3
 8015c42:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8015c46:	2101      	movs	r1, #1
 8015c48:	4690      	mov	r8, r2
 8015c4a:	f7ff fcb7 	bl	80155bc <_Balloc>
 8015c4e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8015c52:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8015c56:	4607      	mov	r7, r0
 8015c58:	bb34      	cbnz	r4, 8015ca8 <__d2b+0x6c>
 8015c5a:	9201      	str	r2, [sp, #4]
 8015c5c:	f1b8 0200 	subs.w	r2, r8, #0
 8015c60:	d027      	beq.n	8015cb2 <__d2b+0x76>
 8015c62:	a802      	add	r0, sp, #8
 8015c64:	f840 2d08 	str.w	r2, [r0, #-8]!
 8015c68:	f7ff fd8b 	bl	8015782 <__lo0bits>
 8015c6c:	9900      	ldr	r1, [sp, #0]
 8015c6e:	b1f0      	cbz	r0, 8015cae <__d2b+0x72>
 8015c70:	9a01      	ldr	r2, [sp, #4]
 8015c72:	f1c0 0320 	rsb	r3, r0, #32
 8015c76:	fa02 f303 	lsl.w	r3, r2, r3
 8015c7a:	430b      	orrs	r3, r1
 8015c7c:	40c2      	lsrs	r2, r0
 8015c7e:	617b      	str	r3, [r7, #20]
 8015c80:	9201      	str	r2, [sp, #4]
 8015c82:	9b01      	ldr	r3, [sp, #4]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	bf14      	ite	ne
 8015c88:	2102      	movne	r1, #2
 8015c8a:	2101      	moveq	r1, #1
 8015c8c:	61bb      	str	r3, [r7, #24]
 8015c8e:	6139      	str	r1, [r7, #16]
 8015c90:	b1c4      	cbz	r4, 8015cc4 <__d2b+0x88>
 8015c92:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015c96:	4404      	add	r4, r0
 8015c98:	6034      	str	r4, [r6, #0]
 8015c9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c9e:	6028      	str	r0, [r5, #0]
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	b002      	add	sp, #8
 8015ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015cac:	e7d5      	b.n	8015c5a <__d2b+0x1e>
 8015cae:	6179      	str	r1, [r7, #20]
 8015cb0:	e7e7      	b.n	8015c82 <__d2b+0x46>
 8015cb2:	a801      	add	r0, sp, #4
 8015cb4:	f7ff fd65 	bl	8015782 <__lo0bits>
 8015cb8:	2101      	movs	r1, #1
 8015cba:	9b01      	ldr	r3, [sp, #4]
 8015cbc:	6139      	str	r1, [r7, #16]
 8015cbe:	617b      	str	r3, [r7, #20]
 8015cc0:	3020      	adds	r0, #32
 8015cc2:	e7e5      	b.n	8015c90 <__d2b+0x54>
 8015cc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015cc8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015ccc:	6030      	str	r0, [r6, #0]
 8015cce:	6918      	ldr	r0, [r3, #16]
 8015cd0:	f7ff fd38 	bl	8015744 <__hi0bits>
 8015cd4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015cd8:	e7e1      	b.n	8015c9e <__d2b+0x62>

08015cda <__ratio>:
 8015cda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cde:	4688      	mov	r8, r1
 8015ce0:	4669      	mov	r1, sp
 8015ce2:	4681      	mov	r9, r0
 8015ce4:	f7ff ff58 	bl	8015b98 <__b2d>
 8015ce8:	468b      	mov	fp, r1
 8015cea:	4606      	mov	r6, r0
 8015cec:	460f      	mov	r7, r1
 8015cee:	4640      	mov	r0, r8
 8015cf0:	a901      	add	r1, sp, #4
 8015cf2:	f7ff ff51 	bl	8015b98 <__b2d>
 8015cf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cfa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015cfe:	460d      	mov	r5, r1
 8015d00:	eba3 0c02 	sub.w	ip, r3, r2
 8015d04:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015d08:	1a9b      	subs	r3, r3, r2
 8015d0a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	bfd5      	itete	le
 8015d12:	460a      	movle	r2, r1
 8015d14:	463a      	movgt	r2, r7
 8015d16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015d1a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015d1e:	bfd8      	it	le
 8015d20:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8015d24:	462b      	mov	r3, r5
 8015d26:	4602      	mov	r2, r0
 8015d28:	4659      	mov	r1, fp
 8015d2a:	4630      	mov	r0, r6
 8015d2c:	f7ea fd16 	bl	800075c <__aeabi_ddiv>
 8015d30:	b003      	add	sp, #12
 8015d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d36 <__copybits>:
 8015d36:	3901      	subs	r1, #1
 8015d38:	b510      	push	{r4, lr}
 8015d3a:	1149      	asrs	r1, r1, #5
 8015d3c:	6914      	ldr	r4, [r2, #16]
 8015d3e:	3101      	adds	r1, #1
 8015d40:	f102 0314 	add.w	r3, r2, #20
 8015d44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015d48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015d4c:	42a3      	cmp	r3, r4
 8015d4e:	4602      	mov	r2, r0
 8015d50:	d303      	bcc.n	8015d5a <__copybits+0x24>
 8015d52:	2300      	movs	r3, #0
 8015d54:	428a      	cmp	r2, r1
 8015d56:	d305      	bcc.n	8015d64 <__copybits+0x2e>
 8015d58:	bd10      	pop	{r4, pc}
 8015d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d5e:	f840 2b04 	str.w	r2, [r0], #4
 8015d62:	e7f3      	b.n	8015d4c <__copybits+0x16>
 8015d64:	f842 3b04 	str.w	r3, [r2], #4
 8015d68:	e7f4      	b.n	8015d54 <__copybits+0x1e>

08015d6a <__any_on>:
 8015d6a:	f100 0214 	add.w	r2, r0, #20
 8015d6e:	6900      	ldr	r0, [r0, #16]
 8015d70:	114b      	asrs	r3, r1, #5
 8015d72:	4298      	cmp	r0, r3
 8015d74:	b510      	push	{r4, lr}
 8015d76:	db11      	blt.n	8015d9c <__any_on+0x32>
 8015d78:	dd0a      	ble.n	8015d90 <__any_on+0x26>
 8015d7a:	f011 011f 	ands.w	r1, r1, #31
 8015d7e:	d007      	beq.n	8015d90 <__any_on+0x26>
 8015d80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015d84:	fa24 f001 	lsr.w	r0, r4, r1
 8015d88:	fa00 f101 	lsl.w	r1, r0, r1
 8015d8c:	428c      	cmp	r4, r1
 8015d8e:	d10b      	bne.n	8015da8 <__any_on+0x3e>
 8015d90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d94:	4293      	cmp	r3, r2
 8015d96:	d803      	bhi.n	8015da0 <__any_on+0x36>
 8015d98:	2000      	movs	r0, #0
 8015d9a:	bd10      	pop	{r4, pc}
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	e7f7      	b.n	8015d90 <__any_on+0x26>
 8015da0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015da4:	2900      	cmp	r1, #0
 8015da6:	d0f5      	beq.n	8015d94 <__any_on+0x2a>
 8015da8:	2001      	movs	r0, #1
 8015daa:	e7f6      	b.n	8015d9a <__any_on+0x30>

08015dac <_calloc_r>:
 8015dac:	b538      	push	{r3, r4, r5, lr}
 8015dae:	fb02 f401 	mul.w	r4, r2, r1
 8015db2:	4621      	mov	r1, r4
 8015db4:	f000 f854 	bl	8015e60 <_malloc_r>
 8015db8:	4605      	mov	r5, r0
 8015dba:	b118      	cbz	r0, 8015dc4 <_calloc_r+0x18>
 8015dbc:	4622      	mov	r2, r4
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	f7fc fa1f 	bl	8012202 <memset>
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	bd38      	pop	{r3, r4, r5, pc}

08015dc8 <_free_r>:
 8015dc8:	b538      	push	{r3, r4, r5, lr}
 8015dca:	4605      	mov	r5, r0
 8015dcc:	2900      	cmp	r1, #0
 8015dce:	d043      	beq.n	8015e58 <_free_r+0x90>
 8015dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dd4:	1f0c      	subs	r4, r1, #4
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	bfb8      	it	lt
 8015dda:	18e4      	addlt	r4, r4, r3
 8015ddc:	f000 fc0b 	bl	80165f6 <__malloc_lock>
 8015de0:	4a1e      	ldr	r2, [pc, #120]	; (8015e5c <_free_r+0x94>)
 8015de2:	6813      	ldr	r3, [r2, #0]
 8015de4:	4610      	mov	r0, r2
 8015de6:	b933      	cbnz	r3, 8015df6 <_free_r+0x2e>
 8015de8:	6063      	str	r3, [r4, #4]
 8015dea:	6014      	str	r4, [r2, #0]
 8015dec:	4628      	mov	r0, r5
 8015dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015df2:	f000 bc01 	b.w	80165f8 <__malloc_unlock>
 8015df6:	42a3      	cmp	r3, r4
 8015df8:	d90b      	bls.n	8015e12 <_free_r+0x4a>
 8015dfa:	6821      	ldr	r1, [r4, #0]
 8015dfc:	1862      	adds	r2, r4, r1
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	bf01      	itttt	eq
 8015e02:	681a      	ldreq	r2, [r3, #0]
 8015e04:	685b      	ldreq	r3, [r3, #4]
 8015e06:	1852      	addeq	r2, r2, r1
 8015e08:	6022      	streq	r2, [r4, #0]
 8015e0a:	6063      	str	r3, [r4, #4]
 8015e0c:	6004      	str	r4, [r0, #0]
 8015e0e:	e7ed      	b.n	8015dec <_free_r+0x24>
 8015e10:	4613      	mov	r3, r2
 8015e12:	685a      	ldr	r2, [r3, #4]
 8015e14:	b10a      	cbz	r2, 8015e1a <_free_r+0x52>
 8015e16:	42a2      	cmp	r2, r4
 8015e18:	d9fa      	bls.n	8015e10 <_free_r+0x48>
 8015e1a:	6819      	ldr	r1, [r3, #0]
 8015e1c:	1858      	adds	r0, r3, r1
 8015e1e:	42a0      	cmp	r0, r4
 8015e20:	d10b      	bne.n	8015e3a <_free_r+0x72>
 8015e22:	6820      	ldr	r0, [r4, #0]
 8015e24:	4401      	add	r1, r0
 8015e26:	1858      	adds	r0, r3, r1
 8015e28:	4282      	cmp	r2, r0
 8015e2a:	6019      	str	r1, [r3, #0]
 8015e2c:	d1de      	bne.n	8015dec <_free_r+0x24>
 8015e2e:	6810      	ldr	r0, [r2, #0]
 8015e30:	6852      	ldr	r2, [r2, #4]
 8015e32:	4401      	add	r1, r0
 8015e34:	6019      	str	r1, [r3, #0]
 8015e36:	605a      	str	r2, [r3, #4]
 8015e38:	e7d8      	b.n	8015dec <_free_r+0x24>
 8015e3a:	d902      	bls.n	8015e42 <_free_r+0x7a>
 8015e3c:	230c      	movs	r3, #12
 8015e3e:	602b      	str	r3, [r5, #0]
 8015e40:	e7d4      	b.n	8015dec <_free_r+0x24>
 8015e42:	6820      	ldr	r0, [r4, #0]
 8015e44:	1821      	adds	r1, r4, r0
 8015e46:	428a      	cmp	r2, r1
 8015e48:	bf01      	itttt	eq
 8015e4a:	6811      	ldreq	r1, [r2, #0]
 8015e4c:	6852      	ldreq	r2, [r2, #4]
 8015e4e:	1809      	addeq	r1, r1, r0
 8015e50:	6021      	streq	r1, [r4, #0]
 8015e52:	6062      	str	r2, [r4, #4]
 8015e54:	605c      	str	r4, [r3, #4]
 8015e56:	e7c9      	b.n	8015dec <_free_r+0x24>
 8015e58:	bd38      	pop	{r3, r4, r5, pc}
 8015e5a:	bf00      	nop
 8015e5c:	200039e0 	.word	0x200039e0

08015e60 <_malloc_r>:
 8015e60:	b570      	push	{r4, r5, r6, lr}
 8015e62:	1ccd      	adds	r5, r1, #3
 8015e64:	f025 0503 	bic.w	r5, r5, #3
 8015e68:	3508      	adds	r5, #8
 8015e6a:	2d0c      	cmp	r5, #12
 8015e6c:	bf38      	it	cc
 8015e6e:	250c      	movcc	r5, #12
 8015e70:	2d00      	cmp	r5, #0
 8015e72:	4606      	mov	r6, r0
 8015e74:	db01      	blt.n	8015e7a <_malloc_r+0x1a>
 8015e76:	42a9      	cmp	r1, r5
 8015e78:	d903      	bls.n	8015e82 <_malloc_r+0x22>
 8015e7a:	230c      	movs	r3, #12
 8015e7c:	6033      	str	r3, [r6, #0]
 8015e7e:	2000      	movs	r0, #0
 8015e80:	bd70      	pop	{r4, r5, r6, pc}
 8015e82:	f000 fbb8 	bl	80165f6 <__malloc_lock>
 8015e86:	4a21      	ldr	r2, [pc, #132]	; (8015f0c <_malloc_r+0xac>)
 8015e88:	6814      	ldr	r4, [r2, #0]
 8015e8a:	4621      	mov	r1, r4
 8015e8c:	b991      	cbnz	r1, 8015eb4 <_malloc_r+0x54>
 8015e8e:	4c20      	ldr	r4, [pc, #128]	; (8015f10 <_malloc_r+0xb0>)
 8015e90:	6823      	ldr	r3, [r4, #0]
 8015e92:	b91b      	cbnz	r3, 8015e9c <_malloc_r+0x3c>
 8015e94:	4630      	mov	r0, r6
 8015e96:	f000 facd 	bl	8016434 <_sbrk_r>
 8015e9a:	6020      	str	r0, [r4, #0]
 8015e9c:	4629      	mov	r1, r5
 8015e9e:	4630      	mov	r0, r6
 8015ea0:	f000 fac8 	bl	8016434 <_sbrk_r>
 8015ea4:	1c43      	adds	r3, r0, #1
 8015ea6:	d124      	bne.n	8015ef2 <_malloc_r+0x92>
 8015ea8:	230c      	movs	r3, #12
 8015eaa:	4630      	mov	r0, r6
 8015eac:	6033      	str	r3, [r6, #0]
 8015eae:	f000 fba3 	bl	80165f8 <__malloc_unlock>
 8015eb2:	e7e4      	b.n	8015e7e <_malloc_r+0x1e>
 8015eb4:	680b      	ldr	r3, [r1, #0]
 8015eb6:	1b5b      	subs	r3, r3, r5
 8015eb8:	d418      	bmi.n	8015eec <_malloc_r+0x8c>
 8015eba:	2b0b      	cmp	r3, #11
 8015ebc:	d90f      	bls.n	8015ede <_malloc_r+0x7e>
 8015ebe:	600b      	str	r3, [r1, #0]
 8015ec0:	18cc      	adds	r4, r1, r3
 8015ec2:	50cd      	str	r5, [r1, r3]
 8015ec4:	4630      	mov	r0, r6
 8015ec6:	f000 fb97 	bl	80165f8 <__malloc_unlock>
 8015eca:	f104 000b 	add.w	r0, r4, #11
 8015ece:	1d23      	adds	r3, r4, #4
 8015ed0:	f020 0007 	bic.w	r0, r0, #7
 8015ed4:	1ac3      	subs	r3, r0, r3
 8015ed6:	d0d3      	beq.n	8015e80 <_malloc_r+0x20>
 8015ed8:	425a      	negs	r2, r3
 8015eda:	50e2      	str	r2, [r4, r3]
 8015edc:	e7d0      	b.n	8015e80 <_malloc_r+0x20>
 8015ede:	684b      	ldr	r3, [r1, #4]
 8015ee0:	428c      	cmp	r4, r1
 8015ee2:	bf16      	itet	ne
 8015ee4:	6063      	strne	r3, [r4, #4]
 8015ee6:	6013      	streq	r3, [r2, #0]
 8015ee8:	460c      	movne	r4, r1
 8015eea:	e7eb      	b.n	8015ec4 <_malloc_r+0x64>
 8015eec:	460c      	mov	r4, r1
 8015eee:	6849      	ldr	r1, [r1, #4]
 8015ef0:	e7cc      	b.n	8015e8c <_malloc_r+0x2c>
 8015ef2:	1cc4      	adds	r4, r0, #3
 8015ef4:	f024 0403 	bic.w	r4, r4, #3
 8015ef8:	42a0      	cmp	r0, r4
 8015efa:	d005      	beq.n	8015f08 <_malloc_r+0xa8>
 8015efc:	1a21      	subs	r1, r4, r0
 8015efe:	4630      	mov	r0, r6
 8015f00:	f000 fa98 	bl	8016434 <_sbrk_r>
 8015f04:	3001      	adds	r0, #1
 8015f06:	d0cf      	beq.n	8015ea8 <_malloc_r+0x48>
 8015f08:	6025      	str	r5, [r4, #0]
 8015f0a:	e7db      	b.n	8015ec4 <_malloc_r+0x64>
 8015f0c:	200039e0 	.word	0x200039e0
 8015f10:	200039e4 	.word	0x200039e4

08015f14 <__ssputs_r>:
 8015f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f18:	688e      	ldr	r6, [r1, #8]
 8015f1a:	4682      	mov	sl, r0
 8015f1c:	429e      	cmp	r6, r3
 8015f1e:	460c      	mov	r4, r1
 8015f20:	4690      	mov	r8, r2
 8015f22:	4699      	mov	r9, r3
 8015f24:	d837      	bhi.n	8015f96 <__ssputs_r+0x82>
 8015f26:	898a      	ldrh	r2, [r1, #12]
 8015f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015f2c:	d031      	beq.n	8015f92 <__ssputs_r+0x7e>
 8015f2e:	2302      	movs	r3, #2
 8015f30:	6825      	ldr	r5, [r4, #0]
 8015f32:	6909      	ldr	r1, [r1, #16]
 8015f34:	1a6f      	subs	r7, r5, r1
 8015f36:	6965      	ldr	r5, [r4, #20]
 8015f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8015f40:	f109 0301 	add.w	r3, r9, #1
 8015f44:	443b      	add	r3, r7
 8015f46:	429d      	cmp	r5, r3
 8015f48:	bf38      	it	cc
 8015f4a:	461d      	movcc	r5, r3
 8015f4c:	0553      	lsls	r3, r2, #21
 8015f4e:	d530      	bpl.n	8015fb2 <__ssputs_r+0x9e>
 8015f50:	4629      	mov	r1, r5
 8015f52:	f7ff ff85 	bl	8015e60 <_malloc_r>
 8015f56:	4606      	mov	r6, r0
 8015f58:	b950      	cbnz	r0, 8015f70 <__ssputs_r+0x5c>
 8015f5a:	230c      	movs	r3, #12
 8015f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f60:	f8ca 3000 	str.w	r3, [sl]
 8015f64:	89a3      	ldrh	r3, [r4, #12]
 8015f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f6a:	81a3      	strh	r3, [r4, #12]
 8015f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f70:	463a      	mov	r2, r7
 8015f72:	6921      	ldr	r1, [r4, #16]
 8015f74:	f7fc f93a 	bl	80121ec <memcpy>
 8015f78:	89a3      	ldrh	r3, [r4, #12]
 8015f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f82:	81a3      	strh	r3, [r4, #12]
 8015f84:	6126      	str	r6, [r4, #16]
 8015f86:	443e      	add	r6, r7
 8015f88:	6026      	str	r6, [r4, #0]
 8015f8a:	464e      	mov	r6, r9
 8015f8c:	6165      	str	r5, [r4, #20]
 8015f8e:	1bed      	subs	r5, r5, r7
 8015f90:	60a5      	str	r5, [r4, #8]
 8015f92:	454e      	cmp	r6, r9
 8015f94:	d900      	bls.n	8015f98 <__ssputs_r+0x84>
 8015f96:	464e      	mov	r6, r9
 8015f98:	4632      	mov	r2, r6
 8015f9a:	4641      	mov	r1, r8
 8015f9c:	6820      	ldr	r0, [r4, #0]
 8015f9e:	f000 fb11 	bl	80165c4 <memmove>
 8015fa2:	68a3      	ldr	r3, [r4, #8]
 8015fa4:	2000      	movs	r0, #0
 8015fa6:	1b9b      	subs	r3, r3, r6
 8015fa8:	60a3      	str	r3, [r4, #8]
 8015faa:	6823      	ldr	r3, [r4, #0]
 8015fac:	441e      	add	r6, r3
 8015fae:	6026      	str	r6, [r4, #0]
 8015fb0:	e7dc      	b.n	8015f6c <__ssputs_r+0x58>
 8015fb2:	462a      	mov	r2, r5
 8015fb4:	f000 fb21 	bl	80165fa <_realloc_r>
 8015fb8:	4606      	mov	r6, r0
 8015fba:	2800      	cmp	r0, #0
 8015fbc:	d1e2      	bne.n	8015f84 <__ssputs_r+0x70>
 8015fbe:	6921      	ldr	r1, [r4, #16]
 8015fc0:	4650      	mov	r0, sl
 8015fc2:	f7ff ff01 	bl	8015dc8 <_free_r>
 8015fc6:	e7c8      	b.n	8015f5a <__ssputs_r+0x46>

08015fc8 <_svfiprintf_r>:
 8015fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fcc:	461d      	mov	r5, r3
 8015fce:	898b      	ldrh	r3, [r1, #12]
 8015fd0:	b09d      	sub	sp, #116	; 0x74
 8015fd2:	061f      	lsls	r7, r3, #24
 8015fd4:	4680      	mov	r8, r0
 8015fd6:	460c      	mov	r4, r1
 8015fd8:	4616      	mov	r6, r2
 8015fda:	d50f      	bpl.n	8015ffc <_svfiprintf_r+0x34>
 8015fdc:	690b      	ldr	r3, [r1, #16]
 8015fde:	b96b      	cbnz	r3, 8015ffc <_svfiprintf_r+0x34>
 8015fe0:	2140      	movs	r1, #64	; 0x40
 8015fe2:	f7ff ff3d 	bl	8015e60 <_malloc_r>
 8015fe6:	6020      	str	r0, [r4, #0]
 8015fe8:	6120      	str	r0, [r4, #16]
 8015fea:	b928      	cbnz	r0, 8015ff8 <_svfiprintf_r+0x30>
 8015fec:	230c      	movs	r3, #12
 8015fee:	f8c8 3000 	str.w	r3, [r8]
 8015ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ff6:	e0c8      	b.n	801618a <_svfiprintf_r+0x1c2>
 8015ff8:	2340      	movs	r3, #64	; 0x40
 8015ffa:	6163      	str	r3, [r4, #20]
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8016000:	2320      	movs	r3, #32
 8016002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016006:	2330      	movs	r3, #48	; 0x30
 8016008:	f04f 0b01 	mov.w	fp, #1
 801600c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016010:	9503      	str	r5, [sp, #12]
 8016012:	4637      	mov	r7, r6
 8016014:	463d      	mov	r5, r7
 8016016:	f815 3b01 	ldrb.w	r3, [r5], #1
 801601a:	b10b      	cbz	r3, 8016020 <_svfiprintf_r+0x58>
 801601c:	2b25      	cmp	r3, #37	; 0x25
 801601e:	d13e      	bne.n	801609e <_svfiprintf_r+0xd6>
 8016020:	ebb7 0a06 	subs.w	sl, r7, r6
 8016024:	d00b      	beq.n	801603e <_svfiprintf_r+0x76>
 8016026:	4653      	mov	r3, sl
 8016028:	4632      	mov	r2, r6
 801602a:	4621      	mov	r1, r4
 801602c:	4640      	mov	r0, r8
 801602e:	f7ff ff71 	bl	8015f14 <__ssputs_r>
 8016032:	3001      	adds	r0, #1
 8016034:	f000 80a4 	beq.w	8016180 <_svfiprintf_r+0x1b8>
 8016038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801603a:	4453      	add	r3, sl
 801603c:	9309      	str	r3, [sp, #36]	; 0x24
 801603e:	783b      	ldrb	r3, [r7, #0]
 8016040:	2b00      	cmp	r3, #0
 8016042:	f000 809d 	beq.w	8016180 <_svfiprintf_r+0x1b8>
 8016046:	2300      	movs	r3, #0
 8016048:	f04f 32ff 	mov.w	r2, #4294967295
 801604c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016050:	9304      	str	r3, [sp, #16]
 8016052:	9307      	str	r3, [sp, #28]
 8016054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016058:	931a      	str	r3, [sp, #104]	; 0x68
 801605a:	462f      	mov	r7, r5
 801605c:	2205      	movs	r2, #5
 801605e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016062:	4850      	ldr	r0, [pc, #320]	; (80161a4 <_svfiprintf_r+0x1dc>)
 8016064:	f7ff fa9c 	bl	80155a0 <memchr>
 8016068:	9b04      	ldr	r3, [sp, #16]
 801606a:	b9d0      	cbnz	r0, 80160a2 <_svfiprintf_r+0xda>
 801606c:	06d9      	lsls	r1, r3, #27
 801606e:	bf44      	itt	mi
 8016070:	2220      	movmi	r2, #32
 8016072:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016076:	071a      	lsls	r2, r3, #28
 8016078:	bf44      	itt	mi
 801607a:	222b      	movmi	r2, #43	; 0x2b
 801607c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016080:	782a      	ldrb	r2, [r5, #0]
 8016082:	2a2a      	cmp	r2, #42	; 0x2a
 8016084:	d015      	beq.n	80160b2 <_svfiprintf_r+0xea>
 8016086:	462f      	mov	r7, r5
 8016088:	2000      	movs	r0, #0
 801608a:	250a      	movs	r5, #10
 801608c:	9a07      	ldr	r2, [sp, #28]
 801608e:	4639      	mov	r1, r7
 8016090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016094:	3b30      	subs	r3, #48	; 0x30
 8016096:	2b09      	cmp	r3, #9
 8016098:	d94d      	bls.n	8016136 <_svfiprintf_r+0x16e>
 801609a:	b1b8      	cbz	r0, 80160cc <_svfiprintf_r+0x104>
 801609c:	e00f      	b.n	80160be <_svfiprintf_r+0xf6>
 801609e:	462f      	mov	r7, r5
 80160a0:	e7b8      	b.n	8016014 <_svfiprintf_r+0x4c>
 80160a2:	4a40      	ldr	r2, [pc, #256]	; (80161a4 <_svfiprintf_r+0x1dc>)
 80160a4:	463d      	mov	r5, r7
 80160a6:	1a80      	subs	r0, r0, r2
 80160a8:	fa0b f000 	lsl.w	r0, fp, r0
 80160ac:	4318      	orrs	r0, r3
 80160ae:	9004      	str	r0, [sp, #16]
 80160b0:	e7d3      	b.n	801605a <_svfiprintf_r+0x92>
 80160b2:	9a03      	ldr	r2, [sp, #12]
 80160b4:	1d11      	adds	r1, r2, #4
 80160b6:	6812      	ldr	r2, [r2, #0]
 80160b8:	9103      	str	r1, [sp, #12]
 80160ba:	2a00      	cmp	r2, #0
 80160bc:	db01      	blt.n	80160c2 <_svfiprintf_r+0xfa>
 80160be:	9207      	str	r2, [sp, #28]
 80160c0:	e004      	b.n	80160cc <_svfiprintf_r+0x104>
 80160c2:	4252      	negs	r2, r2
 80160c4:	f043 0302 	orr.w	r3, r3, #2
 80160c8:	9207      	str	r2, [sp, #28]
 80160ca:	9304      	str	r3, [sp, #16]
 80160cc:	783b      	ldrb	r3, [r7, #0]
 80160ce:	2b2e      	cmp	r3, #46	; 0x2e
 80160d0:	d10c      	bne.n	80160ec <_svfiprintf_r+0x124>
 80160d2:	787b      	ldrb	r3, [r7, #1]
 80160d4:	2b2a      	cmp	r3, #42	; 0x2a
 80160d6:	d133      	bne.n	8016140 <_svfiprintf_r+0x178>
 80160d8:	9b03      	ldr	r3, [sp, #12]
 80160da:	3702      	adds	r7, #2
 80160dc:	1d1a      	adds	r2, r3, #4
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	9203      	str	r2, [sp, #12]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	bfb8      	it	lt
 80160e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80160ea:	9305      	str	r3, [sp, #20]
 80160ec:	4d2e      	ldr	r5, [pc, #184]	; (80161a8 <_svfiprintf_r+0x1e0>)
 80160ee:	2203      	movs	r2, #3
 80160f0:	7839      	ldrb	r1, [r7, #0]
 80160f2:	4628      	mov	r0, r5
 80160f4:	f7ff fa54 	bl	80155a0 <memchr>
 80160f8:	b138      	cbz	r0, 801610a <_svfiprintf_r+0x142>
 80160fa:	2340      	movs	r3, #64	; 0x40
 80160fc:	1b40      	subs	r0, r0, r5
 80160fe:	fa03 f000 	lsl.w	r0, r3, r0
 8016102:	9b04      	ldr	r3, [sp, #16]
 8016104:	3701      	adds	r7, #1
 8016106:	4303      	orrs	r3, r0
 8016108:	9304      	str	r3, [sp, #16]
 801610a:	7839      	ldrb	r1, [r7, #0]
 801610c:	2206      	movs	r2, #6
 801610e:	4827      	ldr	r0, [pc, #156]	; (80161ac <_svfiprintf_r+0x1e4>)
 8016110:	1c7e      	adds	r6, r7, #1
 8016112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016116:	f7ff fa43 	bl	80155a0 <memchr>
 801611a:	2800      	cmp	r0, #0
 801611c:	d038      	beq.n	8016190 <_svfiprintf_r+0x1c8>
 801611e:	4b24      	ldr	r3, [pc, #144]	; (80161b0 <_svfiprintf_r+0x1e8>)
 8016120:	bb13      	cbnz	r3, 8016168 <_svfiprintf_r+0x1a0>
 8016122:	9b03      	ldr	r3, [sp, #12]
 8016124:	3307      	adds	r3, #7
 8016126:	f023 0307 	bic.w	r3, r3, #7
 801612a:	3308      	adds	r3, #8
 801612c:	9303      	str	r3, [sp, #12]
 801612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016130:	444b      	add	r3, r9
 8016132:	9309      	str	r3, [sp, #36]	; 0x24
 8016134:	e76d      	b.n	8016012 <_svfiprintf_r+0x4a>
 8016136:	fb05 3202 	mla	r2, r5, r2, r3
 801613a:	2001      	movs	r0, #1
 801613c:	460f      	mov	r7, r1
 801613e:	e7a6      	b.n	801608e <_svfiprintf_r+0xc6>
 8016140:	2300      	movs	r3, #0
 8016142:	250a      	movs	r5, #10
 8016144:	4619      	mov	r1, r3
 8016146:	3701      	adds	r7, #1
 8016148:	9305      	str	r3, [sp, #20]
 801614a:	4638      	mov	r0, r7
 801614c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016150:	3a30      	subs	r2, #48	; 0x30
 8016152:	2a09      	cmp	r2, #9
 8016154:	d903      	bls.n	801615e <_svfiprintf_r+0x196>
 8016156:	2b00      	cmp	r3, #0
 8016158:	d0c8      	beq.n	80160ec <_svfiprintf_r+0x124>
 801615a:	9105      	str	r1, [sp, #20]
 801615c:	e7c6      	b.n	80160ec <_svfiprintf_r+0x124>
 801615e:	fb05 2101 	mla	r1, r5, r1, r2
 8016162:	2301      	movs	r3, #1
 8016164:	4607      	mov	r7, r0
 8016166:	e7f0      	b.n	801614a <_svfiprintf_r+0x182>
 8016168:	ab03      	add	r3, sp, #12
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	4622      	mov	r2, r4
 801616e:	4b11      	ldr	r3, [pc, #68]	; (80161b4 <_svfiprintf_r+0x1ec>)
 8016170:	a904      	add	r1, sp, #16
 8016172:	4640      	mov	r0, r8
 8016174:	f7fc f8de 	bl	8012334 <_printf_float>
 8016178:	f1b0 3fff 	cmp.w	r0, #4294967295
 801617c:	4681      	mov	r9, r0
 801617e:	d1d6      	bne.n	801612e <_svfiprintf_r+0x166>
 8016180:	89a3      	ldrh	r3, [r4, #12]
 8016182:	065b      	lsls	r3, r3, #25
 8016184:	f53f af35 	bmi.w	8015ff2 <_svfiprintf_r+0x2a>
 8016188:	9809      	ldr	r0, [sp, #36]	; 0x24
 801618a:	b01d      	add	sp, #116	; 0x74
 801618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016190:	ab03      	add	r3, sp, #12
 8016192:	9300      	str	r3, [sp, #0]
 8016194:	4622      	mov	r2, r4
 8016196:	4b07      	ldr	r3, [pc, #28]	; (80161b4 <_svfiprintf_r+0x1ec>)
 8016198:	a904      	add	r1, sp, #16
 801619a:	4640      	mov	r0, r8
 801619c:	f7fc fb76 	bl	801288c <_printf_i>
 80161a0:	e7ea      	b.n	8016178 <_svfiprintf_r+0x1b0>
 80161a2:	bf00      	nop
 80161a4:	0801a6d4 	.word	0x0801a6d4
 80161a8:	0801a6da 	.word	0x0801a6da
 80161ac:	0801a6de 	.word	0x0801a6de
 80161b0:	08012335 	.word	0x08012335
 80161b4:	08015f15 	.word	0x08015f15

080161b8 <__sfputc_r>:
 80161b8:	6893      	ldr	r3, [r2, #8]
 80161ba:	b410      	push	{r4}
 80161bc:	3b01      	subs	r3, #1
 80161be:	2b00      	cmp	r3, #0
 80161c0:	6093      	str	r3, [r2, #8]
 80161c2:	da07      	bge.n	80161d4 <__sfputc_r+0x1c>
 80161c4:	6994      	ldr	r4, [r2, #24]
 80161c6:	42a3      	cmp	r3, r4
 80161c8:	db01      	blt.n	80161ce <__sfputc_r+0x16>
 80161ca:	290a      	cmp	r1, #10
 80161cc:	d102      	bne.n	80161d4 <__sfputc_r+0x1c>
 80161ce:	bc10      	pop	{r4}
 80161d0:	f7fd bdb0 	b.w	8013d34 <__swbuf_r>
 80161d4:	6813      	ldr	r3, [r2, #0]
 80161d6:	1c58      	adds	r0, r3, #1
 80161d8:	6010      	str	r0, [r2, #0]
 80161da:	7019      	strb	r1, [r3, #0]
 80161dc:	4608      	mov	r0, r1
 80161de:	bc10      	pop	{r4}
 80161e0:	4770      	bx	lr

080161e2 <__sfputs_r>:
 80161e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e4:	4606      	mov	r6, r0
 80161e6:	460f      	mov	r7, r1
 80161e8:	4614      	mov	r4, r2
 80161ea:	18d5      	adds	r5, r2, r3
 80161ec:	42ac      	cmp	r4, r5
 80161ee:	d101      	bne.n	80161f4 <__sfputs_r+0x12>
 80161f0:	2000      	movs	r0, #0
 80161f2:	e007      	b.n	8016204 <__sfputs_r+0x22>
 80161f4:	463a      	mov	r2, r7
 80161f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161fa:	4630      	mov	r0, r6
 80161fc:	f7ff ffdc 	bl	80161b8 <__sfputc_r>
 8016200:	1c43      	adds	r3, r0, #1
 8016202:	d1f3      	bne.n	80161ec <__sfputs_r+0xa>
 8016204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016208 <_vfiprintf_r>:
 8016208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801620c:	460c      	mov	r4, r1
 801620e:	b09d      	sub	sp, #116	; 0x74
 8016210:	4617      	mov	r7, r2
 8016212:	461d      	mov	r5, r3
 8016214:	4606      	mov	r6, r0
 8016216:	b118      	cbz	r0, 8016220 <_vfiprintf_r+0x18>
 8016218:	6983      	ldr	r3, [r0, #24]
 801621a:	b90b      	cbnz	r3, 8016220 <_vfiprintf_r+0x18>
 801621c:	f7fe fd7c 	bl	8014d18 <__sinit>
 8016220:	4b7c      	ldr	r3, [pc, #496]	; (8016414 <_vfiprintf_r+0x20c>)
 8016222:	429c      	cmp	r4, r3
 8016224:	d158      	bne.n	80162d8 <_vfiprintf_r+0xd0>
 8016226:	6874      	ldr	r4, [r6, #4]
 8016228:	89a3      	ldrh	r3, [r4, #12]
 801622a:	0718      	lsls	r0, r3, #28
 801622c:	d55e      	bpl.n	80162ec <_vfiprintf_r+0xe4>
 801622e:	6923      	ldr	r3, [r4, #16]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d05b      	beq.n	80162ec <_vfiprintf_r+0xe4>
 8016234:	2300      	movs	r3, #0
 8016236:	9309      	str	r3, [sp, #36]	; 0x24
 8016238:	2320      	movs	r3, #32
 801623a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801623e:	2330      	movs	r3, #48	; 0x30
 8016240:	f04f 0b01 	mov.w	fp, #1
 8016244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016248:	9503      	str	r5, [sp, #12]
 801624a:	46b8      	mov	r8, r7
 801624c:	4645      	mov	r5, r8
 801624e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016252:	b10b      	cbz	r3, 8016258 <_vfiprintf_r+0x50>
 8016254:	2b25      	cmp	r3, #37	; 0x25
 8016256:	d154      	bne.n	8016302 <_vfiprintf_r+0xfa>
 8016258:	ebb8 0a07 	subs.w	sl, r8, r7
 801625c:	d00b      	beq.n	8016276 <_vfiprintf_r+0x6e>
 801625e:	4653      	mov	r3, sl
 8016260:	463a      	mov	r2, r7
 8016262:	4621      	mov	r1, r4
 8016264:	4630      	mov	r0, r6
 8016266:	f7ff ffbc 	bl	80161e2 <__sfputs_r>
 801626a:	3001      	adds	r0, #1
 801626c:	f000 80c2 	beq.w	80163f4 <_vfiprintf_r+0x1ec>
 8016270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016272:	4453      	add	r3, sl
 8016274:	9309      	str	r3, [sp, #36]	; 0x24
 8016276:	f898 3000 	ldrb.w	r3, [r8]
 801627a:	2b00      	cmp	r3, #0
 801627c:	f000 80ba 	beq.w	80163f4 <_vfiprintf_r+0x1ec>
 8016280:	2300      	movs	r3, #0
 8016282:	f04f 32ff 	mov.w	r2, #4294967295
 8016286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801628a:	9304      	str	r3, [sp, #16]
 801628c:	9307      	str	r3, [sp, #28]
 801628e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016292:	931a      	str	r3, [sp, #104]	; 0x68
 8016294:	46a8      	mov	r8, r5
 8016296:	2205      	movs	r2, #5
 8016298:	f818 1b01 	ldrb.w	r1, [r8], #1
 801629c:	485e      	ldr	r0, [pc, #376]	; (8016418 <_vfiprintf_r+0x210>)
 801629e:	f7ff f97f 	bl	80155a0 <memchr>
 80162a2:	9b04      	ldr	r3, [sp, #16]
 80162a4:	bb78      	cbnz	r0, 8016306 <_vfiprintf_r+0xfe>
 80162a6:	06d9      	lsls	r1, r3, #27
 80162a8:	bf44      	itt	mi
 80162aa:	2220      	movmi	r2, #32
 80162ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80162b0:	071a      	lsls	r2, r3, #28
 80162b2:	bf44      	itt	mi
 80162b4:	222b      	movmi	r2, #43	; 0x2b
 80162b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80162ba:	782a      	ldrb	r2, [r5, #0]
 80162bc:	2a2a      	cmp	r2, #42	; 0x2a
 80162be:	d02a      	beq.n	8016316 <_vfiprintf_r+0x10e>
 80162c0:	46a8      	mov	r8, r5
 80162c2:	2000      	movs	r0, #0
 80162c4:	250a      	movs	r5, #10
 80162c6:	9a07      	ldr	r2, [sp, #28]
 80162c8:	4641      	mov	r1, r8
 80162ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162ce:	3b30      	subs	r3, #48	; 0x30
 80162d0:	2b09      	cmp	r3, #9
 80162d2:	d969      	bls.n	80163a8 <_vfiprintf_r+0x1a0>
 80162d4:	b360      	cbz	r0, 8016330 <_vfiprintf_r+0x128>
 80162d6:	e024      	b.n	8016322 <_vfiprintf_r+0x11a>
 80162d8:	4b50      	ldr	r3, [pc, #320]	; (801641c <_vfiprintf_r+0x214>)
 80162da:	429c      	cmp	r4, r3
 80162dc:	d101      	bne.n	80162e2 <_vfiprintf_r+0xda>
 80162de:	68b4      	ldr	r4, [r6, #8]
 80162e0:	e7a2      	b.n	8016228 <_vfiprintf_r+0x20>
 80162e2:	4b4f      	ldr	r3, [pc, #316]	; (8016420 <_vfiprintf_r+0x218>)
 80162e4:	429c      	cmp	r4, r3
 80162e6:	bf08      	it	eq
 80162e8:	68f4      	ldreq	r4, [r6, #12]
 80162ea:	e79d      	b.n	8016228 <_vfiprintf_r+0x20>
 80162ec:	4621      	mov	r1, r4
 80162ee:	4630      	mov	r0, r6
 80162f0:	f7fd fd72 	bl	8013dd8 <__swsetup_r>
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d09d      	beq.n	8016234 <_vfiprintf_r+0x2c>
 80162f8:	f04f 30ff 	mov.w	r0, #4294967295
 80162fc:	b01d      	add	sp, #116	; 0x74
 80162fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016302:	46a8      	mov	r8, r5
 8016304:	e7a2      	b.n	801624c <_vfiprintf_r+0x44>
 8016306:	4a44      	ldr	r2, [pc, #272]	; (8016418 <_vfiprintf_r+0x210>)
 8016308:	4645      	mov	r5, r8
 801630a:	1a80      	subs	r0, r0, r2
 801630c:	fa0b f000 	lsl.w	r0, fp, r0
 8016310:	4318      	orrs	r0, r3
 8016312:	9004      	str	r0, [sp, #16]
 8016314:	e7be      	b.n	8016294 <_vfiprintf_r+0x8c>
 8016316:	9a03      	ldr	r2, [sp, #12]
 8016318:	1d11      	adds	r1, r2, #4
 801631a:	6812      	ldr	r2, [r2, #0]
 801631c:	9103      	str	r1, [sp, #12]
 801631e:	2a00      	cmp	r2, #0
 8016320:	db01      	blt.n	8016326 <_vfiprintf_r+0x11e>
 8016322:	9207      	str	r2, [sp, #28]
 8016324:	e004      	b.n	8016330 <_vfiprintf_r+0x128>
 8016326:	4252      	negs	r2, r2
 8016328:	f043 0302 	orr.w	r3, r3, #2
 801632c:	9207      	str	r2, [sp, #28]
 801632e:	9304      	str	r3, [sp, #16]
 8016330:	f898 3000 	ldrb.w	r3, [r8]
 8016334:	2b2e      	cmp	r3, #46	; 0x2e
 8016336:	d10e      	bne.n	8016356 <_vfiprintf_r+0x14e>
 8016338:	f898 3001 	ldrb.w	r3, [r8, #1]
 801633c:	2b2a      	cmp	r3, #42	; 0x2a
 801633e:	d138      	bne.n	80163b2 <_vfiprintf_r+0x1aa>
 8016340:	9b03      	ldr	r3, [sp, #12]
 8016342:	f108 0802 	add.w	r8, r8, #2
 8016346:	1d1a      	adds	r2, r3, #4
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	9203      	str	r2, [sp, #12]
 801634c:	2b00      	cmp	r3, #0
 801634e:	bfb8      	it	lt
 8016350:	f04f 33ff 	movlt.w	r3, #4294967295
 8016354:	9305      	str	r3, [sp, #20]
 8016356:	4d33      	ldr	r5, [pc, #204]	; (8016424 <_vfiprintf_r+0x21c>)
 8016358:	2203      	movs	r2, #3
 801635a:	f898 1000 	ldrb.w	r1, [r8]
 801635e:	4628      	mov	r0, r5
 8016360:	f7ff f91e 	bl	80155a0 <memchr>
 8016364:	b140      	cbz	r0, 8016378 <_vfiprintf_r+0x170>
 8016366:	2340      	movs	r3, #64	; 0x40
 8016368:	1b40      	subs	r0, r0, r5
 801636a:	fa03 f000 	lsl.w	r0, r3, r0
 801636e:	9b04      	ldr	r3, [sp, #16]
 8016370:	f108 0801 	add.w	r8, r8, #1
 8016374:	4303      	orrs	r3, r0
 8016376:	9304      	str	r3, [sp, #16]
 8016378:	f898 1000 	ldrb.w	r1, [r8]
 801637c:	2206      	movs	r2, #6
 801637e:	482a      	ldr	r0, [pc, #168]	; (8016428 <_vfiprintf_r+0x220>)
 8016380:	f108 0701 	add.w	r7, r8, #1
 8016384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016388:	f7ff f90a 	bl	80155a0 <memchr>
 801638c:	2800      	cmp	r0, #0
 801638e:	d037      	beq.n	8016400 <_vfiprintf_r+0x1f8>
 8016390:	4b26      	ldr	r3, [pc, #152]	; (801642c <_vfiprintf_r+0x224>)
 8016392:	bb1b      	cbnz	r3, 80163dc <_vfiprintf_r+0x1d4>
 8016394:	9b03      	ldr	r3, [sp, #12]
 8016396:	3307      	adds	r3, #7
 8016398:	f023 0307 	bic.w	r3, r3, #7
 801639c:	3308      	adds	r3, #8
 801639e:	9303      	str	r3, [sp, #12]
 80163a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163a2:	444b      	add	r3, r9
 80163a4:	9309      	str	r3, [sp, #36]	; 0x24
 80163a6:	e750      	b.n	801624a <_vfiprintf_r+0x42>
 80163a8:	fb05 3202 	mla	r2, r5, r2, r3
 80163ac:	2001      	movs	r0, #1
 80163ae:	4688      	mov	r8, r1
 80163b0:	e78a      	b.n	80162c8 <_vfiprintf_r+0xc0>
 80163b2:	2300      	movs	r3, #0
 80163b4:	250a      	movs	r5, #10
 80163b6:	4619      	mov	r1, r3
 80163b8:	f108 0801 	add.w	r8, r8, #1
 80163bc:	9305      	str	r3, [sp, #20]
 80163be:	4640      	mov	r0, r8
 80163c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163c4:	3a30      	subs	r2, #48	; 0x30
 80163c6:	2a09      	cmp	r2, #9
 80163c8:	d903      	bls.n	80163d2 <_vfiprintf_r+0x1ca>
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d0c3      	beq.n	8016356 <_vfiprintf_r+0x14e>
 80163ce:	9105      	str	r1, [sp, #20]
 80163d0:	e7c1      	b.n	8016356 <_vfiprintf_r+0x14e>
 80163d2:	fb05 2101 	mla	r1, r5, r1, r2
 80163d6:	2301      	movs	r3, #1
 80163d8:	4680      	mov	r8, r0
 80163da:	e7f0      	b.n	80163be <_vfiprintf_r+0x1b6>
 80163dc:	ab03      	add	r3, sp, #12
 80163de:	9300      	str	r3, [sp, #0]
 80163e0:	4622      	mov	r2, r4
 80163e2:	4b13      	ldr	r3, [pc, #76]	; (8016430 <_vfiprintf_r+0x228>)
 80163e4:	a904      	add	r1, sp, #16
 80163e6:	4630      	mov	r0, r6
 80163e8:	f7fb ffa4 	bl	8012334 <_printf_float>
 80163ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80163f0:	4681      	mov	r9, r0
 80163f2:	d1d5      	bne.n	80163a0 <_vfiprintf_r+0x198>
 80163f4:	89a3      	ldrh	r3, [r4, #12]
 80163f6:	065b      	lsls	r3, r3, #25
 80163f8:	f53f af7e 	bmi.w	80162f8 <_vfiprintf_r+0xf0>
 80163fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163fe:	e77d      	b.n	80162fc <_vfiprintf_r+0xf4>
 8016400:	ab03      	add	r3, sp, #12
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	4622      	mov	r2, r4
 8016406:	4b0a      	ldr	r3, [pc, #40]	; (8016430 <_vfiprintf_r+0x228>)
 8016408:	a904      	add	r1, sp, #16
 801640a:	4630      	mov	r0, r6
 801640c:	f7fc fa3e 	bl	801288c <_printf_i>
 8016410:	e7ec      	b.n	80163ec <_vfiprintf_r+0x1e4>
 8016412:	bf00      	nop
 8016414:	0801a588 	.word	0x0801a588
 8016418:	0801a6d4 	.word	0x0801a6d4
 801641c:	0801a5a8 	.word	0x0801a5a8
 8016420:	0801a568 	.word	0x0801a568
 8016424:	0801a6da 	.word	0x0801a6da
 8016428:	0801a6de 	.word	0x0801a6de
 801642c:	08012335 	.word	0x08012335
 8016430:	080161e3 	.word	0x080161e3

08016434 <_sbrk_r>:
 8016434:	b538      	push	{r3, r4, r5, lr}
 8016436:	2300      	movs	r3, #0
 8016438:	4c05      	ldr	r4, [pc, #20]	; (8016450 <_sbrk_r+0x1c>)
 801643a:	4605      	mov	r5, r0
 801643c:	4608      	mov	r0, r1
 801643e:	6023      	str	r3, [r4, #0]
 8016440:	f000 f91c 	bl	801667c <_sbrk>
 8016444:	1c43      	adds	r3, r0, #1
 8016446:	d102      	bne.n	801644e <_sbrk_r+0x1a>
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	b103      	cbz	r3, 801644e <_sbrk_r+0x1a>
 801644c:	602b      	str	r3, [r5, #0]
 801644e:	bd38      	pop	{r3, r4, r5, pc}
 8016450:	20004c34 	.word	0x20004c34

08016454 <__sread>:
 8016454:	b510      	push	{r4, lr}
 8016456:	460c      	mov	r4, r1
 8016458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801645c:	f000 f8f4 	bl	8016648 <_read_r>
 8016460:	2800      	cmp	r0, #0
 8016462:	bfab      	itete	ge
 8016464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016466:	89a3      	ldrhlt	r3, [r4, #12]
 8016468:	181b      	addge	r3, r3, r0
 801646a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801646e:	bfac      	ite	ge
 8016470:	6563      	strge	r3, [r4, #84]	; 0x54
 8016472:	81a3      	strhlt	r3, [r4, #12]
 8016474:	bd10      	pop	{r4, pc}

08016476 <__swrite>:
 8016476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801647a:	461f      	mov	r7, r3
 801647c:	898b      	ldrh	r3, [r1, #12]
 801647e:	4605      	mov	r5, r0
 8016480:	05db      	lsls	r3, r3, #23
 8016482:	460c      	mov	r4, r1
 8016484:	4616      	mov	r6, r2
 8016486:	d505      	bpl.n	8016494 <__swrite+0x1e>
 8016488:	2302      	movs	r3, #2
 801648a:	2200      	movs	r2, #0
 801648c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016490:	f000 f886 	bl	80165a0 <_lseek_r>
 8016494:	89a3      	ldrh	r3, [r4, #12]
 8016496:	4632      	mov	r2, r6
 8016498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801649c:	81a3      	strh	r3, [r4, #12]
 801649e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164a2:	463b      	mov	r3, r7
 80164a4:	4628      	mov	r0, r5
 80164a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164aa:	f000 b835 	b.w	8016518 <_write_r>

080164ae <__sseek>:
 80164ae:	b510      	push	{r4, lr}
 80164b0:	460c      	mov	r4, r1
 80164b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164b6:	f000 f873 	bl	80165a0 <_lseek_r>
 80164ba:	1c43      	adds	r3, r0, #1
 80164bc:	89a3      	ldrh	r3, [r4, #12]
 80164be:	bf15      	itete	ne
 80164c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80164c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80164c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80164ca:	81a3      	strheq	r3, [r4, #12]
 80164cc:	bf18      	it	ne
 80164ce:	81a3      	strhne	r3, [r4, #12]
 80164d0:	bd10      	pop	{r4, pc}

080164d2 <__sclose>:
 80164d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164d6:	f000 b831 	b.w	801653c <_close_r>

080164da <strncmp>:
 80164da:	b510      	push	{r4, lr}
 80164dc:	b16a      	cbz	r2, 80164fa <strncmp+0x20>
 80164de:	3901      	subs	r1, #1
 80164e0:	1884      	adds	r4, r0, r2
 80164e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80164e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80164ea:	4293      	cmp	r3, r2
 80164ec:	d103      	bne.n	80164f6 <strncmp+0x1c>
 80164ee:	42a0      	cmp	r0, r4
 80164f0:	d001      	beq.n	80164f6 <strncmp+0x1c>
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d1f5      	bne.n	80164e2 <strncmp+0x8>
 80164f6:	1a98      	subs	r0, r3, r2
 80164f8:	bd10      	pop	{r4, pc}
 80164fa:	4610      	mov	r0, r2
 80164fc:	e7fc      	b.n	80164f8 <strncmp+0x1e>

080164fe <__ascii_wctomb>:
 80164fe:	b149      	cbz	r1, 8016514 <__ascii_wctomb+0x16>
 8016500:	2aff      	cmp	r2, #255	; 0xff
 8016502:	bf8b      	itete	hi
 8016504:	238a      	movhi	r3, #138	; 0x8a
 8016506:	700a      	strbls	r2, [r1, #0]
 8016508:	6003      	strhi	r3, [r0, #0]
 801650a:	2001      	movls	r0, #1
 801650c:	bf88      	it	hi
 801650e:	f04f 30ff 	movhi.w	r0, #4294967295
 8016512:	4770      	bx	lr
 8016514:	4608      	mov	r0, r1
 8016516:	4770      	bx	lr

08016518 <_write_r>:
 8016518:	b538      	push	{r3, r4, r5, lr}
 801651a:	4605      	mov	r5, r0
 801651c:	4608      	mov	r0, r1
 801651e:	4611      	mov	r1, r2
 8016520:	2200      	movs	r2, #0
 8016522:	4c05      	ldr	r4, [pc, #20]	; (8016538 <_write_r+0x20>)
 8016524:	6022      	str	r2, [r4, #0]
 8016526:	461a      	mov	r2, r3
 8016528:	f7ed fb0f 	bl	8003b4a <_write>
 801652c:	1c43      	adds	r3, r0, #1
 801652e:	d102      	bne.n	8016536 <_write_r+0x1e>
 8016530:	6823      	ldr	r3, [r4, #0]
 8016532:	b103      	cbz	r3, 8016536 <_write_r+0x1e>
 8016534:	602b      	str	r3, [r5, #0]
 8016536:	bd38      	pop	{r3, r4, r5, pc}
 8016538:	20004c34 	.word	0x20004c34

0801653c <_close_r>:
 801653c:	b538      	push	{r3, r4, r5, lr}
 801653e:	2300      	movs	r3, #0
 8016540:	4c05      	ldr	r4, [pc, #20]	; (8016558 <_close_r+0x1c>)
 8016542:	4605      	mov	r5, r0
 8016544:	4608      	mov	r0, r1
 8016546:	6023      	str	r3, [r4, #0]
 8016548:	f7ed fb1b 	bl	8003b82 <_close>
 801654c:	1c43      	adds	r3, r0, #1
 801654e:	d102      	bne.n	8016556 <_close_r+0x1a>
 8016550:	6823      	ldr	r3, [r4, #0]
 8016552:	b103      	cbz	r3, 8016556 <_close_r+0x1a>
 8016554:	602b      	str	r3, [r5, #0]
 8016556:	bd38      	pop	{r3, r4, r5, pc}
 8016558:	20004c34 	.word	0x20004c34

0801655c <_fstat_r>:
 801655c:	b538      	push	{r3, r4, r5, lr}
 801655e:	2300      	movs	r3, #0
 8016560:	4c06      	ldr	r4, [pc, #24]	; (801657c <_fstat_r+0x20>)
 8016562:	4605      	mov	r5, r0
 8016564:	4608      	mov	r0, r1
 8016566:	4611      	mov	r1, r2
 8016568:	6023      	str	r3, [r4, #0]
 801656a:	f7ed fb15 	bl	8003b98 <_fstat>
 801656e:	1c43      	adds	r3, r0, #1
 8016570:	d102      	bne.n	8016578 <_fstat_r+0x1c>
 8016572:	6823      	ldr	r3, [r4, #0]
 8016574:	b103      	cbz	r3, 8016578 <_fstat_r+0x1c>
 8016576:	602b      	str	r3, [r5, #0]
 8016578:	bd38      	pop	{r3, r4, r5, pc}
 801657a:	bf00      	nop
 801657c:	20004c34 	.word	0x20004c34

08016580 <_isatty_r>:
 8016580:	b538      	push	{r3, r4, r5, lr}
 8016582:	2300      	movs	r3, #0
 8016584:	4c05      	ldr	r4, [pc, #20]	; (801659c <_isatty_r+0x1c>)
 8016586:	4605      	mov	r5, r0
 8016588:	4608      	mov	r0, r1
 801658a:	6023      	str	r3, [r4, #0]
 801658c:	f7ed fb13 	bl	8003bb6 <_isatty>
 8016590:	1c43      	adds	r3, r0, #1
 8016592:	d102      	bne.n	801659a <_isatty_r+0x1a>
 8016594:	6823      	ldr	r3, [r4, #0]
 8016596:	b103      	cbz	r3, 801659a <_isatty_r+0x1a>
 8016598:	602b      	str	r3, [r5, #0]
 801659a:	bd38      	pop	{r3, r4, r5, pc}
 801659c:	20004c34 	.word	0x20004c34

080165a0 <_lseek_r>:
 80165a0:	b538      	push	{r3, r4, r5, lr}
 80165a2:	4605      	mov	r5, r0
 80165a4:	4608      	mov	r0, r1
 80165a6:	4611      	mov	r1, r2
 80165a8:	2200      	movs	r2, #0
 80165aa:	4c05      	ldr	r4, [pc, #20]	; (80165c0 <_lseek_r+0x20>)
 80165ac:	6022      	str	r2, [r4, #0]
 80165ae:	461a      	mov	r2, r3
 80165b0:	f7ed fb0b 	bl	8003bca <_lseek>
 80165b4:	1c43      	adds	r3, r0, #1
 80165b6:	d102      	bne.n	80165be <_lseek_r+0x1e>
 80165b8:	6823      	ldr	r3, [r4, #0]
 80165ba:	b103      	cbz	r3, 80165be <_lseek_r+0x1e>
 80165bc:	602b      	str	r3, [r5, #0]
 80165be:	bd38      	pop	{r3, r4, r5, pc}
 80165c0:	20004c34 	.word	0x20004c34

080165c4 <memmove>:
 80165c4:	4288      	cmp	r0, r1
 80165c6:	b510      	push	{r4, lr}
 80165c8:	eb01 0302 	add.w	r3, r1, r2
 80165cc:	d807      	bhi.n	80165de <memmove+0x1a>
 80165ce:	1e42      	subs	r2, r0, #1
 80165d0:	4299      	cmp	r1, r3
 80165d2:	d00a      	beq.n	80165ea <memmove+0x26>
 80165d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80165dc:	e7f8      	b.n	80165d0 <memmove+0xc>
 80165de:	4283      	cmp	r3, r0
 80165e0:	d9f5      	bls.n	80165ce <memmove+0xa>
 80165e2:	1881      	adds	r1, r0, r2
 80165e4:	1ad2      	subs	r2, r2, r3
 80165e6:	42d3      	cmn	r3, r2
 80165e8:	d100      	bne.n	80165ec <memmove+0x28>
 80165ea:	bd10      	pop	{r4, pc}
 80165ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80165f4:	e7f7      	b.n	80165e6 <memmove+0x22>

080165f6 <__malloc_lock>:
 80165f6:	4770      	bx	lr

080165f8 <__malloc_unlock>:
 80165f8:	4770      	bx	lr

080165fa <_realloc_r>:
 80165fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fc:	4607      	mov	r7, r0
 80165fe:	4614      	mov	r4, r2
 8016600:	460e      	mov	r6, r1
 8016602:	b921      	cbnz	r1, 801660e <_realloc_r+0x14>
 8016604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016608:	4611      	mov	r1, r2
 801660a:	f7ff bc29 	b.w	8015e60 <_malloc_r>
 801660e:	b922      	cbnz	r2, 801661a <_realloc_r+0x20>
 8016610:	f7ff fbda 	bl	8015dc8 <_free_r>
 8016614:	4625      	mov	r5, r4
 8016616:	4628      	mov	r0, r5
 8016618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801661a:	f000 f827 	bl	801666c <_malloc_usable_size_r>
 801661e:	42a0      	cmp	r0, r4
 8016620:	d20f      	bcs.n	8016642 <_realloc_r+0x48>
 8016622:	4621      	mov	r1, r4
 8016624:	4638      	mov	r0, r7
 8016626:	f7ff fc1b 	bl	8015e60 <_malloc_r>
 801662a:	4605      	mov	r5, r0
 801662c:	2800      	cmp	r0, #0
 801662e:	d0f2      	beq.n	8016616 <_realloc_r+0x1c>
 8016630:	4631      	mov	r1, r6
 8016632:	4622      	mov	r2, r4
 8016634:	f7fb fdda 	bl	80121ec <memcpy>
 8016638:	4631      	mov	r1, r6
 801663a:	4638      	mov	r0, r7
 801663c:	f7ff fbc4 	bl	8015dc8 <_free_r>
 8016640:	e7e9      	b.n	8016616 <_realloc_r+0x1c>
 8016642:	4635      	mov	r5, r6
 8016644:	e7e7      	b.n	8016616 <_realloc_r+0x1c>
	...

08016648 <_read_r>:
 8016648:	b538      	push	{r3, r4, r5, lr}
 801664a:	4605      	mov	r5, r0
 801664c:	4608      	mov	r0, r1
 801664e:	4611      	mov	r1, r2
 8016650:	2200      	movs	r2, #0
 8016652:	4c05      	ldr	r4, [pc, #20]	; (8016668 <_read_r+0x20>)
 8016654:	6022      	str	r2, [r4, #0]
 8016656:	461a      	mov	r2, r3
 8016658:	f7ed fa5a 	bl	8003b10 <_read>
 801665c:	1c43      	adds	r3, r0, #1
 801665e:	d102      	bne.n	8016666 <_read_r+0x1e>
 8016660:	6823      	ldr	r3, [r4, #0]
 8016662:	b103      	cbz	r3, 8016666 <_read_r+0x1e>
 8016664:	602b      	str	r3, [r5, #0]
 8016666:	bd38      	pop	{r3, r4, r5, pc}
 8016668:	20004c34 	.word	0x20004c34

0801666c <_malloc_usable_size_r>:
 801666c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016670:	1f18      	subs	r0, r3, #4
 8016672:	2b00      	cmp	r3, #0
 8016674:	bfbc      	itt	lt
 8016676:	580b      	ldrlt	r3, [r1, r0]
 8016678:	18c0      	addlt	r0, r0, r3
 801667a:	4770      	bx	lr

0801667c <_sbrk>:
 801667c:	4b04      	ldr	r3, [pc, #16]	; (8016690 <_sbrk+0x14>)
 801667e:	4602      	mov	r2, r0
 8016680:	6819      	ldr	r1, [r3, #0]
 8016682:	b909      	cbnz	r1, 8016688 <_sbrk+0xc>
 8016684:	4903      	ldr	r1, [pc, #12]	; (8016694 <_sbrk+0x18>)
 8016686:	6019      	str	r1, [r3, #0]
 8016688:	6818      	ldr	r0, [r3, #0]
 801668a:	4402      	add	r2, r0
 801668c:	601a      	str	r2, [r3, #0]
 801668e:	4770      	bx	lr
 8016690:	200039e8 	.word	0x200039e8
 8016694:	20004c38 	.word	0x20004c38

08016698 <_init>:
 8016698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801669a:	bf00      	nop
 801669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801669e:	bc08      	pop	{r3}
 80166a0:	469e      	mov	lr, r3
 80166a2:	4770      	bx	lr

080166a4 <_fini>:
 80166a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166a6:	bf00      	nop
 80166a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166aa:	bc08      	pop	{r3}
 80166ac:	469e      	mov	lr, r3
 80166ae:	4770      	bx	lr
